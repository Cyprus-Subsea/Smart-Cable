
icListen_SD9_USB_R_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000169d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bcc  08016b60  08016b60  00026b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801772c  0801772c  00030378  2**0
                  CONTENTS
  4 .ARM          00000008  0801772c  0801772c  0002772c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017734  08017734  00030378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017734  08017734  00027734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017738  08017738  00027738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000378  20000000  0801773c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030378  2**0
                  CONTENTS
 10 .bss          0000bc0c  20000378  20000378  00030378  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000bf84  2000bf84  00030378  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030378  2**0
                  CONTENTS, READONLY
 13 .debug_info   000329dd  00000000  00000000  000303a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000074c5  00000000  00000000  00062d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024d8  00000000  00000000  0006a250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002200  00000000  00000000  0006c728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b016  00000000  00000000  0006e928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033b92  00000000  00000000  0009993e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dad88  00000000  00000000  000cd4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a8258  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a8f8  00000000  00000000  001a82a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000378 	.word	0x20000378
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016b48 	.word	0x08016b48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000037c 	.word	0x2000037c
 80001cc:	08016b48 	.word	0x08016b48

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <UI_init>:
char temp_array[400];
const char* UI_commands_strings[]={"help here\r"};


void UI_init(UI_typedef* UI_obj)
{
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b096      	sub	sp, #88	; 0x58
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	UI_messages_init(UI_obj);
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f000 f967 	bl	8000880 <UI_messages_init>


	osMessageQDef(UI_events_q, 20, uint8_t);
 80005b2:	4b20      	ldr	r3, [pc, #128]	; (8000634 <UI_init+0x90>)
 80005b4:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80005b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_obj->events_q= osMessageCreate(osMessageQ(UI_events_q), NULL);
 80005be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005c2:	2100      	movs	r1, #0
 80005c4:	4618      	mov	r0, r3
 80005c6:	f011 f85e 	bl	8011686 <osMessageCreate>
 80005ca:	4602      	mov	r2, r0
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	609a      	str	r2, [r3, #8]

	osMessageQDef(UI_media_rx_q, 20, uint16_t);
 80005d0:	4b19      	ldr	r3, [pc, #100]	; (8000638 <UI_init+0x94>)
 80005d2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_obj->media_rx_messages_q= osMessageCreate(osMessageQ(UI_media_rx_q), NULL);
 80005dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f011 f84f 	bl	8011686 <osMessageCreate>
 80005e8:	4602      	mov	r2, r0
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	601a      	str	r2, [r3, #0]

	osMessageQDef(UI_media_tx_q, 200, uint8_t);
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <UI_init+0x98>)
 80005f0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80005f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_obj->media_tx_q = osMessageCreate(osMessageQ(UI_media_tx_q), NULL);
 80005fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f011 f840 	bl	8011686 <osMessageCreate>
 8000606:	4602      	mov	r2, r0
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	605a      	str	r2, [r3, #4]

	osThreadDef(UI_task, UI_loop, osPriorityNormal, 0, 256);
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <UI_init+0x9c>)
 800060e:	f107 040c 	add.w	r4, r7, #12
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(UI_task), UI_obj);
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	6879      	ldr	r1, [r7, #4]
 8000626:	4618      	mov	r0, r3
 8000628:	f010 ffcd 	bl	80115c6 <osThreadCreate>
}
 800062c:	bf00      	nop
 800062e:	3758      	adds	r7, #88	; 0x58
 8000630:	46bd      	mov	sp, r7
 8000632:	bdb0      	pop	{r4, r5, r7, pc}
 8000634:	08016b74 	.word	0x08016b74
 8000638:	08016b84 	.word	0x08016b84
 800063c:	08016b94 	.word	0x08016b94
 8000640:	08016ba4 	.word	0x08016ba4

08000644 <UI_loop>:


void UI_loop(UI_typedef* UI_obj)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	 uint16_t msg_indx;
	 for(;;)
	 {
		if(xQueueReceive(UI_obj->media_rx_messages_q,&msg_indx,osWaitForever))
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f107 010a 	add.w	r1, r7, #10
 8000654:	f04f 32ff 	mov.w	r2, #4294967295
 8000658:	4618      	mov	r0, r3
 800065a:	f011 fc79 	bl	8011f50 <xQueueReceive>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0f3      	beq.n	800064c <UI_loop+0x8>
		{   uint8_t* msg=UI_obj->rx_buffer+msg_indx;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	330e      	adds	r3, #14
 8000668:	897a      	ldrh	r2, [r7, #10]
 800066a:	4413      	add	r3, r2
 800066c:	60fb      	str	r3, [r7, #12]
			UI_parse_message(UI_obj,msg);
 800066e:	68f9      	ldr	r1, [r7, #12]
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f000 f8c7 	bl	8000804 <UI_parse_message>
		if(xQueueReceive(UI_obj->media_rx_messages_q,&msg_indx,osWaitForever))
 8000676:	e7e9      	b.n	800064c <UI_loop+0x8>

08000678 <UI_media_process_byte>:

}


void UI_media_process_byte(UI_typedef* UI_obj,uint8_t rx_byte)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	if(UI_obj->media_status==UI_MEDIA_READY && rx_byte!=0x00)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	7b5b      	ldrb	r3, [r3, #13]
 8000688:	2b0a      	cmp	r3, #10
 800068a:	d160      	bne.n	800074e <UI_media_process_byte+0xd6>
 800068c:	78fb      	ldrb	r3, [r7, #3]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d05d      	beq.n	800074e <UI_media_process_byte+0xd6>
	{
		UI_obj->rx_buffer[UI_obj->rx_buffer_indx]=rx_byte;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000698:	b29b      	uxth	r3, r3
 800069a:	461a      	mov	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4413      	add	r3, r2
 80006a0:	78fa      	ldrb	r2, [r7, #3]
 80006a2:	739a      	strb	r2, [r3, #14]
		if(rx_byte=='\r')
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	2b0d      	cmp	r3, #13
 80006a8:	d132      	bne.n	8000710 <UI_media_process_byte+0x98>
		{
			UI_obj->rx_buffer[UI_obj->rx_buffer_indx]=0x00;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	461a      	mov	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4413      	add	r3, r2
 80006b8:	2200      	movs	r2, #0
 80006ba:	739a      	strb	r2, [r3, #14]
			osMessagePut(UI_obj->media_rx_messages_q,UI_obj->rx_buffer_new_string_indx,0);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	6818      	ldr	r0, [r3, #0]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	2200      	movs	r2, #0
 80006ca:	4619      	mov	r1, r3
 80006cc:	f011 f804 	bl	80116d8 <osMessagePut>
			if(UI_obj->rx_buffer_indx>UI_RX_BUFFER_THR) UI_obj->rx_buffer_indx=0;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80006dc:	d907      	bls.n	80006ee <UI_media_process_byte+0x76>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 80006e6:	2200      	movs	r2, #0
 80006e8:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
 80006ec:	e008      	b.n	8000700 <UI_media_process_byte+0x88>
			else  UI_obj->rx_buffer_indx++;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	3301      	adds	r3, #1
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
			UI_obj->rx_buffer_new_string_indx=UI_obj->rx_buffer_indx;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000706:	b29a      	uxth	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
 800070e:	e008      	b.n	8000722 <UI_media_process_byte+0xaa>
		}
		else UI_obj->rx_buffer_indx++;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000716:	b29b      	uxth	r3, r3
 8000718:	3301      	adds	r3, #1
 800071a:	b29a      	uxth	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
		if(UI_obj->rx_buffer_indx==UI_RX_BUFFER_SIZE)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000728:	b29b      	uxth	r3, r3
 800072a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800072e:	d11d      	bne.n	800076c <UI_media_process_byte+0xf4>
		{
			UI_obj->rx_buffer_indx=0;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2200      	movs	r2, #0
 8000734:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 8000738:	2200      	movs	r2, #0
 800073a:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
			UI_obj->rx_buffer_new_string_indx=UI_obj->rx_buffer_indx;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000744:	b29a      	uxth	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
		if(UI_obj->rx_buffer_indx==UI_RX_BUFFER_SIZE)
 800074c:	e00e      	b.n	800076c <UI_media_process_byte+0xf4>
		}
	}
	else
	{
		UI_obj->rx_buffer_indx=0;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 8000756:	2200      	movs	r2, #0
 8000758:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
		UI_obj->rx_buffer_new_string_indx=UI_obj->rx_buffer_indx;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000762:	b29a      	uxth	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
	}
}
 800076a:	bf00      	nop
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <UI_media_get_byte>:

uint8_t UI_media_get_byte(UI_typedef* UI_obj,uint8_t* tx_byte)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
	osEvent res=osMessageGet(UI_obj->media_tx_q,0);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6859      	ldr	r1, [r3, #4]
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2200      	movs	r2, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f010 ffe5 	bl	8011758 <osMessageGet>
	if(res.status==osEventMessage)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	2b10      	cmp	r3, #16
 8000792:	d105      	bne.n	80007a0 <UI_media_get_byte+0x2c>
    {
		*tx_byte=res.value.v;
 8000794:	693b      	ldr	r3, [r7, #16]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	701a      	strb	r2, [r3, #0]
		return UI_F_OK;
 800079c:	2300      	movs	r3, #0
 800079e:	e000      	b.n	80007a2 <UI_media_get_byte+0x2e>
    }
  return UI_F_ERR;
 80007a0:	2301      	movs	r3, #1
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <UI_send_msg>:


void UI_send_msg(UI_typedef* UI_obj,uint8_t cmd_id,void* arg)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	60f8      	str	r0, [r7, #12]
 80007b2:	460b      	mov	r3, r1
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	72fb      	strb	r3, [r7, #11]
 memory_region_pointer*  ptr=arg;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	613b      	str	r3, [r7, #16]

 switch(cmd_id)
 80007bc:	7afb      	ldrb	r3, [r7, #11]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d01a      	beq.n	80007f8 <UI_send_msg+0x4e>
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d000      	beq.n	80007c8 <UI_send_msg+0x1e>
		   osMessagePut(UI_obj->media_tx_q,*((uint8_t*)(ptr->start_addr)+i),osWaitForever);
	   }
     break;
 }

}
 80007c6:	e018      	b.n	80007fa <UI_send_msg+0x50>
       for(int i=0;i<ptr->size;i++)
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	e00e      	b.n	80007ec <UI_send_msg+0x42>
		   osMessagePut(UI_obj->media_tx_q,*((uint8_t*)(ptr->start_addr)+i),osWaitForever);
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	6858      	ldr	r0, [r3, #4]
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	4413      	add	r3, r2
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	f04f 32ff 	mov.w	r2, #4294967295
 80007e0:	4619      	mov	r1, r3
 80007e2:	f010 ff79 	bl	80116d8 <osMessagePut>
       for(int i=0;i<ptr->size;i++)
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	3301      	adds	r3, #1
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	685a      	ldr	r2, [r3, #4]
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d8eb      	bhi.n	80007ce <UI_send_msg+0x24>
     break;
 80007f6:	e000      	b.n	80007fa <UI_send_msg+0x50>
	 break;
 80007f8:	bf00      	nop
}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <UI_parse_message>:
	return UI_F_ERR;
}


int UI_parse_message(UI_typedef* UI_obj,uint8_t* msg)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
 char* pch;
 pch=strtok(msg," ");
 800080e:	4919      	ldr	r1, [pc, #100]	; (8000874 <UI_parse_message+0x70>)
 8000810:	6838      	ldr	r0, [r7, #0]
 8000812:	f014 fa3b 	bl	8014c8c <strtok>
 8000816:	60b8      	str	r0, [r7, #8]
 for(int i=0;i<UI_MSG_NUM_OF_FUNCTIONS;i++)
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	e022      	b.n	8000864 <UI_parse_message+0x60>
 {
	  if(strcmp(pch,UI_messages_strings[i])==0)
 800081e:	4a16      	ldr	r2, [pc, #88]	; (8000878 <UI_parse_message+0x74>)
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000826:	4619      	mov	r1, r3
 8000828:	68b8      	ldr	r0, [r7, #8]
 800082a:	f7ff fcd1 	bl	80001d0 <strcmp>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d114      	bne.n	800085e <UI_parse_message+0x5a>
		{
			if(UI_functions[i](UI_obj,pch+strlen(pch)+1)==UI_F_OK) return UI_F_OK;
 8000834:	4a11      	ldr	r2, [pc, #68]	; (800087c <UI_parse_message+0x78>)
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800083c:	68b8      	ldr	r0, [r7, #8]
 800083e:	f7ff fcd1 	bl	80001e4 <strlen>
 8000842:	4603      	mov	r3, r0
 8000844:	3301      	adds	r3, #1
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	4413      	add	r3, r2
 800084a:	4619      	mov	r1, r3
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	47a0      	blx	r4
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d101      	bne.n	800085a <UI_parse_message+0x56>
 8000856:	2300      	movs	r3, #0
 8000858:	e008      	b.n	800086c <UI_parse_message+0x68>
      else return UI_F_ERR;
 800085a:	2301      	movs	r3, #1
 800085c:	e006      	b.n	800086c <UI_parse_message+0x68>
 for(int i=0;i<UI_MSG_NUM_OF_FUNCTIONS;i++)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	3301      	adds	r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2b03      	cmp	r3, #3
 8000868:	ddd9      	ble.n	800081e <UI_parse_message+0x1a>
		}

 }
 return UI_F_ERR;
 800086a:	2301      	movs	r3, #1
}
 800086c:	4618      	mov	r0, r3
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	bd90      	pop	{r4, r7, pc}
 8000874:	08016bc0 	.word	0x08016bc0
 8000878:	200003a4 	.word	0x200003a4
 800087c:	20000394 	.word	0x20000394

08000880 <UI_messages_init>:

void UI_messages_init(UI_typedef* UI_obj)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	UI_functions[UI_MSG_SET] = UI_MSG_SET_f;
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <UI_messages_init+0x44>)
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <UI_messages_init+0x48>)
 800088c:	601a      	str	r2, [r3, #0]
	UI_functions[UI_MSG_SHOW] = UI_MSG_SHOW_f;
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <UI_messages_init+0x44>)
 8000890:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <UI_messages_init+0x4c>)
 8000892:	605a      	str	r2, [r3, #4]
	UI_functions[UI_MSG_RESET] = UI_MSG_RESET_f;
 8000894:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <UI_messages_init+0x44>)
 8000896:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <UI_messages_init+0x50>)
 8000898:	609a      	str	r2, [r3, #8]
	UI_functions[UI_MSG_HELP] = UI_MSG_HELP_f;
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <UI_messages_init+0x44>)
 800089c:	4a0d      	ldr	r2, [pc, #52]	; (80008d4 <UI_messages_init+0x54>)
 800089e:	60da      	str	r2, [r3, #12]

	UI_messages_strings[UI_MSG_SET] = "set";
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <UI_messages_init+0x58>)
 80008a2:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <UI_messages_init+0x5c>)
 80008a4:	601a      	str	r2, [r3, #0]
	UI_messages_strings[UI_MSG_SHOW] = "show";
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <UI_messages_init+0x58>)
 80008a8:	4a0d      	ldr	r2, [pc, #52]	; (80008e0 <UI_messages_init+0x60>)
 80008aa:	605a      	str	r2, [r3, #4]
	UI_messages_strings[UI_MSG_RESET] = "reset";
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <UI_messages_init+0x58>)
 80008ae:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <UI_messages_init+0x64>)
 80008b0:	609a      	str	r2, [r3, #8]
	UI_messages_strings[UI_MSG_HELP] = "help";
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <UI_messages_init+0x58>)
 80008b4:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <UI_messages_init+0x68>)
 80008b6:	60da      	str	r2, [r3, #12]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	20000394 	.word	0x20000394
 80008c8:	08000bd1 	.word	0x08000bd1
 80008cc:	080009b5 	.word	0x080009b5
 80008d0:	0800091d 	.word	0x0800091d
 80008d4:	080008ed 	.word	0x080008ed
 80008d8:	200003a4 	.word	0x200003a4
 80008dc:	08016bc4 	.word	0x08016bc4
 80008e0:	08016bc8 	.word	0x08016bc8
 80008e4:	08016bd0 	.word	0x08016bd0
 80008e8:	08016bd8 	.word	0x08016bd8

080008ec <UI_MSG_HELP_f>:

int UI_MSG_HELP_f(UI_typedef* UI_obj,uint8_t* msg)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
	char * pch;
	memory_region_pointer ptr;

	pch = strtok (NULL," ");//subcomand
 80008f6:	4908      	ldr	r1, [pc, #32]	; (8000918 <UI_MSG_HELP_f+0x2c>)
 80008f8:	2000      	movs	r0, #0
 80008fa:	f014 f9c7 	bl	8014c8c <strtok>
 80008fe:	6178      	str	r0, [r7, #20]
	osMessagePut(UI_obj->events_q,UI_EVNT_HELP,1);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	2201      	movs	r2, #1
 8000906:	2103      	movs	r1, #3
 8000908:	4618      	mov	r0, r3
 800090a:	f010 fee5 	bl	80116d8 <osMessagePut>
	return UI_F_OK;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	08016bc0 	.word	0x08016bc0

0800091c <UI_MSG_RESET_f>:

int UI_MSG_RESET_f(UI_typedef* UI_obj,uint8_t* msg)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
	char * pch;
	memory_region_pointer ptr;

	pch = strtok (NULL," ");//subcomand
 8000926:	491f      	ldr	r1, [pc, #124]	; (80009a4 <UI_MSG_RESET_f+0x88>)
 8000928:	2000      	movs	r0, #0
 800092a:	f014 f9af 	bl	8014c8c <strtok>
 800092e:	6178      	str	r0, [r7, #20]
	if(strcmp(pch,"settings")==0){
 8000930:	491d      	ldr	r1, [pc, #116]	; (80009a8 <UI_MSG_RESET_f+0x8c>)
 8000932:	6978      	ldr	r0, [r7, #20]
 8000934:	f7ff fc4c 	bl	80001d0 <strcmp>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d126      	bne.n	800098c <UI_MSG_RESET_f+0x70>
		icListen.settings->wav_sample_rate=ICLISTEN_DEFAULT_WAV_SAMPLE_RATE;
 800093e:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <UI_MSG_RESET_f+0x90>)
 8000940:	6a1b      	ldr	r3, [r3, #32]
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
 8000946:	2200      	movs	r2, #0
 8000948:	f042 027d 	orr.w	r2, r2, #125	; 0x7d
 800094c:	705a      	strb	r2, [r3, #1]
 800094e:	2200      	movs	r2, #0
 8000950:	709a      	strb	r2, [r3, #2]
 8000952:	2200      	movs	r2, #0
 8000954:	70da      	strb	r2, [r3, #3]
		icListen.settings->wav_sample_bit_depth=ICLISTEN_DEFAULT_WAV_SAMPLE_BIT_DEPTH;
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <UI_MSG_RESET_f+0x90>)
 8000958:	6a1b      	ldr	r3, [r3, #32]
 800095a:	2200      	movs	r2, #0
 800095c:	f042 0218 	orr.w	r2, r2, #24
 8000960:	711a      	strb	r2, [r3, #4]
 8000962:	2200      	movs	r2, #0
 8000964:	715a      	strb	r2, [r3, #5]
 8000966:	2200      	movs	r2, #0
 8000968:	719a      	strb	r2, [r3, #6]
 800096a:	2200      	movs	r2, #0
 800096c:	71da      	strb	r2, [r3, #7]
		icListen.settings->file_duration=ICLISTEN_DEFAULT_FILE_DURATION;
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <UI_MSG_RESET_f+0x90>)
 8000970:	6a1b      	ldr	r3, [r3, #32]
 8000972:	2200      	movs	r2, #0
 8000974:	f042 0278 	orr.w	r2, r2, #120	; 0x78
 8000978:	721a      	strb	r2, [r3, #8]
 800097a:	2200      	movs	r2, #0
 800097c:	725a      	strb	r2, [r3, #9]
 800097e:	2200      	movs	r2, #0
 8000980:	729a      	strb	r2, [r3, #10]
 8000982:	2200      	movs	r2, #0
 8000984:	72da      	strb	r2, [r3, #11]
		mcu_flash_save(&mcu_flash);
 8000986:	480a      	ldr	r0, [pc, #40]	; (80009b0 <UI_MSG_RESET_f+0x94>)
 8000988:	f001 fada 	bl	8001f40 <mcu_flash_save>
	}
	osMessagePut(UI_obj->events_q,UI_EVNT_RESET,1);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	2201      	movs	r2, #1
 8000992:	2102      	movs	r1, #2
 8000994:	4618      	mov	r0, r3
 8000996:	f010 fe9f 	bl	80116d8 <osMessagePut>
	return UI_F_OK;
 800099a:	2300      	movs	r3, #0
}
 800099c:	4618      	mov	r0, r3
 800099e:	3718      	adds	r7, #24
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	08016bc0 	.word	0x08016bc0
 80009a8:	08016be0 	.word	0x08016be0
 80009ac:	20000800 	.word	0x20000800
 80009b0:	20000e04 	.word	0x20000e04

080009b4 <UI_MSG_SHOW_f>:

int UI_MSG_SHOW_f(UI_typedef* UI_obj,uint8_t* msg)
{
 80009b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009b6:	b08d      	sub	sp, #52	; 0x34
 80009b8:	af08      	add	r7, sp, #32
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
	char * pch;
	pch = strtok (NULL," ");//subcomand
 80009be:	4975      	ldr	r1, [pc, #468]	; (8000b94 <UI_MSG_SHOW_f+0x1e0>)
 80009c0:	2000      	movs	r0, #0
 80009c2:	f014 f963 	bl	8014c8c <strtok>
 80009c6:	60b8      	str	r0, [r7, #8]

	if(strcmp(pch,"sensor")==0){
 80009c8:	4973      	ldr	r1, [pc, #460]	; (8000b98 <UI_MSG_SHOW_f+0x1e4>)
 80009ca:	68b8      	ldr	r0, [r7, #8]
 80009cc:	f7ff fc00 	bl	80001d0 <strcmp>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d134      	bne.n	8000a40 <UI_MSG_SHOW_f+0x8c>
                           "Status: %d\r"
                           "File duration: %d\r"
                           "WAV sample depth: %d\r"
                           "WAV sample rate: %d\r"
                           "Seq err:%d\r"
				           "Last msg num:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.last_collect_msg_num);
 80009d6:	4b71      	ldr	r3, [pc, #452]	; (8000b9c <UI_MSG_SHOW_f+0x1e8>)
 80009d8:	7f1b      	ldrb	r3, [r3, #28]
		sprintf(temp_array,"Device type: %d\r"
 80009da:	461e      	mov	r6, r3
				           "Last msg num:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.last_collect_msg_num);
 80009dc:	4b6f      	ldr	r3, [pc, #444]	; (8000b9c <UI_MSG_SHOW_f+0x1e8>)
 80009de:	881b      	ldrh	r3, [r3, #0]
		sprintf(temp_array,"Device type: %d\r"
 80009e0:	469c      	mov	ip, r3
				           "Last msg num:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.last_collect_msg_num);
 80009e2:	4b6e      	ldr	r3, [pc, #440]	; (8000b9c <UI_MSG_SHOW_f+0x1e8>)
 80009e4:	7f5b      	ldrb	r3, [r3, #29]
		sprintf(temp_array,"Device type: %d\r"
 80009e6:	461d      	mov	r5, r3
				           "Last msg num:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.last_collect_msg_num);
 80009e8:	4b6c      	ldr	r3, [pc, #432]	; (8000b9c <UI_MSG_SHOW_f+0x1e8>)
 80009ea:	6a1b      	ldr	r3, [r3, #32]
		sprintf(temp_array,"Device type: %d\r"
 80009ec:	689b      	ldr	r3, [r3, #8]
				           "Last msg num:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.last_collect_msg_num);
 80009ee:	4a6b      	ldr	r2, [pc, #428]	; (8000b9c <UI_MSG_SHOW_f+0x1e8>)
 80009f0:	6a12      	ldr	r2, [r2, #32]
		sprintf(temp_array,"Device type: %d\r"
 80009f2:	6852      	ldr	r2, [r2, #4]
				           "Last msg num:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.last_collect_msg_num);
 80009f4:	4969      	ldr	r1, [pc, #420]	; (8000b9c <UI_MSG_SHOW_f+0x1e8>)
 80009f6:	6a09      	ldr	r1, [r1, #32]
		sprintf(temp_array,"Device type: %d\r"
 80009f8:	6809      	ldr	r1, [r1, #0]
 80009fa:	4868      	ldr	r0, [pc, #416]	; (8000b9c <UI_MSG_SHOW_f+0x1e8>)
 80009fc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80009fe:	4c67      	ldr	r4, [pc, #412]	; (8000b9c <UI_MSG_SHOW_f+0x1e8>)
 8000a00:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8000a02:	9407      	str	r4, [sp, #28]
 8000a04:	9006      	str	r0, [sp, #24]
 8000a06:	9105      	str	r1, [sp, #20]
 8000a08:	9204      	str	r2, [sp, #16]
 8000a0a:	9303      	str	r3, [sp, #12]
 8000a0c:	9502      	str	r5, [sp, #8]
 8000a0e:	4b64      	ldr	r3, [pc, #400]	; (8000ba0 <UI_MSG_SHOW_f+0x1ec>)
 8000a10:	9301      	str	r3, [sp, #4]
 8000a12:	4b64      	ldr	r3, [pc, #400]	; (8000ba4 <UI_MSG_SHOW_f+0x1f0>)
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	4663      	mov	r3, ip
 8000a18:	4632      	mov	r2, r6
 8000a1a:	4963      	ldr	r1, [pc, #396]	; (8000ba8 <UI_MSG_SHOW_f+0x1f4>)
 8000a1c:	4863      	ldr	r0, [pc, #396]	; (8000bac <UI_MSG_SHOW_f+0x1f8>)
 8000a1e:	f014 f8cf 	bl	8014bc0 <siprintf>
		temp_ptr.start_addr=temp_array;
 8000a22:	4b63      	ldr	r3, [pc, #396]	; (8000bb0 <UI_MSG_SHOW_f+0x1fc>)
 8000a24:	4a61      	ldr	r2, [pc, #388]	; (8000bac <UI_MSG_SHOW_f+0x1f8>)
 8000a26:	601a      	str	r2, [r3, #0]
		temp_ptr.size=strlen(temp_array);
 8000a28:	4860      	ldr	r0, [pc, #384]	; (8000bac <UI_MSG_SHOW_f+0x1f8>)
 8000a2a:	f7ff fbdb 	bl	80001e4 <strlen>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	4a5f      	ldr	r2, [pc, #380]	; (8000bb0 <UI_MSG_SHOW_f+0x1fc>)
 8000a32:	6053      	str	r3, [r2, #4]
		UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000a34:	4a5e      	ldr	r2, [pc, #376]	; (8000bb0 <UI_MSG_SHOW_f+0x1fc>)
 8000a36:	2101      	movs	r1, #1
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff feb6 	bl	80007aa <UI_send_msg>
 8000a3e:	e09c      	b.n	8000b7a <UI_MSG_SHOW_f+0x1c6>
	}
	else if(strcmp(pch,"storage")==0){
 8000a40:	495c      	ldr	r1, [pc, #368]	; (8000bb4 <UI_MSG_SHOW_f+0x200>)
 8000a42:	68b8      	ldr	r0, [r7, #8]
 8000a44:	f7ff fbc4 	bl	80001d0 <strcmp>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d146      	bne.n	8000adc <UI_MSG_SHOW_f+0x128>
		temp_array[0]=0x00;
 8000a4e:	4b57      	ldr	r3, [pc, #348]	; (8000bac <UI_MSG_SHOW_f+0x1f8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	e02e      	b.n	8000ab8 <UI_MSG_SHOW_f+0x104>
		{
		 sprintf(temp_array+strlen(temp_array),"Disk: %d\rStatus: %d\rSize: %d KB\rFree space: %d KB\r",i,microsd_storage.disks[i].status,microsd_storage.disks[i].size,microsd_storage.disks[i].free_space);
 8000a5a:	4854      	ldr	r0, [pc, #336]	; (8000bac <UI_MSG_SHOW_f+0x1f8>)
 8000a5c:	f7ff fbc2 	bl	80001e4 <strlen>
 8000a60:	4603      	mov	r3, r0
 8000a62:	4a52      	ldr	r2, [pc, #328]	; (8000bac <UI_MSG_SHOW_f+0x1f8>)
 8000a64:	1898      	adds	r0, r3, r2
 8000a66:	4a54      	ldr	r2, [pc, #336]	; (8000bb8 <UI_MSG_SHOW_f+0x204>)
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000a6e:	fb01 f303 	mul.w	r3, r1, r3
 8000a72:	4413      	add	r3, r2
 8000a74:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	461d      	mov	r5, r3
 8000a7c:	4a4e      	ldr	r2, [pc, #312]	; (8000bb8 <UI_MSG_SHOW_f+0x204>)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000a84:	fb01 f303 	mul.w	r3, r1, r3
 8000a88:	4413      	add	r3, r2
 8000a8a:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4949      	ldr	r1, [pc, #292]	; (8000bb8 <UI_MSG_SHOW_f+0x204>)
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	f44f 7411 	mov.w	r4, #580	; 0x244
 8000a98:	fb04 f202 	mul.w	r2, r4, r2
 8000a9c:	440a      	add	r2, r1
 8000a9e:	f502 7210 	add.w	r2, r2, #576	; 0x240
 8000aa2:	6812      	ldr	r2, [r2, #0]
 8000aa4:	9201      	str	r2, [sp, #4]
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	462b      	mov	r3, r5
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	4943      	ldr	r1, [pc, #268]	; (8000bbc <UI_MSG_SHOW_f+0x208>)
 8000aae:	f014 f887 	bl	8014bc0 <siprintf>
		for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2b03      	cmp	r3, #3
 8000abc:	ddcd      	ble.n	8000a5a <UI_MSG_SHOW_f+0xa6>
		}
		temp_ptr.start_addr=temp_array;
 8000abe:	4b3c      	ldr	r3, [pc, #240]	; (8000bb0 <UI_MSG_SHOW_f+0x1fc>)
 8000ac0:	4a3a      	ldr	r2, [pc, #232]	; (8000bac <UI_MSG_SHOW_f+0x1f8>)
 8000ac2:	601a      	str	r2, [r3, #0]
		temp_ptr.size=strlen(temp_array);
 8000ac4:	4839      	ldr	r0, [pc, #228]	; (8000bac <UI_MSG_SHOW_f+0x1f8>)
 8000ac6:	f7ff fb8d 	bl	80001e4 <strlen>
 8000aca:	4603      	mov	r3, r0
 8000acc:	4a38      	ldr	r2, [pc, #224]	; (8000bb0 <UI_MSG_SHOW_f+0x1fc>)
 8000ace:	6053      	str	r3, [r2, #4]
		UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000ad0:	4a37      	ldr	r2, [pc, #220]	; (8000bb0 <UI_MSG_SHOW_f+0x1fc>)
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff fe68 	bl	80007aa <UI_send_msg>
 8000ada:	e04e      	b.n	8000b7a <UI_MSG_SHOW_f+0x1c6>
	}
	else if(strcmp(pch,"clock")==0){
 8000adc:	4938      	ldr	r1, [pc, #224]	; (8000bc0 <UI_MSG_SHOW_f+0x20c>)
 8000ade:	68b8      	ldr	r0, [r7, #8]
 8000ae0:	f7ff fb76 	bl	80001d0 <strcmp>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d135      	bne.n	8000b56 <UI_MSG_SHOW_f+0x1a2>
		temp_array[0]=0x00;
 8000aea:	4b30      	ldr	r3, [pc, #192]	; (8000bac <UI_MSG_SHOW_f+0x1f8>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	701a      	strb	r2, [r3, #0]
		read_time(&rtc);
 8000af0:	4834      	ldr	r0, [pc, #208]	; (8000bc4 <UI_MSG_SHOW_f+0x210>)
 8000af2:	f001 fa87 	bl	8002004 <read_time>
        sprintf(temp_array,"Clock: %d:%d:%d  %d/%d/%d %d\r",rtc.time.Hours,rtc.time.Minutes,rtc.time.Seconds,rtc.date.Date,rtc.date.Month,rtc.date.Year,(uint32_t)rtc.timestamp);
 8000af6:	4b33      	ldr	r3, [pc, #204]	; (8000bc4 <UI_MSG_SHOW_f+0x210>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	461e      	mov	r6, r3
 8000afc:	4b31      	ldr	r3, [pc, #196]	; (8000bc4 <UI_MSG_SHOW_f+0x210>)
 8000afe:	785b      	ldrb	r3, [r3, #1]
 8000b00:	469c      	mov	ip, r3
 8000b02:	4b30      	ldr	r3, [pc, #192]	; (8000bc4 <UI_MSG_SHOW_f+0x210>)
 8000b04:	789b      	ldrb	r3, [r3, #2]
 8000b06:	4619      	mov	r1, r3
 8000b08:	4b2e      	ldr	r3, [pc, #184]	; (8000bc4 <UI_MSG_SHOW_f+0x210>)
 8000b0a:	7d9b      	ldrb	r3, [r3, #22]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	4b2d      	ldr	r3, [pc, #180]	; (8000bc4 <UI_MSG_SHOW_f+0x210>)
 8000b10:	7d5b      	ldrb	r3, [r3, #21]
 8000b12:	461c      	mov	r4, r3
 8000b14:	4b2b      	ldr	r3, [pc, #172]	; (8000bc4 <UI_MSG_SHOW_f+0x210>)
 8000b16:	7ddb      	ldrb	r3, [r3, #23]
 8000b18:	461d      	mov	r5, r3
 8000b1a:	4b2a      	ldr	r3, [pc, #168]	; (8000bc4 <UI_MSG_SHOW_f+0x210>)
 8000b1c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000b20:	4613      	mov	r3, r2
 8000b22:	9304      	str	r3, [sp, #16]
 8000b24:	9503      	str	r5, [sp, #12]
 8000b26:	9402      	str	r4, [sp, #8]
 8000b28:	9001      	str	r0, [sp, #4]
 8000b2a:	9100      	str	r1, [sp, #0]
 8000b2c:	4663      	mov	r3, ip
 8000b2e:	4632      	mov	r2, r6
 8000b30:	4925      	ldr	r1, [pc, #148]	; (8000bc8 <UI_MSG_SHOW_f+0x214>)
 8000b32:	481e      	ldr	r0, [pc, #120]	; (8000bac <UI_MSG_SHOW_f+0x1f8>)
 8000b34:	f014 f844 	bl	8014bc0 <siprintf>
		temp_ptr.start_addr=temp_array;
 8000b38:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <UI_MSG_SHOW_f+0x1fc>)
 8000b3a:	4a1c      	ldr	r2, [pc, #112]	; (8000bac <UI_MSG_SHOW_f+0x1f8>)
 8000b3c:	601a      	str	r2, [r3, #0]
		temp_ptr.size=strlen(temp_array);
 8000b3e:	481b      	ldr	r0, [pc, #108]	; (8000bac <UI_MSG_SHOW_f+0x1f8>)
 8000b40:	f7ff fb50 	bl	80001e4 <strlen>
 8000b44:	4603      	mov	r3, r0
 8000b46:	4a1a      	ldr	r2, [pc, #104]	; (8000bb0 <UI_MSG_SHOW_f+0x1fc>)
 8000b48:	6053      	str	r3, [r2, #4]
		UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000b4a:	4a19      	ldr	r2, [pc, #100]	; (8000bb0 <UI_MSG_SHOW_f+0x1fc>)
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff fe2b 	bl	80007aa <UI_send_msg>
 8000b54:	e011      	b.n	8000b7a <UI_MSG_SHOW_f+0x1c6>
	}
	else{
		sprintf(temp_array,"sensor\rstorage\rclock\r");
 8000b56:	491d      	ldr	r1, [pc, #116]	; (8000bcc <UI_MSG_SHOW_f+0x218>)
 8000b58:	4814      	ldr	r0, [pc, #80]	; (8000bac <UI_MSG_SHOW_f+0x1f8>)
 8000b5a:	f014 f831 	bl	8014bc0 <siprintf>
		temp_ptr.start_addr=temp_array;
 8000b5e:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <UI_MSG_SHOW_f+0x1fc>)
 8000b60:	4a12      	ldr	r2, [pc, #72]	; (8000bac <UI_MSG_SHOW_f+0x1f8>)
 8000b62:	601a      	str	r2, [r3, #0]
		temp_ptr.size=strlen(temp_array);
 8000b64:	4811      	ldr	r0, [pc, #68]	; (8000bac <UI_MSG_SHOW_f+0x1f8>)
 8000b66:	f7ff fb3d 	bl	80001e4 <strlen>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	4a10      	ldr	r2, [pc, #64]	; (8000bb0 <UI_MSG_SHOW_f+0x1fc>)
 8000b6e:	6053      	str	r3, [r2, #4]
		UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000b70:	4a0f      	ldr	r2, [pc, #60]	; (8000bb0 <UI_MSG_SHOW_f+0x1fc>)
 8000b72:	2101      	movs	r1, #1
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff fe18 	bl	80007aa <UI_send_msg>
	}
	osMessagePut(UI_obj->events_q,UI_EVNT_SHOW,1);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2101      	movs	r1, #1
 8000b82:	4618      	mov	r0, r3
 8000b84:	f010 fda8 	bl	80116d8 <osMessagePut>
	return UI_F_OK;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3714      	adds	r7, #20
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b92:	bf00      	nop
 8000b94:	08016bc0 	.word	0x08016bc0
 8000b98:	08016bec 	.word	0x08016bec
 8000b9c:	20000800 	.word	0x20000800
 8000ba0:	2000080a 	.word	0x2000080a
 8000ba4:	20000802 	.word	0x20000802
 8000ba8:	08016bf4 	.word	0x08016bf4
 8000bac:	200003bc 	.word	0x200003bc
 8000bb0:	200003b4 	.word	0x200003b4
 8000bb4:	08016c94 	.word	0x08016c94
 8000bb8:	20000e24 	.word	0x20000e24
 8000bbc:	08016c9c 	.word	0x08016c9c
 8000bc0:	08016cd0 	.word	0x08016cd0
 8000bc4:	20001b10 	.word	0x20001b10
 8000bc8:	08016cd8 	.word	0x08016cd8
 8000bcc:	08016cf8 	.word	0x08016cf8

08000bd0 <UI_MSG_SET_f>:

int UI_MSG_SET_f(UI_typedef* UI_obj,uint8_t* msg)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
	char * pch;
	pch = strtok (NULL," ");//subcomand
 8000bda:	4933      	ldr	r1, [pc, #204]	; (8000ca8 <UI_MSG_SET_f+0xd8>)
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f014 f855 	bl	8014c8c <strtok>
 8000be2:	60f8      	str	r0, [r7, #12]
	if(strcmp(pch,"clock")==0){
 8000be4:	4931      	ldr	r1, [pc, #196]	; (8000cac <UI_MSG_SET_f+0xdc>)
 8000be6:	68f8      	ldr	r0, [r7, #12]
 8000be8:	f7ff faf2 	bl	80001d0 <strcmp>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d14d      	bne.n	8000c8e <UI_MSG_SET_f+0xbe>
		pch = strtok (NULL,":");//hours
 8000bf2:	492f      	ldr	r1, [pc, #188]	; (8000cb0 <UI_MSG_SET_f+0xe0>)
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f014 f849 	bl	8014c8c <strtok>
 8000bfa:	60f8      	str	r0, [r7, #12]
		rtc.time.Hours=atol(pch);
 8000bfc:	68f8      	ldr	r0, [r7, #12]
 8000bfe:	f013 fac3 	bl	8014188 <atol>
 8000c02:	4603      	mov	r3, r0
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4b2b      	ldr	r3, [pc, #172]	; (8000cb4 <UI_MSG_SET_f+0xe4>)
 8000c08:	701a      	strb	r2, [r3, #0]
		pch = strtok (NULL,":");//minutes
 8000c0a:	4929      	ldr	r1, [pc, #164]	; (8000cb0 <UI_MSG_SET_f+0xe0>)
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f014 f83d 	bl	8014c8c <strtok>
 8000c12:	60f8      	str	r0, [r7, #12]
		rtc.time.Minutes=atol(pch);
 8000c14:	68f8      	ldr	r0, [r7, #12]
 8000c16:	f013 fab7 	bl	8014188 <atol>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4b25      	ldr	r3, [pc, #148]	; (8000cb4 <UI_MSG_SET_f+0xe4>)
 8000c20:	705a      	strb	r2, [r3, #1]
		pch = strtok (NULL," ");//seconds
 8000c22:	4921      	ldr	r1, [pc, #132]	; (8000ca8 <UI_MSG_SET_f+0xd8>)
 8000c24:	2000      	movs	r0, #0
 8000c26:	f014 f831 	bl	8014c8c <strtok>
 8000c2a:	60f8      	str	r0, [r7, #12]
		rtc.time.Seconds=atol(pch);
 8000c2c:	68f8      	ldr	r0, [r7, #12]
 8000c2e:	f013 faab 	bl	8014188 <atol>
 8000c32:	4603      	mov	r3, r0
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <UI_MSG_SET_f+0xe4>)
 8000c38:	709a      	strb	r2, [r3, #2]
		pch = strtok (NULL,"/");//day
 8000c3a:	491f      	ldr	r1, [pc, #124]	; (8000cb8 <UI_MSG_SET_f+0xe8>)
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f014 f825 	bl	8014c8c <strtok>
 8000c42:	60f8      	str	r0, [r7, #12]
		rtc.date.Date=atol(pch);
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	f013 fa9f 	bl	8014188 <atol>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <UI_MSG_SET_f+0xe4>)
 8000c50:	759a      	strb	r2, [r3, #22]
		pch = strtok (NULL,"/");//month
 8000c52:	4919      	ldr	r1, [pc, #100]	; (8000cb8 <UI_MSG_SET_f+0xe8>)
 8000c54:	2000      	movs	r0, #0
 8000c56:	f014 f819 	bl	8014c8c <strtok>
 8000c5a:	60f8      	str	r0, [r7, #12]
		rtc.date.Month=atol(pch);
 8000c5c:	68f8      	ldr	r0, [r7, #12]
 8000c5e:	f013 fa93 	bl	8014188 <atol>
 8000c62:	4603      	mov	r3, r0
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <UI_MSG_SET_f+0xe4>)
 8000c68:	755a      	strb	r2, [r3, #21]
		pch = strtok (NULL," ");//year
 8000c6a:	490f      	ldr	r1, [pc, #60]	; (8000ca8 <UI_MSG_SET_f+0xd8>)
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f014 f80d 	bl	8014c8c <strtok>
 8000c72:	60f8      	str	r0, [r7, #12]
		rtc.date.Year=atol(pch);
 8000c74:	68f8      	ldr	r0, [r7, #12]
 8000c76:	f013 fa87 	bl	8014188 <atol>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <UI_MSG_SET_f+0xe4>)
 8000c80:	75da      	strb	r2, [r3, #23]
		rtc.date.WeekDay=RTC_WEEKDAY_MONDAY;
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <UI_MSG_SET_f+0xe4>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	751a      	strb	r2, [r3, #20]
		set_time(&rtc);
 8000c88:	480a      	ldr	r0, [pc, #40]	; (8000cb4 <UI_MSG_SET_f+0xe4>)
 8000c8a:	f001 f9f5 	bl	8002078 <set_time>
	}

	osMessagePut(UI_obj->events_q,UI_EVNT_SET,1);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	2201      	movs	r2, #1
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f010 fd1e 	bl	80116d8 <osMessagePut>
	return UI_F_OK;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	08016bc0 	.word	0x08016bc0
 8000cac:	08016cd0 	.word	0x08016cd0
 8000cb0:	08016d10 	.word	0x08016d10
 8000cb4:	20001b10 	.word	0x20001b10
 8000cb8:	08016d14 	.word	0x08016d14

08000cbc <crc16_arc_update>:
};



uint16_t crc16_arc_update( char data, uint16_t accum )
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	460a      	mov	r2, r1
 8000cc6:	71fb      	strb	r3, [r7, #7]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	80bb      	strh	r3, [r7, #4]
  unsigned char comb_value;
  comb_value = ( accum&0x00ff ) ^ (unsigned char)data;
 8000ccc:	88bb      	ldrh	r3, [r7, #4]
 8000cce:	b25a      	sxtb	r2, r3
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	4053      	eors	r3, r2
 8000cd6:	b25b      	sxtb	r3, r3
 8000cd8:	73fb      	strb	r3, [r7, #15]
  accum = ( accum >> 8 ) ^ crc16_arc_table[ comb_value ];
 8000cda:	88bb      	ldrh	r3, [r7, #4]
 8000cdc:	0a1b      	lsrs	r3, r3, #8
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
 8000ce2:	4906      	ldr	r1, [pc, #24]	; (8000cfc <crc16_arc_update+0x40>)
 8000ce4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ce8:	4053      	eors	r3, r2
 8000cea:	80bb      	strh	r3, [r7, #4]
  return ( accum );
 8000cec:	88bb      	ldrh	r3, [r7, #4]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000000 	.word	0x20000000

08000d00 <get_crc16_arc>:

uint16_t get_crc16_arc( uint8_t* data,uint16_t length )
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	807b      	strh	r3, [r7, #2]
  uint16_t accm=0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	81fb      	strh	r3, [r7, #14]

  for(int i=0;i<length;i++)
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	e00d      	b.n	8000d32 <get_crc16_arc+0x32>
  {
    accm=crc16_arc_update(data[i], accm);
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	89fa      	ldrh	r2, [r7, #14]
 8000d20:	4611      	mov	r1, r2
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff ffca 	bl	8000cbc <crc16_arc_update>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	81fb      	strh	r3, [r7, #14]
  for(int i=0;i<length;i++)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	887b      	ldrh	r3, [r7, #2]
 8000d34:	68ba      	ldr	r2, [r7, #8]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	dbed      	blt.n	8000d16 <get_crc16_arc+0x16>
  }

  return accm;
 8000d3a:	89fb      	ldrh	r3, [r7, #14]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <sd_storage_disk_init>:

extern ss_pp sd_cards_ss[4];
extern UART_HandleTypeDef huart1;

F_RES sd_storage_disk_init(FATFS* fs,char* path)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
	if(f_mount(fs,path,1)==FR_OK) return F_OK;
 8000d4e:	2201      	movs	r2, #1
 8000d50:	6839      	ldr	r1, [r7, #0]
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f00f f812 	bl	800fd7c <f_mount>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d101      	bne.n	8000d62 <sd_storage_disk_init+0x1e>
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e000      	b.n	8000d64 <sd_storage_disk_init+0x20>
	else return F_ERR;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <sd_storage_init>:
F_RES sd_storage_init(sd_storage_t* self_object)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08c      	sub	sp, #48	; 0x30
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  char tt[10];
  FRESULT res;
  DWORD fre_clust, fre_sect, tot_sect;
  FATFS*  fs;
  self_object->active_disk_indx=0;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
  self_object->num_of_discs=0;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 2918 	strb.w	r2, [r3, #2328]	; 0x918
  self_object->status=STORAGE_NOT_INITTIALIZED;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2201      	movs	r2, #1
 8000d88:	f883 2919 	strb.w	r2, [r3, #2329]	; 0x919

  MX_FATFS_Init();
 8000d8c:	f008 fef6 	bl	8009b7c <MX_FATFS_Init>

  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d94:	e080      	b.n	8000e98 <sd_storage_init+0x12c>
  {
   sprintf(tt,"%d:",i);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d9c:	4953      	ldr	r1, [pc, #332]	; (8000eec <sd_storage_init+0x180>)
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f013 ff0e 	bl	8014bc0 <siprintf>
   if(sd_storage_disk_init(&self_object->disks[i].fs,tt)==F_OK){
 8000da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da6:	f44f 7211 	mov.w	r2, #580	; 0x244
 8000daa:	fb02 f303 	mul.w	r3, r2, r3
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	f107 0214 	add.w	r2, r7, #20
 8000db6:	4611      	mov	r1, r2
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ffc3 	bl	8000d44 <sd_storage_disk_init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d15b      	bne.n	8000e7c <sd_storage_init+0x110>
		  self_object->disks[i].status=DISK_PRESENT;
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc8:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000dcc:	fb01 f303 	mul.w	r3, r1, r3
 8000dd0:	4413      	add	r3, r2
 8000dd2:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
		  self_object->num_of_discs++;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f893 3918 	ldrb.w	r3, [r3, #2328]	; 0x918
 8000de0:	3301      	adds	r3, #1
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f883 2918 	strb.w	r2, [r3, #2328]	; 0x918
  		  if(f_getfree(tt, &fre_clust, &fs)==FR_OK){
 8000dea:	f107 020c 	add.w	r2, r7, #12
 8000dee:	f107 0110 	add.w	r1, r7, #16
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4618      	mov	r0, r3
 8000df8:	f010 f98f 	bl	801111a <f_getfree>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d147      	bne.n	8000e92 <sd_storage_init+0x126>
		    tot_sect = (self_object->disks[i].fs.n_fatent - 2) * self_object->disks[i].fs.csize;
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e06:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000e0a:	fb01 f303 	mul.w	r3, r1, r3
 8000e0e:	4413      	add	r3, r2
 8000e10:	331c      	adds	r3, #28
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	3b02      	subs	r3, #2
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e1a:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000e1e:	fb00 f202 	mul.w	r2, r0, r2
 8000e22:	440a      	add	r2, r1
 8000e24:	320a      	adds	r2, #10
 8000e26:	8812      	ldrh	r2, [r2, #0]
 8000e28:	fb02 f303 	mul.w	r3, r2, r3
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
			fre_sect = fre_clust * self_object->disks[i].fs.csize;
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e32:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000e36:	fb01 f303 	mul.w	r3, r1, r3
 8000e3a:	4413      	add	r3, r2
 8000e3c:	330a      	adds	r3, #10
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	fb02 f303 	mul.w	r3, r2, r3
 8000e48:	623b      	str	r3, [r7, #32]
			self_object->disks[i].size=tot_sect/2;
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4c:	085a      	lsrs	r2, r3, #1
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e52:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000e56:	fb00 f303 	mul.w	r3, r0, r3
 8000e5a:	440b      	add	r3, r1
 8000e5c:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000e60:	601a      	str	r2, [r3, #0]
			self_object->disks[i].free_space=fre_sect/2;
 8000e62:	6a3b      	ldr	r3, [r7, #32]
 8000e64:	085a      	lsrs	r2, r3, #1
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e6a:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000e6e:	fb00 f303 	mul.w	r3, r0, r3
 8000e72:	440b      	add	r3, r1
 8000e74:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	e00a      	b.n	8000e92 <sd_storage_init+0x126>
		  }
   }
   else{
		 self_object->disks[i].status=DISK_ABSENT;
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e80:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000e84:	fb01 f303 	mul.w	r3, r1, r3
 8000e88:	4413      	add	r3, r2
 8000e8a:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000e8e:	2201      	movs	r2, #1
 8000e90:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e94:	3301      	adds	r3, #1
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	f77f af7b 	ble.w	8000d96 <sd_storage_init+0x2a>
   }
  }

  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ea4:	e019      	b.n	8000eda <sd_storage_init+0x16e>
  {
   if(self_object->disks[i].status==DISK_PRESENT){
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eaa:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000eae:	fb01 f303 	mul.w	r3, r1, r3
 8000eb2:	4413      	add	r3, r2
 8000eb4:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d10a      	bne.n	8000ed4 <sd_storage_init+0x168>
	   self_object->active_disk_indx=i;
 8000ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
	   self_object->status=STORAGE_INITTIALIZED;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 2919 	strb.w	r2, [r3, #2329]	; 0x919
	   return F_OK;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	e006      	b.n	8000ee2 <sd_storage_init+0x176>
  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000edc:	2b03      	cmp	r3, #3
 8000ede:	dde2      	ble.n	8000ea6 <sd_storage_init+0x13a>
   }
  }
  return F_ERR;
 8000ee0:	2301      	movs	r3, #1
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3730      	adds	r7, #48	; 0x30
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	08016d18 	.word	0x08016d18

08000ef0 <sd_storage_link_ss>:

F_RES sd_storage_link_ss(sd_storage_t* self_object,uint8_t disk_num, uint16_t sd_ss_pin,GPIO_TypeDef* sd_ss_port)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	460b      	mov	r3, r1
 8000efc:	72fb      	strb	r3, [r7, #11]
 8000efe:	4613      	mov	r3, r2
 8000f00:	813b      	strh	r3, [r7, #8]
	  sd_cards_ss[disk_num].sd_ss_pin=sd_ss_pin;
 8000f02:	7afb      	ldrb	r3, [r7, #11]
 8000f04:	4908      	ldr	r1, [pc, #32]	; (8000f28 <sd_storage_link_ss+0x38>)
 8000f06:	893a      	ldrh	r2, [r7, #8]
 8000f08:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
	  sd_cards_ss[disk_num].sd_ss_port=sd_ss_port;
 8000f0c:	7afb      	ldrb	r3, [r7, #11]
 8000f0e:	4a06      	ldr	r2, [pc, #24]	; (8000f28 <sd_storage_link_ss+0x38>)
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	4413      	add	r3, r2
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	605a      	str	r2, [r3, #4]
	  return F_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20001b38 	.word	0x20001b38

08000f2c <sd_storage_set_next_disk>:
F_RES sd_storage_read(sd_storage_t* self_object)
{

}
F_RES sd_storage_set_next_disk(sd_storage_t* self_object)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 int i=self_object->active_disk_indx+1;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f893 3910 	ldrb.w	r3, [r3, #2320]	; 0x910
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	60fb      	str	r3, [r7, #12]
 for(;i<SD_STORAGE_NUM_DISKS;i++)
 8000f3e:	e015      	b.n	8000f6c <sd_storage_set_next_disk+0x40>
 {
   if(self_object->disks[i].status==DISK_PRESENT){
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000f48:	fb01 f303 	mul.w	r3, r1, r3
 8000f4c:	4413      	add	r3, r2
 8000f4e:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d106      	bne.n	8000f66 <sd_storage_set_next_disk+0x3a>
	 self_object->active_disk_indx=i;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
	 return F_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	e006      	b.n	8000f74 <sd_storage_set_next_disk+0x48>
 for(;i<SD_STORAGE_NUM_DISKS;i++)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	dde6      	ble.n	8000f40 <sd_storage_set_next_disk+0x14>
   }
 }
 return F_ERR;
 8000f72:	2301      	movs	r3, #1
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4a07      	ldr	r2, [pc, #28]	; (8000fac <vApplicationGetIdleTaskMemory+0x2c>)
 8000f90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	4a06      	ldr	r2, [pc, #24]	; (8000fb0 <vApplicationGetIdleTaskMemory+0x30>)
 8000f96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2280      	movs	r2, #128	; 0x80
 8000f9c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f9e:	bf00      	nop
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	2000054c 	.word	0x2000054c
 8000fb0:	20000600 	.word	0x20000600

08000fb4 <icListen_init_sensor_status>:

icListen_object_typedef icListen;


void icListen_init_sensor_status(icListen_object_typedef* self_object)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	self_object->status=ICLISTEN_DISCONNECTED;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	775a      	strb	r2, [r3, #29]
	memset(self_object->build_date,0x00,18);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	330a      	adds	r3, #10
 8000fc6:	2212      	movs	r2, #18
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f013 fa24 	bl	8014418 <memset>
	memset(self_object->firmware_version,0x00,8);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	2208      	movs	r2, #8
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f013 fa1d 	bl	8014418 <memset>
	self_object->serial_number=0;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	801a      	strh	r2, [r3, #0]
	self_object->device_type=0;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	771a      	strb	r2, [r3, #28]
	self_object->last_collect_msg_num=0;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	625a      	str	r2, [r3, #36]	; 0x24
	self_object->collect_seq_num_err=0;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <icListen_prepare_collect_msg>:
	msg->basic_hdr.length=sizeof(icListen_setup_full_msg)-4-2;
	msg->crc=get_crc16_arc((uint8_t*)msg,sizeof(icListen_setup_full_msg)-2);
}

void icListen_prepare_collect_msg(icListen_collect_short_mask_msg* msg,uint8_t mask)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	460b      	mov	r3, r1
 8001008:	70fb      	strb	r3, [r7, #3]
	msg->basic_hdr.sync=MSG_SYNC;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	222a      	movs	r2, #42	; 0x2a
 800100e:	701a      	strb	r2, [r3, #0]
    msg->basic_hdr.type=MSG_TYPE_COLLECT_DATA;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2243      	movs	r2, #67	; 0x43
 8001014:	705a      	strb	r2, [r3, #1]
    msg->mask_hdr.mask=mask;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	78fa      	ldrb	r2, [r7, #3]
 800101a:	711a      	strb	r2, [r3, #4]
    msg->basic_hdr.length=1;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	f042 0201 	orr.w	r2, r2, #1
 8001024:	709a      	strb	r2, [r3, #2]
 8001026:	2200      	movs	r2, #0
 8001028:	70da      	strb	r2, [r3, #3]
	msg->crc=get_crc16_arc((uint8_t*)msg,sizeof(icListen_collect_short_mask_msg)-2);
 800102a:	2105      	movs	r1, #5
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff fe67 	bl	8000d00 <get_crc16_arc>
 8001032:	4603      	mov	r3, r0
 8001034:	461a      	mov	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f8a3 2005 	strh.w	r2, [r3, #5]
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <icListen_prepare_enquire_device_msg>:

void icListen_prepare_enquire_device_msg(icListen_enquire_device_msg* msg)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	msg->basic_hdr.sync=MSG_SYNC;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	222a      	movs	r2, #42	; 0x2a
 8001050:	701a      	strb	r2, [r3, #0]
    msg->basic_hdr.type=MSG_TYPE_ENQUIRE_DEVICE;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2245      	movs	r2, #69	; 0x45
 8001056:	705a      	strb	r2, [r3, #1]
    msg->basic_hdr.length=0;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	709a      	strb	r2, [r3, #2]
 800105e:	2200      	movs	r2, #0
 8001060:	70da      	strb	r2, [r3, #3]
	msg->crc=get_crc16_arc((uint8_t*)msg,sizeof(icListen_enquire_device_msg)-2);
 8001062:	2104      	movs	r1, #4
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff fe4b 	bl	8000d00 <get_crc16_arc>
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	809a      	strh	r2, [r3, #4]

}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <icListen_parse_msg>:

F_RES icListen_parse_msg(uint8_t* msg,icListen_object_typedef* self_object,uint8_t* msg_type,memory_region_pointer* parsed_data_ptr)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b088      	sub	sp, #32
 800107e:	af00      	add	r7, sp, #0
 8001080:	60f8      	str	r0, [r7, #12]
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
 8001086:	603b      	str	r3, [r7, #0]

	icListen_basic_header* basic_header=(icListen_basic_header*)msg;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	61fb      	str	r3, [r7, #28]
	icListen_status_basic_msg* status_msg=(icListen_status_basic_msg*)msg;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	61bb      	str	r3, [r7, #24]
	icListen_wav_full_header* collected_wav_header=(icListen_wav_full_header*)msg;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	617b      	str	r3, [r7, #20]

	uint16_t crc_msg=*(uint16_t*)(msg+basic_header->length+4);
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	885b      	ldrh	r3, [r3, #2]
 8001098:	b29b      	uxth	r3, r3
 800109a:	3304      	adds	r3, #4
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	827b      	strh	r3, [r7, #18]

	if(basic_header->sync==MSG_SYNC){
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b2a      	cmp	r3, #42	; 0x2a
 80010aa:	d172      	bne.n	8001192 <icListen_parse_msg+0x118>
	*msg_type=basic_header->type;
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	785a      	ldrb	r2, [r3, #1]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	701a      	strb	r2, [r3, #0]
	switch(basic_header->type){
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	785b      	ldrb	r3, [r3, #1]
 80010b8:	2b43      	cmp	r3, #67	; 0x43
 80010ba:	d033      	beq.n	8001124 <icListen_parse_msg+0xaa>
 80010bc:	2b45      	cmp	r3, #69	; 0x45
 80010be:	d166      	bne.n	800118e <icListen_parse_msg+0x114>
	     case MSG_TYPE_ENQUIRE_DEVICE:
	    	 if(crc_msg==get_crc16_arc(msg,(uint16_t)basic_header->length+4)){
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	885b      	ldrh	r3, [r3, #2]
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	3304      	adds	r3, #4
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	4619      	mov	r1, r3
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f7ff fe17 	bl	8000d00 <get_crc16_arc>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	8a7b      	ldrh	r3, [r7, #18]
 80010d8:	4293      	cmp	r3, r2
 80010da:	d121      	bne.n	8001120 <icListen_parse_msg+0xa6>
		    	  self_object->status=status_msg->status;
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	775a      	strb	r2, [r3, #29]
		    	  memcpy(self_object->build_date,status_msg->build_date,18);
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	f103 000a 	add.w	r0, r3, #10
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	330e      	adds	r3, #14
 80010f0:	2212      	movs	r2, #18
 80010f2:	4619      	mov	r1, r3
 80010f4:	f013 f982 	bl	80143fc <memcpy>
		    	  memcpy(self_object->firmware_version,status_msg->firmware_version,8);
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	1c98      	adds	r0, r3, #2
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	3306      	adds	r3, #6
 8001100:	2208      	movs	r2, #8
 8001102:	4619      	mov	r1, r3
 8001104:	f013 f97a 	bl	80143fc <memcpy>
		    	  self_object->serial_number=status_msg->serial_number;
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	889b      	ldrh	r3, [r3, #4]
 800110c:	b29a      	uxth	r2, r3
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	801a      	strh	r2, [r3, #0]
		    	  self_object->device_type=status_msg->device_type;
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	771a      	strb	r2, [r3, #28]
		    	  return F_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	e039      	b.n	8001194 <icListen_parse_msg+0x11a>
	    	  }
	    	 else return F_ERR;
 8001120:	2301      	movs	r3, #1
 8001122:	e037      	b.n	8001194 <icListen_parse_msg+0x11a>
	     break;
		 case MSG_TYPE_COLLECT_DATA:
			 if(collected_wav_header->basic_hdr.length>1){
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	885b      	ldrh	r3, [r3, #2]
 8001128:	b29b      	uxth	r3, r3
 800112a:	2b01      	cmp	r3, #1
 800112c:	d924      	bls.n	8001178 <icListen_parse_msg+0xfe>
			      if((self_object->last_collect_msg_num+1)!=collected_wav_header->wav_hdr.seq_num && self_object->last_collect_msg_num !=0){
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001132:	3301      	adds	r3, #1
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	f8b2 2005 	ldrh.w	r2, [r2, #5]
 800113a:	b292      	uxth	r2, r2
 800113c:	4293      	cmp	r3, r2
 800113e:	d008      	beq.n	8001152 <icListen_parse_msg+0xd8>
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001144:	2b00      	cmp	r3, #0
 8001146:	d004      	beq.n	8001152 <icListen_parse_msg+0xd8>
			    	  self_object->collect_seq_num_err++;
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114c:	1c5a      	adds	r2, r3, #1
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	629a      	str	r2, [r3, #40]	; 0x28
			      }
			      self_object->last_collect_msg_num=collected_wav_header->wav_hdr.seq_num;
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8001158:	b29b      	uxth	r3, r3
 800115a:	461a      	mov	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	625a      	str	r2, [r3, #36]	; 0x24
		    	//parsed_data_ptr->start_addr=msg+sizeof(icListen_basic_header);
			      parsed_data_ptr->start_addr=msg;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	601a      	str	r2, [r3, #0]
				  parsed_data_ptr->size=collected_wav_header->basic_hdr.length+4;
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	885b      	ldrh	r3, [r3, #2]
 800116a:	b29b      	uxth	r3, r3
 800116c:	3304      	adds	r3, #4
 800116e:	461a      	mov	r2, r3
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	605a      	str	r2, [r3, #4]
				  return F_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	e00d      	b.n	8001194 <icListen_parse_msg+0x11a>
			 }
			 parsed_data_ptr->size=0;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	2200      	movs	r2, #0
 800117c:	711a      	strb	r2, [r3, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	715a      	strb	r2, [r3, #5]
 8001182:	2200      	movs	r2, #0
 8001184:	719a      	strb	r2, [r3, #6]
 8001186:	2200      	movs	r2, #0
 8001188:	71da      	strb	r2, [r3, #7]
		     return F_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	e002      	b.n	8001194 <icListen_parse_msg+0x11a>
		 break;
		 default:
			 return F_ERR;
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <icListen_parse_msg+0x11a>
	     break;
	 };
	}
	else{
		return F_ERR;
 8001192:	2301      	movs	r3, #1
	}
	return F_ERR;
}
 8001194:	4618      	mov	r0, r3
 8001196:	3720      	adds	r7, #32
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800119c:	b5b0      	push	{r4, r5, r7, lr}
 800119e:	b0ac      	sub	sp, #176	; 0xb0
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a2:	f001 fdf7 	bl	8002d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a6:	f000 f8cd 	bl	8001344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011aa:	f000 fa5d 	bl	8001668 <MX_GPIO_Init>
  MX_SPI1_Init();
 80011ae:	f000 f98f 	bl	80014d0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80011b2:	f000 fa0f 	bl	80015d4 <MX_USART1_UART_Init>
  MX_DMA_Init();
 80011b6:	f000 fa37 	bl	8001628 <MX_DMA_Init>
  MX_TIM2_Init();
 80011ba:	f000 f9bf 	bl	800153c <MX_TIM2_Init>
  MX_RTC_Init();
 80011be:	f000 f92d 	bl	800141c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  UI_init(&user_interface);
 80011c2:	484c      	ldr	r0, [pc, #304]	; (80012f4 <main+0x158>)
 80011c4:	f7ff f9ee 	bl	80005a4 <UI_init>
  HAL_UART_Receive_IT(&UI_UART,&(user_interface.media_rx_byte),1);
 80011c8:	2201      	movs	r2, #1
 80011ca:	494b      	ldr	r1, [pc, #300]	; (80012f8 <main+0x15c>)
 80011cc:	484b      	ldr	r0, [pc, #300]	; (80012fc <main+0x160>)
 80011ce:	f006 fd61 	bl	8007c94 <HAL_UART_Receive_IT>
  mcu_flash_init(&mcu_flash,FLASH_SECTOR_11);
 80011d2:	210b      	movs	r1, #11
 80011d4:	484a      	ldr	r0, [pc, #296]	; (8001300 <main+0x164>)
 80011d6:	f000 fe41 	bl	8001e5c <mcu_flash_init>

  system_status=SYSTEM_STARTED;
 80011da:	4b4a      	ldr	r3, [pc, #296]	; (8001304 <main+0x168>)
 80011dc:	220b      	movs	r2, #11
 80011de:	701a      	strb	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of AppliEvent */
  osMessageQDef(AppliEvent, 16, uint16_t);
 80011e0:	4b49      	ldr	r3, [pc, #292]	; (8001308 <main+0x16c>)
 80011e2:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 80011e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  AppliEventHandle = osMessageCreate(osMessageQ(AppliEvent), NULL);
 80011ec:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f010 fa47 	bl	8011686 <osMessageCreate>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4a44      	ldr	r2, [pc, #272]	; (800130c <main+0x170>)
 80011fc:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_rx */
  osMessageQDef(USB_rx, 10, uint32_t);
 80011fe:	4b44      	ldr	r3, [pc, #272]	; (8001310 <main+0x174>)
 8001200:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001204:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001206:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  USB_rxHandle = osMessageCreate(osMessageQ(USB_rx), NULL);
 800120a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f010 fa38 	bl	8011686 <osMessageCreate>
 8001216:	4603      	mov	r3, r0
 8001218:	4a3e      	ldr	r2, [pc, #248]	; (8001314 <main+0x178>)
 800121a:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_tx */
  osMessageQDef(USB_tx, 10, uint32_t);
 800121c:	4b3c      	ldr	r3, [pc, #240]	; (8001310 <main+0x174>)
 800121e:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8001222:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001224:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  USB_txHandle = osMessageCreate(osMessageQ(USB_tx), NULL);
 8001228:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f010 fa29 	bl	8011686 <osMessageCreate>
 8001234:	4603      	mov	r3, r0
 8001236:	4a38      	ldr	r2, [pc, #224]	; (8001318 <main+0x17c>)
 8001238:	6013      	str	r3, [r2, #0]

  /* definition and creation of storage_w */
  osMessageQDef(storage_w, 5, uint32_t);
 800123a:	4b38      	ldr	r3, [pc, #224]	; (800131c <main+0x180>)
 800123c:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001240:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001242:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  storage_wHandle = osMessageCreate(osMessageQ(storage_w), NULL);
 8001246:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f010 fa1a 	bl	8011686 <osMessageCreate>
 8001252:	4603      	mov	r3, r0
 8001254:	4a32      	ldr	r2, [pc, #200]	; (8001320 <main+0x184>)
 8001256:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8001258:	4b32      	ldr	r3, [pc, #200]	; (8001324 <main+0x188>)
 800125a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800125e:	461d      	mov	r5, r3
 8001260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001264:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001268:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800126c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f010 f9a7 	bl	80115c6 <osThreadCreate>
 8001278:	4603      	mov	r3, r0
 800127a:	4a2b      	ldr	r2, [pc, #172]	; (8001328 <main+0x18c>)
 800127c:	6013      	str	r3, [r2, #0]

  /* definition and creation of storage_t */
  osThreadDef(storage_t, storage_f, osPriorityNormal, 0, 512);
 800127e:	4b2b      	ldr	r3, [pc, #172]	; (800132c <main+0x190>)
 8001280:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001284:	461d      	mov	r5, r3
 8001286:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001288:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800128a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800128e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  storage_tHandle = osThreadCreate(osThread(storage_t), NULL);
 8001292:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f010 f994 	bl	80115c6 <osThreadCreate>
 800129e:	4603      	mov	r3, r0
 80012a0:	4a23      	ldr	r2, [pc, #140]	; (8001330 <main+0x194>)
 80012a2:	6013      	str	r3, [r2, #0]

  /* definition and creation of icListen_t */
  osThreadDef(icListen_t, icListen_f, osPriorityNormal, 0, 512);
 80012a4:	4b23      	ldr	r3, [pc, #140]	; (8001334 <main+0x198>)
 80012a6:	f107 041c 	add.w	r4, r7, #28
 80012aa:	461d      	mov	r5, r3
 80012ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  icListen_tHandle = osThreadCreate(osThread(icListen_t), NULL);
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f010 f981 	bl	80115c6 <osThreadCreate>
 80012c4:	4603      	mov	r3, r0
 80012c6:	4a1c      	ldr	r2, [pc, #112]	; (8001338 <main+0x19c>)
 80012c8:	6013      	str	r3, [r2, #0]

  /* definition and creation of uart_t */
  osThreadDef(uart_t, uart_f, osPriorityNormal, 0, 256);
 80012ca:	4b1c      	ldr	r3, [pc, #112]	; (800133c <main+0x1a0>)
 80012cc:	463c      	mov	r4, r7
 80012ce:	461d      	mov	r5, r3
 80012d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart_tHandle = osThreadCreate(osThread(uart_t), NULL);
 80012dc:	463b      	mov	r3, r7
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f010 f970 	bl	80115c6 <osThreadCreate>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4a15      	ldr	r2, [pc, #84]	; (8001340 <main+0x1a4>)
 80012ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80012ec:	f010 f964 	bl	80115b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <main+0x154>
 80012f2:	bf00      	nop
 80012f4:	200009f0 	.word	0x200009f0
 80012f8:	200009fc 	.word	0x200009fc
 80012fc:	2000094c 	.word	0x2000094c
 8001300:	20000e04 	.word	0x20000e04
 8001304:	20001af8 	.word	0x20001af8
 8001308:	08016d48 	.word	0x08016d48
 800130c:	200009a0 	.word	0x200009a0
 8001310:	08016d58 	.word	0x08016d58
 8001314:	200009a4 	.word	0x200009a4
 8001318:	200009a8 	.word	0x200009a8
 800131c:	08016d68 	.word	0x08016d68
 8001320:	200009ac 	.word	0x200009ac
 8001324:	08016d78 	.word	0x08016d78
 8001328:	20000990 	.word	0x20000990
 800132c:	08016d94 	.word	0x08016d94
 8001330:	20000994 	.word	0x20000994
 8001334:	08016db0 	.word	0x08016db0
 8001338:	20000998 	.word	0x20000998
 800133c:	08016dcc 	.word	0x08016dcc
 8001340:	2000099c 	.word	0x2000099c

08001344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b094      	sub	sp, #80	; 0x50
 8001348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134a:	f107 0320 	add.w	r3, r7, #32
 800134e:	2230      	movs	r2, #48	; 0x30
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f013 f860 	bl	8014418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	4b29      	ldr	r3, [pc, #164]	; (8001414 <SystemClock_Config+0xd0>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	4a28      	ldr	r2, [pc, #160]	; (8001414 <SystemClock_Config+0xd0>)
 8001372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001376:	6413      	str	r3, [r2, #64]	; 0x40
 8001378:	4b26      	ldr	r3, [pc, #152]	; (8001414 <SystemClock_Config+0xd0>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	4b23      	ldr	r3, [pc, #140]	; (8001418 <SystemClock_Config+0xd4>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a22      	ldr	r2, [pc, #136]	; (8001418 <SystemClock_Config+0xd4>)
 800138e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	4b20      	ldr	r3, [pc, #128]	; (8001418 <SystemClock_Config+0xd4>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80013a0:	2305      	movs	r3, #5
 80013a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013aa:	2301      	movs	r3, #1
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ae:	2302      	movs	r3, #2
 80013b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80013b8:	230f      	movs	r3, #15
 80013ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80013bc:	2390      	movs	r3, #144	; 0x90
 80013be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013c0:	2302      	movs	r3, #2
 80013c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80013c4:	2305      	movs	r3, #5
 80013c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c8:	f107 0320 	add.w	r3, r7, #32
 80013cc:	4618      	mov	r0, r3
 80013ce:	f004 fa3d 	bl	800584c <HAL_RCC_OscConfig>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013d8:	f000 fd3a 	bl	8001e50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013dc:	230f      	movs	r3, #15
 80013de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e0:	2302      	movs	r3, #2
 80013e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	2103      	movs	r1, #3
 80013fa:	4618      	mov	r0, r3
 80013fc:	f004 fc9e 	bl	8005d3c <HAL_RCC_ClockConfig>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001406:	f000 fd23 	bl	8001e50 <Error_Handler>
  }
}
 800140a:	bf00      	nop
 800140c:	3750      	adds	r7, #80	; 0x50
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800
 8001418:	40007000 	.word	0x40007000

0800141c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001430:	2300      	movs	r3, #0
 8001432:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001434:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <MX_RTC_Init+0xac>)
 8001436:	4a25      	ldr	r2, [pc, #148]	; (80014cc <MX_RTC_Init+0xb0>)
 8001438:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800143a:	4b23      	ldr	r3, [pc, #140]	; (80014c8 <MX_RTC_Init+0xac>)
 800143c:	2200      	movs	r2, #0
 800143e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001440:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <MX_RTC_Init+0xac>)
 8001442:	227f      	movs	r2, #127	; 0x7f
 8001444:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001446:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <MX_RTC_Init+0xac>)
 8001448:	22ff      	movs	r2, #255	; 0xff
 800144a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <MX_RTC_Init+0xac>)
 800144e:	2200      	movs	r2, #0
 8001450:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001452:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <MX_RTC_Init+0xac>)
 8001454:	2200      	movs	r2, #0
 8001456:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <MX_RTC_Init+0xac>)
 800145a:	2200      	movs	r2, #0
 800145c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800145e:	481a      	ldr	r0, [pc, #104]	; (80014c8 <MX_RTC_Init+0xac>)
 8001460:	f004 ff60 	bl	8006324 <HAL_RTC_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800146a:	f000 fcf1 	bl	8001e50 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	2200      	movs	r2, #0
 8001486:	4619      	mov	r1, r3
 8001488:	480f      	ldr	r0, [pc, #60]	; (80014c8 <MX_RTC_Init+0xac>)
 800148a:	f004 ffc1 	bl	8006410 <HAL_RTC_SetTime>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001494:	f000 fcdc 	bl	8001e50 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001498:	2301      	movs	r3, #1
 800149a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800149c:	2301      	movs	r3, #1
 800149e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80014a0:	2301      	movs	r3, #1
 80014a2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80014a8:	463b      	mov	r3, r7
 80014aa:	2200      	movs	r2, #0
 80014ac:	4619      	mov	r1, r3
 80014ae:	4806      	ldr	r0, [pc, #24]	; (80014c8 <MX_RTC_Init+0xac>)
 80014b0:	f005 f8a6 	bl	8006600 <HAL_RTC_SetDate>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80014ba:	f000 fcc9 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2000082c 	.word	0x2000082c
 80014cc:	40002800 	.word	0x40002800

080014d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014d4:	4b17      	ldr	r3, [pc, #92]	; (8001534 <MX_SPI1_Init+0x64>)
 80014d6:	4a18      	ldr	r2, [pc, #96]	; (8001538 <MX_SPI1_Init+0x68>)
 80014d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <MX_SPI1_Init+0x64>)
 80014dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014e2:	4b14      	ldr	r3, [pc, #80]	; (8001534 <MX_SPI1_Init+0x64>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <MX_SPI1_Init+0x64>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_SPI1_Init+0x64>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <MX_SPI1_Init+0x64>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_SPI1_Init+0x64>)
 80014fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001500:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_SPI1_Init+0x64>)
 8001504:	2208      	movs	r2, #8
 8001506:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <MX_SPI1_Init+0x64>)
 800150a:	2200      	movs	r2, #0
 800150c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_SPI1_Init+0x64>)
 8001510:	2200      	movs	r2, #0
 8001512:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <MX_SPI1_Init+0x64>)
 8001516:	2200      	movs	r2, #0
 8001518:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_SPI1_Init+0x64>)
 800151c:	220a      	movs	r2, #10
 800151e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001520:	4804      	ldr	r0, [pc, #16]	; (8001534 <MX_SPI1_Init+0x64>)
 8001522:	f005 f9fd 	bl	8006920 <HAL_SPI_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800152c:	f000 fc90 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	2000084c 	.word	0x2000084c
 8001538:	40013000 	.word	0x40013000

0800153c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001542:	f107 0308 	add.w	r3, r7, #8
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001550:	463b      	mov	r3, r7
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <MX_TIM2_Init+0x94>)
 800155a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800155e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001560:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <MX_TIM2_Init+0x94>)
 8001562:	2200      	movs	r2, #0
 8001564:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001566:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <MX_TIM2_Init+0x94>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800156c:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <MX_TIM2_Init+0x94>)
 800156e:	f04f 32ff 	mov.w	r2, #4294967295
 8001572:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001574:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <MX_TIM2_Init+0x94>)
 8001576:	2200      	movs	r2, #0
 8001578:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <MX_TIM2_Init+0x94>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001580:	4813      	ldr	r0, [pc, #76]	; (80015d0 <MX_TIM2_Init+0x94>)
 8001582:	f005 fde1 	bl	8007148 <HAL_TIM_Base_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800158c:	f000 fc60 	bl	8001e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001594:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001596:	f107 0308 	add.w	r3, r7, #8
 800159a:	4619      	mov	r1, r3
 800159c:	480c      	ldr	r0, [pc, #48]	; (80015d0 <MX_TIM2_Init+0x94>)
 800159e:	f005 ff9b 	bl	80074d8 <HAL_TIM_ConfigClockSource>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015a8:	f000 fc52 	bl	8001e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ac:	2300      	movs	r3, #0
 80015ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015b4:	463b      	mov	r3, r7
 80015b6:	4619      	mov	r1, r3
 80015b8:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_TIM2_Init+0x94>)
 80015ba:	f006 f9b7 	bl	800792c <HAL_TIMEx_MasterConfigSynchronization>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015c4:	f000 fc44 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000904 	.word	0x20000904

080015d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <MX_USART1_UART_Init+0x4c>)
 80015da:	4a12      	ldr	r2, [pc, #72]	; (8001624 <MX_USART1_UART_Init+0x50>)
 80015dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <MX_USART1_UART_Init+0x4c>)
 80015e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <MX_USART1_UART_Init+0x4c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <MX_USART1_UART_Init+0x4c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <MX_USART1_UART_Init+0x4c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <MX_USART1_UART_Init+0x4c>)
 80015fa:	220c      	movs	r2, #12
 80015fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fe:	4b08      	ldr	r3, [pc, #32]	; (8001620 <MX_USART1_UART_Init+0x4c>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <MX_USART1_UART_Init+0x4c>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800160a:	4805      	ldr	r0, [pc, #20]	; (8001620 <MX_USART1_UART_Init+0x4c>)
 800160c:	f006 fa1e 	bl	8007a4c <HAL_UART_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001616:	f000 fc1b 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	2000094c 	.word	0x2000094c
 8001624:	40011000 	.word	0x40011000

08001628 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <MX_DMA_Init+0x3c>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <MX_DMA_Init+0x3c>)
 8001638:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <MX_DMA_Init+0x3c>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2105      	movs	r1, #5
 800164e:	203b      	movs	r0, #59	; 0x3b
 8001650:	f001 fcbe 	bl	8002fd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001654:	203b      	movs	r0, #59	; 0x3b
 8001656:	f001 fcd7 	bl	8003008 <HAL_NVIC_EnableIRQ>

}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800

08001668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
 800167c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	4b39      	ldr	r3, [pc, #228]	; (8001768 <MX_GPIO_Init+0x100>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a38      	ldr	r2, [pc, #224]	; (8001768 <MX_GPIO_Init+0x100>)
 8001688:	f043 0304 	orr.w	r3, r3, #4
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b36      	ldr	r3, [pc, #216]	; (8001768 <MX_GPIO_Init+0x100>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b32      	ldr	r3, [pc, #200]	; (8001768 <MX_GPIO_Init+0x100>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a31      	ldr	r2, [pc, #196]	; (8001768 <MX_GPIO_Init+0x100>)
 80016a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b2f      	ldr	r3, [pc, #188]	; (8001768 <MX_GPIO_Init+0x100>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	4b2b      	ldr	r3, [pc, #172]	; (8001768 <MX_GPIO_Init+0x100>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a2a      	ldr	r2, [pc, #168]	; (8001768 <MX_GPIO_Init+0x100>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b28      	ldr	r3, [pc, #160]	; (8001768 <MX_GPIO_Init+0x100>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	4b24      	ldr	r3, [pc, #144]	; (8001768 <MX_GPIO_Init+0x100>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a23      	ldr	r2, [pc, #140]	; (8001768 <MX_GPIO_Init+0x100>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b21      	ldr	r3, [pc, #132]	; (8001768 <MX_GPIO_Init+0x100>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_SD3_GPIO_Port, SS_SD3_Pin, GPIO_PIN_SET);
 80016ee:	2201      	movs	r2, #1
 80016f0:	2102      	movs	r1, #2
 80016f2:	481e      	ldr	r0, [pc, #120]	; (800176c <MX_GPIO_Init+0x104>)
 80016f4:	f002 fc86 	bl	8004004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin, GPIO_PIN_SET);
 80016f8:	2201      	movs	r2, #1
 80016fa:	2186      	movs	r1, #134	; 0x86
 80016fc:	481c      	ldr	r0, [pc, #112]	; (8001770 <MX_GPIO_Init+0x108>)
 80016fe:	f002 fc81 	bl	8004004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_VBUS_GPIO_Port, USB_VBUS_Pin, GPIO_PIN_SET);
 8001702:	2201      	movs	r2, #1
 8001704:	2101      	movs	r1, #1
 8001706:	481b      	ldr	r0, [pc, #108]	; (8001774 <MX_GPIO_Init+0x10c>)
 8001708:	f002 fc7c 	bl	8004004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SS_SD3_Pin */
  GPIO_InitStruct.Pin = SS_SD3_Pin;
 800170c:	2302      	movs	r3, #2
 800170e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001710:	2301      	movs	r3, #1
 8001712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001714:	2301      	movs	r3, #1
 8001716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001718:	2302      	movs	r3, #2
 800171a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SS_SD3_GPIO_Port, &GPIO_InitStruct);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	4812      	ldr	r0, [pc, #72]	; (800176c <MX_GPIO_Init+0x104>)
 8001724:	f002 fad2 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : SS_SD1_Pin SS_SD2_Pin SS_SD4_Pin */
  GPIO_InitStruct.Pin = SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin;
 8001728:	2386      	movs	r3, #134	; 0x86
 800172a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172c:	2301      	movs	r3, #1
 800172e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001730:	2301      	movs	r3, #1
 8001732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001734:	2302      	movs	r3, #2
 8001736:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	4619      	mov	r1, r3
 800173e:	480c      	ldr	r0, [pc, #48]	; (8001770 <MX_GPIO_Init+0x108>)
 8001740:	f002 fac4 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001744:	2301      	movs	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001748:	2301      	movs	r3, #1
 800174a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	4619      	mov	r1, r3
 800175a:	4806      	ldr	r0, [pc, #24]	; (8001774 <MX_GPIO_Init+0x10c>)
 800175c:	f002 fab6 	bl	8003ccc <HAL_GPIO_Init>

}
 8001760:	bf00      	nop
 8001762:	3728      	adds	r7, #40	; 0x28
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40023800 	.word	0x40023800
 800176c:	40020800 	.word	0x40020800
 8001770:	40020000 	.word	0x40020000
 8001774:	40020400 	.word	0x40020400

08001778 <HAL_UART_RxCpltCallback>:

uint8_t tmp1;
uint8_t tmp2;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 if(huart==&UI_UART && system_status==SYSTEM_READY)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <HAL_UART_RxCpltCallback+0x38>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d10e      	bne.n	80017a6 <HAL_UART_RxCpltCallback+0x2e>
 8001788:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <HAL_UART_RxCpltCallback+0x3c>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b0a      	cmp	r3, #10
 800178e:	d10a      	bne.n	80017a6 <HAL_UART_RxCpltCallback+0x2e>
 {
	 UI_media_process_byte(&user_interface,user_interface.media_rx_byte);
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_UART_RxCpltCallback+0x40>)
 8001792:	7b1b      	ldrb	r3, [r3, #12]
 8001794:	4619      	mov	r1, r3
 8001796:	4808      	ldr	r0, [pc, #32]	; (80017b8 <HAL_UART_RxCpltCallback+0x40>)
 8001798:	f7fe ff6e 	bl	8000678 <UI_media_process_byte>
	 HAL_UART_Receive_IT(&UI_UART,&(user_interface.media_rx_byte),1);
 800179c:	2201      	movs	r2, #1
 800179e:	4907      	ldr	r1, [pc, #28]	; (80017bc <HAL_UART_RxCpltCallback+0x44>)
 80017a0:	4803      	ldr	r0, [pc, #12]	; (80017b0 <HAL_UART_RxCpltCallback+0x38>)
 80017a2:	f006 fa77 	bl	8007c94 <HAL_UART_Receive_IT>
 }
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	2000094c 	.word	0x2000094c
 80017b4:	20001af8 	.word	0x20001af8
 80017b8:	200009f0 	.word	0x200009f0
 80017bc:	200009fc 	.word	0x200009fc

080017c0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]

 if(huart==&UI_UART)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a09      	ldr	r2, [pc, #36]	; (80017f0 <HAL_UART_TxCpltCallback+0x30>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d10b      	bne.n	80017e8 <HAL_UART_TxCpltCallback+0x28>
 {
  if(UI_media_get_byte(&user_interface,&tmp2)==UI_F_OK)
 80017d0:	4908      	ldr	r1, [pc, #32]	; (80017f4 <HAL_UART_TxCpltCallback+0x34>)
 80017d2:	4809      	ldr	r0, [pc, #36]	; (80017f8 <HAL_UART_TxCpltCallback+0x38>)
 80017d4:	f7fe ffce 	bl	8000774 <UI_media_get_byte>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d104      	bne.n	80017e8 <HAL_UART_TxCpltCallback+0x28>
  {
	    HAL_UART_Transmit_IT(&UI_UART,&tmp2,1);
 80017de:	2201      	movs	r2, #1
 80017e0:	4904      	ldr	r1, [pc, #16]	; (80017f4 <HAL_UART_TxCpltCallback+0x34>)
 80017e2:	4803      	ldr	r0, [pc, #12]	; (80017f0 <HAL_UART_TxCpltCallback+0x30>)
 80017e4:	f006 fa11 	bl	8007c0a <HAL_UART_Transmit_IT>
  }
 }
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	2000094c 	.word	0x2000094c
 80017f4:	20001b0c 	.word	0x20001b0c
 80017f8:	200009f0 	.word	0x200009f0

080017fc <icListen_prepare_messages>:

void icListen_prepare_messages()
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  collect_msg_ptr.start_addr=(uint8_t*)&collect_msg;
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <icListen_prepare_messages+0x30>)
 8001802:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <icListen_prepare_messages+0x34>)
 8001804:	601a      	str	r2, [r3, #0]
  collect_msg_ptr.size=sizeof(icListen_collect_short_mask_msg);
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <icListen_prepare_messages+0x30>)
 8001808:	2207      	movs	r2, #7
 800180a:	605a      	str	r2, [r3, #4]

  status_msg_ptr.start_addr=(uint8_t*)&status_msg;
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <icListen_prepare_messages+0x38>)
 800180e:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <icListen_prepare_messages+0x3c>)
 8001810:	601a      	str	r2, [r3, #0]
  status_msg_ptr.size=sizeof(icListen_enquire_device_msg);
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <icListen_prepare_messages+0x38>)
 8001814:	2206      	movs	r2, #6
 8001816:	605a      	str	r2, [r3, #4]

  icListen_prepare_collect_msg(&collect_msg,0x20);
 8001818:	2120      	movs	r1, #32
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <icListen_prepare_messages+0x34>)
 800181c:	f7ff fbef 	bl	8000ffe <icListen_prepare_collect_msg>
  icListen_prepare_enquire_device_msg(&status_msg);
 8001820:	4805      	ldr	r0, [pc, #20]	; (8001838 <icListen_prepare_messages+0x3c>)
 8001822:	f7ff fc0f 	bl	8001044 <icListen_prepare_enquire_device_msg>
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200009e0 	.word	0x200009e0
 8001830:	200009e8 	.word	0x200009e8
 8001834:	200009b0 	.word	0x200009b0
 8001838:	200009b8 	.word	0x200009b8

0800183c <open_new_wav_file>:

F_RES open_new_wav_file()
{
 800183c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800183e:	b08f      	sub	sp, #60	; 0x3c
 8001840:	af06      	add	r7, sp, #24
	char file_name[30];
	file_bytes_left=((icListen.settings->wav_sample_bit_depth/8)*icListen.settings->wav_sample_rate*icListen.settings->file_duration)-44;
 8001842:	4b2c      	ldr	r3, [pc, #176]	; (80018f4 <open_new_wav_file+0xb8>)
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	08db      	lsrs	r3, r3, #3
 800184a:	4a2a      	ldr	r2, [pc, #168]	; (80018f4 <open_new_wav_file+0xb8>)
 800184c:	6a12      	ldr	r2, [r2, #32]
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	fb02 f303 	mul.w	r3, r2, r3
 8001854:	4a27      	ldr	r2, [pc, #156]	; (80018f4 <open_new_wav_file+0xb8>)
 8001856:	6a12      	ldr	r2, [r2, #32]
 8001858:	6892      	ldr	r2, [r2, #8]
 800185a:	fb02 f303 	mul.w	r3, r2, r3
 800185e:	3b2c      	subs	r3, #44	; 0x2c
 8001860:	4a25      	ldr	r2, [pc, #148]	; (80018f8 <open_new_wav_file+0xbc>)
 8001862:	6013      	str	r3, [r2, #0]
	read_time(&rtc);
 8001864:	4825      	ldr	r0, [pc, #148]	; (80018fc <open_new_wav_file+0xc0>)
 8001866:	f000 fbcd 	bl	8002004 <read_time>
	sprintf(file_name,"%d:%02d%02d%02d_%02d%02d%02d.wav",microsd_storage.active_disk_indx,rtc.time.Hours,rtc.time.Minutes,rtc.time.Seconds,rtc.date.Date,rtc.date.Month,rtc.date.Year);
 800186a:	4b25      	ldr	r3, [pc, #148]	; (8001900 <open_new_wav_file+0xc4>)
 800186c:	f893 3910 	ldrb.w	r3, [r3, #2320]	; 0x910
 8001870:	461e      	mov	r6, r3
 8001872:	4b22      	ldr	r3, [pc, #136]	; (80018fc <open_new_wav_file+0xc0>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	469c      	mov	ip, r3
 8001878:	4b20      	ldr	r3, [pc, #128]	; (80018fc <open_new_wav_file+0xc0>)
 800187a:	785b      	ldrb	r3, [r3, #1]
 800187c:	461a      	mov	r2, r3
 800187e:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <open_new_wav_file+0xc0>)
 8001880:	789b      	ldrb	r3, [r3, #2]
 8001882:	4619      	mov	r1, r3
 8001884:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <open_new_wav_file+0xc0>)
 8001886:	7d9b      	ldrb	r3, [r3, #22]
 8001888:	461c      	mov	r4, r3
 800188a:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <open_new_wav_file+0xc0>)
 800188c:	7d5b      	ldrb	r3, [r3, #21]
 800188e:	461d      	mov	r5, r3
 8001890:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <open_new_wav_file+0xc0>)
 8001892:	7ddb      	ldrb	r3, [r3, #23]
 8001894:	4638      	mov	r0, r7
 8001896:	9304      	str	r3, [sp, #16]
 8001898:	9503      	str	r5, [sp, #12]
 800189a:	9402      	str	r4, [sp, #8]
 800189c:	9101      	str	r1, [sp, #4]
 800189e:	9200      	str	r2, [sp, #0]
 80018a0:	4663      	mov	r3, ip
 80018a2:	4632      	mov	r2, r6
 80018a4:	4917      	ldr	r1, [pc, #92]	; (8001904 <open_new_wav_file+0xc8>)
 80018a6:	f013 f98b 	bl	8014bc0 <siprintf>
	if(disk_kbytes_left>(file_bytes_left/1024)){
 80018aa:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <open_new_wav_file+0xbc>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	0a9a      	lsrs	r2, r3, #10
 80018b0:	4b15      	ldr	r3, [pc, #84]	; (8001908 <open_new_wav_file+0xcc>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d218      	bcs.n	80018ea <open_new_wav_file+0xae>
	 if(wav_file_open(&wav_file,file_name,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,1)==F_OK){
 80018b8:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <open_new_wav_file+0xb8>)
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <open_new_wav_file+0xb8>)
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4639      	mov	r1, r7
 80018c6:	2001      	movs	r0, #1
 80018c8:	9000      	str	r0, [sp, #0]
 80018ca:	4810      	ldr	r0, [pc, #64]	; (800190c <open_new_wav_file+0xd0>)
 80018cc:	f001 f960 	bl	8002b90 <wav_file_open>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d109      	bne.n	80018ea <open_new_wav_file+0xae>
		disk_kbytes_left-=(file_bytes_left/1024);
 80018d6:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <open_new_wav_file+0xcc>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <open_new_wav_file+0xbc>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	0a9b      	lsrs	r3, r3, #10
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	4a09      	ldr	r2, [pc, #36]	; (8001908 <open_new_wav_file+0xcc>)
 80018e4:	6013      	str	r3, [r2, #0]
		return F_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e000      	b.n	80018ec <open_new_wav_file+0xb0>
	 }
	}
    return F_ERR;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3724      	adds	r7, #36	; 0x24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018f4:	20000800 	.word	0x20000800
 80018f8:	20001afc 	.word	0x20001afc
 80018fc:	20001b10 	.word	0x20001b10
 8001900:	20000e24 	.word	0x20000e24
 8001904:	08016de8 	.word	0x08016de8
 8001908:	20001b00 	.word	0x20001b00
 800190c:	20001740 	.word	0x20001740

08001910 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001918:	f012 f92e 	bl	8013b78 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
   osEvent event;

  if(mcu_flash_read(&mcu_flash)!=F_OK){
 800191c:	4839      	ldr	r0, [pc, #228]	; (8001a04 <StartDefaultTask+0xf4>)
 800191e:	f000 faef 	bl	8001f00 <mcu_flash_read>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d02a      	beq.n	800197e <StartDefaultTask+0x6e>
  		icListen.settings->wav_sample_rate=ICLISTEN_DEFAULT_WAV_SAMPLE_RATE;
 8001928:	4b37      	ldr	r3, [pc, #220]	; (8001a08 <StartDefaultTask+0xf8>)
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
 8001930:	2200      	movs	r2, #0
 8001932:	f042 027d 	orr.w	r2, r2, #125	; 0x7d
 8001936:	705a      	strb	r2, [r3, #1]
 8001938:	2200      	movs	r2, #0
 800193a:	709a      	strb	r2, [r3, #2]
 800193c:	2200      	movs	r2, #0
 800193e:	70da      	strb	r2, [r3, #3]
  		icListen.settings->wav_sample_bit_depth=ICLISTEN_DEFAULT_WAV_SAMPLE_BIT_DEPTH;
 8001940:	4b31      	ldr	r3, [pc, #196]	; (8001a08 <StartDefaultTask+0xf8>)
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	2200      	movs	r2, #0
 8001946:	f042 0218 	orr.w	r2, r2, #24
 800194a:	711a      	strb	r2, [r3, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	715a      	strb	r2, [r3, #5]
 8001950:	2200      	movs	r2, #0
 8001952:	719a      	strb	r2, [r3, #6]
 8001954:	2200      	movs	r2, #0
 8001956:	71da      	strb	r2, [r3, #7]
  		icListen.settings->file_duration=ICLISTEN_DEFAULT_FILE_DURATION;
 8001958:	4b2b      	ldr	r3, [pc, #172]	; (8001a08 <StartDefaultTask+0xf8>)
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	2200      	movs	r2, #0
 800195e:	f042 0278 	orr.w	r2, r2, #120	; 0x78
 8001962:	721a      	strb	r2, [r3, #8]
 8001964:	2200      	movs	r2, #0
 8001966:	725a      	strb	r2, [r3, #9]
 8001968:	2200      	movs	r2, #0
 800196a:	729a      	strb	r2, [r3, #10]
 800196c:	2200      	movs	r2, #0
 800196e:	72da      	strb	r2, [r3, #11]
  		mcu_flash_save(&mcu_flash);
 8001970:	4824      	ldr	r0, [pc, #144]	; (8001a04 <StartDefaultTask+0xf4>)
 8001972:	f000 fae5 	bl	8001f40 <mcu_flash_save>
  }
  while(microsd_storage.status!=STORAGE_NOT_INITTIALIZED) {osDelay(1);}
 8001976:	e002      	b.n	800197e <StartDefaultTask+0x6e>
 8001978:	2001      	movs	r0, #1
 800197a:	f00f fe70 	bl	801165e <osDelay>
 800197e:	4b23      	ldr	r3, [pc, #140]	; (8001a0c <StartDefaultTask+0xfc>)
 8001980:	f893 3919 	ldrb.w	r3, [r3, #2329]	; 0x919
 8001984:	2b01      	cmp	r3, #1
 8001986:	d1f7      	bne.n	8001978 <StartDefaultTask+0x68>
  system_status=SYSTEM_READY;
 8001988:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <StartDefaultTask+0x100>)
 800198a:	220a      	movs	r2, #10
 800198c:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  for(;;)
  {
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 800198e:	4b21      	ldr	r3, [pc, #132]	; (8001a14 <StartDefaultTask+0x104>)
 8001990:	6819      	ldr	r1, [r3, #0]
 8001992:	f107 030c 	add.w	r3, r7, #12
 8001996:	f04f 32ff 	mov.w	r2, #4294967295
 800199a:	4618      	mov	r0, r3
 800199c:	f00f fedc 	bl	8011758 <osMessageGet>

	  if(event.status == osEventMessage)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2b10      	cmp	r3, #16
 80019a4:	d129      	bne.n	80019fa <StartDefaultTask+0xea>
	  {
		switch(event.value.v)
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d006      	beq.n	80019ba <StartDefaultTask+0xaa>
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d826      	bhi.n	80019fe <StartDefaultTask+0xee>
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d01f      	beq.n	80019f4 <StartDefaultTask+0xe4>
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d004      	beq.n	80019c2 <StartDefaultTask+0xb2>
		 case APPLICATION_START:
		   USB_set_line_coding();
		 break;

		 default:
		 break;
 80019b8:	e021      	b.n	80019fe <StartDefaultTask+0xee>
			 icListen_init_sensor_status(&icListen);
 80019ba:	4813      	ldr	r0, [pc, #76]	; (8001a08 <StartDefaultTask+0xf8>)
 80019bc:	f7ff fafa 	bl	8000fb4 <icListen_init_sensor_status>
		 break;
 80019c0:	e01e      	b.n	8001a00 <StartDefaultTask+0xf0>
			 osDelay(5000);
 80019c2:	f241 3088 	movw	r0, #5000	; 0x1388
 80019c6:	f00f fe4a 	bl	801165e <osDelay>
			 icListen_init_sensor_status(&icListen);
 80019ca:	480f      	ldr	r0, [pc, #60]	; (8001a08 <StartDefaultTask+0xf8>)
 80019cc:	f7ff faf2 	bl	8000fb4 <icListen_init_sensor_status>
			 icListen.status=ICLISTEN_CONNECTED;
 80019d0:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <StartDefaultTask+0xf8>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	775a      	strb	r2, [r3, #29]
			 osMessagePut(USB_txHandle,(uint32_t)&status_msg_ptr, 0);
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <StartDefaultTask+0x108>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4910      	ldr	r1, [pc, #64]	; (8001a1c <StartDefaultTask+0x10c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f00f fe7a 	bl	80116d8 <osMessagePut>
			 osMessagePut(USB_txHandle,(uint32_t)&collect_msg_ptr, 0);
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <StartDefaultTask+0x108>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	490d      	ldr	r1, [pc, #52]	; (8001a20 <StartDefaultTask+0x110>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	4618      	mov	r0, r3
 80019ee:	f00f fe73 	bl	80116d8 <osMessagePut>
		 break;
 80019f2:	e005      	b.n	8001a00 <StartDefaultTask+0xf0>
		   USB_set_line_coding();
 80019f4:	f012 f892 	bl	8013b1c <USB_set_line_coding>
		 break;
 80019f8:	e002      	b.n	8001a00 <StartDefaultTask+0xf0>
		 }
	   }
 80019fa:	bf00      	nop
 80019fc:	e7c7      	b.n	800198e <StartDefaultTask+0x7e>
		 break;
 80019fe:	bf00      	nop
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 8001a00:	e7c5      	b.n	800198e <StartDefaultTask+0x7e>
 8001a02:	bf00      	nop
 8001a04:	20000e04 	.word	0x20000e04
 8001a08:	20000800 	.word	0x20000800
 8001a0c:	20000e24 	.word	0x20000e24
 8001a10:	20001af8 	.word	0x20001af8
 8001a14:	200009a0 	.word	0x200009a0
 8001a18:	200009a8 	.word	0x200009a8
 8001a1c:	200009b0 	.word	0x200009b0
 8001a20:	200009e0 	.word	0x200009e0

08001a24 <storage_f>:
* @retval None
*/

/* USER CODE END Header_storage_f */
void storage_f(void const * argument)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b0a0      	sub	sp, #128	; 0x80
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN storage_f */
  osDelay(500);
 8001a2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a30:	f00f fe15 	bl	801165e <osDelay>
  char info_msg[100];

  memory_region_pointer* data_ptr;
  osEvent storage_w_event;

  sprintf(info_msg,"Wait for storage init....");
 8001a34:	f107 0318 	add.w	r3, r7, #24
 8001a38:	498f      	ldr	r1, [pc, #572]	; (8001c78 <storage_f+0x254>)
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f013 f8c0 	bl	8014bc0 <siprintf>
  HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 8001a40:	f107 0318 	add.w	r3, r7, #24
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fbcd 	bl	80001e4 <strlen>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	f107 0118 	add.w	r1, r7, #24
 8001a52:	2364      	movs	r3, #100	; 0x64
 8001a54:	4889      	ldr	r0, [pc, #548]	; (8001c7c <storage_f+0x258>)
 8001a56:	f006 f846 	bl	8007ae6 <HAL_UART_Transmit>

  sd_storage_link_ss(&microsd_storage,0,SS_SD1_Pin,GPIOA);
 8001a5a:	4b89      	ldr	r3, [pc, #548]	; (8001c80 <storage_f+0x25c>)
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4888      	ldr	r0, [pc, #544]	; (8001c84 <storage_f+0x260>)
 8001a62:	f7ff fa45 	bl	8000ef0 <sd_storage_link_ss>
  sd_storage_link_ss(&microsd_storage,1,SS_SD2_Pin,GPIOA);
 8001a66:	4b86      	ldr	r3, [pc, #536]	; (8001c80 <storage_f+0x25c>)
 8001a68:	2204      	movs	r2, #4
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	4885      	ldr	r0, [pc, #532]	; (8001c84 <storage_f+0x260>)
 8001a6e:	f7ff fa3f 	bl	8000ef0 <sd_storage_link_ss>
  sd_storage_link_ss(&microsd_storage,2,SS_SD3_Pin,SS_SD3_GPIO_Port);
 8001a72:	4b85      	ldr	r3, [pc, #532]	; (8001c88 <storage_f+0x264>)
 8001a74:	2202      	movs	r2, #2
 8001a76:	2102      	movs	r1, #2
 8001a78:	4882      	ldr	r0, [pc, #520]	; (8001c84 <storage_f+0x260>)
 8001a7a:	f7ff fa39 	bl	8000ef0 <sd_storage_link_ss>
  sd_storage_link_ss(&microsd_storage,3,SS_SD4_Pin,GPIOA);
 8001a7e:	4b80      	ldr	r3, [pc, #512]	; (8001c80 <storage_f+0x25c>)
 8001a80:	2280      	movs	r2, #128	; 0x80
 8001a82:	2103      	movs	r1, #3
 8001a84:	487f      	ldr	r0, [pc, #508]	; (8001c84 <storage_f+0x260>)
 8001a86:	f7ff fa33 	bl	8000ef0 <sd_storage_link_ss>
  while(sd_storage_init(&microsd_storage)!=F_OK) osDelay(1000);
 8001a8a:	e003      	b.n	8001a94 <storage_f+0x70>
 8001a8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a90:	f00f fde5 	bl	801165e <osDelay>
 8001a94:	487b      	ldr	r0, [pc, #492]	; (8001c84 <storage_f+0x260>)
 8001a96:	f7ff f969 	bl	8000d6c <sd_storage_init>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f5      	bne.n	8001a8c <storage_f+0x68>

  sprintf(info_msg,"detected %d cards.\r",microsd_storage.num_of_discs);
 8001aa0:	4b78      	ldr	r3, [pc, #480]	; (8001c84 <storage_f+0x260>)
 8001aa2:	f893 3918 	ldrb.w	r3, [r3, #2328]	; 0x918
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	f107 0318 	add.w	r3, r7, #24
 8001aac:	4977      	ldr	r1, [pc, #476]	; (8001c8c <storage_f+0x268>)
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f013 f886 	bl	8014bc0 <siprintf>
  HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 8001ab4:	f107 0318 	add.w	r3, r7, #24
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fb93 	bl	80001e4 <strlen>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	f107 0118 	add.w	r1, r7, #24
 8001ac6:	2364      	movs	r3, #100	; 0x64
 8001ac8:	486c      	ldr	r0, [pc, #432]	; (8001c7c <storage_f+0x258>)
 8001aca:	f006 f80c 	bl	8007ae6 <HAL_UART_Transmit>



  disk_kbytes_left=microsd_storage.active_disk->free_space;
 8001ace:	4b6d      	ldr	r3, [pc, #436]	; (8001c84 <storage_f+0x260>)
 8001ad0:	f8d3 3914 	ldr.w	r3, [r3, #2324]	; 0x914
 8001ad4:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001ad8:	4a6d      	ldr	r2, [pc, #436]	; (8001c90 <storage_f+0x26c>)
 8001ada:	6013      	str	r3, [r2, #0]
  if(open_new_wav_file()==F_ERR){
 8001adc:	f7ff feae 	bl	800183c <open_new_wav_file>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d116      	bne.n	8001b14 <storage_f+0xf0>
	sprintf(info_msg,"Not enough space for start.\r");
 8001ae6:	f107 0318 	add.w	r3, r7, #24
 8001aea:	496a      	ldr	r1, [pc, #424]	; (8001c94 <storage_f+0x270>)
 8001aec:	4618      	mov	r0, r3
 8001aee:	f013 f867 	bl	8014bc0 <siprintf>
	HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 8001af2:	f107 0318 	add.w	r3, r7, #24
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fb74 	bl	80001e4 <strlen>
 8001afc:	4603      	mov	r3, r0
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	f107 0118 	add.w	r1, r7, #24
 8001b04:	2364      	movs	r3, #100	; 0x64
 8001b06:	485d      	ldr	r0, [pc, #372]	; (8001c7c <storage_f+0x258>)
 8001b08:	f005 ffed 	bl	8007ae6 <HAL_UART_Transmit>
	while(1){osDelay(1);}
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f00f fda6 	bl	801165e <osDelay>
 8001b12:	e7fb      	b.n	8001b0c <storage_f+0xe8>

  /* Infinite loop */
  for(;;)
  {

   storage_w_event = osMessageGet(storage_wHandle, osWaitForever);
 8001b14:	4b60      	ldr	r3, [pc, #384]	; (8001c98 <storage_f+0x274>)
 8001b16:	6819      	ldr	r1, [r3, #0]
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b20:	4618      	mov	r0, r3
 8001b22:	f00f fe19 	bl	8011758 <osMessageGet>
   if(storage_w_event.status == osEventMessage){
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2b10      	cmp	r3, #16
 8001b2a:	d1f3      	bne.n	8001b14 <storage_f+0xf0>
	 data_ptr=(memory_region_pointer*)storage_w_event.value.v;
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	67fb      	str	r3, [r7, #124]	; 0x7c


	 if(file_bytes_left>data_ptr->size){
 8001b30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	4b59      	ldr	r3, [pc, #356]	; (8001c9c <storage_f+0x278>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d22c      	bcs.n	8001b96 <storage_f+0x172>
	   if(wav_file_write(&wav_file,data_ptr->start_addr,data_ptr->size)==F_OK){
 8001b3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b3e:	6819      	ldr	r1, [r3, #0]
 8001b40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4856      	ldr	r0, [pc, #344]	; (8001ca0 <storage_f+0x27c>)
 8001b48:	f001 f8d7 	bl	8002cfa <wav_file_write>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d107      	bne.n	8001b62 <storage_f+0x13e>
	      file_bytes_left-=data_ptr->size;
 8001b52:	4b52      	ldr	r3, [pc, #328]	; (8001c9c <storage_f+0x278>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	4a4f      	ldr	r2, [pc, #316]	; (8001c9c <storage_f+0x278>)
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	e7d8      	b.n	8001b14 <storage_f+0xf0>
	   }
	   else{
	      wav_file_close(&wav_file);
 8001b62:	484f      	ldr	r0, [pc, #316]	; (8001ca0 <storage_f+0x27c>)
 8001b64:	f001 f898 	bl	8002c98 <wav_file_close>
	      sprintf(info_msg,"Write error.\r");
 8001b68:	f107 0318 	add.w	r3, r7, #24
 8001b6c:	494d      	ldr	r1, [pc, #308]	; (8001ca4 <storage_f+0x280>)
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f013 f826 	bl	8014bc0 <siprintf>
	      HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 8001b74:	f107 0318 	add.w	r3, r7, #24
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fb33 	bl	80001e4 <strlen>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	f107 0118 	add.w	r1, r7, #24
 8001b86:	2364      	movs	r3, #100	; 0x64
 8001b88:	483c      	ldr	r0, [pc, #240]	; (8001c7c <storage_f+0x258>)
 8001b8a:	f005 ffac 	bl	8007ae6 <HAL_UART_Transmit>
	      while(1){osDelay(1);}
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f00f fd65 	bl	801165e <osDelay>
 8001b94:	e7fb      	b.n	8001b8e <storage_f+0x16a>
	   }
	 }
	 else{
		wav_file_close(&wav_file);
 8001b96:	4842      	ldr	r0, [pc, #264]	; (8001ca0 <storage_f+0x27c>)
 8001b98:	f001 f87e 	bl	8002c98 <wav_file_close>
		if(open_new_wav_file()!=F_OK){
 8001b9c:	f7ff fe4e 	bl	800183c <open_new_wav_file>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d028      	beq.n	8001bf8 <storage_f+0x1d4>
		  do{
				if(sd_storage_set_next_disk(&microsd_storage)!=F_OK){
 8001ba6:	4837      	ldr	r0, [pc, #220]	; (8001c84 <storage_f+0x260>)
 8001ba8:	f7ff f9c0 	bl	8000f2c <sd_storage_set_next_disk>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d016      	beq.n	8001be0 <storage_f+0x1bc>
	        		sprintf(info_msg,"End of storage reached.\r");
 8001bb2:	f107 0318 	add.w	r3, r7, #24
 8001bb6:	493c      	ldr	r1, [pc, #240]	; (8001ca8 <storage_f+0x284>)
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f013 f801 	bl	8014bc0 <siprintf>
		        	HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 8001bbe:	f107 0318 	add.w	r3, r7, #24
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe fb0e 	bl	80001e4 <strlen>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	f107 0118 	add.w	r1, r7, #24
 8001bd0:	2364      	movs	r3, #100	; 0x64
 8001bd2:	482a      	ldr	r0, [pc, #168]	; (8001c7c <storage_f+0x258>)
 8001bd4:	f005 ff87 	bl	8007ae6 <HAL_UART_Transmit>
		        	while(1){osDelay(1);}
 8001bd8:	2001      	movs	r0, #1
 8001bda:	f00f fd40 	bl	801165e <osDelay>
 8001bde:	e7fb      	b.n	8001bd8 <storage_f+0x1b4>
				}
				disk_kbytes_left=microsd_storage.active_disk->free_space;
 8001be0:	4b28      	ldr	r3, [pc, #160]	; (8001c84 <storage_f+0x260>)
 8001be2:	f8d3 3914 	ldr.w	r3, [r3, #2324]	; 0x914
 8001be6:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001bea:	4a29      	ldr	r2, [pc, #164]	; (8001c90 <storage_f+0x26c>)
 8001bec:	6013      	str	r3, [r2, #0]
		   }while(open_new_wav_file()!=F_OK);
 8001bee:	f7ff fe25 	bl	800183c <open_new_wav_file>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1d6      	bne.n	8001ba6 <storage_f+0x182>
	   	 }
	     sprintf(info_msg,"File changed.\r");
 8001bf8:	f107 0318 	add.w	r3, r7, #24
 8001bfc:	492b      	ldr	r1, [pc, #172]	; (8001cac <storage_f+0x288>)
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f012 ffde 	bl	8014bc0 <siprintf>
	     HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 8001c04:	f107 0318 	add.w	r3, r7, #24
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe faeb 	bl	80001e4 <strlen>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	f107 0118 	add.w	r1, r7, #24
 8001c16:	2364      	movs	r3, #100	; 0x64
 8001c18:	4818      	ldr	r0, [pc, #96]	; (8001c7c <storage_f+0x258>)
 8001c1a:	f005 ff64 	bl	8007ae6 <HAL_UART_Transmit>
		 if(wav_file_write(&wav_file,data_ptr->start_addr,data_ptr->size)==F_OK){
 8001c1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c20:	6819      	ldr	r1, [r3, #0]
 8001c22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	461a      	mov	r2, r3
 8001c28:	481d      	ldr	r0, [pc, #116]	; (8001ca0 <storage_f+0x27c>)
 8001c2a:	f001 f866 	bl	8002cfa <wav_file_write>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d107      	bne.n	8001c44 <storage_f+0x220>
			 file_bytes_left-=data_ptr->size;
 8001c34:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <storage_f+0x278>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	4a17      	ldr	r2, [pc, #92]	; (8001c9c <storage_f+0x278>)
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	e767      	b.n	8001b14 <storage_f+0xf0>
	     }
		 else{
			 wav_file_close(&wav_file);
 8001c44:	4816      	ldr	r0, [pc, #88]	; (8001ca0 <storage_f+0x27c>)
 8001c46:	f001 f827 	bl	8002c98 <wav_file_close>
		     sprintf(info_msg,"Write error.\r");
 8001c4a:	f107 0318 	add.w	r3, r7, #24
 8001c4e:	4915      	ldr	r1, [pc, #84]	; (8001ca4 <storage_f+0x280>)
 8001c50:	4618      	mov	r0, r3
 8001c52:	f012 ffb5 	bl	8014bc0 <siprintf>
		     HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 8001c56:	f107 0318 	add.w	r3, r7, #24
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe fac2 	bl	80001e4 <strlen>
 8001c60:	4603      	mov	r3, r0
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	f107 0118 	add.w	r1, r7, #24
 8001c68:	2364      	movs	r3, #100	; 0x64
 8001c6a:	4804      	ldr	r0, [pc, #16]	; (8001c7c <storage_f+0x258>)
 8001c6c:	f005 ff3b 	bl	8007ae6 <HAL_UART_Transmit>
		     while(1){osDelay(1);}
 8001c70:	2001      	movs	r0, #1
 8001c72:	f00f fcf4 	bl	801165e <osDelay>
 8001c76:	e7fb      	b.n	8001c70 <storage_f+0x24c>
 8001c78:	08016e0c 	.word	0x08016e0c
 8001c7c:	2000094c 	.word	0x2000094c
 8001c80:	40020000 	.word	0x40020000
 8001c84:	20000e24 	.word	0x20000e24
 8001c88:	40020800 	.word	0x40020800
 8001c8c:	08016e28 	.word	0x08016e28
 8001c90:	20001b00 	.word	0x20001b00
 8001c94:	08016e3c 	.word	0x08016e3c
 8001c98:	200009ac 	.word	0x200009ac
 8001c9c:	20001afc 	.word	0x20001afc
 8001ca0:	20001740 	.word	0x20001740
 8001ca4:	08016e5c 	.word	0x08016e5c
 8001ca8:	08016e6c 	.word	0x08016e6c
 8001cac:	08016e88 	.word	0x08016e88

08001cb0 <icListen_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_icListen_f */
void icListen_f(void const * argument)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b0a0      	sub	sp, #128	; 0x80
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN icListen_f */
  /* Infinite loop */
  uint8_t msg_type;
  memory_region_pointer* usb_tx_msg_ptr;
  memory_region_pointer  parsed_data_ptr[10];
  uint8_t                parsed_data_ptr_index=0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

  osEvent event;

  icListen_prepare_messages();
 8001cbe:	f7ff fd9d 	bl	80017fc <icListen_prepare_messages>
  icListen.settings=(icListen_settings_typedef*)mcu_flash.data.raw_data;
 8001cc2:	4b3b      	ldr	r3, [pc, #236]	; (8001db0 <icListen_f+0x100>)
 8001cc4:	4a3b      	ldr	r2, [pc, #236]	; (8001db4 <icListen_f+0x104>)
 8001cc6:	621a      	str	r2, [r3, #32]
  icListen_init_sensor_status(&icListen);
 8001cc8:	4839      	ldr	r0, [pc, #228]	; (8001db0 <icListen_f+0x100>)
 8001cca:	f7ff f973 	bl	8000fb4 <icListen_init_sensor_status>


  /* Infinite loop */
  for(;;)
  {
	   event = osMessageGet(USB_txHandle, osWaitForever);
 8001cce:	4b3a      	ldr	r3, [pc, #232]	; (8001db8 <icListen_f+0x108>)
 8001cd0:	6819      	ldr	r1, [r3, #0]
 8001cd2:	f107 0318 	add.w	r3, r7, #24
 8001cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f00f fd3c 	bl	8011758 <osMessageGet>
	   if(icListen.status==ICLISTEN_CONNECTED){
 8001ce0:	4b33      	ldr	r3, [pc, #204]	; (8001db0 <icListen_f+0x100>)
 8001ce2:	7f5b      	ldrb	r3, [r3, #29]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1f2      	bne.n	8001cce <icListen_f+0x1e>
		if(event.status == osEventMessage){
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	2b10      	cmp	r3, #16
 8001cec:	d109      	bne.n	8001d02 <icListen_f+0x52>
		   usb_tx_msg_ptr=(memory_region_pointer*)event.value.v;
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	67bb      	str	r3, [r7, #120]	; 0x78
		   USB_transmit_msg(usb_tx_msg_ptr->start_addr,usb_tx_msg_ptr->size);
 8001cf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	f011 fedd 	bl	8013abc <USB_transmit_msg>
		}

		event = osMessageGet(USB_rxHandle, 20);
 8001d02:	4b2e      	ldr	r3, [pc, #184]	; (8001dbc <icListen_f+0x10c>)
 8001d04:	6819      	ldr	r1, [r3, #0]
 8001d06:	463b      	mov	r3, r7
 8001d08:	2214      	movs	r2, #20
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f00f fd24 	bl	8011758 <osMessageGet>
 8001d10:	f107 0318 	add.w	r3, r7, #24
 8001d14:	463a      	mov	r2, r7
 8001d16:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		if(event.status == osEventMessage){
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	2b10      	cmp	r3, #16
 8001d20:	d1d5      	bne.n	8001cce <icListen_f+0x1e>

		   if(icListen_parse_msg((uint8_t*)event.value.v,&icListen,&msg_type,&parsed_data_ptr[parsed_data_ptr_index])==F_OK)
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001d2a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4413      	add	r3, r2
 8001d32:	f107 0277 	add.w	r2, r7, #119	; 0x77
 8001d36:	491e      	ldr	r1, [pc, #120]	; (8001db0 <icListen_f+0x100>)
 8001d38:	f7ff f99f 	bl	800107a <icListen_parse_msg>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1c5      	bne.n	8001cce <icListen_f+0x1e>
		   {
			   if(msg_type==MSG_TYPE_COLLECT_DATA){
 8001d42:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001d46:	2b43      	cmp	r3, #67	; 0x43
 8001d48:	d1c1      	bne.n	8001cce <icListen_f+0x1e>
			     if(parsed_data_ptr[parsed_data_ptr_index].size>7){
 8001d4a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	3380      	adds	r3, #128	; 0x80
 8001d52:	443b      	add	r3, r7
 8001d54:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8001d58:	2b07      	cmp	r3, #7
 8001d5a:	d91d      	bls.n	8001d98 <icListen_f+0xe8>
				  osMessagePut(storage_wHandle,(uint32_t)&parsed_data_ptr[parsed_data_ptr_index],0);
 8001d5c:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <icListen_f+0x110>)
 8001d5e:	6818      	ldr	r0, [r3, #0]
 8001d60:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001d64:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f00f fcb2 	bl	80116d8 <osMessagePut>
				  parsed_data_ptr_index++;
 8001d74:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001d78:	3301      	adds	r3, #1
 8001d7a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				  parsed_data_ptr_index%=10;
 8001d7e:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <icListen_f+0x114>)
 8001d84:	fba3 1302 	umull	r1, r3, r3, r2
 8001d88:	08d9      	lsrs	r1, r3, #3
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	440b      	add	r3, r1
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			     }
				 osDelay(15);
 8001d98:	200f      	movs	r0, #15
 8001d9a:	f00f fc60 	bl	801165e <osDelay>
				 osMessagePut(USB_txHandle,(uint32_t)&collect_msg_ptr, 0);
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <icListen_f+0x108>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4909      	ldr	r1, [pc, #36]	; (8001dc8 <icListen_f+0x118>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	4618      	mov	r0, r3
 8001da8:	f00f fc96 	bl	80116d8 <osMessagePut>
	   event = osMessageGet(USB_txHandle, osWaitForever);
 8001dac:	e78f      	b.n	8001cce <icListen_f+0x1e>
 8001dae:	bf00      	nop
 8001db0:	20000800 	.word	0x20000800
 8001db4:	20000e10 	.word	0x20000e10
 8001db8:	200009a8 	.word	0x200009a8
 8001dbc:	200009a4 	.word	0x200009a4
 8001dc0:	200009ac 	.word	0x200009ac
 8001dc4:	cccccccd 	.word	0xcccccccd
 8001dc8:	200009e0 	.word	0x200009e0

08001dcc <uart_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_f */
void uart_f(void const * argument)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uart_f */
  uint8_t tmp;
  while(system_status!=SYSTEM_READY) {osDelay(1);}
 8001dd4:	e002      	b.n	8001ddc <uart_f+0x10>
 8001dd6:	2001      	movs	r0, #1
 8001dd8:	f00f fc41 	bl	801165e <osDelay>
 8001ddc:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <uart_f+0x54>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b0a      	cmp	r3, #10
 8001de2:	d1f8      	bne.n	8001dd6 <uart_f+0xa>
  user_interface.media_status=UI_MEDIA_READY;
 8001de4:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <uart_f+0x58>)
 8001de6:	220a      	movs	r2, #10
 8001de8:	735a      	strb	r2, [r3, #13]
  /* Infinite loop */

  for(;;)
  {
   if(UI_UART.gState!=HAL_UART_STATE_BUSY_TX)
 8001dea:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <uart_f+0x5c>)
 8001dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b21      	cmp	r3, #33	; 0x21
 8001df4:	d00f      	beq.n	8001e16 <uart_f+0x4a>
   {
 	if(UI_media_get_byte(&user_interface,&tmp)==UI_F_OK) HAL_UART_Transmit_IT(&UI_UART,&tmp,1);
 8001df6:	f107 030f 	add.w	r3, r7, #15
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4809      	ldr	r0, [pc, #36]	; (8001e24 <uart_f+0x58>)
 8001dfe:	f7fe fcb9 	bl	8000774 <UI_media_get_byte>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d106      	bne.n	8001e16 <uart_f+0x4a>
 8001e08:	f107 030f 	add.w	r3, r7, #15
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4805      	ldr	r0, [pc, #20]	; (8001e28 <uart_f+0x5c>)
 8001e12:	f005 fefa 	bl	8007c0a <HAL_UART_Transmit_IT>
   }
   osDelay(1);
 8001e16:	2001      	movs	r0, #1
 8001e18:	f00f fc21 	bl	801165e <osDelay>
   if(UI_UART.gState!=HAL_UART_STATE_BUSY_TX)
 8001e1c:	e7e5      	b.n	8001dea <uart_f+0x1e>
 8001e1e:	bf00      	nop
 8001e20:	20001af8 	.word	0x20001af8
 8001e24:	200009f0 	.word	0x200009f0
 8001e28:	2000094c 	.word	0x2000094c

08001e2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a04      	ldr	r2, [pc, #16]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d101      	bne.n	8001e42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e3e:	f000 ffcb 	bl	8002dd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40010000 	.word	0x40010000

08001e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e54:	b672      	cpsid	i
}
 8001e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e58:	e7fe      	b.n	8001e58 <Error_Handler+0x8>
	...

08001e5c <mcu_flash_init>:
#if defined(STM32F205xx)  //KB
uint32_t  flash_block_size[]={16,16,16,16,64,128,128,128,128,128,128,128};
#endif

void mcu_flash_init(mcu_flash_typedef* mcu_flash_obj,uint32_t first_block)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b087      	sub	sp, #28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
	uint32_t temp=0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
	int32_t temp2=0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
	if(first_block<FLASH_NUM_OF_BLOCKS){
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	2b0b      	cmp	r3, #11
 8001e72:	d83d      	bhi.n	8001ef0 <mcu_flash_init+0x94>
      mcu_flash_obj->first_block_num=first_block;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	605a      	str	r2, [r3, #4]
      for(int i=0;i<first_block;i++) temp+=flash_block_size[i];
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	e009      	b.n	8001e94 <mcu_flash_init+0x38>
 8001e80:	4a1e      	ldr	r2, [pc, #120]	; (8001efc <mcu_flash_init+0xa0>)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	3301      	adds	r3, #1
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d8f1      	bhi.n	8001e80 <mcu_flash_init+0x24>
	  mcu_flash_obj->first_block_addr=FLASH_BASE+(temp*1024);
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001ea2:	029a      	lsls	r2, r3, #10
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	601a      	str	r2, [r3, #0]

	  temp2=FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE;
 8001ea8:	2312      	movs	r3, #18
 8001eaa:	613b      	str	r3, [r7, #16]
	  mcu_flash_obj->num_of_blocks=0;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	721a      	strb	r2, [r3, #8]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	725a      	strb	r2, [r3, #9]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	729a      	strb	r2, [r3, #10]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	72da      	strb	r2, [r3, #11]
	  for(int i=mcu_flash_obj->first_block_num;i<FLASH_NUM_OF_BLOCKS&&temp2>0;i++) {
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	e00e      	b.n	8001ee4 <mcu_flash_init+0x88>
		  temp2-=flash_block_size[i];
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	490c      	ldr	r1, [pc, #48]	; (8001efc <mcu_flash_init+0xa0>)
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	613b      	str	r3, [r7, #16]
		  mcu_flash_obj->num_of_blocks++;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	609a      	str	r2, [r3, #8]
	  for(int i=mcu_flash_obj->first_block_num;i<FLASH_NUM_OF_BLOCKS&&temp2>0;i++) {
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2b0b      	cmp	r3, #11
 8001ee8:	dc02      	bgt.n	8001ef0 <mcu_flash_init+0x94>
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	dcea      	bgt.n	8001ec6 <mcu_flash_init+0x6a>
	  }
	}
}
 8001ef0:	bf00      	nop
 8001ef2:	371c      	adds	r7, #28
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	20000200 	.word	0x20000200

08001f00 <mcu_flash_read>:

F_RES mcu_flash_read(mcu_flash_typedef* mcu_flash_obj)
{
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
	 memcpy((uint8_t*)&(mcu_flash_obj->data),(uint8_t*)mcu_flash_obj->first_block_addr,FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f103 000c 	add.w	r0, r3, #12
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2212      	movs	r2, #18
 8001f14:	4619      	mov	r1, r3
 8001f16:	f012 fa71 	bl	80143fc <memcpy>
	 if(mcu_flash_obj->data.crc==get_crc16_arc(mcu_flash_obj->data.raw_data,FLASH_DATA_SIZE)){
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	8b9b      	ldrh	r3, [r3, #28]
 8001f1e:	b29c      	uxth	r4, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	330c      	adds	r3, #12
 8001f24:	2110      	movs	r1, #16
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe feea 	bl	8000d00 <get_crc16_arc>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	429c      	cmp	r4, r3
 8001f30:	d101      	bne.n	8001f36 <mcu_flash_read+0x36>
		 return F_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e000      	b.n	8001f38 <mcu_flash_read+0x38>
	 }
	 else{
		 return F_ERR;
 8001f36:	2301      	movs	r3, #1
	 }

}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd90      	pop	{r4, r7, pc}

08001f40 <mcu_flash_save>:
void mcu_flash_save(mcu_flash_typedef* mcu_flash_obj)
{
 8001f40:	b5b0      	push	{r4, r5, r7, lr}
 8001f42:	b08c      	sub	sp, #48	; 0x30
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	uint32_t i=0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t tmp;
	uint32_t pgerr = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	623b      	str	r3, [r7, #32]
	uint8_t* data=(uint8_t*)&mcu_flash_obj->data;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	330c      	adds	r3, #12
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24

	mcu_flash_obj->data.crc=get_crc16_arc(mcu_flash_obj->data.raw_data,FLASH_DATA_SIZE);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	330c      	adds	r3, #12
 8001f5a:	2110      	movs	r1, #16
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fecf 	bl	8000d00 <get_crc16_arc>
 8001f62:	4603      	mov	r3, r0
 8001f64:	461a      	mov	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	839a      	strh	r2, [r3, #28]

    HAL_FLASH_Unlock();
 8001f6a:	f001 fc2b 	bl	80037c4 <HAL_FLASH_Unlock>
    #if defined(STM32F405xx)
	FLASH_EraseInitTypeDef erase_info = {
 8001f6e:	f107 030c 	add.w	r3, r7, #12
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	605a      	str	r2, [r3, #4]
 8001f78:	609a      	str	r2, [r3, #8]
 8001f7a:	60da      	str	r2, [r3, #12]
 8001f7c:	611a      	str	r2, [r3, #16]
		.TypeErase = FLASH_TYPEERASE_SECTORS,
		.Sector = mcu_flash_obj->first_block_num,
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
	FLASH_EraseInitTypeDef erase_info = {
 8001f82:	617b      	str	r3, [r7, #20]
		.NbSectors = mcu_flash_obj->num_of_blocks,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
	FLASH_EraseInitTypeDef erase_info = {
 8001f88:	61bb      	str	r3, [r7, #24]
	.NbPages = mcu_flash_obj->num_of_blocks,
    };
    #endif


	HAL_FLASHEx_Erase(&erase_info, &pgerr);
 8001f8a:	f107 0220 	add.w	r2, r7, #32
 8001f8e:	f107 030c 	add.w	r3, r7, #12
 8001f92:	4611      	mov	r1, r2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f001 fd77 	bl	8003a88 <HAL_FLASHEx_Erase>

	if(pgerr != 0xFFFFFFFFul)
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa0:	d027      	beq.n	8001ff2 <mcu_flash_save+0xb2>
	{
		HAL_FLASH_Lock();
 8001fa2:	f001 fc31 	bl	8003808 <HAL_FLASH_Lock>
 8001fa6:	e029      	b.n	8001ffc <mcu_flash_save+0xbc>
		return ;
	}

	while(i<(FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE))
	{
        tmp=(tmp&0x0000)|(data[i]&0x00FF);
 8001fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fac:	4413      	add	r3, r2
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	857b      	strh	r3, [r7, #42]	; 0x2a
		if((i+1)<(FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE)) tmp=tmp|(data[i+1]<<8&0xFF00);
 8001fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	2b11      	cmp	r3, #17
 8001fb8:	d80b      	bhi.n	8001fd2 <mcu_flash_save+0x92>
 8001fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc0:	4413      	add	r3, r2
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	021b      	lsls	r3, r3, #8
 8001fc6:	b21a      	sxth	r2, r3
 8001fc8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	b21b      	sxth	r3, r3
 8001fd0:	857b      	strh	r3, [r7, #42]	; 0x2a
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,mcu_flash_obj->first_block_addr+i,tmp);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd8:	18d1      	adds	r1, r2, r3
 8001fda:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fdc:	2200      	movs	r2, #0
 8001fde:	461c      	mov	r4, r3
 8001fe0:	4615      	mov	r5, r2
 8001fe2:	4622      	mov	r2, r4
 8001fe4:	462b      	mov	r3, r5
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	f001 fb98 	bl	800371c <HAL_FLASH_Program>
		i=i+2;
 8001fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fee:	3302      	adds	r3, #2
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(i<(FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE))
 8001ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff4:	2b11      	cmp	r3, #17
 8001ff6:	d9d7      	bls.n	8001fa8 <mcu_flash_save+0x68>
	}

	HAL_FLASH_Lock();
 8001ff8:	f001 fc06 	bl	8003808 <HAL_FLASH_Lock>
}
 8001ffc:	3730      	adds	r7, #48	; 0x30
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002004 <read_time>:

extern RTC_HandleTypeDef hrtc;
rtc_typedef rtc;

time_t read_time(rtc_typedef* self_object)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08c      	sub	sp, #48	; 0x30
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
	struct tm currTime;
	HAL_RTC_GetTime(&hrtc, &self_object->time, RTC_FORMAT_BIN);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	4619      	mov	r1, r3
 8002012:	4818      	ldr	r0, [pc, #96]	; (8002074 <read_time+0x70>)
 8002014:	f004 fa96 	bl	8006544 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &self_object->date, RTC_FORMAT_BIN);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3314      	adds	r3, #20
 800201c:	2200      	movs	r2, #0
 800201e:	4619      	mov	r1, r3
 8002020:	4814      	ldr	r0, [pc, #80]	; (8002074 <read_time+0x70>)
 8002022:	f004 fb71 	bl	8006708 <HAL_RTC_GetDate>
	currTime.tm_hour=self_object->time.Hours;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	617b      	str	r3, [r7, #20]
	currTime.tm_min=self_object->time.Minutes;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	785b      	ldrb	r3, [r3, #1]
 8002030:	613b      	str	r3, [r7, #16]
	currTime.tm_sec=self_object->time.Seconds;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	789b      	ldrb	r3, [r3, #2]
 8002036:	60fb      	str	r3, [r7, #12]
	currTime.tm_mday=self_object->date.Date;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	7d9b      	ldrb	r3, [r3, #22]
 800203c:	61bb      	str	r3, [r7, #24]
	currTime.tm_mon=self_object->date.Month-1;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	7d5b      	ldrb	r3, [r3, #21]
 8002042:	3b01      	subs	r3, #1
 8002044:	61fb      	str	r3, [r7, #28]
	currTime.tm_year=(2000+self_object->date.Year)-1900;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	7ddb      	ldrb	r3, [r3, #23]
 800204a:	3364      	adds	r3, #100	; 0x64
 800204c:	623b      	str	r3, [r7, #32]
	self_object->timestamp=mktime(&currTime);
 800204e:	f107 030c 	add.w	r3, r7, #12
 8002052:	4618      	mov	r0, r3
 8002054:	f012 fac0 	bl	80145d8 <mktime>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	return self_object->timestamp;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
}
 8002068:	4610      	mov	r0, r2
 800206a:	4619      	mov	r1, r3
 800206c:	3730      	adds	r7, #48	; 0x30
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	2000082c 	.word	0x2000082c

08002078 <set_time>:

time_t set_time(rtc_typedef* self_object)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetTime(&hrtc, &self_object->time, RTC_FORMAT_BIN);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	4619      	mov	r1, r3
 8002086:	4808      	ldr	r0, [pc, #32]	; (80020a8 <set_time+0x30>)
 8002088:	f004 f9c2 	bl	8006410 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &self_object->date, RTC_FORMAT_BIN);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3314      	adds	r3, #20
 8002090:	2200      	movs	r2, #0
 8002092:	4619      	mov	r1, r3
 8002094:	4804      	ldr	r0, [pc, #16]	; (80020a8 <set_time+0x30>)
 8002096:	f004 fab3 	bl	8006600 <HAL_RTC_SetDate>
}
 800209a:	bf00      	nop
 800209c:	4610      	mov	r0, r2
 800209e:	4619      	mov	r1, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	2000082c 	.word	0x2000082c

080020ac <sd_ss_set_active>:
extern volatile uint16_t htim2;

uint8_t spi_rx_buffer[512];

void sd_ss_set_active(uint8_t drv)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
  active_sd_ss_pin=sd_cards_ss[drv].sd_ss_pin;
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	4a08      	ldr	r2, [pc, #32]	; (80020dc <sd_ss_set_active+0x30>)
 80020ba:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 80020be:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <sd_ss_set_active+0x34>)
 80020c0:	801a      	strh	r2, [r3, #0]
  active_sd_ss_port=sd_cards_ss[drv].sd_ss_port;
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	4a05      	ldr	r2, [pc, #20]	; (80020dc <sd_ss_set_active+0x30>)
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4413      	add	r3, r2
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	4a05      	ldr	r2, [pc, #20]	; (80020e4 <sd_ss_set_active+0x38>)
 80020ce:	6013      	str	r3, [r2, #0]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	20001b38 	.word	0x20001b38
 80020e0:	20001b32 	.word	0x20001b32
 80020e4:	20001b34 	.word	0x20001b34

080020e8 <sd_ss_active_pin_down>:

void sd_ss_active_pin_down()
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(active_sd_ss_port, active_sd_ss_pin, GPIO_PIN_RESET);
 80020ec:	4b04      	ldr	r3, [pc, #16]	; (8002100 <sd_ss_active_pin_down+0x18>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a04      	ldr	r2, [pc, #16]	; (8002104 <sd_ss_active_pin_down+0x1c>)
 80020f2:	8811      	ldrh	r1, [r2, #0]
 80020f4:	2200      	movs	r2, #0
 80020f6:	4618      	mov	r0, r3
 80020f8:	f001 ff84 	bl	8004004 <HAL_GPIO_WritePin>
}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20001b34 	.word	0x20001b34
 8002104:	20001b32 	.word	0x20001b32

08002108 <sd_ss_active_pin_up>:
void sd_ss_active_pin_up()
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(active_sd_ss_port, active_sd_ss_pin, GPIO_PIN_SET);
 800210c:	4b04      	ldr	r3, [pc, #16]	; (8002120 <sd_ss_active_pin_up+0x18>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a04      	ldr	r2, [pc, #16]	; (8002124 <sd_ss_active_pin_up+0x1c>)
 8002112:	8811      	ldrh	r1, [r2, #0]
 8002114:	2201      	movs	r2, #1
 8002116:	4618      	mov	r0, r3
 8002118:	f001 ff74 	bl	8004004 <HAL_GPIO_WritePin>
}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20001b34 	.word	0x20001b34
 8002124:	20001b32 	.word	0x20001b32

08002128 <SD_cmd>:



//-----------------------------------------------
static uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	6039      	str	r1, [r7, #0]
 8002132:	71fb      	strb	r3, [r7, #7]
  uint8_t n, res;
  // ACMD<n> is the command sequense of CMD55-CMD<n>
  if (cmd & 0x80)
 8002134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002138:	2b00      	cmp	r3, #0
 800213a:	da0e      	bge.n	800215a <SD_cmd+0x32>
  {
    cmd &= 0x7F;
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002142:	71fb      	strb	r3, [r7, #7]
    res = SD_cmd(CMD55, 0);
 8002144:	2100      	movs	r1, #0
 8002146:	2077      	movs	r0, #119	; 0x77
 8002148:	f7ff ffee 	bl	8002128 <SD_cmd>
 800214c:	4603      	mov	r3, r0
 800214e:	73bb      	strb	r3, [r7, #14]
    if (res > 1) return res;
 8002150:	7bbb      	ldrb	r3, [r7, #14]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d901      	bls.n	800215a <SD_cmd+0x32>
 8002156:	7bbb      	ldrb	r3, [r7, #14]
 8002158:	e043      	b.n	80021e2 <SD_cmd+0xba>
  }
  // Select the card
  SS_SD_DESELECT();
 800215a:	f7ff ffd5 	bl	8002108 <sd_ss_active_pin_up>
  SPI_ReceiveByte();
 800215e:	f000 f96a 	bl	8002436 <SPI_ReceiveByte>

  SS_SD_SELECT();
 8002162:	f7ff ffc1 	bl	80020e8 <sd_ss_active_pin_down>
  SPI_ReceiveByte();
 8002166:	f000 f966 	bl	8002436 <SPI_ReceiveByte>
  // Send a command packet
  SPI_SendByte(cmd); // Start + Command index
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	4618      	mov	r0, r3
 800216e:	f000 f955 	bl	800241c <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 24)); // Argument[31..24]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	0e1b      	lsrs	r3, r3, #24
 8002176:	b2db      	uxtb	r3, r3
 8002178:	4618      	mov	r0, r3
 800217a:	f000 f94f 	bl	800241c <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 16)); // Argument[23..16]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	0c1b      	lsrs	r3, r3, #16
 8002182:	b2db      	uxtb	r3, r3
 8002184:	4618      	mov	r0, r3
 8002186:	f000 f949 	bl	800241c <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 8)); // Argument[15..8]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	0a1b      	lsrs	r3, r3, #8
 800218e:	b2db      	uxtb	r3, r3
 8002190:	4618      	mov	r0, r3
 8002192:	f000 f943 	bl	800241c <SPI_SendByte>
  SPI_SendByte((uint8_t)arg); // Argument[7..0]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	4618      	mov	r0, r3
 800219c:	f000 f93e 	bl	800241c <SPI_SendByte>

  n = 0x01; // Dummy CRC + Stop
 80021a0:	2301      	movs	r3, #1
 80021a2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0) {n = 0x95;} // Valid CRC for CMD0(0)
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	2b40      	cmp	r3, #64	; 0x40
 80021a8:	d101      	bne.n	80021ae <SD_cmd+0x86>
 80021aa:	2395      	movs	r3, #149	; 0x95
 80021ac:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD8) {n = 0x87;} // Valid CRC for CMD8(0x1AA)
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	2b48      	cmp	r3, #72	; 0x48
 80021b2:	d101      	bne.n	80021b8 <SD_cmd+0x90>
 80021b4:	2387      	movs	r3, #135	; 0x87
 80021b6:	73fb      	strb	r3, [r7, #15]
  SPI_SendByte(n);
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 f92e 	bl	800241c <SPI_SendByte>
  // Receive a command response
  n = 10; // Wait for a valid response in timeout of 10 attempts
 80021c0:	230a      	movs	r3, #10
 80021c2:	73fb      	strb	r3, [r7, #15]
  do {
    res = SPI_ReceiveByte();
 80021c4:	f000 f937 	bl	8002436 <SPI_ReceiveByte>
 80021c8:	4603      	mov	r3, r0
 80021ca:	73bb      	strb	r3, [r7, #14]
  } while ((res & 0x80) && --n);
 80021cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	da05      	bge.n	80021e0 <SD_cmd+0xb8>
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	73fb      	strb	r3, [r7, #15]
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1f1      	bne.n	80021c4 <SD_cmd+0x9c>
  return res;
 80021e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <sd_ini>:

uint8_t sd_ini(void)
{
 80021ec:	b590      	push	{r4, r7, lr}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
	  uint8_t i, cmd;;
	  uint8_t ocr[4];
	  int16_t tmr;
	  uint32_t temp;
	  //LD_OFF;
	  sdinfo.type = 0;
 80021f2:	4b57      	ldr	r3, [pc, #348]	; (8002350 <sd_ini+0x164>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]

	  hspi1.Init.BaudRatePrescaler = temp;
	  HAL_SPI_Init(&hspi1);
	  */

	  SS_SD_SELECT();
 80021f8:	f7ff ff76 	bl	80020e8 <sd_ss_active_pin_down>
	  if (SD_cmd(CMD0, 0) == 1) // Enter Idle state
 80021fc:	2100      	movs	r1, #0
 80021fe:	2040      	movs	r0, #64	; 0x40
 8002200:	f7ff ff92 	bl	8002128 <SD_cmd>
 8002204:	4603      	mov	r3, r0
 8002206:	2b01      	cmp	r3, #1
 8002208:	f040 809a 	bne.w	8002340 <sd_ini+0x154>
	  {
		  SPI_Release();
 800220c:	f000 f920 	bl	8002450 <SPI_Release>
		  if (SD_cmd(CMD8, 0x1AA) == 1) // SDv2
 8002210:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002214:	2048      	movs	r0, #72	; 0x48
 8002216:	f7ff ff87 	bl	8002128 <SD_cmd>
 800221a:	4603      	mov	r3, r0
 800221c:	2b01      	cmp	r3, #1
 800221e:	d157      	bne.n	80022d0 <sd_ini+0xe4>
		  {
			  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8002220:	2300      	movs	r3, #0
 8002222:	71fb      	strb	r3, [r7, #7]
 8002224:	e00c      	b.n	8002240 <sd_ini+0x54>
 8002226:	79fc      	ldrb	r4, [r7, #7]
 8002228:	f000 f905 	bl	8002436 <SPI_ReceiveByte>
 800222c:	4603      	mov	r3, r0
 800222e:	461a      	mov	r2, r3
 8002230:	f104 0308 	add.w	r3, r4, #8
 8002234:	443b      	add	r3, r7
 8002236:	f803 2c08 	strb.w	r2, [r3, #-8]
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	3301      	adds	r3, #1
 800223e:	71fb      	strb	r3, [r7, #7]
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	2b03      	cmp	r3, #3
 8002244:	d9ef      	bls.n	8002226 <sd_ini+0x3a>

			    // Get trailing return value of R7 resp
			    if (ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 8002246:	78bb      	ldrb	r3, [r7, #2]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d17b      	bne.n	8002344 <sd_ini+0x158>
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	2baa      	cmp	r3, #170	; 0xaa
 8002250:	d178      	bne.n	8002344 <sd_ini+0x158>
			    {
			    	for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--)
 8002252:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8002256:	80bb      	strh	r3, [r7, #4]
 8002258:	e005      	b.n	8002266 <sd_ini+0x7a>
 800225a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800225e:	b29b      	uxth	r3, r3
 8002260:	3b01      	subs	r3, #1
 8002262:	b29b      	uxth	r3, r3
 8002264:	80bb      	strh	r3, [r7, #4]
 8002266:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d007      	beq.n	800227e <sd_ini+0x92>
 800226e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002272:	20e9      	movs	r0, #233	; 0xe9
 8002274:	f7ff ff58 	bl	8002128 <SD_cmd>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1ed      	bne.n	800225a <sd_ini+0x6e>
			    	    ; // Wait for leaving idle state (ACMD41 with HCS bit)
			    	if (tmr && SD_cmd(CMD58, 0) == 0)
 800227e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d05e      	beq.n	8002344 <sd_ini+0x158>
 8002286:	2100      	movs	r1, #0
 8002288:	207a      	movs	r0, #122	; 0x7a
 800228a:	f7ff ff4d 	bl	8002128 <SD_cmd>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d157      	bne.n	8002344 <sd_ini+0x158>
			    	 { // Check CCS bit in the OCR
			    	  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8002294:	2300      	movs	r3, #0
 8002296:	71fb      	strb	r3, [r7, #7]
 8002298:	e00c      	b.n	80022b4 <sd_ini+0xc8>
 800229a:	79fc      	ldrb	r4, [r7, #7]
 800229c:	f000 f8cb 	bl	8002436 <SPI_ReceiveByte>
 80022a0:	4603      	mov	r3, r0
 80022a2:	461a      	mov	r2, r3
 80022a4:	f104 0308 	add.w	r3, r4, #8
 80022a8:	443b      	add	r3, r7
 80022aa:	f803 2c08 	strb.w	r2, [r3, #-8]
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	3301      	adds	r3, #1
 80022b2:	71fb      	strb	r3, [r7, #7]
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d9ef      	bls.n	800229a <sd_ini+0xae>
			     	   sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 80022ba:	783b      	ldrb	r3, [r7, #0]
 80022bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <sd_ini+0xdc>
 80022c4:	220c      	movs	r2, #12
 80022c6:	e000      	b.n	80022ca <sd_ini+0xde>
 80022c8:	2204      	movs	r2, #4
 80022ca:	4b21      	ldr	r3, [pc, #132]	; (8002350 <sd_ini+0x164>)
 80022cc:	701a      	strb	r2, [r3, #0]
 80022ce:	e039      	b.n	8002344 <sd_ini+0x158>
			    	}
			    }
		  }
		  else //SDv1 or MMCv3
		  {
			  if (SD_cmd(ACMD41, 0) <= 1)
 80022d0:	2100      	movs	r1, #0
 80022d2:	20e9      	movs	r0, #233	; 0xe9
 80022d4:	f7ff ff28 	bl	8002128 <SD_cmd>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d805      	bhi.n	80022ea <sd_ini+0xfe>
			    {
			      sdinfo.type = CT_SD1; cmd = ACMD41; // SDv1
 80022de:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <sd_ini+0x164>)
 80022e0:	2202      	movs	r2, #2
 80022e2:	701a      	strb	r2, [r3, #0]
 80022e4:	23e9      	movs	r3, #233	; 0xe9
 80022e6:	71bb      	strb	r3, [r7, #6]
 80022e8:	e004      	b.n	80022f4 <sd_ini+0x108>
			    }
			    else
			    {
			      sdinfo.type = CT_MMC; cmd = CMD1; // MMCv3
 80022ea:	4b19      	ldr	r3, [pc, #100]	; (8002350 <sd_ini+0x164>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]
 80022f0:	2341      	movs	r3, #65	; 0x41
 80022f2:	71bb      	strb	r3, [r7, #6]
			    }
			    for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; // Wait for leaving idle state
 80022f4:	f246 13a8 	movw	r3, #25000	; 0x61a8
 80022f8:	80bb      	strh	r3, [r7, #4]
 80022fa:	e005      	b.n	8002308 <sd_ini+0x11c>
 80022fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002300:	b29b      	uxth	r3, r3
 8002302:	3b01      	subs	r3, #1
 8002304:	b29b      	uxth	r3, r3
 8002306:	80bb      	strh	r3, [r7, #4]
 8002308:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d007      	beq.n	8002320 <sd_ini+0x134>
 8002310:	79bb      	ldrb	r3, [r7, #6]
 8002312:	2100      	movs	r1, #0
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff ff07 	bl	8002128 <SD_cmd>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1ed      	bne.n	80022fc <sd_ini+0x110>
			    if (!tmr || SD_cmd(CMD16, 512) != 0) // Set R/W block length to 512
 8002320:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d007      	beq.n	8002338 <sd_ini+0x14c>
 8002328:	f44f 7100 	mov.w	r1, #512	; 0x200
 800232c:	2050      	movs	r0, #80	; 0x50
 800232e:	f7ff fefb 	bl	8002128 <SD_cmd>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <sd_ini+0x158>
			    sdinfo.type = 0;
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <sd_ini+0x164>)
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]
 800233e:	e001      	b.n	8002344 <sd_ini+0x158>

	  }
	  else
	  {

	    return 1;
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <sd_ini+0x15a>
	  }




  return 0;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	bd90      	pop	{r4, r7, pc}
 800234e:	bf00      	nop
 8002350:	20001b30 	.word	0x20001b30

08002354 <Error>:

static void Error (void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  //LD_ON;
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <SPI_wait_ready>:

uint8_t SPI_wait_ready(void)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
  uint8_t res;
  uint16_t cnt;
  cnt=0;
 8002368:	2300      	movs	r3, #0
 800236a:	80fb      	strh	r3, [r7, #6]
  do {
    res=SPI_ReceiveByte();
 800236c:	f000 f863 	bl	8002436 <SPI_ReceiveByte>
 8002370:	4603      	mov	r3, r0
 8002372:	717b      	strb	r3, [r7, #5]
    cnt++;
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	3301      	adds	r3, #1
 8002378:	80fb      	strh	r3, [r7, #6]
  } while ( (res!=0xFF)&&(cnt<0xFFFF) );
 800237a:	797b      	ldrb	r3, [r7, #5]
 800237c:	2bff      	cmp	r3, #255	; 0xff
 800237e:	d004      	beq.n	800238a <SPI_wait_ready+0x28>
 8002380:	88fb      	ldrh	r3, [r7, #6]
 8002382:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002386:	4293      	cmp	r3, r2
 8002388:	d1f0      	bne.n	800236c <SPI_wait_ready+0xa>
  if (cnt>=0xFFFF) return 1;
 800238a:	88fb      	ldrh	r3, [r7, #6]
 800238c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002390:	4293      	cmp	r3, r2
 8002392:	d101      	bne.n	8002398 <SPI_wait_ready+0x36>
 8002394:	2301      	movs	r3, #1
 8002396:	e000      	b.n	800239a <SPI_wait_ready+0x38>
  return res;
 8002398:	797b      	ldrb	r3, [r7, #5]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <SPIx_Write_Multi>:
{
	if(HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_READY) return F_OK;
	else return F_ERR;
}
F_RES SPIx_Write_Multi(uint8_t* tx_buf,uint32_t size)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af02      	add	r7, sp, #8
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
	if(HAL_SPI_TransmitReceive(&hspi1, tx_buf, spi_rx_buffer, size,HAL_MAX_DELAY)==HAL_OK) return F_OK;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	f04f 32ff 	mov.w	r2, #4294967295
 80023b6:	9200      	str	r2, [sp, #0]
 80023b8:	4a07      	ldr	r2, [pc, #28]	; (80023d8 <SPIx_Write_Multi+0x34>)
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	4807      	ldr	r0, [pc, #28]	; (80023dc <SPIx_Write_Multi+0x38>)
 80023be:	f004 fb38 	bl	8006a32 <HAL_SPI_TransmitReceive>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <SPIx_Write_Multi+0x28>
 80023c8:	2300      	movs	r3, #0
 80023ca:	e000      	b.n	80023ce <SPIx_Write_Multi+0x2a>
		else return F_ERR;
 80023cc:	2301      	movs	r3, #1
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20001b58 	.word	0x20001b58
 80023dc:	2000084c 	.word	0x2000084c

080023e0 <SPIx_WriteRead>:
	if(HAL_SPI_Transmit_DMA(&hspi1, tx_buf, size)==HAL_OK) return F_OK;
	else return F_ERR;
}

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af02      	add	r7, sp, #8
 80023e6:	4603      	mov	r3, r0
 80023e8:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 80023ea:	2300      	movs	r3, #0
 80023ec:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 80023ee:	f107 020f 	add.w	r2, r7, #15
 80023f2:	1df9      	adds	r1, r7, #7
 80023f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	2301      	movs	r3, #1
 80023fc:	4806      	ldr	r0, [pc, #24]	; (8002418 <SPIx_WriteRead+0x38>)
 80023fe:	f004 fb18 	bl	8006a32 <HAL_SPI_TransmitReceive>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <SPIx_WriteRead+0x2c>
  {
    Error();
 8002408:	f7ff ffa4 	bl	8002354 <Error>
  }
  return receivedbyte;
 800240c:	7bfb      	ldrb	r3, [r7, #15]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	2000084c 	.word	0x2000084c

0800241c <SPI_SendByte>:

void SPI_SendByte(uint8_t bt)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	71fb      	strb	r3, [r7, #7]
  SPIx_WriteRead(bt);
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ffd9 	bl	80023e0 <SPIx_WriteRead>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <SPI_ReceiveByte>:

uint8_t SPI_ReceiveByte(void)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
  uint8_t bt = SPIx_WriteRead(0xFF);
 800243c:	20ff      	movs	r0, #255	; 0xff
 800243e:	f7ff ffcf 	bl	80023e0 <SPIx_WriteRead>
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
  return bt;
 8002446:	79fb      	ldrb	r3, [r7, #7]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <SPI_Release>:
void SPI_Release(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  SPIx_WriteRead(0xFF);
 8002454:	20ff      	movs	r0, #255	; 0xff
 8002456:	f7ff ffc3 	bl	80023e0 <SPIx_WriteRead>
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}

0800245e <SD_Read_Block>:

uint8_t SD_Read_Block (uint8_t *buff, uint32_t lba)
{
 800245e:	b590      	push	{r4, r7, lr}
 8002460:	b085      	sub	sp, #20
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	6039      	str	r1, [r7, #0]
  uint8_t result;
  uint16_t cnt;

  result=SD_cmd (CMD17, lba);
 8002468:	6839      	ldr	r1, [r7, #0]
 800246a:	2051      	movs	r0, #81	; 0x51
 800246c:	f7ff fe5c 	bl	8002128 <SD_cmd>
 8002470:	4603      	mov	r3, r0
 8002472:	737b      	strb	r3, [r7, #13]
  if (result!=0x00){
 8002474:	7b7b      	ldrb	r3, [r7, #13]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <SD_Read_Block+0x20>
	  return 5;
 800247a:	2305      	movs	r3, #5
 800247c:	e02f      	b.n	80024de <SD_Read_Block+0x80>
  }

  SPI_Release();
 800247e:	f7ff ffe7 	bl	8002450 <SPI_Release>
   cnt=0;
 8002482:	2300      	movs	r3, #0
 8002484:	81fb      	strh	r3, [r7, #14]
   do{
     result=SPI_ReceiveByte();
 8002486:	f7ff ffd6 	bl	8002436 <SPI_ReceiveByte>
 800248a:	4603      	mov	r3, r0
 800248c:	737b      	strb	r3, [r7, #13]
     cnt++;
 800248e:	89fb      	ldrh	r3, [r7, #14]
 8002490:	3301      	adds	r3, #1
 8002492:	81fb      	strh	r3, [r7, #14]
   } while ( (result!=0xFE)&&(cnt<0xFFFF) );
 8002494:	7b7b      	ldrb	r3, [r7, #13]
 8002496:	2bfe      	cmp	r3, #254	; 0xfe
 8002498:	d004      	beq.n	80024a4 <SD_Read_Block+0x46>
 800249a:	89fb      	ldrh	r3, [r7, #14]
 800249c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d1f0      	bne.n	8002486 <SD_Read_Block+0x28>
   if (cnt>=0xFFFF) {
 80024a4:	89fb      	ldrh	r3, [r7, #14]
 80024a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d101      	bne.n	80024b2 <SD_Read_Block+0x54>
	   return 5;
 80024ae:	2305      	movs	r3, #5
 80024b0:	e015      	b.n	80024de <SD_Read_Block+0x80>
   }
   for (cnt=0;cnt<512;cnt++) buff[cnt]=SPI_ReceiveByte();
 80024b2:	2300      	movs	r3, #0
 80024b4:	81fb      	strh	r3, [r7, #14]
 80024b6:	e009      	b.n	80024cc <SD_Read_Block+0x6e>
 80024b8:	89fb      	ldrh	r3, [r7, #14]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	18d4      	adds	r4, r2, r3
 80024be:	f7ff ffba 	bl	8002436 <SPI_ReceiveByte>
 80024c2:	4603      	mov	r3, r0
 80024c4:	7023      	strb	r3, [r4, #0]
 80024c6:	89fb      	ldrh	r3, [r7, #14]
 80024c8:	3301      	adds	r3, #1
 80024ca:	81fb      	strh	r3, [r7, #14]
 80024cc:	89fb      	ldrh	r3, [r7, #14]
 80024ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024d2:	d3f1      	bcc.n	80024b8 <SD_Read_Block+0x5a>
   SPI_Release();
 80024d4:	f7ff ffbc 	bl	8002450 <SPI_Release>
   SPI_Release();
 80024d8:	f7ff ffba 	bl	8002450 <SPI_Release>



  return 0;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd90      	pop	{r4, r7, pc}
	...

080024e8 <SD_Write_Blocks>:

uint8_t SD_Write_Blocks (uint8_t *buff, uint32_t lba,uint16_t count)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b088      	sub	sp, #32
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	4613      	mov	r3, r2
 80024f4:	80fb      	strh	r3, [r7, #6]
  tick1=xTaskGetTickCount();
 80024f6:	f010 fa8d 	bl	8012a14 <xTaskGetTickCount>
 80024fa:	4603      	mov	r3, r0
 80024fc:	4a39      	ldr	r2, [pc, #228]	; (80025e4 <SD_Write_Blocks+0xfc>)
 80024fe:	6013      	str	r3, [r2, #0]
  uint8_t result;
  uint16_t cnt;


  result=SD_cmd(CMD25,lba);//CMD25
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	2059      	movs	r0, #89	; 0x59
 8002504:	f7ff fe10 	bl	8002128 <SD_cmd>
 8002508:	4603      	mov	r3, r0
 800250a:	75fb      	strb	r3, [r7, #23]
  if (result!=0x00){
 800250c:	7dfb      	ldrb	r3, [r7, #23]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <SD_Write_Blocks+0x2e>
	  return 6;
 8002512:	2306      	movs	r3, #6
 8002514:	e061      	b.n	80025da <SD_Write_Blocks+0xf2>
  }
  SPI_Release();  //1byte gap
 8002516:	f7ff ff9b 	bl	8002450 <SPI_Release>

  for(int i=0;i<count;i++){
 800251a:	2300      	movs	r3, #0
 800251c:	61bb      	str	r3, [r7, #24]
 800251e:	e035      	b.n	800258c <SD_Write_Blocks+0xa4>
   SPI_SendByte (0xFC);//token CMD25
 8002520:	20fc      	movs	r0, #252	; 0xfc
 8002522:	f7ff ff7b 	bl	800241c <SPI_SendByte>

   SPIx_Write_Multi(buff,512);
 8002526:	f44f 7100 	mov.w	r1, #512	; 0x200
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f7ff ff3a 	bl	80023a4 <SPIx_Write_Multi>
   buff+=512;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002536:	60fb      	str	r3, [r7, #12]
   SPI_Release();   //CRC
 8002538:	f7ff ff8a 	bl	8002450 <SPI_Release>
   SPI_Release();   //CRC
 800253c:	f7ff ff88 	bl	8002450 <SPI_Release>


   result=SPI_ReceiveByte();
 8002540:	f7ff ff79 	bl	8002436 <SPI_ReceiveByte>
 8002544:	4603      	mov	r3, r0
 8002546:	75fb      	strb	r3, [r7, #23]
   if ((result&0x1F)!=0x05) {
 8002548:	7dfb      	ldrb	r3, [r7, #23]
 800254a:	f003 031f 	and.w	r3, r3, #31
 800254e:	2b05      	cmp	r3, #5
 8002550:	d001      	beq.n	8002556 <SD_Write_Blocks+0x6e>
	  return 6;
 8002552:	2306      	movs	r3, #6
 8002554:	e041      	b.n	80025da <SD_Write_Blocks+0xf2>
   }
   cnt=0;
 8002556:	2300      	movs	r3, #0
 8002558:	83fb      	strh	r3, [r7, #30]
   do {
    result=SPI_ReceiveByte();
 800255a:	f7ff ff6c 	bl	8002436 <SPI_ReceiveByte>
 800255e:	4603      	mov	r3, r0
 8002560:	75fb      	strb	r3, [r7, #23]
    cnt++;
 8002562:	8bfb      	ldrh	r3, [r7, #30]
 8002564:	3301      	adds	r3, #1
 8002566:	83fb      	strh	r3, [r7, #30]
   } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 8002568:	7dfb      	ldrb	r3, [r7, #23]
 800256a:	2bff      	cmp	r3, #255	; 0xff
 800256c:	d004      	beq.n	8002578 <SD_Write_Blocks+0x90>
 800256e:	8bfb      	ldrh	r3, [r7, #30]
 8002570:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002574:	4293      	cmp	r3, r2
 8002576:	d1f0      	bne.n	800255a <SD_Write_Blocks+0x72>
   if (cnt>=0xFFFF) {
 8002578:	8bfb      	ldrh	r3, [r7, #30]
 800257a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800257e:	4293      	cmp	r3, r2
 8002580:	d101      	bne.n	8002586 <SD_Write_Blocks+0x9e>
	  return 6;
 8002582:	2306      	movs	r3, #6
 8002584:	e029      	b.n	80025da <SD_Write_Blocks+0xf2>
  for(int i=0;i<count;i++){
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	3301      	adds	r3, #1
 800258a:	61bb      	str	r3, [r7, #24]
 800258c:	88fb      	ldrh	r3, [r7, #6]
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	429a      	cmp	r2, r3
 8002592:	dbc5      	blt.n	8002520 <SD_Write_Blocks+0x38>
   }
  }

  SPI_SendByte (0xFD); //stop transaction token for CMD25
 8002594:	20fd      	movs	r0, #253	; 0xfd
 8002596:	f7ff ff41 	bl	800241c <SPI_SendByte>
  SPI_Release();       //1byte gap
 800259a:	f7ff ff59 	bl	8002450 <SPI_Release>
  cnt=0;
 800259e:	2300      	movs	r3, #0
 80025a0:	83fb      	strh	r3, [r7, #30]
  do {
	result=SPI_ReceiveByte();
 80025a2:	f7ff ff48 	bl	8002436 <SPI_ReceiveByte>
 80025a6:	4603      	mov	r3, r0
 80025a8:	75fb      	strb	r3, [r7, #23]
	cnt++;
 80025aa:	8bfb      	ldrh	r3, [r7, #30]
 80025ac:	3301      	adds	r3, #1
 80025ae:	83fb      	strh	r3, [r7, #30]
  } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 80025b0:	7dfb      	ldrb	r3, [r7, #23]
 80025b2:	2bff      	cmp	r3, #255	; 0xff
 80025b4:	d004      	beq.n	80025c0 <SD_Write_Blocks+0xd8>
 80025b6:	8bfb      	ldrh	r3, [r7, #30]
 80025b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025bc:	4293      	cmp	r3, r2
 80025be:	d1f0      	bne.n	80025a2 <SD_Write_Blocks+0xba>
  if (cnt>=0xFFFF) return 6;
 80025c0:	8bfb      	ldrh	r3, [r7, #30]
 80025c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d101      	bne.n	80025ce <SD_Write_Blocks+0xe6>
 80025ca:	2306      	movs	r3, #6
 80025cc:	e005      	b.n	80025da <SD_Write_Blocks+0xf2>
  tick2=xTaskGetTickCount();
 80025ce:	f010 fa21 	bl	8012a14 <xTaskGetTickCount>
 80025d2:	4603      	mov	r3, r0
 80025d4:	4a04      	ldr	r2, [pc, #16]	; (80025e8 <SD_Write_Blocks+0x100>)
 80025d6:	6013      	str	r3, [r2, #0]
  return 0;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3720      	adds	r7, #32
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20001b04 	.word	0x20001b04
 80025e8:	20001b08 	.word	0x20001b08

080025ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	607b      	str	r3, [r7, #4]
 80025f6:	4b12      	ldr	r3, [pc, #72]	; (8002640 <HAL_MspInit+0x54>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	4a11      	ldr	r2, [pc, #68]	; (8002640 <HAL_MspInit+0x54>)
 80025fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002600:	6453      	str	r3, [r2, #68]	; 0x44
 8002602:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <HAL_MspInit+0x54>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800260a:	607b      	str	r3, [r7, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	603b      	str	r3, [r7, #0]
 8002612:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_MspInit+0x54>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <HAL_MspInit+0x54>)
 8002618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800261c:	6413      	str	r3, [r2, #64]	; 0x40
 800261e:	4b08      	ldr	r3, [pc, #32]	; (8002640 <HAL_MspInit+0x54>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800262a:	2200      	movs	r2, #0
 800262c:	210f      	movs	r1, #15
 800262e:	f06f 0001 	mvn.w	r0, #1
 8002632:	f000 fccd 	bl	8002fd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800

08002644 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800264c:	f107 0308 	add.w	r3, r7, #8
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a0c      	ldr	r2, [pc, #48]	; (8002690 <HAL_RTC_MspInit+0x4c>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d111      	bne.n	8002688 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002664:	2302      	movs	r3, #2
 8002666:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002668:	f44f 7380 	mov.w	r3, #256	; 0x100
 800266c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800266e:	f107 0308 	add.w	r3, r7, #8
 8002672:	4618      	mov	r0, r3
 8002674:	f003 fd74 	bl	8006160 <HAL_RCCEx_PeriphCLKConfig>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800267e:	f7ff fbe7 	bl	8001e50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002682:	4b04      	ldr	r3, [pc, #16]	; (8002694 <HAL_RTC_MspInit+0x50>)
 8002684:	2201      	movs	r2, #1
 8002686:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002688:	bf00      	nop
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40002800 	.word	0x40002800
 8002694:	42470e3c 	.word	0x42470e3c

08002698 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08a      	sub	sp, #40	; 0x28
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a0:	f107 0314 	add.w	r3, r7, #20
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a34      	ldr	r2, [pc, #208]	; (8002788 <HAL_SPI_MspInit+0xf0>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d162      	bne.n	8002780 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	4b33      	ldr	r3, [pc, #204]	; (800278c <HAL_SPI_MspInit+0xf4>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	4a32      	ldr	r2, [pc, #200]	; (800278c <HAL_SPI_MspInit+0xf4>)
 80026c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026c8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ca:	4b30      	ldr	r3, [pc, #192]	; (800278c <HAL_SPI_MspInit+0xf4>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	4b2c      	ldr	r3, [pc, #176]	; (800278c <HAL_SPI_MspInit+0xf4>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	4a2b      	ldr	r2, [pc, #172]	; (800278c <HAL_SPI_MspInit+0xf4>)
 80026e0:	f043 0302 	orr.w	r3, r3, #2
 80026e4:	6313      	str	r3, [r2, #48]	; 0x30
 80026e6:	4b29      	ldr	r3, [pc, #164]	; (800278c <HAL_SPI_MspInit+0xf4>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80026f2:	2338      	movs	r3, #56	; 0x38
 80026f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f6:	2302      	movs	r3, #2
 80026f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026fa:	2301      	movs	r3, #1
 80026fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026fe:	2303      	movs	r3, #3
 8002700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002702:	2305      	movs	r3, #5
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002706:	f107 0314 	add.w	r3, r7, #20
 800270a:	4619      	mov	r1, r3
 800270c:	4820      	ldr	r0, [pc, #128]	; (8002790 <HAL_SPI_MspInit+0xf8>)
 800270e:	f001 fadd 	bl	8003ccc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002712:	4b20      	ldr	r3, [pc, #128]	; (8002794 <HAL_SPI_MspInit+0xfc>)
 8002714:	4a20      	ldr	r2, [pc, #128]	; (8002798 <HAL_SPI_MspInit+0x100>)
 8002716:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002718:	4b1e      	ldr	r3, [pc, #120]	; (8002794 <HAL_SPI_MspInit+0xfc>)
 800271a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800271e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002720:	4b1c      	ldr	r3, [pc, #112]	; (8002794 <HAL_SPI_MspInit+0xfc>)
 8002722:	2240      	movs	r2, #64	; 0x40
 8002724:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002726:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <HAL_SPI_MspInit+0xfc>)
 8002728:	2200      	movs	r2, #0
 800272a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800272c:	4b19      	ldr	r3, [pc, #100]	; (8002794 <HAL_SPI_MspInit+0xfc>)
 800272e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002732:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002734:	4b17      	ldr	r3, [pc, #92]	; (8002794 <HAL_SPI_MspInit+0xfc>)
 8002736:	2200      	movs	r2, #0
 8002738:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800273a:	4b16      	ldr	r3, [pc, #88]	; (8002794 <HAL_SPI_MspInit+0xfc>)
 800273c:	2200      	movs	r2, #0
 800273e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002740:	4b14      	ldr	r3, [pc, #80]	; (8002794 <HAL_SPI_MspInit+0xfc>)
 8002742:	2200      	movs	r2, #0
 8002744:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002746:	4b13      	ldr	r3, [pc, #76]	; (8002794 <HAL_SPI_MspInit+0xfc>)
 8002748:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800274c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800274e:	4b11      	ldr	r3, [pc, #68]	; (8002794 <HAL_SPI_MspInit+0xfc>)
 8002750:	2200      	movs	r2, #0
 8002752:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002754:	480f      	ldr	r0, [pc, #60]	; (8002794 <HAL_SPI_MspInit+0xfc>)
 8002756:	f000 fc65 	bl	8003024 <HAL_DMA_Init>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8002760:	f7ff fb76 	bl	8001e50 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a0b      	ldr	r2, [pc, #44]	; (8002794 <HAL_SPI_MspInit+0xfc>)
 8002768:	649a      	str	r2, [r3, #72]	; 0x48
 800276a:	4a0a      	ldr	r2, [pc, #40]	; (8002794 <HAL_SPI_MspInit+0xfc>)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002770:	2200      	movs	r2, #0
 8002772:	2105      	movs	r1, #5
 8002774:	2023      	movs	r0, #35	; 0x23
 8002776:	f000 fc2b 	bl	8002fd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800277a:	2023      	movs	r0, #35	; 0x23
 800277c:	f000 fc44 	bl	8003008 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002780:	bf00      	nop
 8002782:	3728      	adds	r7, #40	; 0x28
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40013000 	.word	0x40013000
 800278c:	40023800 	.word	0x40023800
 8002790:	40020400 	.word	0x40020400
 8002794:	200008a4 	.word	0x200008a4
 8002798:	40026458 	.word	0x40026458

0800279c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ac:	d115      	bne.n	80027da <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <HAL_TIM_Base_MspInit+0x48>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	4a0b      	ldr	r2, [pc, #44]	; (80027e4 <HAL_TIM_Base_MspInit+0x48>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	6413      	str	r3, [r2, #64]	; 0x40
 80027be:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_TIM_Base_MspInit+0x48>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80027ca:	2200      	movs	r2, #0
 80027cc:	2105      	movs	r1, #5
 80027ce:	201c      	movs	r0, #28
 80027d0:	f000 fbfe 	bl	8002fd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027d4:	201c      	movs	r0, #28
 80027d6:	f000 fc17 	bl	8003008 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80027da:	bf00      	nop
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40023800 	.word	0x40023800

080027e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08a      	sub	sp, #40	; 0x28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f0:	f107 0314 	add.w	r3, r7, #20
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
 80027fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a1d      	ldr	r2, [pc, #116]	; (800287c <HAL_UART_MspInit+0x94>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d134      	bne.n	8002874 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	4b1c      	ldr	r3, [pc, #112]	; (8002880 <HAL_UART_MspInit+0x98>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	4a1b      	ldr	r2, [pc, #108]	; (8002880 <HAL_UART_MspInit+0x98>)
 8002814:	f043 0310 	orr.w	r3, r3, #16
 8002818:	6453      	str	r3, [r2, #68]	; 0x44
 800281a:	4b19      	ldr	r3, [pc, #100]	; (8002880 <HAL_UART_MspInit+0x98>)
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	f003 0310 	and.w	r3, r3, #16
 8002822:	613b      	str	r3, [r7, #16]
 8002824:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	4b15      	ldr	r3, [pc, #84]	; (8002880 <HAL_UART_MspInit+0x98>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	4a14      	ldr	r2, [pc, #80]	; (8002880 <HAL_UART_MspInit+0x98>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	6313      	str	r3, [r2, #48]	; 0x30
 8002836:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HAL_UART_MspInit+0x98>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002842:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002848:	2302      	movs	r3, #2
 800284a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284c:	2300      	movs	r3, #0
 800284e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002850:	2303      	movs	r3, #3
 8002852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002854:	2307      	movs	r3, #7
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002858:	f107 0314 	add.w	r3, r7, #20
 800285c:	4619      	mov	r1, r3
 800285e:	4809      	ldr	r0, [pc, #36]	; (8002884 <HAL_UART_MspInit+0x9c>)
 8002860:	f001 fa34 	bl	8003ccc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002864:	2200      	movs	r2, #0
 8002866:	2105      	movs	r1, #5
 8002868:	2025      	movs	r0, #37	; 0x25
 800286a:	f000 fbb1 	bl	8002fd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800286e:	2025      	movs	r0, #37	; 0x25
 8002870:	f000 fbca 	bl	8003008 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002874:	bf00      	nop
 8002876:	3728      	adds	r7, #40	; 0x28
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40011000 	.word	0x40011000
 8002880:	40023800 	.word	0x40023800
 8002884:	40020000 	.word	0x40020000

08002888 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08c      	sub	sp, #48	; 0x30
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002898:	2200      	movs	r2, #0
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	2019      	movs	r0, #25
 800289e:	f000 fb97 	bl	8002fd0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80028a2:	2019      	movs	r0, #25
 80028a4:	f000 fbb0 	bl	8003008 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	4b1f      	ldr	r3, [pc, #124]	; (800292c <HAL_InitTick+0xa4>)
 80028ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b0:	4a1e      	ldr	r2, [pc, #120]	; (800292c <HAL_InitTick+0xa4>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6453      	str	r3, [r2, #68]	; 0x44
 80028b8:	4b1c      	ldr	r3, [pc, #112]	; (800292c <HAL_InitTick+0xa4>)
 80028ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028c4:	f107 0210 	add.w	r2, r7, #16
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	4611      	mov	r1, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f003 fc14 	bl	80060fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80028d4:	f003 fbfe 	bl	80060d4 <HAL_RCC_GetPCLK2Freq>
 80028d8:	4603      	mov	r3, r0
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80028de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e0:	4a13      	ldr	r2, [pc, #76]	; (8002930 <HAL_InitTick+0xa8>)
 80028e2:	fba2 2303 	umull	r2, r3, r2, r3
 80028e6:	0c9b      	lsrs	r3, r3, #18
 80028e8:	3b01      	subs	r3, #1
 80028ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80028ec:	4b11      	ldr	r3, [pc, #68]	; (8002934 <HAL_InitTick+0xac>)
 80028ee:	4a12      	ldr	r2, [pc, #72]	; (8002938 <HAL_InitTick+0xb0>)
 80028f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80028f2:	4b10      	ldr	r3, [pc, #64]	; (8002934 <HAL_InitTick+0xac>)
 80028f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028f8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80028fa:	4a0e      	ldr	r2, [pc, #56]	; (8002934 <HAL_InitTick+0xac>)
 80028fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002900:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <HAL_InitTick+0xac>)
 8002902:	2200      	movs	r2, #0
 8002904:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002906:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <HAL_InitTick+0xac>)
 8002908:	2200      	movs	r2, #0
 800290a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800290c:	4809      	ldr	r0, [pc, #36]	; (8002934 <HAL_InitTick+0xac>)
 800290e:	f004 fc1b 	bl	8007148 <HAL_TIM_Base_Init>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d104      	bne.n	8002922 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002918:	4806      	ldr	r0, [pc, #24]	; (8002934 <HAL_InitTick+0xac>)
 800291a:	f004 fc65 	bl	80071e8 <HAL_TIM_Base_Start_IT>
 800291e:	4603      	mov	r3, r0
 8002920:	e000      	b.n	8002924 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
}
 8002924:	4618      	mov	r0, r3
 8002926:	3730      	adds	r7, #48	; 0x30
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40023800 	.word	0x40023800
 8002930:	431bde83 	.word	0x431bde83
 8002934:	20001d58 	.word	0x20001d58
 8002938:	40010000 	.word	0x40010000

0800293c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002940:	e7fe      	b.n	8002940 <NMI_Handler+0x4>

08002942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002942:	b480      	push	{r7}
 8002944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002946:	e7fe      	b.n	8002946 <HardFault_Handler+0x4>

08002948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800294c:	e7fe      	b.n	800294c <MemManage_Handler+0x4>

0800294e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800294e:	b480      	push	{r7}
 8002950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002952:	e7fe      	b.n	8002952 <BusFault_Handler+0x4>

08002954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002958:	e7fe      	b.n	8002958 <UsageFault_Handler+0x4>

0800295a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800295a:	b480      	push	{r7}
 800295c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800296c:	4802      	ldr	r0, [pc, #8]	; (8002978 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800296e:	f004 fcab 	bl	80072c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20001d58 	.word	0x20001d58

0800297c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002980:	4802      	ldr	r0, [pc, #8]	; (800298c <TIM2_IRQHandler+0x10>)
 8002982:	f004 fca1 	bl	80072c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20000904 	.word	0x20000904

08002990 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002994:	4802      	ldr	r0, [pc, #8]	; (80029a0 <SPI1_IRQHandler+0x10>)
 8002996:	f004 f9ef 	bl	8006d78 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	2000084c 	.word	0x2000084c

080029a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029a8:	4802      	ldr	r0, [pc, #8]	; (80029b4 <USART1_IRQHandler+0x10>)
 80029aa:	f005 f9a3 	bl	8007cf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	2000094c 	.word	0x2000094c

080029b8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80029bc:	4802      	ldr	r0, [pc, #8]	; (80029c8 <DMA2_Stream3_IRQHandler+0x10>)
 80029be:	f000 fc71 	bl	80032a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	200008a4 	.word	0x200008a4

080029cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80029d0:	4802      	ldr	r0, [pc, #8]	; (80029dc <OTG_FS_IRQHandler+0x10>)
 80029d2:	f001 fd9b 	bl	800450c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	2000bc48 	.word	0x2000bc48

080029e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
	return 1;
 80029e4:	2301      	movs	r3, #1
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <_kill>:

int _kill(int pid, int sig)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80029fa:	f011 fbc9 	bl	8014190 <__errno>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2216      	movs	r2, #22
 8002a02:	601a      	str	r2, [r3, #0]
	return -1;
 8002a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <_exit>:

void _exit (int status)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a18:	f04f 31ff 	mov.w	r1, #4294967295
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff ffe7 	bl	80029f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a22:	e7fe      	b.n	8002a22 <_exit+0x12>

08002a24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	e00a      	b.n	8002a4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a36:	f3af 8000 	nop.w
 8002a3a:	4601      	mov	r1, r0
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	60ba      	str	r2, [r7, #8]
 8002a42:	b2ca      	uxtb	r2, r1
 8002a44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	dbf0      	blt.n	8002a36 <_read+0x12>
	}

return len;
 8002a54:	687b      	ldr	r3, [r7, #4]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b086      	sub	sp, #24
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]
 8002a6e:	e009      	b.n	8002a84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	60ba      	str	r2, [r7, #8]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	3301      	adds	r3, #1
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	dbf1      	blt.n	8002a70 <_write+0x12>
	}
	return len;
 8002a8c:	687b      	ldr	r3, [r7, #4]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <_close>:

int _close(int file)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
	return -1;
 8002a9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002abe:	605a      	str	r2, [r3, #4]
	return 0;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <_isatty>:

int _isatty(int file)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
	return 1;
 8002ad6:	2301      	movs	r3, #1
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
	return 0;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b08:	4a14      	ldr	r2, [pc, #80]	; (8002b5c <_sbrk+0x5c>)
 8002b0a:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <_sbrk+0x60>)
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b14:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <_sbrk+0x64>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d102      	bne.n	8002b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b1c:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <_sbrk+0x64>)
 8002b1e:	4a12      	ldr	r2, [pc, #72]	; (8002b68 <_sbrk+0x68>)
 8002b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b22:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <_sbrk+0x64>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4413      	add	r3, r2
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d207      	bcs.n	8002b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b30:	f011 fb2e 	bl	8014190 <__errno>
 8002b34:	4603      	mov	r3, r0
 8002b36:	220c      	movs	r2, #12
 8002b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3e:	e009      	b.n	8002b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b40:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <_sbrk+0x64>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b46:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <_sbrk+0x64>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	4a05      	ldr	r2, [pc, #20]	; (8002b64 <_sbrk+0x64>)
 8002b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b52:	68fb      	ldr	r3, [r7, #12]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	20020000 	.word	0x20020000
 8002b60:	00000400 	.word	0x00000400
 8002b64:	20001da4 	.word	0x20001da4
 8002b68:	2000bf88 	.word	0x2000bf88

08002b6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b70:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <SystemInit+0x20>)
 8002b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b76:	4a05      	ldr	r2, [pc, #20]	; (8002b8c <SystemInit+0x20>)
 8002b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <wav_file_open>:


extern UART_HandleTypeDef huart1;

F_RES wav_file_open(wav_file_typedef* self_object,char* filename,uint32_t sample_size,uint32_t sample_rate,uint8_t num_channels)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
 8002b9c:	603b      	str	r3, [r7, #0]
  memcpy(self_object->header.chunk.prefix,"RIFF",4);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2204      	movs	r2, #4
 8002ba2:	4939      	ldr	r1, [pc, #228]	; (8002c88 <wav_file_open+0xf8>)
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f011 fc29 	bl	80143fc <memcpy>
  memcpy(self_object->header.chunk.postfix,"WAVE",4);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	3308      	adds	r3, #8
 8002bae:	2204      	movs	r2, #4
 8002bb0:	4936      	ldr	r1, [pc, #216]	; (8002c8c <wav_file_open+0xfc>)
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f011 fc22 	bl	80143fc <memcpy>
  memcpy(self_object->header.subchunk_fmt.prefix,"fmt ",4);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	330c      	adds	r3, #12
 8002bbc:	2204      	movs	r2, #4
 8002bbe:	4934      	ldr	r1, [pc, #208]	; (8002c90 <wav_file_open+0x100>)
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f011 fc1b 	bl	80143fc <memcpy>
  self_object->header.subchunk_fmt.size=16;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f042 0210 	orr.w	r2, r2, #16
 8002bce:	741a      	strb	r2, [r3, #16]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	745a      	strb	r2, [r3, #17]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	749a      	strb	r2, [r3, #18]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	74da      	strb	r2, [r3, #19]
  self_object->header.subchunk_fmt.format=1;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f042 0201 	orr.w	r2, r2, #1
 8002be4:	751a      	strb	r2, [r3, #20]
 8002be6:	2200      	movs	r2, #0
 8002be8:	755a      	strb	r2, [r3, #21]
  self_object->header.subchunk_fmt.numchannels=num_channels;
 8002bea:	7e3b      	ldrb	r3, [r7, #24]
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	82da      	strh	r2, [r3, #22]
  self_object->header.subchunk_fmt.samplerate=sample_rate;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	619a      	str	r2, [r3, #24]
  self_object->header.subchunk_fmt.bps=sample_size;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	845a      	strh	r2, [r3, #34]	; 0x22
  self_object->header.subchunk_fmt.byterate=sample_rate*num_channels*(sample_size/8);
 8002c00:	7e3b      	ldrb	r3, [r7, #24]
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	fb02 f303 	mul.w	r3, r2, r3
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	08d2      	lsrs	r2, r2, #3
 8002c0c:	fb03 f202 	mul.w	r2, r3, r2
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	61da      	str	r2, [r3, #28]
  self_object->header.subchunk_fmt.block_align=num_channels*(sample_size/8);
 8002c14:	7e3b      	ldrb	r3, [r7, #24]
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	08db      	lsrs	r3, r3, #3
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	fb12 f303 	smulbb	r3, r2, r3
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	841a      	strh	r2, [r3, #32]
  memcpy(self_object->header.subchunk_data.prefix,"data",4);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	3324      	adds	r3, #36	; 0x24
 8002c2c:	2204      	movs	r2, #4
 8002c2e:	4919      	ldr	r1, [pc, #100]	; (8002c94 <wav_file_open+0x104>)
 8002c30:	4618      	mov	r0, r3
 8002c32:	f011 fbe3 	bl	80143fc <memcpy>
  self_object->data_counter=0;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  if(f_open(&self_object->media.file,filename,FA_CREATE_ALWAYS|FA_WRITE)==FR_OK){
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	3330      	adds	r3, #48	; 0x30
 8002c54:	220a      	movs	r2, #10
 8002c56:	68b9      	ldr	r1, [r7, #8]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f00d f8d5 	bl	800fe08 <f_open>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10b      	bne.n	8002c7c <wav_file_open+0xec>
   f_lseek(&self_object->media.file, sizeof(self_object->header));
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002c6a:	f04f 022c 	mov.w	r2, #44	; 0x2c
 8002c6e:	f04f 0300 	mov.w	r3, #0
 8002c72:	4608      	mov	r0, r1
 8002c74:	f00d fe85 	bl	8010982 <f_lseek>
   return F_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e000      	b.n	8002c7e <wav_file_open+0xee>
  }
  return F_ERR;
 8002c7c:	2301      	movs	r3, #1
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	08016e98 	.word	0x08016e98
 8002c8c:	08016ea0 	.word	0x08016ea0
 8002c90:	08016ea8 	.word	0x08016ea8
 8002c94:	08016eb0 	.word	0x08016eb0

08002c98 <wav_file_close>:

F_RES wav_file_close(wav_file_typedef* self_object)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
	self_object->header.subchunk_data.size=self_object->data_counter;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	629a      	str	r2, [r3, #40]	; 0x28
	self_object->header.chunk.size=36+self_object->data_counter;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	605a      	str	r2, [r3, #4]
 	f_lseek(&self_object->media.file, 0);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	4608      	mov	r0, r1
 8002cc4:	f00d fe5d 	bl	8010982 <f_lseek>
 	if(f_write(&self_object->media.file,(uint8_t*)&self_object->header,sizeof(self_object->header),(void*)&self_object->media.byteswritten)==FR_OK){
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8002cd6:	222c      	movs	r2, #44	; 0x2c
 8002cd8:	f00d fb57 	bl	801038a <f_write>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d106      	bne.n	8002cf0 <wav_file_close+0x58>
 	  f_close(&self_object->media.file);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3330      	adds	r3, #48	; 0x30
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f00d fe21 	bl	801092e <f_close>
 	  return F_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	e000      	b.n	8002cf2 <wav_file_close+0x5a>
 	}
 	return F_ERR;
 8002cf0:	2301      	movs	r3, #1
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <wav_file_write>:

F_RES wav_file_write(wav_file_typedef* self_object,uint8_t* data,uint32_t length)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b086      	sub	sp, #24
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	60f8      	str	r0, [r7, #12]
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	607a      	str	r2, [r7, #4]
	FRESULT res;
	self_object->data_counter+=length;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	441a      	add	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	62da      	str	r2, [r3, #44]	; 0x2c
	res=f_write(&self_object->media.file,data,length,(void*)&self_object->media.byteswritten);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	68b9      	ldr	r1, [r7, #8]
 8002d22:	f00d fb32 	bl	801038a <f_write>
 8002d26:	4603      	mov	r3, r0
 8002d28:	75fb      	strb	r3, [r7, #23]
	if(res==FR_OK) return F_OK;
 8002d2a:	7dfb      	ldrb	r3, [r7, #23]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <wav_file_write+0x3a>
 8002d30:	2300      	movs	r3, #0
 8002d32:	e000      	b.n	8002d36 <wav_file_write+0x3c>
	return F_ERR;
 8002d34:	2301      	movs	r3, #1
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d44:	480d      	ldr	r0, [pc, #52]	; (8002d7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d46:	490e      	ldr	r1, [pc, #56]	; (8002d80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d48:	4a0e      	ldr	r2, [pc, #56]	; (8002d84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d4c:	e002      	b.n	8002d54 <LoopCopyDataInit>

08002d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d52:	3304      	adds	r3, #4

08002d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d58:	d3f9      	bcc.n	8002d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d5a:	4a0b      	ldr	r2, [pc, #44]	; (8002d88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d5c:	4c0b      	ldr	r4, [pc, #44]	; (8002d8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d60:	e001      	b.n	8002d66 <LoopFillZerobss>

08002d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d64:	3204      	adds	r2, #4

08002d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d68:	d3fb      	bcc.n	8002d62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d6a:	f7ff feff 	bl	8002b6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d6e:	f011 fb0b 	bl	8014388 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d72:	f7fe fa13 	bl	800119c <main>
  bx  lr    
 8002d76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d80:	20000378 	.word	0x20000378
  ldr r2, =_sidata
 8002d84:	0801773c 	.word	0x0801773c
  ldr r2, =_sbss
 8002d88:	20000378 	.word	0x20000378
  ldr r4, =_ebss
 8002d8c:	2000bf84 	.word	0x2000bf84

08002d90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d90:	e7fe      	b.n	8002d90 <ADC_IRQHandler>
	...

08002d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d98:	4b0e      	ldr	r3, [pc, #56]	; (8002dd4 <HAL_Init+0x40>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a0d      	ldr	r2, [pc, #52]	; (8002dd4 <HAL_Init+0x40>)
 8002d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002da2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002da4:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_Init+0x40>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a0a      	ldr	r2, [pc, #40]	; (8002dd4 <HAL_Init+0x40>)
 8002daa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002db0:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <HAL_Init+0x40>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a07      	ldr	r2, [pc, #28]	; (8002dd4 <HAL_Init+0x40>)
 8002db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dbc:	2003      	movs	r0, #3
 8002dbe:	f000 f8fc 	bl	8002fba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dc2:	200f      	movs	r0, #15
 8002dc4:	f7ff fd60 	bl	8002888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dc8:	f7ff fc10 	bl	80025ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40023c00 	.word	0x40023c00

08002dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ddc:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <HAL_IncTick+0x20>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	461a      	mov	r2, r3
 8002de2:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <HAL_IncTick+0x24>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4413      	add	r3, r2
 8002de8:	4a04      	ldr	r2, [pc, #16]	; (8002dfc <HAL_IncTick+0x24>)
 8002dea:	6013      	str	r3, [r2, #0]
}
 8002dec:	bf00      	nop
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	2000023c 	.word	0x2000023c
 8002dfc:	20001da8 	.word	0x20001da8

08002e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  return uwTick;
 8002e04:	4b03      	ldr	r3, [pc, #12]	; (8002e14 <HAL_GetTick+0x14>)
 8002e06:	681b      	ldr	r3, [r3, #0]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	20001da8 	.word	0x20001da8

08002e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e20:	f7ff ffee 	bl	8002e00 <HAL_GetTick>
 8002e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e30:	d005      	beq.n	8002e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e32:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <HAL_Delay+0x44>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e3e:	bf00      	nop
 8002e40:	f7ff ffde 	bl	8002e00 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d8f7      	bhi.n	8002e40 <HAL_Delay+0x28>
  {
  }
}
 8002e50:	bf00      	nop
 8002e52:	bf00      	nop
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	2000023c 	.word	0x2000023c

08002e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e70:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e92:	4a04      	ldr	r2, [pc, #16]	; (8002ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	60d3      	str	r3, [r2, #12]
}
 8002e98:	bf00      	nop
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	e000ed00 	.word	0xe000ed00

08002ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eac:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	0a1b      	lsrs	r3, r3, #8
 8002eb2:	f003 0307 	and.w	r3, r3, #7
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	e000ed00 	.word	0xe000ed00

08002ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	db0b      	blt.n	8002eee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ed6:	79fb      	ldrb	r3, [r7, #7]
 8002ed8:	f003 021f 	and.w	r2, r3, #31
 8002edc:	4907      	ldr	r1, [pc, #28]	; (8002efc <__NVIC_EnableIRQ+0x38>)
 8002ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	e000e100 	.word	0xe000e100

08002f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	6039      	str	r1, [r7, #0]
 8002f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	db0a      	blt.n	8002f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	490c      	ldr	r1, [pc, #48]	; (8002f4c <__NVIC_SetPriority+0x4c>)
 8002f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1e:	0112      	lsls	r2, r2, #4
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	440b      	add	r3, r1
 8002f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f28:	e00a      	b.n	8002f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	4908      	ldr	r1, [pc, #32]	; (8002f50 <__NVIC_SetPriority+0x50>)
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	3b04      	subs	r3, #4
 8002f38:	0112      	lsls	r2, r2, #4
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	761a      	strb	r2, [r3, #24]
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	e000e100 	.word	0xe000e100
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b089      	sub	sp, #36	; 0x24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f1c3 0307 	rsb	r3, r3, #7
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	bf28      	it	cs
 8002f72:	2304      	movcs	r3, #4
 8002f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	3304      	adds	r3, #4
 8002f7a:	2b06      	cmp	r3, #6
 8002f7c:	d902      	bls.n	8002f84 <NVIC_EncodePriority+0x30>
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	3b03      	subs	r3, #3
 8002f82:	e000      	b.n	8002f86 <NVIC_EncodePriority+0x32>
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f88:	f04f 32ff 	mov.w	r2, #4294967295
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43da      	mvns	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	401a      	ands	r2, r3
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa6:	43d9      	mvns	r1, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fac:	4313      	orrs	r3, r2
         );
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3724      	adds	r7, #36	; 0x24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b082      	sub	sp, #8
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff ff4c 	bl	8002e60 <__NVIC_SetPriorityGrouping>
}
 8002fc8:	bf00      	nop
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
 8002fdc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fe2:	f7ff ff61 	bl	8002ea8 <__NVIC_GetPriorityGrouping>
 8002fe6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	68b9      	ldr	r1, [r7, #8]
 8002fec:	6978      	ldr	r0, [r7, #20]
 8002fee:	f7ff ffb1 	bl	8002f54 <NVIC_EncodePriority>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff ff80 	bl	8002f00 <__NVIC_SetPriority>
}
 8003000:	bf00      	nop
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	4603      	mov	r3, r0
 8003010:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff ff54 	bl	8002ec4 <__NVIC_EnableIRQ>
}
 800301c:	bf00      	nop
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003030:	f7ff fee6 	bl	8002e00 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e099      	b.n	8003174 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0201 	bic.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003060:	e00f      	b.n	8003082 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003062:	f7ff fecd 	bl	8002e00 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b05      	cmp	r3, #5
 800306e:	d908      	bls.n	8003082 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2220      	movs	r2, #32
 8003074:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2203      	movs	r2, #3
 800307a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e078      	b.n	8003174 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1e8      	bne.n	8003062 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	4b38      	ldr	r3, [pc, #224]	; (800317c <HAL_DMA_Init+0x158>)
 800309c:	4013      	ands	r3, r2
 800309e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d107      	bne.n	80030ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e4:	4313      	orrs	r3, r2
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f023 0307 	bic.w	r3, r3, #7
 8003102:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	4313      	orrs	r3, r2
 800310c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	2b04      	cmp	r3, #4
 8003114:	d117      	bne.n	8003146 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	4313      	orrs	r3, r2
 800311e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00e      	beq.n	8003146 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 fa7b 	bl	8003624 <DMA_CheckFifoParam>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2240      	movs	r2, #64	; 0x40
 8003138:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003142:	2301      	movs	r3, #1
 8003144:	e016      	b.n	8003174 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fa32 	bl	80035b8 <DMA_CalcBaseAndBitshift>
 8003154:	4603      	mov	r3, r0
 8003156:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315c:	223f      	movs	r2, #63	; 0x3f
 800315e:	409a      	lsls	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	f010803f 	.word	0xf010803f

08003180 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800318e:	f7ff fe37 	bl	8002e00 <HAL_GetTick>
 8003192:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d008      	beq.n	80031b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2280      	movs	r2, #128	; 0x80
 80031a4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e052      	b.n	8003258 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0216 	bic.w	r2, r2, #22
 80031c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695a      	ldr	r2, [r3, #20]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d103      	bne.n	80031e2 <HAL_DMA_Abort+0x62>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d007      	beq.n	80031f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0208 	bic.w	r2, r2, #8
 80031f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0201 	bic.w	r2, r2, #1
 8003200:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003202:	e013      	b.n	800322c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003204:	f7ff fdfc 	bl	8002e00 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b05      	cmp	r3, #5
 8003210:	d90c      	bls.n	800322c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2220      	movs	r2, #32
 8003216:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2203      	movs	r2, #3
 800321c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e015      	b.n	8003258 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1e4      	bne.n	8003204 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323e:	223f      	movs	r2, #63	; 0x3f
 8003240:	409a      	lsls	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d004      	beq.n	800327e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2280      	movs	r2, #128	; 0x80
 8003278:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e00c      	b.n	8003298 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2205      	movs	r2, #5
 8003282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0201 	bic.w	r2, r2, #1
 8003294:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032b0:	4b8e      	ldr	r3, [pc, #568]	; (80034ec <HAL_DMA_IRQHandler+0x248>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a8e      	ldr	r2, [pc, #568]	; (80034f0 <HAL_DMA_IRQHandler+0x24c>)
 80032b6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ba:	0a9b      	lsrs	r3, r3, #10
 80032bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ce:	2208      	movs	r2, #8
 80032d0:	409a      	lsls	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4013      	ands	r3, r2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d01a      	beq.n	8003310 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d013      	beq.n	8003310 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0204 	bic.w	r2, r2, #4
 80032f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fc:	2208      	movs	r2, #8
 80032fe:	409a      	lsls	r2, r3
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003308:	f043 0201 	orr.w	r2, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003314:	2201      	movs	r2, #1
 8003316:	409a      	lsls	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4013      	ands	r3, r2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d012      	beq.n	8003346 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00b      	beq.n	8003346 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003332:	2201      	movs	r2, #1
 8003334:	409a      	lsls	r2, r3
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333e:	f043 0202 	orr.w	r2, r3, #2
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334a:	2204      	movs	r2, #4
 800334c:	409a      	lsls	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4013      	ands	r3, r2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d012      	beq.n	800337c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00b      	beq.n	800337c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003368:	2204      	movs	r2, #4
 800336a:	409a      	lsls	r2, r3
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003374:	f043 0204 	orr.w	r2, r3, #4
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003380:	2210      	movs	r2, #16
 8003382:	409a      	lsls	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4013      	ands	r3, r2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d043      	beq.n	8003414 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b00      	cmp	r3, #0
 8003398:	d03c      	beq.n	8003414 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339e:	2210      	movs	r2, #16
 80033a0:	409a      	lsls	r2, r3
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d018      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d108      	bne.n	80033d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d024      	beq.n	8003414 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	4798      	blx	r3
 80033d2:	e01f      	b.n	8003414 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d01b      	beq.n	8003414 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	4798      	blx	r3
 80033e4:	e016      	b.n	8003414 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d107      	bne.n	8003404 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0208 	bic.w	r2, r2, #8
 8003402:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003418:	2220      	movs	r2, #32
 800341a:	409a      	lsls	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4013      	ands	r3, r2
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 808f 	beq.w	8003544 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0310 	and.w	r3, r3, #16
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 8087 	beq.w	8003544 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343a:	2220      	movs	r2, #32
 800343c:	409a      	lsls	r2, r3
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b05      	cmp	r3, #5
 800344c:	d136      	bne.n	80034bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0216 	bic.w	r2, r2, #22
 800345c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695a      	ldr	r2, [r3, #20]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800346c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	2b00      	cmp	r3, #0
 8003474:	d103      	bne.n	800347e <HAL_DMA_IRQHandler+0x1da>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800347a:	2b00      	cmp	r3, #0
 800347c:	d007      	beq.n	800348e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0208 	bic.w	r2, r2, #8
 800348c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003492:	223f      	movs	r2, #63	; 0x3f
 8003494:	409a      	lsls	r2, r3
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d07e      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	4798      	blx	r3
        }
        return;
 80034ba:	e079      	b.n	80035b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d01d      	beq.n	8003506 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10d      	bne.n	80034f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d031      	beq.n	8003544 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	4798      	blx	r3
 80034e8:	e02c      	b.n	8003544 <HAL_DMA_IRQHandler+0x2a0>
 80034ea:	bf00      	nop
 80034ec:	20000234 	.word	0x20000234
 80034f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d023      	beq.n	8003544 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	4798      	blx	r3
 8003504:	e01e      	b.n	8003544 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10f      	bne.n	8003534 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0210 	bic.w	r2, r2, #16
 8003522:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003548:	2b00      	cmp	r3, #0
 800354a:	d032      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d022      	beq.n	800359e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2205      	movs	r2, #5
 800355c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0201 	bic.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	3301      	adds	r3, #1
 8003574:	60bb      	str	r3, [r7, #8]
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	429a      	cmp	r2, r3
 800357a:	d307      	bcc.n	800358c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f2      	bne.n	8003570 <HAL_DMA_IRQHandler+0x2cc>
 800358a:	e000      	b.n	800358e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800358c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d005      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	4798      	blx	r3
 80035ae:	e000      	b.n	80035b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80035b0:	bf00      	nop
    }
  }
}
 80035b2:	3718      	adds	r7, #24
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	3b10      	subs	r3, #16
 80035c8:	4a14      	ldr	r2, [pc, #80]	; (800361c <DMA_CalcBaseAndBitshift+0x64>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	091b      	lsrs	r3, r3, #4
 80035d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035d2:	4a13      	ldr	r2, [pc, #76]	; (8003620 <DMA_CalcBaseAndBitshift+0x68>)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4413      	add	r3, r2
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	461a      	mov	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d909      	bls.n	80035fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035ee:	f023 0303 	bic.w	r3, r3, #3
 80035f2:	1d1a      	adds	r2, r3, #4
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	659a      	str	r2, [r3, #88]	; 0x58
 80035f8:	e007      	b.n	800360a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003602:	f023 0303 	bic.w	r3, r3, #3
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800360e:	4618      	mov	r0, r3
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	aaaaaaab 	.word	0xaaaaaaab
 8003620:	08016f80 	.word	0x08016f80

08003624 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800362c:	2300      	movs	r3, #0
 800362e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003634:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d11f      	bne.n	800367e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b03      	cmp	r3, #3
 8003642:	d856      	bhi.n	80036f2 <DMA_CheckFifoParam+0xce>
 8003644:	a201      	add	r2, pc, #4	; (adr r2, 800364c <DMA_CheckFifoParam+0x28>)
 8003646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364a:	bf00      	nop
 800364c:	0800365d 	.word	0x0800365d
 8003650:	0800366f 	.word	0x0800366f
 8003654:	0800365d 	.word	0x0800365d
 8003658:	080036f3 	.word	0x080036f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d046      	beq.n	80036f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800366c:	e043      	b.n	80036f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003676:	d140      	bne.n	80036fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800367c:	e03d      	b.n	80036fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003686:	d121      	bne.n	80036cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2b03      	cmp	r3, #3
 800368c:	d837      	bhi.n	80036fe <DMA_CheckFifoParam+0xda>
 800368e:	a201      	add	r2, pc, #4	; (adr r2, 8003694 <DMA_CheckFifoParam+0x70>)
 8003690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003694:	080036a5 	.word	0x080036a5
 8003698:	080036ab 	.word	0x080036ab
 800369c:	080036a5 	.word	0x080036a5
 80036a0:	080036bd 	.word	0x080036bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
      break;
 80036a8:	e030      	b.n	800370c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d025      	beq.n	8003702 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ba:	e022      	b.n	8003702 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036c4:	d11f      	bne.n	8003706 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036ca:	e01c      	b.n	8003706 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d903      	bls.n	80036da <DMA_CheckFifoParam+0xb6>
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d003      	beq.n	80036e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036d8:	e018      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	73fb      	strb	r3, [r7, #15]
      break;
 80036de:	e015      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00e      	beq.n	800370a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	73fb      	strb	r3, [r7, #15]
      break;
 80036f0:	e00b      	b.n	800370a <DMA_CheckFifoParam+0xe6>
      break;
 80036f2:	bf00      	nop
 80036f4:	e00a      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      break;
 80036f6:	bf00      	nop
 80036f8:	e008      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      break;
 80036fa:	bf00      	nop
 80036fc:	e006      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      break;
 80036fe:	bf00      	nop
 8003700:	e004      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      break;
 8003702:	bf00      	nop
 8003704:	e002      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      break;   
 8003706:	bf00      	nop
 8003708:	e000      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      break;
 800370a:	bf00      	nop
    }
  } 
  
  return status; 
 800370c:	7bfb      	ldrb	r3, [r7, #15]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop

0800371c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800372e:	4b23      	ldr	r3, [pc, #140]	; (80037bc <HAL_FLASH_Program+0xa0>)
 8003730:	7e1b      	ldrb	r3, [r3, #24]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d101      	bne.n	800373a <HAL_FLASH_Program+0x1e>
 8003736:	2302      	movs	r3, #2
 8003738:	e03b      	b.n	80037b2 <HAL_FLASH_Program+0x96>
 800373a:	4b20      	ldr	r3, [pc, #128]	; (80037bc <HAL_FLASH_Program+0xa0>)
 800373c:	2201      	movs	r2, #1
 800373e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003740:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003744:	f000 f870 	bl	8003828 <FLASH_WaitForLastOperation>
 8003748:	4603      	mov	r3, r0
 800374a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800374c:	7dfb      	ldrb	r3, [r7, #23]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d12b      	bne.n	80037aa <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d105      	bne.n	8003764 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003758:	783b      	ldrb	r3, [r7, #0]
 800375a:	4619      	mov	r1, r3
 800375c:	68b8      	ldr	r0, [r7, #8]
 800375e:	f000 f91b 	bl	8003998 <FLASH_Program_Byte>
 8003762:	e016      	b.n	8003792 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d105      	bne.n	8003776 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800376a:	883b      	ldrh	r3, [r7, #0]
 800376c:	4619      	mov	r1, r3
 800376e:	68b8      	ldr	r0, [r7, #8]
 8003770:	f000 f8ee 	bl	8003950 <FLASH_Program_HalfWord>
 8003774:	e00d      	b.n	8003792 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2b02      	cmp	r3, #2
 800377a:	d105      	bne.n	8003788 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	4619      	mov	r1, r3
 8003780:	68b8      	ldr	r0, [r7, #8]
 8003782:	f000 f8c3 	bl	800390c <FLASH_Program_Word>
 8003786:	e004      	b.n	8003792 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003788:	e9d7 2300 	ldrd	r2, r3, [r7]
 800378c:	68b8      	ldr	r0, [r7, #8]
 800378e:	f000 f88b 	bl	80038a8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003792:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003796:	f000 f847 	bl	8003828 <FLASH_WaitForLastOperation>
 800379a:	4603      	mov	r3, r0
 800379c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800379e:	4b08      	ldr	r3, [pc, #32]	; (80037c0 <HAL_FLASH_Program+0xa4>)
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	4a07      	ldr	r2, [pc, #28]	; (80037c0 <HAL_FLASH_Program+0xa4>)
 80037a4:	f023 0301 	bic.w	r3, r3, #1
 80037a8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80037aa:	4b04      	ldr	r3, [pc, #16]	; (80037bc <HAL_FLASH_Program+0xa0>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	761a      	strb	r2, [r3, #24]
  
  return status;
 80037b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20001dac 	.word	0x20001dac
 80037c0:	40023c00 	.word	0x40023c00

080037c4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80037ce:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <HAL_FLASH_Unlock+0x38>)
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	da0b      	bge.n	80037ee <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80037d6:	4b09      	ldr	r3, [pc, #36]	; (80037fc <HAL_FLASH_Unlock+0x38>)
 80037d8:	4a09      	ldr	r2, [pc, #36]	; (8003800 <HAL_FLASH_Unlock+0x3c>)
 80037da:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80037dc:	4b07      	ldr	r3, [pc, #28]	; (80037fc <HAL_FLASH_Unlock+0x38>)
 80037de:	4a09      	ldr	r2, [pc, #36]	; (8003804 <HAL_FLASH_Unlock+0x40>)
 80037e0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80037e2:	4b06      	ldr	r3, [pc, #24]	; (80037fc <HAL_FLASH_Unlock+0x38>)
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	da01      	bge.n	80037ee <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80037ee:	79fb      	ldrb	r3, [r7, #7]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	40023c00 	.word	0x40023c00
 8003800:	45670123 	.word	0x45670123
 8003804:	cdef89ab 	.word	0xcdef89ab

08003808 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800380c:	4b05      	ldr	r3, [pc, #20]	; (8003824 <HAL_FLASH_Lock+0x1c>)
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	4a04      	ldr	r2, [pc, #16]	; (8003824 <HAL_FLASH_Lock+0x1c>)
 8003812:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003816:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	40023c00 	.word	0x40023c00

08003828 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003834:	4b1a      	ldr	r3, [pc, #104]	; (80038a0 <FLASH_WaitForLastOperation+0x78>)
 8003836:	2200      	movs	r2, #0
 8003838:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800383a:	f7ff fae1 	bl	8002e00 <HAL_GetTick>
 800383e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003840:	e010      	b.n	8003864 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003848:	d00c      	beq.n	8003864 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d007      	beq.n	8003860 <FLASH_WaitForLastOperation+0x38>
 8003850:	f7ff fad6 	bl	8002e00 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	429a      	cmp	r2, r3
 800385e:	d201      	bcs.n	8003864 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e019      	b.n	8003898 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003864:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <FLASH_WaitForLastOperation+0x7c>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1e8      	bne.n	8003842 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003870:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <FLASH_WaitForLastOperation+0x7c>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800387c:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <FLASH_WaitForLastOperation+0x7c>)
 800387e:	2201      	movs	r2, #1
 8003880:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003882:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <FLASH_WaitForLastOperation+0x7c>)
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800388e:	f000 f8a5 	bl	80039dc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
  
}  
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	20001dac 	.word	0x20001dac
 80038a4:	40023c00 	.word	0x40023c00

080038a8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80038b4:	4b14      	ldr	r3, [pc, #80]	; (8003908 <FLASH_Program_DoubleWord+0x60>)
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	4a13      	ldr	r2, [pc, #76]	; (8003908 <FLASH_Program_DoubleWord+0x60>)
 80038ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80038c0:	4b11      	ldr	r3, [pc, #68]	; (8003908 <FLASH_Program_DoubleWord+0x60>)
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	4a10      	ldr	r2, [pc, #64]	; (8003908 <FLASH_Program_DoubleWord+0x60>)
 80038c6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80038ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80038cc:	4b0e      	ldr	r3, [pc, #56]	; (8003908 <FLASH_Program_DoubleWord+0x60>)
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	4a0d      	ldr	r2, [pc, #52]	; (8003908 <FLASH_Program_DoubleWord+0x60>)
 80038d2:	f043 0301 	orr.w	r3, r3, #1
 80038d6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80038de:	f3bf 8f6f 	isb	sy
}
 80038e2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80038e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	000a      	movs	r2, r1
 80038f2:	2300      	movs	r3, #0
 80038f4:	68f9      	ldr	r1, [r7, #12]
 80038f6:	3104      	adds	r1, #4
 80038f8:	4613      	mov	r3, r2
 80038fa:	600b      	str	r3, [r1, #0]
}
 80038fc:	bf00      	nop
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	40023c00 	.word	0x40023c00

0800390c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003916:	4b0d      	ldr	r3, [pc, #52]	; (800394c <FLASH_Program_Word+0x40>)
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	4a0c      	ldr	r2, [pc, #48]	; (800394c <FLASH_Program_Word+0x40>)
 800391c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003920:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003922:	4b0a      	ldr	r3, [pc, #40]	; (800394c <FLASH_Program_Word+0x40>)
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	4a09      	ldr	r2, [pc, #36]	; (800394c <FLASH_Program_Word+0x40>)
 8003928:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800392c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800392e:	4b07      	ldr	r3, [pc, #28]	; (800394c <FLASH_Program_Word+0x40>)
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	4a06      	ldr	r2, [pc, #24]	; (800394c <FLASH_Program_Word+0x40>)
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	601a      	str	r2, [r3, #0]
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	40023c00 	.word	0x40023c00

08003950 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800395c:	4b0d      	ldr	r3, [pc, #52]	; (8003994 <FLASH_Program_HalfWord+0x44>)
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	4a0c      	ldr	r2, [pc, #48]	; (8003994 <FLASH_Program_HalfWord+0x44>)
 8003962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003966:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003968:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <FLASH_Program_HalfWord+0x44>)
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	4a09      	ldr	r2, [pc, #36]	; (8003994 <FLASH_Program_HalfWord+0x44>)
 800396e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003972:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003974:	4b07      	ldr	r3, [pc, #28]	; (8003994 <FLASH_Program_HalfWord+0x44>)
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	4a06      	ldr	r2, [pc, #24]	; (8003994 <FLASH_Program_HalfWord+0x44>)
 800397a:	f043 0301 	orr.w	r3, r3, #1
 800397e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	887a      	ldrh	r2, [r7, #2]
 8003984:	801a      	strh	r2, [r3, #0]
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40023c00 	.word	0x40023c00

08003998 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80039a4:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <FLASH_Program_Byte+0x40>)
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	4a0b      	ldr	r2, [pc, #44]	; (80039d8 <FLASH_Program_Byte+0x40>)
 80039aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80039b0:	4b09      	ldr	r3, [pc, #36]	; (80039d8 <FLASH_Program_Byte+0x40>)
 80039b2:	4a09      	ldr	r2, [pc, #36]	; (80039d8 <FLASH_Program_Byte+0x40>)
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80039b8:	4b07      	ldr	r3, [pc, #28]	; (80039d8 <FLASH_Program_Byte+0x40>)
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	4a06      	ldr	r2, [pc, #24]	; (80039d8 <FLASH_Program_Byte+0x40>)
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	78fa      	ldrb	r2, [r7, #3]
 80039c8:	701a      	strb	r2, [r3, #0]
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40023c00 	.word	0x40023c00

080039dc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80039e0:	4b27      	ldr	r3, [pc, #156]	; (8003a80 <FLASH_SetErrorCode+0xa4>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	f003 0310 	and.w	r3, r3, #16
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d008      	beq.n	80039fe <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80039ec:	4b25      	ldr	r3, [pc, #148]	; (8003a84 <FLASH_SetErrorCode+0xa8>)
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	f043 0310 	orr.w	r3, r3, #16
 80039f4:	4a23      	ldr	r2, [pc, #140]	; (8003a84 <FLASH_SetErrorCode+0xa8>)
 80039f6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80039f8:	4b21      	ldr	r3, [pc, #132]	; (8003a80 <FLASH_SetErrorCode+0xa4>)
 80039fa:	2210      	movs	r2, #16
 80039fc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80039fe:	4b20      	ldr	r3, [pc, #128]	; (8003a80 <FLASH_SetErrorCode+0xa4>)
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d008      	beq.n	8003a1c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003a0a:	4b1e      	ldr	r3, [pc, #120]	; (8003a84 <FLASH_SetErrorCode+0xa8>)
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	f043 0308 	orr.w	r3, r3, #8
 8003a12:	4a1c      	ldr	r2, [pc, #112]	; (8003a84 <FLASH_SetErrorCode+0xa8>)
 8003a14:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003a16:	4b1a      	ldr	r3, [pc, #104]	; (8003a80 <FLASH_SetErrorCode+0xa4>)
 8003a18:	2220      	movs	r2, #32
 8003a1a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003a1c:	4b18      	ldr	r3, [pc, #96]	; (8003a80 <FLASH_SetErrorCode+0xa4>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d008      	beq.n	8003a3a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003a28:	4b16      	ldr	r3, [pc, #88]	; (8003a84 <FLASH_SetErrorCode+0xa8>)
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	f043 0304 	orr.w	r3, r3, #4
 8003a30:	4a14      	ldr	r2, [pc, #80]	; (8003a84 <FLASH_SetErrorCode+0xa8>)
 8003a32:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003a34:	4b12      	ldr	r3, [pc, #72]	; (8003a80 <FLASH_SetErrorCode+0xa4>)
 8003a36:	2240      	movs	r2, #64	; 0x40
 8003a38:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003a3a:	4b11      	ldr	r3, [pc, #68]	; (8003a80 <FLASH_SetErrorCode+0xa4>)
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d008      	beq.n	8003a58 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003a46:	4b0f      	ldr	r3, [pc, #60]	; (8003a84 <FLASH_SetErrorCode+0xa8>)
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f043 0302 	orr.w	r3, r3, #2
 8003a4e:	4a0d      	ldr	r2, [pc, #52]	; (8003a84 <FLASH_SetErrorCode+0xa8>)
 8003a50:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003a52:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <FLASH_SetErrorCode+0xa4>)
 8003a54:	2280      	movs	r2, #128	; 0x80
 8003a56:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003a58:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <FLASH_SetErrorCode+0xa4>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d008      	beq.n	8003a76 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003a64:	4b07      	ldr	r3, [pc, #28]	; (8003a84 <FLASH_SetErrorCode+0xa8>)
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	f043 0320 	orr.w	r3, r3, #32
 8003a6c:	4a05      	ldr	r2, [pc, #20]	; (8003a84 <FLASH_SetErrorCode+0xa8>)
 8003a6e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003a70:	4b03      	ldr	r3, [pc, #12]	; (8003a80 <FLASH_SetErrorCode+0xa4>)
 8003a72:	2202      	movs	r2, #2
 8003a74:	60da      	str	r2, [r3, #12]
  }
}
 8003a76:	bf00      	nop
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	40023c00 	.word	0x40023c00
 8003a84:	20001dac 	.word	0x20001dac

08003a88 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003a9a:	4b31      	ldr	r3, [pc, #196]	; (8003b60 <HAL_FLASHEx_Erase+0xd8>)
 8003a9c:	7e1b      	ldrb	r3, [r3, #24]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d101      	bne.n	8003aa6 <HAL_FLASHEx_Erase+0x1e>
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	e058      	b.n	8003b58 <HAL_FLASHEx_Erase+0xd0>
 8003aa6:	4b2e      	ldr	r3, [pc, #184]	; (8003b60 <HAL_FLASHEx_Erase+0xd8>)
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003aac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ab0:	f7ff feba 	bl	8003828 <FLASH_WaitForLastOperation>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d148      	bne.n	8003b50 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d115      	bne.n	8003afa <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4610      	mov	r0, r2
 8003adc:	f000 f844 	bl	8003b68 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ae0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ae4:	f7ff fea0 	bl	8003828 <FLASH_WaitForLastOperation>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003aec:	4b1d      	ldr	r3, [pc, #116]	; (8003b64 <HAL_FLASHEx_Erase+0xdc>)
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	4a1c      	ldr	r2, [pc, #112]	; (8003b64 <HAL_FLASHEx_Erase+0xdc>)
 8003af2:	f023 0304 	bic.w	r3, r3, #4
 8003af6:	6113      	str	r3, [r2, #16]
 8003af8:	e028      	b.n	8003b4c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	60bb      	str	r3, [r7, #8]
 8003b00:	e01c      	b.n	8003b3c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	4619      	mov	r1, r3
 8003b0a:	68b8      	ldr	r0, [r7, #8]
 8003b0c:	f000 f850 	bl	8003bb0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b10:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b14:	f7ff fe88 	bl	8003828 <FLASH_WaitForLastOperation>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003b1c:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <HAL_FLASHEx_Erase+0xdc>)
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	4a10      	ldr	r2, [pc, #64]	; (8003b64 <HAL_FLASHEx_Erase+0xdc>)
 8003b22:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003b26:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	601a      	str	r2, [r3, #0]
          break;
 8003b34:	e00a      	b.n	8003b4c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	60bb      	str	r3, [r7, #8]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	4413      	add	r3, r2
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d3da      	bcc.n	8003b02 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003b4c:	f000 f878 	bl	8003c40 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003b50:	4b03      	ldr	r3, [pc, #12]	; (8003b60 <HAL_FLASHEx_Erase+0xd8>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	761a      	strb	r2, [r3, #24]

  return status;
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	20001dac 	.word	0x20001dac
 8003b64:	40023c00 	.word	0x40023c00

08003b68 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	6039      	str	r1, [r7, #0]
 8003b72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003b74:	4b0d      	ldr	r3, [pc, #52]	; (8003bac <FLASH_MassErase+0x44>)
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	4a0c      	ldr	r2, [pc, #48]	; (8003bac <FLASH_MassErase+0x44>)
 8003b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8003b80:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <FLASH_MassErase+0x44>)
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	4a09      	ldr	r2, [pc, #36]	; (8003bac <FLASH_MassErase+0x44>)
 8003b86:	f043 0304 	orr.w	r3, r3, #4
 8003b8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003b8c:	4b07      	ldr	r3, [pc, #28]	; (8003bac <FLASH_MassErase+0x44>)
 8003b8e:	691a      	ldr	r2, [r3, #16]
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	021b      	lsls	r3, r3, #8
 8003b94:	4313      	orrs	r3, r2
 8003b96:	4a05      	ldr	r2, [pc, #20]	; (8003bac <FLASH_MassErase+0x44>)
 8003b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b9c:	6113      	str	r3, [r2, #16]
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40023c00 	.word	0x40023c00

08003bb0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d102      	bne.n	8003bcc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	e010      	b.n	8003bee <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003bcc:	78fb      	ldrb	r3, [r7, #3]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d103      	bne.n	8003bda <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003bd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	e009      	b.n	8003bee <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003bda:	78fb      	ldrb	r3, [r7, #3]
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d103      	bne.n	8003be8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003be0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	e002      	b.n	8003bee <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003be8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003bec:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003bee:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <FLASH_Erase_Sector+0x8c>)
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	4a12      	ldr	r2, [pc, #72]	; (8003c3c <FLASH_Erase_Sector+0x8c>)
 8003bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bf8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003bfa:	4b10      	ldr	r3, [pc, #64]	; (8003c3c <FLASH_Erase_Sector+0x8c>)
 8003bfc:	691a      	ldr	r2, [r3, #16]
 8003bfe:	490f      	ldr	r1, [pc, #60]	; (8003c3c <FLASH_Erase_Sector+0x8c>)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003c06:	4b0d      	ldr	r3, [pc, #52]	; (8003c3c <FLASH_Erase_Sector+0x8c>)
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	4a0c      	ldr	r2, [pc, #48]	; (8003c3c <FLASH_Erase_Sector+0x8c>)
 8003c0c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003c10:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003c12:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <FLASH_Erase_Sector+0x8c>)
 8003c14:	691a      	ldr	r2, [r3, #16]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	4a07      	ldr	r2, [pc, #28]	; (8003c3c <FLASH_Erase_Sector+0x8c>)
 8003c1e:	f043 0302 	orr.w	r3, r3, #2
 8003c22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003c24:	4b05      	ldr	r3, [pc, #20]	; (8003c3c <FLASH_Erase_Sector+0x8c>)
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	4a04      	ldr	r2, [pc, #16]	; (8003c3c <FLASH_Erase_Sector+0x8c>)
 8003c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c2e:	6113      	str	r3, [r2, #16]
}
 8003c30:	bf00      	nop
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	40023c00 	.word	0x40023c00

08003c40 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003c44:	4b20      	ldr	r3, [pc, #128]	; (8003cc8 <FLASH_FlushCaches+0x88>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d017      	beq.n	8003c80 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003c50:	4b1d      	ldr	r3, [pc, #116]	; (8003cc8 <FLASH_FlushCaches+0x88>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a1c      	ldr	r2, [pc, #112]	; (8003cc8 <FLASH_FlushCaches+0x88>)
 8003c56:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c5a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003c5c:	4b1a      	ldr	r3, [pc, #104]	; (8003cc8 <FLASH_FlushCaches+0x88>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a19      	ldr	r2, [pc, #100]	; (8003cc8 <FLASH_FlushCaches+0x88>)
 8003c62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	4b17      	ldr	r3, [pc, #92]	; (8003cc8 <FLASH_FlushCaches+0x88>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a16      	ldr	r2, [pc, #88]	; (8003cc8 <FLASH_FlushCaches+0x88>)
 8003c6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c72:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c74:	4b14      	ldr	r3, [pc, #80]	; (8003cc8 <FLASH_FlushCaches+0x88>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a13      	ldr	r2, [pc, #76]	; (8003cc8 <FLASH_FlushCaches+0x88>)
 8003c7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c7e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003c80:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <FLASH_FlushCaches+0x88>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d017      	beq.n	8003cbc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003c8c:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <FLASH_FlushCaches+0x88>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a0d      	ldr	r2, [pc, #52]	; (8003cc8 <FLASH_FlushCaches+0x88>)
 8003c92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c96:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003c98:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <FLASH_FlushCaches+0x88>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a0a      	ldr	r2, [pc, #40]	; (8003cc8 <FLASH_FlushCaches+0x88>)
 8003c9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <FLASH_FlushCaches+0x88>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a07      	ldr	r2, [pc, #28]	; (8003cc8 <FLASH_FlushCaches+0x88>)
 8003caa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cae:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003cb0:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <FLASH_FlushCaches+0x88>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a04      	ldr	r2, [pc, #16]	; (8003cc8 <FLASH_FlushCaches+0x88>)
 8003cb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cba:	6013      	str	r3, [r2, #0]
  }
}
 8003cbc:	bf00      	nop
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	40023c00 	.word	0x40023c00

08003ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b089      	sub	sp, #36	; 0x24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61fb      	str	r3, [r7, #28]
 8003ce6:	e16b      	b.n	8003fc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ce8:	2201      	movs	r2, #1
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	f040 815a 	bne.w	8003fba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d005      	beq.n	8003d1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d130      	bne.n	8003d80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	2203      	movs	r2, #3
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4013      	ands	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d54:	2201      	movs	r2, #1
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	4013      	ands	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	f003 0201 	and.w	r2, r3, #1
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f003 0303 	and.w	r3, r3, #3
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d017      	beq.n	8003dbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	2203      	movs	r2, #3
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4013      	ands	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f003 0303 	and.w	r3, r3, #3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d123      	bne.n	8003e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	08da      	lsrs	r2, r3, #3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3208      	adds	r2, #8
 8003dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	220f      	movs	r2, #15
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	43db      	mvns	r3, r3
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4013      	ands	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	691a      	ldr	r2, [r3, #16]
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	08da      	lsrs	r2, r3, #3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3208      	adds	r2, #8
 8003e0a:	69b9      	ldr	r1, [r7, #24]
 8003e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4013      	ands	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f003 0203 	and.w	r2, r3, #3
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 80b4 	beq.w	8003fba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	4b60      	ldr	r3, [pc, #384]	; (8003fd8 <HAL_GPIO_Init+0x30c>)
 8003e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5a:	4a5f      	ldr	r2, [pc, #380]	; (8003fd8 <HAL_GPIO_Init+0x30c>)
 8003e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e60:	6453      	str	r3, [r2, #68]	; 0x44
 8003e62:	4b5d      	ldr	r3, [pc, #372]	; (8003fd8 <HAL_GPIO_Init+0x30c>)
 8003e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e6e:	4a5b      	ldr	r2, [pc, #364]	; (8003fdc <HAL_GPIO_Init+0x310>)
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	089b      	lsrs	r3, r3, #2
 8003e74:	3302      	adds	r3, #2
 8003e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	220f      	movs	r2, #15
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a52      	ldr	r2, [pc, #328]	; (8003fe0 <HAL_GPIO_Init+0x314>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d02b      	beq.n	8003ef2 <HAL_GPIO_Init+0x226>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a51      	ldr	r2, [pc, #324]	; (8003fe4 <HAL_GPIO_Init+0x318>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d025      	beq.n	8003eee <HAL_GPIO_Init+0x222>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a50      	ldr	r2, [pc, #320]	; (8003fe8 <HAL_GPIO_Init+0x31c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d01f      	beq.n	8003eea <HAL_GPIO_Init+0x21e>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a4f      	ldr	r2, [pc, #316]	; (8003fec <HAL_GPIO_Init+0x320>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d019      	beq.n	8003ee6 <HAL_GPIO_Init+0x21a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a4e      	ldr	r2, [pc, #312]	; (8003ff0 <HAL_GPIO_Init+0x324>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d013      	beq.n	8003ee2 <HAL_GPIO_Init+0x216>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a4d      	ldr	r2, [pc, #308]	; (8003ff4 <HAL_GPIO_Init+0x328>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00d      	beq.n	8003ede <HAL_GPIO_Init+0x212>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a4c      	ldr	r2, [pc, #304]	; (8003ff8 <HAL_GPIO_Init+0x32c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d007      	beq.n	8003eda <HAL_GPIO_Init+0x20e>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a4b      	ldr	r2, [pc, #300]	; (8003ffc <HAL_GPIO_Init+0x330>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d101      	bne.n	8003ed6 <HAL_GPIO_Init+0x20a>
 8003ed2:	2307      	movs	r3, #7
 8003ed4:	e00e      	b.n	8003ef4 <HAL_GPIO_Init+0x228>
 8003ed6:	2308      	movs	r3, #8
 8003ed8:	e00c      	b.n	8003ef4 <HAL_GPIO_Init+0x228>
 8003eda:	2306      	movs	r3, #6
 8003edc:	e00a      	b.n	8003ef4 <HAL_GPIO_Init+0x228>
 8003ede:	2305      	movs	r3, #5
 8003ee0:	e008      	b.n	8003ef4 <HAL_GPIO_Init+0x228>
 8003ee2:	2304      	movs	r3, #4
 8003ee4:	e006      	b.n	8003ef4 <HAL_GPIO_Init+0x228>
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e004      	b.n	8003ef4 <HAL_GPIO_Init+0x228>
 8003eea:	2302      	movs	r3, #2
 8003eec:	e002      	b.n	8003ef4 <HAL_GPIO_Init+0x228>
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e000      	b.n	8003ef4 <HAL_GPIO_Init+0x228>
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	69fa      	ldr	r2, [r7, #28]
 8003ef6:	f002 0203 	and.w	r2, r2, #3
 8003efa:	0092      	lsls	r2, r2, #2
 8003efc:	4093      	lsls	r3, r2
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f04:	4935      	ldr	r1, [pc, #212]	; (8003fdc <HAL_GPIO_Init+0x310>)
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	089b      	lsrs	r3, r3, #2
 8003f0a:	3302      	adds	r3, #2
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f12:	4b3b      	ldr	r3, [pc, #236]	; (8004000 <HAL_GPIO_Init+0x334>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	43db      	mvns	r3, r3
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f36:	4a32      	ldr	r2, [pc, #200]	; (8004000 <HAL_GPIO_Init+0x334>)
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f3c:	4b30      	ldr	r3, [pc, #192]	; (8004000 <HAL_GPIO_Init+0x334>)
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	43db      	mvns	r3, r3
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f60:	4a27      	ldr	r2, [pc, #156]	; (8004000 <HAL_GPIO_Init+0x334>)
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f66:	4b26      	ldr	r3, [pc, #152]	; (8004000 <HAL_GPIO_Init+0x334>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	43db      	mvns	r3, r3
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	4013      	ands	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f8a:	4a1d      	ldr	r2, [pc, #116]	; (8004000 <HAL_GPIO_Init+0x334>)
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f90:	4b1b      	ldr	r3, [pc, #108]	; (8004000 <HAL_GPIO_Init+0x334>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fb4:	4a12      	ldr	r2, [pc, #72]	; (8004000 <HAL_GPIO_Init+0x334>)
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	61fb      	str	r3, [r7, #28]
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	2b0f      	cmp	r3, #15
 8003fc4:	f67f ae90 	bls.w	8003ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003fc8:	bf00      	nop
 8003fca:	bf00      	nop
 8003fcc:	3724      	adds	r7, #36	; 0x24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	40013800 	.word	0x40013800
 8003fe0:	40020000 	.word	0x40020000
 8003fe4:	40020400 	.word	0x40020400
 8003fe8:	40020800 	.word	0x40020800
 8003fec:	40020c00 	.word	0x40020c00
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	40021400 	.word	0x40021400
 8003ff8:	40021800 	.word	0x40021800
 8003ffc:	40021c00 	.word	0x40021c00
 8004000:	40013c00 	.word	0x40013c00

08004004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	807b      	strh	r3, [r7, #2]
 8004010:	4613      	mov	r3, r2
 8004012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004014:	787b      	ldrb	r3, [r7, #1]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800401a:	887a      	ldrh	r2, [r7, #2]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004020:	e003      	b.n	800402a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004022:	887b      	ldrh	r3, [r7, #2]
 8004024:	041a      	lsls	r2, r3, #16
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	619a      	str	r2, [r3, #24]
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004036:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004038:	b08f      	sub	sp, #60	; 0x3c
 800403a:	af0a      	add	r7, sp, #40	; 0x28
 800403c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e054      	b.n	80040f2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f00f fdf0 	bl	8013c48 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2203      	movs	r2, #3
 800406c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004078:	2b00      	cmp	r3, #0
 800407a:	d102      	bne.n	8004082 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f004 fe04 	bl	8008c94 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	603b      	str	r3, [r7, #0]
 8004092:	687e      	ldr	r6, [r7, #4]
 8004094:	466d      	mov	r5, sp
 8004096:	f106 0410 	add.w	r4, r6, #16
 800409a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800409c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800409e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80040aa:	1d33      	adds	r3, r6, #4
 80040ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040ae:	6838      	ldr	r0, [r7, #0]
 80040b0:	f004 fd7e 	bl	8008bb0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2101      	movs	r1, #1
 80040ba:	4618      	mov	r0, r3
 80040bc:	f004 fdfb 	bl	8008cb6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	603b      	str	r3, [r7, #0]
 80040c6:	687e      	ldr	r6, [r7, #4]
 80040c8:	466d      	mov	r5, sp
 80040ca:	f106 0410 	add.w	r4, r6, #16
 80040ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040da:	e885 0003 	stmia.w	r5, {r0, r1}
 80040de:	1d33      	adds	r3, r6, #4
 80040e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040e2:	6838      	ldr	r0, [r7, #0]
 80040e4:	f004 ff84 	bl	8008ff0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040fa <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80040fa:	b590      	push	{r4, r7, lr}
 80040fc:	b089      	sub	sp, #36	; 0x24
 80040fe:	af04      	add	r7, sp, #16
 8004100:	6078      	str	r0, [r7, #4]
 8004102:	4608      	mov	r0, r1
 8004104:	4611      	mov	r1, r2
 8004106:	461a      	mov	r2, r3
 8004108:	4603      	mov	r3, r0
 800410a:	70fb      	strb	r3, [r7, #3]
 800410c:	460b      	mov	r3, r1
 800410e:	70bb      	strb	r3, [r7, #2]
 8004110:	4613      	mov	r3, r2
 8004112:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800411a:	2b01      	cmp	r3, #1
 800411c:	d101      	bne.n	8004122 <HAL_HCD_HC_Init+0x28>
 800411e:	2302      	movs	r3, #2
 8004120:	e076      	b.n	8004210 <HAL_HCD_HC_Init+0x116>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800412a:	78fb      	ldrb	r3, [r7, #3]
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	212c      	movs	r1, #44	; 0x2c
 8004130:	fb01 f303 	mul.w	r3, r1, r3
 8004134:	4413      	add	r3, r2
 8004136:	333d      	adds	r3, #61	; 0x3d
 8004138:	2200      	movs	r2, #0
 800413a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	212c      	movs	r1, #44	; 0x2c
 8004142:	fb01 f303 	mul.w	r3, r1, r3
 8004146:	4413      	add	r3, r2
 8004148:	3338      	adds	r3, #56	; 0x38
 800414a:	787a      	ldrb	r2, [r7, #1]
 800414c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800414e:	78fb      	ldrb	r3, [r7, #3]
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	212c      	movs	r1, #44	; 0x2c
 8004154:	fb01 f303 	mul.w	r3, r1, r3
 8004158:	4413      	add	r3, r2
 800415a:	3340      	adds	r3, #64	; 0x40
 800415c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800415e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004160:	78fb      	ldrb	r3, [r7, #3]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	212c      	movs	r1, #44	; 0x2c
 8004166:	fb01 f303 	mul.w	r3, r1, r3
 800416a:	4413      	add	r3, r2
 800416c:	3339      	adds	r3, #57	; 0x39
 800416e:	78fa      	ldrb	r2, [r7, #3]
 8004170:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004172:	78fb      	ldrb	r3, [r7, #3]
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	212c      	movs	r1, #44	; 0x2c
 8004178:	fb01 f303 	mul.w	r3, r1, r3
 800417c:	4413      	add	r3, r2
 800417e:	333f      	adds	r3, #63	; 0x3f
 8004180:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004184:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004186:	78fb      	ldrb	r3, [r7, #3]
 8004188:	78ba      	ldrb	r2, [r7, #2]
 800418a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800418e:	b2d0      	uxtb	r0, r2
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	212c      	movs	r1, #44	; 0x2c
 8004194:	fb01 f303 	mul.w	r3, r1, r3
 8004198:	4413      	add	r3, r2
 800419a:	333a      	adds	r3, #58	; 0x3a
 800419c:	4602      	mov	r2, r0
 800419e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80041a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	da09      	bge.n	80041bc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80041a8:	78fb      	ldrb	r3, [r7, #3]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	212c      	movs	r1, #44	; 0x2c
 80041ae:	fb01 f303 	mul.w	r3, r1, r3
 80041b2:	4413      	add	r3, r2
 80041b4:	333b      	adds	r3, #59	; 0x3b
 80041b6:	2201      	movs	r2, #1
 80041b8:	701a      	strb	r2, [r3, #0]
 80041ba:	e008      	b.n	80041ce <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80041bc:	78fb      	ldrb	r3, [r7, #3]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	212c      	movs	r1, #44	; 0x2c
 80041c2:	fb01 f303 	mul.w	r3, r1, r3
 80041c6:	4413      	add	r3, r2
 80041c8:	333b      	adds	r3, #59	; 0x3b
 80041ca:	2200      	movs	r2, #0
 80041cc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80041ce:	78fb      	ldrb	r3, [r7, #3]
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	212c      	movs	r1, #44	; 0x2c
 80041d4:	fb01 f303 	mul.w	r3, r1, r3
 80041d8:	4413      	add	r3, r2
 80041da:	333c      	adds	r3, #60	; 0x3c
 80041dc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80041e0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6818      	ldr	r0, [r3, #0]
 80041e6:	787c      	ldrb	r4, [r7, #1]
 80041e8:	78ba      	ldrb	r2, [r7, #2]
 80041ea:	78f9      	ldrb	r1, [r7, #3]
 80041ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80041ee:	9302      	str	r3, [sp, #8]
 80041f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80041f4:	9301      	str	r3, [sp, #4]
 80041f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	4623      	mov	r3, r4
 80041fe:	f005 f87d 	bl	80092fc <USB_HC_Init>
 8004202:	4603      	mov	r3, r0
 8004204:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800420e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	bd90      	pop	{r4, r7, pc}

08004218 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004224:	2300      	movs	r3, #0
 8004226:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800422e:	2b01      	cmp	r3, #1
 8004230:	d101      	bne.n	8004236 <HAL_HCD_HC_Halt+0x1e>
 8004232:	2302      	movs	r3, #2
 8004234:	e00f      	b.n	8004256 <HAL_HCD_HC_Halt+0x3e>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	78fa      	ldrb	r2, [r7, #3]
 8004244:	4611      	mov	r1, r2
 8004246:	4618      	mov	r0, r3
 8004248:	f005 facd 	bl	80097e6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004254:	7bfb      	ldrb	r3, [r7, #15]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	4608      	mov	r0, r1
 800426a:	4611      	mov	r1, r2
 800426c:	461a      	mov	r2, r3
 800426e:	4603      	mov	r3, r0
 8004270:	70fb      	strb	r3, [r7, #3]
 8004272:	460b      	mov	r3, r1
 8004274:	70bb      	strb	r3, [r7, #2]
 8004276:	4613      	mov	r3, r2
 8004278:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800427a:	78fb      	ldrb	r3, [r7, #3]
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	212c      	movs	r1, #44	; 0x2c
 8004280:	fb01 f303 	mul.w	r3, r1, r3
 8004284:	4413      	add	r3, r2
 8004286:	333b      	adds	r3, #59	; 0x3b
 8004288:	78ba      	ldrb	r2, [r7, #2]
 800428a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800428c:	78fb      	ldrb	r3, [r7, #3]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	212c      	movs	r1, #44	; 0x2c
 8004292:	fb01 f303 	mul.w	r3, r1, r3
 8004296:	4413      	add	r3, r2
 8004298:	333f      	adds	r3, #63	; 0x3f
 800429a:	787a      	ldrb	r2, [r7, #1]
 800429c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800429e:	7c3b      	ldrb	r3, [r7, #16]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d112      	bne.n	80042ca <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80042a4:	78fb      	ldrb	r3, [r7, #3]
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	212c      	movs	r1, #44	; 0x2c
 80042aa:	fb01 f303 	mul.w	r3, r1, r3
 80042ae:	4413      	add	r3, r2
 80042b0:	3342      	adds	r3, #66	; 0x42
 80042b2:	2203      	movs	r2, #3
 80042b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80042b6:	78fb      	ldrb	r3, [r7, #3]
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	212c      	movs	r1, #44	; 0x2c
 80042bc:	fb01 f303 	mul.w	r3, r1, r3
 80042c0:	4413      	add	r3, r2
 80042c2:	333d      	adds	r3, #61	; 0x3d
 80042c4:	7f3a      	ldrb	r2, [r7, #28]
 80042c6:	701a      	strb	r2, [r3, #0]
 80042c8:	e008      	b.n	80042dc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80042ca:	78fb      	ldrb	r3, [r7, #3]
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	212c      	movs	r1, #44	; 0x2c
 80042d0:	fb01 f303 	mul.w	r3, r1, r3
 80042d4:	4413      	add	r3, r2
 80042d6:	3342      	adds	r3, #66	; 0x42
 80042d8:	2202      	movs	r2, #2
 80042da:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80042dc:	787b      	ldrb	r3, [r7, #1]
 80042de:	2b03      	cmp	r3, #3
 80042e0:	f200 80c6 	bhi.w	8004470 <HAL_HCD_HC_SubmitRequest+0x210>
 80042e4:	a201      	add	r2, pc, #4	; (adr r2, 80042ec <HAL_HCD_HC_SubmitRequest+0x8c>)
 80042e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ea:	bf00      	nop
 80042ec:	080042fd 	.word	0x080042fd
 80042f0:	0800445d 	.word	0x0800445d
 80042f4:	08004361 	.word	0x08004361
 80042f8:	080043df 	.word	0x080043df
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80042fc:	7c3b      	ldrb	r3, [r7, #16]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	f040 80b8 	bne.w	8004474 <HAL_HCD_HC_SubmitRequest+0x214>
 8004304:	78bb      	ldrb	r3, [r7, #2]
 8004306:	2b00      	cmp	r3, #0
 8004308:	f040 80b4 	bne.w	8004474 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800430c:	8b3b      	ldrh	r3, [r7, #24]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d108      	bne.n	8004324 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004312:	78fb      	ldrb	r3, [r7, #3]
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	212c      	movs	r1, #44	; 0x2c
 8004318:	fb01 f303 	mul.w	r3, r1, r3
 800431c:	4413      	add	r3, r2
 800431e:	3355      	adds	r3, #85	; 0x55
 8004320:	2201      	movs	r2, #1
 8004322:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004324:	78fb      	ldrb	r3, [r7, #3]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	212c      	movs	r1, #44	; 0x2c
 800432a:	fb01 f303 	mul.w	r3, r1, r3
 800432e:	4413      	add	r3, r2
 8004330:	3355      	adds	r3, #85	; 0x55
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d109      	bne.n	800434c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004338:	78fb      	ldrb	r3, [r7, #3]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	212c      	movs	r1, #44	; 0x2c
 800433e:	fb01 f303 	mul.w	r3, r1, r3
 8004342:	4413      	add	r3, r2
 8004344:	3342      	adds	r3, #66	; 0x42
 8004346:	2200      	movs	r2, #0
 8004348:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800434a:	e093      	b.n	8004474 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800434c:	78fb      	ldrb	r3, [r7, #3]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	212c      	movs	r1, #44	; 0x2c
 8004352:	fb01 f303 	mul.w	r3, r1, r3
 8004356:	4413      	add	r3, r2
 8004358:	3342      	adds	r3, #66	; 0x42
 800435a:	2202      	movs	r2, #2
 800435c:	701a      	strb	r2, [r3, #0]
      break;
 800435e:	e089      	b.n	8004474 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004360:	78bb      	ldrb	r3, [r7, #2]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d11d      	bne.n	80043a2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004366:	78fb      	ldrb	r3, [r7, #3]
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	212c      	movs	r1, #44	; 0x2c
 800436c:	fb01 f303 	mul.w	r3, r1, r3
 8004370:	4413      	add	r3, r2
 8004372:	3355      	adds	r3, #85	; 0x55
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d109      	bne.n	800438e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800437a:	78fb      	ldrb	r3, [r7, #3]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	212c      	movs	r1, #44	; 0x2c
 8004380:	fb01 f303 	mul.w	r3, r1, r3
 8004384:	4413      	add	r3, r2
 8004386:	3342      	adds	r3, #66	; 0x42
 8004388:	2200      	movs	r2, #0
 800438a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800438c:	e073      	b.n	8004476 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800438e:	78fb      	ldrb	r3, [r7, #3]
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	212c      	movs	r1, #44	; 0x2c
 8004394:	fb01 f303 	mul.w	r3, r1, r3
 8004398:	4413      	add	r3, r2
 800439a:	3342      	adds	r3, #66	; 0x42
 800439c:	2202      	movs	r2, #2
 800439e:	701a      	strb	r2, [r3, #0]
      break;
 80043a0:	e069      	b.n	8004476 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80043a2:	78fb      	ldrb	r3, [r7, #3]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	212c      	movs	r1, #44	; 0x2c
 80043a8:	fb01 f303 	mul.w	r3, r1, r3
 80043ac:	4413      	add	r3, r2
 80043ae:	3354      	adds	r3, #84	; 0x54
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d109      	bne.n	80043ca <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80043b6:	78fb      	ldrb	r3, [r7, #3]
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	212c      	movs	r1, #44	; 0x2c
 80043bc:	fb01 f303 	mul.w	r3, r1, r3
 80043c0:	4413      	add	r3, r2
 80043c2:	3342      	adds	r3, #66	; 0x42
 80043c4:	2200      	movs	r2, #0
 80043c6:	701a      	strb	r2, [r3, #0]
      break;
 80043c8:	e055      	b.n	8004476 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80043ca:	78fb      	ldrb	r3, [r7, #3]
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	212c      	movs	r1, #44	; 0x2c
 80043d0:	fb01 f303 	mul.w	r3, r1, r3
 80043d4:	4413      	add	r3, r2
 80043d6:	3342      	adds	r3, #66	; 0x42
 80043d8:	2202      	movs	r2, #2
 80043da:	701a      	strb	r2, [r3, #0]
      break;
 80043dc:	e04b      	b.n	8004476 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80043de:	78bb      	ldrb	r3, [r7, #2]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d11d      	bne.n	8004420 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	212c      	movs	r1, #44	; 0x2c
 80043ea:	fb01 f303 	mul.w	r3, r1, r3
 80043ee:	4413      	add	r3, r2
 80043f0:	3355      	adds	r3, #85	; 0x55
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d109      	bne.n	800440c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	212c      	movs	r1, #44	; 0x2c
 80043fe:	fb01 f303 	mul.w	r3, r1, r3
 8004402:	4413      	add	r3, r2
 8004404:	3342      	adds	r3, #66	; 0x42
 8004406:	2200      	movs	r2, #0
 8004408:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800440a:	e034      	b.n	8004476 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800440c:	78fb      	ldrb	r3, [r7, #3]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	212c      	movs	r1, #44	; 0x2c
 8004412:	fb01 f303 	mul.w	r3, r1, r3
 8004416:	4413      	add	r3, r2
 8004418:	3342      	adds	r3, #66	; 0x42
 800441a:	2202      	movs	r2, #2
 800441c:	701a      	strb	r2, [r3, #0]
      break;
 800441e:	e02a      	b.n	8004476 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004420:	78fb      	ldrb	r3, [r7, #3]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	212c      	movs	r1, #44	; 0x2c
 8004426:	fb01 f303 	mul.w	r3, r1, r3
 800442a:	4413      	add	r3, r2
 800442c:	3354      	adds	r3, #84	; 0x54
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d109      	bne.n	8004448 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004434:	78fb      	ldrb	r3, [r7, #3]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	212c      	movs	r1, #44	; 0x2c
 800443a:	fb01 f303 	mul.w	r3, r1, r3
 800443e:	4413      	add	r3, r2
 8004440:	3342      	adds	r3, #66	; 0x42
 8004442:	2200      	movs	r2, #0
 8004444:	701a      	strb	r2, [r3, #0]
      break;
 8004446:	e016      	b.n	8004476 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	212c      	movs	r1, #44	; 0x2c
 800444e:	fb01 f303 	mul.w	r3, r1, r3
 8004452:	4413      	add	r3, r2
 8004454:	3342      	adds	r3, #66	; 0x42
 8004456:	2202      	movs	r2, #2
 8004458:	701a      	strb	r2, [r3, #0]
      break;
 800445a:	e00c      	b.n	8004476 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	212c      	movs	r1, #44	; 0x2c
 8004462:	fb01 f303 	mul.w	r3, r1, r3
 8004466:	4413      	add	r3, r2
 8004468:	3342      	adds	r3, #66	; 0x42
 800446a:	2200      	movs	r2, #0
 800446c:	701a      	strb	r2, [r3, #0]
      break;
 800446e:	e002      	b.n	8004476 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004470:	bf00      	nop
 8004472:	e000      	b.n	8004476 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004474:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004476:	78fb      	ldrb	r3, [r7, #3]
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	212c      	movs	r1, #44	; 0x2c
 800447c:	fb01 f303 	mul.w	r3, r1, r3
 8004480:	4413      	add	r3, r2
 8004482:	3344      	adds	r3, #68	; 0x44
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004488:	78fb      	ldrb	r3, [r7, #3]
 800448a:	8b3a      	ldrh	r2, [r7, #24]
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	202c      	movs	r0, #44	; 0x2c
 8004490:	fb00 f303 	mul.w	r3, r0, r3
 8004494:	440b      	add	r3, r1
 8004496:	334c      	adds	r3, #76	; 0x4c
 8004498:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800449a:	78fb      	ldrb	r3, [r7, #3]
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	212c      	movs	r1, #44	; 0x2c
 80044a0:	fb01 f303 	mul.w	r3, r1, r3
 80044a4:	4413      	add	r3, r2
 80044a6:	3360      	adds	r3, #96	; 0x60
 80044a8:	2200      	movs	r2, #0
 80044aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80044ac:	78fb      	ldrb	r3, [r7, #3]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	212c      	movs	r1, #44	; 0x2c
 80044b2:	fb01 f303 	mul.w	r3, r1, r3
 80044b6:	4413      	add	r3, r2
 80044b8:	3350      	adds	r3, #80	; 0x50
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80044be:	78fb      	ldrb	r3, [r7, #3]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	212c      	movs	r1, #44	; 0x2c
 80044c4:	fb01 f303 	mul.w	r3, r1, r3
 80044c8:	4413      	add	r3, r2
 80044ca:	3339      	adds	r3, #57	; 0x39
 80044cc:	78fa      	ldrb	r2, [r7, #3]
 80044ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80044d0:	78fb      	ldrb	r3, [r7, #3]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	212c      	movs	r1, #44	; 0x2c
 80044d6:	fb01 f303 	mul.w	r3, r1, r3
 80044da:	4413      	add	r3, r2
 80044dc:	3361      	adds	r3, #97	; 0x61
 80044de:	2200      	movs	r2, #0
 80044e0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6818      	ldr	r0, [r3, #0]
 80044e6:	78fb      	ldrb	r3, [r7, #3]
 80044e8:	222c      	movs	r2, #44	; 0x2c
 80044ea:	fb02 f303 	mul.w	r3, r2, r3
 80044ee:	3338      	adds	r3, #56	; 0x38
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	18d1      	adds	r1, r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	461a      	mov	r2, r3
 80044fc:	f005 f820 	bl	8009540 <USB_HC_StartXfer>
 8004500:	4603      	mov	r3, r0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop

0800450c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f004 fd21 	bl	8008f6a <USB_GetMode>
 8004528:	4603      	mov	r3, r0
 800452a:	2b01      	cmp	r3, #1
 800452c:	f040 80f6 	bne.w	800471c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	f004 fd05 	bl	8008f44 <USB_ReadInterrupts>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 80ec 	beq.w	800471a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f004 fcfc 	bl	8008f44 <USB_ReadInterrupts>
 800454c:	4603      	mov	r3, r0
 800454e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004552:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004556:	d104      	bne.n	8004562 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004560:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f004 fcec 	bl	8008f44 <USB_ReadInterrupts>
 800456c:	4603      	mov	r3, r0
 800456e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004572:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004576:	d104      	bne.n	8004582 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004580:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f004 fcdc 	bl	8008f44 <USB_ReadInterrupts>
 800458c:	4603      	mov	r3, r0
 800458e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004592:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004596:	d104      	bne.n	80045a2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80045a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f004 fccc 	bl	8008f44 <USB_ReadInterrupts>
 80045ac:	4603      	mov	r3, r0
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d103      	bne.n	80045be <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2202      	movs	r2, #2
 80045bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f004 fcbe 	bl	8008f44 <USB_ReadInterrupts>
 80045c8:	4603      	mov	r3, r0
 80045ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045d2:	d11c      	bne.n	800460e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80045dc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10f      	bne.n	800460e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80045ee:	2110      	movs	r1, #16
 80045f0:	6938      	ldr	r0, [r7, #16]
 80045f2:	f004 fbad 	bl	8008d50 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80045f6:	6938      	ldr	r0, [r7, #16]
 80045f8:	f004 fbde 	bl	8008db8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2101      	movs	r1, #1
 8004602:	4618      	mov	r0, r3
 8004604:	f004 fdb4 	bl	8009170 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f00f fb8d 	bl	8013d28 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4618      	mov	r0, r3
 8004614:	f004 fc96 	bl	8008f44 <USB_ReadInterrupts>
 8004618:	4603      	mov	r3, r0
 800461a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800461e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004622:	d102      	bne.n	800462a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f001 f89e 	bl	8005766 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4618      	mov	r0, r3
 8004630:	f004 fc88 	bl	8008f44 <USB_ReadInterrupts>
 8004634:	4603      	mov	r3, r0
 8004636:	f003 0308 	and.w	r3, r3, #8
 800463a:	2b08      	cmp	r3, #8
 800463c:	d106      	bne.n	800464c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f00f fb56 	bl	8013cf0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2208      	movs	r2, #8
 800464a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4618      	mov	r0, r3
 8004652:	f004 fc77 	bl	8008f44 <USB_ReadInterrupts>
 8004656:	4603      	mov	r3, r0
 8004658:	f003 0310 	and.w	r3, r3, #16
 800465c:	2b10      	cmp	r3, #16
 800465e:	d101      	bne.n	8004664 <HAL_HCD_IRQHandler+0x158>
 8004660:	2301      	movs	r3, #1
 8004662:	e000      	b.n	8004666 <HAL_HCD_IRQHandler+0x15a>
 8004664:	2300      	movs	r3, #0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d012      	beq.n	8004690 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	699a      	ldr	r2, [r3, #24]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0210 	bic.w	r2, r2, #16
 8004678:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 ffa1 	bl	80055c2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	699a      	ldr	r2, [r3, #24]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0210 	orr.w	r2, r2, #16
 800468e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4618      	mov	r0, r3
 8004696:	f004 fc55 	bl	8008f44 <USB_ReadInterrupts>
 800469a:	4603      	mov	r3, r0
 800469c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046a4:	d13a      	bne.n	800471c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f005 f88a 	bl	80097c4 <USB_HC_ReadInterrupt>
 80046b0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80046b2:	2300      	movs	r3, #0
 80046b4:	617b      	str	r3, [r7, #20]
 80046b6:	e025      	b.n	8004704 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	fa22 f303 	lsr.w	r3, r2, r3
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d018      	beq.n	80046fe <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046e2:	d106      	bne.n	80046f2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	4619      	mov	r1, r3
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f8ab 	bl	8004846 <HCD_HC_IN_IRQHandler>
 80046f0:	e005      	b.n	80046fe <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	4619      	mov	r1, r3
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 fbf9 	bl	8004ef0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	3301      	adds	r3, #1
 8004702:	617b      	str	r3, [r7, #20]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	429a      	cmp	r2, r3
 800470c:	d3d4      	bcc.n	80046b8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004716:	615a      	str	r2, [r3, #20]
 8004718:	e000      	b.n	800471c <HAL_HCD_IRQHandler+0x210>
      return;
 800471a:	bf00      	nop
    }
  }
}
 800471c:	3718      	adds	r7, #24
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b082      	sub	sp, #8
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004730:	2b01      	cmp	r3, #1
 8004732:	d101      	bne.n	8004738 <HAL_HCD_Start+0x16>
 8004734:	2302      	movs	r3, #2
 8004736:	e013      	b.n	8004760 <HAL_HCD_Start+0x3e>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2101      	movs	r1, #1
 8004746:	4618      	mov	r0, r3
 8004748:	f004 fd76 	bl	8009238 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4618      	mov	r0, r3
 8004752:	f004 fa8e 	bl	8008c72 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004776:	2b01      	cmp	r3, #1
 8004778:	d101      	bne.n	800477e <HAL_HCD_Stop+0x16>
 800477a:	2302      	movs	r3, #2
 800477c:	e00d      	b.n	800479a <HAL_HCD_Stop+0x32>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f005 f964 	bl	8009a58 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b082      	sub	sp, #8
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f004 fd18 	bl	80091e4 <USB_ResetPort>
 80047b4:	4603      	mov	r3, r0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
 80047c6:	460b      	mov	r3, r1
 80047c8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80047ca:	78fb      	ldrb	r3, [r7, #3]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	212c      	movs	r1, #44	; 0x2c
 80047d0:	fb01 f303 	mul.w	r3, r1, r3
 80047d4:	4413      	add	r3, r2
 80047d6:	3360      	adds	r3, #96	; 0x60
 80047d8:	781b      	ldrb	r3, [r3, #0]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
 80047ee:	460b      	mov	r3, r1
 80047f0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80047f2:	78fb      	ldrb	r3, [r7, #3]
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	212c      	movs	r1, #44	; 0x2c
 80047f8:	fb01 f303 	mul.w	r3, r1, r3
 80047fc:	4413      	add	r3, r2
 80047fe:	3350      	adds	r3, #80	; 0x50
 8004800:	681b      	ldr	r3, [r3, #0]
}
 8004802:	4618      	mov	r0, r3
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b082      	sub	sp, #8
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f004 fd5c 	bl	80092d8 <USB_GetCurrentFrame>
 8004820:	4603      	mov	r3, r0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b082      	sub	sp, #8
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4618      	mov	r0, r3
 8004838:	f004 fd37 	bl	80092aa <USB_GetHostSpeed>
 800483c:	4603      	mov	r3, r0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b086      	sub	sp, #24
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
 800484e:	460b      	mov	r3, r1
 8004850:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800485c:	78fb      	ldrb	r3, [r7, #3]
 800485e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	4413      	add	r3, r2
 8004868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 0304 	and.w	r3, r3, #4
 8004872:	2b04      	cmp	r3, #4
 8004874:	d11a      	bne.n	80048ac <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	4413      	add	r3, r2
 800487e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004882:	461a      	mov	r2, r3
 8004884:	2304      	movs	r3, #4
 8004886:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	212c      	movs	r1, #44	; 0x2c
 800488e:	fb01 f303 	mul.w	r3, r1, r3
 8004892:	4413      	add	r3, r2
 8004894:	3361      	adds	r3, #97	; 0x61
 8004896:	2206      	movs	r2, #6
 8004898:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	4611      	mov	r1, r2
 80048a4:	4618      	mov	r0, r3
 80048a6:	f004 ff9e 	bl	80097e6 <USB_HC_Halt>
 80048aa:	e0af      	b.n	8004a0c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048c2:	d11b      	bne.n	80048fc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d0:	461a      	mov	r2, r3
 80048d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	212c      	movs	r1, #44	; 0x2c
 80048de:	fb01 f303 	mul.w	r3, r1, r3
 80048e2:	4413      	add	r3, r2
 80048e4:	3361      	adds	r3, #97	; 0x61
 80048e6:	2207      	movs	r2, #7
 80048e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	4611      	mov	r1, r2
 80048f4:	4618      	mov	r0, r3
 80048f6:	f004 ff76 	bl	80097e6 <USB_HC_Halt>
 80048fa:	e087      	b.n	8004a0c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	4413      	add	r3, r2
 8004904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b20      	cmp	r3, #32
 8004910:	d109      	bne.n	8004926 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	4413      	add	r3, r2
 800491a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800491e:	461a      	mov	r2, r3
 8004920:	2320      	movs	r3, #32
 8004922:	6093      	str	r3, [r2, #8]
 8004924:	e072      	b.n	8004a0c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	4413      	add	r3, r2
 800492e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b08      	cmp	r3, #8
 800493a:	d11a      	bne.n	8004972 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	4413      	add	r3, r2
 8004944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004948:	461a      	mov	r2, r3
 800494a:	2308      	movs	r3, #8
 800494c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	212c      	movs	r1, #44	; 0x2c
 8004954:	fb01 f303 	mul.w	r3, r1, r3
 8004958:	4413      	add	r3, r2
 800495a:	3361      	adds	r3, #97	; 0x61
 800495c:	2205      	movs	r2, #5
 800495e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	b2d2      	uxtb	r2, r2
 8004968:	4611      	mov	r1, r2
 800496a:	4618      	mov	r0, r3
 800496c:	f004 ff3b 	bl	80097e6 <USB_HC_Halt>
 8004970:	e04c      	b.n	8004a0c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	4413      	add	r3, r2
 800497a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004988:	d11b      	bne.n	80049c2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	4413      	add	r3, r2
 8004992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004996:	461a      	mov	r2, r3
 8004998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800499c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	212c      	movs	r1, #44	; 0x2c
 80049a4:	fb01 f303 	mul.w	r3, r1, r3
 80049a8:	4413      	add	r3, r2
 80049aa:	3361      	adds	r3, #97	; 0x61
 80049ac:	2208      	movs	r2, #8
 80049ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	4611      	mov	r1, r2
 80049ba:	4618      	mov	r0, r3
 80049bc:	f004 ff13 	bl	80097e6 <USB_HC_Halt>
 80049c0:	e024      	b.n	8004a0c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d4:	2b80      	cmp	r3, #128	; 0x80
 80049d6:	d119      	bne.n	8004a0c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e4:	461a      	mov	r2, r3
 80049e6:	2380      	movs	r3, #128	; 0x80
 80049e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	212c      	movs	r1, #44	; 0x2c
 80049f0:	fb01 f303 	mul.w	r3, r1, r3
 80049f4:	4413      	add	r3, r2
 80049f6:	3361      	adds	r3, #97	; 0x61
 80049f8:	2206      	movs	r2, #6
 80049fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	4611      	mov	r1, r2
 8004a06:	4618      	mov	r0, r3
 8004a08:	f004 feed 	bl	80097e6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a22:	d112      	bne.n	8004a4a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	4611      	mov	r1, r2
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f004 fed9 	bl	80097e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a40:	461a      	mov	r2, r3
 8004a42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a46:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004a48:	e24e      	b.n	8004ee8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	f040 80df 	bne.w	8004c20 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d019      	beq.n	8004a9e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	212c      	movs	r1, #44	; 0x2c
 8004a70:	fb01 f303 	mul.w	r3, r1, r3
 8004a74:	4413      	add	r3, r2
 8004a76:	3348      	adds	r3, #72	; 0x48
 8004a78:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	0159      	lsls	r1, r3, #5
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	440b      	add	r3, r1
 8004a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004a8c:	1ad2      	subs	r2, r2, r3
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	202c      	movs	r0, #44	; 0x2c
 8004a94:	fb00 f303 	mul.w	r3, r0, r3
 8004a98:	440b      	add	r3, r1
 8004a9a:	3350      	adds	r3, #80	; 0x50
 8004a9c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	212c      	movs	r1, #44	; 0x2c
 8004aa4:	fb01 f303 	mul.w	r3, r1, r3
 8004aa8:	4413      	add	r3, r2
 8004aaa:	3361      	adds	r3, #97	; 0x61
 8004aac:	2201      	movs	r2, #1
 8004aae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	212c      	movs	r1, #44	; 0x2c
 8004ab6:	fb01 f303 	mul.w	r3, r1, r3
 8004aba:	4413      	add	r3, r2
 8004abc:	335c      	adds	r3, #92	; 0x5c
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ace:	461a      	mov	r2, r3
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	212c      	movs	r1, #44	; 0x2c
 8004ada:	fb01 f303 	mul.w	r3, r1, r3
 8004ade:	4413      	add	r3, r2
 8004ae0:	333f      	adds	r3, #63	; 0x3f
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d009      	beq.n	8004afc <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	212c      	movs	r1, #44	; 0x2c
 8004aee:	fb01 f303 	mul.w	r3, r1, r3
 8004af2:	4413      	add	r3, r2
 8004af4:	333f      	adds	r3, #63	; 0x3f
 8004af6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d111      	bne.n	8004b20 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	b2d2      	uxtb	r2, r2
 8004b04:	4611      	mov	r1, r2
 8004b06:	4618      	mov	r0, r3
 8004b08:	f004 fe6d 	bl	80097e6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b18:	461a      	mov	r2, r3
 8004b1a:	2310      	movs	r3, #16
 8004b1c:	6093      	str	r3, [r2, #8]
 8004b1e:	e03a      	b.n	8004b96 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	212c      	movs	r1, #44	; 0x2c
 8004b26:	fb01 f303 	mul.w	r3, r1, r3
 8004b2a:	4413      	add	r3, r2
 8004b2c:	333f      	adds	r3, #63	; 0x3f
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b03      	cmp	r3, #3
 8004b32:	d009      	beq.n	8004b48 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	212c      	movs	r1, #44	; 0x2c
 8004b3a:	fb01 f303 	mul.w	r3, r1, r3
 8004b3e:	4413      	add	r3, r2
 8004b40:	333f      	adds	r3, #63	; 0x3f
 8004b42:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d126      	bne.n	8004b96 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	0151      	lsls	r1, r2, #5
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	440a      	add	r2, r1
 8004b5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b66:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	212c      	movs	r1, #44	; 0x2c
 8004b6e:	fb01 f303 	mul.w	r3, r1, r3
 8004b72:	4413      	add	r3, r2
 8004b74:	3360      	adds	r3, #96	; 0x60
 8004b76:	2201      	movs	r2, #1
 8004b78:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	b2d9      	uxtb	r1, r3
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	202c      	movs	r0, #44	; 0x2c
 8004b84:	fb00 f303 	mul.w	r3, r0, r3
 8004b88:	4413      	add	r3, r2
 8004b8a:	3360      	adds	r3, #96	; 0x60
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f00f f8d7 	bl	8013d44 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d12b      	bne.n	8004bf6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	212c      	movs	r1, #44	; 0x2c
 8004ba4:	fb01 f303 	mul.w	r3, r1, r3
 8004ba8:	4413      	add	r3, r2
 8004baa:	3348      	adds	r3, #72	; 0x48
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	202c      	movs	r0, #44	; 0x2c
 8004bb4:	fb00 f202 	mul.w	r2, r0, r2
 8004bb8:	440a      	add	r2, r1
 8004bba:	3240      	adds	r2, #64	; 0x40
 8004bbc:	8812      	ldrh	r2, [r2, #0]
 8004bbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 818e 	beq.w	8004ee8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	212c      	movs	r1, #44	; 0x2c
 8004bd2:	fb01 f303 	mul.w	r3, r1, r3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	3354      	adds	r3, #84	; 0x54
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	f083 0301 	eor.w	r3, r3, #1
 8004be0:	b2d8      	uxtb	r0, r3
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	212c      	movs	r1, #44	; 0x2c
 8004be8:	fb01 f303 	mul.w	r3, r1, r3
 8004bec:	4413      	add	r3, r2
 8004bee:	3354      	adds	r3, #84	; 0x54
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	701a      	strb	r2, [r3, #0]
}
 8004bf4:	e178      	b.n	8004ee8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	212c      	movs	r1, #44	; 0x2c
 8004bfc:	fb01 f303 	mul.w	r3, r1, r3
 8004c00:	4413      	add	r3, r2
 8004c02:	3354      	adds	r3, #84	; 0x54
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	f083 0301 	eor.w	r3, r3, #1
 8004c0a:	b2d8      	uxtb	r0, r3
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	212c      	movs	r1, #44	; 0x2c
 8004c12:	fb01 f303 	mul.w	r3, r1, r3
 8004c16:	4413      	add	r3, r2
 8004c18:	3354      	adds	r3, #84	; 0x54
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	701a      	strb	r2, [r3, #0]
}
 8004c1e:	e163      	b.n	8004ee8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	f040 80f6 	bne.w	8004e24 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	212c      	movs	r1, #44	; 0x2c
 8004c3e:	fb01 f303 	mul.w	r3, r1, r3
 8004c42:	4413      	add	r3, r2
 8004c44:	3361      	adds	r3, #97	; 0x61
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d109      	bne.n	8004c60 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	212c      	movs	r1, #44	; 0x2c
 8004c52:	fb01 f303 	mul.w	r3, r1, r3
 8004c56:	4413      	add	r3, r2
 8004c58:	3360      	adds	r3, #96	; 0x60
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	701a      	strb	r2, [r3, #0]
 8004c5e:	e0c9      	b.n	8004df4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	212c      	movs	r1, #44	; 0x2c
 8004c66:	fb01 f303 	mul.w	r3, r1, r3
 8004c6a:	4413      	add	r3, r2
 8004c6c:	3361      	adds	r3, #97	; 0x61
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	2b05      	cmp	r3, #5
 8004c72:	d109      	bne.n	8004c88 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	212c      	movs	r1, #44	; 0x2c
 8004c7a:	fb01 f303 	mul.w	r3, r1, r3
 8004c7e:	4413      	add	r3, r2
 8004c80:	3360      	adds	r3, #96	; 0x60
 8004c82:	2205      	movs	r2, #5
 8004c84:	701a      	strb	r2, [r3, #0]
 8004c86:	e0b5      	b.n	8004df4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	212c      	movs	r1, #44	; 0x2c
 8004c8e:	fb01 f303 	mul.w	r3, r1, r3
 8004c92:	4413      	add	r3, r2
 8004c94:	3361      	adds	r3, #97	; 0x61
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b06      	cmp	r3, #6
 8004c9a:	d009      	beq.n	8004cb0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	212c      	movs	r1, #44	; 0x2c
 8004ca2:	fb01 f303 	mul.w	r3, r1, r3
 8004ca6:	4413      	add	r3, r2
 8004ca8:	3361      	adds	r3, #97	; 0x61
 8004caa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d150      	bne.n	8004d52 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	212c      	movs	r1, #44	; 0x2c
 8004cb6:	fb01 f303 	mul.w	r3, r1, r3
 8004cba:	4413      	add	r3, r2
 8004cbc:	335c      	adds	r3, #92	; 0x5c
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	202c      	movs	r0, #44	; 0x2c
 8004cc8:	fb00 f303 	mul.w	r3, r0, r3
 8004ccc:	440b      	add	r3, r1
 8004cce:	335c      	adds	r3, #92	; 0x5c
 8004cd0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	212c      	movs	r1, #44	; 0x2c
 8004cd8:	fb01 f303 	mul.w	r3, r1, r3
 8004cdc:	4413      	add	r3, r2
 8004cde:	335c      	adds	r3, #92	; 0x5c
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d912      	bls.n	8004d0c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	212c      	movs	r1, #44	; 0x2c
 8004cec:	fb01 f303 	mul.w	r3, r1, r3
 8004cf0:	4413      	add	r3, r2
 8004cf2:	335c      	adds	r3, #92	; 0x5c
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	212c      	movs	r1, #44	; 0x2c
 8004cfe:	fb01 f303 	mul.w	r3, r1, r3
 8004d02:	4413      	add	r3, r2
 8004d04:	3360      	adds	r3, #96	; 0x60
 8004d06:	2204      	movs	r2, #4
 8004d08:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d0a:	e073      	b.n	8004df4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	212c      	movs	r1, #44	; 0x2c
 8004d12:	fb01 f303 	mul.w	r3, r1, r3
 8004d16:	4413      	add	r3, r2
 8004d18:	3360      	adds	r3, #96	; 0x60
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	015a      	lsls	r2, r3, #5
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d34:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d3c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d50:	e050      	b.n	8004df4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	212c      	movs	r1, #44	; 0x2c
 8004d58:	fb01 f303 	mul.w	r3, r1, r3
 8004d5c:	4413      	add	r3, r2
 8004d5e:	3361      	adds	r3, #97	; 0x61
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	2b03      	cmp	r3, #3
 8004d64:	d122      	bne.n	8004dac <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	212c      	movs	r1, #44	; 0x2c
 8004d6c:	fb01 f303 	mul.w	r3, r1, r3
 8004d70:	4413      	add	r3, r2
 8004d72:	3360      	adds	r3, #96	; 0x60
 8004d74:	2202      	movs	r2, #2
 8004d76:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d8e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d96:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da4:	461a      	mov	r2, r3
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	6013      	str	r3, [r2, #0]
 8004daa:	e023      	b.n	8004df4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	212c      	movs	r1, #44	; 0x2c
 8004db2:	fb01 f303 	mul.w	r3, r1, r3
 8004db6:	4413      	add	r3, r2
 8004db8:	3361      	adds	r3, #97	; 0x61
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	2b07      	cmp	r3, #7
 8004dbe:	d119      	bne.n	8004df4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	212c      	movs	r1, #44	; 0x2c
 8004dc6:	fb01 f303 	mul.w	r3, r1, r3
 8004dca:	4413      	add	r3, r2
 8004dcc:	335c      	adds	r3, #92	; 0x5c
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	202c      	movs	r0, #44	; 0x2c
 8004dd8:	fb00 f303 	mul.w	r3, r0, r3
 8004ddc:	440b      	add	r3, r1
 8004dde:	335c      	adds	r3, #92	; 0x5c
 8004de0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	212c      	movs	r1, #44	; 0x2c
 8004de8:	fb01 f303 	mul.w	r3, r1, r3
 8004dec:	4413      	add	r3, r2
 8004dee:	3360      	adds	r3, #96	; 0x60
 8004df0:	2204      	movs	r2, #4
 8004df2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e00:	461a      	mov	r2, r3
 8004e02:	2302      	movs	r3, #2
 8004e04:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	b2d9      	uxtb	r1, r3
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	202c      	movs	r0, #44	; 0x2c
 8004e10:	fb00 f303 	mul.w	r3, r0, r3
 8004e14:	4413      	add	r3, r2
 8004e16:	3360      	adds	r3, #96	; 0x60
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f00e ff91 	bl	8013d44 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004e22:	e061      	b.n	8004ee8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 0310 	and.w	r3, r3, #16
 8004e36:	2b10      	cmp	r3, #16
 8004e38:	d156      	bne.n	8004ee8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	212c      	movs	r1, #44	; 0x2c
 8004e40:	fb01 f303 	mul.w	r3, r1, r3
 8004e44:	4413      	add	r3, r2
 8004e46:	333f      	adds	r3, #63	; 0x3f
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b03      	cmp	r3, #3
 8004e4c:	d111      	bne.n	8004e72 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	212c      	movs	r1, #44	; 0x2c
 8004e54:	fb01 f303 	mul.w	r3, r1, r3
 8004e58:	4413      	add	r3, r2
 8004e5a:	335c      	adds	r3, #92	; 0x5c
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	b2d2      	uxtb	r2, r2
 8004e68:	4611      	mov	r1, r2
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f004 fcbb 	bl	80097e6 <USB_HC_Halt>
 8004e70:	e031      	b.n	8004ed6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	212c      	movs	r1, #44	; 0x2c
 8004e78:	fb01 f303 	mul.w	r3, r1, r3
 8004e7c:	4413      	add	r3, r2
 8004e7e:	333f      	adds	r3, #63	; 0x3f
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d009      	beq.n	8004e9a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	212c      	movs	r1, #44	; 0x2c
 8004e8c:	fb01 f303 	mul.w	r3, r1, r3
 8004e90:	4413      	add	r3, r2
 8004e92:	333f      	adds	r3, #63	; 0x3f
 8004e94:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d11d      	bne.n	8004ed6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	212c      	movs	r1, #44	; 0x2c
 8004ea0:	fb01 f303 	mul.w	r3, r1, r3
 8004ea4:	4413      	add	r3, r2
 8004ea6:	335c      	adds	r3, #92	; 0x5c
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d110      	bne.n	8004ed6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	212c      	movs	r1, #44	; 0x2c
 8004eba:	fb01 f303 	mul.w	r3, r1, r3
 8004ebe:	4413      	add	r3, r2
 8004ec0:	3361      	adds	r3, #97	; 0x61
 8004ec2:	2203      	movs	r2, #3
 8004ec4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	b2d2      	uxtb	r2, r2
 8004ece:	4611      	mov	r1, r2
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f004 fc88 	bl	80097e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	015a      	lsls	r2, r3, #5
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	4413      	add	r3, r2
 8004ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	2310      	movs	r3, #16
 8004ee6:	6093      	str	r3, [r2, #8]
}
 8004ee8:	bf00      	nop
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b088      	sub	sp, #32
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	460b      	mov	r3, r1
 8004efa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004f06:	78fb      	ldrb	r3, [r7, #3]
 8004f08:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d11a      	bne.n	8004f56 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	2304      	movs	r3, #4
 8004f30:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	212c      	movs	r1, #44	; 0x2c
 8004f38:	fb01 f303 	mul.w	r3, r1, r3
 8004f3c:	4413      	add	r3, r2
 8004f3e:	3361      	adds	r3, #97	; 0x61
 8004f40:	2206      	movs	r2, #6
 8004f42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	4611      	mov	r1, r2
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f004 fc49 	bl	80097e6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004f54:	e331      	b.n	80055ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b20      	cmp	r3, #32
 8004f6a:	d12e      	bne.n	8004fca <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f78:	461a      	mov	r2, r3
 8004f7a:	2320      	movs	r3, #32
 8004f7c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	212c      	movs	r1, #44	; 0x2c
 8004f84:	fb01 f303 	mul.w	r3, r1, r3
 8004f88:	4413      	add	r3, r2
 8004f8a:	333d      	adds	r3, #61	; 0x3d
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	f040 8313 	bne.w	80055ba <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	212c      	movs	r1, #44	; 0x2c
 8004f9a:	fb01 f303 	mul.w	r3, r1, r3
 8004f9e:	4413      	add	r3, r2
 8004fa0:	333d      	adds	r3, #61	; 0x3d
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	212c      	movs	r1, #44	; 0x2c
 8004fac:	fb01 f303 	mul.w	r3, r1, r3
 8004fb0:	4413      	add	r3, r2
 8004fb2:	3360      	adds	r3, #96	; 0x60
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	b2d2      	uxtb	r2, r2
 8004fc0:	4611      	mov	r1, r2
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f004 fc0f 	bl	80097e6 <USB_HC_Halt>
}
 8004fc8:	e2f7      	b.n	80055ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fe0:	d112      	bne.n	8005008 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fee:	461a      	mov	r2, r3
 8004ff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ff4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	b2d2      	uxtb	r2, r2
 8004ffe:	4611      	mov	r1, r2
 8005000:	4618      	mov	r0, r3
 8005002:	f004 fbf0 	bl	80097e6 <USB_HC_Halt>
}
 8005006:	e2d8      	b.n	80055ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	4413      	add	r3, r2
 8005010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b01      	cmp	r3, #1
 800501c:	d140      	bne.n	80050a0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	212c      	movs	r1, #44	; 0x2c
 8005024:	fb01 f303 	mul.w	r3, r1, r3
 8005028:	4413      	add	r3, r2
 800502a:	335c      	adds	r3, #92	; 0x5c
 800502c:	2200      	movs	r2, #0
 800502e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	4413      	add	r3, r2
 8005038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005042:	2b40      	cmp	r3, #64	; 0x40
 8005044:	d111      	bne.n	800506a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	212c      	movs	r1, #44	; 0x2c
 800504c:	fb01 f303 	mul.w	r3, r1, r3
 8005050:	4413      	add	r3, r2
 8005052:	333d      	adds	r3, #61	; 0x3d
 8005054:	2201      	movs	r2, #1
 8005056:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	4413      	add	r3, r2
 8005060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005064:	461a      	mov	r2, r3
 8005066:	2340      	movs	r3, #64	; 0x40
 8005068:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	4413      	add	r3, r2
 8005072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005076:	461a      	mov	r2, r3
 8005078:	2301      	movs	r3, #1
 800507a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	212c      	movs	r1, #44	; 0x2c
 8005082:	fb01 f303 	mul.w	r3, r1, r3
 8005086:	4413      	add	r3, r2
 8005088:	3361      	adds	r3, #97	; 0x61
 800508a:	2201      	movs	r2, #1
 800508c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	b2d2      	uxtb	r2, r2
 8005096:	4611      	mov	r1, r2
 8005098:	4618      	mov	r0, r3
 800509a:	f004 fba4 	bl	80097e6 <USB_HC_Halt>
}
 800509e:	e28c      	b.n	80055ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b2:	2b40      	cmp	r3, #64	; 0x40
 80050b4:	d12c      	bne.n	8005110 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	212c      	movs	r1, #44	; 0x2c
 80050bc:	fb01 f303 	mul.w	r3, r1, r3
 80050c0:	4413      	add	r3, r2
 80050c2:	3361      	adds	r3, #97	; 0x61
 80050c4:	2204      	movs	r2, #4
 80050c6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	212c      	movs	r1, #44	; 0x2c
 80050ce:	fb01 f303 	mul.w	r3, r1, r3
 80050d2:	4413      	add	r3, r2
 80050d4:	333d      	adds	r3, #61	; 0x3d
 80050d6:	2201      	movs	r2, #1
 80050d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	212c      	movs	r1, #44	; 0x2c
 80050e0:	fb01 f303 	mul.w	r3, r1, r3
 80050e4:	4413      	add	r3, r2
 80050e6:	335c      	adds	r3, #92	; 0x5c
 80050e8:	2200      	movs	r2, #0
 80050ea:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	4611      	mov	r1, r2
 80050f6:	4618      	mov	r0, r3
 80050f8:	f004 fb75 	bl	80097e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	4413      	add	r3, r2
 8005104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005108:	461a      	mov	r2, r3
 800510a:	2340      	movs	r3, #64	; 0x40
 800510c:	6093      	str	r3, [r2, #8]
}
 800510e:	e254      	b.n	80055ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	4413      	add	r3, r2
 8005118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 0308 	and.w	r3, r3, #8
 8005122:	2b08      	cmp	r3, #8
 8005124:	d11a      	bne.n	800515c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	4413      	add	r3, r2
 800512e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005132:	461a      	mov	r2, r3
 8005134:	2308      	movs	r3, #8
 8005136:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	212c      	movs	r1, #44	; 0x2c
 800513e:	fb01 f303 	mul.w	r3, r1, r3
 8005142:	4413      	add	r3, r2
 8005144:	3361      	adds	r3, #97	; 0x61
 8005146:	2205      	movs	r2, #5
 8005148:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	b2d2      	uxtb	r2, r2
 8005152:	4611      	mov	r1, r2
 8005154:	4618      	mov	r0, r3
 8005156:	f004 fb46 	bl	80097e6 <USB_HC_Halt>
}
 800515a:	e22e      	b.n	80055ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	4413      	add	r3, r2
 8005164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 0310 	and.w	r3, r3, #16
 800516e:	2b10      	cmp	r3, #16
 8005170:	d140      	bne.n	80051f4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	212c      	movs	r1, #44	; 0x2c
 8005178:	fb01 f303 	mul.w	r3, r1, r3
 800517c:	4413      	add	r3, r2
 800517e:	335c      	adds	r3, #92	; 0x5c
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	212c      	movs	r1, #44	; 0x2c
 800518a:	fb01 f303 	mul.w	r3, r1, r3
 800518e:	4413      	add	r3, r2
 8005190:	3361      	adds	r3, #97	; 0x61
 8005192:	2203      	movs	r2, #3
 8005194:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	212c      	movs	r1, #44	; 0x2c
 800519c:	fb01 f303 	mul.w	r3, r1, r3
 80051a0:	4413      	add	r3, r2
 80051a2:	333d      	adds	r3, #61	; 0x3d
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d112      	bne.n	80051d0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	212c      	movs	r1, #44	; 0x2c
 80051b0:	fb01 f303 	mul.w	r3, r1, r3
 80051b4:	4413      	add	r3, r2
 80051b6:	333c      	adds	r3, #60	; 0x3c
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d108      	bne.n	80051d0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	212c      	movs	r1, #44	; 0x2c
 80051c4:	fb01 f303 	mul.w	r3, r1, r3
 80051c8:	4413      	add	r3, r2
 80051ca:	333d      	adds	r3, #61	; 0x3d
 80051cc:	2201      	movs	r2, #1
 80051ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	4611      	mov	r1, r2
 80051da:	4618      	mov	r0, r3
 80051dc:	f004 fb03 	bl	80097e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ec:	461a      	mov	r2, r3
 80051ee:	2310      	movs	r3, #16
 80051f0:	6093      	str	r3, [r2, #8]
}
 80051f2:	e1e2      	b.n	80055ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005206:	2b80      	cmp	r3, #128	; 0x80
 8005208:	d164      	bne.n	80052d4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d111      	bne.n	8005236 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	212c      	movs	r1, #44	; 0x2c
 8005218:	fb01 f303 	mul.w	r3, r1, r3
 800521c:	4413      	add	r3, r2
 800521e:	3361      	adds	r3, #97	; 0x61
 8005220:	2206      	movs	r2, #6
 8005222:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	4611      	mov	r1, r2
 800522e:	4618      	mov	r0, r3
 8005230:	f004 fad9 	bl	80097e6 <USB_HC_Halt>
 8005234:	e044      	b.n	80052c0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	212c      	movs	r1, #44	; 0x2c
 800523c:	fb01 f303 	mul.w	r3, r1, r3
 8005240:	4413      	add	r3, r2
 8005242:	335c      	adds	r3, #92	; 0x5c
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	1c5a      	adds	r2, r3, #1
 8005248:	6879      	ldr	r1, [r7, #4]
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	202c      	movs	r0, #44	; 0x2c
 800524e:	fb00 f303 	mul.w	r3, r0, r3
 8005252:	440b      	add	r3, r1
 8005254:	335c      	adds	r3, #92	; 0x5c
 8005256:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	212c      	movs	r1, #44	; 0x2c
 800525e:	fb01 f303 	mul.w	r3, r1, r3
 8005262:	4413      	add	r3, r2
 8005264:	335c      	adds	r3, #92	; 0x5c
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b02      	cmp	r3, #2
 800526a:	d920      	bls.n	80052ae <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	212c      	movs	r1, #44	; 0x2c
 8005272:	fb01 f303 	mul.w	r3, r1, r3
 8005276:	4413      	add	r3, r2
 8005278:	335c      	adds	r3, #92	; 0x5c
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	212c      	movs	r1, #44	; 0x2c
 8005284:	fb01 f303 	mul.w	r3, r1, r3
 8005288:	4413      	add	r3, r2
 800528a:	3360      	adds	r3, #96	; 0x60
 800528c:	2204      	movs	r2, #4
 800528e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	b2d9      	uxtb	r1, r3
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	202c      	movs	r0, #44	; 0x2c
 800529a:	fb00 f303 	mul.w	r3, r0, r3
 800529e:	4413      	add	r3, r2
 80052a0:	3360      	adds	r3, #96	; 0x60
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	461a      	mov	r2, r3
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f00e fd4c 	bl	8013d44 <HAL_HCD_HC_NotifyURBChange_Callback>
 80052ac:	e008      	b.n	80052c0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	212c      	movs	r1, #44	; 0x2c
 80052b4:	fb01 f303 	mul.w	r3, r1, r3
 80052b8:	4413      	add	r3, r2
 80052ba:	3360      	adds	r3, #96	; 0x60
 80052bc:	2202      	movs	r2, #2
 80052be:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052cc:	461a      	mov	r2, r3
 80052ce:	2380      	movs	r3, #128	; 0x80
 80052d0:	6093      	str	r3, [r2, #8]
}
 80052d2:	e172      	b.n	80055ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ea:	d11b      	bne.n	8005324 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	212c      	movs	r1, #44	; 0x2c
 80052f2:	fb01 f303 	mul.w	r3, r1, r3
 80052f6:	4413      	add	r3, r2
 80052f8:	3361      	adds	r3, #97	; 0x61
 80052fa:	2208      	movs	r2, #8
 80052fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	b2d2      	uxtb	r2, r2
 8005306:	4611      	mov	r1, r2
 8005308:	4618      	mov	r0, r3
 800530a:	f004 fa6c 	bl	80097e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	4413      	add	r3, r2
 8005316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800531a:	461a      	mov	r2, r3
 800531c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005320:	6093      	str	r3, [r2, #8]
}
 8005322:	e14a      	b.n	80055ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	4413      	add	r3, r2
 800532c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b02      	cmp	r3, #2
 8005338:	f040 813f 	bne.w	80055ba <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	212c      	movs	r1, #44	; 0x2c
 8005342:	fb01 f303 	mul.w	r3, r1, r3
 8005346:	4413      	add	r3, r2
 8005348:	3361      	adds	r3, #97	; 0x61
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d17d      	bne.n	800544c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	212c      	movs	r1, #44	; 0x2c
 8005356:	fb01 f303 	mul.w	r3, r1, r3
 800535a:	4413      	add	r3, r2
 800535c:	3360      	adds	r3, #96	; 0x60
 800535e:	2201      	movs	r2, #1
 8005360:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	212c      	movs	r1, #44	; 0x2c
 8005368:	fb01 f303 	mul.w	r3, r1, r3
 800536c:	4413      	add	r3, r2
 800536e:	333f      	adds	r3, #63	; 0x3f
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2b02      	cmp	r3, #2
 8005374:	d00a      	beq.n	800538c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	212c      	movs	r1, #44	; 0x2c
 800537c:	fb01 f303 	mul.w	r3, r1, r3
 8005380:	4413      	add	r3, r2
 8005382:	333f      	adds	r3, #63	; 0x3f
 8005384:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005386:	2b03      	cmp	r3, #3
 8005388:	f040 8100 	bne.w	800558c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d113      	bne.n	80053bc <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	212c      	movs	r1, #44	; 0x2c
 800539a:	fb01 f303 	mul.w	r3, r1, r3
 800539e:	4413      	add	r3, r2
 80053a0:	3355      	adds	r3, #85	; 0x55
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	f083 0301 	eor.w	r3, r3, #1
 80053a8:	b2d8      	uxtb	r0, r3
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	212c      	movs	r1, #44	; 0x2c
 80053b0:	fb01 f303 	mul.w	r3, r1, r3
 80053b4:	4413      	add	r3, r2
 80053b6:	3355      	adds	r3, #85	; 0x55
 80053b8:	4602      	mov	r2, r0
 80053ba:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	f040 80e3 	bne.w	800558c <HCD_HC_OUT_IRQHandler+0x69c>
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	212c      	movs	r1, #44	; 0x2c
 80053cc:	fb01 f303 	mul.w	r3, r1, r3
 80053d0:	4413      	add	r3, r2
 80053d2:	334c      	adds	r3, #76	; 0x4c
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 80d8 	beq.w	800558c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	212c      	movs	r1, #44	; 0x2c
 80053e2:	fb01 f303 	mul.w	r3, r1, r3
 80053e6:	4413      	add	r3, r2
 80053e8:	334c      	adds	r3, #76	; 0x4c
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6879      	ldr	r1, [r7, #4]
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	202c      	movs	r0, #44	; 0x2c
 80053f2:	fb00 f202 	mul.w	r2, r0, r2
 80053f6:	440a      	add	r2, r1
 80053f8:	3240      	adds	r2, #64	; 0x40
 80053fa:	8812      	ldrh	r2, [r2, #0]
 80053fc:	4413      	add	r3, r2
 80053fe:	3b01      	subs	r3, #1
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	202c      	movs	r0, #44	; 0x2c
 8005406:	fb00 f202 	mul.w	r2, r0, r2
 800540a:	440a      	add	r2, r1
 800540c:	3240      	adds	r2, #64	; 0x40
 800540e:	8812      	ldrh	r2, [r2, #0]
 8005410:	fbb3 f3f2 	udiv	r3, r3, r2
 8005414:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 80b5 	beq.w	800558c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	212c      	movs	r1, #44	; 0x2c
 8005428:	fb01 f303 	mul.w	r3, r1, r3
 800542c:	4413      	add	r3, r2
 800542e:	3355      	adds	r3, #85	; 0x55
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	f083 0301 	eor.w	r3, r3, #1
 8005436:	b2d8      	uxtb	r0, r3
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	212c      	movs	r1, #44	; 0x2c
 800543e:	fb01 f303 	mul.w	r3, r1, r3
 8005442:	4413      	add	r3, r2
 8005444:	3355      	adds	r3, #85	; 0x55
 8005446:	4602      	mov	r2, r0
 8005448:	701a      	strb	r2, [r3, #0]
 800544a:	e09f      	b.n	800558c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	212c      	movs	r1, #44	; 0x2c
 8005452:	fb01 f303 	mul.w	r3, r1, r3
 8005456:	4413      	add	r3, r2
 8005458:	3361      	adds	r3, #97	; 0x61
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	2b03      	cmp	r3, #3
 800545e:	d109      	bne.n	8005474 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	212c      	movs	r1, #44	; 0x2c
 8005466:	fb01 f303 	mul.w	r3, r1, r3
 800546a:	4413      	add	r3, r2
 800546c:	3360      	adds	r3, #96	; 0x60
 800546e:	2202      	movs	r2, #2
 8005470:	701a      	strb	r2, [r3, #0]
 8005472:	e08b      	b.n	800558c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	212c      	movs	r1, #44	; 0x2c
 800547a:	fb01 f303 	mul.w	r3, r1, r3
 800547e:	4413      	add	r3, r2
 8005480:	3361      	adds	r3, #97	; 0x61
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	2b04      	cmp	r3, #4
 8005486:	d109      	bne.n	800549c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	212c      	movs	r1, #44	; 0x2c
 800548e:	fb01 f303 	mul.w	r3, r1, r3
 8005492:	4413      	add	r3, r2
 8005494:	3360      	adds	r3, #96	; 0x60
 8005496:	2202      	movs	r2, #2
 8005498:	701a      	strb	r2, [r3, #0]
 800549a:	e077      	b.n	800558c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	212c      	movs	r1, #44	; 0x2c
 80054a2:	fb01 f303 	mul.w	r3, r1, r3
 80054a6:	4413      	add	r3, r2
 80054a8:	3361      	adds	r3, #97	; 0x61
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b05      	cmp	r3, #5
 80054ae:	d109      	bne.n	80054c4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	212c      	movs	r1, #44	; 0x2c
 80054b6:	fb01 f303 	mul.w	r3, r1, r3
 80054ba:	4413      	add	r3, r2
 80054bc:	3360      	adds	r3, #96	; 0x60
 80054be:	2205      	movs	r2, #5
 80054c0:	701a      	strb	r2, [r3, #0]
 80054c2:	e063      	b.n	800558c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	212c      	movs	r1, #44	; 0x2c
 80054ca:	fb01 f303 	mul.w	r3, r1, r3
 80054ce:	4413      	add	r3, r2
 80054d0:	3361      	adds	r3, #97	; 0x61
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	2b06      	cmp	r3, #6
 80054d6:	d009      	beq.n	80054ec <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	212c      	movs	r1, #44	; 0x2c
 80054de:	fb01 f303 	mul.w	r3, r1, r3
 80054e2:	4413      	add	r3, r2
 80054e4:	3361      	adds	r3, #97	; 0x61
 80054e6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	d14f      	bne.n	800558c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	212c      	movs	r1, #44	; 0x2c
 80054f2:	fb01 f303 	mul.w	r3, r1, r3
 80054f6:	4413      	add	r3, r2
 80054f8:	335c      	adds	r3, #92	; 0x5c
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	202c      	movs	r0, #44	; 0x2c
 8005504:	fb00 f303 	mul.w	r3, r0, r3
 8005508:	440b      	add	r3, r1
 800550a:	335c      	adds	r3, #92	; 0x5c
 800550c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	212c      	movs	r1, #44	; 0x2c
 8005514:	fb01 f303 	mul.w	r3, r1, r3
 8005518:	4413      	add	r3, r2
 800551a:	335c      	adds	r3, #92	; 0x5c
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b02      	cmp	r3, #2
 8005520:	d912      	bls.n	8005548 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	212c      	movs	r1, #44	; 0x2c
 8005528:	fb01 f303 	mul.w	r3, r1, r3
 800552c:	4413      	add	r3, r2
 800552e:	335c      	adds	r3, #92	; 0x5c
 8005530:	2200      	movs	r2, #0
 8005532:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	212c      	movs	r1, #44	; 0x2c
 800553a:	fb01 f303 	mul.w	r3, r1, r3
 800553e:	4413      	add	r3, r2
 8005540:	3360      	adds	r3, #96	; 0x60
 8005542:	2204      	movs	r2, #4
 8005544:	701a      	strb	r2, [r3, #0]
 8005546:	e021      	b.n	800558c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	212c      	movs	r1, #44	; 0x2c
 800554e:	fb01 f303 	mul.w	r3, r1, r3
 8005552:	4413      	add	r3, r2
 8005554:	3360      	adds	r3, #96	; 0x60
 8005556:	2202      	movs	r2, #2
 8005558:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	4413      	add	r3, r2
 8005562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005570:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005578:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	4413      	add	r3, r2
 8005582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005586:	461a      	mov	r2, r3
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	4413      	add	r3, r2
 8005594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005598:	461a      	mov	r2, r3
 800559a:	2302      	movs	r3, #2
 800559c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	b2d9      	uxtb	r1, r3
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	202c      	movs	r0, #44	; 0x2c
 80055a8:	fb00 f303 	mul.w	r3, r0, r3
 80055ac:	4413      	add	r3, r2
 80055ae:	3360      	adds	r3, #96	; 0x60
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	461a      	mov	r2, r3
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f00e fbc5 	bl	8013d44 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80055ba:	bf00      	nop
 80055bc:	3720      	adds	r7, #32
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b08a      	sub	sp, #40	; 0x28
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	f003 030f 	and.w	r3, r3, #15
 80055e2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	0c5b      	lsrs	r3, r3, #17
 80055e8:	f003 030f 	and.w	r3, r3, #15
 80055ec:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	091b      	lsrs	r3, r3, #4
 80055f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055f6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d004      	beq.n	8005608 <HCD_RXQLVL_IRQHandler+0x46>
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	2b05      	cmp	r3, #5
 8005602:	f000 80a9 	beq.w	8005758 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005606:	e0aa      	b.n	800575e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	2b00      	cmp	r3, #0
 800560c:	f000 80a6 	beq.w	800575c <HCD_RXQLVL_IRQHandler+0x19a>
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	212c      	movs	r1, #44	; 0x2c
 8005616:	fb01 f303 	mul.w	r3, r1, r3
 800561a:	4413      	add	r3, r2
 800561c:	3344      	adds	r3, #68	; 0x44
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 809b 	beq.w	800575c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	212c      	movs	r1, #44	; 0x2c
 800562c:	fb01 f303 	mul.w	r3, r1, r3
 8005630:	4413      	add	r3, r2
 8005632:	3350      	adds	r3, #80	; 0x50
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	441a      	add	r2, r3
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	202c      	movs	r0, #44	; 0x2c
 8005640:	fb00 f303 	mul.w	r3, r0, r3
 8005644:	440b      	add	r3, r1
 8005646:	334c      	adds	r3, #76	; 0x4c
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	429a      	cmp	r2, r3
 800564c:	d87a      	bhi.n	8005744 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6818      	ldr	r0, [r3, #0]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	212c      	movs	r1, #44	; 0x2c
 8005658:	fb01 f303 	mul.w	r3, r1, r3
 800565c:	4413      	add	r3, r2
 800565e:	3344      	adds	r3, #68	; 0x44
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	b292      	uxth	r2, r2
 8005666:	4619      	mov	r1, r3
 8005668:	f003 fc14 	bl	8008e94 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	212c      	movs	r1, #44	; 0x2c
 8005672:	fb01 f303 	mul.w	r3, r1, r3
 8005676:	4413      	add	r3, r2
 8005678:	3344      	adds	r3, #68	; 0x44
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	441a      	add	r2, r3
 8005680:	6879      	ldr	r1, [r7, #4]
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	202c      	movs	r0, #44	; 0x2c
 8005686:	fb00 f303 	mul.w	r3, r0, r3
 800568a:	440b      	add	r3, r1
 800568c:	3344      	adds	r3, #68	; 0x44
 800568e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	212c      	movs	r1, #44	; 0x2c
 8005696:	fb01 f303 	mul.w	r3, r1, r3
 800569a:	4413      	add	r3, r2
 800569c:	3350      	adds	r3, #80	; 0x50
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	441a      	add	r2, r3
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	202c      	movs	r0, #44	; 0x2c
 80056aa:	fb00 f303 	mul.w	r3, r0, r3
 80056ae:	440b      	add	r3, r1
 80056b0:	3350      	adds	r3, #80	; 0x50
 80056b2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	0cdb      	lsrs	r3, r3, #19
 80056c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056c8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	212c      	movs	r1, #44	; 0x2c
 80056d0:	fb01 f303 	mul.w	r3, r1, r3
 80056d4:	4413      	add	r3, r2
 80056d6:	3340      	adds	r3, #64	; 0x40
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	461a      	mov	r2, r3
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	4293      	cmp	r3, r2
 80056e0:	d13c      	bne.n	800575c <HCD_RXQLVL_IRQHandler+0x19a>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d039      	beq.n	800575c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056fe:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005706:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	4413      	add	r3, r2
 8005710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005714:	461a      	mov	r2, r3
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	212c      	movs	r1, #44	; 0x2c
 8005720:	fb01 f303 	mul.w	r3, r1, r3
 8005724:	4413      	add	r3, r2
 8005726:	3354      	adds	r3, #84	; 0x54
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	f083 0301 	eor.w	r3, r3, #1
 800572e:	b2d8      	uxtb	r0, r3
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	212c      	movs	r1, #44	; 0x2c
 8005736:	fb01 f303 	mul.w	r3, r1, r3
 800573a:	4413      	add	r3, r2
 800573c:	3354      	adds	r3, #84	; 0x54
 800573e:	4602      	mov	r2, r0
 8005740:	701a      	strb	r2, [r3, #0]
      break;
 8005742:	e00b      	b.n	800575c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	212c      	movs	r1, #44	; 0x2c
 800574a:	fb01 f303 	mul.w	r3, r1, r3
 800574e:	4413      	add	r3, r2
 8005750:	3360      	adds	r3, #96	; 0x60
 8005752:	2204      	movs	r2, #4
 8005754:	701a      	strb	r2, [r3, #0]
      break;
 8005756:	e001      	b.n	800575c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005758:	bf00      	nop
 800575a:	e000      	b.n	800575e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800575c:	bf00      	nop
  }
}
 800575e:	bf00      	nop
 8005760:	3728      	adds	r7, #40	; 0x28
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b086      	sub	sp, #24
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005792:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b02      	cmp	r3, #2
 800579c:	d10b      	bne.n	80057b6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d102      	bne.n	80057ae <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f00e faaf 	bl	8013d0c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f043 0302 	orr.w	r3, r3, #2
 80057b4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f003 0308 	and.w	r3, r3, #8
 80057bc:	2b08      	cmp	r3, #8
 80057be:	d132      	bne.n	8005826 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	f043 0308 	orr.w	r3, r3, #8
 80057c6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f003 0304 	and.w	r3, r3, #4
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	d126      	bne.n	8005820 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d113      	bne.n	8005802 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80057e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057e4:	d106      	bne.n	80057f4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2102      	movs	r1, #2
 80057ec:	4618      	mov	r0, r3
 80057ee:	f003 fcbf 	bl	8009170 <USB_InitFSLSPClkSel>
 80057f2:	e011      	b.n	8005818 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2101      	movs	r1, #1
 80057fa:	4618      	mov	r0, r3
 80057fc:	f003 fcb8 	bl	8009170 <USB_InitFSLSPClkSel>
 8005800:	e00a      	b.n	8005818 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d106      	bne.n	8005818 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005810:	461a      	mov	r2, r3
 8005812:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005816:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f00e faa5 	bl	8013d68 <HAL_HCD_PortEnabled_Callback>
 800581e:	e002      	b.n	8005826 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f00e faaf 	bl	8013d84 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f003 0320 	and.w	r3, r3, #32
 800582c:	2b20      	cmp	r3, #32
 800582e:	d103      	bne.n	8005838 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f043 0320 	orr.w	r3, r3, #32
 8005836:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800583e:	461a      	mov	r2, r3
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	6013      	str	r3, [r2, #0]
}
 8005844:	bf00      	nop
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b086      	sub	sp, #24
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e267      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d075      	beq.n	8005956 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800586a:	4b88      	ldr	r3, [pc, #544]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f003 030c 	and.w	r3, r3, #12
 8005872:	2b04      	cmp	r3, #4
 8005874:	d00c      	beq.n	8005890 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005876:	4b85      	ldr	r3, [pc, #532]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800587e:	2b08      	cmp	r3, #8
 8005880:	d112      	bne.n	80058a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005882:	4b82      	ldr	r3, [pc, #520]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800588a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800588e:	d10b      	bne.n	80058a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005890:	4b7e      	ldr	r3, [pc, #504]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d05b      	beq.n	8005954 <HAL_RCC_OscConfig+0x108>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d157      	bne.n	8005954 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e242      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b0:	d106      	bne.n	80058c0 <HAL_RCC_OscConfig+0x74>
 80058b2:	4b76      	ldr	r3, [pc, #472]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a75      	ldr	r2, [pc, #468]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 80058b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058bc:	6013      	str	r3, [r2, #0]
 80058be:	e01d      	b.n	80058fc <HAL_RCC_OscConfig+0xb0>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058c8:	d10c      	bne.n	80058e4 <HAL_RCC_OscConfig+0x98>
 80058ca:	4b70      	ldr	r3, [pc, #448]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a6f      	ldr	r2, [pc, #444]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 80058d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058d4:	6013      	str	r3, [r2, #0]
 80058d6:	4b6d      	ldr	r3, [pc, #436]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a6c      	ldr	r2, [pc, #432]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 80058dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	e00b      	b.n	80058fc <HAL_RCC_OscConfig+0xb0>
 80058e4:	4b69      	ldr	r3, [pc, #420]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a68      	ldr	r2, [pc, #416]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 80058ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ee:	6013      	str	r3, [r2, #0]
 80058f0:	4b66      	ldr	r3, [pc, #408]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a65      	ldr	r2, [pc, #404]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 80058f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d013      	beq.n	800592c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005904:	f7fd fa7c 	bl	8002e00 <HAL_GetTick>
 8005908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800590a:	e008      	b.n	800591e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800590c:	f7fd fa78 	bl	8002e00 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b64      	cmp	r3, #100	; 0x64
 8005918:	d901      	bls.n	800591e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e207      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800591e:	4b5b      	ldr	r3, [pc, #364]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d0f0      	beq.n	800590c <HAL_RCC_OscConfig+0xc0>
 800592a:	e014      	b.n	8005956 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800592c:	f7fd fa68 	bl	8002e00 <HAL_GetTick>
 8005930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005932:	e008      	b.n	8005946 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005934:	f7fd fa64 	bl	8002e00 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b64      	cmp	r3, #100	; 0x64
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e1f3      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005946:	4b51      	ldr	r3, [pc, #324]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1f0      	bne.n	8005934 <HAL_RCC_OscConfig+0xe8>
 8005952:	e000      	b.n	8005956 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d063      	beq.n	8005a2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005962:	4b4a      	ldr	r3, [pc, #296]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 030c 	and.w	r3, r3, #12
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00b      	beq.n	8005986 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800596e:	4b47      	ldr	r3, [pc, #284]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005976:	2b08      	cmp	r3, #8
 8005978:	d11c      	bne.n	80059b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800597a:	4b44      	ldr	r3, [pc, #272]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d116      	bne.n	80059b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005986:	4b41      	ldr	r3, [pc, #260]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d005      	beq.n	800599e <HAL_RCC_OscConfig+0x152>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d001      	beq.n	800599e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e1c7      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800599e:	4b3b      	ldr	r3, [pc, #236]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	00db      	lsls	r3, r3, #3
 80059ac:	4937      	ldr	r1, [pc, #220]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059b2:	e03a      	b.n	8005a2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d020      	beq.n	80059fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059bc:	4b34      	ldr	r3, [pc, #208]	; (8005a90 <HAL_RCC_OscConfig+0x244>)
 80059be:	2201      	movs	r2, #1
 80059c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c2:	f7fd fa1d 	bl	8002e00 <HAL_GetTick>
 80059c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059c8:	e008      	b.n	80059dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059ca:	f7fd fa19 	bl	8002e00 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d901      	bls.n	80059dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e1a8      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059dc:	4b2b      	ldr	r3, [pc, #172]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0f0      	beq.n	80059ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059e8:	4b28      	ldr	r3, [pc, #160]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	4925      	ldr	r1, [pc, #148]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	600b      	str	r3, [r1, #0]
 80059fc:	e015      	b.n	8005a2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059fe:	4b24      	ldr	r3, [pc, #144]	; (8005a90 <HAL_RCC_OscConfig+0x244>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a04:	f7fd f9fc 	bl	8002e00 <HAL_GetTick>
 8005a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a0a:	e008      	b.n	8005a1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a0c:	f7fd f9f8 	bl	8002e00 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e187      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a1e:	4b1b      	ldr	r3, [pc, #108]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1f0      	bne.n	8005a0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0308 	and.w	r3, r3, #8
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d036      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d016      	beq.n	8005a6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a3e:	4b15      	ldr	r3, [pc, #84]	; (8005a94 <HAL_RCC_OscConfig+0x248>)
 8005a40:	2201      	movs	r2, #1
 8005a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a44:	f7fd f9dc 	bl	8002e00 <HAL_GetTick>
 8005a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a4a:	e008      	b.n	8005a5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a4c:	f7fd f9d8 	bl	8002e00 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e167      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a5e:	4b0b      	ldr	r3, [pc, #44]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 8005a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d0f0      	beq.n	8005a4c <HAL_RCC_OscConfig+0x200>
 8005a6a:	e01b      	b.n	8005aa4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a6c:	4b09      	ldr	r3, [pc, #36]	; (8005a94 <HAL_RCC_OscConfig+0x248>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a72:	f7fd f9c5 	bl	8002e00 <HAL_GetTick>
 8005a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a78:	e00e      	b.n	8005a98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a7a:	f7fd f9c1 	bl	8002e00 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d907      	bls.n	8005a98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e150      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
 8005a8c:	40023800 	.word	0x40023800
 8005a90:	42470000 	.word	0x42470000
 8005a94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a98:	4b88      	ldr	r3, [pc, #544]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1ea      	bne.n	8005a7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f000 8097 	beq.w	8005be0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ab6:	4b81      	ldr	r3, [pc, #516]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10f      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60bb      	str	r3, [r7, #8]
 8005ac6:	4b7d      	ldr	r3, [pc, #500]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aca:	4a7c      	ldr	r2, [pc, #496]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ad2:	4b7a      	ldr	r3, [pc, #488]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ada:	60bb      	str	r3, [r7, #8]
 8005adc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ae2:	4b77      	ldr	r3, [pc, #476]	; (8005cc0 <HAL_RCC_OscConfig+0x474>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d118      	bne.n	8005b20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005aee:	4b74      	ldr	r3, [pc, #464]	; (8005cc0 <HAL_RCC_OscConfig+0x474>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a73      	ldr	r2, [pc, #460]	; (8005cc0 <HAL_RCC_OscConfig+0x474>)
 8005af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005af8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005afa:	f7fd f981 	bl	8002e00 <HAL_GetTick>
 8005afe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b00:	e008      	b.n	8005b14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b02:	f7fd f97d 	bl	8002e00 <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e10c      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b14:	4b6a      	ldr	r3, [pc, #424]	; (8005cc0 <HAL_RCC_OscConfig+0x474>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0f0      	beq.n	8005b02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d106      	bne.n	8005b36 <HAL_RCC_OscConfig+0x2ea>
 8005b28:	4b64      	ldr	r3, [pc, #400]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2c:	4a63      	ldr	r2, [pc, #396]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b2e:	f043 0301 	orr.w	r3, r3, #1
 8005b32:	6713      	str	r3, [r2, #112]	; 0x70
 8005b34:	e01c      	b.n	8005b70 <HAL_RCC_OscConfig+0x324>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	2b05      	cmp	r3, #5
 8005b3c:	d10c      	bne.n	8005b58 <HAL_RCC_OscConfig+0x30c>
 8005b3e:	4b5f      	ldr	r3, [pc, #380]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b42:	4a5e      	ldr	r2, [pc, #376]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b44:	f043 0304 	orr.w	r3, r3, #4
 8005b48:	6713      	str	r3, [r2, #112]	; 0x70
 8005b4a:	4b5c      	ldr	r3, [pc, #368]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4e:	4a5b      	ldr	r2, [pc, #364]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b50:	f043 0301 	orr.w	r3, r3, #1
 8005b54:	6713      	str	r3, [r2, #112]	; 0x70
 8005b56:	e00b      	b.n	8005b70 <HAL_RCC_OscConfig+0x324>
 8005b58:	4b58      	ldr	r3, [pc, #352]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5c:	4a57      	ldr	r2, [pc, #348]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b5e:	f023 0301 	bic.w	r3, r3, #1
 8005b62:	6713      	str	r3, [r2, #112]	; 0x70
 8005b64:	4b55      	ldr	r3, [pc, #340]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b68:	4a54      	ldr	r2, [pc, #336]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b6a:	f023 0304 	bic.w	r3, r3, #4
 8005b6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d015      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b78:	f7fd f942 	bl	8002e00 <HAL_GetTick>
 8005b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b7e:	e00a      	b.n	8005b96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b80:	f7fd f93e 	bl	8002e00 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e0cb      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b96:	4b49      	ldr	r3, [pc, #292]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d0ee      	beq.n	8005b80 <HAL_RCC_OscConfig+0x334>
 8005ba2:	e014      	b.n	8005bce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ba4:	f7fd f92c 	bl	8002e00 <HAL_GetTick>
 8005ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005baa:	e00a      	b.n	8005bc2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bac:	f7fd f928 	bl	8002e00 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e0b5      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bc2:	4b3e      	ldr	r3, [pc, #248]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1ee      	bne.n	8005bac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bce:	7dfb      	ldrb	r3, [r7, #23]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d105      	bne.n	8005be0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bd4:	4b39      	ldr	r3, [pc, #228]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd8:	4a38      	ldr	r2, [pc, #224]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bde:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 80a1 	beq.w	8005d2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bea:	4b34      	ldr	r3, [pc, #208]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f003 030c 	and.w	r3, r3, #12
 8005bf2:	2b08      	cmp	r3, #8
 8005bf4:	d05c      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d141      	bne.n	8005c82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bfe:	4b31      	ldr	r3, [pc, #196]	; (8005cc4 <HAL_RCC_OscConfig+0x478>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c04:	f7fd f8fc 	bl	8002e00 <HAL_GetTick>
 8005c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c0a:	e008      	b.n	8005c1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c0c:	f7fd f8f8 	bl	8002e00 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e087      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c1e:	4b27      	ldr	r3, [pc, #156]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1f0      	bne.n	8005c0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	69da      	ldr	r2, [r3, #28]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	431a      	orrs	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c38:	019b      	lsls	r3, r3, #6
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c40:	085b      	lsrs	r3, r3, #1
 8005c42:	3b01      	subs	r3, #1
 8005c44:	041b      	lsls	r3, r3, #16
 8005c46:	431a      	orrs	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4c:	061b      	lsls	r3, r3, #24
 8005c4e:	491b      	ldr	r1, [pc, #108]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c54:	4b1b      	ldr	r3, [pc, #108]	; (8005cc4 <HAL_RCC_OscConfig+0x478>)
 8005c56:	2201      	movs	r2, #1
 8005c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c5a:	f7fd f8d1 	bl	8002e00 <HAL_GetTick>
 8005c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c60:	e008      	b.n	8005c74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c62:	f7fd f8cd 	bl	8002e00 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d901      	bls.n	8005c74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e05c      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c74:	4b11      	ldr	r3, [pc, #68]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d0f0      	beq.n	8005c62 <HAL_RCC_OscConfig+0x416>
 8005c80:	e054      	b.n	8005d2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c82:	4b10      	ldr	r3, [pc, #64]	; (8005cc4 <HAL_RCC_OscConfig+0x478>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c88:	f7fd f8ba 	bl	8002e00 <HAL_GetTick>
 8005c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c8e:	e008      	b.n	8005ca2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c90:	f7fd f8b6 	bl	8002e00 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d901      	bls.n	8005ca2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e045      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ca2:	4b06      	ldr	r3, [pc, #24]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1f0      	bne.n	8005c90 <HAL_RCC_OscConfig+0x444>
 8005cae:	e03d      	b.n	8005d2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d107      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e038      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
 8005cbc:	40023800 	.word	0x40023800
 8005cc0:	40007000 	.word	0x40007000
 8005cc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005cc8:	4b1b      	ldr	r3, [pc, #108]	; (8005d38 <HAL_RCC_OscConfig+0x4ec>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d028      	beq.n	8005d28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d121      	bne.n	8005d28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d11a      	bne.n	8005d28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005cfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d111      	bne.n	8005d28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0e:	085b      	lsrs	r3, r3, #1
 8005d10:	3b01      	subs	r3, #1
 8005d12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d107      	bne.n	8005d28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d001      	beq.n	8005d2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e000      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	40023800 	.word	0x40023800

08005d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e0cc      	b.n	8005eea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d50:	4b68      	ldr	r3, [pc, #416]	; (8005ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d90c      	bls.n	8005d78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d5e:	4b65      	ldr	r3, [pc, #404]	; (8005ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d66:	4b63      	ldr	r3, [pc, #396]	; (8005ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0307 	and.w	r3, r3, #7
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d001      	beq.n	8005d78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e0b8      	b.n	8005eea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d020      	beq.n	8005dc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0304 	and.w	r3, r3, #4
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d005      	beq.n	8005d9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d90:	4b59      	ldr	r3, [pc, #356]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	4a58      	ldr	r2, [pc, #352]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0308 	and.w	r3, r3, #8
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d005      	beq.n	8005db4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005da8:	4b53      	ldr	r3, [pc, #332]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	4a52      	ldr	r2, [pc, #328]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005db2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005db4:	4b50      	ldr	r3, [pc, #320]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	494d      	ldr	r1, [pc, #308]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d044      	beq.n	8005e5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d107      	bne.n	8005dea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dda:	4b47      	ldr	r3, [pc, #284]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d119      	bne.n	8005e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e07f      	b.n	8005eea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d003      	beq.n	8005dfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005df6:	2b03      	cmp	r3, #3
 8005df8:	d107      	bne.n	8005e0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dfa:	4b3f      	ldr	r3, [pc, #252]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d109      	bne.n	8005e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e06f      	b.n	8005eea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e0a:	4b3b      	ldr	r3, [pc, #236]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e067      	b.n	8005eea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e1a:	4b37      	ldr	r3, [pc, #220]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f023 0203 	bic.w	r2, r3, #3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	4934      	ldr	r1, [pc, #208]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e2c:	f7fc ffe8 	bl	8002e00 <HAL_GetTick>
 8005e30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e32:	e00a      	b.n	8005e4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e34:	f7fc ffe4 	bl	8002e00 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e04f      	b.n	8005eea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e4a:	4b2b      	ldr	r3, [pc, #172]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f003 020c 	and.w	r2, r3, #12
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d1eb      	bne.n	8005e34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e5c:	4b25      	ldr	r3, [pc, #148]	; (8005ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0307 	and.w	r3, r3, #7
 8005e64:	683a      	ldr	r2, [r7, #0]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d20c      	bcs.n	8005e84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e6a:	4b22      	ldr	r3, [pc, #136]	; (8005ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	b2d2      	uxtb	r2, r2
 8005e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e72:	4b20      	ldr	r3, [pc, #128]	; (8005ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d001      	beq.n	8005e84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e032      	b.n	8005eea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0304 	and.w	r3, r3, #4
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d008      	beq.n	8005ea2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e90:	4b19      	ldr	r3, [pc, #100]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	4916      	ldr	r1, [pc, #88]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0308 	and.w	r3, r3, #8
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d009      	beq.n	8005ec2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005eae:	4b12      	ldr	r3, [pc, #72]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	490e      	ldr	r1, [pc, #56]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ec2:	f000 f821 	bl	8005f08 <HAL_RCC_GetSysClockFreq>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	4b0b      	ldr	r3, [pc, #44]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	091b      	lsrs	r3, r3, #4
 8005ece:	f003 030f 	and.w	r3, r3, #15
 8005ed2:	490a      	ldr	r1, [pc, #40]	; (8005efc <HAL_RCC_ClockConfig+0x1c0>)
 8005ed4:	5ccb      	ldrb	r3, [r1, r3]
 8005ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eda:	4a09      	ldr	r2, [pc, #36]	; (8005f00 <HAL_RCC_ClockConfig+0x1c4>)
 8005edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ede:	4b09      	ldr	r3, [pc, #36]	; (8005f04 <HAL_RCC_ClockConfig+0x1c8>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fc fcd0 	bl	8002888 <HAL_InitTick>

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	40023c00 	.word	0x40023c00
 8005ef8:	40023800 	.word	0x40023800
 8005efc:	08016f68 	.word	0x08016f68
 8005f00:	20000234 	.word	0x20000234
 8005f04:	20000238 	.word	0x20000238

08005f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f0c:	b090      	sub	sp, #64	; 0x40
 8005f0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	637b      	str	r3, [r7, #52]	; 0x34
 8005f14:	2300      	movs	r3, #0
 8005f16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f18:	2300      	movs	r3, #0
 8005f1a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f20:	4b59      	ldr	r3, [pc, #356]	; (8006088 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f003 030c 	and.w	r3, r3, #12
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	d00d      	beq.n	8005f48 <HAL_RCC_GetSysClockFreq+0x40>
 8005f2c:	2b08      	cmp	r3, #8
 8005f2e:	f200 80a1 	bhi.w	8006074 <HAL_RCC_GetSysClockFreq+0x16c>
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <HAL_RCC_GetSysClockFreq+0x34>
 8005f36:	2b04      	cmp	r3, #4
 8005f38:	d003      	beq.n	8005f42 <HAL_RCC_GetSysClockFreq+0x3a>
 8005f3a:	e09b      	b.n	8006074 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f3c:	4b53      	ldr	r3, [pc, #332]	; (800608c <HAL_RCC_GetSysClockFreq+0x184>)
 8005f3e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005f40:	e09b      	b.n	800607a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f42:	4b53      	ldr	r3, [pc, #332]	; (8006090 <HAL_RCC_GetSysClockFreq+0x188>)
 8005f44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005f46:	e098      	b.n	800607a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f48:	4b4f      	ldr	r3, [pc, #316]	; (8006088 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f50:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f52:	4b4d      	ldr	r3, [pc, #308]	; (8006088 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d028      	beq.n	8005fb0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f5e:	4b4a      	ldr	r3, [pc, #296]	; (8006088 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	099b      	lsrs	r3, r3, #6
 8005f64:	2200      	movs	r2, #0
 8005f66:	623b      	str	r3, [r7, #32]
 8005f68:	627a      	str	r2, [r7, #36]	; 0x24
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005f70:	2100      	movs	r1, #0
 8005f72:	4b47      	ldr	r3, [pc, #284]	; (8006090 <HAL_RCC_GetSysClockFreq+0x188>)
 8005f74:	fb03 f201 	mul.w	r2, r3, r1
 8005f78:	2300      	movs	r3, #0
 8005f7a:	fb00 f303 	mul.w	r3, r0, r3
 8005f7e:	4413      	add	r3, r2
 8005f80:	4a43      	ldr	r2, [pc, #268]	; (8006090 <HAL_RCC_GetSysClockFreq+0x188>)
 8005f82:	fba0 1202 	umull	r1, r2, r0, r2
 8005f86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f88:	460a      	mov	r2, r1
 8005f8a:	62ba      	str	r2, [r7, #40]	; 0x28
 8005f8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f8e:	4413      	add	r3, r2
 8005f90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f94:	2200      	movs	r2, #0
 8005f96:	61bb      	str	r3, [r7, #24]
 8005f98:	61fa      	str	r2, [r7, #28]
 8005f9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005fa2:	f7fa f97d 	bl	80002a0 <__aeabi_uldivmod>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4613      	mov	r3, r2
 8005fac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fae:	e053      	b.n	8006058 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fb0:	4b35      	ldr	r3, [pc, #212]	; (8006088 <HAL_RCC_GetSysClockFreq+0x180>)
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	099b      	lsrs	r3, r3, #6
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	613b      	str	r3, [r7, #16]
 8005fba:	617a      	str	r2, [r7, #20]
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005fc2:	f04f 0b00 	mov.w	fp, #0
 8005fc6:	4652      	mov	r2, sl
 8005fc8:	465b      	mov	r3, fp
 8005fca:	f04f 0000 	mov.w	r0, #0
 8005fce:	f04f 0100 	mov.w	r1, #0
 8005fd2:	0159      	lsls	r1, r3, #5
 8005fd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fd8:	0150      	lsls	r0, r2, #5
 8005fda:	4602      	mov	r2, r0
 8005fdc:	460b      	mov	r3, r1
 8005fde:	ebb2 080a 	subs.w	r8, r2, sl
 8005fe2:	eb63 090b 	sbc.w	r9, r3, fp
 8005fe6:	f04f 0200 	mov.w	r2, #0
 8005fea:	f04f 0300 	mov.w	r3, #0
 8005fee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005ff2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005ff6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005ffa:	ebb2 0408 	subs.w	r4, r2, r8
 8005ffe:	eb63 0509 	sbc.w	r5, r3, r9
 8006002:	f04f 0200 	mov.w	r2, #0
 8006006:	f04f 0300 	mov.w	r3, #0
 800600a:	00eb      	lsls	r3, r5, #3
 800600c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006010:	00e2      	lsls	r2, r4, #3
 8006012:	4614      	mov	r4, r2
 8006014:	461d      	mov	r5, r3
 8006016:	eb14 030a 	adds.w	r3, r4, sl
 800601a:	603b      	str	r3, [r7, #0]
 800601c:	eb45 030b 	adc.w	r3, r5, fp
 8006020:	607b      	str	r3, [r7, #4]
 8006022:	f04f 0200 	mov.w	r2, #0
 8006026:	f04f 0300 	mov.w	r3, #0
 800602a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800602e:	4629      	mov	r1, r5
 8006030:	028b      	lsls	r3, r1, #10
 8006032:	4621      	mov	r1, r4
 8006034:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006038:	4621      	mov	r1, r4
 800603a:	028a      	lsls	r2, r1, #10
 800603c:	4610      	mov	r0, r2
 800603e:	4619      	mov	r1, r3
 8006040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006042:	2200      	movs	r2, #0
 8006044:	60bb      	str	r3, [r7, #8]
 8006046:	60fa      	str	r2, [r7, #12]
 8006048:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800604c:	f7fa f928 	bl	80002a0 <__aeabi_uldivmod>
 8006050:	4602      	mov	r2, r0
 8006052:	460b      	mov	r3, r1
 8006054:	4613      	mov	r3, r2
 8006056:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006058:	4b0b      	ldr	r3, [pc, #44]	; (8006088 <HAL_RCC_GetSysClockFreq+0x180>)
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	0c1b      	lsrs	r3, r3, #16
 800605e:	f003 0303 	and.w	r3, r3, #3
 8006062:	3301      	adds	r3, #1
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006068:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800606a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006070:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006072:	e002      	b.n	800607a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006074:	4b05      	ldr	r3, [pc, #20]	; (800608c <HAL_RCC_GetSysClockFreq+0x184>)
 8006076:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006078:	bf00      	nop
    }
  }
  return sysclockfreq;
 800607a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800607c:	4618      	mov	r0, r3
 800607e:	3740      	adds	r7, #64	; 0x40
 8006080:	46bd      	mov	sp, r7
 8006082:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006086:	bf00      	nop
 8006088:	40023800 	.word	0x40023800
 800608c:	00f42400 	.word	0x00f42400
 8006090:	017d7840 	.word	0x017d7840

08006094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006094:	b480      	push	{r7}
 8006096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006098:	4b03      	ldr	r3, [pc, #12]	; (80060a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800609a:	681b      	ldr	r3, [r3, #0]
}
 800609c:	4618      	mov	r0, r3
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	20000234 	.word	0x20000234

080060ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80060b0:	f7ff fff0 	bl	8006094 <HAL_RCC_GetHCLKFreq>
 80060b4:	4602      	mov	r2, r0
 80060b6:	4b05      	ldr	r3, [pc, #20]	; (80060cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	0a9b      	lsrs	r3, r3, #10
 80060bc:	f003 0307 	and.w	r3, r3, #7
 80060c0:	4903      	ldr	r1, [pc, #12]	; (80060d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060c2:	5ccb      	ldrb	r3, [r1, r3]
 80060c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	40023800 	.word	0x40023800
 80060d0:	08016f78 	.word	0x08016f78

080060d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80060d8:	f7ff ffdc 	bl	8006094 <HAL_RCC_GetHCLKFreq>
 80060dc:	4602      	mov	r2, r0
 80060de:	4b05      	ldr	r3, [pc, #20]	; (80060f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	0b5b      	lsrs	r3, r3, #13
 80060e4:	f003 0307 	and.w	r3, r3, #7
 80060e8:	4903      	ldr	r1, [pc, #12]	; (80060f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060ea:	5ccb      	ldrb	r3, [r1, r3]
 80060ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	40023800 	.word	0x40023800
 80060f8:	08016f78 	.word	0x08016f78

080060fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	220f      	movs	r2, #15
 800610a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800610c:	4b12      	ldr	r3, [pc, #72]	; (8006158 <HAL_RCC_GetClockConfig+0x5c>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f003 0203 	and.w	r2, r3, #3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006118:	4b0f      	ldr	r3, [pc, #60]	; (8006158 <HAL_RCC_GetClockConfig+0x5c>)
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006124:	4b0c      	ldr	r3, [pc, #48]	; (8006158 <HAL_RCC_GetClockConfig+0x5c>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006130:	4b09      	ldr	r3, [pc, #36]	; (8006158 <HAL_RCC_GetClockConfig+0x5c>)
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	08db      	lsrs	r3, r3, #3
 8006136:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800613e:	4b07      	ldr	r3, [pc, #28]	; (800615c <HAL_RCC_GetClockConfig+0x60>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0207 	and.w	r2, r3, #7
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	601a      	str	r2, [r3, #0]
}
 800614a:	bf00      	nop
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	40023800 	.word	0x40023800
 800615c:	40023c00 	.word	0x40023c00

08006160 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800616c:	2300      	movs	r3, #0
 800616e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d105      	bne.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006184:	2b00      	cmp	r3, #0
 8006186:	d035      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006188:	4b62      	ldr	r3, [pc, #392]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800618a:	2200      	movs	r2, #0
 800618c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800618e:	f7fc fe37 	bl	8002e00 <HAL_GetTick>
 8006192:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006194:	e008      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006196:	f7fc fe33 	bl	8002e00 <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d901      	bls.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e0b0      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061a8:	4b5b      	ldr	r3, [pc, #364]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1f0      	bne.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	019a      	lsls	r2, r3, #6
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	071b      	lsls	r3, r3, #28
 80061c0:	4955      	ldr	r1, [pc, #340]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80061c8:	4b52      	ldr	r3, [pc, #328]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80061ca:	2201      	movs	r2, #1
 80061cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80061ce:	f7fc fe17 	bl	8002e00 <HAL_GetTick>
 80061d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061d4:	e008      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80061d6:	f7fc fe13 	bl	8002e00 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d901      	bls.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e090      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061e8:	4b4b      	ldr	r3, [pc, #300]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d0f0      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 8083 	beq.w	8006308 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006202:	2300      	movs	r3, #0
 8006204:	60fb      	str	r3, [r7, #12]
 8006206:	4b44      	ldr	r3, [pc, #272]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620a:	4a43      	ldr	r2, [pc, #268]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800620c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006210:	6413      	str	r3, [r2, #64]	; 0x40
 8006212:	4b41      	ldr	r3, [pc, #260]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800621e:	4b3f      	ldr	r3, [pc, #252]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a3e      	ldr	r2, [pc, #248]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006228:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800622a:	f7fc fde9 	bl	8002e00 <HAL_GetTick>
 800622e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006230:	e008      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006232:	f7fc fde5 	bl	8002e00 <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b02      	cmp	r3, #2
 800623e:	d901      	bls.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e062      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006244:	4b35      	ldr	r3, [pc, #212]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800624c:	2b00      	cmp	r3, #0
 800624e:	d0f0      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006250:	4b31      	ldr	r3, [pc, #196]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006254:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006258:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d02f      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	429a      	cmp	r2, r3
 800626c:	d028      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800626e:	4b2a      	ldr	r3, [pc, #168]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006276:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006278:	4b29      	ldr	r3, [pc, #164]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800627a:	2201      	movs	r2, #1
 800627c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800627e:	4b28      	ldr	r3, [pc, #160]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006280:	2200      	movs	r2, #0
 8006282:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006284:	4a24      	ldr	r2, [pc, #144]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800628a:	4b23      	ldr	r3, [pc, #140]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800628c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b01      	cmp	r3, #1
 8006294:	d114      	bne.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006296:	f7fc fdb3 	bl	8002e00 <HAL_GetTick>
 800629a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800629c:	e00a      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800629e:	f7fc fdaf 	bl	8002e00 <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d901      	bls.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e02a      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062b4:	4b18      	ldr	r3, [pc, #96]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d0ee      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062cc:	d10d      	bne.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80062ce:	4b12      	ldr	r3, [pc, #72]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80062de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062e2:	490d      	ldr	r1, [pc, #52]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	608b      	str	r3, [r1, #8]
 80062e8:	e005      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80062ea:	4b0b      	ldr	r3, [pc, #44]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	4a0a      	ldr	r2, [pc, #40]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062f0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80062f4:	6093      	str	r3, [r2, #8]
 80062f6:	4b08      	ldr	r3, [pc, #32]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006302:	4905      	ldr	r1, [pc, #20]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006304:	4313      	orrs	r3, r2
 8006306:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3718      	adds	r7, #24
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	42470068 	.word	0x42470068
 8006318:	40023800 	.word	0x40023800
 800631c:	40007000 	.word	0x40007000
 8006320:	42470e40 	.word	0x42470e40

08006324 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e066      	b.n	8006408 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	7f5b      	ldrb	r3, [r3, #29]
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b00      	cmp	r3, #0
 8006342:	d105      	bne.n	8006350 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f7fc f97a 	bl	8002644 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2202      	movs	r2, #2
 8006354:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	22ca      	movs	r2, #202	; 0xca
 800635c:	625a      	str	r2, [r3, #36]	; 0x24
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2253      	movs	r2, #83	; 0x53
 8006364:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fa45 	bl	80067f6 <RTC_EnterInitMode>
 800636c:	4603      	mov	r3, r0
 800636e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006370:	7bfb      	ldrb	r3, [r7, #15]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d12c      	bne.n	80063d0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6812      	ldr	r2, [r2, #0]
 8006380:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006388:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	6899      	ldr	r1, [r3, #8]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	431a      	orrs	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	431a      	orrs	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	430a      	orrs	r2, r1
 80063a6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	68d2      	ldr	r2, [r2, #12]
 80063b0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	6919      	ldr	r1, [r3, #16]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	041a      	lsls	r2, r3, #16
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	430a      	orrs	r2, r1
 80063c4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fa4c 	bl	8006864 <RTC_ExitInitMode>
 80063cc:	4603      	mov	r3, r0
 80063ce:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d113      	bne.n	80063fe <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80063e4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	699a      	ldr	r2, [r3, #24]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	430a      	orrs	r2, r1
 80063f6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	22ff      	movs	r2, #255	; 0xff
 8006404:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8006406:	7bfb      	ldrb	r3, [r7, #15]
}
 8006408:	4618      	mov	r0, r3
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006410:	b590      	push	{r4, r7, lr}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800641c:	2300      	movs	r3, #0
 800641e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	7f1b      	ldrb	r3, [r3, #28]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d101      	bne.n	800642c <HAL_RTC_SetTime+0x1c>
 8006428:	2302      	movs	r3, #2
 800642a:	e087      	b.n	800653c <HAL_RTC_SetTime+0x12c>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2201      	movs	r2, #1
 8006430:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2202      	movs	r2, #2
 8006436:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d126      	bne.n	800648c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006448:	2b00      	cmp	r3, #0
 800644a:	d102      	bne.n	8006452 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	2200      	movs	r2, #0
 8006450:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	4618      	mov	r0, r3
 8006458:	f000 fa29 	bl	80068ae <RTC_ByteToBcd2>
 800645c:	4603      	mov	r3, r0
 800645e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	785b      	ldrb	r3, [r3, #1]
 8006464:	4618      	mov	r0, r3
 8006466:	f000 fa22 	bl	80068ae <RTC_ByteToBcd2>
 800646a:	4603      	mov	r3, r0
 800646c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800646e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	789b      	ldrb	r3, [r3, #2]
 8006474:	4618      	mov	r0, r3
 8006476:	f000 fa1a 	bl	80068ae <RTC_ByteToBcd2>
 800647a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800647c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	78db      	ldrb	r3, [r3, #3]
 8006484:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006486:	4313      	orrs	r3, r2
 8006488:	617b      	str	r3, [r7, #20]
 800648a:	e018      	b.n	80064be <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006496:	2b00      	cmp	r3, #0
 8006498:	d102      	bne.n	80064a0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	2200      	movs	r2, #0
 800649e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	785b      	ldrb	r3, [r3, #1]
 80064aa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80064ac:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80064b2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	78db      	ldrb	r3, [r3, #3]
 80064b8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80064ba:	4313      	orrs	r3, r2
 80064bc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	22ca      	movs	r2, #202	; 0xca
 80064c4:	625a      	str	r2, [r3, #36]	; 0x24
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2253      	movs	r2, #83	; 0x53
 80064cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 f991 	bl	80067f6 <RTC_EnterInitMode>
 80064d4:	4603      	mov	r3, r0
 80064d6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80064d8:	7cfb      	ldrb	r3, [r7, #19]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d120      	bne.n	8006520 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80064e8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80064ec:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	689a      	ldr	r2, [r3, #8]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80064fc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6899      	ldr	r1, [r3, #8]
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	68da      	ldr	r2, [r3, #12]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	431a      	orrs	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	430a      	orrs	r2, r1
 8006514:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	f000 f9a4 	bl	8006864 <RTC_ExitInitMode>
 800651c:	4603      	mov	r3, r0
 800651e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006520:	7cfb      	ldrb	r3, [r7, #19]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d102      	bne.n	800652c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2201      	movs	r2, #1
 800652a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	22ff      	movs	r2, #255	; 0xff
 8006532:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	771a      	strb	r2, [r3, #28]

  return status;
 800653a:	7cfb      	ldrb	r3, [r7, #19]
}
 800653c:	4618      	mov	r0, r3
 800653e:	371c      	adds	r7, #28
 8006540:	46bd      	mov	sp, r7
 8006542:	bd90      	pop	{r4, r7, pc}

08006544 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006550:	2300      	movs	r3, #0
 8006552:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006576:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800657a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	0c1b      	lsrs	r3, r3, #16
 8006580:	b2db      	uxtb	r3, r3
 8006582:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006586:	b2da      	uxtb	r2, r3
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	0a1b      	lsrs	r3, r3, #8
 8006590:	b2db      	uxtb	r3, r3
 8006592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006596:	b2da      	uxtb	r2, r3
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	0d9b      	lsrs	r3, r3, #22
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d11a      	bne.n	80065f6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 f98f 	bl	80068e8 <RTC_Bcd2ToByte>
 80065ca:	4603      	mov	r3, r0
 80065cc:	461a      	mov	r2, r3
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	785b      	ldrb	r3, [r3, #1]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f000 f986 	bl	80068e8 <RTC_Bcd2ToByte>
 80065dc:	4603      	mov	r3, r0
 80065de:	461a      	mov	r2, r3
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	789b      	ldrb	r3, [r3, #2]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 f97d 	bl	80068e8 <RTC_Bcd2ToByte>
 80065ee:	4603      	mov	r3, r0
 80065f0:	461a      	mov	r2, r3
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3718      	adds	r7, #24
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006600:	b590      	push	{r4, r7, lr}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	7f1b      	ldrb	r3, [r3, #28]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d101      	bne.n	800661c <HAL_RTC_SetDate+0x1c>
 8006618:	2302      	movs	r3, #2
 800661a:	e071      	b.n	8006700 <HAL_RTC_SetDate+0x100>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2201      	movs	r2, #1
 8006620:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2202      	movs	r2, #2
 8006626:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10e      	bne.n	800664c <HAL_RTC_SetDate+0x4c>
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	785b      	ldrb	r3, [r3, #1]
 8006632:	f003 0310 	and.w	r3, r3, #16
 8006636:	2b00      	cmp	r3, #0
 8006638:	d008      	beq.n	800664c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	785b      	ldrb	r3, [r3, #1]
 800663e:	f023 0310 	bic.w	r3, r3, #16
 8006642:	b2db      	uxtb	r3, r3
 8006644:	330a      	adds	r3, #10
 8006646:	b2da      	uxtb	r2, r3
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d11c      	bne.n	800668c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	78db      	ldrb	r3, [r3, #3]
 8006656:	4618      	mov	r0, r3
 8006658:	f000 f929 	bl	80068ae <RTC_ByteToBcd2>
 800665c:	4603      	mov	r3, r0
 800665e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	785b      	ldrb	r3, [r3, #1]
 8006664:	4618      	mov	r0, r3
 8006666:	f000 f922 	bl	80068ae <RTC_ByteToBcd2>
 800666a:	4603      	mov	r3, r0
 800666c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800666e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	789b      	ldrb	r3, [r3, #2]
 8006674:	4618      	mov	r0, r3
 8006676:	f000 f91a 	bl	80068ae <RTC_ByteToBcd2>
 800667a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800667c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006686:	4313      	orrs	r3, r2
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	e00e      	b.n	80066aa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	78db      	ldrb	r3, [r3, #3]
 8006690:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	785b      	ldrb	r3, [r3, #1]
 8006696:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006698:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800669e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80066a6:	4313      	orrs	r3, r2
 80066a8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	22ca      	movs	r2, #202	; 0xca
 80066b0:	625a      	str	r2, [r3, #36]	; 0x24
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2253      	movs	r2, #83	; 0x53
 80066b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 f89b 	bl	80067f6 <RTC_EnterInitMode>
 80066c0:	4603      	mov	r3, r0
 80066c2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80066c4:	7cfb      	ldrb	r3, [r7, #19]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10c      	bne.n	80066e4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80066d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80066d8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f000 f8c2 	bl	8006864 <RTC_ExitInitMode>
 80066e0:	4603      	mov	r3, r0
 80066e2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80066e4:	7cfb      	ldrb	r3, [r7, #19]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d102      	bne.n	80066f0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2201      	movs	r2, #1
 80066ee:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	22ff      	movs	r2, #255	; 0xff
 80066f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	771a      	strb	r2, [r3, #28]

  return status;
 80066fe:	7cfb      	ldrb	r3, [r7, #19]
}
 8006700:	4618      	mov	r0, r3
 8006702:	371c      	adds	r7, #28
 8006704:	46bd      	mov	sp, r7
 8006706:	bd90      	pop	{r4, r7, pc}

08006708 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006722:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006726:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	0c1b      	lsrs	r3, r3, #16
 800672c:	b2da      	uxtb	r2, r3
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	0a1b      	lsrs	r3, r3, #8
 8006736:	b2db      	uxtb	r3, r3
 8006738:	f003 031f 	and.w	r3, r3, #31
 800673c:	b2da      	uxtb	r2, r3
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	b2db      	uxtb	r3, r3
 8006746:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800674a:	b2da      	uxtb	r2, r3
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	0b5b      	lsrs	r3, r3, #13
 8006754:	b2db      	uxtb	r3, r3
 8006756:	f003 0307 	and.w	r3, r3, #7
 800675a:	b2da      	uxtb	r2, r3
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d11a      	bne.n	800679c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	78db      	ldrb	r3, [r3, #3]
 800676a:	4618      	mov	r0, r3
 800676c:	f000 f8bc 	bl	80068e8 <RTC_Bcd2ToByte>
 8006770:	4603      	mov	r3, r0
 8006772:	461a      	mov	r2, r3
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	785b      	ldrb	r3, [r3, #1]
 800677c:	4618      	mov	r0, r3
 800677e:	f000 f8b3 	bl	80068e8 <RTC_Bcd2ToByte>
 8006782:	4603      	mov	r3, r0
 8006784:	461a      	mov	r2, r3
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	789b      	ldrb	r3, [r3, #2]
 800678e:	4618      	mov	r0, r3
 8006790:	f000 f8aa 	bl	80068e8 <RTC_Bcd2ToByte>
 8006794:	4603      	mov	r3, r0
 8006796:	461a      	mov	r2, r3
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3718      	adds	r7, #24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b084      	sub	sp, #16
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067ae:	2300      	movs	r3, #0
 80067b0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68da      	ldr	r2, [r3, #12]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80067c0:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80067c2:	f7fc fb1d 	bl	8002e00 <HAL_GetTick>
 80067c6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80067c8:	e009      	b.n	80067de <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067ca:	f7fc fb19 	bl	8002e00 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067d8:	d901      	bls.n	80067de <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e007      	b.n	80067ee <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f003 0320 	and.w	r3, r3, #32
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d0ee      	beq.n	80067ca <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b084      	sub	sp, #16
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067fe:	2300      	movs	r3, #0
 8006800:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006810:	2b00      	cmp	r3, #0
 8006812:	d122      	bne.n	800685a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68da      	ldr	r2, [r3, #12]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006822:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006824:	f7fc faec 	bl	8002e00 <HAL_GetTick>
 8006828:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800682a:	e00c      	b.n	8006846 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800682c:	f7fc fae8 	bl	8002e00 <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800683a:	d904      	bls.n	8006846 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2204      	movs	r2, #4
 8006840:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006850:	2b00      	cmp	r3, #0
 8006852:	d102      	bne.n	800685a <RTC_EnterInitMode+0x64>
 8006854:	7bfb      	ldrb	r3, [r7, #15]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d1e8      	bne.n	800682c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800685a:	7bfb      	ldrb	r3, [r7, #15]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3710      	adds	r7, #16
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800686c:	2300      	movs	r3, #0
 800686e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68da      	ldr	r2, [r3, #12]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800687e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f003 0320 	and.w	r3, r3, #32
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10a      	bne.n	80068a4 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f7ff ff89 	bl	80067a6 <HAL_RTC_WaitForSynchro>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d004      	beq.n	80068a4 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2204      	movs	r2, #4
 800689e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b085      	sub	sp, #20
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	4603      	mov	r3, r0
 80068b6:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80068b8:	2300      	movs	r3, #0
 80068ba:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80068bc:	e005      	b.n	80068ca <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80068be:	7bfb      	ldrb	r3, [r7, #15]
 80068c0:	3301      	adds	r3, #1
 80068c2:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80068c4:	79fb      	ldrb	r3, [r7, #7]
 80068c6:	3b0a      	subs	r3, #10
 80068c8:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80068ca:	79fb      	ldrb	r3, [r7, #7]
 80068cc:	2b09      	cmp	r3, #9
 80068ce:	d8f6      	bhi.n	80068be <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
 80068d2:	011b      	lsls	r3, r3, #4
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	79fb      	ldrb	r3, [r7, #7]
 80068d8:	4313      	orrs	r3, r2
 80068da:	b2db      	uxtb	r3, r3
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3714      	adds	r7, #20
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	4603      	mov	r3, r0
 80068f0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80068f2:	2300      	movs	r3, #0
 80068f4:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80068f6:	79fb      	ldrb	r3, [r7, #7]
 80068f8:	091b      	lsrs	r3, r3, #4
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	461a      	mov	r2, r3
 80068fe:	0092      	lsls	r2, r2, #2
 8006900:	4413      	add	r3, r2
 8006902:	005b      	lsls	r3, r3, #1
 8006904:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006906:	79fb      	ldrb	r3, [r7, #7]
 8006908:	f003 030f 	and.w	r3, r3, #15
 800690c:	b2da      	uxtb	r2, r3
 800690e:	7bfb      	ldrb	r3, [r7, #15]
 8006910:	4413      	add	r3, r2
 8006912:	b2db      	uxtb	r3, r3
}
 8006914:	4618      	mov	r0, r3
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e07b      	b.n	8006a2a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006936:	2b00      	cmp	r3, #0
 8006938:	d108      	bne.n	800694c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006942:	d009      	beq.n	8006958 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	61da      	str	r2, [r3, #28]
 800694a:	e005      	b.n	8006958 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d106      	bne.n	8006978 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fb fe90 	bl	8002698 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800698e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80069a0:	431a      	orrs	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069aa:	431a      	orrs	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	f003 0302 	and.w	r3, r3, #2
 80069b4:	431a      	orrs	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	431a      	orrs	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069c8:	431a      	orrs	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069d2:	431a      	orrs	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a1b      	ldr	r3, [r3, #32]
 80069d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069dc:	ea42 0103 	orr.w	r1, r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	430a      	orrs	r2, r1
 80069ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	0c1b      	lsrs	r3, r3, #16
 80069f6:	f003 0104 	and.w	r1, r3, #4
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fe:	f003 0210 	and.w	r2, r3, #16
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	69da      	ldr	r2, [r3, #28]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b08c      	sub	sp, #48	; 0x30
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	60f8      	str	r0, [r7, #12]
 8006a3a:	60b9      	str	r1, [r7, #8]
 8006a3c:	607a      	str	r2, [r7, #4]
 8006a3e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006a40:	2301      	movs	r3, #1
 8006a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006a44:	2300      	movs	r3, #0
 8006a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d101      	bne.n	8006a58 <HAL_SPI_TransmitReceive+0x26>
 8006a54:	2302      	movs	r3, #2
 8006a56:	e18a      	b.n	8006d6e <HAL_SPI_TransmitReceive+0x33c>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a60:	f7fc f9ce 	bl	8002e00 <HAL_GetTick>
 8006a64:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006a76:	887b      	ldrh	r3, [r7, #2]
 8006a78:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d00f      	beq.n	8006aa2 <HAL_SPI_TransmitReceive+0x70>
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a88:	d107      	bne.n	8006a9a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d103      	bne.n	8006a9a <HAL_SPI_TransmitReceive+0x68>
 8006a92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a96:	2b04      	cmp	r3, #4
 8006a98:	d003      	beq.n	8006aa2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006aa0:	e15b      	b.n	8006d5a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d005      	beq.n	8006ab4 <HAL_SPI_TransmitReceive+0x82>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d002      	beq.n	8006ab4 <HAL_SPI_TransmitReceive+0x82>
 8006aae:	887b      	ldrh	r3, [r7, #2]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d103      	bne.n	8006abc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006aba:	e14e      	b.n	8006d5a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	2b04      	cmp	r3, #4
 8006ac6:	d003      	beq.n	8006ad0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2205      	movs	r2, #5
 8006acc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	887a      	ldrh	r2, [r7, #2]
 8006ae0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	887a      	ldrh	r2, [r7, #2]
 8006ae6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	887a      	ldrh	r2, [r7, #2]
 8006af2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	887a      	ldrh	r2, [r7, #2]
 8006af8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b10:	2b40      	cmp	r3, #64	; 0x40
 8006b12:	d007      	beq.n	8006b24 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b2c:	d178      	bne.n	8006c20 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d002      	beq.n	8006b3c <HAL_SPI_TransmitReceive+0x10a>
 8006b36:	8b7b      	ldrh	r3, [r7, #26]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d166      	bne.n	8006c0a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b40:	881a      	ldrh	r2, [r3, #0]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4c:	1c9a      	adds	r2, r3, #2
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b60:	e053      	b.n	8006c0a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d11b      	bne.n	8006ba8 <HAL_SPI_TransmitReceive+0x176>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d016      	beq.n	8006ba8 <HAL_SPI_TransmitReceive+0x176>
 8006b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d113      	bne.n	8006ba8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b84:	881a      	ldrh	r2, [r3, #0]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b90:	1c9a      	adds	r2, r3, #2
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d119      	bne.n	8006bea <HAL_SPI_TransmitReceive+0x1b8>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d014      	beq.n	8006bea <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68da      	ldr	r2, [r3, #12]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bca:	b292      	uxth	r2, r2
 8006bcc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd2:	1c9a      	adds	r2, r3, #2
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	3b01      	subs	r3, #1
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006be6:	2301      	movs	r3, #1
 8006be8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006bea:	f7fc f909 	bl	8002e00 <HAL_GetTick>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d807      	bhi.n	8006c0a <HAL_SPI_TransmitReceive+0x1d8>
 8006bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c00:	d003      	beq.n	8006c0a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006c08:	e0a7      	b.n	8006d5a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1a6      	bne.n	8006b62 <HAL_SPI_TransmitReceive+0x130>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1a1      	bne.n	8006b62 <HAL_SPI_TransmitReceive+0x130>
 8006c1e:	e07c      	b.n	8006d1a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d002      	beq.n	8006c2e <HAL_SPI_TransmitReceive+0x1fc>
 8006c28:	8b7b      	ldrh	r3, [r7, #26]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d16b      	bne.n	8006d06 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	330c      	adds	r3, #12
 8006c38:	7812      	ldrb	r2, [r2, #0]
 8006c3a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c40:	1c5a      	adds	r2, r3, #1
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c54:	e057      	b.n	8006d06 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f003 0302 	and.w	r3, r3, #2
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d11c      	bne.n	8006c9e <HAL_SPI_TransmitReceive+0x26c>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d017      	beq.n	8006c9e <HAL_SPI_TransmitReceive+0x26c>
 8006c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d114      	bne.n	8006c9e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	330c      	adds	r3, #12
 8006c7e:	7812      	ldrb	r2, [r2, #0]
 8006c80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c86:	1c5a      	adds	r2, r3, #1
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	3b01      	subs	r3, #1
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f003 0301 	and.w	r3, r3, #1
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d119      	bne.n	8006ce0 <HAL_SPI_TransmitReceive+0x2ae>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d014      	beq.n	8006ce0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68da      	ldr	r2, [r3, #12]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc0:	b2d2      	uxtb	r2, r2
 8006cc2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc8:	1c5a      	adds	r2, r3, #1
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ce0:	f7fc f88e 	bl	8002e00 <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d803      	bhi.n	8006cf8 <HAL_SPI_TransmitReceive+0x2c6>
 8006cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf6:	d102      	bne.n	8006cfe <HAL_SPI_TransmitReceive+0x2cc>
 8006cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d103      	bne.n	8006d06 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006d04:	e029      	b.n	8006d5a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d1a2      	bne.n	8006c56 <HAL_SPI_TransmitReceive+0x224>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d19d      	bne.n	8006c56 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	f000 f9d0 	bl	80070c4 <SPI_EndRxTxTransaction>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d006      	beq.n	8006d38 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2220      	movs	r2, #32
 8006d34:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006d36:	e010      	b.n	8006d5a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10b      	bne.n	8006d58 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d40:	2300      	movs	r3, #0
 8006d42:	617b      	str	r3, [r7, #20]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	617b      	str	r3, [r7, #20]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	617b      	str	r3, [r7, #20]
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	e000      	b.n	8006d5a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006d58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006d6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3730      	adds	r7, #48	; 0x30
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
	...

08006d78 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b088      	sub	sp, #32
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	099b      	lsrs	r3, r3, #6
 8006d94:	f003 0301 	and.w	r3, r3, #1
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10f      	bne.n	8006dbc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00a      	beq.n	8006dbc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	099b      	lsrs	r3, r3, #6
 8006daa:	f003 0301 	and.w	r3, r3, #1
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d004      	beq.n	8006dbc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	4798      	blx	r3
    return;
 8006dba:	e0d7      	b.n	8006f6c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	085b      	lsrs	r3, r3, #1
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00a      	beq.n	8006dde <HAL_SPI_IRQHandler+0x66>
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	09db      	lsrs	r3, r3, #7
 8006dcc:	f003 0301 	and.w	r3, r3, #1
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d004      	beq.n	8006dde <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	4798      	blx	r3
    return;
 8006ddc:	e0c6      	b.n	8006f6c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	095b      	lsrs	r3, r3, #5
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10c      	bne.n	8006e04 <HAL_SPI_IRQHandler+0x8c>
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	099b      	lsrs	r3, r3, #6
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d106      	bne.n	8006e04 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	0a1b      	lsrs	r3, r3, #8
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f000 80b4 	beq.w	8006f6c <HAL_SPI_IRQHandler+0x1f4>
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	095b      	lsrs	r3, r3, #5
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f000 80ad 	beq.w	8006f6c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	099b      	lsrs	r3, r3, #6
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d023      	beq.n	8006e66 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b03      	cmp	r3, #3
 8006e28:	d011      	beq.n	8006e4e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e2e:	f043 0204 	orr.w	r2, r3, #4
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e36:	2300      	movs	r3, #0
 8006e38:	617b      	str	r3, [r7, #20]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	617b      	str	r3, [r7, #20]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	617b      	str	r3, [r7, #20]
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	e00b      	b.n	8006e66 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e4e:	2300      	movs	r3, #0
 8006e50:	613b      	str	r3, [r7, #16]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	613b      	str	r3, [r7, #16]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	613b      	str	r3, [r7, #16]
 8006e62:	693b      	ldr	r3, [r7, #16]
        return;
 8006e64:	e082      	b.n	8006f6c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	095b      	lsrs	r3, r3, #5
 8006e6a:	f003 0301 	and.w	r3, r3, #1
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d014      	beq.n	8006e9c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e76:	f043 0201 	orr.w	r2, r3, #1
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006e7e:	2300      	movs	r3, #0
 8006e80:	60fb      	str	r3, [r7, #12]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	60fb      	str	r3, [r7, #12]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e98:	601a      	str	r2, [r3, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	0a1b      	lsrs	r3, r3, #8
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00c      	beq.n	8006ec2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eac:	f043 0208 	orr.w	r2, r3, #8
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	60bb      	str	r3, [r7, #8]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	60bb      	str	r3, [r7, #8]
 8006ec0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d04f      	beq.n	8006f6a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	685a      	ldr	r2, [r3, #4]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ed8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	f003 0302 	and.w	r3, r3, #2
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d104      	bne.n	8006ef6 <HAL_SPI_IRQHandler+0x17e>
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	f003 0301 	and.w	r3, r3, #1
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d034      	beq.n	8006f60 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f022 0203 	bic.w	r2, r2, #3
 8006f04:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d011      	beq.n	8006f32 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f12:	4a18      	ldr	r2, [pc, #96]	; (8006f74 <HAL_SPI_IRQHandler+0x1fc>)
 8006f14:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7fc f9a0 	bl	8003260 <HAL_DMA_Abort_IT>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d005      	beq.n	8006f32 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d016      	beq.n	8006f68 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f3e:	4a0d      	ldr	r2, [pc, #52]	; (8006f74 <HAL_SPI_IRQHandler+0x1fc>)
 8006f40:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fc f98a 	bl	8003260 <HAL_DMA_Abort_IT>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00a      	beq.n	8006f68 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006f5e:	e003      	b.n	8006f68 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f809 	bl	8006f78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006f66:	e000      	b.n	8006f6a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006f68:	bf00      	nop
    return;
 8006f6a:	bf00      	nop
  }
}
 8006f6c:	3720      	adds	r7, #32
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	08006f8d 	.word	0x08006f8d

08006f78 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f98:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f7ff ffe6 	bl	8006f78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006fac:	bf00      	nop
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b088      	sub	sp, #32
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	603b      	str	r3, [r7, #0]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006fc4:	f7fb ff1c 	bl	8002e00 <HAL_GetTick>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fcc:	1a9b      	subs	r3, r3, r2
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006fd4:	f7fb ff14 	bl	8002e00 <HAL_GetTick>
 8006fd8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006fda:	4b39      	ldr	r3, [pc, #228]	; (80070c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	015b      	lsls	r3, r3, #5
 8006fe0:	0d1b      	lsrs	r3, r3, #20
 8006fe2:	69fa      	ldr	r2, [r7, #28]
 8006fe4:	fb02 f303 	mul.w	r3, r2, r3
 8006fe8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fea:	e054      	b.n	8007096 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff2:	d050      	beq.n	8007096 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ff4:	f7fb ff04 	bl	8002e00 <HAL_GetTick>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	69fa      	ldr	r2, [r7, #28]
 8007000:	429a      	cmp	r2, r3
 8007002:	d902      	bls.n	800700a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d13d      	bne.n	8007086 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007018:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007022:	d111      	bne.n	8007048 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800702c:	d004      	beq.n	8007038 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007036:	d107      	bne.n	8007048 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007046:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007050:	d10f      	bne.n	8007072 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007060:	601a      	str	r2, [r3, #0]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007070:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e017      	b.n	80070b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d101      	bne.n	8007090 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800708c:	2300      	movs	r3, #0
 800708e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	3b01      	subs	r3, #1
 8007094:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	4013      	ands	r3, r2
 80070a0:	68ba      	ldr	r2, [r7, #8]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	bf0c      	ite	eq
 80070a6:	2301      	moveq	r3, #1
 80070a8:	2300      	movne	r3, #0
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	461a      	mov	r2, r3
 80070ae:	79fb      	ldrb	r3, [r7, #7]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d19b      	bne.n	8006fec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3720      	adds	r7, #32
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	20000234 	.word	0x20000234

080070c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b088      	sub	sp, #32
 80070c8:	af02      	add	r7, sp, #8
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80070d0:	4b1b      	ldr	r3, [pc, #108]	; (8007140 <SPI_EndRxTxTransaction+0x7c>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a1b      	ldr	r2, [pc, #108]	; (8007144 <SPI_EndRxTxTransaction+0x80>)
 80070d6:	fba2 2303 	umull	r2, r3, r2, r3
 80070da:	0d5b      	lsrs	r3, r3, #21
 80070dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80070e0:	fb02 f303 	mul.w	r3, r2, r3
 80070e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070ee:	d112      	bne.n	8007116 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	2200      	movs	r2, #0
 80070f8:	2180      	movs	r1, #128	; 0x80
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f7ff ff5a 	bl	8006fb4 <SPI_WaitFlagStateUntilTimeout>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d016      	beq.n	8007134 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800710a:	f043 0220 	orr.w	r2, r3, #32
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e00f      	b.n	8007136 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00a      	beq.n	8007132 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	3b01      	subs	r3, #1
 8007120:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800712c:	2b80      	cmp	r3, #128	; 0x80
 800712e:	d0f2      	beq.n	8007116 <SPI_EndRxTxTransaction+0x52>
 8007130:	e000      	b.n	8007134 <SPI_EndRxTxTransaction+0x70>
        break;
 8007132:	bf00      	nop
  }

  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	20000234 	.word	0x20000234
 8007144:	165e9f81 	.word	0x165e9f81

08007148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d101      	bne.n	800715a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e041      	b.n	80071de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d106      	bne.n	8007174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7fb fb14 	bl	800279c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2202      	movs	r2, #2
 8007178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	3304      	adds	r3, #4
 8007184:	4619      	mov	r1, r3
 8007186:	4610      	mov	r0, r2
 8007188:	f000 fa96 	bl	80076b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
	...

080071e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d001      	beq.n	8007200 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e04e      	b.n	800729e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2202      	movs	r2, #2
 8007204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68da      	ldr	r2, [r3, #12]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f042 0201 	orr.w	r2, r2, #1
 8007216:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a23      	ldr	r2, [pc, #140]	; (80072ac <HAL_TIM_Base_Start_IT+0xc4>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d022      	beq.n	8007268 <HAL_TIM_Base_Start_IT+0x80>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800722a:	d01d      	beq.n	8007268 <HAL_TIM_Base_Start_IT+0x80>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a1f      	ldr	r2, [pc, #124]	; (80072b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d018      	beq.n	8007268 <HAL_TIM_Base_Start_IT+0x80>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a1e      	ldr	r2, [pc, #120]	; (80072b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d013      	beq.n	8007268 <HAL_TIM_Base_Start_IT+0x80>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a1c      	ldr	r2, [pc, #112]	; (80072b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d00e      	beq.n	8007268 <HAL_TIM_Base_Start_IT+0x80>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a1b      	ldr	r2, [pc, #108]	; (80072bc <HAL_TIM_Base_Start_IT+0xd4>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d009      	beq.n	8007268 <HAL_TIM_Base_Start_IT+0x80>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a19      	ldr	r2, [pc, #100]	; (80072c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d004      	beq.n	8007268 <HAL_TIM_Base_Start_IT+0x80>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a18      	ldr	r2, [pc, #96]	; (80072c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d111      	bne.n	800728c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f003 0307 	and.w	r3, r3, #7
 8007272:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2b06      	cmp	r3, #6
 8007278:	d010      	beq.n	800729c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f042 0201 	orr.w	r2, r2, #1
 8007288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800728a:	e007      	b.n	800729c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f042 0201 	orr.w	r2, r2, #1
 800729a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3714      	adds	r7, #20
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	40010000 	.word	0x40010000
 80072b0:	40000400 	.word	0x40000400
 80072b4:	40000800 	.word	0x40000800
 80072b8:	40000c00 	.word	0x40000c00
 80072bc:	40010400 	.word	0x40010400
 80072c0:	40014000 	.word	0x40014000
 80072c4:	40001800 	.word	0x40001800

080072c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	f003 0302 	and.w	r3, r3, #2
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d122      	bne.n	8007324 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	f003 0302 	and.w	r3, r3, #2
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d11b      	bne.n	8007324 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f06f 0202 	mvn.w	r2, #2
 80072f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	f003 0303 	and.w	r3, r3, #3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d003      	beq.n	8007312 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f9b5 	bl	800767a <HAL_TIM_IC_CaptureCallback>
 8007310:	e005      	b.n	800731e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f9a7 	bl	8007666 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f9b8 	bl	800768e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	f003 0304 	and.w	r3, r3, #4
 800732e:	2b04      	cmp	r3, #4
 8007330:	d122      	bne.n	8007378 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	f003 0304 	and.w	r3, r3, #4
 800733c:	2b04      	cmp	r3, #4
 800733e:	d11b      	bne.n	8007378 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f06f 0204 	mvn.w	r2, #4
 8007348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2202      	movs	r2, #2
 800734e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800735a:	2b00      	cmp	r3, #0
 800735c:	d003      	beq.n	8007366 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f98b 	bl	800767a <HAL_TIM_IC_CaptureCallback>
 8007364:	e005      	b.n	8007372 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f97d 	bl	8007666 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f98e 	bl	800768e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	f003 0308 	and.w	r3, r3, #8
 8007382:	2b08      	cmp	r3, #8
 8007384:	d122      	bne.n	80073cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	f003 0308 	and.w	r3, r3, #8
 8007390:	2b08      	cmp	r3, #8
 8007392:	d11b      	bne.n	80073cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f06f 0208 	mvn.w	r2, #8
 800739c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2204      	movs	r2, #4
 80073a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	69db      	ldr	r3, [r3, #28]
 80073aa:	f003 0303 	and.w	r3, r3, #3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f961 	bl	800767a <HAL_TIM_IC_CaptureCallback>
 80073b8:	e005      	b.n	80073c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f953 	bl	8007666 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f964 	bl	800768e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	f003 0310 	and.w	r3, r3, #16
 80073d6:	2b10      	cmp	r3, #16
 80073d8:	d122      	bne.n	8007420 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	f003 0310 	and.w	r3, r3, #16
 80073e4:	2b10      	cmp	r3, #16
 80073e6:	d11b      	bne.n	8007420 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f06f 0210 	mvn.w	r2, #16
 80073f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2208      	movs	r2, #8
 80073f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	69db      	ldr	r3, [r3, #28]
 80073fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 f937 	bl	800767a <HAL_TIM_IC_CaptureCallback>
 800740c:	e005      	b.n	800741a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f929 	bl	8007666 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f93a 	bl	800768e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	2b01      	cmp	r3, #1
 800742c:	d10e      	bne.n	800744c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	f003 0301 	and.w	r3, r3, #1
 8007438:	2b01      	cmp	r3, #1
 800743a:	d107      	bne.n	800744c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f06f 0201 	mvn.w	r2, #1
 8007444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f7fa fcf0 	bl	8001e2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007456:	2b80      	cmp	r3, #128	; 0x80
 8007458:	d10e      	bne.n	8007478 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007464:	2b80      	cmp	r3, #128	; 0x80
 8007466:	d107      	bne.n	8007478 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fae0 	bl	8007a38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007482:	2b40      	cmp	r3, #64	; 0x40
 8007484:	d10e      	bne.n	80074a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007490:	2b40      	cmp	r3, #64	; 0x40
 8007492:	d107      	bne.n	80074a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800749c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f8ff 	bl	80076a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	f003 0320 	and.w	r3, r3, #32
 80074ae:	2b20      	cmp	r3, #32
 80074b0:	d10e      	bne.n	80074d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	f003 0320 	and.w	r3, r3, #32
 80074bc:	2b20      	cmp	r3, #32
 80074be:	d107      	bne.n	80074d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f06f 0220 	mvn.w	r2, #32
 80074c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 faaa 	bl	8007a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074d0:	bf00      	nop
 80074d2:	3708      	adds	r7, #8
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074e2:	2300      	movs	r3, #0
 80074e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d101      	bne.n	80074f4 <HAL_TIM_ConfigClockSource+0x1c>
 80074f0:	2302      	movs	r3, #2
 80074f2:	e0b4      	b.n	800765e <HAL_TIM_ConfigClockSource+0x186>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2202      	movs	r2, #2
 8007500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007512:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800751a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800752c:	d03e      	beq.n	80075ac <HAL_TIM_ConfigClockSource+0xd4>
 800752e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007532:	f200 8087 	bhi.w	8007644 <HAL_TIM_ConfigClockSource+0x16c>
 8007536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800753a:	f000 8086 	beq.w	800764a <HAL_TIM_ConfigClockSource+0x172>
 800753e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007542:	d87f      	bhi.n	8007644 <HAL_TIM_ConfigClockSource+0x16c>
 8007544:	2b70      	cmp	r3, #112	; 0x70
 8007546:	d01a      	beq.n	800757e <HAL_TIM_ConfigClockSource+0xa6>
 8007548:	2b70      	cmp	r3, #112	; 0x70
 800754a:	d87b      	bhi.n	8007644 <HAL_TIM_ConfigClockSource+0x16c>
 800754c:	2b60      	cmp	r3, #96	; 0x60
 800754e:	d050      	beq.n	80075f2 <HAL_TIM_ConfigClockSource+0x11a>
 8007550:	2b60      	cmp	r3, #96	; 0x60
 8007552:	d877      	bhi.n	8007644 <HAL_TIM_ConfigClockSource+0x16c>
 8007554:	2b50      	cmp	r3, #80	; 0x50
 8007556:	d03c      	beq.n	80075d2 <HAL_TIM_ConfigClockSource+0xfa>
 8007558:	2b50      	cmp	r3, #80	; 0x50
 800755a:	d873      	bhi.n	8007644 <HAL_TIM_ConfigClockSource+0x16c>
 800755c:	2b40      	cmp	r3, #64	; 0x40
 800755e:	d058      	beq.n	8007612 <HAL_TIM_ConfigClockSource+0x13a>
 8007560:	2b40      	cmp	r3, #64	; 0x40
 8007562:	d86f      	bhi.n	8007644 <HAL_TIM_ConfigClockSource+0x16c>
 8007564:	2b30      	cmp	r3, #48	; 0x30
 8007566:	d064      	beq.n	8007632 <HAL_TIM_ConfigClockSource+0x15a>
 8007568:	2b30      	cmp	r3, #48	; 0x30
 800756a:	d86b      	bhi.n	8007644 <HAL_TIM_ConfigClockSource+0x16c>
 800756c:	2b20      	cmp	r3, #32
 800756e:	d060      	beq.n	8007632 <HAL_TIM_ConfigClockSource+0x15a>
 8007570:	2b20      	cmp	r3, #32
 8007572:	d867      	bhi.n	8007644 <HAL_TIM_ConfigClockSource+0x16c>
 8007574:	2b00      	cmp	r3, #0
 8007576:	d05c      	beq.n	8007632 <HAL_TIM_ConfigClockSource+0x15a>
 8007578:	2b10      	cmp	r3, #16
 800757a:	d05a      	beq.n	8007632 <HAL_TIM_ConfigClockSource+0x15a>
 800757c:	e062      	b.n	8007644 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6818      	ldr	r0, [r3, #0]
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	6899      	ldr	r1, [r3, #8]
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	685a      	ldr	r2, [r3, #4]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	f000 f9ad 	bl	80078ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80075a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	609a      	str	r2, [r3, #8]
      break;
 80075aa:	e04f      	b.n	800764c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6818      	ldr	r0, [r3, #0]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	6899      	ldr	r1, [r3, #8]
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	f000 f996 	bl	80078ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	689a      	ldr	r2, [r3, #8]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075ce:	609a      	str	r2, [r3, #8]
      break;
 80075d0:	e03c      	b.n	800764c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6818      	ldr	r0, [r3, #0]
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	6859      	ldr	r1, [r3, #4]
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	461a      	mov	r2, r3
 80075e0:	f000 f90a 	bl	80077f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2150      	movs	r1, #80	; 0x50
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 f963 	bl	80078b6 <TIM_ITRx_SetConfig>
      break;
 80075f0:	e02c      	b.n	800764c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6818      	ldr	r0, [r3, #0]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	6859      	ldr	r1, [r3, #4]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	461a      	mov	r2, r3
 8007600:	f000 f929 	bl	8007856 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2160      	movs	r1, #96	; 0x60
 800760a:	4618      	mov	r0, r3
 800760c:	f000 f953 	bl	80078b6 <TIM_ITRx_SetConfig>
      break;
 8007610:	e01c      	b.n	800764c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6818      	ldr	r0, [r3, #0]
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	6859      	ldr	r1, [r3, #4]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	461a      	mov	r2, r3
 8007620:	f000 f8ea 	bl	80077f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2140      	movs	r1, #64	; 0x40
 800762a:	4618      	mov	r0, r3
 800762c:	f000 f943 	bl	80078b6 <TIM_ITRx_SetConfig>
      break;
 8007630:	e00c      	b.n	800764c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4619      	mov	r1, r3
 800763c:	4610      	mov	r0, r2
 800763e:	f000 f93a 	bl	80078b6 <TIM_ITRx_SetConfig>
      break;
 8007642:	e003      	b.n	800764c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	73fb      	strb	r3, [r7, #15]
      break;
 8007648:	e000      	b.n	800764c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800764a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800765c:	7bfb      	ldrb	r3, [r7, #15]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007666:	b480      	push	{r7}
 8007668:	b083      	sub	sp, #12
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800766e:	bf00      	nop
 8007670:	370c      	adds	r7, #12
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800767a:	b480      	push	{r7}
 800767c:	b083      	sub	sp, #12
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007682:	bf00      	nop
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr

0800768e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800768e:	b480      	push	{r7}
 8007690:	b083      	sub	sp, #12
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007696:	bf00      	nop
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b083      	sub	sp, #12
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076aa:	bf00      	nop
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
	...

080076b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a40      	ldr	r2, [pc, #256]	; (80077cc <TIM_Base_SetConfig+0x114>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d013      	beq.n	80076f8 <TIM_Base_SetConfig+0x40>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076d6:	d00f      	beq.n	80076f8 <TIM_Base_SetConfig+0x40>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a3d      	ldr	r2, [pc, #244]	; (80077d0 <TIM_Base_SetConfig+0x118>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d00b      	beq.n	80076f8 <TIM_Base_SetConfig+0x40>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a3c      	ldr	r2, [pc, #240]	; (80077d4 <TIM_Base_SetConfig+0x11c>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d007      	beq.n	80076f8 <TIM_Base_SetConfig+0x40>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a3b      	ldr	r2, [pc, #236]	; (80077d8 <TIM_Base_SetConfig+0x120>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d003      	beq.n	80076f8 <TIM_Base_SetConfig+0x40>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a3a      	ldr	r2, [pc, #232]	; (80077dc <TIM_Base_SetConfig+0x124>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d108      	bne.n	800770a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	4313      	orrs	r3, r2
 8007708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a2f      	ldr	r2, [pc, #188]	; (80077cc <TIM_Base_SetConfig+0x114>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d02b      	beq.n	800776a <TIM_Base_SetConfig+0xb2>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007718:	d027      	beq.n	800776a <TIM_Base_SetConfig+0xb2>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a2c      	ldr	r2, [pc, #176]	; (80077d0 <TIM_Base_SetConfig+0x118>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d023      	beq.n	800776a <TIM_Base_SetConfig+0xb2>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a2b      	ldr	r2, [pc, #172]	; (80077d4 <TIM_Base_SetConfig+0x11c>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d01f      	beq.n	800776a <TIM_Base_SetConfig+0xb2>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a2a      	ldr	r2, [pc, #168]	; (80077d8 <TIM_Base_SetConfig+0x120>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d01b      	beq.n	800776a <TIM_Base_SetConfig+0xb2>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a29      	ldr	r2, [pc, #164]	; (80077dc <TIM_Base_SetConfig+0x124>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d017      	beq.n	800776a <TIM_Base_SetConfig+0xb2>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a28      	ldr	r2, [pc, #160]	; (80077e0 <TIM_Base_SetConfig+0x128>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d013      	beq.n	800776a <TIM_Base_SetConfig+0xb2>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a27      	ldr	r2, [pc, #156]	; (80077e4 <TIM_Base_SetConfig+0x12c>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d00f      	beq.n	800776a <TIM_Base_SetConfig+0xb2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a26      	ldr	r2, [pc, #152]	; (80077e8 <TIM_Base_SetConfig+0x130>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d00b      	beq.n	800776a <TIM_Base_SetConfig+0xb2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a25      	ldr	r2, [pc, #148]	; (80077ec <TIM_Base_SetConfig+0x134>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d007      	beq.n	800776a <TIM_Base_SetConfig+0xb2>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a24      	ldr	r2, [pc, #144]	; (80077f0 <TIM_Base_SetConfig+0x138>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d003      	beq.n	800776a <TIM_Base_SetConfig+0xb2>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a23      	ldr	r2, [pc, #140]	; (80077f4 <TIM_Base_SetConfig+0x13c>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d108      	bne.n	800777c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	4313      	orrs	r3, r2
 800777a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	695b      	ldr	r3, [r3, #20]
 8007786:	4313      	orrs	r3, r2
 8007788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	689a      	ldr	r2, [r3, #8]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a0a      	ldr	r2, [pc, #40]	; (80077cc <TIM_Base_SetConfig+0x114>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d003      	beq.n	80077b0 <TIM_Base_SetConfig+0xf8>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4a0c      	ldr	r2, [pc, #48]	; (80077dc <TIM_Base_SetConfig+0x124>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d103      	bne.n	80077b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	691a      	ldr	r2, [r3, #16]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	615a      	str	r2, [r3, #20]
}
 80077be:	bf00      	nop
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	40010000 	.word	0x40010000
 80077d0:	40000400 	.word	0x40000400
 80077d4:	40000800 	.word	0x40000800
 80077d8:	40000c00 	.word	0x40000c00
 80077dc:	40010400 	.word	0x40010400
 80077e0:	40014000 	.word	0x40014000
 80077e4:	40014400 	.word	0x40014400
 80077e8:	40014800 	.word	0x40014800
 80077ec:	40001800 	.word	0x40001800
 80077f0:	40001c00 	.word	0x40001c00
 80077f4:	40002000 	.word	0x40002000

080077f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b087      	sub	sp, #28
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6a1b      	ldr	r3, [r3, #32]
 8007808:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6a1b      	ldr	r3, [r3, #32]
 800780e:	f023 0201 	bic.w	r2, r3, #1
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	011b      	lsls	r3, r3, #4
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	4313      	orrs	r3, r2
 800782c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	f023 030a 	bic.w	r3, r3, #10
 8007834:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	4313      	orrs	r3, r2
 800783c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	697a      	ldr	r2, [r7, #20]
 8007848:	621a      	str	r2, [r3, #32]
}
 800784a:	bf00      	nop
 800784c:	371c      	adds	r7, #28
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007856:	b480      	push	{r7}
 8007858:	b087      	sub	sp, #28
 800785a:	af00      	add	r7, sp, #0
 800785c:	60f8      	str	r0, [r7, #12]
 800785e:	60b9      	str	r1, [r7, #8]
 8007860:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6a1b      	ldr	r3, [r3, #32]
 8007866:	f023 0210 	bic.w	r2, r3, #16
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6a1b      	ldr	r3, [r3, #32]
 8007878:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007880:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	031b      	lsls	r3, r3, #12
 8007886:	697a      	ldr	r2, [r7, #20]
 8007888:	4313      	orrs	r3, r2
 800788a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007892:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	011b      	lsls	r3, r3, #4
 8007898:	693a      	ldr	r2, [r7, #16]
 800789a:	4313      	orrs	r3, r2
 800789c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	697a      	ldr	r2, [r7, #20]
 80078a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	693a      	ldr	r2, [r7, #16]
 80078a8:	621a      	str	r2, [r3, #32]
}
 80078aa:	bf00      	nop
 80078ac:	371c      	adds	r7, #28
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078b6:	b480      	push	{r7}
 80078b8:	b085      	sub	sp, #20
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	f043 0307 	orr.w	r3, r3, #7
 80078d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	609a      	str	r2, [r3, #8]
}
 80078e0:	bf00      	nop
 80078e2:	3714      	adds	r7, #20
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b087      	sub	sp, #28
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
 80078f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007906:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	021a      	lsls	r2, r3, #8
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	431a      	orrs	r2, r3
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	4313      	orrs	r3, r2
 8007914:	697a      	ldr	r2, [r7, #20]
 8007916:	4313      	orrs	r3, r2
 8007918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	609a      	str	r2, [r3, #8]
}
 8007920:	bf00      	nop
 8007922:	371c      	adds	r7, #28
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800793c:	2b01      	cmp	r3, #1
 800793e:	d101      	bne.n	8007944 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007940:	2302      	movs	r3, #2
 8007942:	e05a      	b.n	80079fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2202      	movs	r2, #2
 8007950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800796a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	4313      	orrs	r3, r2
 8007974:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a21      	ldr	r2, [pc, #132]	; (8007a08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d022      	beq.n	80079ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007990:	d01d      	beq.n	80079ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a1d      	ldr	r2, [pc, #116]	; (8007a0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d018      	beq.n	80079ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a1b      	ldr	r2, [pc, #108]	; (8007a10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d013      	beq.n	80079ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a1a      	ldr	r2, [pc, #104]	; (8007a14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d00e      	beq.n	80079ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a18      	ldr	r2, [pc, #96]	; (8007a18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d009      	beq.n	80079ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a17      	ldr	r2, [pc, #92]	; (8007a1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d004      	beq.n	80079ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a15      	ldr	r2, [pc, #84]	; (8007a20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d10c      	bne.n	80079e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	68ba      	ldr	r2, [r7, #8]
 80079dc:	4313      	orrs	r3, r2
 80079de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3714      	adds	r7, #20
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	40010000 	.word	0x40010000
 8007a0c:	40000400 	.word	0x40000400
 8007a10:	40000800 	.word	0x40000800
 8007a14:	40000c00 	.word	0x40000c00
 8007a18:	40010400 	.word	0x40010400
 8007a1c:	40014000 	.word	0x40014000
 8007a20:	40001800 	.word	0x40001800

08007a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a2c:	bf00      	nop
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d101      	bne.n	8007a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e03f      	b.n	8007ade <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d106      	bne.n	8007a78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7fa feb8 	bl	80027e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2224      	movs	r2, #36	; 0x24
 8007a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68da      	ldr	r2, [r3, #12]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fe19 	bl	80086c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	691a      	ldr	r2, [r3, #16]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007aa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	695a      	ldr	r2, [r3, #20]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ab4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68da      	ldr	r2, [r3, #12]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ac4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2220      	movs	r2, #32
 8007ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2220      	movs	r2, #32
 8007ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b08a      	sub	sp, #40	; 0x28
 8007aea:	af02      	add	r7, sp, #8
 8007aec:	60f8      	str	r0, [r7, #12]
 8007aee:	60b9      	str	r1, [r7, #8]
 8007af0:	603b      	str	r3, [r7, #0]
 8007af2:	4613      	mov	r3, r2
 8007af4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007af6:	2300      	movs	r3, #0
 8007af8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b20      	cmp	r3, #32
 8007b04:	d17c      	bne.n	8007c00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d002      	beq.n	8007b12 <HAL_UART_Transmit+0x2c>
 8007b0c:	88fb      	ldrh	r3, [r7, #6]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d101      	bne.n	8007b16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e075      	b.n	8007c02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d101      	bne.n	8007b24 <HAL_UART_Transmit+0x3e>
 8007b20:	2302      	movs	r3, #2
 8007b22:	e06e      	b.n	8007c02 <HAL_UART_Transmit+0x11c>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2221      	movs	r2, #33	; 0x21
 8007b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b3a:	f7fb f961 	bl	8002e00 <HAL_GetTick>
 8007b3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	88fa      	ldrh	r2, [r7, #6]
 8007b44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	88fa      	ldrh	r2, [r7, #6]
 8007b4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b54:	d108      	bne.n	8007b68 <HAL_UART_Transmit+0x82>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d104      	bne.n	8007b68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	61bb      	str	r3, [r7, #24]
 8007b66:	e003      	b.n	8007b70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007b78:	e02a      	b.n	8007bd0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	9300      	str	r3, [sp, #0]
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	2200      	movs	r2, #0
 8007b82:	2180      	movs	r1, #128	; 0x80
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f000 fb59 	bl	800823c <UART_WaitOnFlagUntilTimeout>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d001      	beq.n	8007b94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007b90:	2303      	movs	r3, #3
 8007b92:	e036      	b.n	8007c02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d10b      	bne.n	8007bb2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	881b      	ldrh	r3, [r3, #0]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ba8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	3302      	adds	r3, #2
 8007bae:	61bb      	str	r3, [r7, #24]
 8007bb0:	e007      	b.n	8007bc2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	781a      	ldrb	r2, [r3, #0]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1cf      	bne.n	8007b7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	2200      	movs	r2, #0
 8007be2:	2140      	movs	r1, #64	; 0x40
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f000 fb29 	bl	800823c <UART_WaitOnFlagUntilTimeout>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d001      	beq.n	8007bf4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e006      	b.n	8007c02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2220      	movs	r2, #32
 8007bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	e000      	b.n	8007c02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007c00:	2302      	movs	r3, #2
  }
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3720      	adds	r7, #32
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b085      	sub	sp, #20
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	60f8      	str	r0, [r7, #12]
 8007c12:	60b9      	str	r1, [r7, #8]
 8007c14:	4613      	mov	r3, r2
 8007c16:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	2b20      	cmp	r3, #32
 8007c22:	d130      	bne.n	8007c86 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d002      	beq.n	8007c30 <HAL_UART_Transmit_IT+0x26>
 8007c2a:	88fb      	ldrh	r3, [r7, #6]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d101      	bne.n	8007c34 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e029      	b.n	8007c88 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d101      	bne.n	8007c42 <HAL_UART_Transmit_IT+0x38>
 8007c3e:	2302      	movs	r3, #2
 8007c40:	e022      	b.n	8007c88 <HAL_UART_Transmit_IT+0x7e>
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2201      	movs	r2, #1
 8007c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	88fa      	ldrh	r2, [r7, #6]
 8007c54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	88fa      	ldrh	r2, [r7, #6]
 8007c5a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2221      	movs	r2, #33	; 0x21
 8007c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68da      	ldr	r2, [r3, #12]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007c80:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007c82:	2300      	movs	r3, #0
 8007c84:	e000      	b.n	8007c88 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007c86:	2302      	movs	r3, #2
  }
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b20      	cmp	r3, #32
 8007cac:	d11d      	bne.n	8007cea <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d002      	beq.n	8007cba <HAL_UART_Receive_IT+0x26>
 8007cb4:	88fb      	ldrh	r3, [r7, #6]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e016      	b.n	8007cec <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d101      	bne.n	8007ccc <HAL_UART_Receive_IT+0x38>
 8007cc8:	2302      	movs	r3, #2
 8007cca:	e00f      	b.n	8007cec <HAL_UART_Receive_IT+0x58>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007cda:	88fb      	ldrh	r3, [r7, #6]
 8007cdc:	461a      	mov	r2, r3
 8007cde:	68b9      	ldr	r1, [r7, #8]
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f000 fb19 	bl	8008318 <UART_Start_Receive_IT>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	e000      	b.n	8007cec <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007cea:	2302      	movs	r3, #2
  }
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b0ba      	sub	sp, #232	; 0xe8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	695b      	ldr	r3, [r3, #20]
 8007d16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007d20:	2300      	movs	r3, #0
 8007d22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d2a:	f003 030f 	and.w	r3, r3, #15
 8007d2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007d32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10f      	bne.n	8007d5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d3e:	f003 0320 	and.w	r3, r3, #32
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d009      	beq.n	8007d5a <HAL_UART_IRQHandler+0x66>
 8007d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d4a:	f003 0320 	and.w	r3, r3, #32
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fbfd 	bl	8008552 <UART_Receive_IT>
      return;
 8007d58:	e256      	b.n	8008208 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007d5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f000 80de 	beq.w	8007f20 <HAL_UART_IRQHandler+0x22c>
 8007d64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d106      	bne.n	8007d7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f000 80d1 	beq.w	8007f20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d82:	f003 0301 	and.w	r3, r3, #1
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00b      	beq.n	8007da2 <HAL_UART_IRQHandler+0xae>
 8007d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d005      	beq.n	8007da2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9a:	f043 0201 	orr.w	r2, r3, #1
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007da6:	f003 0304 	and.w	r3, r3, #4
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00b      	beq.n	8007dc6 <HAL_UART_IRQHandler+0xd2>
 8007dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007db2:	f003 0301 	and.w	r3, r3, #1
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d005      	beq.n	8007dc6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dbe:	f043 0202 	orr.w	r2, r3, #2
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dca:	f003 0302 	and.w	r3, r3, #2
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00b      	beq.n	8007dea <HAL_UART_IRQHandler+0xf6>
 8007dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d005      	beq.n	8007dea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de2:	f043 0204 	orr.w	r2, r3, #4
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dee:	f003 0308 	and.w	r3, r3, #8
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d011      	beq.n	8007e1a <HAL_UART_IRQHandler+0x126>
 8007df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dfa:	f003 0320 	and.w	r3, r3, #32
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d105      	bne.n	8007e0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e06:	f003 0301 	and.w	r3, r3, #1
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d005      	beq.n	8007e1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e12:	f043 0208 	orr.w	r2, r3, #8
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f000 81ed 	beq.w	80081fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e28:	f003 0320 	and.w	r3, r3, #32
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d008      	beq.n	8007e42 <HAL_UART_IRQHandler+0x14e>
 8007e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e34:	f003 0320 	and.w	r3, r3, #32
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d002      	beq.n	8007e42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 fb88 	bl	8008552 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	695b      	ldr	r3, [r3, #20]
 8007e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e4c:	2b40      	cmp	r3, #64	; 0x40
 8007e4e:	bf0c      	ite	eq
 8007e50:	2301      	moveq	r3, #1
 8007e52:	2300      	movne	r3, #0
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5e:	f003 0308 	and.w	r3, r3, #8
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d103      	bne.n	8007e6e <HAL_UART_IRQHandler+0x17a>
 8007e66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d04f      	beq.n	8007f0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fa90 	bl	8008394 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e7e:	2b40      	cmp	r3, #64	; 0x40
 8007e80:	d141      	bne.n	8007f06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	3314      	adds	r3, #20
 8007e88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e90:	e853 3f00 	ldrex	r3, [r3]
 8007e94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007e98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	3314      	adds	r3, #20
 8007eaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007eae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007eb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007eba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007ebe:	e841 2300 	strex	r3, r2, [r1]
 8007ec2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007ec6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1d9      	bne.n	8007e82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d013      	beq.n	8007efe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eda:	4a7d      	ldr	r2, [pc, #500]	; (80080d0 <HAL_UART_IRQHandler+0x3dc>)
 8007edc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7fb f9bc 	bl	8003260 <HAL_DMA_Abort_IT>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d016      	beq.n	8007f1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007ef8:	4610      	mov	r0, r2
 8007efa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007efc:	e00e      	b.n	8007f1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f986 	bl	8008210 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f04:	e00a      	b.n	8007f1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 f982 	bl	8008210 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f0c:	e006      	b.n	8007f1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f97e 	bl	8008210 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007f1a:	e170      	b.n	80081fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f1c:	bf00      	nop
    return;
 8007f1e:	e16e      	b.n	80081fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	f040 814a 	bne.w	80081be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f2e:	f003 0310 	and.w	r3, r3, #16
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f000 8143 	beq.w	80081be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f3c:	f003 0310 	and.w	r3, r3, #16
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f000 813c 	beq.w	80081be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f46:	2300      	movs	r3, #0
 8007f48:	60bb      	str	r3, [r7, #8]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	60bb      	str	r3, [r7, #8]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	60bb      	str	r3, [r7, #8]
 8007f5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	695b      	ldr	r3, [r3, #20]
 8007f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f66:	2b40      	cmp	r3, #64	; 0x40
 8007f68:	f040 80b4 	bne.w	80080d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f000 8140 	beq.w	8008202 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	f080 8139 	bcs.w	8008202 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9c:	69db      	ldr	r3, [r3, #28]
 8007f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fa2:	f000 8088 	beq.w	80080b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	330c      	adds	r3, #12
 8007fac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007fb4:	e853 3f00 	ldrex	r3, [r3]
 8007fb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007fbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	330c      	adds	r3, #12
 8007fce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007fd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007fd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007fde:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007fe2:	e841 2300 	strex	r3, r2, [r1]
 8007fe6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007fea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1d9      	bne.n	8007fa6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	3314      	adds	r3, #20
 8007ff8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ffc:	e853 3f00 	ldrex	r3, [r3]
 8008000:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008002:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008004:	f023 0301 	bic.w	r3, r3, #1
 8008008:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3314      	adds	r3, #20
 8008012:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008016:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800801a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800801e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008022:	e841 2300 	strex	r3, r2, [r1]
 8008026:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008028:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1e1      	bne.n	8007ff2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	3314      	adds	r3, #20
 8008034:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008036:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008038:	e853 3f00 	ldrex	r3, [r3]
 800803c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800803e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008044:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3314      	adds	r3, #20
 800804e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008052:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008054:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008056:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008058:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800805a:	e841 2300 	strex	r3, r2, [r1]
 800805e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008060:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1e3      	bne.n	800802e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2220      	movs	r2, #32
 800806a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	330c      	adds	r3, #12
 800807a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800807e:	e853 3f00 	ldrex	r3, [r3]
 8008082:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008086:	f023 0310 	bic.w	r3, r3, #16
 800808a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	330c      	adds	r3, #12
 8008094:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008098:	65ba      	str	r2, [r7, #88]	; 0x58
 800809a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800809e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80080a0:	e841 2300 	strex	r3, r2, [r1]
 80080a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80080a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d1e3      	bne.n	8008074 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7fb f865 	bl	8003180 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080be:	b29b      	uxth	r3, r3
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	4619      	mov	r1, r3
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f8ac 	bl	8008224 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80080cc:	e099      	b.n	8008202 <HAL_UART_IRQHandler+0x50e>
 80080ce:	bf00      	nop
 80080d0:	0800845b 	.word	0x0800845b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080dc:	b29b      	uxth	r3, r3
 80080de:	1ad3      	subs	r3, r2, r3
 80080e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	f000 808b 	beq.w	8008206 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80080f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 8086 	beq.w	8008206 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	330c      	adds	r3, #12
 8008100:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008104:	e853 3f00 	ldrex	r3, [r3]
 8008108:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800810a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800810c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008110:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	330c      	adds	r3, #12
 800811a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800811e:	647a      	str	r2, [r7, #68]	; 0x44
 8008120:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008122:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008124:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008126:	e841 2300 	strex	r3, r2, [r1]
 800812a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800812c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1e3      	bne.n	80080fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	3314      	adds	r3, #20
 8008138:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813c:	e853 3f00 	ldrex	r3, [r3]
 8008140:	623b      	str	r3, [r7, #32]
   return(result);
 8008142:	6a3b      	ldr	r3, [r7, #32]
 8008144:	f023 0301 	bic.w	r3, r3, #1
 8008148:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	3314      	adds	r3, #20
 8008152:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008156:	633a      	str	r2, [r7, #48]	; 0x30
 8008158:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800815c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800815e:	e841 2300 	strex	r3, r2, [r1]
 8008162:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1e3      	bne.n	8008132 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2220      	movs	r2, #32
 800816e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	330c      	adds	r3, #12
 800817e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	e853 3f00 	ldrex	r3, [r3]
 8008186:	60fb      	str	r3, [r7, #12]
   return(result);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f023 0310 	bic.w	r3, r3, #16
 800818e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	330c      	adds	r3, #12
 8008198:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800819c:	61fa      	str	r2, [r7, #28]
 800819e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a0:	69b9      	ldr	r1, [r7, #24]
 80081a2:	69fa      	ldr	r2, [r7, #28]
 80081a4:	e841 2300 	strex	r3, r2, [r1]
 80081a8:	617b      	str	r3, [r7, #20]
   return(result);
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1e3      	bne.n	8008178 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80081b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80081b4:	4619      	mov	r1, r3
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f834 	bl	8008224 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80081bc:	e023      	b.n	8008206 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80081be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d009      	beq.n	80081de <HAL_UART_IRQHandler+0x4ea>
 80081ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d003      	beq.n	80081de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 f953 	bl	8008482 <UART_Transmit_IT>
    return;
 80081dc:	e014      	b.n	8008208 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80081de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00e      	beq.n	8008208 <HAL_UART_IRQHandler+0x514>
 80081ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d008      	beq.n	8008208 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f993 	bl	8008522 <UART_EndTransmit_IT>
    return;
 80081fc:	e004      	b.n	8008208 <HAL_UART_IRQHandler+0x514>
    return;
 80081fe:	bf00      	nop
 8008200:	e002      	b.n	8008208 <HAL_UART_IRQHandler+0x514>
      return;
 8008202:	bf00      	nop
 8008204:	e000      	b.n	8008208 <HAL_UART_IRQHandler+0x514>
      return;
 8008206:	bf00      	nop
  }
}
 8008208:	37e8      	adds	r7, #232	; 0xe8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop

08008210 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008218:	bf00      	nop
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	460b      	mov	r3, r1
 800822e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b090      	sub	sp, #64	; 0x40
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	603b      	str	r3, [r7, #0]
 8008248:	4613      	mov	r3, r2
 800824a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800824c:	e050      	b.n	80082f0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800824e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008254:	d04c      	beq.n	80082f0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008258:	2b00      	cmp	r3, #0
 800825a:	d007      	beq.n	800826c <UART_WaitOnFlagUntilTimeout+0x30>
 800825c:	f7fa fdd0 	bl	8002e00 <HAL_GetTick>
 8008260:	4602      	mov	r2, r0
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008268:	429a      	cmp	r2, r3
 800826a:	d241      	bcs.n	80082f0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	330c      	adds	r3, #12
 8008272:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008276:	e853 3f00 	ldrex	r3, [r3]
 800827a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800827c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	330c      	adds	r3, #12
 800828a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800828c:	637a      	str	r2, [r7, #52]	; 0x34
 800828e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008290:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008294:	e841 2300 	strex	r3, r2, [r1]
 8008298:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800829a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1e5      	bne.n	800826c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3314      	adds	r3, #20
 80082a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	e853 3f00 	ldrex	r3, [r3]
 80082ae:	613b      	str	r3, [r7, #16]
   return(result);
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	f023 0301 	bic.w	r3, r3, #1
 80082b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	3314      	adds	r3, #20
 80082be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082c0:	623a      	str	r2, [r7, #32]
 80082c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c4:	69f9      	ldr	r1, [r7, #28]
 80082c6:	6a3a      	ldr	r2, [r7, #32]
 80082c8:	e841 2300 	strex	r3, r2, [r1]
 80082cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d1e5      	bne.n	80082a0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2220      	movs	r2, #32
 80082d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2220      	movs	r2, #32
 80082e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e00f      	b.n	8008310 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	4013      	ands	r3, r2
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	bf0c      	ite	eq
 8008300:	2301      	moveq	r3, #1
 8008302:	2300      	movne	r3, #0
 8008304:	b2db      	uxtb	r3, r3
 8008306:	461a      	mov	r2, r3
 8008308:	79fb      	ldrb	r3, [r7, #7]
 800830a:	429a      	cmp	r2, r3
 800830c:	d09f      	beq.n	800824e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3740      	adds	r7, #64	; 0x40
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	4613      	mov	r3, r2
 8008324:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	88fa      	ldrh	r2, [r7, #6]
 8008330:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	88fa      	ldrh	r2, [r7, #6]
 8008336:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2200      	movs	r2, #0
 800833c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2222      	movs	r2, #34	; 0x22
 8008342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d007      	beq.n	8008366 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68da      	ldr	r2, [r3, #12]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008364:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	695a      	ldr	r2, [r3, #20]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f042 0201 	orr.w	r2, r2, #1
 8008374:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68da      	ldr	r2, [r3, #12]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f042 0220 	orr.w	r2, r2, #32
 8008384:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3714      	adds	r7, #20
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008394:	b480      	push	{r7}
 8008396:	b095      	sub	sp, #84	; 0x54
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	330c      	adds	r3, #12
 80083a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083a6:	e853 3f00 	ldrex	r3, [r3]
 80083aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80083ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	330c      	adds	r3, #12
 80083ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083bc:	643a      	str	r2, [r7, #64]	; 0x40
 80083be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80083c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80083c4:	e841 2300 	strex	r3, r2, [r1]
 80083c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1e5      	bne.n	800839c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	3314      	adds	r3, #20
 80083d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d8:	6a3b      	ldr	r3, [r7, #32]
 80083da:	e853 3f00 	ldrex	r3, [r3]
 80083de:	61fb      	str	r3, [r7, #28]
   return(result);
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	f023 0301 	bic.w	r3, r3, #1
 80083e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	3314      	adds	r3, #20
 80083ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80083f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083f8:	e841 2300 	strex	r3, r2, [r1]
 80083fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1e5      	bne.n	80083d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008408:	2b01      	cmp	r3, #1
 800840a:	d119      	bne.n	8008440 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	330c      	adds	r3, #12
 8008412:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	e853 3f00 	ldrex	r3, [r3]
 800841a:	60bb      	str	r3, [r7, #8]
   return(result);
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	f023 0310 	bic.w	r3, r3, #16
 8008422:	647b      	str	r3, [r7, #68]	; 0x44
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	330c      	adds	r3, #12
 800842a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800842c:	61ba      	str	r2, [r7, #24]
 800842e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008430:	6979      	ldr	r1, [r7, #20]
 8008432:	69ba      	ldr	r2, [r7, #24]
 8008434:	e841 2300 	strex	r3, r2, [r1]
 8008438:	613b      	str	r3, [r7, #16]
   return(result);
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1e5      	bne.n	800840c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2220      	movs	r2, #32
 8008444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800844e:	bf00      	nop
 8008450:	3754      	adds	r7, #84	; 0x54
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr

0800845a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b084      	sub	sp, #16
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008466:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2200      	movs	r2, #0
 8008472:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f7ff fecb 	bl	8008210 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800847a:	bf00      	nop
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008482:	b480      	push	{r7}
 8008484:	b085      	sub	sp, #20
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008490:	b2db      	uxtb	r3, r3
 8008492:	2b21      	cmp	r3, #33	; 0x21
 8008494:	d13e      	bne.n	8008514 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800849e:	d114      	bne.n	80084ca <UART_Transmit_IT+0x48>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d110      	bne.n	80084ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a1b      	ldr	r3, [r3, #32]
 80084ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	881b      	ldrh	r3, [r3, #0]
 80084b2:	461a      	mov	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a1b      	ldr	r3, [r3, #32]
 80084c2:	1c9a      	adds	r2, r3, #2
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	621a      	str	r2, [r3, #32]
 80084c8:	e008      	b.n	80084dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a1b      	ldr	r3, [r3, #32]
 80084ce:	1c59      	adds	r1, r3, #1
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	6211      	str	r1, [r2, #32]
 80084d4:	781a      	ldrb	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	3b01      	subs	r3, #1
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	4619      	mov	r1, r3
 80084ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10f      	bne.n	8008510 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68da      	ldr	r2, [r3, #12]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	68da      	ldr	r2, [r3, #12]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800850e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008510:	2300      	movs	r3, #0
 8008512:	e000      	b.n	8008516 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008514:	2302      	movs	r3, #2
  }
}
 8008516:	4618      	mov	r0, r3
 8008518:	3714      	adds	r7, #20
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b082      	sub	sp, #8
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68da      	ldr	r2, [r3, #12]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008538:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2220      	movs	r2, #32
 800853e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f7f9 f93c 	bl	80017c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3708      	adds	r7, #8
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b08c      	sub	sp, #48	; 0x30
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b22      	cmp	r3, #34	; 0x22
 8008564:	f040 80ab 	bne.w	80086be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008570:	d117      	bne.n	80085a2 <UART_Receive_IT+0x50>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d113      	bne.n	80085a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800857a:	2300      	movs	r3, #0
 800857c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008582:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	b29b      	uxth	r3, r3
 800858c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008590:	b29a      	uxth	r2, r3
 8008592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008594:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800859a:	1c9a      	adds	r2, r3, #2
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	629a      	str	r2, [r3, #40]	; 0x28
 80085a0:	e026      	b.n	80085f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80085a8:	2300      	movs	r3, #0
 80085aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085b4:	d007      	beq.n	80085c6 <UART_Receive_IT+0x74>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10a      	bne.n	80085d4 <UART_Receive_IT+0x82>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d106      	bne.n	80085d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	b2da      	uxtb	r2, r3
 80085ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d0:	701a      	strb	r2, [r3, #0]
 80085d2:	e008      	b.n	80085e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085e0:	b2da      	uxtb	r2, r3
 80085e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ea:	1c5a      	adds	r2, r3, #1
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	3b01      	subs	r3, #1
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	4619      	mov	r1, r3
 80085fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008600:	2b00      	cmp	r3, #0
 8008602:	d15a      	bne.n	80086ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	68da      	ldr	r2, [r3, #12]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f022 0220 	bic.w	r2, r2, #32
 8008612:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	68da      	ldr	r2, [r3, #12]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008622:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	695a      	ldr	r2, [r3, #20]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f022 0201 	bic.w	r2, r2, #1
 8008632:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2220      	movs	r2, #32
 8008638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008640:	2b01      	cmp	r3, #1
 8008642:	d135      	bne.n	80086b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	330c      	adds	r3, #12
 8008650:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	e853 3f00 	ldrex	r3, [r3]
 8008658:	613b      	str	r3, [r7, #16]
   return(result);
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	f023 0310 	bic.w	r3, r3, #16
 8008660:	627b      	str	r3, [r7, #36]	; 0x24
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	330c      	adds	r3, #12
 8008668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800866a:	623a      	str	r2, [r7, #32]
 800866c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866e:	69f9      	ldr	r1, [r7, #28]
 8008670:	6a3a      	ldr	r2, [r7, #32]
 8008672:	e841 2300 	strex	r3, r2, [r1]
 8008676:	61bb      	str	r3, [r7, #24]
   return(result);
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1e5      	bne.n	800864a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 0310 	and.w	r3, r3, #16
 8008688:	2b10      	cmp	r3, #16
 800868a:	d10a      	bne.n	80086a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800868c:	2300      	movs	r3, #0
 800868e:	60fb      	str	r3, [r7, #12]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	60fb      	str	r3, [r7, #12]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	60fb      	str	r3, [r7, #12]
 80086a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086a6:	4619      	mov	r1, r3
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f7ff fdbb 	bl	8008224 <HAL_UARTEx_RxEventCallback>
 80086ae:	e002      	b.n	80086b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f7f9 f861 	bl	8001778 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80086b6:	2300      	movs	r3, #0
 80086b8:	e002      	b.n	80086c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80086ba:	2300      	movs	r3, #0
 80086bc:	e000      	b.n	80086c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80086be:	2302      	movs	r3, #2
  }
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3730      	adds	r7, #48	; 0x30
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086cc:	b0c0      	sub	sp, #256	; 0x100
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80086e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086e4:	68d9      	ldr	r1, [r3, #12]
 80086e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	ea40 0301 	orr.w	r3, r0, r1
 80086f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80086f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086f6:	689a      	ldr	r2, [r3, #8]
 80086f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	431a      	orrs	r2, r3
 8008700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008704:	695b      	ldr	r3, [r3, #20]
 8008706:	431a      	orrs	r2, r3
 8008708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800870c:	69db      	ldr	r3, [r3, #28]
 800870e:	4313      	orrs	r3, r2
 8008710:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008720:	f021 010c 	bic.w	r1, r1, #12
 8008724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800872e:	430b      	orrs	r3, r1
 8008730:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	695b      	ldr	r3, [r3, #20]
 800873a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800873e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008742:	6999      	ldr	r1, [r3, #24]
 8008744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	ea40 0301 	orr.w	r3, r0, r1
 800874e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	4b8f      	ldr	r3, [pc, #572]	; (8008994 <UART_SetConfig+0x2cc>)
 8008758:	429a      	cmp	r2, r3
 800875a:	d005      	beq.n	8008768 <UART_SetConfig+0xa0>
 800875c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	4b8d      	ldr	r3, [pc, #564]	; (8008998 <UART_SetConfig+0x2d0>)
 8008764:	429a      	cmp	r2, r3
 8008766:	d104      	bne.n	8008772 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008768:	f7fd fcb4 	bl	80060d4 <HAL_RCC_GetPCLK2Freq>
 800876c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008770:	e003      	b.n	800877a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008772:	f7fd fc9b 	bl	80060ac <HAL_RCC_GetPCLK1Freq>
 8008776:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800877a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800877e:	69db      	ldr	r3, [r3, #28]
 8008780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008784:	f040 810c 	bne.w	80089a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008788:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800878c:	2200      	movs	r2, #0
 800878e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008792:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008796:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800879a:	4622      	mov	r2, r4
 800879c:	462b      	mov	r3, r5
 800879e:	1891      	adds	r1, r2, r2
 80087a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80087a2:	415b      	adcs	r3, r3
 80087a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80087aa:	4621      	mov	r1, r4
 80087ac:	eb12 0801 	adds.w	r8, r2, r1
 80087b0:	4629      	mov	r1, r5
 80087b2:	eb43 0901 	adc.w	r9, r3, r1
 80087b6:	f04f 0200 	mov.w	r2, #0
 80087ba:	f04f 0300 	mov.w	r3, #0
 80087be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80087c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80087c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80087ca:	4690      	mov	r8, r2
 80087cc:	4699      	mov	r9, r3
 80087ce:	4623      	mov	r3, r4
 80087d0:	eb18 0303 	adds.w	r3, r8, r3
 80087d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80087d8:	462b      	mov	r3, r5
 80087da:	eb49 0303 	adc.w	r3, r9, r3
 80087de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80087e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80087ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80087f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80087f6:	460b      	mov	r3, r1
 80087f8:	18db      	adds	r3, r3, r3
 80087fa:	653b      	str	r3, [r7, #80]	; 0x50
 80087fc:	4613      	mov	r3, r2
 80087fe:	eb42 0303 	adc.w	r3, r2, r3
 8008802:	657b      	str	r3, [r7, #84]	; 0x54
 8008804:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008808:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800880c:	f7f7 fd48 	bl	80002a0 <__aeabi_uldivmod>
 8008810:	4602      	mov	r2, r0
 8008812:	460b      	mov	r3, r1
 8008814:	4b61      	ldr	r3, [pc, #388]	; (800899c <UART_SetConfig+0x2d4>)
 8008816:	fba3 2302 	umull	r2, r3, r3, r2
 800881a:	095b      	lsrs	r3, r3, #5
 800881c:	011c      	lsls	r4, r3, #4
 800881e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008822:	2200      	movs	r2, #0
 8008824:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008828:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800882c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008830:	4642      	mov	r2, r8
 8008832:	464b      	mov	r3, r9
 8008834:	1891      	adds	r1, r2, r2
 8008836:	64b9      	str	r1, [r7, #72]	; 0x48
 8008838:	415b      	adcs	r3, r3
 800883a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800883c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008840:	4641      	mov	r1, r8
 8008842:	eb12 0a01 	adds.w	sl, r2, r1
 8008846:	4649      	mov	r1, r9
 8008848:	eb43 0b01 	adc.w	fp, r3, r1
 800884c:	f04f 0200 	mov.w	r2, #0
 8008850:	f04f 0300 	mov.w	r3, #0
 8008854:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008858:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800885c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008860:	4692      	mov	sl, r2
 8008862:	469b      	mov	fp, r3
 8008864:	4643      	mov	r3, r8
 8008866:	eb1a 0303 	adds.w	r3, sl, r3
 800886a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800886e:	464b      	mov	r3, r9
 8008870:	eb4b 0303 	adc.w	r3, fp, r3
 8008874:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008884:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008888:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800888c:	460b      	mov	r3, r1
 800888e:	18db      	adds	r3, r3, r3
 8008890:	643b      	str	r3, [r7, #64]	; 0x40
 8008892:	4613      	mov	r3, r2
 8008894:	eb42 0303 	adc.w	r3, r2, r3
 8008898:	647b      	str	r3, [r7, #68]	; 0x44
 800889a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800889e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80088a2:	f7f7 fcfd 	bl	80002a0 <__aeabi_uldivmod>
 80088a6:	4602      	mov	r2, r0
 80088a8:	460b      	mov	r3, r1
 80088aa:	4611      	mov	r1, r2
 80088ac:	4b3b      	ldr	r3, [pc, #236]	; (800899c <UART_SetConfig+0x2d4>)
 80088ae:	fba3 2301 	umull	r2, r3, r3, r1
 80088b2:	095b      	lsrs	r3, r3, #5
 80088b4:	2264      	movs	r2, #100	; 0x64
 80088b6:	fb02 f303 	mul.w	r3, r2, r3
 80088ba:	1acb      	subs	r3, r1, r3
 80088bc:	00db      	lsls	r3, r3, #3
 80088be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80088c2:	4b36      	ldr	r3, [pc, #216]	; (800899c <UART_SetConfig+0x2d4>)
 80088c4:	fba3 2302 	umull	r2, r3, r3, r2
 80088c8:	095b      	lsrs	r3, r3, #5
 80088ca:	005b      	lsls	r3, r3, #1
 80088cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80088d0:	441c      	add	r4, r3
 80088d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088d6:	2200      	movs	r2, #0
 80088d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80088dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80088e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80088e4:	4642      	mov	r2, r8
 80088e6:	464b      	mov	r3, r9
 80088e8:	1891      	adds	r1, r2, r2
 80088ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80088ec:	415b      	adcs	r3, r3
 80088ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80088f4:	4641      	mov	r1, r8
 80088f6:	1851      	adds	r1, r2, r1
 80088f8:	6339      	str	r1, [r7, #48]	; 0x30
 80088fa:	4649      	mov	r1, r9
 80088fc:	414b      	adcs	r3, r1
 80088fe:	637b      	str	r3, [r7, #52]	; 0x34
 8008900:	f04f 0200 	mov.w	r2, #0
 8008904:	f04f 0300 	mov.w	r3, #0
 8008908:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800890c:	4659      	mov	r1, fp
 800890e:	00cb      	lsls	r3, r1, #3
 8008910:	4651      	mov	r1, sl
 8008912:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008916:	4651      	mov	r1, sl
 8008918:	00ca      	lsls	r2, r1, #3
 800891a:	4610      	mov	r0, r2
 800891c:	4619      	mov	r1, r3
 800891e:	4603      	mov	r3, r0
 8008920:	4642      	mov	r2, r8
 8008922:	189b      	adds	r3, r3, r2
 8008924:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008928:	464b      	mov	r3, r9
 800892a:	460a      	mov	r2, r1
 800892c:	eb42 0303 	adc.w	r3, r2, r3
 8008930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008940:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008944:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008948:	460b      	mov	r3, r1
 800894a:	18db      	adds	r3, r3, r3
 800894c:	62bb      	str	r3, [r7, #40]	; 0x28
 800894e:	4613      	mov	r3, r2
 8008950:	eb42 0303 	adc.w	r3, r2, r3
 8008954:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008956:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800895a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800895e:	f7f7 fc9f 	bl	80002a0 <__aeabi_uldivmod>
 8008962:	4602      	mov	r2, r0
 8008964:	460b      	mov	r3, r1
 8008966:	4b0d      	ldr	r3, [pc, #52]	; (800899c <UART_SetConfig+0x2d4>)
 8008968:	fba3 1302 	umull	r1, r3, r3, r2
 800896c:	095b      	lsrs	r3, r3, #5
 800896e:	2164      	movs	r1, #100	; 0x64
 8008970:	fb01 f303 	mul.w	r3, r1, r3
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	00db      	lsls	r3, r3, #3
 8008978:	3332      	adds	r3, #50	; 0x32
 800897a:	4a08      	ldr	r2, [pc, #32]	; (800899c <UART_SetConfig+0x2d4>)
 800897c:	fba2 2303 	umull	r2, r3, r2, r3
 8008980:	095b      	lsrs	r3, r3, #5
 8008982:	f003 0207 	and.w	r2, r3, #7
 8008986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4422      	add	r2, r4
 800898e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008990:	e105      	b.n	8008b9e <UART_SetConfig+0x4d6>
 8008992:	bf00      	nop
 8008994:	40011000 	.word	0x40011000
 8008998:	40011400 	.word	0x40011400
 800899c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80089a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089a4:	2200      	movs	r2, #0
 80089a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80089aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80089ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80089b2:	4642      	mov	r2, r8
 80089b4:	464b      	mov	r3, r9
 80089b6:	1891      	adds	r1, r2, r2
 80089b8:	6239      	str	r1, [r7, #32]
 80089ba:	415b      	adcs	r3, r3
 80089bc:	627b      	str	r3, [r7, #36]	; 0x24
 80089be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80089c2:	4641      	mov	r1, r8
 80089c4:	1854      	adds	r4, r2, r1
 80089c6:	4649      	mov	r1, r9
 80089c8:	eb43 0501 	adc.w	r5, r3, r1
 80089cc:	f04f 0200 	mov.w	r2, #0
 80089d0:	f04f 0300 	mov.w	r3, #0
 80089d4:	00eb      	lsls	r3, r5, #3
 80089d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80089da:	00e2      	lsls	r2, r4, #3
 80089dc:	4614      	mov	r4, r2
 80089de:	461d      	mov	r5, r3
 80089e0:	4643      	mov	r3, r8
 80089e2:	18e3      	adds	r3, r4, r3
 80089e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80089e8:	464b      	mov	r3, r9
 80089ea:	eb45 0303 	adc.w	r3, r5, r3
 80089ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80089f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80089fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008a02:	f04f 0200 	mov.w	r2, #0
 8008a06:	f04f 0300 	mov.w	r3, #0
 8008a0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008a0e:	4629      	mov	r1, r5
 8008a10:	008b      	lsls	r3, r1, #2
 8008a12:	4621      	mov	r1, r4
 8008a14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a18:	4621      	mov	r1, r4
 8008a1a:	008a      	lsls	r2, r1, #2
 8008a1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008a20:	f7f7 fc3e 	bl	80002a0 <__aeabi_uldivmod>
 8008a24:	4602      	mov	r2, r0
 8008a26:	460b      	mov	r3, r1
 8008a28:	4b60      	ldr	r3, [pc, #384]	; (8008bac <UART_SetConfig+0x4e4>)
 8008a2a:	fba3 2302 	umull	r2, r3, r3, r2
 8008a2e:	095b      	lsrs	r3, r3, #5
 8008a30:	011c      	lsls	r4, r3, #4
 8008a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a36:	2200      	movs	r2, #0
 8008a38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008a3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008a40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008a44:	4642      	mov	r2, r8
 8008a46:	464b      	mov	r3, r9
 8008a48:	1891      	adds	r1, r2, r2
 8008a4a:	61b9      	str	r1, [r7, #24]
 8008a4c:	415b      	adcs	r3, r3
 8008a4e:	61fb      	str	r3, [r7, #28]
 8008a50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a54:	4641      	mov	r1, r8
 8008a56:	1851      	adds	r1, r2, r1
 8008a58:	6139      	str	r1, [r7, #16]
 8008a5a:	4649      	mov	r1, r9
 8008a5c:	414b      	adcs	r3, r1
 8008a5e:	617b      	str	r3, [r7, #20]
 8008a60:	f04f 0200 	mov.w	r2, #0
 8008a64:	f04f 0300 	mov.w	r3, #0
 8008a68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008a6c:	4659      	mov	r1, fp
 8008a6e:	00cb      	lsls	r3, r1, #3
 8008a70:	4651      	mov	r1, sl
 8008a72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a76:	4651      	mov	r1, sl
 8008a78:	00ca      	lsls	r2, r1, #3
 8008a7a:	4610      	mov	r0, r2
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	4603      	mov	r3, r0
 8008a80:	4642      	mov	r2, r8
 8008a82:	189b      	adds	r3, r3, r2
 8008a84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a88:	464b      	mov	r3, r9
 8008a8a:	460a      	mov	r2, r1
 8008a8c:	eb42 0303 	adc.w	r3, r2, r3
 8008a90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008aa0:	f04f 0200 	mov.w	r2, #0
 8008aa4:	f04f 0300 	mov.w	r3, #0
 8008aa8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008aac:	4649      	mov	r1, r9
 8008aae:	008b      	lsls	r3, r1, #2
 8008ab0:	4641      	mov	r1, r8
 8008ab2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ab6:	4641      	mov	r1, r8
 8008ab8:	008a      	lsls	r2, r1, #2
 8008aba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008abe:	f7f7 fbef 	bl	80002a0 <__aeabi_uldivmod>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	4b39      	ldr	r3, [pc, #228]	; (8008bac <UART_SetConfig+0x4e4>)
 8008ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8008acc:	095b      	lsrs	r3, r3, #5
 8008ace:	2164      	movs	r1, #100	; 0x64
 8008ad0:	fb01 f303 	mul.w	r3, r1, r3
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	011b      	lsls	r3, r3, #4
 8008ad8:	3332      	adds	r3, #50	; 0x32
 8008ada:	4a34      	ldr	r2, [pc, #208]	; (8008bac <UART_SetConfig+0x4e4>)
 8008adc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ae0:	095b      	lsrs	r3, r3, #5
 8008ae2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ae6:	441c      	add	r4, r3
 8008ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008aec:	2200      	movs	r2, #0
 8008aee:	673b      	str	r3, [r7, #112]	; 0x70
 8008af0:	677a      	str	r2, [r7, #116]	; 0x74
 8008af2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008af6:	4642      	mov	r2, r8
 8008af8:	464b      	mov	r3, r9
 8008afa:	1891      	adds	r1, r2, r2
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	415b      	adcs	r3, r3
 8008b00:	60fb      	str	r3, [r7, #12]
 8008b02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b06:	4641      	mov	r1, r8
 8008b08:	1851      	adds	r1, r2, r1
 8008b0a:	6039      	str	r1, [r7, #0]
 8008b0c:	4649      	mov	r1, r9
 8008b0e:	414b      	adcs	r3, r1
 8008b10:	607b      	str	r3, [r7, #4]
 8008b12:	f04f 0200 	mov.w	r2, #0
 8008b16:	f04f 0300 	mov.w	r3, #0
 8008b1a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008b1e:	4659      	mov	r1, fp
 8008b20:	00cb      	lsls	r3, r1, #3
 8008b22:	4651      	mov	r1, sl
 8008b24:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b28:	4651      	mov	r1, sl
 8008b2a:	00ca      	lsls	r2, r1, #3
 8008b2c:	4610      	mov	r0, r2
 8008b2e:	4619      	mov	r1, r3
 8008b30:	4603      	mov	r3, r0
 8008b32:	4642      	mov	r2, r8
 8008b34:	189b      	adds	r3, r3, r2
 8008b36:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b38:	464b      	mov	r3, r9
 8008b3a:	460a      	mov	r2, r1
 8008b3c:	eb42 0303 	adc.w	r3, r2, r3
 8008b40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	663b      	str	r3, [r7, #96]	; 0x60
 8008b4c:	667a      	str	r2, [r7, #100]	; 0x64
 8008b4e:	f04f 0200 	mov.w	r2, #0
 8008b52:	f04f 0300 	mov.w	r3, #0
 8008b56:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008b5a:	4649      	mov	r1, r9
 8008b5c:	008b      	lsls	r3, r1, #2
 8008b5e:	4641      	mov	r1, r8
 8008b60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b64:	4641      	mov	r1, r8
 8008b66:	008a      	lsls	r2, r1, #2
 8008b68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008b6c:	f7f7 fb98 	bl	80002a0 <__aeabi_uldivmod>
 8008b70:	4602      	mov	r2, r0
 8008b72:	460b      	mov	r3, r1
 8008b74:	4b0d      	ldr	r3, [pc, #52]	; (8008bac <UART_SetConfig+0x4e4>)
 8008b76:	fba3 1302 	umull	r1, r3, r3, r2
 8008b7a:	095b      	lsrs	r3, r3, #5
 8008b7c:	2164      	movs	r1, #100	; 0x64
 8008b7e:	fb01 f303 	mul.w	r3, r1, r3
 8008b82:	1ad3      	subs	r3, r2, r3
 8008b84:	011b      	lsls	r3, r3, #4
 8008b86:	3332      	adds	r3, #50	; 0x32
 8008b88:	4a08      	ldr	r2, [pc, #32]	; (8008bac <UART_SetConfig+0x4e4>)
 8008b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b8e:	095b      	lsrs	r3, r3, #5
 8008b90:	f003 020f 	and.w	r2, r3, #15
 8008b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4422      	add	r2, r4
 8008b9c:	609a      	str	r2, [r3, #8]
}
 8008b9e:	bf00      	nop
 8008ba0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008baa:	bf00      	nop
 8008bac:	51eb851f 	.word	0x51eb851f

08008bb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008bb0:	b084      	sub	sp, #16
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b084      	sub	sp, #16
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
 8008bba:	f107 001c 	add.w	r0, r7, #28
 8008bbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d122      	bne.n	8008c0e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008bdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d105      	bne.n	8008c02 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f9c0 	bl	8008f88 <USB_CoreReset>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	73fb      	strb	r3, [r7, #15]
 8008c0c:	e01a      	b.n	8008c44 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 f9b4 	bl	8008f88 <USB_CoreReset>
 8008c20:	4603      	mov	r3, r0
 8008c22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d106      	bne.n	8008c38 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	639a      	str	r2, [r3, #56]	; 0x38
 8008c36:	e005      	b.n	8008c44 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d10b      	bne.n	8008c62 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f043 0206 	orr.w	r2, r3, #6
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	f043 0220 	orr.w	r2, r3, #32
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c6e:	b004      	add	sp, #16
 8008c70:	4770      	bx	lr

08008c72 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c72:	b480      	push	{r7}
 8008c74:	b083      	sub	sp, #12
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	f043 0201 	orr.w	r2, r3, #1
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	f023 0201 	bic.w	r2, r3, #1
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	370c      	adds	r7, #12
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b084      	sub	sp, #16
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008cd2:	78fb      	ldrb	r3, [r7, #3]
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d115      	bne.n	8008d04 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008ce4:	2001      	movs	r0, #1
 8008ce6:	f7fa f897 	bl	8002e18 <HAL_Delay>
      ms++;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	3301      	adds	r3, #1
 8008cee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 f93a 	bl	8008f6a <USB_GetMode>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d01e      	beq.n	8008d3a <USB_SetCurrentMode+0x84>
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2b31      	cmp	r3, #49	; 0x31
 8008d00:	d9f0      	bls.n	8008ce4 <USB_SetCurrentMode+0x2e>
 8008d02:	e01a      	b.n	8008d3a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008d04:	78fb      	ldrb	r3, [r7, #3]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d115      	bne.n	8008d36 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008d16:	2001      	movs	r0, #1
 8008d18:	f7fa f87e 	bl	8002e18 <HAL_Delay>
      ms++;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f921 	bl	8008f6a <USB_GetMode>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d005      	beq.n	8008d3a <USB_SetCurrentMode+0x84>
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2b31      	cmp	r3, #49	; 0x31
 8008d32:	d9f0      	bls.n	8008d16 <USB_SetCurrentMode+0x60>
 8008d34:	e001      	b.n	8008d3a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	e005      	b.n	8008d46 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2b32      	cmp	r3, #50	; 0x32
 8008d3e:	d101      	bne.n	8008d44 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	e000      	b.n	8008d46 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
	...

08008d50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	3301      	adds	r3, #1
 8008d62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	4a13      	ldr	r2, [pc, #76]	; (8008db4 <USB_FlushTxFifo+0x64>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d901      	bls.n	8008d70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	e01b      	b.n	8008da8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	691b      	ldr	r3, [r3, #16]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	daf2      	bge.n	8008d5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	019b      	lsls	r3, r3, #6
 8008d80:	f043 0220 	orr.w	r2, r3, #32
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	4a08      	ldr	r2, [pc, #32]	; (8008db4 <USB_FlushTxFifo+0x64>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d901      	bls.n	8008d9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008d96:	2303      	movs	r3, #3
 8008d98:	e006      	b.n	8008da8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	f003 0320 	and.w	r3, r3, #32
 8008da2:	2b20      	cmp	r3, #32
 8008da4:	d0f0      	beq.n	8008d88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3714      	adds	r7, #20
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr
 8008db4:	00030d40 	.word	0x00030d40

08008db8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	4a11      	ldr	r2, [pc, #68]	; (8008e14 <USB_FlushRxFifo+0x5c>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d901      	bls.n	8008dd6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	e018      	b.n	8008e08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	691b      	ldr	r3, [r3, #16]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	daf2      	bge.n	8008dc4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008dde:	2300      	movs	r3, #0
 8008de0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2210      	movs	r2, #16
 8008de6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	3301      	adds	r3, #1
 8008dec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	4a08      	ldr	r2, [pc, #32]	; (8008e14 <USB_FlushRxFifo+0x5c>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d901      	bls.n	8008dfa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008df6:	2303      	movs	r3, #3
 8008df8:	e006      	b.n	8008e08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	f003 0310 	and.w	r3, r3, #16
 8008e02:	2b10      	cmp	r3, #16
 8008e04:	d0f0      	beq.n	8008de8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr
 8008e14:	00030d40 	.word	0x00030d40

08008e18 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b089      	sub	sp, #36	; 0x24
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	4611      	mov	r1, r2
 8008e24:	461a      	mov	r2, r3
 8008e26:	460b      	mov	r3, r1
 8008e28:	71fb      	strb	r3, [r7, #7]
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008e36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d123      	bne.n	8008e86 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008e3e:	88bb      	ldrh	r3, [r7, #4]
 8008e40:	3303      	adds	r3, #3
 8008e42:	089b      	lsrs	r3, r3, #2
 8008e44:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008e46:	2300      	movs	r3, #0
 8008e48:	61bb      	str	r3, [r7, #24]
 8008e4a:	e018      	b.n	8008e7e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008e4c:	79fb      	ldrb	r3, [r7, #7]
 8008e4e:	031a      	lsls	r2, r3, #12
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	4413      	add	r3, r2
 8008e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e58:	461a      	mov	r2, r3
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	3301      	adds	r3, #1
 8008e64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	3301      	adds	r3, #1
 8008e76:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	61bb      	str	r3, [r7, #24]
 8008e7e:	69ba      	ldr	r2, [r7, #24]
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d3e2      	bcc.n	8008e4c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3724      	adds	r7, #36	; 0x24
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b08b      	sub	sp, #44	; 0x2c
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008eaa:	88fb      	ldrh	r3, [r7, #6]
 8008eac:	089b      	lsrs	r3, r3, #2
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008eb2:	88fb      	ldrh	r3, [r7, #6]
 8008eb4:	f003 0303 	and.w	r3, r3, #3
 8008eb8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008eba:	2300      	movs	r3, #0
 8008ebc:	623b      	str	r3, [r7, #32]
 8008ebe:	e014      	b.n	8008eea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eca:	601a      	str	r2, [r3, #0]
    pDest++;
 8008ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ece:	3301      	adds	r3, #1
 8008ed0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eda:	3301      	adds	r3, #1
 8008edc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008ee4:	6a3b      	ldr	r3, [r7, #32]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	623b      	str	r3, [r7, #32]
 8008eea:	6a3a      	ldr	r2, [r7, #32]
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d3e6      	bcc.n	8008ec0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008ef2:	8bfb      	ldrh	r3, [r7, #30]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d01e      	beq.n	8008f36 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008efc:	69bb      	ldr	r3, [r7, #24]
 8008efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f02:	461a      	mov	r2, r3
 8008f04:	f107 0310 	add.w	r3, r7, #16
 8008f08:	6812      	ldr	r2, [r2, #0]
 8008f0a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008f0c:	693a      	ldr	r2, [r7, #16]
 8008f0e:	6a3b      	ldr	r3, [r7, #32]
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	00db      	lsls	r3, r3, #3
 8008f14:	fa22 f303 	lsr.w	r3, r2, r3
 8008f18:	b2da      	uxtb	r2, r3
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1c:	701a      	strb	r2, [r3, #0]
      i++;
 8008f1e:	6a3b      	ldr	r3, [r7, #32]
 8008f20:	3301      	adds	r3, #1
 8008f22:	623b      	str	r3, [r7, #32]
      pDest++;
 8008f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f26:	3301      	adds	r3, #1
 8008f28:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008f2a:	8bfb      	ldrh	r3, [r7, #30]
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008f30:	8bfb      	ldrh	r3, [r7, #30]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1ea      	bne.n	8008f0c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	372c      	adds	r7, #44	; 0x2c
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	695b      	ldr	r3, [r3, #20]
 8008f50:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	699b      	ldr	r3, [r3, #24]
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	4013      	ands	r3, r2
 8008f5a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3714      	adds	r7, #20
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b083      	sub	sp, #12
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	695b      	ldr	r3, [r3, #20]
 8008f76:	f003 0301 	and.w	r3, r3, #1
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	370c      	adds	r7, #12
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
	...

08008f88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f90:	2300      	movs	r3, #0
 8008f92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	3301      	adds	r3, #1
 8008f98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	4a13      	ldr	r2, [pc, #76]	; (8008fec <USB_CoreReset+0x64>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d901      	bls.n	8008fa6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008fa2:	2303      	movs	r3, #3
 8008fa4:	e01b      	b.n	8008fde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	daf2      	bge.n	8008f94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	691b      	ldr	r3, [r3, #16]
 8008fb6:	f043 0201 	orr.w	r2, r3, #1
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	4a09      	ldr	r2, [pc, #36]	; (8008fec <USB_CoreReset+0x64>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d901      	bls.n	8008fd0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	e006      	b.n	8008fde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	f003 0301 	and.w	r3, r3, #1
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d0f0      	beq.n	8008fbe <USB_CoreReset+0x36>

  return HAL_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	00030d40 	.word	0x00030d40

08008ff0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ff0:	b084      	sub	sp, #16
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b086      	sub	sp, #24
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
 8008ffa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008ffe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009002:	2300      	movs	r3, #0
 8009004:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009010:	461a      	mov	r2, r3
 8009012:	2300      	movs	r3, #0
 8009014:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800901a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009026:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009032:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800903e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009042:	2b00      	cmp	r3, #0
 8009044:	d018      	beq.n	8009078 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009048:	2b01      	cmp	r3, #1
 800904a:	d10a      	bne.n	8009062 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800905a:	f043 0304 	orr.w	r3, r3, #4
 800905e:	6013      	str	r3, [r2, #0]
 8009060:	e014      	b.n	800908c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009070:	f023 0304 	bic.w	r3, r3, #4
 8009074:	6013      	str	r3, [r2, #0]
 8009076:	e009      	b.n	800908c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009086:	f023 0304 	bic.w	r3, r3, #4
 800908a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800908c:	2110      	movs	r1, #16
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f7ff fe5e 	bl	8008d50 <USB_FlushTxFifo>
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d001      	beq.n	800909e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f7ff fe8a 	bl	8008db8 <USB_FlushRxFifo>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d001      	beq.n	80090ae <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80090ae:	2300      	movs	r3, #0
 80090b0:	613b      	str	r3, [r7, #16]
 80090b2:	e015      	b.n	80090e0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	015a      	lsls	r2, r3, #5
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	4413      	add	r3, r2
 80090bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090c0:	461a      	mov	r2, r3
 80090c2:	f04f 33ff 	mov.w	r3, #4294967295
 80090c6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	015a      	lsls	r2, r3, #5
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	4413      	add	r3, r2
 80090d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090d4:	461a      	mov	r2, r3
 80090d6:	2300      	movs	r3, #0
 80090d8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	3301      	adds	r3, #1
 80090de:	613b      	str	r3, [r7, #16]
 80090e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e2:	693a      	ldr	r2, [r7, #16]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d3e5      	bcc.n	80090b4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f04f 32ff 	mov.w	r2, #4294967295
 80090f4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00b      	beq.n	800911a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009108:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4a13      	ldr	r2, [pc, #76]	; (800915c <USB_HostInit+0x16c>)
 800910e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a13      	ldr	r2, [pc, #76]	; (8009160 <USB_HostInit+0x170>)
 8009114:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009118:	e009      	b.n	800912e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2280      	movs	r2, #128	; 0x80
 800911e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a10      	ldr	r2, [pc, #64]	; (8009164 <USB_HostInit+0x174>)
 8009124:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4a0f      	ldr	r2, [pc, #60]	; (8009168 <USB_HostInit+0x178>)
 800912a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800912e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009130:	2b00      	cmp	r3, #0
 8009132:	d105      	bne.n	8009140 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	699b      	ldr	r3, [r3, #24]
 8009138:	f043 0210 	orr.w	r2, r3, #16
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	699a      	ldr	r2, [r3, #24]
 8009144:	4b09      	ldr	r3, [pc, #36]	; (800916c <USB_HostInit+0x17c>)
 8009146:	4313      	orrs	r3, r2
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800914c:	7dfb      	ldrb	r3, [r7, #23]
}
 800914e:	4618      	mov	r0, r3
 8009150:	3718      	adds	r7, #24
 8009152:	46bd      	mov	sp, r7
 8009154:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009158:	b004      	add	sp, #16
 800915a:	4770      	bx	lr
 800915c:	01000200 	.word	0x01000200
 8009160:	00e00300 	.word	0x00e00300
 8009164:	00600080 	.word	0x00600080
 8009168:	004000e0 	.word	0x004000e0
 800916c:	a3200008 	.word	0xa3200008

08009170 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	460b      	mov	r3, r1
 800917a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	68fa      	ldr	r2, [r7, #12]
 800918a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800918e:	f023 0303 	bic.w	r3, r3, #3
 8009192:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	78fb      	ldrb	r3, [r7, #3]
 800919e:	f003 0303 	and.w	r3, r3, #3
 80091a2:	68f9      	ldr	r1, [r7, #12]
 80091a4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80091a8:	4313      	orrs	r3, r2
 80091aa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80091ac:	78fb      	ldrb	r3, [r7, #3]
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d107      	bne.n	80091c2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091b8:	461a      	mov	r2, r3
 80091ba:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80091be:	6053      	str	r3, [r2, #4]
 80091c0:	e009      	b.n	80091d6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80091c2:	78fb      	ldrb	r3, [r7, #3]
 80091c4:	2b02      	cmp	r3, #2
 80091c6:	d106      	bne.n	80091d6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091ce:	461a      	mov	r2, r3
 80091d0:	f241 7370 	movw	r3, #6000	; 0x1770
 80091d4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80091d6:	2300      	movs	r3, #0
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3714      	adds	r7, #20
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80091f0:	2300      	movs	r3, #0
 80091f2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009204:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800920e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009212:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009214:	2064      	movs	r0, #100	; 0x64
 8009216:	f7f9 fdff 	bl	8002e18 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009222:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009226:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009228:	200a      	movs	r0, #10
 800922a:	f7f9 fdf5 	bl	8002e18 <HAL_Delay>

  return HAL_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	460b      	mov	r3, r1
 8009242:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009248:	2300      	movs	r3, #0
 800924a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800925c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009264:	2b00      	cmp	r3, #0
 8009266:	d109      	bne.n	800927c <USB_DriveVbus+0x44>
 8009268:	78fb      	ldrb	r3, [r7, #3]
 800926a:	2b01      	cmp	r3, #1
 800926c:	d106      	bne.n	800927c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009276:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800927a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009286:	d109      	bne.n	800929c <USB_DriveVbus+0x64>
 8009288:	78fb      	ldrb	r3, [r7, #3]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d106      	bne.n	800929c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009296:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800929a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3714      	adds	r7, #20
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr

080092aa <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80092aa:	b480      	push	{r7}
 80092ac:	b085      	sub	sp, #20
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80092b6:	2300      	movs	r3, #0
 80092b8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	0c5b      	lsrs	r3, r3, #17
 80092c8:	f003 0303 	and.w	r3, r3, #3
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3714      	adds	r7, #20
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr

080092d8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80092d8:	b480      	push	{r7}
 80092da:	b085      	sub	sp, #20
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	b29b      	uxth	r3, r3
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3714      	adds	r7, #20
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
	...

080092fc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b088      	sub	sp, #32
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	4608      	mov	r0, r1
 8009306:	4611      	mov	r1, r2
 8009308:	461a      	mov	r2, r3
 800930a:	4603      	mov	r3, r0
 800930c:	70fb      	strb	r3, [r7, #3]
 800930e:	460b      	mov	r3, r1
 8009310:	70bb      	strb	r3, [r7, #2]
 8009312:	4613      	mov	r3, r2
 8009314:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009316:	2300      	movs	r3, #0
 8009318:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800931e:	78fb      	ldrb	r3, [r7, #3]
 8009320:	015a      	lsls	r2, r3, #5
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	4413      	add	r3, r2
 8009326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800932a:	461a      	mov	r2, r3
 800932c:	f04f 33ff 	mov.w	r3, #4294967295
 8009330:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009332:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009336:	2b03      	cmp	r3, #3
 8009338:	d87e      	bhi.n	8009438 <USB_HC_Init+0x13c>
 800933a:	a201      	add	r2, pc, #4	; (adr r2, 8009340 <USB_HC_Init+0x44>)
 800933c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009340:	08009351 	.word	0x08009351
 8009344:	080093fb 	.word	0x080093fb
 8009348:	08009351 	.word	0x08009351
 800934c:	080093bd 	.word	0x080093bd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009350:	78fb      	ldrb	r3, [r7, #3]
 8009352:	015a      	lsls	r2, r3, #5
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	4413      	add	r3, r2
 8009358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800935c:	461a      	mov	r2, r3
 800935e:	f240 439d 	movw	r3, #1181	; 0x49d
 8009362:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009364:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009368:	2b00      	cmp	r3, #0
 800936a:	da10      	bge.n	800938e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800936c:	78fb      	ldrb	r3, [r7, #3]
 800936e:	015a      	lsls	r2, r3, #5
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	4413      	add	r3, r2
 8009374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	78fa      	ldrb	r2, [r7, #3]
 800937c:	0151      	lsls	r1, r2, #5
 800937e:	693a      	ldr	r2, [r7, #16]
 8009380:	440a      	add	r2, r1
 8009382:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800938a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800938c:	e057      	b.n	800943e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009396:	2b00      	cmp	r3, #0
 8009398:	d051      	beq.n	800943e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800939a:	78fb      	ldrb	r3, [r7, #3]
 800939c:	015a      	lsls	r2, r3, #5
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	4413      	add	r3, r2
 80093a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	78fa      	ldrb	r2, [r7, #3]
 80093aa:	0151      	lsls	r1, r2, #5
 80093ac:	693a      	ldr	r2, [r7, #16]
 80093ae:	440a      	add	r2, r1
 80093b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80093b8:	60d3      	str	r3, [r2, #12]
      break;
 80093ba:	e040      	b.n	800943e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80093bc:	78fb      	ldrb	r3, [r7, #3]
 80093be:	015a      	lsls	r2, r3, #5
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	4413      	add	r3, r2
 80093c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093c8:	461a      	mov	r2, r3
 80093ca:	f240 639d 	movw	r3, #1693	; 0x69d
 80093ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80093d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	da34      	bge.n	8009442 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80093d8:	78fb      	ldrb	r3, [r7, #3]
 80093da:	015a      	lsls	r2, r3, #5
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	4413      	add	r3, r2
 80093e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	78fa      	ldrb	r2, [r7, #3]
 80093e8:	0151      	lsls	r1, r2, #5
 80093ea:	693a      	ldr	r2, [r7, #16]
 80093ec:	440a      	add	r2, r1
 80093ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093f6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80093f8:	e023      	b.n	8009442 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80093fa:	78fb      	ldrb	r3, [r7, #3]
 80093fc:	015a      	lsls	r2, r3, #5
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	4413      	add	r3, r2
 8009402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009406:	461a      	mov	r2, r3
 8009408:	f240 2325 	movw	r3, #549	; 0x225
 800940c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800940e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009412:	2b00      	cmp	r3, #0
 8009414:	da17      	bge.n	8009446 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009416:	78fb      	ldrb	r3, [r7, #3]
 8009418:	015a      	lsls	r2, r3, #5
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	4413      	add	r3, r2
 800941e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	78fa      	ldrb	r2, [r7, #3]
 8009426:	0151      	lsls	r1, r2, #5
 8009428:	693a      	ldr	r2, [r7, #16]
 800942a:	440a      	add	r2, r1
 800942c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009430:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009434:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009436:	e006      	b.n	8009446 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009438:	2301      	movs	r3, #1
 800943a:	77fb      	strb	r3, [r7, #31]
      break;
 800943c:	e004      	b.n	8009448 <USB_HC_Init+0x14c>
      break;
 800943e:	bf00      	nop
 8009440:	e002      	b.n	8009448 <USB_HC_Init+0x14c>
      break;
 8009442:	bf00      	nop
 8009444:	e000      	b.n	8009448 <USB_HC_Init+0x14c>
      break;
 8009446:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009448:	78fb      	ldrb	r3, [r7, #3]
 800944a:	015a      	lsls	r2, r3, #5
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	4413      	add	r3, r2
 8009450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	78fa      	ldrb	r2, [r7, #3]
 8009458:	0151      	lsls	r1, r2, #5
 800945a:	693a      	ldr	r2, [r7, #16]
 800945c:	440a      	add	r2, r1
 800945e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009462:	f043 0302 	orr.w	r3, r3, #2
 8009466:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800946e:	699a      	ldr	r2, [r3, #24]
 8009470:	78fb      	ldrb	r3, [r7, #3]
 8009472:	f003 030f 	and.w	r3, r3, #15
 8009476:	2101      	movs	r1, #1
 8009478:	fa01 f303 	lsl.w	r3, r1, r3
 800947c:	6939      	ldr	r1, [r7, #16]
 800947e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009482:	4313      	orrs	r3, r2
 8009484:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	699b      	ldr	r3, [r3, #24]
 800948a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009492:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009496:	2b00      	cmp	r3, #0
 8009498:	da03      	bge.n	80094a2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800949a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800949e:	61bb      	str	r3, [r7, #24]
 80094a0:	e001      	b.n	80094a6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80094a2:	2300      	movs	r3, #0
 80094a4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f7ff feff 	bl	80092aa <USB_GetHostSpeed>
 80094ac:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80094ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d106      	bne.n	80094c4 <USB_HC_Init+0x1c8>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2b02      	cmp	r3, #2
 80094ba:	d003      	beq.n	80094c4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80094bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80094c0:	617b      	str	r3, [r7, #20]
 80094c2:	e001      	b.n	80094c8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80094c4:	2300      	movs	r3, #0
 80094c6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80094c8:	787b      	ldrb	r3, [r7, #1]
 80094ca:	059b      	lsls	r3, r3, #22
 80094cc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80094d0:	78bb      	ldrb	r3, [r7, #2]
 80094d2:	02db      	lsls	r3, r3, #11
 80094d4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80094d8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80094da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80094de:	049b      	lsls	r3, r3, #18
 80094e0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80094e4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80094e6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80094e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80094ec:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80094f2:	78fb      	ldrb	r3, [r7, #3]
 80094f4:	0159      	lsls	r1, r3, #5
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	440b      	add	r3, r1
 80094fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094fe:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009504:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009506:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800950a:	2b03      	cmp	r3, #3
 800950c:	d003      	beq.n	8009516 <USB_HC_Init+0x21a>
 800950e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009512:	2b01      	cmp	r3, #1
 8009514:	d10f      	bne.n	8009536 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009516:	78fb      	ldrb	r3, [r7, #3]
 8009518:	015a      	lsls	r2, r3, #5
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	4413      	add	r3, r2
 800951e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	78fa      	ldrb	r2, [r7, #3]
 8009526:	0151      	lsls	r1, r2, #5
 8009528:	693a      	ldr	r2, [r7, #16]
 800952a:	440a      	add	r2, r1
 800952c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009530:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009534:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009536:	7ffb      	ldrb	r3, [r7, #31]
}
 8009538:	4618      	mov	r0, r3
 800953a:	3720      	adds	r7, #32
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b08c      	sub	sp, #48	; 0x30
 8009544:	af02      	add	r7, sp, #8
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	4613      	mov	r3, r2
 800954c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	785b      	ldrb	r3, [r3, #1]
 8009556:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009558:	f44f 7380 	mov.w	r3, #256	; 0x100
 800955c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009566:	2b00      	cmp	r3, #0
 8009568:	d02d      	beq.n	80095c6 <USB_HC_StartXfer+0x86>
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	791b      	ldrb	r3, [r3, #4]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d129      	bne.n	80095c6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009572:	79fb      	ldrb	r3, [r7, #7]
 8009574:	2b01      	cmp	r3, #1
 8009576:	d117      	bne.n	80095a8 <USB_HC_StartXfer+0x68>
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	79db      	ldrb	r3, [r3, #7]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d003      	beq.n	8009588 <USB_HC_StartXfer+0x48>
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	79db      	ldrb	r3, [r3, #7]
 8009584:	2b02      	cmp	r3, #2
 8009586:	d10f      	bne.n	80095a8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009588:	69fb      	ldr	r3, [r7, #28]
 800958a:	015a      	lsls	r2, r3, #5
 800958c:	6a3b      	ldr	r3, [r7, #32]
 800958e:	4413      	add	r3, r2
 8009590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	69fa      	ldr	r2, [r7, #28]
 8009598:	0151      	lsls	r1, r2, #5
 800959a:	6a3a      	ldr	r2, [r7, #32]
 800959c:	440a      	add	r2, r1
 800959e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095a6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80095a8:	79fb      	ldrb	r3, [r7, #7]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d10b      	bne.n	80095c6 <USB_HC_StartXfer+0x86>
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	795b      	ldrb	r3, [r3, #5]
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d107      	bne.n	80095c6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	785b      	ldrb	r3, [r3, #1]
 80095ba:	4619      	mov	r1, r3
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	f000 fa0f 	bl	80099e0 <USB_DoPing>
      return HAL_OK;
 80095c2:	2300      	movs	r3, #0
 80095c4:	e0f8      	b.n	80097b8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	695b      	ldr	r3, [r3, #20]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d018      	beq.n	8009600 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	695b      	ldr	r3, [r3, #20]
 80095d2:	68ba      	ldr	r2, [r7, #8]
 80095d4:	8912      	ldrh	r2, [r2, #8]
 80095d6:	4413      	add	r3, r2
 80095d8:	3b01      	subs	r3, #1
 80095da:	68ba      	ldr	r2, [r7, #8]
 80095dc:	8912      	ldrh	r2, [r2, #8]
 80095de:	fbb3 f3f2 	udiv	r3, r3, r2
 80095e2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80095e4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80095e6:	8b7b      	ldrh	r3, [r7, #26]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d90b      	bls.n	8009604 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80095ec:	8b7b      	ldrh	r3, [r7, #26]
 80095ee:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80095f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80095f2:	68ba      	ldr	r2, [r7, #8]
 80095f4:	8912      	ldrh	r2, [r2, #8]
 80095f6:	fb03 f202 	mul.w	r2, r3, r2
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	611a      	str	r2, [r3, #16]
 80095fe:	e001      	b.n	8009604 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009600:	2301      	movs	r3, #1
 8009602:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	78db      	ldrb	r3, [r3, #3]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d007      	beq.n	800961c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800960c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800960e:	68ba      	ldr	r2, [r7, #8]
 8009610:	8912      	ldrh	r2, [r2, #8]
 8009612:	fb03 f202 	mul.w	r2, r3, r2
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	611a      	str	r2, [r3, #16]
 800961a:	e003      	b.n	8009624 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	695a      	ldr	r2, [r3, #20]
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	691b      	ldr	r3, [r3, #16]
 8009628:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800962c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800962e:	04d9      	lsls	r1, r3, #19
 8009630:	4b63      	ldr	r3, [pc, #396]	; (80097c0 <USB_HC_StartXfer+0x280>)
 8009632:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009634:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	7a9b      	ldrb	r3, [r3, #10]
 800963a:	075b      	lsls	r3, r3, #29
 800963c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009640:	69f9      	ldr	r1, [r7, #28]
 8009642:	0148      	lsls	r0, r1, #5
 8009644:	6a39      	ldr	r1, [r7, #32]
 8009646:	4401      	add	r1, r0
 8009648:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800964c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800964e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009650:	79fb      	ldrb	r3, [r7, #7]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d009      	beq.n	800966a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	68d9      	ldr	r1, [r3, #12]
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	015a      	lsls	r2, r3, #5
 800965e:	6a3b      	ldr	r3, [r7, #32]
 8009660:	4413      	add	r3, r2
 8009662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009666:	460a      	mov	r2, r1
 8009668:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800966a:	6a3b      	ldr	r3, [r7, #32]
 800966c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	f003 0301 	and.w	r3, r3, #1
 8009676:	2b00      	cmp	r3, #0
 8009678:	bf0c      	ite	eq
 800967a:	2301      	moveq	r3, #1
 800967c:	2300      	movne	r3, #0
 800967e:	b2db      	uxtb	r3, r3
 8009680:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	015a      	lsls	r2, r3, #5
 8009686:	6a3b      	ldr	r3, [r7, #32]
 8009688:	4413      	add	r3, r2
 800968a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	69fa      	ldr	r2, [r7, #28]
 8009692:	0151      	lsls	r1, r2, #5
 8009694:	6a3a      	ldr	r2, [r7, #32]
 8009696:	440a      	add	r2, r1
 8009698:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800969c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80096a0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	015a      	lsls	r2, r3, #5
 80096a6:	6a3b      	ldr	r3, [r7, #32]
 80096a8:	4413      	add	r3, r2
 80096aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	7e7b      	ldrb	r3, [r7, #25]
 80096b2:	075b      	lsls	r3, r3, #29
 80096b4:	69f9      	ldr	r1, [r7, #28]
 80096b6:	0148      	lsls	r0, r1, #5
 80096b8:	6a39      	ldr	r1, [r7, #32]
 80096ba:	4401      	add	r1, r0
 80096bc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80096c0:	4313      	orrs	r3, r2
 80096c2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	015a      	lsls	r2, r3, #5
 80096c8:	6a3b      	ldr	r3, [r7, #32]
 80096ca:	4413      	add	r3, r2
 80096cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80096da:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	78db      	ldrb	r3, [r3, #3]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d004      	beq.n	80096ee <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096ea:	613b      	str	r3, [r7, #16]
 80096ec:	e003      	b.n	80096f6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80096f4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80096fc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	015a      	lsls	r2, r3, #5
 8009702:	6a3b      	ldr	r3, [r7, #32]
 8009704:	4413      	add	r3, r2
 8009706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800970a:	461a      	mov	r2, r3
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009710:	79fb      	ldrb	r3, [r7, #7]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d001      	beq.n	800971a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009716:	2300      	movs	r3, #0
 8009718:	e04e      	b.n	80097b8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	78db      	ldrb	r3, [r3, #3]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d149      	bne.n	80097b6 <USB_HC_StartXfer+0x276>
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	695b      	ldr	r3, [r3, #20]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d045      	beq.n	80097b6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	79db      	ldrb	r3, [r3, #7]
 800972e:	2b03      	cmp	r3, #3
 8009730:	d830      	bhi.n	8009794 <USB_HC_StartXfer+0x254>
 8009732:	a201      	add	r2, pc, #4	; (adr r2, 8009738 <USB_HC_StartXfer+0x1f8>)
 8009734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009738:	08009749 	.word	0x08009749
 800973c:	0800976d 	.word	0x0800976d
 8009740:	08009749 	.word	0x08009749
 8009744:	0800976d 	.word	0x0800976d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	695b      	ldr	r3, [r3, #20]
 800974c:	3303      	adds	r3, #3
 800974e:	089b      	lsrs	r3, r3, #2
 8009750:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009752:	8afa      	ldrh	r2, [r7, #22]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009758:	b29b      	uxth	r3, r3
 800975a:	429a      	cmp	r2, r3
 800975c:	d91c      	bls.n	8009798 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	699b      	ldr	r3, [r3, #24]
 8009762:	f043 0220 	orr.w	r2, r3, #32
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	619a      	str	r2, [r3, #24]
        }
        break;
 800976a:	e015      	b.n	8009798 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	695b      	ldr	r3, [r3, #20]
 8009770:	3303      	adds	r3, #3
 8009772:	089b      	lsrs	r3, r3, #2
 8009774:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009776:	8afa      	ldrh	r2, [r7, #22]
 8009778:	6a3b      	ldr	r3, [r7, #32]
 800977a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	b29b      	uxth	r3, r3
 8009782:	429a      	cmp	r2, r3
 8009784:	d90a      	bls.n	800979c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	699b      	ldr	r3, [r3, #24]
 800978a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	619a      	str	r2, [r3, #24]
        }
        break;
 8009792:	e003      	b.n	800979c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009794:	bf00      	nop
 8009796:	e002      	b.n	800979e <USB_HC_StartXfer+0x25e>
        break;
 8009798:	bf00      	nop
 800979a:	e000      	b.n	800979e <USB_HC_StartXfer+0x25e>
        break;
 800979c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	68d9      	ldr	r1, [r3, #12]
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	785a      	ldrb	r2, [r3, #1]
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	695b      	ldr	r3, [r3, #20]
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	2000      	movs	r0, #0
 80097ae:	9000      	str	r0, [sp, #0]
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f7ff fb31 	bl	8008e18 <USB_WritePacket>
  }

  return HAL_OK;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3728      	adds	r7, #40	; 0x28
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	1ff80000 	.word	0x1ff80000

080097c4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b085      	sub	sp, #20
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097d6:	695b      	ldr	r3, [r3, #20]
 80097d8:	b29b      	uxth	r3, r3
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3714      	adds	r7, #20
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr

080097e6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80097e6:	b480      	push	{r7}
 80097e8:	b089      	sub	sp, #36	; 0x24
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
 80097ee:	460b      	mov	r3, r1
 80097f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80097f6:	78fb      	ldrb	r3, [r7, #3]
 80097f8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80097fa:	2300      	movs	r3, #0
 80097fc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	015a      	lsls	r2, r3, #5
 8009802:	69fb      	ldr	r3, [r7, #28]
 8009804:	4413      	add	r3, r2
 8009806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	0c9b      	lsrs	r3, r3, #18
 800980e:	f003 0303 	and.w	r3, r3, #3
 8009812:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009814:	69bb      	ldr	r3, [r7, #24]
 8009816:	015a      	lsls	r2, r3, #5
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	4413      	add	r3, r2
 800981c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	0fdb      	lsrs	r3, r3, #31
 8009824:	f003 0301 	and.w	r3, r3, #1
 8009828:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	f003 0320 	and.w	r3, r3, #32
 8009832:	2b20      	cmp	r3, #32
 8009834:	d104      	bne.n	8009840 <USB_HC_Halt+0x5a>
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d101      	bne.n	8009840 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800983c:	2300      	movs	r3, #0
 800983e:	e0c8      	b.n	80099d2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d002      	beq.n	800984c <USB_HC_Halt+0x66>
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	2b02      	cmp	r3, #2
 800984a:	d163      	bne.n	8009914 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	015a      	lsls	r2, r3, #5
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	4413      	add	r3, r2
 8009854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	69ba      	ldr	r2, [r7, #24]
 800985c:	0151      	lsls	r1, r2, #5
 800985e:	69fa      	ldr	r2, [r7, #28]
 8009860:	440a      	add	r2, r1
 8009862:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009866:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800986a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	f003 0320 	and.w	r3, r3, #32
 8009874:	2b00      	cmp	r3, #0
 8009876:	f040 80ab 	bne.w	80099d0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009882:	2b00      	cmp	r3, #0
 8009884:	d133      	bne.n	80098ee <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	015a      	lsls	r2, r3, #5
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	4413      	add	r3, r2
 800988e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	69ba      	ldr	r2, [r7, #24]
 8009896:	0151      	lsls	r1, r2, #5
 8009898:	69fa      	ldr	r2, [r7, #28]
 800989a:	440a      	add	r2, r1
 800989c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098a4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	015a      	lsls	r2, r3, #5
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	4413      	add	r3, r2
 80098ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	69ba      	ldr	r2, [r7, #24]
 80098b6:	0151      	lsls	r1, r2, #5
 80098b8:	69fa      	ldr	r2, [r7, #28]
 80098ba:	440a      	add	r2, r1
 80098bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098c4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	3301      	adds	r3, #1
 80098ca:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098d2:	d81d      	bhi.n	8009910 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	015a      	lsls	r2, r3, #5
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	4413      	add	r3, r2
 80098dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098ea:	d0ec      	beq.n	80098c6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80098ec:	e070      	b.n	80099d0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	015a      	lsls	r2, r3, #5
 80098f2:	69fb      	ldr	r3, [r7, #28]
 80098f4:	4413      	add	r3, r2
 80098f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	69ba      	ldr	r2, [r7, #24]
 80098fe:	0151      	lsls	r1, r2, #5
 8009900:	69fa      	ldr	r2, [r7, #28]
 8009902:	440a      	add	r2, r1
 8009904:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009908:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800990c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800990e:	e05f      	b.n	80099d0 <USB_HC_Halt+0x1ea>
            break;
 8009910:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009912:	e05d      	b.n	80099d0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	015a      	lsls	r2, r3, #5
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	4413      	add	r3, r2
 800991c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	69ba      	ldr	r2, [r7, #24]
 8009924:	0151      	lsls	r1, r2, #5
 8009926:	69fa      	ldr	r2, [r7, #28]
 8009928:	440a      	add	r2, r1
 800992a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800992e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009932:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009934:	69fb      	ldr	r3, [r7, #28]
 8009936:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009940:	2b00      	cmp	r3, #0
 8009942:	d133      	bne.n	80099ac <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009944:	69bb      	ldr	r3, [r7, #24]
 8009946:	015a      	lsls	r2, r3, #5
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	4413      	add	r3, r2
 800994c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	69ba      	ldr	r2, [r7, #24]
 8009954:	0151      	lsls	r1, r2, #5
 8009956:	69fa      	ldr	r2, [r7, #28]
 8009958:	440a      	add	r2, r1
 800995a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800995e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009962:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009964:	69bb      	ldr	r3, [r7, #24]
 8009966:	015a      	lsls	r2, r3, #5
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	4413      	add	r3, r2
 800996c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	69ba      	ldr	r2, [r7, #24]
 8009974:	0151      	lsls	r1, r2, #5
 8009976:	69fa      	ldr	r2, [r7, #28]
 8009978:	440a      	add	r2, r1
 800997a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800997e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009982:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	3301      	adds	r3, #1
 8009988:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009990:	d81d      	bhi.n	80099ce <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	015a      	lsls	r2, r3, #5
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	4413      	add	r3, r2
 800999a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099a8:	d0ec      	beq.n	8009984 <USB_HC_Halt+0x19e>
 80099aa:	e011      	b.n	80099d0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	015a      	lsls	r2, r3, #5
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	4413      	add	r3, r2
 80099b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	69ba      	ldr	r2, [r7, #24]
 80099bc:	0151      	lsls	r1, r2, #5
 80099be:	69fa      	ldr	r2, [r7, #28]
 80099c0:	440a      	add	r2, r1
 80099c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80099ca:	6013      	str	r3, [r2, #0]
 80099cc:	e000      	b.n	80099d0 <USB_HC_Halt+0x1ea>
          break;
 80099ce:	bf00      	nop
    }
  }

  return HAL_OK;
 80099d0:	2300      	movs	r3, #0
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3724      	adds	r7, #36	; 0x24
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
	...

080099e0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b087      	sub	sp, #28
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	460b      	mov	r3, r1
 80099ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80099f0:	78fb      	ldrb	r3, [r7, #3]
 80099f2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80099f4:	2301      	movs	r3, #1
 80099f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	04da      	lsls	r2, r3, #19
 80099fc:	4b15      	ldr	r3, [pc, #84]	; (8009a54 <USB_DoPing+0x74>)
 80099fe:	4013      	ands	r3, r2
 8009a00:	693a      	ldr	r2, [r7, #16]
 8009a02:	0151      	lsls	r1, r2, #5
 8009a04:	697a      	ldr	r2, [r7, #20]
 8009a06:	440a      	add	r2, r1
 8009a08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a10:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	015a      	lsls	r2, r3, #5
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	4413      	add	r3, r2
 8009a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009a28:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a30:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	015a      	lsls	r2, r3, #5
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	4413      	add	r3, r2
 8009a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a3e:	461a      	mov	r2, r3
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009a44:	2300      	movs	r3, #0
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	371c      	adds	r7, #28
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr
 8009a52:	bf00      	nop
 8009a54:	1ff80000 	.word	0x1ff80000

08009a58 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b088      	sub	sp, #32
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009a60:	2300      	movs	r3, #0
 8009a62:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f7ff f911 	bl	8008c94 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009a72:	2110      	movs	r1, #16
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f7ff f96b 	bl	8008d50 <USB_FlushTxFifo>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d001      	beq.n	8009a84 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009a80:	2301      	movs	r3, #1
 8009a82:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f7ff f997 	bl	8008db8 <USB_FlushRxFifo>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d001      	beq.n	8009a94 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009a90:	2301      	movs	r3, #1
 8009a92:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009a94:	2300      	movs	r3, #0
 8009a96:	61bb      	str	r3, [r7, #24]
 8009a98:	e01f      	b.n	8009ada <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	015a      	lsls	r2, r3, #5
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ab0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ab8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009ac0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009ac2:	69bb      	ldr	r3, [r7, #24]
 8009ac4:	015a      	lsls	r2, r3, #5
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	4413      	add	r3, r2
 8009aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ace:	461a      	mov	r2, r3
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	61bb      	str	r3, [r7, #24]
 8009ada:	69bb      	ldr	r3, [r7, #24]
 8009adc:	2b0f      	cmp	r3, #15
 8009ade:	d9dc      	bls.n	8009a9a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	61bb      	str	r3, [r7, #24]
 8009ae4:	e034      	b.n	8009b50 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	015a      	lsls	r2, r3, #5
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	4413      	add	r3, r2
 8009aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009afc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b04:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009b0c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	015a      	lsls	r2, r3, #5
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	4413      	add	r3, r2
 8009b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	3301      	adds	r3, #1
 8009b24:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b2c:	d80c      	bhi.n	8009b48 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	015a      	lsls	r2, r3, #5
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	4413      	add	r3, r2
 8009b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b44:	d0ec      	beq.n	8009b20 <USB_StopHost+0xc8>
 8009b46:	e000      	b.n	8009b4a <USB_StopHost+0xf2>
        break;
 8009b48:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009b4a:	69bb      	ldr	r3, [r7, #24]
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	61bb      	str	r3, [r7, #24]
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	2b0f      	cmp	r3, #15
 8009b54:	d9c7      	bls.n	8009ae6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b62:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f04f 32ff 	mov.w	r2, #4294967295
 8009b6a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f7ff f880 	bl	8008c72 <USB_EnableGlobalInt>

  return ret;
 8009b72:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3720      	adds	r7, #32
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  //retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
	FATFS_LinkDriver(&SD0_Driver, SD0Path);
 8009b80:	4908      	ldr	r1, [pc, #32]	; (8009ba4 <MX_FATFS_Init+0x28>)
 8009b82:	4809      	ldr	r0, [pc, #36]	; (8009ba8 <MX_FATFS_Init+0x2c>)
 8009b84:	f007 fc18 	bl	80113b8 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD1_Driver, SD1Path);
 8009b88:	4908      	ldr	r1, [pc, #32]	; (8009bac <MX_FATFS_Init+0x30>)
 8009b8a:	4809      	ldr	r0, [pc, #36]	; (8009bb0 <MX_FATFS_Init+0x34>)
 8009b8c:	f007 fc14 	bl	80113b8 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD2_Driver, SD2Path);
 8009b90:	4908      	ldr	r1, [pc, #32]	; (8009bb4 <MX_FATFS_Init+0x38>)
 8009b92:	4809      	ldr	r0, [pc, #36]	; (8009bb8 <MX_FATFS_Init+0x3c>)
 8009b94:	f007 fc10 	bl	80113b8 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD3_Driver, SD3Path);
 8009b98:	4908      	ldr	r1, [pc, #32]	; (8009bbc <MX_FATFS_Init+0x40>)
 8009b9a:	4809      	ldr	r0, [pc, #36]	; (8009bc0 <MX_FATFS_Init+0x44>)
 8009b9c:	f007 fc0c 	bl	80113b8 <FATFS_LinkDriver>


  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009ba0:	bf00      	nop
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	20001dcc 	.word	0x20001dcc
 8009ba8:	20000240 	.word	0x20000240
 8009bac:	20001dd0 	.word	0x20001dd0
 8009bb0:	20000254 	.word	0x20000254
 8009bb4:	20001dd4 	.word	0x20001dd4
 8009bb8:	20000268 	.word	0x20000268
 8009bbc:	20001dd8 	.word	0x20001dd8
 8009bc0:	2000027c 	.word	0x2000027c

08009bc4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009bc8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <SD0_initialize>:
  * @brief  Initializes a Drive
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS SD0_initialize (BYTE pdrv)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	4603      	mov	r3, r0
 8009bdc:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(0);
 8009bde:	2000      	movs	r0, #0
 8009be0:	f7f8 fa64 	bl	80020ac <sd_ss_set_active>
	return USER_initialize(pdrv);
 8009be4:	79fb      	ldrb	r3, [r7, #7]
 8009be6:	4618      	mov	r0, r3
 8009be8:	f000 f838 	bl	8009c5c <USER_initialize>
 8009bec:	4603      	mov	r3, r0
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3708      	adds	r7, #8
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <SD1_initialize>:
DSTATUS SD1_initialize (BYTE pdrv)
{
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b082      	sub	sp, #8
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(1);
 8009c00:	2001      	movs	r0, #1
 8009c02:	f7f8 fa53 	bl	80020ac <sd_ss_set_active>
	return USER_initialize(pdrv);
 8009c06:	79fb      	ldrb	r3, [r7, #7]
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f000 f827 	bl	8009c5c <USER_initialize>
 8009c0e:	4603      	mov	r3, r0
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3708      	adds	r7, #8
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <SD2_initialize>:
DSTATUS SD2_initialize (BYTE pdrv)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	4603      	mov	r3, r0
 8009c20:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(2);
 8009c22:	2002      	movs	r0, #2
 8009c24:	f7f8 fa42 	bl	80020ac <sd_ss_set_active>
	return USER_initialize(pdrv);
 8009c28:	79fb      	ldrb	r3, [r7, #7]
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f000 f816 	bl	8009c5c <USER_initialize>
 8009c30:	4603      	mov	r3, r0
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3708      	adds	r7, #8
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <SD3_initialize>:
DSTATUS SD3_initialize (BYTE pdrv)
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b082      	sub	sp, #8
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	4603      	mov	r3, r0
 8009c42:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(3);
 8009c44:	2003      	movs	r0, #3
 8009c46:	f7f8 fa31 	bl	80020ac <sd_ss_set_active>
	return USER_initialize(pdrv);
 8009c4a:	79fb      	ldrb	r3, [r7, #7]
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f000 f805 	bl	8009c5c <USER_initialize>
 8009c52:	4603      	mov	r3, r0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3708      	adds	r7, #8
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <USER_initialize>:

DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	4603      	mov	r3, r0
 8009c64:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	//SD_PowerOn();
	SS_SD_SELECT();
 8009c66:	f7f8 fa3f 	bl	80020e8 <sd_ss_active_pin_down>
	if(sd_ini()==0) {Stat &= ~STA_NOINIT;} // STA_NOINIT
 8009c6a:	f7f8 fabf 	bl	80021ec <sd_ini>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d107      	bne.n	8009c84 <USER_initialize+0x28>
 8009c74:	4b08      	ldr	r3, [pc, #32]	; (8009c98 <USER_initialize+0x3c>)
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	f023 0301 	bic.w	r3, r3, #1
 8009c7e:	b2da      	uxtb	r2, r3
 8009c80:	4b05      	ldr	r3, [pc, #20]	; (8009c98 <USER_initialize+0x3c>)
 8009c82:	701a      	strb	r2, [r3, #0]
	SS_SD_DESELECT();
 8009c84:	f7f8 fa40 	bl	8002108 <sd_ss_active_pin_up>
    return Stat;
 8009c88:	4b03      	ldr	r3, [pc, #12]	; (8009c98 <USER_initialize+0x3c>)
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3708      	adds	r7, #8
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	2000023d 	.word	0x2000023d

08009c9c <SD0_status>:
  * @brief  Gets Disk Status
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS SD0_status (BYTE pdrv)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(0);
 8009ca6:	2000      	movs	r0, #0
 8009ca8:	f7f8 fa00 	bl	80020ac <sd_ss_set_active>
	return USER_status(pdrv);
 8009cac:	79fb      	ldrb	r3, [r7, #7]
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f000 f838 	bl	8009d24 <USER_status>
 8009cb4:	4603      	mov	r3, r0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3708      	adds	r7, #8
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <SD1_status>:
DSTATUS SD1_status (BYTE pdrv)
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b082      	sub	sp, #8
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(1);
 8009cc8:	2001      	movs	r0, #1
 8009cca:	f7f8 f9ef 	bl	80020ac <sd_ss_set_active>
	return USER_status(pdrv);
 8009cce:	79fb      	ldrb	r3, [r7, #7]
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f000 f827 	bl	8009d24 <USER_status>
 8009cd6:	4603      	mov	r3, r0
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3708      	adds	r7, #8
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <SD2_status>:
DSTATUS SD2_status (BYTE pdrv)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(2);
 8009cea:	2002      	movs	r0, #2
 8009cec:	f7f8 f9de 	bl	80020ac <sd_ss_set_active>
	return USER_status(pdrv);
 8009cf0:	79fb      	ldrb	r3, [r7, #7]
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f000 f816 	bl	8009d24 <USER_status>
 8009cf8:	4603      	mov	r3, r0
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}

08009d02 <SD3_status>:
DSTATUS SD3_status (BYTE pdrv)
{
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b082      	sub	sp, #8
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	4603      	mov	r3, r0
 8009d0a:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(3);
 8009d0c:	2003      	movs	r0, #3
 8009d0e:	f7f8 f9cd 	bl	80020ac <sd_ss_set_active>
	return USER_status(pdrv);
 8009d12:	79fb      	ldrb	r3, [r7, #7]
 8009d14:	4618      	mov	r0, r3
 8009d16:	f000 f805 	bl	8009d24 <USER_status>
 8009d1a:	4603      	mov	r3, r0
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <USER_status>:

DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	SS_SD_SELECT();
 8009d2e:	f7f8 f9db 	bl	80020e8 <sd_ss_active_pin_down>
	if (pdrv) return STA_NOINIT;
 8009d32:	79fb      	ldrb	r3, [r7, #7]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d001      	beq.n	8009d3c <USER_status+0x18>
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e004      	b.n	8009d46 <USER_status+0x22>
	SS_SD_DESELECT();
 8009d3c:	f7f8 f9e4 	bl	8002108 <sd_ss_active_pin_up>
    return Stat;
 8009d40:	4b03      	ldr	r3, [pc, #12]	; (8009d50 <USER_status+0x2c>)
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3708      	adds	r7, #8
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	2000023d 	.word	0x2000023d

08009d54 <SD0_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DSTATUS SD0_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60b9      	str	r1, [r7, #8]
 8009d5c:	607a      	str	r2, [r7, #4]
 8009d5e:	603b      	str	r3, [r7, #0]
 8009d60:	4603      	mov	r3, r0
 8009d62:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(0);
 8009d64:	2000      	movs	r0, #0
 8009d66:	f7f8 f9a1 	bl	80020ac <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 8009d6a:	7bf8      	ldrb	r0, [r7, #15]
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	68b9      	ldr	r1, [r7, #8]
 8009d72:	f000 f847 	bl	8009e04 <USER_read>
 8009d76:	4603      	mov	r3, r0
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3710      	adds	r7, #16
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <SD1_read>:
DSTATUS SD1_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60b9      	str	r1, [r7, #8]
 8009d88:	607a      	str	r2, [r7, #4]
 8009d8a:	603b      	str	r3, [r7, #0]
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(1);
 8009d90:	2001      	movs	r0, #1
 8009d92:	f7f8 f98b 	bl	80020ac <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 8009d96:	7bf8      	ldrb	r0, [r7, #15]
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	68b9      	ldr	r1, [r7, #8]
 8009d9e:	f000 f831 	bl	8009e04 <USER_read>
 8009da2:	4603      	mov	r3, r0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3710      	adds	r7, #16
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <SD2_read>:
DSTATUS SD2_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60b9      	str	r1, [r7, #8]
 8009db4:	607a      	str	r2, [r7, #4]
 8009db6:	603b      	str	r3, [r7, #0]
 8009db8:	4603      	mov	r3, r0
 8009dba:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(2);
 8009dbc:	2002      	movs	r0, #2
 8009dbe:	f7f8 f975 	bl	80020ac <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 8009dc2:	7bf8      	ldrb	r0, [r7, #15]
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	68b9      	ldr	r1, [r7, #8]
 8009dca:	f000 f81b 	bl	8009e04 <USER_read>
 8009dce:	4603      	mov	r3, r0
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3710      	adds	r7, #16
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <SD3_read>:
DSTATUS SD3_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60b9      	str	r1, [r7, #8]
 8009de0:	607a      	str	r2, [r7, #4]
 8009de2:	603b      	str	r3, [r7, #0]
 8009de4:	4603      	mov	r3, r0
 8009de6:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(3);
 8009de8:	2003      	movs	r0, #3
 8009dea:	f7f8 f95f 	bl	80020ac <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 8009dee:	7bf8      	ldrb	r0, [r7, #15]
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	68b9      	ldr	r1, [r7, #8]
 8009df6:	f000 f805 	bl	8009e04 <USER_read>
 8009dfa:	4603      	mov	r3, r0
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3710      	adds	r7, #16
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	60b9      	str	r1, [r7, #8]
 8009e0c:	607a      	str	r2, [r7, #4]
 8009e0e:	603b      	str	r3, [r7, #0]
 8009e10:	4603      	mov	r3, r0
 8009e12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	SS_SD_SELECT();
 8009e14:	f7f8 f968 	bl	80020e8 <sd_ss_active_pin_down>
	if (pdrv || !count) return RES_PARERR;
 8009e18:	7bfb      	ldrb	r3, [r7, #15]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d102      	bne.n	8009e24 <USER_read+0x20>
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d101      	bne.n	8009e28 <USER_read+0x24>
 8009e24:	2304      	movs	r3, #4
 8009e26:	e043      	b.n	8009eb0 <USER_read+0xac>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009e28:	4b23      	ldr	r3, [pc, #140]	; (8009eb8 <USER_read+0xb4>)
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	f003 0301 	and.w	r3, r3, #1
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d001      	beq.n	8009e3a <USER_read+0x36>
 8009e36:	2303      	movs	r3, #3
 8009e38:	e03a      	b.n	8009eb0 <USER_read+0xac>
	if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 8009e3a:	4b20      	ldr	r3, [pc, #128]	; (8009ebc <USER_read+0xb8>)
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	b2db      	uxtb	r3, r3
 8009e40:	f003 0304 	and.w	r3, r3, #4
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d102      	bne.n	8009e4e <USER_read+0x4a>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	025b      	lsls	r3, r3, #9
 8009e4c:	607b      	str	r3, [r7, #4]
	if (count == 1) /* Single block read */
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d106      	bne.n	8009e62 <USER_read+0x5e>
	{
	  SD_Read_Block(buff,sector); //Ð¡Ñ‡Ð¸Ñ‚Ð°ÐµÐ¼ Ð±Ð»Ð¾Ðº Ð² Ð±ÑƒÑ„ÐµÑ€
 8009e54:	6879      	ldr	r1, [r7, #4]
 8009e56:	68b8      	ldr	r0, [r7, #8]
 8009e58:	f7f8 fb01 	bl	800245e <SD_Read_Block>
	  count = 0;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	603b      	str	r3, [r7, #0]
 8009e60:	e01c      	b.n	8009e9c <USER_read+0x98>
	}
	else /* Multiple block read */
	{
		do{
			SD_Read_Block((BYTE*)buff,sector);
 8009e62:	6879      	ldr	r1, [r7, #4]
 8009e64:	68b8      	ldr	r0, [r7, #8]
 8009e66:	f7f8 fafa 	bl	800245e <SD_Read_Block>
			if (!(sdinfo.type & 4)){
 8009e6a:	4b14      	ldr	r3, [pc, #80]	; (8009ebc <USER_read+0xb8>)
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	f003 0304 	and.w	r3, r3, #4
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d104      	bne.n	8009e82 <USER_read+0x7e>
				sector+=512;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009e7e:	607b      	str	r3, [r7, #4]
 8009e80:	e002      	b.n	8009e88 <USER_read+0x84>
			}
			else sector++;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	3301      	adds	r3, #1
 8009e86:	607b      	str	r3, [r7, #4]
			buff+=512;
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009e8e:	60bb      	str	r3, [r7, #8]
			count--;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	3b01      	subs	r3, #1
 8009e94:	603b      	str	r3, [r7, #0]
		}while(count>0);
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d1e2      	bne.n	8009e62 <USER_read+0x5e>
	}
	SPI_Release();
 8009e9c:	f7f8 fad8 	bl	8002450 <SPI_Release>
	SS_SD_DESELECT();
 8009ea0:	f7f8 f932 	bl	8002108 <sd_ss_active_pin_up>
	return count ? RES_ERROR : RES_OK;
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	bf14      	ite	ne
 8009eaa:	2301      	movne	r3, #1
 8009eac:	2300      	moveq	r3, #0
 8009eae:	b2db      	uxtb	r3, r3
    return RES_OK;
  /* USER CODE END READ */
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3710      	adds	r7, #16
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	2000023d 	.word	0x2000023d
 8009ebc:	20001b30 	.word	0x20001b30

08009ec0 <SD0_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DSTATUS SD0_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60b9      	str	r1, [r7, #8]
 8009ec8:	607a      	str	r2, [r7, #4]
 8009eca:	603b      	str	r3, [r7, #0]
 8009ecc:	4603      	mov	r3, r0
 8009ece:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(0);
 8009ed0:	2000      	movs	r0, #0
 8009ed2:	f7f8 f8eb 	bl	80020ac <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 8009ed6:	7bf8      	ldrb	r0, [r7, #15]
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	68b9      	ldr	r1, [r7, #8]
 8009ede:	f000 f847 	bl	8009f70 <USER_write>
 8009ee2:	4603      	mov	r3, r0
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3710      	adds	r7, #16
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <SD1_write>:
DSTATUS SD1_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	60b9      	str	r1, [r7, #8]
 8009ef4:	607a      	str	r2, [r7, #4]
 8009ef6:	603b      	str	r3, [r7, #0]
 8009ef8:	4603      	mov	r3, r0
 8009efa:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(1);
 8009efc:	2001      	movs	r0, #1
 8009efe:	f7f8 f8d5 	bl	80020ac <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 8009f02:	7bf8      	ldrb	r0, [r7, #15]
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	68b9      	ldr	r1, [r7, #8]
 8009f0a:	f000 f831 	bl	8009f70 <USER_write>
 8009f0e:	4603      	mov	r3, r0
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3710      	adds	r7, #16
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <SD2_write>:
DSTATUS SD2_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60b9      	str	r1, [r7, #8]
 8009f20:	607a      	str	r2, [r7, #4]
 8009f22:	603b      	str	r3, [r7, #0]
 8009f24:	4603      	mov	r3, r0
 8009f26:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(2);
 8009f28:	2002      	movs	r0, #2
 8009f2a:	f7f8 f8bf 	bl	80020ac <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 8009f2e:	7bf8      	ldrb	r0, [r7, #15]
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	68b9      	ldr	r1, [r7, #8]
 8009f36:	f000 f81b 	bl	8009f70 <USER_write>
 8009f3a:	4603      	mov	r3, r0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <SD3_write>:
DSTATUS SD3_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60b9      	str	r1, [r7, #8]
 8009f4c:	607a      	str	r2, [r7, #4]
 8009f4e:	603b      	str	r3, [r7, #0]
 8009f50:	4603      	mov	r3, r0
 8009f52:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(3);
 8009f54:	2003      	movs	r0, #3
 8009f56:	f7f8 f8a9 	bl	80020ac <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 8009f5a:	7bf8      	ldrb	r0, [r7, #15]
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	68b9      	ldr	r1, [r7, #8]
 8009f62:	f000 f805 	bl	8009f70 <USER_write>
 8009f66:	4603      	mov	r3, r0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3710      	adds	r7, #16
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b086      	sub	sp, #24
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60b9      	str	r1, [r7, #8]
 8009f78:	607a      	str	r2, [r7, #4]
 8009f7a:	603b      	str	r3, [r7, #0]
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	uint8_t res;
	SS_SD_SELECT();
 8009f80:	f7f8 f8b2 	bl	80020e8 <sd_ss_active_pin_down>
	if (pdrv || !count) return RES_PARERR;
 8009f84:	7bfb      	ldrb	r3, [r7, #15]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d102      	bne.n	8009f90 <USER_write+0x20>
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d101      	bne.n	8009f94 <USER_write+0x24>
 8009f90:	2304      	movs	r3, #4
 8009f92:	e02c      	b.n	8009fee <USER_write+0x7e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009f94:	4b18      	ldr	r3, [pc, #96]	; (8009ff8 <USER_write+0x88>)
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	f003 0301 	and.w	r3, r3, #1
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d001      	beq.n	8009fa6 <USER_write+0x36>
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	e023      	b.n	8009fee <USER_write+0x7e>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8009fa6:	4b14      	ldr	r3, [pc, #80]	; (8009ff8 <USER_write+0x88>)
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	f003 0304 	and.w	r3, r3, #4
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d001      	beq.n	8009fb8 <USER_write+0x48>
 8009fb4:	2302      	movs	r3, #2
 8009fb6:	e01a      	b.n	8009fee <USER_write+0x7e>
	if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 8009fb8:	4b10      	ldr	r3, [pc, #64]	; (8009ffc <USER_write+0x8c>)
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	f003 0304 	and.w	r3, r3, #4
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d102      	bne.n	8009fcc <USER_write+0x5c>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	025b      	lsls	r3, r3, #9
 8009fca:	607b      	str	r3, [r7, #4]
  	res=SD_Write_Blocks((BYTE*)buff,sector,count);
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	6879      	ldr	r1, [r7, #4]
 8009fd4:	68b8      	ldr	r0, [r7, #8]
 8009fd6:	f7f8 fa87 	bl	80024e8 <SD_Write_Blocks>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	75fb      	strb	r3, [r7, #23]
	SS_SD_DESELECT();
 8009fde:	f7f8 f893 	bl	8002108 <sd_ss_active_pin_up>

	return res ? RES_ERROR : RES_OK;
 8009fe2:	7dfb      	ldrb	r3, [r7, #23]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	bf14      	ite	ne
 8009fe8:	2301      	movne	r3, #1
 8009fea:	2300      	moveq	r3, #0
 8009fec:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3718      	adds	r7, #24
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	2000023d 	.word	0x2000023d
 8009ffc:	20001b30 	.word	0x20001b30

0800a000 <SD0_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DSTATUS SD0_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b082      	sub	sp, #8
 800a004:	af00      	add	r7, sp, #0
 800a006:	4603      	mov	r3, r0
 800a008:	603a      	str	r2, [r7, #0]
 800a00a:	71fb      	strb	r3, [r7, #7]
 800a00c:	460b      	mov	r3, r1
 800a00e:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(0);
 800a010:	2000      	movs	r0, #0
 800a012:	f7f8 f84b 	bl	80020ac <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 800a016:	79b9      	ldrb	r1, [r7, #6]
 800a018:	79fb      	ldrb	r3, [r7, #7]
 800a01a:	683a      	ldr	r2, [r7, #0]
 800a01c:	4618      	mov	r0, r3
 800a01e:	f000 f847 	bl	800a0b0 <USER_ioctl>
 800a022:	4603      	mov	r3, r0
}
 800a024:	4618      	mov	r0, r3
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <SD1_ioctl>:
DSTATUS SD1_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	4603      	mov	r3, r0
 800a034:	603a      	str	r2, [r7, #0]
 800a036:	71fb      	strb	r3, [r7, #7]
 800a038:	460b      	mov	r3, r1
 800a03a:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(1);
 800a03c:	2001      	movs	r0, #1
 800a03e:	f7f8 f835 	bl	80020ac <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 800a042:	79b9      	ldrb	r1, [r7, #6]
 800a044:	79fb      	ldrb	r3, [r7, #7]
 800a046:	683a      	ldr	r2, [r7, #0]
 800a048:	4618      	mov	r0, r3
 800a04a:	f000 f831 	bl	800a0b0 <USER_ioctl>
 800a04e:	4603      	mov	r3, r0
}
 800a050:	4618      	mov	r0, r3
 800a052:	3708      	adds	r7, #8
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <SD2_ioctl>:
DSTATUS SD2_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	4603      	mov	r3, r0
 800a060:	603a      	str	r2, [r7, #0]
 800a062:	71fb      	strb	r3, [r7, #7]
 800a064:	460b      	mov	r3, r1
 800a066:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(2);
 800a068:	2002      	movs	r0, #2
 800a06a:	f7f8 f81f 	bl	80020ac <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 800a06e:	79b9      	ldrb	r1, [r7, #6]
 800a070:	79fb      	ldrb	r3, [r7, #7]
 800a072:	683a      	ldr	r2, [r7, #0]
 800a074:	4618      	mov	r0, r3
 800a076:	f000 f81b 	bl	800a0b0 <USER_ioctl>
 800a07a:	4603      	mov	r3, r0
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3708      	adds	r7, #8
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <SD3_ioctl>:
DSTATUS SD3_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	4603      	mov	r3, r0
 800a08c:	603a      	str	r2, [r7, #0]
 800a08e:	71fb      	strb	r3, [r7, #7]
 800a090:	460b      	mov	r3, r1
 800a092:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(3);
 800a094:	2003      	movs	r0, #3
 800a096:	f7f8 f809 	bl	80020ac <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 800a09a:	79b9      	ldrb	r1, [r7, #6]
 800a09c:	79fb      	ldrb	r3, [r7, #7]
 800a09e:	683a      	ldr	r2, [r7, #0]
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f000 f805 	bl	800a0b0 <USER_ioctl>
 800a0a6:	4603      	mov	r3, r0
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3708      	adds	r7, #8
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	603a      	str	r2, [r7, #0]
 800a0ba:	71fb      	strb	r3, [r7, #7]
 800a0bc:	460b      	mov	r3, r1
 800a0be:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res;
	sd_ss_set_active(pdrv);
 800a0c0:	79fb      	ldrb	r3, [r7, #7]
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7f7 fff2 	bl	80020ac <sd_ss_set_active>
	SS_SD_SELECT();
 800a0c8:	f7f8 f80e 	bl	80020e8 <sd_ss_active_pin_down>
	if (pdrv) return RES_PARERR;
 800a0cc:	79fb      	ldrb	r3, [r7, #7]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d001      	beq.n	800a0d6 <USER_ioctl+0x26>
 800a0d2:	2304      	movs	r3, #4
 800a0d4:	e02a      	b.n	800a12c <USER_ioctl+0x7c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a0d6:	4b17      	ldr	r3, [pc, #92]	; (800a134 <USER_ioctl+0x84>)
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	f003 0301 	and.w	r3, r3, #1
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d001      	beq.n	800a0e8 <USER_ioctl+0x38>
 800a0e4:	2303      	movs	r3, #3
 800a0e6:	e021      	b.n	800a12c <USER_ioctl+0x7c>
	res = RES_ERROR;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	73fb      	strb	r3, [r7, #15]
	switch (cmd)
 800a0ec:	79bb      	ldrb	r3, [r7, #6]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d002      	beq.n	800a0f8 <USER_ioctl+0x48>
 800a0f2:	2b02      	cmp	r3, #2
 800a0f4:	d00a      	beq.n	800a10c <USER_ioctl+0x5c>
 800a0f6:	e010      	b.n	800a11a <USER_ioctl+0x6a>
	{
	  case CTRL_SYNC : /* Flush dirty buffer if present */
	    SS_SD_SELECT();
 800a0f8:	f7f7 fff6 	bl	80020e8 <sd_ss_active_pin_down>
	    if (SPI_wait_ready() == 0xFF)
 800a0fc:	f7f8 f931 	bl	8002362 <SPI_wait_ready>
 800a100:	4603      	mov	r3, r0
 800a102:	2bff      	cmp	r3, #255	; 0xff
 800a104:	d10c      	bne.n	800a120 <USER_ioctl+0x70>
	    res = RES_OK;
 800a106:	2300      	movs	r3, #0
 800a108:	73fb      	strb	r3, [r7, #15]
	    break;
 800a10a:	e009      	b.n	800a120 <USER_ioctl+0x70>
	  case GET_SECTOR_SIZE : /* Get sectors on the disk (WORD) */
	    *(WORD*)buff = 512;
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a112:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 800a114:	2300      	movs	r3, #0
 800a116:	73fb      	strb	r3, [r7, #15]
	    break;
 800a118:	e003      	b.n	800a122 <USER_ioctl+0x72>
	  default:
	    res = RES_PARERR;
 800a11a:	2304      	movs	r3, #4
 800a11c:	73fb      	strb	r3, [r7, #15]
 800a11e:	e000      	b.n	800a122 <USER_ioctl+0x72>
	    break;
 800a120:	bf00      	nop
	}
	SPI_Release();
 800a122:	f7f8 f995 	bl	8002450 <SPI_Release>
	SS_SD_DESELECT();
 800a126:	f7f7 ffef 	bl	8002108 <sd_ss_active_pin_up>
    return res;
 800a12a:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3710      	adds	r7, #16
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	2000023d 	.word	0x2000023d

0800a138 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a138:	b590      	push	{r4, r7, lr}
 800a13a:	b089      	sub	sp, #36	; 0x24
 800a13c:	af04      	add	r7, sp, #16
 800a13e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a140:	2301      	movs	r3, #1
 800a142:	2202      	movs	r2, #2
 800a144:	2102      	movs	r1, #2
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 fda8 	bl	800ac9c <USBH_FindInterface>
 800a14c:	4603      	mov	r3, r0
 800a14e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a150:	7bfb      	ldrb	r3, [r7, #15]
 800a152:	2bff      	cmp	r3, #255	; 0xff
 800a154:	d002      	beq.n	800a15c <USBH_CDC_InterfaceInit+0x24>
 800a156:	7bfb      	ldrb	r3, [r7, #15]
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d901      	bls.n	800a160 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a15c:	2302      	movs	r3, #2
 800a15e:	e13d      	b.n	800a3dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a160:	7bfb      	ldrb	r3, [r7, #15]
 800a162:	4619      	mov	r1, r3
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 fd7d 	bl	800ac64 <USBH_SelectInterface>
 800a16a:	4603      	mov	r3, r0
 800a16c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a16e:	7bbb      	ldrb	r3, [r7, #14]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d001      	beq.n	800a178 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a174:	2302      	movs	r3, #2
 800a176:	e131      	b.n	800a3dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a17e:	2050      	movs	r0, #80	; 0x50
 800a180:	f00a f92c 	bl	80143dc <malloc>
 800a184:	4603      	mov	r3, r0
 800a186:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a18e:	69db      	ldr	r3, [r3, #28]
 800a190:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d101      	bne.n	800a19c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a198:	2302      	movs	r3, #2
 800a19a:	e11f      	b.n	800a3dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a19c:	2250      	movs	r2, #80	; 0x50
 800a19e:	2100      	movs	r1, #0
 800a1a0:	68b8      	ldr	r0, [r7, #8]
 800a1a2:	f00a f939 	bl	8014418 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a1a6:	7bfb      	ldrb	r3, [r7, #15]
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	211a      	movs	r1, #26
 800a1ac:	fb01 f303 	mul.w	r3, r1, r3
 800a1b0:	4413      	add	r3, r2
 800a1b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	b25b      	sxtb	r3, r3
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	da15      	bge.n	800a1ea <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a1be:	7bfb      	ldrb	r3, [r7, #15]
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	211a      	movs	r1, #26
 800a1c4:	fb01 f303 	mul.w	r3, r1, r3
 800a1c8:	4413      	add	r3, r2
 800a1ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a1ce:	781a      	ldrb	r2, [r3, #0]
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a1d4:	7bfb      	ldrb	r3, [r7, #15]
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	211a      	movs	r1, #26
 800a1da:	fb01 f303 	mul.w	r3, r1, r3
 800a1de:	4413      	add	r3, r2
 800a1e0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a1e4:	881a      	ldrh	r2, [r3, #0]
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	785b      	ldrb	r3, [r3, #1]
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f002 fa78 	bl	800c6e6 <USBH_AllocPipe>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	7819      	ldrb	r1, [r3, #0]
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	7858      	ldrb	r0, [r3, #1]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a212:	68ba      	ldr	r2, [r7, #8]
 800a214:	8952      	ldrh	r2, [r2, #10]
 800a216:	9202      	str	r2, [sp, #8]
 800a218:	2203      	movs	r2, #3
 800a21a:	9201      	str	r2, [sp, #4]
 800a21c:	9300      	str	r3, [sp, #0]
 800a21e:	4623      	mov	r3, r4
 800a220:	4602      	mov	r2, r0
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f002 fa30 	bl	800c688 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	2200      	movs	r2, #0
 800a22e:	4619      	mov	r1, r3
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f009 ff25 	bl	8014080 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a236:	2300      	movs	r3, #0
 800a238:	2200      	movs	r2, #0
 800a23a:	210a      	movs	r1, #10
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 fd2d 	bl	800ac9c <USBH_FindInterface>
 800a242:	4603      	mov	r3, r0
 800a244:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a246:	7bfb      	ldrb	r3, [r7, #15]
 800a248:	2bff      	cmp	r3, #255	; 0xff
 800a24a:	d002      	beq.n	800a252 <USBH_CDC_InterfaceInit+0x11a>
 800a24c:	7bfb      	ldrb	r3, [r7, #15]
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d901      	bls.n	800a256 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a252:	2302      	movs	r3, #2
 800a254:	e0c2      	b.n	800a3dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a256:	7bfb      	ldrb	r3, [r7, #15]
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	211a      	movs	r1, #26
 800a25c:	fb01 f303 	mul.w	r3, r1, r3
 800a260:	4413      	add	r3, r2
 800a262:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	b25b      	sxtb	r3, r3
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	da16      	bge.n	800a29c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a26e:	7bfb      	ldrb	r3, [r7, #15]
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	211a      	movs	r1, #26
 800a274:	fb01 f303 	mul.w	r3, r1, r3
 800a278:	4413      	add	r3, r2
 800a27a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a27e:	781a      	ldrb	r2, [r3, #0]
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a284:	7bfb      	ldrb	r3, [r7, #15]
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	211a      	movs	r1, #26
 800a28a:	fb01 f303 	mul.w	r3, r1, r3
 800a28e:	4413      	add	r3, r2
 800a290:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a294:	881a      	ldrh	r2, [r3, #0]
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	835a      	strh	r2, [r3, #26]
 800a29a:	e015      	b.n	800a2c8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a29c:	7bfb      	ldrb	r3, [r7, #15]
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	211a      	movs	r1, #26
 800a2a2:	fb01 f303 	mul.w	r3, r1, r3
 800a2a6:	4413      	add	r3, r2
 800a2a8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a2ac:	781a      	ldrb	r2, [r3, #0]
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a2b2:	7bfb      	ldrb	r3, [r7, #15]
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	211a      	movs	r1, #26
 800a2b8:	fb01 f303 	mul.w	r3, r1, r3
 800a2bc:	4413      	add	r3, r2
 800a2be:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a2c2:	881a      	ldrh	r2, [r3, #0]
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a2c8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	211a      	movs	r1, #26
 800a2ce:	fb01 f303 	mul.w	r3, r1, r3
 800a2d2:	4413      	add	r3, r2
 800a2d4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	b25b      	sxtb	r3, r3
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	da16      	bge.n	800a30e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a2e0:	7bfb      	ldrb	r3, [r7, #15]
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	211a      	movs	r1, #26
 800a2e6:	fb01 f303 	mul.w	r3, r1, r3
 800a2ea:	4413      	add	r3, r2
 800a2ec:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a2f0:	781a      	ldrb	r2, [r3, #0]
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a2f6:	7bfb      	ldrb	r3, [r7, #15]
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	211a      	movs	r1, #26
 800a2fc:	fb01 f303 	mul.w	r3, r1, r3
 800a300:	4413      	add	r3, r2
 800a302:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a306:	881a      	ldrh	r2, [r3, #0]
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	835a      	strh	r2, [r3, #26]
 800a30c:	e015      	b.n	800a33a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a30e:	7bfb      	ldrb	r3, [r7, #15]
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	211a      	movs	r1, #26
 800a314:	fb01 f303 	mul.w	r3, r1, r3
 800a318:	4413      	add	r3, r2
 800a31a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a31e:	781a      	ldrb	r2, [r3, #0]
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a324:	7bfb      	ldrb	r3, [r7, #15]
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	211a      	movs	r1, #26
 800a32a:	fb01 f303 	mul.w	r3, r1, r3
 800a32e:	4413      	add	r3, r2
 800a330:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a334:	881a      	ldrh	r2, [r3, #0]
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	7b9b      	ldrb	r3, [r3, #14]
 800a33e:	4619      	mov	r1, r3
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f002 f9d0 	bl	800c6e6 <USBH_AllocPipe>
 800a346:	4603      	mov	r3, r0
 800a348:	461a      	mov	r2, r3
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	7bdb      	ldrb	r3, [r3, #15]
 800a352:	4619      	mov	r1, r3
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f002 f9c6 	bl	800c6e6 <USBH_AllocPipe>
 800a35a:	4603      	mov	r3, r0
 800a35c:	461a      	mov	r2, r3
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	7b59      	ldrb	r1, [r3, #13]
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	7b98      	ldrb	r0, [r3, #14]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a376:	68ba      	ldr	r2, [r7, #8]
 800a378:	8b12      	ldrh	r2, [r2, #24]
 800a37a:	9202      	str	r2, [sp, #8]
 800a37c:	2202      	movs	r2, #2
 800a37e:	9201      	str	r2, [sp, #4]
 800a380:	9300      	str	r3, [sp, #0]
 800a382:	4623      	mov	r3, r4
 800a384:	4602      	mov	r2, r0
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f002 f97e 	bl	800c688 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	7b19      	ldrb	r1, [r3, #12]
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	7bd8      	ldrb	r0, [r3, #15]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a3a0:	68ba      	ldr	r2, [r7, #8]
 800a3a2:	8b52      	ldrh	r2, [r2, #26]
 800a3a4:	9202      	str	r2, [sp, #8]
 800a3a6:	2202      	movs	r2, #2
 800a3a8:	9201      	str	r2, [sp, #4]
 800a3aa:	9300      	str	r3, [sp, #0]
 800a3ac:	4623      	mov	r3, r4
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f002 f969 	bl	800c688 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	7b5b      	ldrb	r3, [r3, #13]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f009 fe5a 	bl	8014080 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	7b1b      	ldrb	r3, [r3, #12]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f009 fe53 	bl	8014080 <USBH_LL_SetToggle>

  return USBH_OK;
 800a3da:	2300      	movs	r3, #0
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3714      	adds	r7, #20
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd90      	pop	{r4, r7, pc}

0800a3e4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3f2:	69db      	ldr	r3, [r3, #28]
 800a3f4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d00e      	beq.n	800a41c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	4619      	mov	r1, r3
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f002 f95e 	bl	800c6c6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	4619      	mov	r1, r3
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f002 f989 	bl	800c728 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2200      	movs	r2, #0
 800a41a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	7b1b      	ldrb	r3, [r3, #12]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d00e      	beq.n	800a442 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	7b1b      	ldrb	r3, [r3, #12]
 800a428:	4619      	mov	r1, r3
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f002 f94b 	bl	800c6c6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	7b1b      	ldrb	r3, [r3, #12]
 800a434:	4619      	mov	r1, r3
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f002 f976 	bl	800c728 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2200      	movs	r2, #0
 800a440:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	7b5b      	ldrb	r3, [r3, #13]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d00e      	beq.n	800a468 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	7b5b      	ldrb	r3, [r3, #13]
 800a44e:	4619      	mov	r1, r3
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f002 f938 	bl	800c6c6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	7b5b      	ldrb	r3, [r3, #13]
 800a45a:	4619      	mov	r1, r3
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f002 f963 	bl	800c728 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2200      	movs	r2, #0
 800a466:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a46e:	69db      	ldr	r3, [r3, #28]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d00b      	beq.n	800a48c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a47a:	69db      	ldr	r3, [r3, #28]
 800a47c:	4618      	mov	r0, r3
 800a47e:	f009 ffb5 	bl	80143ec <free>
    phost->pActiveClass->pData = 0U;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a488:	2200      	movs	r2, #0
 800a48a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3710      	adds	r7, #16
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}

0800a496 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a496:	b580      	push	{r7, lr}
 800a498:	b084      	sub	sp, #16
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4a4:	69db      	ldr	r3, [r3, #28]
 800a4a6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	3340      	adds	r3, #64	; 0x40
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 f8da 	bl	800a668 <GetLineCoding>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a4b8:	7afb      	ldrb	r3, [r7, #11]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d105      	bne.n	800a4ca <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a4c4:	2102      	movs	r1, #2
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a4ca:	7afb      	ldrb	r3, [r7, #11]
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3710      	adds	r7, #16
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4ea:	69db      	ldr	r3, [r3, #28]
 800a4ec:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a4f4:	2b04      	cmp	r3, #4
 800a4f6:	d877      	bhi.n	800a5e8 <USBH_CDC_Process+0x114>
 800a4f8:	a201      	add	r2, pc, #4	; (adr r2, 800a500 <USBH_CDC_Process+0x2c>)
 800a4fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4fe:	bf00      	nop
 800a500:	0800a515 	.word	0x0800a515
 800a504:	0800a51b 	.word	0x0800a51b
 800a508:	0800a54b 	.word	0x0800a54b
 800a50c:	0800a5bf 	.word	0x0800a5bf
 800a510:	0800a5cd 	.word	0x0800a5cd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a514:	2300      	movs	r3, #0
 800a516:	73fb      	strb	r3, [r7, #15]
      break;
 800a518:	e06d      	b.n	800a5f6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a51e:	4619      	mov	r1, r3
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 f8c0 	bl	800a6a6 <SetLineCoding>
 800a526:	4603      	mov	r3, r0
 800a528:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a52a:	7bbb      	ldrb	r3, [r7, #14]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d104      	bne.n	800a53a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	2202      	movs	r2, #2
 800a534:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a538:	e058      	b.n	800a5ec <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a53a:	7bbb      	ldrb	r3, [r7, #14]
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d055      	beq.n	800a5ec <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	2204      	movs	r2, #4
 800a544:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a548:	e050      	b.n	800a5ec <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	3340      	adds	r3, #64	; 0x40
 800a54e:	4619      	mov	r1, r3
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 f889 	bl	800a668 <GetLineCoding>
 800a556:	4603      	mov	r3, r0
 800a558:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a55a:	7bbb      	ldrb	r3, [r7, #14]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d126      	bne.n	800a5ae <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	2200      	movs	r2, #0
 800a564:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a572:	791b      	ldrb	r3, [r3, #4]
 800a574:	429a      	cmp	r2, r3
 800a576:	d13b      	bne.n	800a5f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a582:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a584:	429a      	cmp	r2, r3
 800a586:	d133      	bne.n	800a5f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a592:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a594:	429a      	cmp	r2, r3
 800a596:	d12b      	bne.n	800a5f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5a0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d124      	bne.n	800a5f0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 fa72 	bl	800aa90 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a5ac:	e020      	b.n	800a5f0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a5ae:	7bbb      	ldrb	r3, [r7, #14]
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d01d      	beq.n	800a5f0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	2204      	movs	r2, #4
 800a5b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a5bc:	e018      	b.n	800a5f0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 f934 	bl	800a82c <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 f9c3 	bl	800a950 <CDC_ProcessReception>
      break;
 800a5ca:	e014      	b.n	800a5f6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a5cc:	2100      	movs	r1, #0
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f001 fa4b 	bl	800ba6a <USBH_ClrFeature>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a5d8:	7bbb      	ldrb	r3, [r7, #14]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d10a      	bne.n	800a5f4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800a5e6:	e005      	b.n	800a5f4 <USBH_CDC_Process+0x120>

    default:
      break;
 800a5e8:	bf00      	nop
 800a5ea:	e004      	b.n	800a5f6 <USBH_CDC_Process+0x122>
      break;
 800a5ec:	bf00      	nop
 800a5ee:	e002      	b.n	800a5f6 <USBH_CDC_Process+0x122>
      break;
 800a5f0:	bf00      	nop
 800a5f2:	e000      	b.n	800a5f6 <USBH_CDC_Process+0x122>
      break;
 800a5f4:	bf00      	nop

  }

  return status;
 800a5f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3710      	adds	r7, #16
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	370c      	adds	r7, #12
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr

0800a616 <USBH_CDC_Stop>:
  *         Stop current CDC Transmission
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_CDC_Stop(USBH_HandleTypeDef *phost)
{
 800a616:	b580      	push	{r7, lr}
 800a618:	b084      	sub	sp, #16
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a624:	69db      	ldr	r3, [r3, #28]
 800a626:	60fb      	str	r3, [r7, #12]

  if (phost->gState == HOST_CLASS)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	2b0b      	cmp	r3, #11
 800a630:	d115      	bne.n	800a65e <USBH_CDC_Stop+0x48>
  {
    CDC_Handle->state = CDC_IDLE_STATE;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2200      	movs	r2, #0
 800a636:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	4619      	mov	r1, r3
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f002 f840 	bl	800c6c6 <USBH_ClosePipe>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	7b1b      	ldrb	r3, [r3, #12]
 800a64a:	4619      	mov	r1, r3
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f002 f83a 	bl	800c6c6 <USBH_ClosePipe>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	7b5b      	ldrb	r3, [r3, #13]
 800a656:	4619      	mov	r1, r3
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f002 f834 	bl	800c6c6 <USBH_ClosePipe>
  }
  return USBH_OK;
 800a65e:	2300      	movs	r3, #0
}
 800a660:	4618      	mov	r0, r3
 800a662:	3710      	adds	r7, #16
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	22a1      	movs	r2, #161	; 0xa1
 800a676:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2221      	movs	r2, #33	; 0x21
 800a67c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2200      	movs	r2, #0
 800a682:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2207      	movs	r2, #7
 800a68e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	2207      	movs	r2, #7
 800a694:	4619      	mov	r1, r3
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f001 fcb4 	bl	800c004 <USBH_CtlReq>
 800a69c:	4603      	mov	r3, r0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3708      	adds	r7, #8
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}

0800a6a6 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a6a6:	b580      	push	{r7, lr}
 800a6a8:	b082      	sub	sp, #8
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
 800a6ae:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2221      	movs	r2, #33	; 0x21
 800a6b4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2220      	movs	r2, #32
 800a6ba:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2207      	movs	r2, #7
 800a6cc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	2207      	movs	r2, #7
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f001 fc95 	bl	800c004 <USBH_CtlReq>
 800a6da:	4603      	mov	r3, r0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3708      	adds	r7, #8
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <USBH_CDC_SetLineCoding>:
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef USBH_CDC_SetLineCoding(USBH_HandleTypeDef *phost,
                                          CDC_LineCodingTypeDef *linecoding)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6f4:	69db      	ldr	r3, [r3, #28]
 800a6f6:	60fb      	str	r3, [r7, #12]

  if (phost->gState == HOST_CLASS)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	2b0b      	cmp	r3, #11
 800a700:	d114      	bne.n	800a72c <USBH_CDC_SetLineCoding+0x48>
  {
    CDC_Handle->state = CDC_SET_LINE_CODING_STATE;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2201      	movs	r2, #1
 800a706:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->pUserLineCoding = linecoding;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	683a      	ldr	r2, [r7, #0]
 800a70e:	649a      	str	r2, [r3, #72]	; 0x48

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2204      	movs	r2, #4
 800a714:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a724:	2200      	movs	r2, #0
 800a726:	4619      	mov	r1, r3
 800a728:	f006 ffd6 	bl	80116d8 <osMessagePut>
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }

  return USBH_OK;
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3710      	adds	r7, #16
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}

0800a736 <USBH_CDC_Transmit>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Transmit(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 800a736:	b580      	push	{r7, lr}
 800a738:	b086      	sub	sp, #24
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	60f8      	str	r0, [r7, #12]
 800a73e:	60b9      	str	r1, [r7, #8]
 800a740:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a742:	2301      	movs	r3, #1
 800a744:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a74c:	69db      	ldr	r3, [r3, #28]
 800a74e:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a756:	2b00      	cmp	r3, #0
 800a758:	d004      	beq.n	800a764 <USBH_CDC_Transmit+0x2e>
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a760:	2b03      	cmp	r3, #3
 800a762:	d11d      	bne.n	800a7a0 <USBH_CDC_Transmit+0x6a>
  {
    CDC_Handle->pTxData = pbuff;
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	68ba      	ldr	r2, [r7, #8]
 800a768:	61da      	str	r2, [r3, #28]
    CDC_Handle->TxDataLength = length;
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	625a      	str	r2, [r3, #36]	; 0x24
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	2203      	movs	r2, #3
 800a774:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    Status = USBH_OK;
 800a780:	2300      	movs	r3, #0
 800a782:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2204      	movs	r2, #4
 800a788:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a798:	2200      	movs	r2, #0
 800a79a:	4619      	mov	r1, r3
 800a79c:	f006 ff9c 	bl	80116d8 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }
  return Status;
 800a7a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3718      	adds	r7, #24
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
	...

0800a7ac <USBH_CDC_Receive>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b086      	sub	sp, #24
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7c2:	69db      	ldr	r3, [r3, #28]
 800a7c4:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d004      	beq.n	800a7da <USBH_CDC_Receive+0x2e>
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a7d6:	2b03      	cmp	r3, #3
 800a7d8:	d120      	bne.n	800a81c <USBH_CDC_Receive+0x70>
  {
	icListen_rx_msg_basic_header=(icListen_wav_full_header*)pbuff;
 800a7da:	4a13      	ldr	r2, [pc, #76]	; (800a828 <USBH_CDC_Receive+0x7c>)
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	6013      	str	r3, [r2, #0]
    CDC_Handle->pRxData = pbuff;
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	68ba      	ldr	r2, [r7, #8]
 800a7e4:	621a      	str	r2, [r3, #32]
    CDC_Handle->RxDataLength = length;
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	629a      	str	r2, [r3, #40]	; 0x28
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	2203      	movs	r2, #3
 800a7f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	2203      	movs	r2, #3
 800a7f8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    Status = USBH_OK;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2204      	movs	r2, #4
 800a804:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a814:	2200      	movs	r2, #0
 800a816:	4619      	mov	r1, r3
 800a818:	f006 ff5e 	bl	80116d8 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }
  return Status;
 800a81c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3718      	adds	r7, #24
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	20001ddc 	.word	0x20001ddc

0800a82c <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b086      	sub	sp, #24
 800a830:	af02      	add	r7, sp, #8
 800a832:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a83a:	69db      	ldr	r3, [r3, #28]
 800a83c:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a83e:	2300      	movs	r3, #0
 800a840:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d002      	beq.n	800a852 <CDC_ProcessTransmission+0x26>
 800a84c:	2b02      	cmp	r3, #2
 800a84e:	d023      	beq.n	800a898 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a850:	e07a      	b.n	800a948 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a856:	68fa      	ldr	r2, [r7, #12]
 800a858:	8b12      	ldrh	r2, [r2, #24]
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d90b      	bls.n	800a876 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	69d9      	ldr	r1, [r3, #28]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	8b1a      	ldrh	r2, [r3, #24]
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	7b5b      	ldrb	r3, [r3, #13]
 800a86a:	2001      	movs	r0, #1
 800a86c:	9000      	str	r0, [sp, #0]
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f001 fec7 	bl	800c602 <USBH_BulkSendData>
 800a874:	e00b      	b.n	800a88e <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800a87e:	b29a      	uxth	r2, r3
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	7b5b      	ldrb	r3, [r3, #13]
 800a884:	2001      	movs	r0, #1
 800a886:	9000      	str	r0, [sp, #0]
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f001 feba 	bl	800c602 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2202      	movs	r2, #2
 800a892:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a896:	e057      	b.n	800a948 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	7b5b      	ldrb	r3, [r3, #13]
 800a89c:	4619      	mov	r1, r3
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f009 fbc4 	bl	801402c <USBH_LL_GetURBState>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a8a8:	7afb      	ldrb	r3, [r7, #11]
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d136      	bne.n	800a91c <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	8b12      	ldrh	r2, [r2, #24]
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d90e      	bls.n	800a8d8 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8be:	68fa      	ldr	r2, [r7, #12]
 800a8c0:	8b12      	ldrh	r2, [r2, #24]
 800a8c2:	1a9a      	subs	r2, r3, r2
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	69db      	ldr	r3, [r3, #28]
 800a8cc:	68fa      	ldr	r2, [r7, #12]
 800a8ce:	8b12      	ldrh	r2, [r2, #24]
 800a8d0:	441a      	add	r2, r3
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	61da      	str	r2, [r3, #28]
 800a8d6:	e002      	b.n	800a8de <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d004      	beq.n	800a8f0 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800a8ee:	e006      	b.n	800a8fe <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f009 f929 	bl	8013b50 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2204      	movs	r2, #4
 800a902:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a912:	2200      	movs	r2, #0
 800a914:	4619      	mov	r1, r3
 800a916:	f006 fedf 	bl	80116d8 <osMessagePut>
      break;
 800a91a:	e014      	b.n	800a946 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800a91c:	7afb      	ldrb	r3, [r7, #11]
 800a91e:	2b02      	cmp	r3, #2
 800a920:	d111      	bne.n	800a946 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2201      	movs	r2, #1
 800a926:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2204      	movs	r2, #4
 800a92e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a93e:	2200      	movs	r2, #0
 800a940:	4619      	mov	r1, r3
 800a942:	f006 fec9 	bl	80116d8 <osMessagePut>
      break;
 800a946:	bf00      	nop
  }
}
 800a948:	bf00      	nop
 800a94a:	3710      	adds	r7, #16
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b086      	sub	sp, #24
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a95e:	69db      	ldr	r3, [r3, #28]
 800a960:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a962:	2300      	movs	r3, #0
 800a964:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a96c:	2b03      	cmp	r3, #3
 800a96e:	d002      	beq.n	800a976 <CDC_ProcessReception+0x26>
 800a970:	2b04      	cmp	r3, #4
 800a972:	d00e      	beq.n	800a992 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a974:	e07f      	b.n	800aa76 <CDC_ProcessReception+0x126>
      (void)USBH_BulkReceiveData(phost,
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	6a19      	ldr	r1, [r3, #32]
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	8b5a      	ldrh	r2, [r3, #26]
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	7b1b      	ldrb	r3, [r3, #12]
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f001 fe62 	bl	800c64c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	2204      	movs	r2, #4
 800a98c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a990:	e071      	b.n	800aa76 <CDC_ProcessReception+0x126>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	7b1b      	ldrb	r3, [r3, #12]
 800a996:	4619      	mov	r1, r3
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f009 fb47 	bl	801402c <USBH_LL_GetURBState>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a9a2:	7cfb      	ldrb	r3, [r7, #19]
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d165      	bne.n	800aa74 <CDC_ProcessReception+0x124>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	7b1b      	ldrb	r3, [r3, #12]
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f009 faaa 	bl	8013f08 <USBH_LL_GetLastXferSize>
 800a9b4:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (CDC_Handle->RxDataLength > CDC_Handle->DataItf.InEpSize))
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ba:	68fa      	ldr	r2, [r7, #12]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d044      	beq.n	800aa4a <CDC_ProcessReception+0xfa>
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9c4:	697a      	ldr	r2, [r7, #20]
 800a9c6:	8b52      	ldrh	r2, [r2, #26]
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d93e      	bls.n	800aa4a <CDC_ProcessReception+0xfa>
           CDC_Handle->RxDataLength -= length ;
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	1ad2      	subs	r2, r2, r3
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	629a      	str	r2, [r3, #40]	; 0x28
           CDC_Handle->pRxData += length;
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	6a1a      	ldr	r2, [r3, #32]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	441a      	add	r2, r3
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	621a      	str	r2, [r3, #32]
           if((icListen_rx_msg_basic_header->length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 800a9e4:	4b26      	ldr	r3, [pc, #152]	; (800aa80 <CDC_ProcessReception+0x130>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	885b      	ldrh	r3, [r3, #2]
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	3306      	adds	r3, #6
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9f4:	f5c3 635a 	rsb	r3, r3, #3488	; 0xda0
 800a9f8:	330c      	adds	r3, #12
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d120      	bne.n	800aa40 <CDC_ProcessReception+0xf0>
               CDC_Handle->data_rx_state = CDC_IDLE;
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
               osMessagePut(USB_rxHandle, (uint8_t*)usb_rx_buff[usb_rx_buff_active], 0U);
 800aa06:	4b1f      	ldr	r3, [pc, #124]	; (800aa84 <CDC_ProcessReception+0x134>)
 800aa08:	6818      	ldr	r0, [r3, #0]
 800aa0a:	4b1f      	ldr	r3, [pc, #124]	; (800aa88 <CDC_ProcessReception+0x138>)
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	461a      	mov	r2, r3
 800aa10:	f640 53ac 	movw	r3, #3500	; 0xdac
 800aa14:	fb02 f303 	mul.w	r3, r2, r3
 800aa18:	4a1c      	ldr	r2, [pc, #112]	; (800aa8c <CDC_ProcessReception+0x13c>)
 800aa1a:	4413      	add	r3, r2
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	4619      	mov	r1, r3
 800aa20:	f006 fe5a 	bl	80116d8 <osMessagePut>
               usb_rx_buff_active++;
 800aa24:	4b18      	ldr	r3, [pc, #96]	; (800aa88 <CDC_ProcessReception+0x138>)
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	3301      	adds	r3, #1
 800aa2a:	b2da      	uxtb	r2, r3
 800aa2c:	4b16      	ldr	r3, [pc, #88]	; (800aa88 <CDC_ProcessReception+0x138>)
 800aa2e:	701a      	strb	r2, [r3, #0]
               usb_rx_buff_active%=USB_RX_NUM_OF_BUFFERS;
 800aa30:	4b15      	ldr	r3, [pc, #84]	; (800aa88 <CDC_ProcessReception+0x138>)
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	f003 0303 	and.w	r3, r3, #3
 800aa38:	b2da      	uxtb	r2, r3
 800aa3a:	4b13      	ldr	r3, [pc, #76]	; (800aa88 <CDC_ProcessReception+0x138>)
 800aa3c:	701a      	strb	r2, [r3, #0]
           if((icListen_rx_msg_basic_header->length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 800aa3e:	e00b      	b.n	800aa58 <CDC_ProcessReception+0x108>
         	CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	2203      	movs	r2, #3
 800aa44:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
           if((icListen_rx_msg_basic_header->length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 800aa48:	e006      	b.n	800aa58 <CDC_ProcessReception+0x108>
           CDC_Handle->data_rx_state = CDC_IDLE;
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
           USBH_CDC_ReceiveCallback(phost);
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f009 f886 	bl	8013b64 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2204      	movs	r2, #4
 800aa5c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	4619      	mov	r1, r3
 800aa70:	f006 fe32 	bl	80116d8 <osMessagePut>
      break;
 800aa74:	bf00      	nop
  }
}
 800aa76:	bf00      	nop
 800aa78:	3718      	adds	r7, #24
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	20001ddc 	.word	0x20001ddc
 800aa84:	200009a4 	.word	0x200009a4
 800aa88:	2000b85c 	.word	0x2000b85c
 800aa8c:	200081ac 	.word	0x200081ac

0800aa90 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800aa98:	bf00      	nop
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800aaa4:	b5b0      	push	{r4, r5, r7, lr}
 800aaa6:	b090      	sub	sp, #64	; 0x40
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	60b9      	str	r1, [r7, #8]
 800aaae:	4613      	mov	r3, r2
 800aab0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d101      	bne.n	800aabc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800aab8:	2302      	movs	r3, #2
 800aaba:	e04d      	b.n	800ab58 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	79fa      	ldrb	r2, [r7, #7]
 800aac0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2200      	movs	r2, #0
 800aac8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2200      	movs	r2, #0
 800aad0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800aad4:	68f8      	ldr	r0, [r7, #12]
 800aad6:	f000 f847 	bl	800ab68 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2200      	movs	r2, #0
 800aade:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2200      	movs	r2, #0
 800aae6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2200      	movs	r2, #0
 800aaee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d003      	beq.n	800ab08 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	68ba      	ldr	r2, [r7, #8]
 800ab04:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800ab08:	4b15      	ldr	r3, [pc, #84]	; (800ab60 <USBH_Init+0xbc>)
 800ab0a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800ab0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ab10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800ab14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ab18:	2100      	movs	r1, #0
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f006 fdb3 	bl	8011686 <osMessageCreate>
 800ab20:	4602      	mov	r2, r0
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800ab28:	4b0e      	ldr	r3, [pc, #56]	; (800ab64 <USBH_Init+0xc0>)
 800ab2a:	f107 0414 	add.w	r4, r7, #20
 800ab2e:	461d      	mov	r5, r3
 800ab30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ab34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ab38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800ab3c:	f107 0314 	add.w	r3, r7, #20
 800ab40:	68f9      	ldr	r1, [r7, #12]
 800ab42:	4618      	mov	r0, r3
 800ab44:	f006 fd3f 	bl	80115c6 <osThreadCreate>
 800ab48:	4602      	mov	r2, r0
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f009 f925 	bl	8013da0 <USBH_LL_Init>

  return USBH_OK;
 800ab56:	2300      	movs	r3, #0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3740      	adds	r7, #64	; 0x40
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bdb0      	pop	{r4, r5, r7, pc}
 800ab60:	08016ed4 	.word	0x08016ed4
 800ab64:	08016ee4 	.word	0x08016ee4

0800ab68 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b085      	sub	sp, #20
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ab70:	2300      	movs	r3, #0
 800ab72:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ab74:	2300      	movs	r3, #0
 800ab76:	60fb      	str	r3, [r7, #12]
 800ab78:	e009      	b.n	800ab8e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	33e0      	adds	r3, #224	; 0xe0
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	4413      	add	r3, r2
 800ab84:	2200      	movs	r2, #0
 800ab86:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	60fb      	str	r3, [r7, #12]
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2b0f      	cmp	r3, #15
 800ab92:	d9f2      	bls.n	800ab7a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ab94:	2300      	movs	r3, #0
 800ab96:	60fb      	str	r3, [r7, #12]
 800ab98:	e009      	b.n	800abae <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	4413      	add	r3, r2
 800aba0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800aba4:	2200      	movs	r2, #0
 800aba6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	3301      	adds	r3, #1
 800abac:	60fb      	str	r3, [r7, #12]
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abb4:	d3f1      	bcc.n	800ab9a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2200      	movs	r2, #0
 800abc0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2201      	movs	r2, #1
 800abc6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2200      	movs	r2, #0
 800abcc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2201      	movs	r2, #1
 800abd4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2240      	movs	r2, #64	; 0x40
 800abda:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2200      	movs	r2, #0
 800abe0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2200      	movs	r2, #0
 800abe6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2201      	movs	r2, #1
 800abee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2200      	movs	r2, #0
 800abf6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2200      	movs	r2, #0
 800abfe:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800ac02:	2300      	movs	r3, #0
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3714      	adds	r7, #20
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr

0800ac10 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b085      	sub	sp, #20
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d016      	beq.n	800ac52 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d10e      	bne.n	800ac4c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ac34:	1c59      	adds	r1, r3, #1
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	33de      	adds	r3, #222	; 0xde
 800ac40:	6839      	ldr	r1, [r7, #0]
 800ac42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ac46:	2300      	movs	r3, #0
 800ac48:	73fb      	strb	r3, [r7, #15]
 800ac4a:	e004      	b.n	800ac56 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ac4c:	2302      	movs	r3, #2
 800ac4e:	73fb      	strb	r3, [r7, #15]
 800ac50:	e001      	b.n	800ac56 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ac52:	2302      	movs	r3, #2
 800ac54:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ac56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3714      	adds	r7, #20
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr

0800ac64 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b085      	sub	sp, #20
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ac70:	2300      	movs	r3, #0
 800ac72:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800ac7a:	78fa      	ldrb	r2, [r7, #3]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d204      	bcs.n	800ac8a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	78fa      	ldrb	r2, [r7, #3]
 800ac84:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800ac88:	e001      	b.n	800ac8e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ac8a:	2302      	movs	r3, #2
 800ac8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ac8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3714      	adds	r7, #20
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr

0800ac9c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b087      	sub	sp, #28
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	4608      	mov	r0, r1
 800aca6:	4611      	mov	r1, r2
 800aca8:	461a      	mov	r2, r3
 800acaa:	4603      	mov	r3, r0
 800acac:	70fb      	strb	r3, [r7, #3]
 800acae:	460b      	mov	r3, r1
 800acb0:	70bb      	strb	r3, [r7, #2]
 800acb2:	4613      	mov	r3, r2
 800acb4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800acb6:	2300      	movs	r3, #0
 800acb8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800acba:	2300      	movs	r3, #0
 800acbc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800acc4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800acc6:	e025      	b.n	800ad14 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800acc8:	7dfb      	ldrb	r3, [r7, #23]
 800acca:	221a      	movs	r2, #26
 800accc:	fb02 f303 	mul.w	r3, r2, r3
 800acd0:	3308      	adds	r3, #8
 800acd2:	68fa      	ldr	r2, [r7, #12]
 800acd4:	4413      	add	r3, r2
 800acd6:	3302      	adds	r3, #2
 800acd8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	795b      	ldrb	r3, [r3, #5]
 800acde:	78fa      	ldrb	r2, [r7, #3]
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d002      	beq.n	800acea <USBH_FindInterface+0x4e>
 800ace4:	78fb      	ldrb	r3, [r7, #3]
 800ace6:	2bff      	cmp	r3, #255	; 0xff
 800ace8:	d111      	bne.n	800ad0e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800acee:	78ba      	ldrb	r2, [r7, #2]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d002      	beq.n	800acfa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800acf4:	78bb      	ldrb	r3, [r7, #2]
 800acf6:	2bff      	cmp	r3, #255	; 0xff
 800acf8:	d109      	bne.n	800ad0e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800acfe:	787a      	ldrb	r2, [r7, #1]
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d002      	beq.n	800ad0a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ad04:	787b      	ldrb	r3, [r7, #1]
 800ad06:	2bff      	cmp	r3, #255	; 0xff
 800ad08:	d101      	bne.n	800ad0e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ad0a:	7dfb      	ldrb	r3, [r7, #23]
 800ad0c:	e006      	b.n	800ad1c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ad0e:	7dfb      	ldrb	r3, [r7, #23]
 800ad10:	3301      	adds	r3, #1
 800ad12:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ad14:	7dfb      	ldrb	r3, [r7, #23]
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	d9d6      	bls.n	800acc8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ad1a:	23ff      	movs	r3, #255	; 0xff
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	371c      	adds	r7, #28
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f009 f871 	bl	8013e18 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800ad36:	2101      	movs	r1, #1
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f009 f98a 	bl	8014052 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ad3e:	2300      	movs	r3, #0
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3708      	adds	r7, #8
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b088      	sub	sp, #32
 800ad4c:	af04      	add	r7, sp, #16
 800ad4e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ad50:	2302      	movs	r3, #2
 800ad52:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800ad54:	2300      	movs	r3, #0
 800ad56:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d102      	bne.n	800ad6a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2203      	movs	r2, #3
 800ad68:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	b2db      	uxtb	r3, r3
 800ad70:	2b0b      	cmp	r3, #11
 800ad72:	f200 8247 	bhi.w	800b204 <USBH_Process+0x4bc>
 800ad76:	a201      	add	r2, pc, #4	; (adr r2, 800ad7c <USBH_Process+0x34>)
 800ad78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad7c:	0800adad 	.word	0x0800adad
 800ad80:	0800adfb 	.word	0x0800adfb
 800ad84:	0800ae7f 	.word	0x0800ae7f
 800ad88:	0800b183 	.word	0x0800b183
 800ad8c:	0800b205 	.word	0x0800b205
 800ad90:	0800af3f 	.word	0x0800af3f
 800ad94:	0800b10d 	.word	0x0800b10d
 800ad98:	0800af91 	.word	0x0800af91
 800ad9c:	0800afcd 	.word	0x0800afcd
 800ada0:	0800b007 	.word	0x0800b007
 800ada4:	0800b065 	.word	0x0800b065
 800ada8:	0800b16b 	.word	0x0800b16b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f000 8227 	beq.w	800b208 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2201      	movs	r2, #1
 800adbe:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800adc0:	20c8      	movs	r0, #200	; 0xc8
 800adc2:	f009 f98d 	bl	80140e0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f009 f883 	bl	8013ed2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2200      	movs	r2, #0
 800add8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2201      	movs	r2, #1
 800ade0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800adf0:	2200      	movs	r2, #0
 800adf2:	4619      	mov	r1, r3
 800adf4:	f006 fc70 	bl	80116d8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800adf8:	e206      	b.n	800b208 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d107      	bne.n	800ae14 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2202      	movs	r2, #2
 800ae10:	701a      	strb	r2, [r3, #0]
 800ae12:	e025      	b.n	800ae60 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ae1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae1e:	d914      	bls.n	800ae4a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ae26:	3301      	adds	r3, #1
 800ae28:	b2da      	uxtb	r2, r3
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ae36:	2b03      	cmp	r3, #3
 800ae38:	d903      	bls.n	800ae42 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	220d      	movs	r2, #13
 800ae3e:	701a      	strb	r2, [r3, #0]
 800ae40:	e00e      	b.n	800ae60 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	701a      	strb	r2, [r3, #0]
 800ae48:	e00a      	b.n	800ae60 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ae50:	f103 020a 	add.w	r2, r3, #10
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ae5a:	200a      	movs	r0, #10
 800ae5c:	f009 f940 	bl	80140e0 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2201      	movs	r2, #1
 800ae64:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae74:	2200      	movs	r2, #0
 800ae76:	4619      	mov	r1, r3
 800ae78:	f006 fc2e 	bl	80116d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ae7c:	e1cb      	b.n	800b216 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d005      	beq.n	800ae94 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ae8e:	2104      	movs	r1, #4
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ae94:	2064      	movs	r0, #100	; 0x64
 800ae96:	f009 f923 	bl	80140e0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f008 fff2 	bl	8013e84 <USBH_LL_GetSpeed>
 800aea0:	4603      	mov	r3, r0
 800aea2:	461a      	mov	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2205      	movs	r2, #5
 800aeae:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f001 fc17 	bl	800c6e6 <USBH_AllocPipe>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	461a      	mov	r2, r3
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800aec0:	2180      	movs	r1, #128	; 0x80
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f001 fc0f 	bl	800c6e6 <USBH_AllocPipe>
 800aec8:	4603      	mov	r3, r0
 800aeca:	461a      	mov	r2, r3
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	7919      	ldrb	r1, [r3, #4]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800aee4:	b292      	uxth	r2, r2
 800aee6:	9202      	str	r2, [sp, #8]
 800aee8:	2200      	movs	r2, #0
 800aeea:	9201      	str	r2, [sp, #4]
 800aeec:	9300      	str	r3, [sp, #0]
 800aeee:	4603      	mov	r3, r0
 800aef0:	2280      	movs	r2, #128	; 0x80
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f001 fbc8 	bl	800c688 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	7959      	ldrb	r1, [r3, #5]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800af0c:	b292      	uxth	r2, r2
 800af0e:	9202      	str	r2, [sp, #8]
 800af10:	2200      	movs	r2, #0
 800af12:	9201      	str	r2, [sp, #4]
 800af14:	9300      	str	r3, [sp, #0]
 800af16:	4603      	mov	r3, r0
 800af18:	2200      	movs	r2, #0
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f001 fbb4 	bl	800c688 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2201      	movs	r2, #1
 800af24:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af34:	2200      	movs	r2, #0
 800af36:	4619      	mov	r1, r3
 800af38:	f006 fbce 	bl	80116d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800af3c:	e16b      	b.n	800b216 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 f96e 	bl	800b220 <USBH_HandleEnum>
 800af44:	4603      	mov	r3, r0
 800af46:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800af48:	7bbb      	ldrb	r3, [r7, #14]
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	f040 815d 	bne.w	800b20c <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2200      	movs	r2, #0
 800af56:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800af60:	2b01      	cmp	r3, #1
 800af62:	d103      	bne.n	800af6c <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2208      	movs	r2, #8
 800af68:	701a      	strb	r2, [r3, #0]
 800af6a:	e002      	b.n	800af72 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2207      	movs	r2, #7
 800af70:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2205      	movs	r2, #5
 800af76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af86:	2200      	movs	r2, #0
 800af88:	4619      	mov	r1, r3
 800af8a:	f006 fba5 	bl	80116d8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800af8e:	e13d      	b.n	800b20c <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800af96:	2b00      	cmp	r3, #0
 800af98:	f000 813a 	beq.w	800b210 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800afa2:	2101      	movs	r1, #1
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2208      	movs	r2, #8
 800afac:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2205      	movs	r2, #5
 800afb2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800afc2:	2200      	movs	r2, #0
 800afc4:	4619      	mov	r1, r3
 800afc6:	f006 fb87 	bl	80116d8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800afca:	e121      	b.n	800b210 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800afd2:	b29b      	uxth	r3, r3
 800afd4:	4619      	mov	r1, r3
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 fd00 	bl	800b9dc <USBH_SetCfg>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d102      	bne.n	800afe8 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2209      	movs	r2, #9
 800afe6:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2201      	movs	r2, #1
 800afec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800affc:	2200      	movs	r2, #0
 800affe:	4619      	mov	r1, r3
 800b000:	f006 fb6a 	bl	80116d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b004:	e107      	b.n	800b216 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b00c:	f003 0320 	and.w	r3, r3, #32
 800b010:	2b00      	cmp	r3, #0
 800b012:	d015      	beq.n	800b040 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b014:	2101      	movs	r1, #1
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 fd03 	bl	800ba22 <USBH_SetFeature>
 800b01c:	4603      	mov	r3, r0
 800b01e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b020:	7bbb      	ldrb	r3, [r7, #14]
 800b022:	b2db      	uxtb	r3, r3
 800b024:	2b00      	cmp	r3, #0
 800b026:	d103      	bne.n	800b030 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	220a      	movs	r2, #10
 800b02c:	701a      	strb	r2, [r3, #0]
 800b02e:	e00a      	b.n	800b046 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800b030:	7bbb      	ldrb	r3, [r7, #14]
 800b032:	b2db      	uxtb	r3, r3
 800b034:	2b03      	cmp	r3, #3
 800b036:	d106      	bne.n	800b046 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	220a      	movs	r2, #10
 800b03c:	701a      	strb	r2, [r3, #0]
 800b03e:	e002      	b.n	800b046 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	220a      	movs	r2, #10
 800b044:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2201      	movs	r2, #1
 800b04a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b05a:	2200      	movs	r2, #0
 800b05c:	4619      	mov	r1, r3
 800b05e:	f006 fb3b 	bl	80116d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b062:	e0d8      	b.n	800b216 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d03f      	beq.n	800b0ee <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2200      	movs	r2, #0
 800b072:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b076:	2300      	movs	r3, #0
 800b078:	73fb      	strb	r3, [r7, #15]
 800b07a:	e016      	b.n	800b0aa <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b07c:	7bfa      	ldrb	r2, [r7, #15]
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	32de      	adds	r2, #222	; 0xde
 800b082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b086:	791a      	ldrb	r2, [r3, #4]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b08e:	429a      	cmp	r2, r3
 800b090:	d108      	bne.n	800b0a4 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b092:	7bfa      	ldrb	r2, [r7, #15]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	32de      	adds	r2, #222	; 0xde
 800b098:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b0a2:	e005      	b.n	800b0b0 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b0a4:	7bfb      	ldrb	r3, [r7, #15]
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	73fb      	strb	r3, [r7, #15]
 800b0aa:	7bfb      	ldrb	r3, [r7, #15]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d0e5      	beq.n	800b07c <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d016      	beq.n	800b0e8 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b0c0:	689b      	ldr	r3, [r3, #8]
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	4798      	blx	r3
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d109      	bne.n	800b0e0 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2206      	movs	r2, #6
 800b0d0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b0d8:	2103      	movs	r1, #3
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	4798      	blx	r3
 800b0de:	e006      	b.n	800b0ee <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	220d      	movs	r2, #13
 800b0e4:	701a      	strb	r2, [r3, #0]
 800b0e6:	e002      	b.n	800b0ee <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	220d      	movs	r2, #13
 800b0ec:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2205      	movs	r2, #5
 800b0f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b102:	2200      	movs	r2, #0
 800b104:	4619      	mov	r1, r3
 800b106:	f006 fae7 	bl	80116d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b10a:	e084      	b.n	800b216 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b112:	2b00      	cmp	r3, #0
 800b114:	d017      	beq.n	800b146 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b11c:	691b      	ldr	r3, [r3, #16]
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	4798      	blx	r3
 800b122:	4603      	mov	r3, r0
 800b124:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b126:	7bbb      	ldrb	r3, [r7, #14]
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d103      	bne.n	800b136 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	220b      	movs	r2, #11
 800b132:	701a      	strb	r2, [r3, #0]
 800b134:	e00a      	b.n	800b14c <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 800b136:	7bbb      	ldrb	r3, [r7, #14]
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	2b02      	cmp	r3, #2
 800b13c:	d106      	bne.n	800b14c <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	220d      	movs	r2, #13
 800b142:	701a      	strb	r2, [r3, #0]
 800b144:	e002      	b.n	800b14c <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	220d      	movs	r2, #13
 800b14a:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2205      	movs	r2, #5
 800b150:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b160:	2200      	movs	r2, #0
 800b162:	4619      	mov	r1, r3
 800b164:	f006 fab8 	bl	80116d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b168:	e055      	b.n	800b216 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b170:	2b00      	cmp	r3, #0
 800b172:	d04f      	beq.n	800b214 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b17a:	695b      	ldr	r3, [r3, #20]
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	4798      	blx	r3
      }
      break;
 800b180:	e048      	b.n	800b214 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2200      	movs	r2, #0
 800b186:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f7ff fcec 	bl	800ab68 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b196:	2b00      	cmp	r3, #0
 800b198:	d009      	beq.n	800b1ae <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1a0:	68db      	ldr	r3, [r3, #12]
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d005      	beq.n	800b1c4 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b1be:	2105      	movs	r1, #5
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b1ca:	b2db      	uxtb	r3, r3
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d107      	bne.n	800b1e0 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f7ff fda5 	bl	800ad28 <USBH_Start>
 800b1de:	e002      	b.n	800b1e6 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f008 fe19 	bl	8013e18 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	f006 fa6b 	bl	80116d8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b202:	e008      	b.n	800b216 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 800b204:	bf00      	nop
 800b206:	e006      	b.n	800b216 <USBH_Process+0x4ce>
      break;
 800b208:	bf00      	nop
 800b20a:	e004      	b.n	800b216 <USBH_Process+0x4ce>
      break;
 800b20c:	bf00      	nop
 800b20e:	e002      	b.n	800b216 <USBH_Process+0x4ce>
    break;
 800b210:	bf00      	nop
 800b212:	e000      	b.n	800b216 <USBH_Process+0x4ce>
      break;
 800b214:	bf00      	nop
  }
  return USBH_OK;
 800b216:	2300      	movs	r3, #0
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3710      	adds	r7, #16
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b088      	sub	sp, #32
 800b224:	af04      	add	r7, sp, #16
 800b226:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b228:	2301      	movs	r3, #1
 800b22a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b22c:	2301      	movs	r3, #1
 800b22e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	785b      	ldrb	r3, [r3, #1]
 800b234:	2b07      	cmp	r3, #7
 800b236:	f200 8208 	bhi.w	800b64a <USBH_HandleEnum+0x42a>
 800b23a:	a201      	add	r2, pc, #4	; (adr r2, 800b240 <USBH_HandleEnum+0x20>)
 800b23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b240:	0800b261 	.word	0x0800b261
 800b244:	0800b31f 	.word	0x0800b31f
 800b248:	0800b389 	.word	0x0800b389
 800b24c:	0800b417 	.word	0x0800b417
 800b250:	0800b481 	.word	0x0800b481
 800b254:	0800b4f1 	.word	0x0800b4f1
 800b258:	0800b58d 	.word	0x0800b58d
 800b25c:	0800b60b 	.word	0x0800b60b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b260:	2108      	movs	r1, #8
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 faea 	bl	800b83c <USBH_Get_DevDesc>
 800b268:	4603      	mov	r3, r0
 800b26a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b26c:	7bbb      	ldrb	r3, [r7, #14]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d130      	bne.n	800b2d4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2201      	movs	r2, #1
 800b280:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	7919      	ldrb	r1, [r3, #4]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b292:	687a      	ldr	r2, [r7, #4]
 800b294:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b296:	b292      	uxth	r2, r2
 800b298:	9202      	str	r2, [sp, #8]
 800b29a:	2200      	movs	r2, #0
 800b29c:	9201      	str	r2, [sp, #4]
 800b29e:	9300      	str	r3, [sp, #0]
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2280      	movs	r2, #128	; 0x80
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f001 f9ef 	bl	800c688 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	7959      	ldrb	r1, [r3, #5]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b2be:	b292      	uxth	r2, r2
 800b2c0:	9202      	str	r2, [sp, #8]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	9201      	str	r2, [sp, #4]
 800b2c6:	9300      	str	r3, [sp, #0]
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f001 f9db 	bl	800c688 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b2d2:	e1bc      	b.n	800b64e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b2d4:	7bbb      	ldrb	r3, [r7, #14]
 800b2d6:	2b03      	cmp	r3, #3
 800b2d8:	f040 81b9 	bne.w	800b64e <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	b2da      	uxtb	r2, r3
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b2f2:	2b03      	cmp	r3, #3
 800b2f4:	d903      	bls.n	800b2fe <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	220d      	movs	r2, #13
 800b2fa:	701a      	strb	r2, [r3, #0]
      break;
 800b2fc:	e1a7      	b.n	800b64e <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	795b      	ldrb	r3, [r3, #5]
 800b302:	4619      	mov	r1, r3
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f001 fa0f 	bl	800c728 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	791b      	ldrb	r3, [r3, #4]
 800b30e:	4619      	mov	r1, r3
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f001 fa09 	bl	800c728 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2200      	movs	r2, #0
 800b31a:	701a      	strb	r2, [r3, #0]
      break;
 800b31c:	e197      	b.n	800b64e <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b31e:	2112      	movs	r1, #18
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f000 fa8b 	bl	800b83c <USBH_Get_DevDesc>
 800b326:	4603      	mov	r3, r0
 800b328:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b32a:	7bbb      	ldrb	r3, [r7, #14]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d103      	bne.n	800b338 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2202      	movs	r2, #2
 800b334:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b336:	e18c      	b.n	800b652 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b338:	7bbb      	ldrb	r3, [r7, #14]
 800b33a:	2b03      	cmp	r3, #3
 800b33c:	f040 8189 	bne.w	800b652 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b346:	3301      	adds	r3, #1
 800b348:	b2da      	uxtb	r2, r3
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b356:	2b03      	cmp	r3, #3
 800b358:	d903      	bls.n	800b362 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	220d      	movs	r2, #13
 800b35e:	701a      	strb	r2, [r3, #0]
      break;
 800b360:	e177      	b.n	800b652 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	795b      	ldrb	r3, [r3, #5]
 800b366:	4619      	mov	r1, r3
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f001 f9dd 	bl	800c728 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	791b      	ldrb	r3, [r3, #4]
 800b372:	4619      	mov	r1, r3
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f001 f9d7 	bl	800c728 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2200      	movs	r2, #0
 800b37e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	701a      	strb	r2, [r3, #0]
      break;
 800b386:	e164      	b.n	800b652 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b388:	2101      	movs	r1, #1
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 fb02 	bl	800b994 <USBH_SetAddress>
 800b390:	4603      	mov	r3, r0
 800b392:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b394:	7bbb      	ldrb	r3, [r7, #14]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d132      	bne.n	800b400 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b39a:	2002      	movs	r0, #2
 800b39c:	f008 fea0 	bl	80140e0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2203      	movs	r2, #3
 800b3ac:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	7919      	ldrb	r1, [r3, #4]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b3c2:	b292      	uxth	r2, r2
 800b3c4:	9202      	str	r2, [sp, #8]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	9201      	str	r2, [sp, #4]
 800b3ca:	9300      	str	r3, [sp, #0]
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2280      	movs	r2, #128	; 0x80
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f001 f959 	bl	800c688 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	7959      	ldrb	r1, [r3, #5]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b3ea:	b292      	uxth	r2, r2
 800b3ec:	9202      	str	r2, [sp, #8]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	9201      	str	r2, [sp, #4]
 800b3f2:	9300      	str	r3, [sp, #0]
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f001 f945 	bl	800c688 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b3fe:	e12a      	b.n	800b656 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b400:	7bbb      	ldrb	r3, [r7, #14]
 800b402:	2b03      	cmp	r3, #3
 800b404:	f040 8127 	bne.w	800b656 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	220d      	movs	r2, #13
 800b40c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2200      	movs	r2, #0
 800b412:	705a      	strb	r2, [r3, #1]
      break;
 800b414:	e11f      	b.n	800b656 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b416:	2109      	movs	r1, #9
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f000 fa37 	bl	800b88c <USBH_Get_CfgDesc>
 800b41e:	4603      	mov	r3, r0
 800b420:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b422:	7bbb      	ldrb	r3, [r7, #14]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d103      	bne.n	800b430 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2204      	movs	r2, #4
 800b42c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b42e:	e114      	b.n	800b65a <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b430:	7bbb      	ldrb	r3, [r7, #14]
 800b432:	2b03      	cmp	r3, #3
 800b434:	f040 8111 	bne.w	800b65a <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b43e:	3301      	adds	r3, #1
 800b440:	b2da      	uxtb	r2, r3
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b44e:	2b03      	cmp	r3, #3
 800b450:	d903      	bls.n	800b45a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	220d      	movs	r2, #13
 800b456:	701a      	strb	r2, [r3, #0]
      break;
 800b458:	e0ff      	b.n	800b65a <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	795b      	ldrb	r3, [r3, #5]
 800b45e:	4619      	mov	r1, r3
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f001 f961 	bl	800c728 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	791b      	ldrb	r3, [r3, #4]
 800b46a:	4619      	mov	r1, r3
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f001 f95b 	bl	800c728 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2200      	movs	r2, #0
 800b476:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	701a      	strb	r2, [r3, #0]
      break;
 800b47e:	e0ec      	b.n	800b65a <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b486:	4619      	mov	r1, r3
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f000 f9ff 	bl	800b88c <USBH_Get_CfgDesc>
 800b48e:	4603      	mov	r3, r0
 800b490:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b492:	7bbb      	ldrb	r3, [r7, #14]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d103      	bne.n	800b4a0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2205      	movs	r2, #5
 800b49c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b49e:	e0de      	b.n	800b65e <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b4a0:	7bbb      	ldrb	r3, [r7, #14]
 800b4a2:	2b03      	cmp	r3, #3
 800b4a4:	f040 80db 	bne.w	800b65e <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	b2da      	uxtb	r2, r3
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b4be:	2b03      	cmp	r3, #3
 800b4c0:	d903      	bls.n	800b4ca <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	220d      	movs	r2, #13
 800b4c6:	701a      	strb	r2, [r3, #0]
      break;
 800b4c8:	e0c9      	b.n	800b65e <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	795b      	ldrb	r3, [r3, #5]
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f001 f929 	bl	800c728 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	791b      	ldrb	r3, [r3, #4]
 800b4da:	4619      	mov	r1, r3
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f001 f923 	bl	800c728 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	701a      	strb	r2, [r3, #0]
      break;
 800b4ee:	e0b6      	b.n	800b65e <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d036      	beq.n	800b568 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b506:	23ff      	movs	r3, #255	; 0xff
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 f9e3 	bl	800b8d4 <USBH_Get_StringDesc>
 800b50e:	4603      	mov	r3, r0
 800b510:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b512:	7bbb      	ldrb	r3, [r7, #14]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d111      	bne.n	800b53c <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2206      	movs	r2, #6
 800b51c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2205      	movs	r2, #5
 800b522:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b532:	2200      	movs	r2, #0
 800b534:	4619      	mov	r1, r3
 800b536:	f006 f8cf 	bl	80116d8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b53a:	e092      	b.n	800b662 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b53c:	7bbb      	ldrb	r3, [r7, #14]
 800b53e:	2b03      	cmp	r3, #3
 800b540:	f040 808f 	bne.w	800b662 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2206      	movs	r2, #6
 800b548:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2205      	movs	r2, #5
 800b54e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b55e:	2200      	movs	r2, #0
 800b560:	4619      	mov	r1, r3
 800b562:	f006 f8b9 	bl	80116d8 <osMessagePut>
      break;
 800b566:	e07c      	b.n	800b662 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2206      	movs	r2, #6
 800b56c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2205      	movs	r2, #5
 800b572:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b582:	2200      	movs	r2, #0
 800b584:	4619      	mov	r1, r3
 800b586:	f006 f8a7 	bl	80116d8 <osMessagePut>
      break;
 800b58a:	e06a      	b.n	800b662 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b592:	2b00      	cmp	r3, #0
 800b594:	d027      	beq.n	800b5e6 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b5a2:	23ff      	movs	r3, #255	; 0xff
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 f995 	bl	800b8d4 <USBH_Get_StringDesc>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b5ae:	7bbb      	ldrb	r3, [r7, #14]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d103      	bne.n	800b5bc <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2207      	movs	r2, #7
 800b5b8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b5ba:	e054      	b.n	800b666 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b5bc:	7bbb      	ldrb	r3, [r7, #14]
 800b5be:	2b03      	cmp	r3, #3
 800b5c0:	d151      	bne.n	800b666 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2207      	movs	r2, #7
 800b5c6:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2205      	movs	r2, #5
 800b5cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b5dc:	2200      	movs	r2, #0
 800b5de:	4619      	mov	r1, r3
 800b5e0:	f006 f87a 	bl	80116d8 <osMessagePut>
      break;
 800b5e4:	e03f      	b.n	800b666 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2207      	movs	r2, #7
 800b5ea:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2205      	movs	r2, #5
 800b5f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b600:	2200      	movs	r2, #0
 800b602:	4619      	mov	r1, r3
 800b604:	f006 f868 	bl	80116d8 <osMessagePut>
      break;
 800b608:	e02d      	b.n	800b666 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b610:	2b00      	cmp	r3, #0
 800b612:	d017      	beq.n	800b644 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b620:	23ff      	movs	r3, #255	; 0xff
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 f956 	bl	800b8d4 <USBH_Get_StringDesc>
 800b628:	4603      	mov	r3, r0
 800b62a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b62c:	7bbb      	ldrb	r3, [r7, #14]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d102      	bne.n	800b638 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b632:	2300      	movs	r3, #0
 800b634:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b636:	e018      	b.n	800b66a <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b638:	7bbb      	ldrb	r3, [r7, #14]
 800b63a:	2b03      	cmp	r3, #3
 800b63c:	d115      	bne.n	800b66a <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800b63e:	2300      	movs	r3, #0
 800b640:	73fb      	strb	r3, [r7, #15]
      break;
 800b642:	e012      	b.n	800b66a <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800b644:	2300      	movs	r3, #0
 800b646:	73fb      	strb	r3, [r7, #15]
      break;
 800b648:	e00f      	b.n	800b66a <USBH_HandleEnum+0x44a>

    default:
      break;
 800b64a:	bf00      	nop
 800b64c:	e00e      	b.n	800b66c <USBH_HandleEnum+0x44c>
      break;
 800b64e:	bf00      	nop
 800b650:	e00c      	b.n	800b66c <USBH_HandleEnum+0x44c>
      break;
 800b652:	bf00      	nop
 800b654:	e00a      	b.n	800b66c <USBH_HandleEnum+0x44c>
      break;
 800b656:	bf00      	nop
 800b658:	e008      	b.n	800b66c <USBH_HandleEnum+0x44c>
      break;
 800b65a:	bf00      	nop
 800b65c:	e006      	b.n	800b66c <USBH_HandleEnum+0x44c>
      break;
 800b65e:	bf00      	nop
 800b660:	e004      	b.n	800b66c <USBH_HandleEnum+0x44c>
      break;
 800b662:	bf00      	nop
 800b664:	e002      	b.n	800b66c <USBH_HandleEnum+0x44c>
      break;
 800b666:	bf00      	nop
 800b668:	e000      	b.n	800b66c <USBH_HandleEnum+0x44c>
      break;
 800b66a:	bf00      	nop
  }
  return Status;
 800b66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3710      	adds	r7, #16
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop

0800b678 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	683a      	ldr	r2, [r7, #0]
 800b686:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b68a:	bf00      	nop
 800b68c:	370c      	adds	r7, #12
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr

0800b696 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b696:	b580      	push	{r7, lr}
 800b698:	b082      	sub	sp, #8
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b6a4:	1c5a      	adds	r2, r3, #1
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 f804 	bl	800b6ba <USBH_HandleSof>
}
 800b6b2:	bf00      	nop
 800b6b4:	3708      	adds	r7, #8
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b6ba:	b580      	push	{r7, lr}
 800b6bc:	b082      	sub	sp, #8
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	b2db      	uxtb	r3, r3
 800b6c8:	2b0b      	cmp	r3, #11
 800b6ca:	d10a      	bne.n	800b6e2 <USBH_HandleSof+0x28>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d005      	beq.n	800b6e2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b6dc:	699b      	ldr	r3, [r3, #24]
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	4798      	blx	r3
  }
}
 800b6e2:	bf00      	nop
 800b6e4:	3708      	adds	r7, #8
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}

0800b6ea <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	b082      	sub	sp, #8
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b70e:	2200      	movs	r2, #0
 800b710:	4619      	mov	r1, r3
 800b712:	f005 ffe1 	bl	80116d8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800b716:	bf00      	nop
}
 800b718:	3708      	adds	r7, #8
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}

0800b71e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b71e:	b480      	push	{r7}
 800b720:	b083      	sub	sp, #12
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2200      	movs	r2, #0
 800b72a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b72e:	bf00      	nop
}
 800b730:	370c      	adds	r7, #12
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr

0800b73a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b73a:	b580      	push	{r7, lr}
 800b73c:	b082      	sub	sp, #8
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2201      	movs	r2, #1
 800b746:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2200      	movs	r2, #0
 800b74e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2200      	movs	r2, #0
 800b756:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2201      	movs	r2, #1
 800b75e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b76e:	2200      	movs	r2, #0
 800b770:	4619      	mov	r1, r3
 800b772:	f005 ffb1 	bl	80116d8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b776:	2300      	movs	r3, #0
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3708      	adds	r7, #8
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2201      	movs	r2, #1
 800b78c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2200      	movs	r2, #0
 800b794:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2200      	movs	r2, #0
 800b79c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f008 fb54 	bl	8013e4e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	791b      	ldrb	r3, [r3, #4]
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 ffbb 	bl	800c728 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	795b      	ldrb	r3, [r3, #5]
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f000 ffb5 	bl	800c728 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	f005 ff7f 	bl	80116d8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b7da:	2300      	movs	r3, #0
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3708      	adds	r7, #8
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b086      	sub	sp, #24
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800b7f2:	f107 030c 	add.w	r3, r7, #12
 800b7f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f005 ffac 	bl	8011758 <osMessageGet>
    if (event.status == osEventMessage)
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2b10      	cmp	r3, #16
 800b804:	d1f2      	bne.n	800b7ec <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f7ff fa9e 	bl	800ad48 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800b80c:	e7ee      	b.n	800b7ec <USBH_Process_OS+0x8>

0800b80e <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800b80e:	b580      	push	{r7, lr}
 800b810:	b082      	sub	sp, #8
 800b812:	af00      	add	r7, sp, #0
 800b814:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2201      	movs	r2, #1
 800b81a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b82a:	2200      	movs	r2, #0
 800b82c:	4619      	mov	r1, r3
 800b82e:	f005 ff53 	bl	80116d8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800b832:	2300      	movs	r3, #0
}
 800b834:	4618      	mov	r0, r3
 800b836:	3708      	adds	r7, #8
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b086      	sub	sp, #24
 800b840:	af02      	add	r7, sp, #8
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	460b      	mov	r3, r1
 800b846:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b84e:	78fb      	ldrb	r3, [r7, #3]
 800b850:	b29b      	uxth	r3, r3
 800b852:	9300      	str	r3, [sp, #0]
 800b854:	4613      	mov	r3, r2
 800b856:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b85a:	2100      	movs	r1, #0
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 f864 	bl	800b92a <USBH_GetDescriptor>
 800b862:	4603      	mov	r3, r0
 800b864:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800b866:	7bfb      	ldrb	r3, [r7, #15]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d10a      	bne.n	800b882 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b878:	78fa      	ldrb	r2, [r7, #3]
 800b87a:	b292      	uxth	r2, r2
 800b87c:	4619      	mov	r1, r3
 800b87e:	f000 f918 	bl	800bab2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b882:	7bfb      	ldrb	r3, [r7, #15]
}
 800b884:	4618      	mov	r0, r3
 800b886:	3710      	adds	r7, #16
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b086      	sub	sp, #24
 800b890:	af02      	add	r7, sp, #8
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	460b      	mov	r3, r1
 800b896:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	331c      	adds	r3, #28
 800b89c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b89e:	887b      	ldrh	r3, [r7, #2]
 800b8a0:	9300      	str	r3, [sp, #0]
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8a8:	2100      	movs	r1, #0
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 f83d 	bl	800b92a <USBH_GetDescriptor>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b8b4:	7bfb      	ldrb	r3, [r7, #15]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d107      	bne.n	800b8ca <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b8ba:	887b      	ldrh	r3, [r7, #2]
 800b8bc:	461a      	mov	r2, r3
 800b8be:	68b9      	ldr	r1, [r7, #8]
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f000 f987 	bl	800bbd4 <USBH_ParseCfgDesc>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b8ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3710      	adds	r7, #16
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b088      	sub	sp, #32
 800b8d8:	af02      	add	r7, sp, #8
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	607a      	str	r2, [r7, #4]
 800b8de:	461a      	mov	r2, r3
 800b8e0:	460b      	mov	r3, r1
 800b8e2:	72fb      	strb	r3, [r7, #11]
 800b8e4:	4613      	mov	r3, r2
 800b8e6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800b8e8:	7afb      	ldrb	r3, [r7, #11]
 800b8ea:	b29b      	uxth	r3, r3
 800b8ec:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b8f0:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b8f8:	893b      	ldrh	r3, [r7, #8]
 800b8fa:	9300      	str	r3, [sp, #0]
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	2100      	movs	r1, #0
 800b900:	68f8      	ldr	r0, [r7, #12]
 800b902:	f000 f812 	bl	800b92a <USBH_GetDescriptor>
 800b906:	4603      	mov	r3, r0
 800b908:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b90a:	7dfb      	ldrb	r3, [r7, #23]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d107      	bne.n	800b920 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b916:	893a      	ldrh	r2, [r7, #8]
 800b918:	6879      	ldr	r1, [r7, #4]
 800b91a:	4618      	mov	r0, r3
 800b91c:	f000 fb24 	bl	800bf68 <USBH_ParseStringDesc>
  }

  return status;
 800b920:	7dfb      	ldrb	r3, [r7, #23]
}
 800b922:	4618      	mov	r0, r3
 800b924:	3718      	adds	r7, #24
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}

0800b92a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b92a:	b580      	push	{r7, lr}
 800b92c:	b084      	sub	sp, #16
 800b92e:	af00      	add	r7, sp, #0
 800b930:	60f8      	str	r0, [r7, #12]
 800b932:	607b      	str	r3, [r7, #4]
 800b934:	460b      	mov	r3, r1
 800b936:	72fb      	strb	r3, [r7, #11]
 800b938:	4613      	mov	r3, r2
 800b93a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	789b      	ldrb	r3, [r3, #2]
 800b940:	2b01      	cmp	r3, #1
 800b942:	d11c      	bne.n	800b97e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b944:	7afb      	ldrb	r3, [r7, #11]
 800b946:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b94a:	b2da      	uxtb	r2, r3
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2206      	movs	r2, #6
 800b954:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	893a      	ldrh	r2, [r7, #8]
 800b95a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b95c:	893b      	ldrh	r3, [r7, #8]
 800b95e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b962:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b966:	d104      	bne.n	800b972 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f240 4209 	movw	r2, #1033	; 0x409
 800b96e:	829a      	strh	r2, [r3, #20]
 800b970:	e002      	b.n	800b978 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2200      	movs	r2, #0
 800b976:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	8b3a      	ldrh	r2, [r7, #24]
 800b97c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b97e:	8b3b      	ldrh	r3, [r7, #24]
 800b980:	461a      	mov	r2, r3
 800b982:	6879      	ldr	r1, [r7, #4]
 800b984:	68f8      	ldr	r0, [r7, #12]
 800b986:	f000 fb3d 	bl	800c004 <USBH_CtlReq>
 800b98a:	4603      	mov	r3, r0
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3710      	adds	r7, #16
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b082      	sub	sp, #8
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
 800b99c:	460b      	mov	r3, r1
 800b99e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	789b      	ldrb	r3, [r3, #2]
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d10f      	bne.n	800b9c8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2205      	movs	r2, #5
 800b9b2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b9b4:	78fb      	ldrb	r3, [r7, #3]
 800b9b6:	b29a      	uxth	r2, r3
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	2100      	movs	r1, #0
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f000 fb19 	bl	800c004 <USBH_CtlReq>
 800b9d2:	4603      	mov	r3, r0
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3708      	adds	r7, #8
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b082      	sub	sp, #8
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	789b      	ldrb	r3, [r3, #2]
 800b9ec:	2b01      	cmp	r3, #1
 800b9ee:	d10e      	bne.n	800ba0e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2209      	movs	r2, #9
 800b9fa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	887a      	ldrh	r2, [r7, #2]
 800ba00:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2200      	movs	r2, #0
 800ba06:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ba0e:	2200      	movs	r2, #0
 800ba10:	2100      	movs	r1, #0
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f000 faf6 	bl	800c004 <USBH_CtlReq>
 800ba18:	4603      	mov	r3, r0
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3708      	adds	r7, #8
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b082      	sub	sp, #8
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	789b      	ldrb	r3, [r3, #2]
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d10f      	bne.n	800ba56 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2203      	movs	r2, #3
 800ba40:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ba42:	78fb      	ldrb	r3, [r7, #3]
 800ba44:	b29a      	uxth	r2, r3
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2200      	movs	r2, #0
 800ba54:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ba56:	2200      	movs	r2, #0
 800ba58:	2100      	movs	r1, #0
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 fad2 	bl	800c004 <USBH_CtlReq>
 800ba60:	4603      	mov	r3, r0
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3708      	adds	r7, #8
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}

0800ba6a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ba6a:	b580      	push	{r7, lr}
 800ba6c:	b082      	sub	sp, #8
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
 800ba72:	460b      	mov	r3, r1
 800ba74:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	789b      	ldrb	r3, [r3, #2]
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	d10f      	bne.n	800ba9e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2202      	movs	r2, #2
 800ba82:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2201      	movs	r2, #1
 800ba88:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ba90:	78fb      	ldrb	r3, [r7, #3]
 800ba92:	b29a      	uxth	r2, r3
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800ba9e:	2200      	movs	r2, #0
 800baa0:	2100      	movs	r1, #0
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f000 faae 	bl	800c004 <USBH_CtlReq>
 800baa8:	4603      	mov	r3, r0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3708      	adds	r7, #8
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}

0800bab2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800bab2:	b480      	push	{r7}
 800bab4:	b085      	sub	sp, #20
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	60f8      	str	r0, [r7, #12]
 800baba:	60b9      	str	r1, [r7, #8]
 800babc:	4613      	mov	r3, r2
 800babe:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	781a      	ldrb	r2, [r3, #0]
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	785a      	ldrb	r2, [r3, #1]
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	3302      	adds	r3, #2
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	b29a      	uxth	r2, r3
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	3303      	adds	r3, #3
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	b29b      	uxth	r3, r3
 800bae0:	021b      	lsls	r3, r3, #8
 800bae2:	b29b      	uxth	r3, r3
 800bae4:	4313      	orrs	r3, r2
 800bae6:	b29a      	uxth	r2, r3
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	791a      	ldrb	r2, [r3, #4]
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	795a      	ldrb	r2, [r3, #5]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	799a      	ldrb	r2, [r3, #6]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	79da      	ldrb	r2, [r3, #7]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	79db      	ldrb	r3, [r3, #7]
 800bb10:	2b20      	cmp	r3, #32
 800bb12:	dc11      	bgt.n	800bb38 <USBH_ParseDevDesc+0x86>
 800bb14:	2b08      	cmp	r3, #8
 800bb16:	db16      	blt.n	800bb46 <USBH_ParseDevDesc+0x94>
 800bb18:	3b08      	subs	r3, #8
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	fa02 f303 	lsl.w	r3, r2, r3
 800bb20:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800bb24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	bf14      	ite	ne
 800bb2c:	2301      	movne	r3, #1
 800bb2e:	2300      	moveq	r3, #0
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d102      	bne.n	800bb3c <USBH_ParseDevDesc+0x8a>
 800bb36:	e006      	b.n	800bb46 <USBH_ParseDevDesc+0x94>
 800bb38:	2b40      	cmp	r3, #64	; 0x40
 800bb3a:	d104      	bne.n	800bb46 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	79da      	ldrb	r2, [r3, #7]
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	71da      	strb	r2, [r3, #7]
      break;
 800bb44:	e003      	b.n	800bb4e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2240      	movs	r2, #64	; 0x40
 800bb4a:	71da      	strb	r2, [r3, #7]
      break;
 800bb4c:	bf00      	nop
  }

  if (length > 8U)
 800bb4e:	88fb      	ldrh	r3, [r7, #6]
 800bb50:	2b08      	cmp	r3, #8
 800bb52:	d939      	bls.n	800bbc8 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	3308      	adds	r3, #8
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	b29a      	uxth	r2, r3
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	3309      	adds	r3, #9
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	021b      	lsls	r3, r3, #8
 800bb66:	b29b      	uxth	r3, r3
 800bb68:	4313      	orrs	r3, r2
 800bb6a:	b29a      	uxth	r2, r3
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	330a      	adds	r3, #10
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	b29a      	uxth	r2, r3
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	330b      	adds	r3, #11
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	b29b      	uxth	r3, r3
 800bb80:	021b      	lsls	r3, r3, #8
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	4313      	orrs	r3, r2
 800bb86:	b29a      	uxth	r2, r3
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	330c      	adds	r3, #12
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	b29a      	uxth	r2, r3
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	330d      	adds	r3, #13
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	b29b      	uxth	r3, r3
 800bb9c:	021b      	lsls	r3, r3, #8
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	4313      	orrs	r3, r2
 800bba2:	b29a      	uxth	r2, r3
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	7b9a      	ldrb	r2, [r3, #14]
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	7bda      	ldrb	r2, [r3, #15]
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	7c1a      	ldrb	r2, [r3, #16]
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	7c5a      	ldrb	r2, [r3, #17]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	745a      	strb	r2, [r3, #17]
  }
}
 800bbc8:	bf00      	nop
 800bbca:	3714      	adds	r7, #20
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr

0800bbd4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b08c      	sub	sp, #48	; 0x30
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	60b9      	str	r1, [r7, #8]
 800bbde:	4613      	mov	r3, r2
 800bbe0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bbe8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800bbea:	2300      	movs	r3, #0
 800bbec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	781a      	ldrb	r2, [r3, #0]
 800bc08:	6a3b      	ldr	r3, [r7, #32]
 800bc0a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	785a      	ldrb	r2, [r3, #1]
 800bc10:	6a3b      	ldr	r3, [r7, #32]
 800bc12:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	3302      	adds	r3, #2
 800bc18:	781b      	ldrb	r3, [r3, #0]
 800bc1a:	b29a      	uxth	r2, r3
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	3303      	adds	r3, #3
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	021b      	lsls	r3, r3, #8
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	4313      	orrs	r3, r2
 800bc2a:	b29b      	uxth	r3, r3
 800bc2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc30:	bf28      	it	cs
 800bc32:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800bc36:	b29a      	uxth	r2, r3
 800bc38:	6a3b      	ldr	r3, [r7, #32]
 800bc3a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	791a      	ldrb	r2, [r3, #4]
 800bc40:	6a3b      	ldr	r3, [r7, #32]
 800bc42:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	795a      	ldrb	r2, [r3, #5]
 800bc48:	6a3b      	ldr	r3, [r7, #32]
 800bc4a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	799a      	ldrb	r2, [r3, #6]
 800bc50:	6a3b      	ldr	r3, [r7, #32]
 800bc52:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	79da      	ldrb	r2, [r3, #7]
 800bc58:	6a3b      	ldr	r3, [r7, #32]
 800bc5a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	7a1a      	ldrb	r2, [r3, #8]
 800bc60:	6a3b      	ldr	r3, [r7, #32]
 800bc62:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800bc64:	6a3b      	ldr	r3, [r7, #32]
 800bc66:	781b      	ldrb	r3, [r3, #0]
 800bc68:	2b09      	cmp	r3, #9
 800bc6a:	d002      	beq.n	800bc72 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800bc6c:	6a3b      	ldr	r3, [r7, #32]
 800bc6e:	2209      	movs	r2, #9
 800bc70:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bc72:	88fb      	ldrh	r3, [r7, #6]
 800bc74:	2b09      	cmp	r3, #9
 800bc76:	f240 809d 	bls.w	800bdb4 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800bc7a:	2309      	movs	r3, #9
 800bc7c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bc82:	e081      	b.n	800bd88 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bc84:	f107 0316 	add.w	r3, r7, #22
 800bc88:	4619      	mov	r1, r3
 800bc8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc8c:	f000 f99f 	bl	800bfce <USBH_GetNextDesc>
 800bc90:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800bc92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc94:	785b      	ldrb	r3, [r3, #1]
 800bc96:	2b04      	cmp	r3, #4
 800bc98:	d176      	bne.n	800bd88 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800bc9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	2b09      	cmp	r3, #9
 800bca0:	d002      	beq.n	800bca8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800bca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca4:	2209      	movs	r2, #9
 800bca6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800bca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcac:	221a      	movs	r2, #26
 800bcae:	fb02 f303 	mul.w	r3, r2, r3
 800bcb2:	3308      	adds	r3, #8
 800bcb4:	6a3a      	ldr	r2, [r7, #32]
 800bcb6:	4413      	add	r3, r2
 800bcb8:	3302      	adds	r3, #2
 800bcba:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800bcbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bcbe:	69f8      	ldr	r0, [r7, #28]
 800bcc0:	f000 f87e 	bl	800bdc0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800bcca:	2300      	movs	r3, #0
 800bccc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bcce:	e043      	b.n	800bd58 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bcd0:	f107 0316 	add.w	r3, r7, #22
 800bcd4:	4619      	mov	r1, r3
 800bcd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcd8:	f000 f979 	bl	800bfce <USBH_GetNextDesc>
 800bcdc:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bcde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce0:	785b      	ldrb	r3, [r3, #1]
 800bce2:	2b05      	cmp	r3, #5
 800bce4:	d138      	bne.n	800bd58 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800bce6:	69fb      	ldr	r3, [r7, #28]
 800bce8:	795b      	ldrb	r3, [r3, #5]
 800bcea:	2b01      	cmp	r3, #1
 800bcec:	d10f      	bne.n	800bd0e <USBH_ParseCfgDesc+0x13a>
 800bcee:	69fb      	ldr	r3, [r7, #28]
 800bcf0:	799b      	ldrb	r3, [r3, #6]
 800bcf2:	2b02      	cmp	r3, #2
 800bcf4:	d10b      	bne.n	800bd0e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800bcf6:	69fb      	ldr	r3, [r7, #28]
 800bcf8:	79db      	ldrb	r3, [r3, #7]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d10f      	bne.n	800bd1e <USBH_ParseCfgDesc+0x14a>
 800bcfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd00:	781b      	ldrb	r3, [r3, #0]
 800bd02:	2b09      	cmp	r3, #9
 800bd04:	d00b      	beq.n	800bd1e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800bd06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd08:	2209      	movs	r2, #9
 800bd0a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800bd0c:	e007      	b.n	800bd1e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800bd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	2b07      	cmp	r3, #7
 800bd14:	d004      	beq.n	800bd20 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800bd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd18:	2207      	movs	r2, #7
 800bd1a:	701a      	strb	r2, [r3, #0]
 800bd1c:	e000      	b.n	800bd20 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800bd1e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800bd20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd24:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bd28:	3201      	adds	r2, #1
 800bd2a:	00d2      	lsls	r2, r2, #3
 800bd2c:	211a      	movs	r1, #26
 800bd2e:	fb01 f303 	mul.w	r3, r1, r3
 800bd32:	4413      	add	r3, r2
 800bd34:	3308      	adds	r3, #8
 800bd36:	6a3a      	ldr	r2, [r7, #32]
 800bd38:	4413      	add	r3, r2
 800bd3a:	3304      	adds	r3, #4
 800bd3c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800bd3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd40:	69b9      	ldr	r1, [r7, #24]
 800bd42:	68f8      	ldr	r0, [r7, #12]
 800bd44:	f000 f86b 	bl	800be1e <USBH_ParseEPDesc>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800bd4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bd52:	3301      	adds	r3, #1
 800bd54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bd58:	69fb      	ldr	r3, [r7, #28]
 800bd5a:	791b      	ldrb	r3, [r3, #4]
 800bd5c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d204      	bcs.n	800bd6e <USBH_ParseCfgDesc+0x19a>
 800bd64:	6a3b      	ldr	r3, [r7, #32]
 800bd66:	885a      	ldrh	r2, [r3, #2]
 800bd68:	8afb      	ldrh	r3, [r7, #22]
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d8b0      	bhi.n	800bcd0 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800bd6e:	69fb      	ldr	r3, [r7, #28]
 800bd70:	791b      	ldrb	r3, [r3, #4]
 800bd72:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d201      	bcs.n	800bd7e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800bd7a:	2303      	movs	r3, #3
 800bd7c:	e01c      	b.n	800bdb8 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800bd7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd82:	3301      	adds	r3, #1
 800bd84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bd88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd8c:	2b01      	cmp	r3, #1
 800bd8e:	d805      	bhi.n	800bd9c <USBH_ParseCfgDesc+0x1c8>
 800bd90:	6a3b      	ldr	r3, [r7, #32]
 800bd92:	885a      	ldrh	r2, [r3, #2]
 800bd94:	8afb      	ldrh	r3, [r7, #22]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	f63f af74 	bhi.w	800bc84 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800bd9c:	6a3b      	ldr	r3, [r7, #32]
 800bd9e:	791b      	ldrb	r3, [r3, #4]
 800bda0:	2b02      	cmp	r3, #2
 800bda2:	bf28      	it	cs
 800bda4:	2302      	movcs	r3, #2
 800bda6:	b2db      	uxtb	r3, r3
 800bda8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d201      	bcs.n	800bdb4 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800bdb0:	2303      	movs	r3, #3
 800bdb2:	e001      	b.n	800bdb8 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800bdb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3730      	adds	r7, #48	; 0x30
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b083      	sub	sp, #12
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	781a      	ldrb	r2, [r3, #0]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	785a      	ldrb	r2, [r3, #1]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	789a      	ldrb	r2, [r3, #2]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	78da      	ldrb	r2, [r3, #3]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	791a      	ldrb	r2, [r3, #4]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	795a      	ldrb	r2, [r3, #5]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	799a      	ldrb	r2, [r3, #6]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	79da      	ldrb	r2, [r3, #7]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	7a1a      	ldrb	r2, [r3, #8]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	721a      	strb	r2, [r3, #8]
}
 800be12:	bf00      	nop
 800be14:	370c      	adds	r7, #12
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr

0800be1e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800be1e:	b480      	push	{r7}
 800be20:	b087      	sub	sp, #28
 800be22:	af00      	add	r7, sp, #0
 800be24:	60f8      	str	r0, [r7, #12]
 800be26:	60b9      	str	r1, [r7, #8]
 800be28:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800be2a:	2300      	movs	r3, #0
 800be2c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	781a      	ldrb	r2, [r3, #0]
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	785a      	ldrb	r2, [r3, #1]
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	789a      	ldrb	r2, [r3, #2]
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	78da      	ldrb	r2, [r3, #3]
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	3304      	adds	r3, #4
 800be52:	781b      	ldrb	r3, [r3, #0]
 800be54:	b29a      	uxth	r2, r3
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	3305      	adds	r3, #5
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	021b      	lsls	r3, r3, #8
 800be60:	b29b      	uxth	r3, r3
 800be62:	4313      	orrs	r3, r2
 800be64:	b29a      	uxth	r2, r3
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	799a      	ldrb	r2, [r3, #6]
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	889b      	ldrh	r3, [r3, #4]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d102      	bne.n	800be80 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800be7a:	2303      	movs	r3, #3
 800be7c:	75fb      	strb	r3, [r7, #23]
 800be7e:	e033      	b.n	800bee8 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	889b      	ldrh	r3, [r3, #4]
 800be84:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800be88:	f023 0307 	bic.w	r3, r3, #7
 800be8c:	b29a      	uxth	r2, r3
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	889b      	ldrh	r3, [r3, #4]
 800be96:	b21a      	sxth	r2, r3
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	3304      	adds	r3, #4
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	b299      	uxth	r1, r3
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	3305      	adds	r3, #5
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	021b      	lsls	r3, r3, #8
 800beaa:	b29b      	uxth	r3, r3
 800beac:	430b      	orrs	r3, r1
 800beae:	b29b      	uxth	r3, r3
 800beb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d110      	bne.n	800beda <USBH_ParseEPDesc+0xbc>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	3304      	adds	r3, #4
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	b299      	uxth	r1, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	3305      	adds	r3, #5
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	b29b      	uxth	r3, r3
 800bec8:	021b      	lsls	r3, r3, #8
 800beca:	b29b      	uxth	r3, r3
 800becc:	430b      	orrs	r3, r1
 800bece:	b29b      	uxth	r3, r3
 800bed0:	b21b      	sxth	r3, r3
 800bed2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bed6:	b21b      	sxth	r3, r3
 800bed8:	e001      	b.n	800bede <USBH_ParseEPDesc+0xc0>
 800beda:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bede:	4313      	orrs	r3, r2
 800bee0:	b21b      	sxth	r3, r3
 800bee2:	b29a      	uxth	r2, r3
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d116      	bne.n	800bf20 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	78db      	ldrb	r3, [r3, #3]
 800bef6:	f003 0303 	and.w	r3, r3, #3
 800befa:	2b01      	cmp	r3, #1
 800befc:	d005      	beq.n	800bf0a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	78db      	ldrb	r3, [r3, #3]
 800bf02:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bf06:	2b03      	cmp	r3, #3
 800bf08:	d127      	bne.n	800bf5a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	799b      	ldrb	r3, [r3, #6]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d003      	beq.n	800bf1a <USBH_ParseEPDesc+0xfc>
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	799b      	ldrb	r3, [r3, #6]
 800bf16:	2b10      	cmp	r3, #16
 800bf18:	d91f      	bls.n	800bf5a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800bf1a:	2303      	movs	r3, #3
 800bf1c:	75fb      	strb	r3, [r7, #23]
 800bf1e:	e01c      	b.n	800bf5a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	78db      	ldrb	r3, [r3, #3]
 800bf24:	f003 0303 	and.w	r3, r3, #3
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d10a      	bne.n	800bf42 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	799b      	ldrb	r3, [r3, #6]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d003      	beq.n	800bf3c <USBH_ParseEPDesc+0x11e>
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	799b      	ldrb	r3, [r3, #6]
 800bf38:	2b10      	cmp	r3, #16
 800bf3a:	d90e      	bls.n	800bf5a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800bf3c:	2303      	movs	r3, #3
 800bf3e:	75fb      	strb	r3, [r7, #23]
 800bf40:	e00b      	b.n	800bf5a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	78db      	ldrb	r3, [r3, #3]
 800bf46:	f003 0303 	and.w	r3, r3, #3
 800bf4a:	2b03      	cmp	r3, #3
 800bf4c:	d105      	bne.n	800bf5a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	799b      	ldrb	r3, [r3, #6]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d101      	bne.n	800bf5a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800bf56:	2303      	movs	r3, #3
 800bf58:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800bf5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	371c      	adds	r7, #28
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr

0800bf68 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b087      	sub	sp, #28
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	60f8      	str	r0, [r7, #12]
 800bf70:	60b9      	str	r1, [r7, #8]
 800bf72:	4613      	mov	r3, r2
 800bf74:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	2b03      	cmp	r3, #3
 800bf7e:	d120      	bne.n	800bfc2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	1e9a      	subs	r2, r3, #2
 800bf86:	88fb      	ldrh	r3, [r7, #6]
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	bf28      	it	cs
 800bf8c:	4613      	movcs	r3, r2
 800bf8e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	3302      	adds	r3, #2
 800bf94:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800bf96:	2300      	movs	r3, #0
 800bf98:	82fb      	strh	r3, [r7, #22]
 800bf9a:	e00b      	b.n	800bfb4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800bf9c:	8afb      	ldrh	r3, [r7, #22]
 800bf9e:	68fa      	ldr	r2, [r7, #12]
 800bfa0:	4413      	add	r3, r2
 800bfa2:	781a      	ldrb	r2, [r3, #0]
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	701a      	strb	r2, [r3, #0]
      pdest++;
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	3301      	adds	r3, #1
 800bfac:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800bfae:	8afb      	ldrh	r3, [r7, #22]
 800bfb0:	3302      	adds	r3, #2
 800bfb2:	82fb      	strh	r3, [r7, #22]
 800bfb4:	8afa      	ldrh	r2, [r7, #22]
 800bfb6:	8abb      	ldrh	r3, [r7, #20]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d3ef      	bcc.n	800bf9c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	701a      	strb	r2, [r3, #0]
  }
}
 800bfc2:	bf00      	nop
 800bfc4:	371c      	adds	r7, #28
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfcc:	4770      	bx	lr

0800bfce <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800bfce:	b480      	push	{r7}
 800bfd0:	b085      	sub	sp, #20
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]
 800bfd6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	881a      	ldrh	r2, [r3, #0]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	781b      	ldrb	r3, [r3, #0]
 800bfe0:	b29b      	uxth	r3, r3
 800bfe2:	4413      	add	r3, r2
 800bfe4:	b29a      	uxth	r2, r3
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	4413      	add	r3, r2
 800bff4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bff6:	68fb      	ldr	r3, [r7, #12]
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3714      	adds	r7, #20
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr

0800c004 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b086      	sub	sp, #24
 800c008:	af00      	add	r7, sp, #0
 800c00a:	60f8      	str	r0, [r7, #12]
 800c00c:	60b9      	str	r1, [r7, #8]
 800c00e:	4613      	mov	r3, r2
 800c010:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c012:	2301      	movs	r3, #1
 800c014:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	789b      	ldrb	r3, [r3, #2]
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	d002      	beq.n	800c024 <USBH_CtlReq+0x20>
 800c01e:	2b02      	cmp	r3, #2
 800c020:	d01d      	beq.n	800c05e <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800c022:	e043      	b.n	800c0ac <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	68ba      	ldr	r2, [r7, #8]
 800c028:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	88fa      	ldrh	r2, [r7, #6]
 800c02e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2201      	movs	r2, #1
 800c034:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2202      	movs	r2, #2
 800c03a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c03c:	2301      	movs	r3, #1
 800c03e:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	2203      	movs	r2, #3
 800c044:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c054:	2200      	movs	r2, #0
 800c056:	4619      	mov	r1, r3
 800c058:	f005 fb3e 	bl	80116d8 <osMessagePut>
      break;
 800c05c:	e026      	b.n	800c0ac <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800c05e:	68f8      	ldr	r0, [r7, #12]
 800c060:	f000 f82a 	bl	800c0b8 <USBH_HandleControl>
 800c064:	4603      	mov	r3, r0
 800c066:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c068:	7dfb      	ldrb	r3, [r7, #23]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d002      	beq.n	800c074 <USBH_CtlReq+0x70>
 800c06e:	7dfb      	ldrb	r3, [r7, #23]
 800c070:	2b03      	cmp	r3, #3
 800c072:	d106      	bne.n	800c082 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2201      	movs	r2, #1
 800c078:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	2200      	movs	r2, #0
 800c07e:	761a      	strb	r2, [r3, #24]
 800c080:	e005      	b.n	800c08e <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800c082:	7dfb      	ldrb	r3, [r7, #23]
 800c084:	2b02      	cmp	r3, #2
 800c086:	d102      	bne.n	800c08e <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	2201      	movs	r2, #1
 800c08c:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2203      	movs	r2, #3
 800c092:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	f005 fb17 	bl	80116d8 <osMessagePut>
      break;
 800c0aa:	bf00      	nop
  }
  return status;
 800c0ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3718      	adds	r7, #24
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
	...

0800c0b8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b086      	sub	sp, #24
 800c0bc:	af02      	add	r7, sp, #8
 800c0be:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	7e1b      	ldrb	r3, [r3, #24]
 800c0cc:	3b01      	subs	r3, #1
 800c0ce:	2b0a      	cmp	r3, #10
 800c0d0:	f200 8229 	bhi.w	800c526 <USBH_HandleControl+0x46e>
 800c0d4:	a201      	add	r2, pc, #4	; (adr r2, 800c0dc <USBH_HandleControl+0x24>)
 800c0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0da:	bf00      	nop
 800c0dc:	0800c109 	.word	0x0800c109
 800c0e0:	0800c123 	.word	0x0800c123
 800c0e4:	0800c1c5 	.word	0x0800c1c5
 800c0e8:	0800c1eb 	.word	0x0800c1eb
 800c0ec:	0800c277 	.word	0x0800c277
 800c0f0:	0800c2a1 	.word	0x0800c2a1
 800c0f4:	0800c363 	.word	0x0800c363
 800c0f8:	0800c385 	.word	0x0800c385
 800c0fc:	0800c417 	.word	0x0800c417
 800c100:	0800c43d 	.word	0x0800c43d
 800c104:	0800c4cf 	.word	0x0800c4cf
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f103 0110 	add.w	r1, r3, #16
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	795b      	ldrb	r3, [r3, #5]
 800c112:	461a      	mov	r2, r3
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f000 fa17 	bl	800c548 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2202      	movs	r2, #2
 800c11e:	761a      	strb	r2, [r3, #24]
      break;
 800c120:	e20c      	b.n	800c53c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	795b      	ldrb	r3, [r3, #5]
 800c126:	4619      	mov	r1, r3
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f007 ff7f 	bl	801402c <USBH_LL_GetURBState>
 800c12e:	4603      	mov	r3, r0
 800c130:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c132:	7bbb      	ldrb	r3, [r7, #14]
 800c134:	2b01      	cmp	r3, #1
 800c136:	d12c      	bne.n	800c192 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	7c1b      	ldrb	r3, [r3, #16]
 800c13c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c140:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	8adb      	ldrh	r3, [r3, #22]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d00a      	beq.n	800c160 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c14a:	7b7b      	ldrb	r3, [r7, #13]
 800c14c:	2b80      	cmp	r3, #128	; 0x80
 800c14e:	d103      	bne.n	800c158 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2203      	movs	r2, #3
 800c154:	761a      	strb	r2, [r3, #24]
 800c156:	e00d      	b.n	800c174 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2205      	movs	r2, #5
 800c15c:	761a      	strb	r2, [r3, #24]
 800c15e:	e009      	b.n	800c174 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800c160:	7b7b      	ldrb	r3, [r7, #13]
 800c162:	2b80      	cmp	r3, #128	; 0x80
 800c164:	d103      	bne.n	800c16e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2209      	movs	r2, #9
 800c16a:	761a      	strb	r2, [r3, #24]
 800c16c:	e002      	b.n	800c174 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2207      	movs	r2, #7
 800c172:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2203      	movs	r2, #3
 800c178:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c188:	2200      	movs	r2, #0
 800c18a:	4619      	mov	r1, r3
 800c18c:	f005 faa4 	bl	80116d8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c190:	e1cb      	b.n	800c52a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c192:	7bbb      	ldrb	r3, [r7, #14]
 800c194:	2b04      	cmp	r3, #4
 800c196:	d003      	beq.n	800c1a0 <USBH_HandleControl+0xe8>
 800c198:	7bbb      	ldrb	r3, [r7, #14]
 800c19a:	2b02      	cmp	r3, #2
 800c19c:	f040 81c5 	bne.w	800c52a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	220b      	movs	r2, #11
 800c1a4:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2203      	movs	r2, #3
 800c1aa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	4619      	mov	r1, r3
 800c1be:	f005 fa8b 	bl	80116d8 <osMessagePut>
      break;
 800c1c2:	e1b2      	b.n	800c52a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c1ca:	b29a      	uxth	r2, r3
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6899      	ldr	r1, [r3, #8]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	899a      	ldrh	r2, [r3, #12]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	791b      	ldrb	r3, [r3, #4]
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 f9f2 	bl	800c5c6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2204      	movs	r2, #4
 800c1e6:	761a      	strb	r2, [r3, #24]
      break;
 800c1e8:	e1a8      	b.n	800c53c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	791b      	ldrb	r3, [r3, #4]
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f007 ff1b 	bl	801402c <USBH_LL_GetURBState>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c1fa:	7bbb      	ldrb	r3, [r7, #14]
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d110      	bne.n	800c222 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2209      	movs	r2, #9
 800c204:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2203      	movs	r2, #3
 800c20a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c21a:	2200      	movs	r2, #0
 800c21c:	4619      	mov	r1, r3
 800c21e:	f005 fa5b 	bl	80116d8 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c222:	7bbb      	ldrb	r3, [r7, #14]
 800c224:	2b05      	cmp	r3, #5
 800c226:	d110      	bne.n	800c24a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c228:	2303      	movs	r3, #3
 800c22a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2203      	movs	r2, #3
 800c230:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c240:	2200      	movs	r2, #0
 800c242:	4619      	mov	r1, r3
 800c244:	f005 fa48 	bl	80116d8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c248:	e171      	b.n	800c52e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800c24a:	7bbb      	ldrb	r3, [r7, #14]
 800c24c:	2b04      	cmp	r3, #4
 800c24e:	f040 816e 	bne.w	800c52e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	220b      	movs	r2, #11
 800c256:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2203      	movs	r2, #3
 800c25c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c26c:	2200      	movs	r2, #0
 800c26e:	4619      	mov	r1, r3
 800c270:	f005 fa32 	bl	80116d8 <osMessagePut>
      break;
 800c274:	e15b      	b.n	800c52e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6899      	ldr	r1, [r3, #8]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	899a      	ldrh	r2, [r3, #12]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	795b      	ldrb	r3, [r3, #5]
 800c282:	2001      	movs	r0, #1
 800c284:	9000      	str	r0, [sp, #0]
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f000 f978 	bl	800c57c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c292:	b29a      	uxth	r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2206      	movs	r2, #6
 800c29c:	761a      	strb	r2, [r3, #24]
      break;
 800c29e:	e14d      	b.n	800c53c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	795b      	ldrb	r3, [r3, #5]
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f007 fec0 	bl	801402c <USBH_LL_GetURBState>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c2b0:	7bbb      	ldrb	r3, [r7, #14]
 800c2b2:	2b01      	cmp	r3, #1
 800c2b4:	d111      	bne.n	800c2da <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2207      	movs	r2, #7
 800c2ba:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2203      	movs	r2, #3
 800c2c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	4619      	mov	r1, r3
 800c2d4:	f005 fa00 	bl	80116d8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c2d8:	e12b      	b.n	800c532 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800c2da:	7bbb      	ldrb	r3, [r7, #14]
 800c2dc:	2b05      	cmp	r3, #5
 800c2de:	d113      	bne.n	800c308 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	220c      	movs	r2, #12
 800c2e4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c2e6:	2303      	movs	r3, #3
 800c2e8:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2203      	movs	r2, #3
 800c2ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c2fe:	2200      	movs	r2, #0
 800c300:	4619      	mov	r1, r3
 800c302:	f005 f9e9 	bl	80116d8 <osMessagePut>
      break;
 800c306:	e114      	b.n	800c532 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c308:	7bbb      	ldrb	r3, [r7, #14]
 800c30a:	2b02      	cmp	r3, #2
 800c30c:	d111      	bne.n	800c332 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2205      	movs	r2, #5
 800c312:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2203      	movs	r2, #3
 800c318:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c328:	2200      	movs	r2, #0
 800c32a:	4619      	mov	r1, r3
 800c32c:	f005 f9d4 	bl	80116d8 <osMessagePut>
      break;
 800c330:	e0ff      	b.n	800c532 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800c332:	7bbb      	ldrb	r3, [r7, #14]
 800c334:	2b04      	cmp	r3, #4
 800c336:	f040 80fc 	bne.w	800c532 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	220b      	movs	r2, #11
 800c33e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c340:	2302      	movs	r3, #2
 800c342:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2203      	movs	r2, #3
 800c348:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c358:	2200      	movs	r2, #0
 800c35a:	4619      	mov	r1, r3
 800c35c:	f005 f9bc 	bl	80116d8 <osMessagePut>
      break;
 800c360:	e0e7      	b.n	800c532 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	791b      	ldrb	r3, [r3, #4]
 800c366:	2200      	movs	r2, #0
 800c368:	2100      	movs	r1, #0
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f000 f92b 	bl	800c5c6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c376:	b29a      	uxth	r2, r3
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2208      	movs	r2, #8
 800c380:	761a      	strb	r2, [r3, #24]

      break;
 800c382:	e0db      	b.n	800c53c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	791b      	ldrb	r3, [r3, #4]
 800c388:	4619      	mov	r1, r3
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f007 fe4e 	bl	801402c <USBH_LL_GetURBState>
 800c390:	4603      	mov	r3, r0
 800c392:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c394:	7bbb      	ldrb	r3, [r7, #14]
 800c396:	2b01      	cmp	r3, #1
 800c398:	d113      	bne.n	800c3c2 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	220d      	movs	r2, #13
 800c39e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2203      	movs	r2, #3
 800c3a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	4619      	mov	r1, r3
 800c3bc:	f005 f98c 	bl	80116d8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c3c0:	e0b9      	b.n	800c536 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800c3c2:	7bbb      	ldrb	r3, [r7, #14]
 800c3c4:	2b04      	cmp	r3, #4
 800c3c6:	d111      	bne.n	800c3ec <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	220b      	movs	r2, #11
 800c3cc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2203      	movs	r2, #3
 800c3d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	f005 f977 	bl	80116d8 <osMessagePut>
      break;
 800c3ea:	e0a4      	b.n	800c536 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800c3ec:	7bbb      	ldrb	r3, [r7, #14]
 800c3ee:	2b05      	cmp	r3, #5
 800c3f0:	f040 80a1 	bne.w	800c536 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800c3f4:	2303      	movs	r3, #3
 800c3f6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2203      	movs	r2, #3
 800c3fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c40c:	2200      	movs	r2, #0
 800c40e:	4619      	mov	r1, r3
 800c410:	f005 f962 	bl	80116d8 <osMessagePut>
      break;
 800c414:	e08f      	b.n	800c536 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	795b      	ldrb	r3, [r3, #5]
 800c41a:	2201      	movs	r2, #1
 800c41c:	9200      	str	r2, [sp, #0]
 800c41e:	2200      	movs	r2, #0
 800c420:	2100      	movs	r1, #0
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 f8aa 	bl	800c57c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c42e:	b29a      	uxth	r2, r3
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	220a      	movs	r2, #10
 800c438:	761a      	strb	r2, [r3, #24]
      break;
 800c43a:	e07f      	b.n	800c53c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	795b      	ldrb	r3, [r3, #5]
 800c440:	4619      	mov	r1, r3
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f007 fdf2 	bl	801402c <USBH_LL_GetURBState>
 800c448:	4603      	mov	r3, r0
 800c44a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c44c:	7bbb      	ldrb	r3, [r7, #14]
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d113      	bne.n	800c47a <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800c452:	2300      	movs	r3, #0
 800c454:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	220d      	movs	r2, #13
 800c45a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2203      	movs	r2, #3
 800c460:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c470:	2200      	movs	r2, #0
 800c472:	4619      	mov	r1, r3
 800c474:	f005 f930 	bl	80116d8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c478:	e05f      	b.n	800c53a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c47a:	7bbb      	ldrb	r3, [r7, #14]
 800c47c:	2b02      	cmp	r3, #2
 800c47e:	d111      	bne.n	800c4a4 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2209      	movs	r2, #9
 800c484:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2203      	movs	r2, #3
 800c48a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c49a:	2200      	movs	r2, #0
 800c49c:	4619      	mov	r1, r3
 800c49e:	f005 f91b 	bl	80116d8 <osMessagePut>
      break;
 800c4a2:	e04a      	b.n	800c53a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800c4a4:	7bbb      	ldrb	r3, [r7, #14]
 800c4a6:	2b04      	cmp	r3, #4
 800c4a8:	d147      	bne.n	800c53a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	220b      	movs	r2, #11
 800c4ae:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2203      	movs	r2, #3
 800c4b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	4619      	mov	r1, r3
 800c4c8:	f005 f906 	bl	80116d8 <osMessagePut>
      break;
 800c4cc:	e035      	b.n	800c53a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	7e5b      	ldrb	r3, [r3, #25]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	b2da      	uxtb	r2, r3
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	765a      	strb	r2, [r3, #25]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	7e5b      	ldrb	r3, [r3, #25]
 800c4de:	2b02      	cmp	r3, #2
 800c4e0:	d806      	bhi.n	800c4f0 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2201      	movs	r2, #1
 800c4e6:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c4ee:	e025      	b.n	800c53c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c4f6:	2106      	movs	r1, #6
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2200      	movs	r2, #0
 800c500:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	795b      	ldrb	r3, [r3, #5]
 800c506:	4619      	mov	r1, r3
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f000 f90d 	bl	800c728 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	791b      	ldrb	r3, [r3, #4]
 800c512:	4619      	mov	r1, r3
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f000 f907 	bl	800c728 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2200      	movs	r2, #0
 800c51e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c520:	2302      	movs	r3, #2
 800c522:	73fb      	strb	r3, [r7, #15]
      break;
 800c524:	e00a      	b.n	800c53c <USBH_HandleControl+0x484>

    default:
      break;
 800c526:	bf00      	nop
 800c528:	e008      	b.n	800c53c <USBH_HandleControl+0x484>
      break;
 800c52a:	bf00      	nop
 800c52c:	e006      	b.n	800c53c <USBH_HandleControl+0x484>
      break;
 800c52e:	bf00      	nop
 800c530:	e004      	b.n	800c53c <USBH_HandleControl+0x484>
      break;
 800c532:	bf00      	nop
 800c534:	e002      	b.n	800c53c <USBH_HandleControl+0x484>
      break;
 800c536:	bf00      	nop
 800c538:	e000      	b.n	800c53c <USBH_HandleControl+0x484>
      break;
 800c53a:	bf00      	nop
  }

  return status;
 800c53c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3710      	adds	r7, #16
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop

0800c548 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b088      	sub	sp, #32
 800c54c:	af04      	add	r7, sp, #16
 800c54e:	60f8      	str	r0, [r7, #12]
 800c550:	60b9      	str	r1, [r7, #8]
 800c552:	4613      	mov	r3, r2
 800c554:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c556:	79f9      	ldrb	r1, [r7, #7]
 800c558:	2300      	movs	r3, #0
 800c55a:	9303      	str	r3, [sp, #12]
 800c55c:	2308      	movs	r3, #8
 800c55e:	9302      	str	r3, [sp, #8]
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	9301      	str	r3, [sp, #4]
 800c564:	2300      	movs	r3, #0
 800c566:	9300      	str	r3, [sp, #0]
 800c568:	2300      	movs	r3, #0
 800c56a:	2200      	movs	r2, #0
 800c56c:	68f8      	ldr	r0, [r7, #12]
 800c56e:	f007 fd2c 	bl	8013fca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c572:	2300      	movs	r3, #0
}
 800c574:	4618      	mov	r0, r3
 800c576:	3710      	adds	r7, #16
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b088      	sub	sp, #32
 800c580:	af04      	add	r7, sp, #16
 800c582:	60f8      	str	r0, [r7, #12]
 800c584:	60b9      	str	r1, [r7, #8]
 800c586:	4611      	mov	r1, r2
 800c588:	461a      	mov	r2, r3
 800c58a:	460b      	mov	r3, r1
 800c58c:	80fb      	strh	r3, [r7, #6]
 800c58e:	4613      	mov	r3, r2
 800c590:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d001      	beq.n	800c5a0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c59c:	2300      	movs	r3, #0
 800c59e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c5a0:	7979      	ldrb	r1, [r7, #5]
 800c5a2:	7e3b      	ldrb	r3, [r7, #24]
 800c5a4:	9303      	str	r3, [sp, #12]
 800c5a6:	88fb      	ldrh	r3, [r7, #6]
 800c5a8:	9302      	str	r3, [sp, #8]
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	9301      	str	r3, [sp, #4]
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	9300      	str	r3, [sp, #0]
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	68f8      	ldr	r0, [r7, #12]
 800c5b8:	f007 fd07 	bl	8013fca <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c5bc:	2300      	movs	r3, #0
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3710      	adds	r7, #16
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}

0800c5c6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c5c6:	b580      	push	{r7, lr}
 800c5c8:	b088      	sub	sp, #32
 800c5ca:	af04      	add	r7, sp, #16
 800c5cc:	60f8      	str	r0, [r7, #12]
 800c5ce:	60b9      	str	r1, [r7, #8]
 800c5d0:	4611      	mov	r1, r2
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	80fb      	strh	r3, [r7, #6]
 800c5d8:	4613      	mov	r3, r2
 800c5da:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c5dc:	7979      	ldrb	r1, [r7, #5]
 800c5de:	2300      	movs	r3, #0
 800c5e0:	9303      	str	r3, [sp, #12]
 800c5e2:	88fb      	ldrh	r3, [r7, #6]
 800c5e4:	9302      	str	r3, [sp, #8]
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	9301      	str	r3, [sp, #4]
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	9300      	str	r3, [sp, #0]
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	68f8      	ldr	r0, [r7, #12]
 800c5f4:	f007 fce9 	bl	8013fca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c5f8:	2300      	movs	r3, #0

}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3710      	adds	r7, #16
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}

0800c602 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c602:	b580      	push	{r7, lr}
 800c604:	b088      	sub	sp, #32
 800c606:	af04      	add	r7, sp, #16
 800c608:	60f8      	str	r0, [r7, #12]
 800c60a:	60b9      	str	r1, [r7, #8]
 800c60c:	4611      	mov	r1, r2
 800c60e:	461a      	mov	r2, r3
 800c610:	460b      	mov	r3, r1
 800c612:	80fb      	strh	r3, [r7, #6]
 800c614:	4613      	mov	r3, r2
 800c616:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d001      	beq.n	800c626 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c622:	2300      	movs	r3, #0
 800c624:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c626:	7979      	ldrb	r1, [r7, #5]
 800c628:	7e3b      	ldrb	r3, [r7, #24]
 800c62a:	9303      	str	r3, [sp, #12]
 800c62c:	88fb      	ldrh	r3, [r7, #6]
 800c62e:	9302      	str	r3, [sp, #8]
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	9301      	str	r3, [sp, #4]
 800c634:	2301      	movs	r3, #1
 800c636:	9300      	str	r3, [sp, #0]
 800c638:	2302      	movs	r3, #2
 800c63a:	2200      	movs	r2, #0
 800c63c:	68f8      	ldr	r0, [r7, #12]
 800c63e:	f007 fcc4 	bl	8013fca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c642:	2300      	movs	r3, #0
}
 800c644:	4618      	mov	r0, r3
 800c646:	3710      	adds	r7, #16
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}

0800c64c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b088      	sub	sp, #32
 800c650:	af04      	add	r7, sp, #16
 800c652:	60f8      	str	r0, [r7, #12]
 800c654:	60b9      	str	r1, [r7, #8]
 800c656:	4611      	mov	r1, r2
 800c658:	461a      	mov	r2, r3
 800c65a:	460b      	mov	r3, r1
 800c65c:	80fb      	strh	r3, [r7, #6]
 800c65e:	4613      	mov	r3, r2
 800c660:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c662:	7979      	ldrb	r1, [r7, #5]
 800c664:	2300      	movs	r3, #0
 800c666:	9303      	str	r3, [sp, #12]
 800c668:	88fb      	ldrh	r3, [r7, #6]
 800c66a:	9302      	str	r3, [sp, #8]
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	9301      	str	r3, [sp, #4]
 800c670:	2301      	movs	r3, #1
 800c672:	9300      	str	r3, [sp, #0]
 800c674:	2302      	movs	r3, #2
 800c676:	2201      	movs	r2, #1
 800c678:	68f8      	ldr	r0, [r7, #12]
 800c67a:	f007 fca6 	bl	8013fca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c67e:	2300      	movs	r3, #0
}
 800c680:	4618      	mov	r0, r3
 800c682:	3710      	adds	r7, #16
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}

0800c688 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b086      	sub	sp, #24
 800c68c:	af04      	add	r7, sp, #16
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	4608      	mov	r0, r1
 800c692:	4611      	mov	r1, r2
 800c694:	461a      	mov	r2, r3
 800c696:	4603      	mov	r3, r0
 800c698:	70fb      	strb	r3, [r7, #3]
 800c69a:	460b      	mov	r3, r1
 800c69c:	70bb      	strb	r3, [r7, #2]
 800c69e:	4613      	mov	r3, r2
 800c6a0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c6a2:	7878      	ldrb	r0, [r7, #1]
 800c6a4:	78ba      	ldrb	r2, [r7, #2]
 800c6a6:	78f9      	ldrb	r1, [r7, #3]
 800c6a8:	8b3b      	ldrh	r3, [r7, #24]
 800c6aa:	9302      	str	r3, [sp, #8]
 800c6ac:	7d3b      	ldrb	r3, [r7, #20]
 800c6ae:	9301      	str	r3, [sp, #4]
 800c6b0:	7c3b      	ldrb	r3, [r7, #16]
 800c6b2:	9300      	str	r3, [sp, #0]
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f007 fc39 	bl	8013f2e <USBH_LL_OpenPipe>

  return USBH_OK;
 800c6bc:	2300      	movs	r3, #0
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b082      	sub	sp, #8
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
 800c6ce:	460b      	mov	r3, r1
 800c6d0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c6d2:	78fb      	ldrb	r3, [r7, #3]
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f007 fc58 	bl	8013f8c <USBH_LL_ClosePipe>

  return USBH_OK;
 800c6dc:	2300      	movs	r3, #0
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3708      	adds	r7, #8
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}

0800c6e6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c6e6:	b580      	push	{r7, lr}
 800c6e8:	b084      	sub	sp, #16
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	6078      	str	r0, [r7, #4]
 800c6ee:	460b      	mov	r3, r1
 800c6f0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 f836 	bl	800c764 <USBH_GetFreePipe>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c6fc:	89fb      	ldrh	r3, [r7, #14]
 800c6fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c702:	4293      	cmp	r3, r2
 800c704:	d00a      	beq.n	800c71c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c706:	78fa      	ldrb	r2, [r7, #3]
 800c708:	89fb      	ldrh	r3, [r7, #14]
 800c70a:	f003 030f 	and.w	r3, r3, #15
 800c70e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c712:	6879      	ldr	r1, [r7, #4]
 800c714:	33e0      	adds	r3, #224	; 0xe0
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	440b      	add	r3, r1
 800c71a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c71c:	89fb      	ldrh	r3, [r7, #14]
 800c71e:	b2db      	uxtb	r3, r3
}
 800c720:	4618      	mov	r0, r3
 800c722:	3710      	adds	r7, #16
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c728:	b480      	push	{r7}
 800c72a:	b083      	sub	sp, #12
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
 800c730:	460b      	mov	r3, r1
 800c732:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c734:	78fb      	ldrb	r3, [r7, #3]
 800c736:	2b0f      	cmp	r3, #15
 800c738:	d80d      	bhi.n	800c756 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c73a:	78fb      	ldrb	r3, [r7, #3]
 800c73c:	687a      	ldr	r2, [r7, #4]
 800c73e:	33e0      	adds	r3, #224	; 0xe0
 800c740:	009b      	lsls	r3, r3, #2
 800c742:	4413      	add	r3, r2
 800c744:	685a      	ldr	r2, [r3, #4]
 800c746:	78fb      	ldrb	r3, [r7, #3]
 800c748:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c74c:	6879      	ldr	r1, [r7, #4]
 800c74e:	33e0      	adds	r3, #224	; 0xe0
 800c750:	009b      	lsls	r3, r3, #2
 800c752:	440b      	add	r3, r1
 800c754:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c756:	2300      	movs	r3, #0
}
 800c758:	4618      	mov	r0, r3
 800c75a:	370c      	adds	r7, #12
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr

0800c764 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c764:	b480      	push	{r7}
 800c766:	b085      	sub	sp, #20
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c76c:	2300      	movs	r3, #0
 800c76e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c770:	2300      	movs	r3, #0
 800c772:	73fb      	strb	r3, [r7, #15]
 800c774:	e00f      	b.n	800c796 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c776:	7bfb      	ldrb	r3, [r7, #15]
 800c778:	687a      	ldr	r2, [r7, #4]
 800c77a:	33e0      	adds	r3, #224	; 0xe0
 800c77c:	009b      	lsls	r3, r3, #2
 800c77e:	4413      	add	r3, r2
 800c780:	685b      	ldr	r3, [r3, #4]
 800c782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c786:	2b00      	cmp	r3, #0
 800c788:	d102      	bne.n	800c790 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c78a:	7bfb      	ldrb	r3, [r7, #15]
 800c78c:	b29b      	uxth	r3, r3
 800c78e:	e007      	b.n	800c7a0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c790:	7bfb      	ldrb	r3, [r7, #15]
 800c792:	3301      	adds	r3, #1
 800c794:	73fb      	strb	r3, [r7, #15]
 800c796:	7bfb      	ldrb	r3, [r7, #15]
 800c798:	2b0f      	cmp	r3, #15
 800c79a:	d9ec      	bls.n	800c776 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c79c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	3714      	adds	r7, #20
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7aa:	4770      	bx	lr

0800c7ac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b084      	sub	sp, #16
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c7b6:	79fb      	ldrb	r3, [r7, #7]
 800c7b8:	4a08      	ldr	r2, [pc, #32]	; (800c7dc <disk_status+0x30>)
 800c7ba:	009b      	lsls	r3, r3, #2
 800c7bc:	4413      	add	r3, r2
 800c7be:	685b      	ldr	r3, [r3, #4]
 800c7c0:	685b      	ldr	r3, [r3, #4]
 800c7c2:	79fa      	ldrb	r2, [r7, #7]
 800c7c4:	4905      	ldr	r1, [pc, #20]	; (800c7dc <disk_status+0x30>)
 800c7c6:	440a      	add	r2, r1
 800c7c8:	7d12      	ldrb	r2, [r2, #20]
 800c7ca:	4610      	mov	r0, r2
 800c7cc:	4798      	blx	r3
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c7d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3710      	adds	r7, #16
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	20002274 	.word	0x20002274

0800c7e0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b084      	sub	sp, #16
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c7ee:	79fb      	ldrb	r3, [r7, #7]
 800c7f0:	4a0d      	ldr	r2, [pc, #52]	; (800c828 <disk_initialize+0x48>)
 800c7f2:	5cd3      	ldrb	r3, [r2, r3]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d111      	bne.n	800c81c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c7f8:	79fb      	ldrb	r3, [r7, #7]
 800c7fa:	4a0b      	ldr	r2, [pc, #44]	; (800c828 <disk_initialize+0x48>)
 800c7fc:	2101      	movs	r1, #1
 800c7fe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c800:	79fb      	ldrb	r3, [r7, #7]
 800c802:	4a09      	ldr	r2, [pc, #36]	; (800c828 <disk_initialize+0x48>)
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	4413      	add	r3, r2
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	79fa      	ldrb	r2, [r7, #7]
 800c80e:	4906      	ldr	r1, [pc, #24]	; (800c828 <disk_initialize+0x48>)
 800c810:	440a      	add	r2, r1
 800c812:	7d12      	ldrb	r2, [r2, #20]
 800c814:	4610      	mov	r0, r2
 800c816:	4798      	blx	r3
 800c818:	4603      	mov	r3, r0
 800c81a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3710      	adds	r7, #16
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
 800c826:	bf00      	nop
 800c828:	20002274 	.word	0x20002274

0800c82c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c82c:	b590      	push	{r4, r7, lr}
 800c82e:	b087      	sub	sp, #28
 800c830:	af00      	add	r7, sp, #0
 800c832:	60b9      	str	r1, [r7, #8]
 800c834:	607a      	str	r2, [r7, #4]
 800c836:	603b      	str	r3, [r7, #0]
 800c838:	4603      	mov	r3, r0
 800c83a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c83c:	7bfb      	ldrb	r3, [r7, #15]
 800c83e:	4a0a      	ldr	r2, [pc, #40]	; (800c868 <disk_read+0x3c>)
 800c840:	009b      	lsls	r3, r3, #2
 800c842:	4413      	add	r3, r2
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	689c      	ldr	r4, [r3, #8]
 800c848:	7bfb      	ldrb	r3, [r7, #15]
 800c84a:	4a07      	ldr	r2, [pc, #28]	; (800c868 <disk_read+0x3c>)
 800c84c:	4413      	add	r3, r2
 800c84e:	7d18      	ldrb	r0, [r3, #20]
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	687a      	ldr	r2, [r7, #4]
 800c854:	68b9      	ldr	r1, [r7, #8]
 800c856:	47a0      	blx	r4
 800c858:	4603      	mov	r3, r0
 800c85a:	75fb      	strb	r3, [r7, #23]
  return res;
 800c85c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c85e:	4618      	mov	r0, r3
 800c860:	371c      	adds	r7, #28
 800c862:	46bd      	mov	sp, r7
 800c864:	bd90      	pop	{r4, r7, pc}
 800c866:	bf00      	nop
 800c868:	20002274 	.word	0x20002274

0800c86c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c86c:	b590      	push	{r4, r7, lr}
 800c86e:	b087      	sub	sp, #28
 800c870:	af00      	add	r7, sp, #0
 800c872:	60b9      	str	r1, [r7, #8]
 800c874:	607a      	str	r2, [r7, #4]
 800c876:	603b      	str	r3, [r7, #0]
 800c878:	4603      	mov	r3, r0
 800c87a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c87c:	7bfb      	ldrb	r3, [r7, #15]
 800c87e:	4a0a      	ldr	r2, [pc, #40]	; (800c8a8 <disk_write+0x3c>)
 800c880:	009b      	lsls	r3, r3, #2
 800c882:	4413      	add	r3, r2
 800c884:	685b      	ldr	r3, [r3, #4]
 800c886:	68dc      	ldr	r4, [r3, #12]
 800c888:	7bfb      	ldrb	r3, [r7, #15]
 800c88a:	4a07      	ldr	r2, [pc, #28]	; (800c8a8 <disk_write+0x3c>)
 800c88c:	4413      	add	r3, r2
 800c88e:	7d18      	ldrb	r0, [r3, #20]
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	687a      	ldr	r2, [r7, #4]
 800c894:	68b9      	ldr	r1, [r7, #8]
 800c896:	47a0      	blx	r4
 800c898:	4603      	mov	r3, r0
 800c89a:	75fb      	strb	r3, [r7, #23]
  return res;
 800c89c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	371c      	adds	r7, #28
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd90      	pop	{r4, r7, pc}
 800c8a6:	bf00      	nop
 800c8a8:	20002274 	.word	0x20002274

0800c8ac <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b084      	sub	sp, #16
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	603a      	str	r2, [r7, #0]
 800c8b6:	71fb      	strb	r3, [r7, #7]
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c8bc:	79fb      	ldrb	r3, [r7, #7]
 800c8be:	4a09      	ldr	r2, [pc, #36]	; (800c8e4 <disk_ioctl+0x38>)
 800c8c0:	009b      	lsls	r3, r3, #2
 800c8c2:	4413      	add	r3, r2
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	691b      	ldr	r3, [r3, #16]
 800c8c8:	79fa      	ldrb	r2, [r7, #7]
 800c8ca:	4906      	ldr	r1, [pc, #24]	; (800c8e4 <disk_ioctl+0x38>)
 800c8cc:	440a      	add	r2, r1
 800c8ce:	7d10      	ldrb	r0, [r2, #20]
 800c8d0:	79b9      	ldrb	r1, [r7, #6]
 800c8d2:	683a      	ldr	r2, [r7, #0]
 800c8d4:	4798      	blx	r3
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	73fb      	strb	r3, [r7, #15]
  return res;
 800c8da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3710      	adds	r7, #16
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}
 800c8e4:	20002274 	.word	0x20002274

0800c8e8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b085      	sub	sp, #20
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	3301      	adds	r3, #1
 800c8f4:	781b      	ldrb	r3, [r3, #0]
 800c8f6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c8f8:	89fb      	ldrh	r3, [r7, #14]
 800c8fa:	021b      	lsls	r3, r3, #8
 800c8fc:	b21a      	sxth	r2, r3
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	b21b      	sxth	r3, r3
 800c904:	4313      	orrs	r3, r2
 800c906:	b21b      	sxth	r3, r3
 800c908:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c90a:	89fb      	ldrh	r3, [r7, #14]
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	3714      	adds	r7, #20
 800c910:	46bd      	mov	sp, r7
 800c912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c916:	4770      	bx	lr

0800c918 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c918:	b480      	push	{r7}
 800c91a:	b085      	sub	sp, #20
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	3303      	adds	r3, #3
 800c924:	781b      	ldrb	r3, [r3, #0]
 800c926:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	021b      	lsls	r3, r3, #8
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	3202      	adds	r2, #2
 800c930:	7812      	ldrb	r2, [r2, #0]
 800c932:	4313      	orrs	r3, r2
 800c934:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	021b      	lsls	r3, r3, #8
 800c93a:	687a      	ldr	r2, [r7, #4]
 800c93c:	3201      	adds	r2, #1
 800c93e:	7812      	ldrb	r2, [r2, #0]
 800c940:	4313      	orrs	r3, r2
 800c942:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	021b      	lsls	r3, r3, #8
 800c948:	687a      	ldr	r2, [r7, #4]
 800c94a:	7812      	ldrb	r2, [r2, #0]
 800c94c:	4313      	orrs	r3, r2
 800c94e:	60fb      	str	r3, [r7, #12]
	return rv;
 800c950:	68fb      	ldr	r3, [r7, #12]
}
 800c952:	4618      	mov	r0, r3
 800c954:	3714      	adds	r7, #20
 800c956:	46bd      	mov	sp, r7
 800c958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95c:	4770      	bx	lr

0800c95e <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800c95e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c962:	b09d      	sub	sp, #116	; 0x74
 800c964:	af00      	add	r7, sp, #0
 800c966:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 800c968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c96a:	3307      	adds	r3, #7
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	b2db      	uxtb	r3, r3
 800c970:	2200      	movs	r2, #0
 800c972:	469a      	mov	sl, r3
 800c974:	4693      	mov	fp, r2
 800c976:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 800c97a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c97e:	f04f 0000 	mov.w	r0, #0
 800c982:	f04f 0100 	mov.w	r1, #0
 800c986:	0219      	lsls	r1, r3, #8
 800c988:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c98c:	0210      	lsls	r0, r2, #8
 800c98e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c990:	3306      	adds	r3, #6
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	b2db      	uxtb	r3, r3
 800c996:	2200      	movs	r2, #0
 800c998:	461c      	mov	r4, r3
 800c99a:	4615      	mov	r5, r2
 800c99c:	ea40 0804 	orr.w	r8, r0, r4
 800c9a0:	ea41 0905 	orr.w	r9, r1, r5
 800c9a4:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 800c9a8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c9ac:	f04f 0000 	mov.w	r0, #0
 800c9b0:	f04f 0100 	mov.w	r1, #0
 800c9b4:	0219      	lsls	r1, r3, #8
 800c9b6:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c9ba:	0210      	lsls	r0, r2, #8
 800c9bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9be:	3305      	adds	r3, #5
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	b2db      	uxtb	r3, r3
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	65bb      	str	r3, [r7, #88]	; 0x58
 800c9c8:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c9ca:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800c9ce:	4623      	mov	r3, r4
 800c9d0:	4303      	orrs	r3, r0
 800c9d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9d4:	462b      	mov	r3, r5
 800c9d6:	430b      	orrs	r3, r1
 800c9d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9da:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800c9de:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 800c9e2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c9e6:	f04f 0000 	mov.w	r0, #0
 800c9ea:	f04f 0100 	mov.w	r1, #0
 800c9ee:	0219      	lsls	r1, r3, #8
 800c9f0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c9f4:	0210      	lsls	r0, r2, #8
 800c9f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9f8:	3304      	adds	r3, #4
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	b2db      	uxtb	r3, r3
 800c9fe:	2200      	movs	r2, #0
 800ca00:	653b      	str	r3, [r7, #80]	; 0x50
 800ca02:	657a      	str	r2, [r7, #84]	; 0x54
 800ca04:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800ca08:	4623      	mov	r3, r4
 800ca0a:	4303      	orrs	r3, r0
 800ca0c:	623b      	str	r3, [r7, #32]
 800ca0e:	462b      	mov	r3, r5
 800ca10:	430b      	orrs	r3, r1
 800ca12:	627b      	str	r3, [r7, #36]	; 0x24
 800ca14:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800ca18:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 800ca1c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800ca20:	f04f 0000 	mov.w	r0, #0
 800ca24:	f04f 0100 	mov.w	r1, #0
 800ca28:	0219      	lsls	r1, r3, #8
 800ca2a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800ca2e:	0210      	lsls	r0, r2, #8
 800ca30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca32:	3303      	adds	r3, #3
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	b2db      	uxtb	r3, r3
 800ca38:	2200      	movs	r2, #0
 800ca3a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ca3c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ca3e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800ca42:	4623      	mov	r3, r4
 800ca44:	4303      	orrs	r3, r0
 800ca46:	61bb      	str	r3, [r7, #24]
 800ca48:	462b      	mov	r3, r5
 800ca4a:	430b      	orrs	r3, r1
 800ca4c:	61fb      	str	r3, [r7, #28]
 800ca4e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800ca52:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 800ca56:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800ca5a:	f04f 0000 	mov.w	r0, #0
 800ca5e:	f04f 0100 	mov.w	r1, #0
 800ca62:	0219      	lsls	r1, r3, #8
 800ca64:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800ca68:	0210      	lsls	r0, r2, #8
 800ca6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca6c:	3302      	adds	r3, #2
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	2200      	movs	r2, #0
 800ca74:	643b      	str	r3, [r7, #64]	; 0x40
 800ca76:	647a      	str	r2, [r7, #68]	; 0x44
 800ca78:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800ca7c:	4623      	mov	r3, r4
 800ca7e:	4303      	orrs	r3, r0
 800ca80:	613b      	str	r3, [r7, #16]
 800ca82:	462b      	mov	r3, r5
 800ca84:	430b      	orrs	r3, r1
 800ca86:	617b      	str	r3, [r7, #20]
 800ca88:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ca8c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 800ca90:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ca94:	f04f 0200 	mov.w	r2, #0
 800ca98:	f04f 0300 	mov.w	r3, #0
 800ca9c:	020b      	lsls	r3, r1, #8
 800ca9e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800caa2:	0202      	lsls	r2, r0, #8
 800caa4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800caa6:	3101      	adds	r1, #1
 800caa8:	7809      	ldrb	r1, [r1, #0]
 800caaa:	b2c9      	uxtb	r1, r1
 800caac:	2000      	movs	r0, #0
 800caae:	63b9      	str	r1, [r7, #56]	; 0x38
 800cab0:	63f8      	str	r0, [r7, #60]	; 0x3c
 800cab2:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800cab6:	4621      	mov	r1, r4
 800cab8:	4311      	orrs	r1, r2
 800caba:	60b9      	str	r1, [r7, #8]
 800cabc:	4629      	mov	r1, r5
 800cabe:	4319      	orrs	r1, r3
 800cac0:	60f9      	str	r1, [r7, #12]
 800cac2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800cac6:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 800caca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cace:	f04f 0200 	mov.w	r2, #0
 800cad2:	f04f 0300 	mov.w	r3, #0
 800cad6:	020b      	lsls	r3, r1, #8
 800cad8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cadc:	0202      	lsls	r2, r0, #8
 800cade:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800cae0:	7809      	ldrb	r1, [r1, #0]
 800cae2:	b2c9      	uxtb	r1, r1
 800cae4:	2000      	movs	r0, #0
 800cae6:	6339      	str	r1, [r7, #48]	; 0x30
 800cae8:	6378      	str	r0, [r7, #52]	; 0x34
 800caea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800caee:	4621      	mov	r1, r4
 800caf0:	4311      	orrs	r1, r2
 800caf2:	6039      	str	r1, [r7, #0]
 800caf4:	4629      	mov	r1, r5
 800caf6:	4319      	orrs	r1, r3
 800caf8:	6079      	str	r1, [r7, #4]
 800cafa:	e9d7 3400 	ldrd	r3, r4, [r7]
 800cafe:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 800cb02:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 800cb06:	4610      	mov	r0, r2
 800cb08:	4619      	mov	r1, r3
 800cb0a:	3774      	adds	r7, #116	; 0x74
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800cb12:	4770      	bx	lr

0800cb14 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cb14:	b480      	push	{r7}
 800cb16:	b083      	sub	sp, #12
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	460b      	mov	r3, r1
 800cb1e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	1c5a      	adds	r2, r3, #1
 800cb24:	607a      	str	r2, [r7, #4]
 800cb26:	887a      	ldrh	r2, [r7, #2]
 800cb28:	b2d2      	uxtb	r2, r2
 800cb2a:	701a      	strb	r2, [r3, #0]
 800cb2c:	887b      	ldrh	r3, [r7, #2]
 800cb2e:	0a1b      	lsrs	r3, r3, #8
 800cb30:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	1c5a      	adds	r2, r3, #1
 800cb36:	607a      	str	r2, [r7, #4]
 800cb38:	887a      	ldrh	r2, [r7, #2]
 800cb3a:	b2d2      	uxtb	r2, r2
 800cb3c:	701a      	strb	r2, [r3, #0]
}
 800cb3e:	bf00      	nop
 800cb40:	370c      	adds	r7, #12
 800cb42:	46bd      	mov	sp, r7
 800cb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb48:	4770      	bx	lr

0800cb4a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cb4a:	b480      	push	{r7}
 800cb4c:	b083      	sub	sp, #12
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	6078      	str	r0, [r7, #4]
 800cb52:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	1c5a      	adds	r2, r3, #1
 800cb58:	607a      	str	r2, [r7, #4]
 800cb5a:	683a      	ldr	r2, [r7, #0]
 800cb5c:	b2d2      	uxtb	r2, r2
 800cb5e:	701a      	strb	r2, [r3, #0]
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	0a1b      	lsrs	r3, r3, #8
 800cb64:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	1c5a      	adds	r2, r3, #1
 800cb6a:	607a      	str	r2, [r7, #4]
 800cb6c:	683a      	ldr	r2, [r7, #0]
 800cb6e:	b2d2      	uxtb	r2, r2
 800cb70:	701a      	strb	r2, [r3, #0]
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	0a1b      	lsrs	r3, r3, #8
 800cb76:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	1c5a      	adds	r2, r3, #1
 800cb7c:	607a      	str	r2, [r7, #4]
 800cb7e:	683a      	ldr	r2, [r7, #0]
 800cb80:	b2d2      	uxtb	r2, r2
 800cb82:	701a      	strb	r2, [r3, #0]
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	0a1b      	lsrs	r3, r3, #8
 800cb88:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	1c5a      	adds	r2, r3, #1
 800cb8e:	607a      	str	r2, [r7, #4]
 800cb90:	683a      	ldr	r2, [r7, #0]
 800cb92:	b2d2      	uxtb	r2, r2
 800cb94:	701a      	strb	r2, [r3, #0]
}
 800cb96:	bf00      	nop
 800cb98:	370c      	adds	r7, #12
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba0:	4770      	bx	lr

0800cba2 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800cba2:	b480      	push	{r7}
 800cba4:	b085      	sub	sp, #20
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	60f8      	str	r0, [r7, #12]
 800cbaa:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	1c5a      	adds	r2, r3, #1
 800cbb2:	60fa      	str	r2, [r7, #12]
 800cbb4:	783a      	ldrb	r2, [r7, #0]
 800cbb6:	701a      	strb	r2, [r3, #0]
 800cbb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cbbc:	f04f 0200 	mov.w	r2, #0
 800cbc0:	f04f 0300 	mov.w	r3, #0
 800cbc4:	0a02      	lsrs	r2, r0, #8
 800cbc6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800cbca:	0a0b      	lsrs	r3, r1, #8
 800cbcc:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	1c5a      	adds	r2, r3, #1
 800cbd4:	60fa      	str	r2, [r7, #12]
 800cbd6:	783a      	ldrb	r2, [r7, #0]
 800cbd8:	701a      	strb	r2, [r3, #0]
 800cbda:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cbde:	f04f 0200 	mov.w	r2, #0
 800cbe2:	f04f 0300 	mov.w	r3, #0
 800cbe6:	0a02      	lsrs	r2, r0, #8
 800cbe8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800cbec:	0a0b      	lsrs	r3, r1, #8
 800cbee:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	1c5a      	adds	r2, r3, #1
 800cbf6:	60fa      	str	r2, [r7, #12]
 800cbf8:	783a      	ldrb	r2, [r7, #0]
 800cbfa:	701a      	strb	r2, [r3, #0]
 800cbfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc00:	f04f 0200 	mov.w	r2, #0
 800cc04:	f04f 0300 	mov.w	r3, #0
 800cc08:	0a02      	lsrs	r2, r0, #8
 800cc0a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800cc0e:	0a0b      	lsrs	r3, r1, #8
 800cc10:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	1c5a      	adds	r2, r3, #1
 800cc18:	60fa      	str	r2, [r7, #12]
 800cc1a:	783a      	ldrb	r2, [r7, #0]
 800cc1c:	701a      	strb	r2, [r3, #0]
 800cc1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc22:	f04f 0200 	mov.w	r2, #0
 800cc26:	f04f 0300 	mov.w	r3, #0
 800cc2a:	0a02      	lsrs	r2, r0, #8
 800cc2c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800cc30:	0a0b      	lsrs	r3, r1, #8
 800cc32:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	1c5a      	adds	r2, r3, #1
 800cc3a:	60fa      	str	r2, [r7, #12]
 800cc3c:	783a      	ldrb	r2, [r7, #0]
 800cc3e:	701a      	strb	r2, [r3, #0]
 800cc40:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc44:	f04f 0200 	mov.w	r2, #0
 800cc48:	f04f 0300 	mov.w	r3, #0
 800cc4c:	0a02      	lsrs	r2, r0, #8
 800cc4e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800cc52:	0a0b      	lsrs	r3, r1, #8
 800cc54:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	1c5a      	adds	r2, r3, #1
 800cc5c:	60fa      	str	r2, [r7, #12]
 800cc5e:	783a      	ldrb	r2, [r7, #0]
 800cc60:	701a      	strb	r2, [r3, #0]
 800cc62:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc66:	f04f 0200 	mov.w	r2, #0
 800cc6a:	f04f 0300 	mov.w	r3, #0
 800cc6e:	0a02      	lsrs	r2, r0, #8
 800cc70:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800cc74:	0a0b      	lsrs	r3, r1, #8
 800cc76:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	1c5a      	adds	r2, r3, #1
 800cc7e:	60fa      	str	r2, [r7, #12]
 800cc80:	783a      	ldrb	r2, [r7, #0]
 800cc82:	701a      	strb	r2, [r3, #0]
 800cc84:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc88:	f04f 0200 	mov.w	r2, #0
 800cc8c:	f04f 0300 	mov.w	r3, #0
 800cc90:	0a02      	lsrs	r2, r0, #8
 800cc92:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800cc96:	0a0b      	lsrs	r3, r1, #8
 800cc98:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	1c5a      	adds	r2, r3, #1
 800cca0:	60fa      	str	r2, [r7, #12]
 800cca2:	783a      	ldrb	r2, [r7, #0]
 800cca4:	701a      	strb	r2, [r3, #0]
}
 800cca6:	bf00      	nop
 800cca8:	3714      	adds	r7, #20
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb0:	4770      	bx	lr

0800ccb2 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ccb2:	b480      	push	{r7}
 800ccb4:	b087      	sub	sp, #28
 800ccb6:	af00      	add	r7, sp, #0
 800ccb8:	60f8      	str	r0, [r7, #12]
 800ccba:	60b9      	str	r1, [r7, #8]
 800ccbc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d00d      	beq.n	800cce8 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cccc:	693a      	ldr	r2, [r7, #16]
 800ccce:	1c53      	adds	r3, r2, #1
 800ccd0:	613b      	str	r3, [r7, #16]
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	1c59      	adds	r1, r3, #1
 800ccd6:	6179      	str	r1, [r7, #20]
 800ccd8:	7812      	ldrb	r2, [r2, #0]
 800ccda:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	3b01      	subs	r3, #1
 800cce0:	607b      	str	r3, [r7, #4]
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d1f1      	bne.n	800cccc <mem_cpy+0x1a>
	}
}
 800cce8:	bf00      	nop
 800ccea:	371c      	adds	r7, #28
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr

0800ccf4 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ccf4:	b480      	push	{r7}
 800ccf6:	b087      	sub	sp, #28
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	60f8      	str	r0, [r7, #12]
 800ccfc:	60b9      	str	r1, [r7, #8]
 800ccfe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	1c5a      	adds	r2, r3, #1
 800cd08:	617a      	str	r2, [r7, #20]
 800cd0a:	68ba      	ldr	r2, [r7, #8]
 800cd0c:	b2d2      	uxtb	r2, r2
 800cd0e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	3b01      	subs	r3, #1
 800cd14:	607b      	str	r3, [r7, #4]
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d1f3      	bne.n	800cd04 <mem_set+0x10>
}
 800cd1c:	bf00      	nop
 800cd1e:	bf00      	nop
 800cd20:	371c      	adds	r7, #28
 800cd22:	46bd      	mov	sp, r7
 800cd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd28:	4770      	bx	lr

0800cd2a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800cd2a:	b480      	push	{r7}
 800cd2c:	b089      	sub	sp, #36	; 0x24
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	60f8      	str	r0, [r7, #12]
 800cd32:	60b9      	str	r1, [r7, #8]
 800cd34:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	61fb      	str	r3, [r7, #28]
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800cd42:	69fb      	ldr	r3, [r7, #28]
 800cd44:	1c5a      	adds	r2, r3, #1
 800cd46:	61fa      	str	r2, [r7, #28]
 800cd48:	781b      	ldrb	r3, [r3, #0]
 800cd4a:	4619      	mov	r1, r3
 800cd4c:	69bb      	ldr	r3, [r7, #24]
 800cd4e:	1c5a      	adds	r2, r3, #1
 800cd50:	61ba      	str	r2, [r7, #24]
 800cd52:	781b      	ldrb	r3, [r3, #0]
 800cd54:	1acb      	subs	r3, r1, r3
 800cd56:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	3b01      	subs	r3, #1
 800cd5c:	607b      	str	r3, [r7, #4]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d002      	beq.n	800cd6a <mem_cmp+0x40>
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d0eb      	beq.n	800cd42 <mem_cmp+0x18>

	return r;
 800cd6a:	697b      	ldr	r3, [r7, #20]
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3724      	adds	r7, #36	; 0x24
 800cd70:	46bd      	mov	sp, r7
 800cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd76:	4770      	bx	lr

0800cd78 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cd78:	b480      	push	{r7}
 800cd7a:	b083      	sub	sp, #12
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cd82:	e002      	b.n	800cd8a <chk_chr+0x12>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	3301      	adds	r3, #1
 800cd88:	607b      	str	r3, [r7, #4]
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d005      	beq.n	800cd9e <chk_chr+0x26>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	781b      	ldrb	r3, [r3, #0]
 800cd96:	461a      	mov	r2, r3
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d1f2      	bne.n	800cd84 <chk_chr+0xc>
	return *str;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	781b      	ldrb	r3, [r3, #0]
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	370c      	adds	r7, #12
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr
	...

0800cdb0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b085      	sub	sp, #20
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cdba:	2300      	movs	r3, #0
 800cdbc:	60bb      	str	r3, [r7, #8]
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	60fb      	str	r3, [r7, #12]
 800cdc2:	e029      	b.n	800ce18 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cdc4:	4a27      	ldr	r2, [pc, #156]	; (800ce64 <chk_lock+0xb4>)
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	011b      	lsls	r3, r3, #4
 800cdca:	4413      	add	r3, r2
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d01d      	beq.n	800ce0e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cdd2:	4a24      	ldr	r2, [pc, #144]	; (800ce64 <chk_lock+0xb4>)
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	011b      	lsls	r3, r3, #4
 800cdd8:	4413      	add	r3, r2
 800cdda:	681a      	ldr	r2, [r3, #0]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d116      	bne.n	800ce12 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cde4:	4a1f      	ldr	r2, [pc, #124]	; (800ce64 <chk_lock+0xb4>)
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	011b      	lsls	r3, r3, #4
 800cdea:	4413      	add	r3, r2
 800cdec:	3304      	adds	r3, #4
 800cdee:	681a      	ldr	r2, [r3, #0]
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d10c      	bne.n	800ce12 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cdf8:	4a1a      	ldr	r2, [pc, #104]	; (800ce64 <chk_lock+0xb4>)
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	011b      	lsls	r3, r3, #4
 800cdfe:	4413      	add	r3, r2
 800ce00:	3308      	adds	r3, #8
 800ce02:	681a      	ldr	r2, [r3, #0]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d102      	bne.n	800ce12 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ce0c:	e007      	b.n	800ce1e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	3301      	adds	r3, #1
 800ce16:	60fb      	str	r3, [r7, #12]
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	2b01      	cmp	r3, #1
 800ce1c:	d9d2      	bls.n	800cdc4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	2b02      	cmp	r3, #2
 800ce22:	d109      	bne.n	800ce38 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d102      	bne.n	800ce30 <chk_lock+0x80>
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	2b02      	cmp	r3, #2
 800ce2e:	d101      	bne.n	800ce34 <chk_lock+0x84>
 800ce30:	2300      	movs	r3, #0
 800ce32:	e010      	b.n	800ce56 <chk_lock+0xa6>
 800ce34:	2312      	movs	r3, #18
 800ce36:	e00e      	b.n	800ce56 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d108      	bne.n	800ce50 <chk_lock+0xa0>
 800ce3e:	4a09      	ldr	r2, [pc, #36]	; (800ce64 <chk_lock+0xb4>)
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	011b      	lsls	r3, r3, #4
 800ce44:	4413      	add	r3, r2
 800ce46:	330c      	adds	r3, #12
 800ce48:	881b      	ldrh	r3, [r3, #0]
 800ce4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce4e:	d101      	bne.n	800ce54 <chk_lock+0xa4>
 800ce50:	2310      	movs	r3, #16
 800ce52:	e000      	b.n	800ce56 <chk_lock+0xa6>
 800ce54:	2300      	movs	r3, #0
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3714      	adds	r7, #20
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce60:	4770      	bx	lr
 800ce62:	bf00      	nop
 800ce64:	20001df4 	.word	0x20001df4

0800ce68 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b083      	sub	sp, #12
 800ce6c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	607b      	str	r3, [r7, #4]
 800ce72:	e002      	b.n	800ce7a <enq_lock+0x12>
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	3301      	adds	r3, #1
 800ce78:	607b      	str	r3, [r7, #4]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2b01      	cmp	r3, #1
 800ce7e:	d806      	bhi.n	800ce8e <enq_lock+0x26>
 800ce80:	4a09      	ldr	r2, [pc, #36]	; (800cea8 <enq_lock+0x40>)
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	011b      	lsls	r3, r3, #4
 800ce86:	4413      	add	r3, r2
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d1f2      	bne.n	800ce74 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2b02      	cmp	r3, #2
 800ce92:	bf14      	ite	ne
 800ce94:	2301      	movne	r3, #1
 800ce96:	2300      	moveq	r3, #0
 800ce98:	b2db      	uxtb	r3, r3
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	370c      	adds	r7, #12
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea4:	4770      	bx	lr
 800cea6:	bf00      	nop
 800cea8:	20001df4 	.word	0x20001df4

0800ceac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ceac:	b480      	push	{r7}
 800ceae:	b085      	sub	sp, #20
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	60fb      	str	r3, [r7, #12]
 800ceba:	e01f      	b.n	800cefc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800cebc:	4a41      	ldr	r2, [pc, #260]	; (800cfc4 <inc_lock+0x118>)
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	011b      	lsls	r3, r3, #4
 800cec2:	4413      	add	r3, r2
 800cec4:	681a      	ldr	r2, [r3, #0]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d113      	bne.n	800cef6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cece:	4a3d      	ldr	r2, [pc, #244]	; (800cfc4 <inc_lock+0x118>)
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	011b      	lsls	r3, r3, #4
 800ced4:	4413      	add	r3, r2
 800ced6:	3304      	adds	r3, #4
 800ced8:	681a      	ldr	r2, [r3, #0]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800cede:	429a      	cmp	r2, r3
 800cee0:	d109      	bne.n	800cef6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800cee2:	4a38      	ldr	r2, [pc, #224]	; (800cfc4 <inc_lock+0x118>)
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	011b      	lsls	r3, r3, #4
 800cee8:	4413      	add	r3, r2
 800ceea:	3308      	adds	r3, #8
 800ceec:	681a      	ldr	r2, [r3, #0]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d006      	beq.n	800cf04 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	3301      	adds	r3, #1
 800cefa:	60fb      	str	r3, [r7, #12]
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	2b01      	cmp	r3, #1
 800cf00:	d9dc      	bls.n	800cebc <inc_lock+0x10>
 800cf02:	e000      	b.n	800cf06 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cf04:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	2b02      	cmp	r3, #2
 800cf0a:	d132      	bne.n	800cf72 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	60fb      	str	r3, [r7, #12]
 800cf10:	e002      	b.n	800cf18 <inc_lock+0x6c>
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	3301      	adds	r3, #1
 800cf16:	60fb      	str	r3, [r7, #12]
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	2b01      	cmp	r3, #1
 800cf1c:	d806      	bhi.n	800cf2c <inc_lock+0x80>
 800cf1e:	4a29      	ldr	r2, [pc, #164]	; (800cfc4 <inc_lock+0x118>)
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	011b      	lsls	r3, r3, #4
 800cf24:	4413      	add	r3, r2
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d1f2      	bne.n	800cf12 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	2b02      	cmp	r3, #2
 800cf30:	d101      	bne.n	800cf36 <inc_lock+0x8a>
 800cf32:	2300      	movs	r3, #0
 800cf34:	e040      	b.n	800cfb8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681a      	ldr	r2, [r3, #0]
 800cf3a:	4922      	ldr	r1, [pc, #136]	; (800cfc4 <inc_lock+0x118>)
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	011b      	lsls	r3, r3, #4
 800cf40:	440b      	add	r3, r1
 800cf42:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	689a      	ldr	r2, [r3, #8]
 800cf48:	491e      	ldr	r1, [pc, #120]	; (800cfc4 <inc_lock+0x118>)
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	011b      	lsls	r3, r3, #4
 800cf4e:	440b      	add	r3, r1
 800cf50:	3304      	adds	r3, #4
 800cf52:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf58:	491a      	ldr	r1, [pc, #104]	; (800cfc4 <inc_lock+0x118>)
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	011b      	lsls	r3, r3, #4
 800cf5e:	440b      	add	r3, r1
 800cf60:	3308      	adds	r3, #8
 800cf62:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cf64:	4a17      	ldr	r2, [pc, #92]	; (800cfc4 <inc_lock+0x118>)
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	011b      	lsls	r3, r3, #4
 800cf6a:	4413      	add	r3, r2
 800cf6c:	330c      	adds	r3, #12
 800cf6e:	2200      	movs	r2, #0
 800cf70:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d009      	beq.n	800cf8c <inc_lock+0xe0>
 800cf78:	4a12      	ldr	r2, [pc, #72]	; (800cfc4 <inc_lock+0x118>)
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	011b      	lsls	r3, r3, #4
 800cf7e:	4413      	add	r3, r2
 800cf80:	330c      	adds	r3, #12
 800cf82:	881b      	ldrh	r3, [r3, #0]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d001      	beq.n	800cf8c <inc_lock+0xe0>
 800cf88:	2300      	movs	r3, #0
 800cf8a:	e015      	b.n	800cfb8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d108      	bne.n	800cfa4 <inc_lock+0xf8>
 800cf92:	4a0c      	ldr	r2, [pc, #48]	; (800cfc4 <inc_lock+0x118>)
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	011b      	lsls	r3, r3, #4
 800cf98:	4413      	add	r3, r2
 800cf9a:	330c      	adds	r3, #12
 800cf9c:	881b      	ldrh	r3, [r3, #0]
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	b29a      	uxth	r2, r3
 800cfa2:	e001      	b.n	800cfa8 <inc_lock+0xfc>
 800cfa4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cfa8:	4906      	ldr	r1, [pc, #24]	; (800cfc4 <inc_lock+0x118>)
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	011b      	lsls	r3, r3, #4
 800cfae:	440b      	add	r3, r1
 800cfb0:	330c      	adds	r3, #12
 800cfb2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	3301      	adds	r3, #1
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	3714      	adds	r7, #20
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr
 800cfc4:	20001df4 	.word	0x20001df4

0800cfc8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b085      	sub	sp, #20
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	3b01      	subs	r3, #1
 800cfd4:	607b      	str	r3, [r7, #4]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	d825      	bhi.n	800d028 <dec_lock+0x60>
		n = Files[i].ctr;
 800cfdc:	4a17      	ldr	r2, [pc, #92]	; (800d03c <dec_lock+0x74>)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	011b      	lsls	r3, r3, #4
 800cfe2:	4413      	add	r3, r2
 800cfe4:	330c      	adds	r3, #12
 800cfe6:	881b      	ldrh	r3, [r3, #0]
 800cfe8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cfea:	89fb      	ldrh	r3, [r7, #14]
 800cfec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cff0:	d101      	bne.n	800cff6 <dec_lock+0x2e>
 800cff2:	2300      	movs	r3, #0
 800cff4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800cff6:	89fb      	ldrh	r3, [r7, #14]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d002      	beq.n	800d002 <dec_lock+0x3a>
 800cffc:	89fb      	ldrh	r3, [r7, #14]
 800cffe:	3b01      	subs	r3, #1
 800d000:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d002:	4a0e      	ldr	r2, [pc, #56]	; (800d03c <dec_lock+0x74>)
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	011b      	lsls	r3, r3, #4
 800d008:	4413      	add	r3, r2
 800d00a:	330c      	adds	r3, #12
 800d00c:	89fa      	ldrh	r2, [r7, #14]
 800d00e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d010:	89fb      	ldrh	r3, [r7, #14]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d105      	bne.n	800d022 <dec_lock+0x5a>
 800d016:	4a09      	ldr	r2, [pc, #36]	; (800d03c <dec_lock+0x74>)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	011b      	lsls	r3, r3, #4
 800d01c:	4413      	add	r3, r2
 800d01e:	2200      	movs	r2, #0
 800d020:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d022:	2300      	movs	r3, #0
 800d024:	737b      	strb	r3, [r7, #13]
 800d026:	e001      	b.n	800d02c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d028:	2302      	movs	r3, #2
 800d02a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d02c:	7b7b      	ldrb	r3, [r7, #13]
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3714      	adds	r7, #20
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr
 800d03a:	bf00      	nop
 800d03c:	20001df4 	.word	0x20001df4

0800d040 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d040:	b480      	push	{r7}
 800d042:	b085      	sub	sp, #20
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d048:	2300      	movs	r3, #0
 800d04a:	60fb      	str	r3, [r7, #12]
 800d04c:	e010      	b.n	800d070 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d04e:	4a0d      	ldr	r2, [pc, #52]	; (800d084 <clear_lock+0x44>)
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	011b      	lsls	r3, r3, #4
 800d054:	4413      	add	r3, r2
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	687a      	ldr	r2, [r7, #4]
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d105      	bne.n	800d06a <clear_lock+0x2a>
 800d05e:	4a09      	ldr	r2, [pc, #36]	; (800d084 <clear_lock+0x44>)
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	011b      	lsls	r3, r3, #4
 800d064:	4413      	add	r3, r2
 800d066:	2200      	movs	r2, #0
 800d068:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	3301      	adds	r3, #1
 800d06e:	60fb      	str	r3, [r7, #12]
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	2b01      	cmp	r3, #1
 800d074:	d9eb      	bls.n	800d04e <clear_lock+0xe>
	}
}
 800d076:	bf00      	nop
 800d078:	bf00      	nop
 800d07a:	3714      	adds	r7, #20
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr
 800d084:	20001df4 	.word	0x20001df4

0800d088 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b086      	sub	sp, #24
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d090:	2300      	movs	r3, #0
 800d092:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	78db      	ldrb	r3, [r3, #3]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d034      	beq.n	800d106 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0a0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	7858      	ldrb	r0, [r3, #1]
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	697a      	ldr	r2, [r7, #20]
 800d0b0:	f7ff fbdc 	bl	800c86c <disk_write>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d002      	beq.n	800d0c0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	73fb      	strb	r3, [r7, #15]
 800d0be:	e022      	b.n	800d106 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ca:	697a      	ldr	r2, [r7, #20]
 800d0cc:	1ad2      	subs	r2, r2, r3
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6a1b      	ldr	r3, [r3, #32]
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d217      	bcs.n	800d106 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	789b      	ldrb	r3, [r3, #2]
 800d0da:	613b      	str	r3, [r7, #16]
 800d0dc:	e010      	b.n	800d100 <sync_window+0x78>
					wsect += fs->fsize;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6a1b      	ldr	r3, [r3, #32]
 800d0e2:	697a      	ldr	r2, [r7, #20]
 800d0e4:	4413      	add	r3, r2
 800d0e6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	7858      	ldrb	r0, [r3, #1]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	697a      	ldr	r2, [r7, #20]
 800d0f6:	f7ff fbb9 	bl	800c86c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	3b01      	subs	r3, #1
 800d0fe:	613b      	str	r3, [r7, #16]
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	2b01      	cmp	r3, #1
 800d104:	d8eb      	bhi.n	800d0de <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d106:	7bfb      	ldrb	r3, [r7, #15]
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3718      	adds	r7, #24
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b084      	sub	sp, #16
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d11a:	2300      	movs	r3, #0
 800d11c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d122:	683a      	ldr	r2, [r7, #0]
 800d124:	429a      	cmp	r2, r3
 800d126:	d01b      	beq.n	800d160 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f7ff ffad 	bl	800d088 <sync_window>
 800d12e:	4603      	mov	r3, r0
 800d130:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d132:	7bfb      	ldrb	r3, [r7, #15]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d113      	bne.n	800d160 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	7858      	ldrb	r0, [r3, #1]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d142:	2301      	movs	r3, #1
 800d144:	683a      	ldr	r2, [r7, #0]
 800d146:	f7ff fb71 	bl	800c82c <disk_read>
 800d14a:	4603      	mov	r3, r0
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d004      	beq.n	800d15a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d150:	f04f 33ff 	mov.w	r3, #4294967295
 800d154:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d156:	2301      	movs	r3, #1
 800d158:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	683a      	ldr	r2, [r7, #0]
 800d15e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800d160:	7bfb      	ldrb	r3, [r7, #15]
}
 800d162:	4618      	mov	r0, r3
 800d164:	3710      	adds	r7, #16
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
	...

0800d16c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f7ff ff87 	bl	800d088 <sync_window>
 800d17a:	4603      	mov	r3, r0
 800d17c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d17e:	7bfb      	ldrb	r3, [r7, #15]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d158      	bne.n	800d236 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	781b      	ldrb	r3, [r3, #0]
 800d188:	2b03      	cmp	r3, #3
 800d18a:	d148      	bne.n	800d21e <sync_fs+0xb2>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	791b      	ldrb	r3, [r3, #4]
 800d190:	2b01      	cmp	r3, #1
 800d192:	d144      	bne.n	800d21e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	3338      	adds	r3, #56	; 0x38
 800d198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d19c:	2100      	movs	r1, #0
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7ff fda8 	bl	800ccf4 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	3338      	adds	r3, #56	; 0x38
 800d1a8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d1ac:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f7ff fcaf 	bl	800cb14 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	3338      	adds	r3, #56	; 0x38
 800d1ba:	4921      	ldr	r1, [pc, #132]	; (800d240 <sync_fs+0xd4>)
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f7ff fcc4 	bl	800cb4a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	3338      	adds	r3, #56	; 0x38
 800d1c6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d1ca:	491e      	ldr	r1, [pc, #120]	; (800d244 <sync_fs+0xd8>)
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f7ff fcbc 	bl	800cb4a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	3338      	adds	r3, #56	; 0x38
 800d1d6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	699b      	ldr	r3, [r3, #24]
 800d1de:	4619      	mov	r1, r3
 800d1e0:	4610      	mov	r0, r2
 800d1e2:	f7ff fcb2 	bl	800cb4a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	3338      	adds	r3, #56	; 0x38
 800d1ea:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	695b      	ldr	r3, [r3, #20]
 800d1f2:	4619      	mov	r1, r3
 800d1f4:	4610      	mov	r0, r2
 800d1f6:	f7ff fca8 	bl	800cb4a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1fe:	1c5a      	adds	r2, r3, #1
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	7858      	ldrb	r0, [r3, #1]
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d212:	2301      	movs	r3, #1
 800d214:	f7ff fb2a 	bl	800c86c <disk_write>
			fs->fsi_flag = 0;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2200      	movs	r2, #0
 800d21c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	785b      	ldrb	r3, [r3, #1]
 800d222:	2200      	movs	r2, #0
 800d224:	2100      	movs	r1, #0
 800d226:	4618      	mov	r0, r3
 800d228:	f7ff fb40 	bl	800c8ac <disk_ioctl>
 800d22c:	4603      	mov	r3, r0
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d001      	beq.n	800d236 <sync_fs+0xca>
 800d232:	2301      	movs	r3, #1
 800d234:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d236:	7bfb      	ldrb	r3, [r7, #15]
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3710      	adds	r7, #16
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}
 800d240:	41615252 	.word	0x41615252
 800d244:	61417272 	.word	0x61417272

0800d248 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d248:	b480      	push	{r7}
 800d24a:	b083      	sub	sp, #12
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	3b02      	subs	r3, #2
 800d256:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	69db      	ldr	r3, [r3, #28]
 800d25c:	3b02      	subs	r3, #2
 800d25e:	683a      	ldr	r2, [r7, #0]
 800d260:	429a      	cmp	r2, r3
 800d262:	d301      	bcc.n	800d268 <clust2sect+0x20>
 800d264:	2300      	movs	r3, #0
 800d266:	e008      	b.n	800d27a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	895b      	ldrh	r3, [r3, #10]
 800d26c:	461a      	mov	r2, r3
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	fb03 f202 	mul.w	r2, r3, r2
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d278:	4413      	add	r3, r2
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	370c      	adds	r7, #12
 800d27e:	46bd      	mov	sp, r7
 800d280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d284:	4770      	bx	lr
	...

0800d288 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b088      	sub	sp, #32
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d292:	6879      	ldr	r1, [r7, #4]
 800d294:	6809      	ldr	r1, [r1, #0]
 800d296:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d298:	6839      	ldr	r1, [r7, #0]
 800d29a:	2901      	cmp	r1, #1
 800d29c:	d904      	bls.n	800d2a8 <get_fat+0x20>
 800d29e:	69b9      	ldr	r1, [r7, #24]
 800d2a0:	69c9      	ldr	r1, [r1, #28]
 800d2a2:	6838      	ldr	r0, [r7, #0]
 800d2a4:	4288      	cmp	r0, r1
 800d2a6:	d302      	bcc.n	800d2ae <get_fat+0x26>
		val = 1;	/* Internal error */
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	61fb      	str	r3, [r7, #28]
 800d2ac:	e101      	b.n	800d4b2 <get_fat+0x22a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d2ae:	f04f 31ff 	mov.w	r1, #4294967295
 800d2b2:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800d2b4:	69b9      	ldr	r1, [r7, #24]
 800d2b6:	7809      	ldrb	r1, [r1, #0]
 800d2b8:	3901      	subs	r1, #1
 800d2ba:	2903      	cmp	r1, #3
 800d2bc:	f200 80ed 	bhi.w	800d49a <get_fat+0x212>
 800d2c0:	a001      	add	r0, pc, #4	; (adr r0, 800d2c8 <get_fat+0x40>)
 800d2c2:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d2c6:	bf00      	nop
 800d2c8:	0800d2d9 	.word	0x0800d2d9
 800d2cc:	0800d361 	.word	0x0800d361
 800d2d0:	0800d397 	.word	0x0800d397
 800d2d4:	0800d3cf 	.word	0x0800d3cf
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	60fb      	str	r3, [r7, #12]
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	085b      	lsrs	r3, r3, #1
 800d2e0:	68fa      	ldr	r2, [r7, #12]
 800d2e2:	4413      	add	r3, r2
 800d2e4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d2e6:	69bb      	ldr	r3, [r7, #24]
 800d2e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	0a5b      	lsrs	r3, r3, #9
 800d2ee:	4413      	add	r3, r2
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	69b8      	ldr	r0, [r7, #24]
 800d2f4:	f7ff ff0c 	bl	800d110 <move_window>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	f040 80d0 	bne.w	800d4a0 <get_fat+0x218>
			wc = fs->win[bc++ % SS(fs)];
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	1c5a      	adds	r2, r3, #1
 800d304:	60fa      	str	r2, [r7, #12]
 800d306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d30a:	69ba      	ldr	r2, [r7, #24]
 800d30c:	4413      	add	r3, r2
 800d30e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d312:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d314:	69bb      	ldr	r3, [r7, #24]
 800d316:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	0a5b      	lsrs	r3, r3, #9
 800d31c:	4413      	add	r3, r2
 800d31e:	4619      	mov	r1, r3
 800d320:	69b8      	ldr	r0, [r7, #24]
 800d322:	f7ff fef5 	bl	800d110 <move_window>
 800d326:	4603      	mov	r3, r0
 800d328:	2b00      	cmp	r3, #0
 800d32a:	f040 80bb 	bne.w	800d4a4 <get_fat+0x21c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d334:	69ba      	ldr	r2, [r7, #24]
 800d336:	4413      	add	r3, r2
 800d338:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d33c:	021b      	lsls	r3, r3, #8
 800d33e:	461a      	mov	r2, r3
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	4313      	orrs	r3, r2
 800d344:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	f003 0301 	and.w	r3, r3, #1
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d002      	beq.n	800d356 <get_fat+0xce>
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	091b      	lsrs	r3, r3, #4
 800d354:	e002      	b.n	800d35c <get_fat+0xd4>
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d35c:	61fb      	str	r3, [r7, #28]
			break;
 800d35e:	e0a8      	b.n	800d4b2 <get_fat+0x22a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d360:	69bb      	ldr	r3, [r7, #24]
 800d362:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	0a1b      	lsrs	r3, r3, #8
 800d368:	4413      	add	r3, r2
 800d36a:	4619      	mov	r1, r3
 800d36c:	69b8      	ldr	r0, [r7, #24]
 800d36e:	f7ff fecf 	bl	800d110 <move_window>
 800d372:	4603      	mov	r3, r0
 800d374:	2b00      	cmp	r3, #0
 800d376:	f040 8097 	bne.w	800d4a8 <get_fat+0x220>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d37a:	69bb      	ldr	r3, [r7, #24]
 800d37c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	005b      	lsls	r3, r3, #1
 800d384:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d388:	4413      	add	r3, r2
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7ff faac 	bl	800c8e8 <ld_word>
 800d390:	4603      	mov	r3, r0
 800d392:	61fb      	str	r3, [r7, #28]
			break;
 800d394:	e08d      	b.n	800d4b2 <get_fat+0x22a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d396:	69bb      	ldr	r3, [r7, #24]
 800d398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	09db      	lsrs	r3, r3, #7
 800d39e:	4413      	add	r3, r2
 800d3a0:	4619      	mov	r1, r3
 800d3a2:	69b8      	ldr	r0, [r7, #24]
 800d3a4:	f7ff feb4 	bl	800d110 <move_window>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d17e      	bne.n	800d4ac <get_fat+0x224>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d3ae:	69bb      	ldr	r3, [r7, #24]
 800d3b0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	009b      	lsls	r3, r3, #2
 800d3b8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d3bc:	4413      	add	r3, r2
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f7ff faaa 	bl	800c918 <ld_dword>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d3ca:	61fb      	str	r3, [r7, #28]
			break;
 800d3cc:	e071      	b.n	800d4b2 <get_fat+0x22a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800d3ce:	6879      	ldr	r1, [r7, #4]
 800d3d0:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800d3d4:	4301      	orrs	r1, r0
 800d3d6:	d060      	beq.n	800d49a <get_fat+0x212>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800d3d8:	6879      	ldr	r1, [r7, #4]
 800d3da:	6889      	ldr	r1, [r1, #8]
 800d3dc:	6838      	ldr	r0, [r7, #0]
 800d3de:	1a41      	subs	r1, r0, r1
 800d3e0:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800d3e2:	6879      	ldr	r1, [r7, #4]
 800d3e4:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800d3e8:	1e42      	subs	r2, r0, #1
 800d3ea:	f141 33ff 	adc.w	r3, r1, #4294967295
 800d3ee:	f04f 0000 	mov.w	r0, #0
 800d3f2:	f04f 0100 	mov.w	r1, #0
 800d3f6:	0a50      	lsrs	r0, r2, #9
 800d3f8:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800d3fc:	0a59      	lsrs	r1, r3, #9
 800d3fe:	4602      	mov	r2, r0
 800d400:	69bb      	ldr	r3, [r7, #24]
 800d402:	895b      	ldrh	r3, [r3, #10]
 800d404:	fbb2 f3f3 	udiv	r3, r2, r3
 800d408:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	79db      	ldrb	r3, [r3, #7]
 800d40e:	2b02      	cmp	r3, #2
 800d410:	d10e      	bne.n	800d430 <get_fat+0x1a8>
					if (cofs <= clen) {
 800d412:	697a      	ldr	r2, [r7, #20]
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	429a      	cmp	r2, r3
 800d418:	d80a      	bhi.n	800d430 <get_fat+0x1a8>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800d41a:	697a      	ldr	r2, [r7, #20]
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	429a      	cmp	r2, r3
 800d420:	d002      	beq.n	800d428 <get_fat+0x1a0>
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	3301      	adds	r3, #1
 800d426:	e001      	b.n	800d42c <get_fat+0x1a4>
 800d428:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d42c:	61fb      	str	r3, [r7, #28]
						break;
 800d42e:	e040      	b.n	800d4b2 <get_fat+0x22a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	79db      	ldrb	r3, [r3, #7]
 800d434:	2b03      	cmp	r3, #3
 800d436:	d108      	bne.n	800d44a <get_fat+0x1c2>
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	699b      	ldr	r3, [r3, #24]
 800d43c:	697a      	ldr	r2, [r7, #20]
 800d43e:	429a      	cmp	r2, r3
 800d440:	d203      	bcs.n	800d44a <get_fat+0x1c2>
					val = clst + 1; 	/* Generate the value */
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	3301      	adds	r3, #1
 800d446:	61fb      	str	r3, [r7, #28]
					break;
 800d448:	e033      	b.n	800d4b2 <get_fat+0x22a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	79db      	ldrb	r3, [r3, #7]
 800d44e:	2b02      	cmp	r3, #2
 800d450:	d023      	beq.n	800d49a <get_fat+0x212>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	69db      	ldr	r3, [r3, #28]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d003      	beq.n	800d462 <get_fat+0x1da>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800d45a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d45e:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800d460:	e027      	b.n	800d4b2 <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d462:	69bb      	ldr	r3, [r7, #24]
 800d464:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	09db      	lsrs	r3, r3, #7
 800d46a:	4413      	add	r3, r2
 800d46c:	4619      	mov	r1, r3
 800d46e:	69b8      	ldr	r0, [r7, #24]
 800d470:	f7ff fe4e 	bl	800d110 <move_window>
 800d474:	4603      	mov	r3, r0
 800d476:	2b00      	cmp	r3, #0
 800d478:	d11a      	bne.n	800d4b0 <get_fat+0x228>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800d47a:	69bb      	ldr	r3, [r7, #24]
 800d47c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	009b      	lsls	r3, r3, #2
 800d484:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d488:	4413      	add	r3, r2
 800d48a:	4618      	mov	r0, r3
 800d48c:	f7ff fa44 	bl	800c918 <ld_dword>
 800d490:	4603      	mov	r3, r0
 800d492:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d496:	61fb      	str	r3, [r7, #28]
					break;
 800d498:	e00b      	b.n	800d4b2 <get_fat+0x22a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d49a:	2301      	movs	r3, #1
 800d49c:	61fb      	str	r3, [r7, #28]
 800d49e:	e008      	b.n	800d4b2 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d4a0:	bf00      	nop
 800d4a2:	e006      	b.n	800d4b2 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d4a4:	bf00      	nop
 800d4a6:	e004      	b.n	800d4b2 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d4a8:	bf00      	nop
 800d4aa:	e002      	b.n	800d4b2 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d4ac:	bf00      	nop
 800d4ae:	e000      	b.n	800d4b2 <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d4b0:	bf00      	nop
		}
	}

	return val;
 800d4b2:	69fb      	ldr	r3, [r7, #28]
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	3720      	adds	r7, #32
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}

0800d4bc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d4bc:	b590      	push	{r4, r7, lr}
 800d4be:	b089      	sub	sp, #36	; 0x24
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	60f8      	str	r0, [r7, #12]
 800d4c4:	60b9      	str	r1, [r7, #8]
 800d4c6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d4c8:	2302      	movs	r3, #2
 800d4ca:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	2b01      	cmp	r3, #1
 800d4d0:	f240 80d6 	bls.w	800d680 <put_fat+0x1c4>
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	69db      	ldr	r3, [r3, #28]
 800d4d8:	68ba      	ldr	r2, [r7, #8]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	f080 80d0 	bcs.w	800d680 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	781b      	ldrb	r3, [r3, #0]
 800d4e4:	2b04      	cmp	r3, #4
 800d4e6:	f300 80d4 	bgt.w	800d692 <put_fat+0x1d6>
 800d4ea:	2b03      	cmp	r3, #3
 800d4ec:	f280 8093 	bge.w	800d616 <put_fat+0x15a>
 800d4f0:	2b01      	cmp	r3, #1
 800d4f2:	d002      	beq.n	800d4fa <put_fat+0x3e>
 800d4f4:	2b02      	cmp	r3, #2
 800d4f6:	d06e      	beq.n	800d5d6 <put_fat+0x11a>
 800d4f8:	e0cb      	b.n	800d692 <put_fat+0x1d6>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	61bb      	str	r3, [r7, #24]
 800d4fe:	69bb      	ldr	r3, [r7, #24]
 800d500:	085b      	lsrs	r3, r3, #1
 800d502:	69ba      	ldr	r2, [r7, #24]
 800d504:	4413      	add	r3, r2
 800d506:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d50c:	69bb      	ldr	r3, [r7, #24]
 800d50e:	0a5b      	lsrs	r3, r3, #9
 800d510:	4413      	add	r3, r2
 800d512:	4619      	mov	r1, r3
 800d514:	68f8      	ldr	r0, [r7, #12]
 800d516:	f7ff fdfb 	bl	800d110 <move_window>
 800d51a:	4603      	mov	r3, r0
 800d51c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d51e:	7ffb      	ldrb	r3, [r7, #31]
 800d520:	2b00      	cmp	r3, #0
 800d522:	f040 80af 	bne.w	800d684 <put_fat+0x1c8>
			p = fs->win + bc++ % SS(fs);
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d52c:	69bb      	ldr	r3, [r7, #24]
 800d52e:	1c59      	adds	r1, r3, #1
 800d530:	61b9      	str	r1, [r7, #24]
 800d532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d536:	4413      	add	r3, r2
 800d538:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	f003 0301 	and.w	r3, r3, #1
 800d540:	2b00      	cmp	r3, #0
 800d542:	d00d      	beq.n	800d560 <put_fat+0xa4>
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	781b      	ldrb	r3, [r3, #0]
 800d548:	b25b      	sxtb	r3, r3
 800d54a:	f003 030f 	and.w	r3, r3, #15
 800d54e:	b25a      	sxtb	r2, r3
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	b2db      	uxtb	r3, r3
 800d554:	011b      	lsls	r3, r3, #4
 800d556:	b25b      	sxtb	r3, r3
 800d558:	4313      	orrs	r3, r2
 800d55a:	b25b      	sxtb	r3, r3
 800d55c:	b2db      	uxtb	r3, r3
 800d55e:	e001      	b.n	800d564 <put_fat+0xa8>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	b2db      	uxtb	r3, r3
 800d564:	697a      	ldr	r2, [r7, #20]
 800d566:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	2201      	movs	r2, #1
 800d56c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d572:	69bb      	ldr	r3, [r7, #24]
 800d574:	0a5b      	lsrs	r3, r3, #9
 800d576:	4413      	add	r3, r2
 800d578:	4619      	mov	r1, r3
 800d57a:	68f8      	ldr	r0, [r7, #12]
 800d57c:	f7ff fdc8 	bl	800d110 <move_window>
 800d580:	4603      	mov	r3, r0
 800d582:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d584:	7ffb      	ldrb	r3, [r7, #31]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d17e      	bne.n	800d688 <put_fat+0x1cc>
			p = fs->win + bc % SS(fs);
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d590:	69bb      	ldr	r3, [r7, #24]
 800d592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d596:	4413      	add	r3, r2
 800d598:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	f003 0301 	and.w	r3, r3, #1
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d003      	beq.n	800d5ac <put_fat+0xf0>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	091b      	lsrs	r3, r3, #4
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	e00e      	b.n	800d5ca <put_fat+0x10e>
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	781b      	ldrb	r3, [r3, #0]
 800d5b0:	b25b      	sxtb	r3, r3
 800d5b2:	f023 030f 	bic.w	r3, r3, #15
 800d5b6:	b25a      	sxtb	r2, r3
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	0a1b      	lsrs	r3, r3, #8
 800d5bc:	b25b      	sxtb	r3, r3
 800d5be:	f003 030f 	and.w	r3, r3, #15
 800d5c2:	b25b      	sxtb	r3, r3
 800d5c4:	4313      	orrs	r3, r2
 800d5c6:	b25b      	sxtb	r3, r3
 800d5c8:	b2db      	uxtb	r3, r3
 800d5ca:	697a      	ldr	r2, [r7, #20]
 800d5cc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	2201      	movs	r2, #1
 800d5d2:	70da      	strb	r2, [r3, #3]
			break;
 800d5d4:	e05d      	b.n	800d692 <put_fat+0x1d6>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	0a1b      	lsrs	r3, r3, #8
 800d5de:	4413      	add	r3, r2
 800d5e0:	4619      	mov	r1, r3
 800d5e2:	68f8      	ldr	r0, [r7, #12]
 800d5e4:	f7ff fd94 	bl	800d110 <move_window>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d5ec:	7ffb      	ldrb	r3, [r7, #31]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d14c      	bne.n	800d68c <put_fat+0x1d0>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	005b      	lsls	r3, r3, #1
 800d5fc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d600:	4413      	add	r3, r2
 800d602:	687a      	ldr	r2, [r7, #4]
 800d604:	b292      	uxth	r2, r2
 800d606:	4611      	mov	r1, r2
 800d608:	4618      	mov	r0, r3
 800d60a:	f7ff fa83 	bl	800cb14 <st_word>
			fs->wflag = 1;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	2201      	movs	r2, #1
 800d612:	70da      	strb	r2, [r3, #3]
			break;
 800d614:	e03d      	b.n	800d692 <put_fat+0x1d6>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	09db      	lsrs	r3, r3, #7
 800d61e:	4413      	add	r3, r2
 800d620:	4619      	mov	r1, r3
 800d622:	68f8      	ldr	r0, [r7, #12]
 800d624:	f7ff fd74 	bl	800d110 <move_window>
 800d628:	4603      	mov	r3, r0
 800d62a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d62c:	7ffb      	ldrb	r3, [r7, #31]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d12e      	bne.n	800d690 <put_fat+0x1d4>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	781b      	ldrb	r3, [r3, #0]
 800d636:	2b04      	cmp	r3, #4
 800d638:	d012      	beq.n	800d660 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	009b      	lsls	r3, r3, #2
 800d64a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d64e:	4413      	add	r3, r2
 800d650:	4618      	mov	r0, r3
 800d652:	f7ff f961 	bl	800c918 <ld_dword>
 800d656:	4603      	mov	r3, r0
 800d658:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d65c:	4323      	orrs	r3, r4
 800d65e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	009b      	lsls	r3, r3, #2
 800d66a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d66e:	4413      	add	r3, r2
 800d670:	6879      	ldr	r1, [r7, #4]
 800d672:	4618      	mov	r0, r3
 800d674:	f7ff fa69 	bl	800cb4a <st_dword>
			fs->wflag = 1;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	2201      	movs	r2, #1
 800d67c:	70da      	strb	r2, [r3, #3]
			break;
 800d67e:	e008      	b.n	800d692 <put_fat+0x1d6>
		}
	}
 800d680:	bf00      	nop
 800d682:	e006      	b.n	800d692 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800d684:	bf00      	nop
 800d686:	e004      	b.n	800d692 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800d688:	bf00      	nop
 800d68a:	e002      	b.n	800d692 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800d68c:	bf00      	nop
 800d68e:	e000      	b.n	800d692 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800d690:	bf00      	nop
	return res;
 800d692:	7ffb      	ldrb	r3, [r7, #31]
}
 800d694:	4618      	mov	r0, r3
 800d696:	3724      	adds	r7, #36	; 0x24
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd90      	pop	{r4, r7, pc}

0800d69c <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b08a      	sub	sp, #40	; 0x28
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	60f8      	str	r0, [r7, #12]
 800d6a4:	60b9      	str	r1, [r7, #8]
 800d6a6:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	3b02      	subs	r3, #2
 800d6ac:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	69db      	ldr	r3, [r3, #28]
 800d6b2:	3b02      	subs	r3, #2
 800d6b4:	68ba      	ldr	r2, [r7, #8]
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d301      	bcc.n	800d6be <find_bitmap+0x22>
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	61fb      	str	r3, [r7, #28]
 800d6c2:	69fb      	ldr	r3, [r7, #28]
 800d6c4:	61bb      	str	r3, [r7, #24]
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d6ce:	69fb      	ldr	r3, [r7, #28]
 800d6d0:	0b1b      	lsrs	r3, r3, #12
 800d6d2:	4413      	add	r3, r2
 800d6d4:	4619      	mov	r1, r3
 800d6d6:	68f8      	ldr	r0, [r7, #12]
 800d6d8:	f7ff fd1a 	bl	800d110 <move_window>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d002      	beq.n	800d6e8 <find_bitmap+0x4c>
 800d6e2:	f04f 33ff 	mov.w	r3, #4294967295
 800d6e6:	e051      	b.n	800d78c <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800d6e8:	69fb      	ldr	r3, [r7, #28]
 800d6ea:	08db      	lsrs	r3, r3, #3
 800d6ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6f0:	623b      	str	r3, [r7, #32]
 800d6f2:	69fb      	ldr	r3, [r7, #28]
 800d6f4:	f003 0307 	and.w	r3, r3, #7
 800d6f8:	2201      	movs	r2, #1
 800d6fa:	fa02 f303 	lsl.w	r3, r2, r3
 800d6fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800d702:	68fa      	ldr	r2, [r7, #12]
 800d704:	6a3b      	ldr	r3, [r7, #32]
 800d706:	4413      	add	r3, r2
 800d708:	3338      	adds	r3, #56	; 0x38
 800d70a:	781a      	ldrb	r2, [r3, #0]
 800d70c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d710:	4013      	ands	r3, r2
 800d712:	74fb      	strb	r3, [r7, #19]
 800d714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d718:	005b      	lsls	r3, r3, #1
 800d71a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800d71e:	69fb      	ldr	r3, [r7, #28]
 800d720:	3301      	adds	r3, #1
 800d722:	61fb      	str	r3, [r7, #28]
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	69db      	ldr	r3, [r3, #28]
 800d728:	3b02      	subs	r3, #2
 800d72a:	69fa      	ldr	r2, [r7, #28]
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d307      	bcc.n	800d740 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800d730:	2300      	movs	r3, #0
 800d732:	61fb      	str	r3, [r7, #28]
 800d734:	2300      	movs	r3, #0
 800d736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d73a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d73e:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800d740:	7cfb      	ldrb	r3, [r7, #19]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d109      	bne.n	800d75a <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800d746:	697b      	ldr	r3, [r7, #20]
 800d748:	3301      	adds	r3, #1
 800d74a:	617b      	str	r3, [r7, #20]
 800d74c:	697a      	ldr	r2, [r7, #20]
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	429a      	cmp	r2, r3
 800d752:	d106      	bne.n	800d762 <find_bitmap+0xc6>
 800d754:	69bb      	ldr	r3, [r7, #24]
 800d756:	3302      	adds	r3, #2
 800d758:	e018      	b.n	800d78c <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800d75a:	69fb      	ldr	r3, [r7, #28]
 800d75c:	61bb      	str	r3, [r7, #24]
 800d75e:	2300      	movs	r3, #0
 800d760:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800d762:	69fa      	ldr	r2, [r7, #28]
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	429a      	cmp	r2, r3
 800d768:	d101      	bne.n	800d76e <find_bitmap+0xd2>
 800d76a:	2300      	movs	r3, #0
 800d76c:	e00e      	b.n	800d78c <find_bitmap+0xf0>
			} while (bm);
 800d76e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d772:	2b00      	cmp	r3, #0
 800d774:	d1c5      	bne.n	800d702 <find_bitmap+0x66>
			bm = 1;
 800d776:	2301      	movs	r3, #1
 800d778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800d77c:	6a3b      	ldr	r3, [r7, #32]
 800d77e:	3301      	adds	r3, #1
 800d780:	623b      	str	r3, [r7, #32]
 800d782:	6a3b      	ldr	r3, [r7, #32]
 800d784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d788:	d3bb      	bcc.n	800d702 <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800d78a:	e79e      	b.n	800d6ca <find_bitmap+0x2e>
	}
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3728      	adds	r7, #40	; 0x28
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b088      	sub	sp, #32
 800d798:	af00      	add	r7, sp, #0
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	60b9      	str	r1, [r7, #8]
 800d79e:	607a      	str	r2, [r7, #4]
 800d7a0:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	3b02      	subs	r3, #2
 800d7a6:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	0b1b      	lsrs	r3, r3, #12
 800d7b0:	4413      	add	r3, r2
 800d7b2:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	08db      	lsrs	r3, r3, #3
 800d7b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7bc:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	f003 0307 	and.w	r3, r3, #7
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	fa02 f303 	lsl.w	r3, r2, r3
 800d7ca:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	1c5a      	adds	r2, r3, #1
 800d7d0:	617a      	str	r2, [r7, #20]
 800d7d2:	4619      	mov	r1, r3
 800d7d4:	68f8      	ldr	r0, [r7, #12]
 800d7d6:	f7ff fc9b 	bl	800d110 <move_window>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d001      	beq.n	800d7e4 <change_bitmap+0x50>
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	e03d      	b.n	800d860 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800d7e4:	68fa      	ldr	r2, [r7, #12]
 800d7e6:	69bb      	ldr	r3, [r7, #24]
 800d7e8:	4413      	add	r3, r2
 800d7ea:	3338      	adds	r3, #56	; 0x38
 800d7ec:	781a      	ldrb	r2, [r3, #0]
 800d7ee:	7ffb      	ldrb	r3, [r7, #31]
 800d7f0:	4013      	ands	r3, r2
 800d7f2:	b2db      	uxtb	r3, r3
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	bf14      	ite	ne
 800d7f8:	2301      	movne	r3, #1
 800d7fa:	2300      	moveq	r3, #0
 800d7fc:	b2db      	uxtb	r3, r3
 800d7fe:	461a      	mov	r2, r3
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	4293      	cmp	r3, r2
 800d804:	d101      	bne.n	800d80a <change_bitmap+0x76>
 800d806:	2302      	movs	r3, #2
 800d808:	e02a      	b.n	800d860 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 800d80a:	68fa      	ldr	r2, [r7, #12]
 800d80c:	69bb      	ldr	r3, [r7, #24]
 800d80e:	4413      	add	r3, r2
 800d810:	3338      	adds	r3, #56	; 0x38
 800d812:	781a      	ldrb	r2, [r3, #0]
 800d814:	7ffb      	ldrb	r3, [r7, #31]
 800d816:	4053      	eors	r3, r2
 800d818:	b2d9      	uxtb	r1, r3
 800d81a:	68fa      	ldr	r2, [r7, #12]
 800d81c:	69bb      	ldr	r3, [r7, #24]
 800d81e:	4413      	add	r3, r2
 800d820:	3338      	adds	r3, #56	; 0x38
 800d822:	460a      	mov	r2, r1
 800d824:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	2201      	movs	r2, #1
 800d82a:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	3b01      	subs	r3, #1
 800d830:	607b      	str	r3, [r7, #4]
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d101      	bne.n	800d83c <change_bitmap+0xa8>
 800d838:	2300      	movs	r3, #0
 800d83a:	e011      	b.n	800d860 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 800d83c:	7ffb      	ldrb	r3, [r7, #31]
 800d83e:	005b      	lsls	r3, r3, #1
 800d840:	77fb      	strb	r3, [r7, #31]
 800d842:	7ffb      	ldrb	r3, [r7, #31]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d1cd      	bne.n	800d7e4 <change_bitmap+0x50>
			bm = 1;
 800d848:	2301      	movs	r3, #1
 800d84a:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800d84c:	69bb      	ldr	r3, [r7, #24]
 800d84e:	3301      	adds	r3, #1
 800d850:	61bb      	str	r3, [r7, #24]
 800d852:	69bb      	ldr	r3, [r7, #24]
 800d854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d858:	d3c4      	bcc.n	800d7e4 <change_bitmap+0x50>
		i = 0;
 800d85a:	2300      	movs	r3, #0
 800d85c:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800d85e:	e7b5      	b.n	800d7cc <change_bitmap+0x38>
	}
}
 800d860:	4618      	mov	r0, r3
 800d862:	3720      	adds	r7, #32
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}

0800d868 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b086      	sub	sp, #24
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	79db      	ldrb	r3, [r3, #7]
 800d874:	2b03      	cmp	r3, #3
 800d876:	d121      	bne.n	800d8bc <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	689b      	ldr	r3, [r3, #8]
 800d87c:	617b      	str	r3, [r7, #20]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	699b      	ldr	r3, [r3, #24]
 800d882:	613b      	str	r3, [r7, #16]
 800d884:	e014      	b.n	800d8b0 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6818      	ldr	r0, [r3, #0]
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	3301      	adds	r3, #1
 800d88e:	461a      	mov	r2, r3
 800d890:	6979      	ldr	r1, [r7, #20]
 800d892:	f7ff fe13 	bl	800d4bc <put_fat>
 800d896:	4603      	mov	r3, r0
 800d898:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800d89a:	7bfb      	ldrb	r3, [r7, #15]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d001      	beq.n	800d8a4 <fill_first_frag+0x3c>
 800d8a0:	7bfb      	ldrb	r3, [r7, #15]
 800d8a2:	e00c      	b.n	800d8be <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	617b      	str	r3, [r7, #20]
 800d8aa:	693b      	ldr	r3, [r7, #16]
 800d8ac:	3b01      	subs	r3, #1
 800d8ae:	613b      	str	r3, [r7, #16]
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d1e7      	bne.n	800d886 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800d8bc:	2300      	movs	r3, #0
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3718      	adds	r7, #24
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}

0800d8c6 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800d8c6:	b580      	push	{r7, lr}
 800d8c8:	b086      	sub	sp, #24
 800d8ca:	af00      	add	r7, sp, #0
 800d8cc:	60f8      	str	r0, [r7, #12]
 800d8ce:	60b9      	str	r1, [r7, #8]
 800d8d0:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800d8d2:	e020      	b.n	800d916 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	6818      	ldr	r0, [r3, #0]
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	69db      	ldr	r3, [r3, #28]
 800d8dc:	68ba      	ldr	r2, [r7, #8]
 800d8de:	1ad3      	subs	r3, r2, r3
 800d8e0:	1c59      	adds	r1, r3, #1
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	69db      	ldr	r3, [r3, #28]
 800d8e6:	2b01      	cmp	r3, #1
 800d8e8:	d905      	bls.n	800d8f6 <fill_last_frag+0x30>
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	69db      	ldr	r3, [r3, #28]
 800d8ee:	68ba      	ldr	r2, [r7, #8]
 800d8f0:	1ad3      	subs	r3, r2, r3
 800d8f2:	3302      	adds	r3, #2
 800d8f4:	e000      	b.n	800d8f8 <fill_last_frag+0x32>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	461a      	mov	r2, r3
 800d8fa:	f7ff fddf 	bl	800d4bc <put_fat>
 800d8fe:	4603      	mov	r3, r0
 800d900:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800d902:	7dfb      	ldrb	r3, [r7, #23]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d001      	beq.n	800d90c <fill_last_frag+0x46>
 800d908:	7dfb      	ldrb	r3, [r7, #23]
 800d90a:	e009      	b.n	800d920 <fill_last_frag+0x5a>
		obj->n_frag--;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	69db      	ldr	r3, [r3, #28]
 800d910:	1e5a      	subs	r2, r3, #1
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	69db      	ldr	r3, [r3, #28]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d1da      	bne.n	800d8d4 <fill_last_frag+0xe>
	}
	return FR_OK;
 800d91e:	2300      	movs	r3, #0
}
 800d920:	4618      	mov	r0, r3
 800d922:	3718      	adds	r7, #24
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}

0800d928 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b08a      	sub	sp, #40	; 0x28
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	60f8      	str	r0, [r7, #12]
 800d930:	60b9      	str	r1, [r7, #8]
 800d932:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d934:	2300      	movs	r3, #0
 800d936:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	627b      	str	r3, [r7, #36]	; 0x24
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	2b01      	cmp	r3, #1
 800d94a:	d904      	bls.n	800d956 <remove_chain+0x2e>
 800d94c:	69bb      	ldr	r3, [r7, #24]
 800d94e:	69db      	ldr	r3, [r3, #28]
 800d950:	68ba      	ldr	r2, [r7, #8]
 800d952:	429a      	cmp	r2, r3
 800d954:	d301      	bcc.n	800d95a <remove_chain+0x32>
 800d956:	2302      	movs	r3, #2
 800d958:	e096      	b.n	800da88 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d014      	beq.n	800d98a <remove_chain+0x62>
 800d960:	69bb      	ldr	r3, [r7, #24]
 800d962:	781b      	ldrb	r3, [r3, #0]
 800d964:	2b04      	cmp	r3, #4
 800d966:	d103      	bne.n	800d970 <remove_chain+0x48>
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	79db      	ldrb	r3, [r3, #7]
 800d96c:	2b02      	cmp	r3, #2
 800d96e:	d00c      	beq.n	800d98a <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d970:	f04f 32ff 	mov.w	r2, #4294967295
 800d974:	6879      	ldr	r1, [r7, #4]
 800d976:	69b8      	ldr	r0, [r7, #24]
 800d978:	f7ff fda0 	bl	800d4bc <put_fat>
 800d97c:	4603      	mov	r3, r0
 800d97e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d980:	7ffb      	ldrb	r3, [r7, #31]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d001      	beq.n	800d98a <remove_chain+0x62>
 800d986:	7ffb      	ldrb	r3, [r7, #31]
 800d988:	e07e      	b.n	800da88 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d98a:	68b9      	ldr	r1, [r7, #8]
 800d98c:	68f8      	ldr	r0, [r7, #12]
 800d98e:	f7ff fc7b 	bl	800d288 <get_fat>
 800d992:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d055      	beq.n	800da46 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	2b01      	cmp	r3, #1
 800d99e:	d101      	bne.n	800d9a4 <remove_chain+0x7c>
 800d9a0:	2302      	movs	r3, #2
 800d9a2:	e071      	b.n	800da88 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9aa:	d101      	bne.n	800d9b0 <remove_chain+0x88>
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	e06b      	b.n	800da88 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800d9b0:	69bb      	ldr	r3, [r7, #24]
 800d9b2:	781b      	ldrb	r3, [r3, #0]
 800d9b4:	2b04      	cmp	r3, #4
 800d9b6:	d00b      	beq.n	800d9d0 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	68b9      	ldr	r1, [r7, #8]
 800d9bc:	69b8      	ldr	r0, [r7, #24]
 800d9be:	f7ff fd7d 	bl	800d4bc <put_fat>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d9c6:	7ffb      	ldrb	r3, [r7, #31]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d001      	beq.n	800d9d0 <remove_chain+0xa8>
 800d9cc:	7ffb      	ldrb	r3, [r7, #31]
 800d9ce:	e05b      	b.n	800da88 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d9d0:	69bb      	ldr	r3, [r7, #24]
 800d9d2:	699a      	ldr	r2, [r3, #24]
 800d9d4:	69bb      	ldr	r3, [r7, #24]
 800d9d6:	69db      	ldr	r3, [r3, #28]
 800d9d8:	3b02      	subs	r3, #2
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d20b      	bcs.n	800d9f6 <remove_chain+0xce>
			fs->free_clst++;
 800d9de:	69bb      	ldr	r3, [r7, #24]
 800d9e0:	699b      	ldr	r3, [r3, #24]
 800d9e2:	1c5a      	adds	r2, r3, #1
 800d9e4:	69bb      	ldr	r3, [r7, #24]
 800d9e6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800d9e8:	69bb      	ldr	r3, [r7, #24]
 800d9ea:	791b      	ldrb	r3, [r3, #4]
 800d9ec:	f043 0301 	orr.w	r3, r3, #1
 800d9f0:	b2da      	uxtb	r2, r3
 800d9f2:	69bb      	ldr	r3, [r7, #24]
 800d9f4:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800d9f6:	6a3b      	ldr	r3, [r7, #32]
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	697a      	ldr	r2, [r7, #20]
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d102      	bne.n	800da06 <remove_chain+0xde>
			ecl = nxt;
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	623b      	str	r3, [r7, #32]
 800da04:	e017      	b.n	800da36 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800da06:	69bb      	ldr	r3, [r7, #24]
 800da08:	781b      	ldrb	r3, [r3, #0]
 800da0a:	2b04      	cmp	r3, #4
 800da0c:	d10f      	bne.n	800da2e <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800da0e:	6a3a      	ldr	r2, [r7, #32]
 800da10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da12:	1ad3      	subs	r3, r2, r3
 800da14:	1c5a      	adds	r2, r3, #1
 800da16:	2300      	movs	r3, #0
 800da18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da1a:	69b8      	ldr	r0, [r7, #24]
 800da1c:	f7ff feba 	bl	800d794 <change_bitmap>
 800da20:	4603      	mov	r3, r0
 800da22:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800da24:	7ffb      	ldrb	r3, [r7, #31]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d001      	beq.n	800da2e <remove_chain+0x106>
 800da2a:	7ffb      	ldrb	r3, [r7, #31]
 800da2c:	e02c      	b.n	800da88 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	623b      	str	r3, [r7, #32]
 800da32:	6a3b      	ldr	r3, [r7, #32]
 800da34:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800da3a:	69bb      	ldr	r3, [r7, #24]
 800da3c:	69db      	ldr	r3, [r3, #28]
 800da3e:	68ba      	ldr	r2, [r7, #8]
 800da40:	429a      	cmp	r2, r3
 800da42:	d3a2      	bcc.n	800d98a <remove_chain+0x62>
 800da44:	e000      	b.n	800da48 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800da46:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800da48:	69bb      	ldr	r3, [r7, #24]
 800da4a:	781b      	ldrb	r3, [r3, #0]
 800da4c:	2b04      	cmp	r3, #4
 800da4e:	d11a      	bne.n	800da86 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d103      	bne.n	800da5e <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2200      	movs	r2, #0
 800da5a:	71da      	strb	r2, [r3, #7]
 800da5c:	e013      	b.n	800da86 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	79db      	ldrb	r3, [r3, #7]
 800da62:	2b03      	cmp	r3, #3
 800da64:	d10f      	bne.n	800da86 <remove_chain+0x15e>
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	689b      	ldr	r3, [r3, #8]
 800da6a:	687a      	ldr	r2, [r7, #4]
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d30a      	bcc.n	800da86 <remove_chain+0x15e>
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	689a      	ldr	r2, [r3, #8]
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	699b      	ldr	r3, [r3, #24]
 800da78:	4413      	add	r3, r2
 800da7a:	687a      	ldr	r2, [r7, #4]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d802      	bhi.n	800da86 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	2202      	movs	r2, #2
 800da84:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800da86:	2300      	movs	r3, #0
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3728      	adds	r7, #40	; 0x28
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b088      	sub	sp, #32
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d10d      	bne.n	800dac2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800daa6:	693b      	ldr	r3, [r7, #16]
 800daa8:	695b      	ldr	r3, [r3, #20]
 800daaa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800daac:	69bb      	ldr	r3, [r7, #24]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d004      	beq.n	800dabc <create_chain+0x2c>
 800dab2:	693b      	ldr	r3, [r7, #16]
 800dab4:	69db      	ldr	r3, [r3, #28]
 800dab6:	69ba      	ldr	r2, [r7, #24]
 800dab8:	429a      	cmp	r2, r3
 800daba:	d31b      	bcc.n	800daf4 <create_chain+0x64>
 800dabc:	2301      	movs	r3, #1
 800dabe:	61bb      	str	r3, [r7, #24]
 800dac0:	e018      	b.n	800daf4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800dac2:	6839      	ldr	r1, [r7, #0]
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f7ff fbdf 	bl	800d288 <get_fat>
 800daca:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	2b01      	cmp	r3, #1
 800dad0:	d801      	bhi.n	800dad6 <create_chain+0x46>
 800dad2:	2301      	movs	r3, #1
 800dad4:	e0d9      	b.n	800dc8a <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dadc:	d101      	bne.n	800dae2 <create_chain+0x52>
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	e0d3      	b.n	800dc8a <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	69db      	ldr	r3, [r3, #28]
 800dae6:	68fa      	ldr	r2, [r7, #12]
 800dae8:	429a      	cmp	r2, r3
 800daea:	d201      	bcs.n	800daf0 <create_chain+0x60>
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	e0cc      	b.n	800dc8a <create_chain+0x1fa>
		scl = clst;
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800daf4:	693b      	ldr	r3, [r7, #16]
 800daf6:	781b      	ldrb	r3, [r3, #0]
 800daf8:	2b04      	cmp	r3, #4
 800dafa:	d164      	bne.n	800dbc6 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800dafc:	2201      	movs	r2, #1
 800dafe:	69b9      	ldr	r1, [r7, #24]
 800db00:	6938      	ldr	r0, [r7, #16]
 800db02:	f7ff fdcb 	bl	800d69c <find_bitmap>
 800db06:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800db08:	69fb      	ldr	r3, [r7, #28]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d003      	beq.n	800db16 <create_chain+0x86>
 800db0e:	69fb      	ldr	r3, [r7, #28]
 800db10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db14:	d101      	bne.n	800db1a <create_chain+0x8a>
 800db16:	69fb      	ldr	r3, [r7, #28]
 800db18:	e0b7      	b.n	800dc8a <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800db1a:	2301      	movs	r3, #1
 800db1c:	2201      	movs	r2, #1
 800db1e:	69f9      	ldr	r1, [r7, #28]
 800db20:	6938      	ldr	r0, [r7, #16]
 800db22:	f7ff fe37 	bl	800d794 <change_bitmap>
 800db26:	4603      	mov	r3, r0
 800db28:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800db2a:	7dfb      	ldrb	r3, [r7, #23]
 800db2c:	2b02      	cmp	r3, #2
 800db2e:	d101      	bne.n	800db34 <create_chain+0xa4>
 800db30:	2301      	movs	r3, #1
 800db32:	e0aa      	b.n	800dc8a <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800db34:	7dfb      	ldrb	r3, [r7, #23]
 800db36:	2b01      	cmp	r3, #1
 800db38:	d102      	bne.n	800db40 <create_chain+0xb0>
 800db3a:	f04f 33ff 	mov.w	r3, #4294967295
 800db3e:	e0a4      	b.n	800dc8a <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d103      	bne.n	800db4e <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2202      	movs	r2, #2
 800db4a:	71da      	strb	r2, [r3, #7]
 800db4c:	e011      	b.n	800db72 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	79db      	ldrb	r3, [r3, #7]
 800db52:	2b02      	cmp	r3, #2
 800db54:	d10d      	bne.n	800db72 <create_chain+0xe2>
 800db56:	69bb      	ldr	r3, [r7, #24]
 800db58:	3301      	adds	r3, #1
 800db5a:	69fa      	ldr	r2, [r7, #28]
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d008      	beq.n	800db72 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	689b      	ldr	r3, [r3, #8]
 800db64:	69ba      	ldr	r2, [r7, #24]
 800db66:	1ad2      	subs	r2, r2, r3
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2203      	movs	r2, #3
 800db70:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	79db      	ldrb	r3, [r3, #7]
 800db76:	2b02      	cmp	r3, #2
 800db78:	d064      	beq.n	800dc44 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	3301      	adds	r3, #1
 800db7e:	69fa      	ldr	r2, [r7, #28]
 800db80:	429a      	cmp	r2, r3
 800db82:	d10b      	bne.n	800db9c <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	69db      	ldr	r3, [r3, #28]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d003      	beq.n	800db94 <create_chain+0x104>
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	69db      	ldr	r3, [r3, #28]
 800db90:	3301      	adds	r3, #1
 800db92:	e000      	b.n	800db96 <create_chain+0x106>
 800db94:	2302      	movs	r3, #2
 800db96:	687a      	ldr	r2, [r7, #4]
 800db98:	61d3      	str	r3, [r2, #28]
 800db9a:	e053      	b.n	800dc44 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	69db      	ldr	r3, [r3, #28]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d102      	bne.n	800dbaa <create_chain+0x11a>
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2201      	movs	r2, #1
 800dba8:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800dbaa:	69fa      	ldr	r2, [r7, #28]
 800dbac:	6839      	ldr	r1, [r7, #0]
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f7ff fe89 	bl	800d8c6 <fill_last_frag>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800dbb8:	7dfb      	ldrb	r3, [r7, #23]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d142      	bne.n	800dc44 <create_chain+0x1b4>
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2201      	movs	r2, #1
 800dbc2:	61da      	str	r2, [r3, #28]
 800dbc4:	e03e      	b.n	800dc44 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800dbc6:	69bb      	ldr	r3, [r7, #24]
 800dbc8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800dbca:	69fb      	ldr	r3, [r7, #28]
 800dbcc:	3301      	adds	r3, #1
 800dbce:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800dbd0:	693b      	ldr	r3, [r7, #16]
 800dbd2:	69db      	ldr	r3, [r3, #28]
 800dbd4:	69fa      	ldr	r2, [r7, #28]
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	d307      	bcc.n	800dbea <create_chain+0x15a>
				ncl = 2;
 800dbda:	2302      	movs	r3, #2
 800dbdc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800dbde:	69fa      	ldr	r2, [r7, #28]
 800dbe0:	69bb      	ldr	r3, [r7, #24]
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d901      	bls.n	800dbea <create_chain+0x15a>
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	e04f      	b.n	800dc8a <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dbea:	69f9      	ldr	r1, [r7, #28]
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f7ff fb4b 	bl	800d288 <get_fat>
 800dbf2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d00e      	beq.n	800dc18 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	d003      	beq.n	800dc08 <create_chain+0x178>
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc06:	d101      	bne.n	800dc0c <create_chain+0x17c>
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	e03e      	b.n	800dc8a <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800dc0c:	69fa      	ldr	r2, [r7, #28]
 800dc0e:	69bb      	ldr	r3, [r7, #24]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d1da      	bne.n	800dbca <create_chain+0x13a>
 800dc14:	2300      	movs	r3, #0
 800dc16:	e038      	b.n	800dc8a <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800dc18:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800dc1a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc1e:	69f9      	ldr	r1, [r7, #28]
 800dc20:	6938      	ldr	r0, [r7, #16]
 800dc22:	f7ff fc4b 	bl	800d4bc <put_fat>
 800dc26:	4603      	mov	r3, r0
 800dc28:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800dc2a:	7dfb      	ldrb	r3, [r7, #23]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d109      	bne.n	800dc44 <create_chain+0x1b4>
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d006      	beq.n	800dc44 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800dc36:	69fa      	ldr	r2, [r7, #28]
 800dc38:	6839      	ldr	r1, [r7, #0]
 800dc3a:	6938      	ldr	r0, [r7, #16]
 800dc3c:	f7ff fc3e 	bl	800d4bc <put_fat>
 800dc40:	4603      	mov	r3, r0
 800dc42:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800dc44:	7dfb      	ldrb	r3, [r7, #23]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d116      	bne.n	800dc78 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	69fa      	ldr	r2, [r7, #28]
 800dc4e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	699a      	ldr	r2, [r3, #24]
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	69db      	ldr	r3, [r3, #28]
 800dc58:	3b02      	subs	r3, #2
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d804      	bhi.n	800dc68 <create_chain+0x1d8>
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	699b      	ldr	r3, [r3, #24]
 800dc62:	1e5a      	subs	r2, r3, #1
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	791b      	ldrb	r3, [r3, #4]
 800dc6c:	f043 0301 	orr.w	r3, r3, #1
 800dc70:	b2da      	uxtb	r2, r3
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	711a      	strb	r2, [r3, #4]
 800dc76:	e007      	b.n	800dc88 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800dc78:	7dfb      	ldrb	r3, [r7, #23]
 800dc7a:	2b01      	cmp	r3, #1
 800dc7c:	d102      	bne.n	800dc84 <create_chain+0x1f4>
 800dc7e:	f04f 33ff 	mov.w	r3, #4294967295
 800dc82:	e000      	b.n	800dc86 <create_chain+0x1f6>
 800dc84:	2301      	movs	r3, #1
 800dc86:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800dc88:	69fb      	ldr	r3, [r7, #28]
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	3720      	adds	r7, #32
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}

0800dc92 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800dc92:	b5b0      	push	{r4, r5, r7, lr}
 800dc94:	b088      	sub	sp, #32
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	60f8      	str	r0, [r7, #12]
 800dc9a:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dca8:	3304      	adds	r3, #4
 800dcaa:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800dcac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dcb0:	f04f 0000 	mov.w	r0, #0
 800dcb4:	f04f 0100 	mov.w	r1, #0
 800dcb8:	0a50      	lsrs	r0, r2, #9
 800dcba:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800dcbe:	0a59      	lsrs	r1, r3, #9
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	895b      	ldrh	r3, [r3, #10]
 800dcc4:	b29b      	uxth	r3, r3
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	461c      	mov	r4, r3
 800dcca:	4615      	mov	r5, r2
 800dccc:	4622      	mov	r2, r4
 800dcce:	462b      	mov	r3, r5
 800dcd0:	f7f2 fae6 	bl	80002a0 <__aeabi_uldivmod>
 800dcd4:	4602      	mov	r2, r0
 800dcd6:	460b      	mov	r3, r1
 800dcd8:	4613      	mov	r3, r2
 800dcda:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dcdc:	69bb      	ldr	r3, [r7, #24]
 800dcde:	1d1a      	adds	r2, r3, #4
 800dce0:	61ba      	str	r2, [r7, #24]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d101      	bne.n	800dcf0 <clmt_clust+0x5e>
 800dcec:	2300      	movs	r3, #0
 800dcee:	e010      	b.n	800dd12 <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 800dcf0:	69fa      	ldr	r2, [r7, #28]
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	d307      	bcc.n	800dd08 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 800dcf8:	69fa      	ldr	r2, [r7, #28]
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	1ad3      	subs	r3, r2, r3
 800dcfe:	61fb      	str	r3, [r7, #28]
 800dd00:	69bb      	ldr	r3, [r7, #24]
 800dd02:	3304      	adds	r3, #4
 800dd04:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dd06:	e7e9      	b.n	800dcdc <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 800dd08:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800dd0a:	69bb      	ldr	r3, [r7, #24]
 800dd0c:	681a      	ldr	r2, [r3, #0]
 800dd0e:	69fb      	ldr	r3, [r7, #28]
 800dd10:	4413      	add	r3, r2
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	3720      	adds	r7, #32
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bdb0      	pop	{r4, r5, r7, pc}

0800dd1a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800dd1a:	b580      	push	{r7, lr}
 800dd1c:	b086      	sub	sp, #24
 800dd1e:	af00      	add	r7, sp, #0
 800dd20:	6078      	str	r0, [r7, #4]
 800dd22:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	781b      	ldrb	r3, [r3, #0]
 800dd2e:	2b04      	cmp	r3, #4
 800dd30:	d102      	bne.n	800dd38 <dir_sdi+0x1e>
 800dd32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd36:	e001      	b.n	800dd3c <dir_sdi+0x22>
 800dd38:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d904      	bls.n	800dd4c <dir_sdi+0x32>
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	f003 031f 	and.w	r3, r3, #31
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d001      	beq.n	800dd50 <dir_sdi+0x36>
		return FR_INT_ERR;
 800dd4c:	2302      	movs	r3, #2
 800dd4e:	e066      	b.n	800de1e <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	683a      	ldr	r2, [r7, #0]
 800dd54:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	689b      	ldr	r3, [r3, #8]
 800dd5a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d109      	bne.n	800dd76 <dir_sdi+0x5c>
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	2b02      	cmp	r3, #2
 800dd68:	d905      	bls.n	800dd76 <dir_sdi+0x5c>
		clst = fs->dirbase;
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd6e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2200      	movs	r2, #0
 800dd74:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d10c      	bne.n	800dd96 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	095b      	lsrs	r3, r3, #5
 800dd80:	693a      	ldr	r2, [r7, #16]
 800dd82:	8912      	ldrh	r2, [r2, #8]
 800dd84:	4293      	cmp	r3, r2
 800dd86:	d301      	bcc.n	800dd8c <dir_sdi+0x72>
 800dd88:	2302      	movs	r3, #2
 800dd8a:	e048      	b.n	800de1e <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	639a      	str	r2, [r3, #56]	; 0x38
 800dd94:	e029      	b.n	800ddea <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800dd96:	693b      	ldr	r3, [r7, #16]
 800dd98:	895b      	ldrh	r3, [r3, #10]
 800dd9a:	025b      	lsls	r3, r3, #9
 800dd9c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dd9e:	e019      	b.n	800ddd4 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	6979      	ldr	r1, [r7, #20]
 800dda4:	4618      	mov	r0, r3
 800dda6:	f7ff fa6f 	bl	800d288 <get_fat>
 800ddaa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddb2:	d101      	bne.n	800ddb8 <dir_sdi+0x9e>
 800ddb4:	2301      	movs	r3, #1
 800ddb6:	e032      	b.n	800de1e <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ddb8:	697b      	ldr	r3, [r7, #20]
 800ddba:	2b01      	cmp	r3, #1
 800ddbc:	d904      	bls.n	800ddc8 <dir_sdi+0xae>
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	69db      	ldr	r3, [r3, #28]
 800ddc2:	697a      	ldr	r2, [r7, #20]
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d301      	bcc.n	800ddcc <dir_sdi+0xb2>
 800ddc8:	2302      	movs	r3, #2
 800ddca:	e028      	b.n	800de1e <dir_sdi+0x104>
			ofs -= csz;
 800ddcc:	683a      	ldr	r2, [r7, #0]
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	1ad3      	subs	r3, r2, r3
 800ddd2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ddd4:	683a      	ldr	r2, [r7, #0]
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d2e1      	bcs.n	800dda0 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 800dddc:	6979      	ldr	r1, [r7, #20]
 800ddde:	6938      	ldr	r0, [r7, #16]
 800dde0:	f7ff fa32 	bl	800d248 <clust2sect>
 800dde4:	4602      	mov	r2, r0
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	697a      	ldr	r2, [r7, #20]
 800ddee:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d101      	bne.n	800ddfc <dir_sdi+0xe2>
 800ddf8:	2302      	movs	r3, #2
 800ddfa:	e010      	b.n	800de1e <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	0a5b      	lsrs	r3, r3, #9
 800de04:	441a      	add	r2, r3
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de16:	441a      	add	r2, r3
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800de1c:	2300      	movs	r3, #0
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3718      	adds	r7, #24
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}

0800de26 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800de26:	b580      	push	{r7, lr}
 800de28:	b086      	sub	sp, #24
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	6078      	str	r0, [r7, #4]
 800de2e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de3a:	3320      	adds	r3, #32
 800de3c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de42:	2b00      	cmp	r3, #0
 800de44:	d00b      	beq.n	800de5e <dir_next+0x38>
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	781b      	ldrb	r3, [r3, #0]
 800de4a:	2b04      	cmp	r3, #4
 800de4c:	d102      	bne.n	800de54 <dir_next+0x2e>
 800de4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de52:	e001      	b.n	800de58 <dir_next+0x32>
 800de54:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d801      	bhi.n	800de62 <dir_next+0x3c>
 800de5e:	2304      	movs	r3, #4
 800de60:	e0b2      	b.n	800dfc8 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de68:	2b00      	cmp	r3, #0
 800de6a:	f040 80a0 	bne.w	800dfae <dir_next+0x188>
		dp->sect++;				/* Next sector */
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de72:	1c5a      	adds	r2, r3, #1
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d10b      	bne.n	800de98 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	095b      	lsrs	r3, r3, #5
 800de84:	68fa      	ldr	r2, [r7, #12]
 800de86:	8912      	ldrh	r2, [r2, #8]
 800de88:	4293      	cmp	r3, r2
 800de8a:	f0c0 8090 	bcc.w	800dfae <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2200      	movs	r2, #0
 800de92:	639a      	str	r2, [r3, #56]	; 0x38
 800de94:	2304      	movs	r3, #4
 800de96:	e097      	b.n	800dfc8 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	0a5b      	lsrs	r3, r3, #9
 800de9c:	68fa      	ldr	r2, [r7, #12]
 800de9e:	8952      	ldrh	r2, [r2, #10]
 800dea0:	3a01      	subs	r2, #1
 800dea2:	4013      	ands	r3, r2
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	f040 8082 	bne.w	800dfae <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800deaa:	687a      	ldr	r2, [r7, #4]
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800deb0:	4619      	mov	r1, r3
 800deb2:	4610      	mov	r0, r2
 800deb4:	f7ff f9e8 	bl	800d288 <get_fat>
 800deb8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	2b01      	cmp	r3, #1
 800debe:	d801      	bhi.n	800dec4 <dir_next+0x9e>
 800dec0:	2302      	movs	r3, #2
 800dec2:	e081      	b.n	800dfc8 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deca:	d101      	bne.n	800ded0 <dir_next+0xaa>
 800decc:	2301      	movs	r3, #1
 800dece:	e07b      	b.n	800dfc8 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	69db      	ldr	r3, [r3, #28]
 800ded4:	697a      	ldr	r2, [r7, #20]
 800ded6:	429a      	cmp	r2, r3
 800ded8:	d35f      	bcc.n	800df9a <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d104      	bne.n	800deea <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2200      	movs	r2, #0
 800dee4:	639a      	str	r2, [r3, #56]	; 0x38
 800dee6:	2304      	movs	r3, #4
 800dee8:	e06e      	b.n	800dfc8 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800deea:	687a      	ldr	r2, [r7, #4]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800def0:	4619      	mov	r1, r3
 800def2:	4610      	mov	r0, r2
 800def4:	f7ff fdcc 	bl	800da90 <create_chain>
 800def8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d101      	bne.n	800df04 <dir_next+0xde>
 800df00:	2307      	movs	r3, #7
 800df02:	e061      	b.n	800dfc8 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	2b01      	cmp	r3, #1
 800df08:	d101      	bne.n	800df0e <dir_next+0xe8>
 800df0a:	2302      	movs	r3, #2
 800df0c:	e05c      	b.n	800dfc8 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df14:	d101      	bne.n	800df1a <dir_next+0xf4>
 800df16:	2301      	movs	r3, #1
 800df18:	e056      	b.n	800dfc8 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	79db      	ldrb	r3, [r3, #7]
 800df1e:	f043 0304 	orr.w	r3, r3, #4
 800df22:	b2da      	uxtb	r2, r3
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800df28:	68f8      	ldr	r0, [r7, #12]
 800df2a:	f7ff f8ad 	bl	800d088 <sync_window>
 800df2e:	4603      	mov	r3, r0
 800df30:	2b00      	cmp	r3, #0
 800df32:	d001      	beq.n	800df38 <dir_next+0x112>
 800df34:	2301      	movs	r3, #1
 800df36:	e047      	b.n	800dfc8 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	3338      	adds	r3, #56	; 0x38
 800df3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df40:	2100      	movs	r1, #0
 800df42:	4618      	mov	r0, r3
 800df44:	f7fe fed6 	bl	800ccf4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800df48:	2300      	movs	r3, #0
 800df4a:	613b      	str	r3, [r7, #16]
 800df4c:	6979      	ldr	r1, [r7, #20]
 800df4e:	68f8      	ldr	r0, [r7, #12]
 800df50:	f7ff f97a 	bl	800d248 <clust2sect>
 800df54:	4602      	mov	r2, r0
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	635a      	str	r2, [r3, #52]	; 0x34
 800df5a:	e012      	b.n	800df82 <dir_next+0x15c>
						fs->wflag = 1;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	2201      	movs	r2, #1
 800df60:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800df62:	68f8      	ldr	r0, [r7, #12]
 800df64:	f7ff f890 	bl	800d088 <sync_window>
 800df68:	4603      	mov	r3, r0
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d001      	beq.n	800df72 <dir_next+0x14c>
 800df6e:	2301      	movs	r3, #1
 800df70:	e02a      	b.n	800dfc8 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	3301      	adds	r3, #1
 800df76:	613b      	str	r3, [r7, #16]
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df7c:	1c5a      	adds	r2, r3, #1
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	635a      	str	r2, [r3, #52]	; 0x34
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	895b      	ldrh	r3, [r3, #10]
 800df86:	461a      	mov	r2, r3
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	4293      	cmp	r3, r2
 800df8c:	d3e6      	bcc.n	800df5c <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	1ad2      	subs	r2, r2, r3
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	697a      	ldr	r2, [r7, #20]
 800df9e:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800dfa0:	6979      	ldr	r1, [r7, #20]
 800dfa2:	68f8      	ldr	r0, [r7, #12]
 800dfa4:	f7ff f950 	bl	800d248 <clust2sect>
 800dfa8:	4602      	mov	r2, r0
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	68ba      	ldr	r2, [r7, #8]
 800dfb2:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfc0:	441a      	add	r2, r3
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800dfc6:	2300      	movs	r3, #0
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3718      	adds	r7, #24
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b086      	sub	sp, #24
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
 800dfd8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800dfe0:	2100      	movs	r1, #0
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f7ff fe99 	bl	800dd1a <dir_sdi>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dfec:	7dfb      	ldrb	r3, [r7, #23]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d140      	bne.n	800e074 <dir_alloc+0xa4>
		n = 0;
 800dff2:	2300      	movs	r3, #0
 800dff4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dffa:	4619      	mov	r1, r3
 800dffc:	68f8      	ldr	r0, [r7, #12]
 800dffe:	f7ff f887 	bl	800d110 <move_window>
 800e002:	4603      	mov	r3, r0
 800e004:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e006:	7dfb      	ldrb	r3, [r7, #23]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d132      	bne.n	800e072 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	781b      	ldrb	r3, [r3, #0]
 800e010:	2b04      	cmp	r3, #4
 800e012:	d108      	bne.n	800e026 <dir_alloc+0x56>
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e018:	781b      	ldrb	r3, [r3, #0]
 800e01a:	b25b      	sxtb	r3, r3
 800e01c:	43db      	mvns	r3, r3
 800e01e:	b2db      	uxtb	r3, r3
 800e020:	09db      	lsrs	r3, r3, #7
 800e022:	b2db      	uxtb	r3, r3
 800e024:	e00f      	b.n	800e046 <dir_alloc+0x76>
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	2be5      	cmp	r3, #229	; 0xe5
 800e02e:	d004      	beq.n	800e03a <dir_alloc+0x6a>
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e034:	781b      	ldrb	r3, [r3, #0]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d101      	bne.n	800e03e <dir_alloc+0x6e>
 800e03a:	2301      	movs	r3, #1
 800e03c:	e000      	b.n	800e040 <dir_alloc+0x70>
 800e03e:	2300      	movs	r3, #0
 800e040:	f003 0301 	and.w	r3, r3, #1
 800e044:	b2db      	uxtb	r3, r3
 800e046:	2b00      	cmp	r3, #0
 800e048:	d007      	beq.n	800e05a <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	3301      	adds	r3, #1
 800e04e:	613b      	str	r3, [r7, #16]
 800e050:	693a      	ldr	r2, [r7, #16]
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	429a      	cmp	r2, r3
 800e056:	d102      	bne.n	800e05e <dir_alloc+0x8e>
 800e058:	e00c      	b.n	800e074 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e05a:	2300      	movs	r3, #0
 800e05c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e05e:	2101      	movs	r1, #1
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f7ff fee0 	bl	800de26 <dir_next>
 800e066:	4603      	mov	r3, r0
 800e068:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e06a:	7dfb      	ldrb	r3, [r7, #23]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d0c2      	beq.n	800dff6 <dir_alloc+0x26>
 800e070:	e000      	b.n	800e074 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800e072:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e074:	7dfb      	ldrb	r3, [r7, #23]
 800e076:	2b04      	cmp	r3, #4
 800e078:	d101      	bne.n	800e07e <dir_alloc+0xae>
 800e07a:	2307      	movs	r3, #7
 800e07c:	75fb      	strb	r3, [r7, #23]
	return res;
 800e07e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e080:	4618      	mov	r0, r3
 800e082:	3718      	adds	r7, #24
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}

0800e088 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b084      	sub	sp, #16
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	331a      	adds	r3, #26
 800e096:	4618      	mov	r0, r3
 800e098:	f7fe fc26 	bl	800c8e8 <ld_word>
 800e09c:	4603      	mov	r3, r0
 800e09e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	781b      	ldrb	r3, [r3, #0]
 800e0a4:	2b03      	cmp	r3, #3
 800e0a6:	d109      	bne.n	800e0bc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	3314      	adds	r3, #20
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f7fe fc1b 	bl	800c8e8 <ld_word>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	041b      	lsls	r3, r3, #16
 800e0b6:	68fa      	ldr	r2, [r7, #12]
 800e0b8:	4313      	orrs	r3, r2
 800e0ba:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	3710      	adds	r7, #16
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}

0800e0c6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e0c6:	b580      	push	{r7, lr}
 800e0c8:	b084      	sub	sp, #16
 800e0ca:	af00      	add	r7, sp, #0
 800e0cc:	60f8      	str	r0, [r7, #12]
 800e0ce:	60b9      	str	r1, [r7, #8]
 800e0d0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	331a      	adds	r3, #26
 800e0d6:	687a      	ldr	r2, [r7, #4]
 800e0d8:	b292      	uxth	r2, r2
 800e0da:	4611      	mov	r1, r2
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7fe fd19 	bl	800cb14 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	781b      	ldrb	r3, [r3, #0]
 800e0e6:	2b03      	cmp	r3, #3
 800e0e8:	d109      	bne.n	800e0fe <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	f103 0214 	add.w	r2, r3, #20
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	0c1b      	lsrs	r3, r3, #16
 800e0f4:	b29b      	uxth	r3, r3
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	4610      	mov	r0, r2
 800e0fa:	f7fe fd0b 	bl	800cb14 <st_word>
	}
}
 800e0fe:	bf00      	nop
 800e100:	3710      	adds	r7, #16
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
	...

0800e108 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e108:	b590      	push	{r4, r7, lr}
 800e10a:	b087      	sub	sp, #28
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	331a      	adds	r3, #26
 800e116:	4618      	mov	r0, r3
 800e118:	f7fe fbe6 	bl	800c8e8 <ld_word>
 800e11c:	4603      	mov	r3, r0
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d001      	beq.n	800e126 <cmp_lfn+0x1e>
 800e122:	2300      	movs	r3, #0
 800e124:	e059      	b.n	800e1da <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	781b      	ldrb	r3, [r3, #0]
 800e12a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e12e:	1e5a      	subs	r2, r3, #1
 800e130:	4613      	mov	r3, r2
 800e132:	005b      	lsls	r3, r3, #1
 800e134:	4413      	add	r3, r2
 800e136:	009b      	lsls	r3, r3, #2
 800e138:	4413      	add	r3, r2
 800e13a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e13c:	2301      	movs	r3, #1
 800e13e:	81fb      	strh	r3, [r7, #14]
 800e140:	2300      	movs	r3, #0
 800e142:	613b      	str	r3, [r7, #16]
 800e144:	e033      	b.n	800e1ae <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e146:	4a27      	ldr	r2, [pc, #156]	; (800e1e4 <cmp_lfn+0xdc>)
 800e148:	693b      	ldr	r3, [r7, #16]
 800e14a:	4413      	add	r3, r2
 800e14c:	781b      	ldrb	r3, [r3, #0]
 800e14e:	461a      	mov	r2, r3
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	4413      	add	r3, r2
 800e154:	4618      	mov	r0, r3
 800e156:	f7fe fbc7 	bl	800c8e8 <ld_word>
 800e15a:	4603      	mov	r3, r0
 800e15c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e15e:	89fb      	ldrh	r3, [r7, #14]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d01a      	beq.n	800e19a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e164:	697b      	ldr	r3, [r7, #20]
 800e166:	2bfe      	cmp	r3, #254	; 0xfe
 800e168:	d812      	bhi.n	800e190 <cmp_lfn+0x88>
 800e16a:	89bb      	ldrh	r3, [r7, #12]
 800e16c:	4618      	mov	r0, r3
 800e16e:	f003 f96f 	bl	8011450 <ff_wtoupper>
 800e172:	4603      	mov	r3, r0
 800e174:	461c      	mov	r4, r3
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	1c5a      	adds	r2, r3, #1
 800e17a:	617a      	str	r2, [r7, #20]
 800e17c:	005b      	lsls	r3, r3, #1
 800e17e:	687a      	ldr	r2, [r7, #4]
 800e180:	4413      	add	r3, r2
 800e182:	881b      	ldrh	r3, [r3, #0]
 800e184:	4618      	mov	r0, r3
 800e186:	f003 f963 	bl	8011450 <ff_wtoupper>
 800e18a:	4603      	mov	r3, r0
 800e18c:	429c      	cmp	r4, r3
 800e18e:	d001      	beq.n	800e194 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e190:	2300      	movs	r3, #0
 800e192:	e022      	b.n	800e1da <cmp_lfn+0xd2>
			}
			wc = uc;
 800e194:	89bb      	ldrh	r3, [r7, #12]
 800e196:	81fb      	strh	r3, [r7, #14]
 800e198:	e006      	b.n	800e1a8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e19a:	89bb      	ldrh	r3, [r7, #12]
 800e19c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e1a0:	4293      	cmp	r3, r2
 800e1a2:	d001      	beq.n	800e1a8 <cmp_lfn+0xa0>
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	e018      	b.n	800e1da <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	3301      	adds	r3, #1
 800e1ac:	613b      	str	r3, [r7, #16]
 800e1ae:	693b      	ldr	r3, [r7, #16]
 800e1b0:	2b0c      	cmp	r3, #12
 800e1b2:	d9c8      	bls.n	800e146 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	781b      	ldrb	r3, [r3, #0]
 800e1b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d00b      	beq.n	800e1d8 <cmp_lfn+0xd0>
 800e1c0:	89fb      	ldrh	r3, [r7, #14]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d008      	beq.n	800e1d8 <cmp_lfn+0xd0>
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	005b      	lsls	r3, r3, #1
 800e1ca:	687a      	ldr	r2, [r7, #4]
 800e1cc:	4413      	add	r3, r2
 800e1ce:	881b      	ldrh	r3, [r3, #0]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d001      	beq.n	800e1d8 <cmp_lfn+0xd0>
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	e000      	b.n	800e1da <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e1d8:	2301      	movs	r3, #1
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	371c      	adds	r7, #28
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd90      	pop	{r4, r7, pc}
 800e1e2:	bf00      	nop
 800e1e4:	08017008 	.word	0x08017008

0800e1e8 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b086      	sub	sp, #24
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	331a      	adds	r3, #26
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f7fe fb76 	bl	800c8e8 <ld_word>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d001      	beq.n	800e206 <pick_lfn+0x1e>
 800e202:	2300      	movs	r3, #0
 800e204:	e04d      	b.n	800e2a2 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	781b      	ldrb	r3, [r3, #0]
 800e20a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e20e:	1e5a      	subs	r2, r3, #1
 800e210:	4613      	mov	r3, r2
 800e212:	005b      	lsls	r3, r3, #1
 800e214:	4413      	add	r3, r2
 800e216:	009b      	lsls	r3, r3, #2
 800e218:	4413      	add	r3, r2
 800e21a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e21c:	2301      	movs	r3, #1
 800e21e:	81fb      	strh	r3, [r7, #14]
 800e220:	2300      	movs	r3, #0
 800e222:	613b      	str	r3, [r7, #16]
 800e224:	e028      	b.n	800e278 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e226:	4a21      	ldr	r2, [pc, #132]	; (800e2ac <pick_lfn+0xc4>)
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	4413      	add	r3, r2
 800e22c:	781b      	ldrb	r3, [r3, #0]
 800e22e:	461a      	mov	r2, r3
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	4413      	add	r3, r2
 800e234:	4618      	mov	r0, r3
 800e236:	f7fe fb57 	bl	800c8e8 <ld_word>
 800e23a:	4603      	mov	r3, r0
 800e23c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e23e:	89fb      	ldrh	r3, [r7, #14]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d00f      	beq.n	800e264 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	2bfe      	cmp	r3, #254	; 0xfe
 800e248:	d901      	bls.n	800e24e <pick_lfn+0x66>
 800e24a:	2300      	movs	r3, #0
 800e24c:	e029      	b.n	800e2a2 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800e24e:	89bb      	ldrh	r3, [r7, #12]
 800e250:	81fb      	strh	r3, [r7, #14]
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	1c5a      	adds	r2, r3, #1
 800e256:	617a      	str	r2, [r7, #20]
 800e258:	005b      	lsls	r3, r3, #1
 800e25a:	687a      	ldr	r2, [r7, #4]
 800e25c:	4413      	add	r3, r2
 800e25e:	89fa      	ldrh	r2, [r7, #14]
 800e260:	801a      	strh	r2, [r3, #0]
 800e262:	e006      	b.n	800e272 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e264:	89bb      	ldrh	r3, [r7, #12]
 800e266:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e26a:	4293      	cmp	r3, r2
 800e26c:	d001      	beq.n	800e272 <pick_lfn+0x8a>
 800e26e:	2300      	movs	r3, #0
 800e270:	e017      	b.n	800e2a2 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e272:	693b      	ldr	r3, [r7, #16]
 800e274:	3301      	adds	r3, #1
 800e276:	613b      	str	r3, [r7, #16]
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	2b0c      	cmp	r3, #12
 800e27c:	d9d3      	bls.n	800e226 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	781b      	ldrb	r3, [r3, #0]
 800e282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e286:	2b00      	cmp	r3, #0
 800e288:	d00a      	beq.n	800e2a0 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	2bfe      	cmp	r3, #254	; 0xfe
 800e28e:	d901      	bls.n	800e294 <pick_lfn+0xac>
 800e290:	2300      	movs	r3, #0
 800e292:	e006      	b.n	800e2a2 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	005b      	lsls	r3, r3, #1
 800e298:	687a      	ldr	r2, [r7, #4]
 800e29a:	4413      	add	r3, r2
 800e29c:	2200      	movs	r2, #0
 800e29e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800e2a0:	2301      	movs	r3, #1
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	3718      	adds	r7, #24
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}
 800e2aa:	bf00      	nop
 800e2ac:	08017008 	.word	0x08017008

0800e2b0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b088      	sub	sp, #32
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	60f8      	str	r0, [r7, #12]
 800e2b8:	60b9      	str	r1, [r7, #8]
 800e2ba:	4611      	mov	r1, r2
 800e2bc:	461a      	mov	r2, r3
 800e2be:	460b      	mov	r3, r1
 800e2c0:	71fb      	strb	r3, [r7, #7]
 800e2c2:	4613      	mov	r3, r2
 800e2c4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	330d      	adds	r3, #13
 800e2ca:	79ba      	ldrb	r2, [r7, #6]
 800e2cc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	330b      	adds	r3, #11
 800e2d2:	220f      	movs	r2, #15
 800e2d4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	330c      	adds	r3, #12
 800e2da:	2200      	movs	r2, #0
 800e2dc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	331a      	adds	r3, #26
 800e2e2:	2100      	movs	r1, #0
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f7fe fc15 	bl	800cb14 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e2ea:	79fb      	ldrb	r3, [r7, #7]
 800e2ec:	1e5a      	subs	r2, r3, #1
 800e2ee:	4613      	mov	r3, r2
 800e2f0:	005b      	lsls	r3, r3, #1
 800e2f2:	4413      	add	r3, r2
 800e2f4:	009b      	lsls	r3, r3, #2
 800e2f6:	4413      	add	r3, r2
 800e2f8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	82fb      	strh	r3, [r7, #22]
 800e2fe:	2300      	movs	r3, #0
 800e300:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e302:	8afb      	ldrh	r3, [r7, #22]
 800e304:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e308:	4293      	cmp	r3, r2
 800e30a:	d007      	beq.n	800e31c <put_lfn+0x6c>
 800e30c:	69fb      	ldr	r3, [r7, #28]
 800e30e:	1c5a      	adds	r2, r3, #1
 800e310:	61fa      	str	r2, [r7, #28]
 800e312:	005b      	lsls	r3, r3, #1
 800e314:	68fa      	ldr	r2, [r7, #12]
 800e316:	4413      	add	r3, r2
 800e318:	881b      	ldrh	r3, [r3, #0]
 800e31a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e31c:	4a17      	ldr	r2, [pc, #92]	; (800e37c <put_lfn+0xcc>)
 800e31e:	69bb      	ldr	r3, [r7, #24]
 800e320:	4413      	add	r3, r2
 800e322:	781b      	ldrb	r3, [r3, #0]
 800e324:	461a      	mov	r2, r3
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	4413      	add	r3, r2
 800e32a:	8afa      	ldrh	r2, [r7, #22]
 800e32c:	4611      	mov	r1, r2
 800e32e:	4618      	mov	r0, r3
 800e330:	f7fe fbf0 	bl	800cb14 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e334:	8afb      	ldrh	r3, [r7, #22]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d102      	bne.n	800e340 <put_lfn+0x90>
 800e33a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e33e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e340:	69bb      	ldr	r3, [r7, #24]
 800e342:	3301      	adds	r3, #1
 800e344:	61bb      	str	r3, [r7, #24]
 800e346:	69bb      	ldr	r3, [r7, #24]
 800e348:	2b0c      	cmp	r3, #12
 800e34a:	d9da      	bls.n	800e302 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e34c:	8afb      	ldrh	r3, [r7, #22]
 800e34e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e352:	4293      	cmp	r3, r2
 800e354:	d006      	beq.n	800e364 <put_lfn+0xb4>
 800e356:	69fb      	ldr	r3, [r7, #28]
 800e358:	005b      	lsls	r3, r3, #1
 800e35a:	68fa      	ldr	r2, [r7, #12]
 800e35c:	4413      	add	r3, r2
 800e35e:	881b      	ldrh	r3, [r3, #0]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d103      	bne.n	800e36c <put_lfn+0xbc>
 800e364:	79fb      	ldrb	r3, [r7, #7]
 800e366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e36a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e36c:	68bb      	ldr	r3, [r7, #8]
 800e36e:	79fa      	ldrb	r2, [r7, #7]
 800e370:	701a      	strb	r2, [r3, #0]
}
 800e372:	bf00      	nop
 800e374:	3720      	adds	r7, #32
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}
 800e37a:	bf00      	nop
 800e37c:	08017008 	.word	0x08017008

0800e380 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b08c      	sub	sp, #48	; 0x30
 800e384:	af00      	add	r7, sp, #0
 800e386:	60f8      	str	r0, [r7, #12]
 800e388:	60b9      	str	r1, [r7, #8]
 800e38a:	607a      	str	r2, [r7, #4]
 800e38c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e38e:	220b      	movs	r2, #11
 800e390:	68b9      	ldr	r1, [r7, #8]
 800e392:	68f8      	ldr	r0, [r7, #12]
 800e394:	f7fe fc8d 	bl	800ccb2 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	2b05      	cmp	r3, #5
 800e39c:	d92b      	bls.n	800e3f6 <gen_numname+0x76>
		sr = seq;
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e3a2:	e022      	b.n	800e3ea <gen_numname+0x6a>
			wc = *lfn++;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	1c9a      	adds	r2, r3, #2
 800e3a8:	607a      	str	r2, [r7, #4]
 800e3aa:	881b      	ldrh	r3, [r3, #0]
 800e3ac:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e3b2:	e017      	b.n	800e3e4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e3b4:	69fb      	ldr	r3, [r7, #28]
 800e3b6:	005a      	lsls	r2, r3, #1
 800e3b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3ba:	f003 0301 	and.w	r3, r3, #1
 800e3be:	4413      	add	r3, r2
 800e3c0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e3c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3c4:	085b      	lsrs	r3, r3, #1
 800e3c6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e3c8:	69fb      	ldr	r3, [r7, #28]
 800e3ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d005      	beq.n	800e3de <gen_numname+0x5e>
 800e3d2:	69fb      	ldr	r3, [r7, #28]
 800e3d4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800e3d8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800e3dc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e0:	3301      	adds	r3, #1
 800e3e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e6:	2b0f      	cmp	r3, #15
 800e3e8:	d9e4      	bls.n	800e3b4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	881b      	ldrh	r3, [r3, #0]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d1d8      	bne.n	800e3a4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e3f2:	69fb      	ldr	r3, [r7, #28]
 800e3f4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e3f6:	2307      	movs	r3, #7
 800e3f8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	b2db      	uxtb	r3, r3
 800e3fe:	f003 030f 	and.w	r3, r3, #15
 800e402:	b2db      	uxtb	r3, r3
 800e404:	3330      	adds	r3, #48	; 0x30
 800e406:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800e40a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e40e:	2b39      	cmp	r3, #57	; 0x39
 800e410:	d904      	bls.n	800e41c <gen_numname+0x9c>
 800e412:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e416:	3307      	adds	r3, #7
 800e418:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800e41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e41e:	1e5a      	subs	r2, r3, #1
 800e420:	62ba      	str	r2, [r7, #40]	; 0x28
 800e422:	3330      	adds	r3, #48	; 0x30
 800e424:	443b      	add	r3, r7
 800e426:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e42a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	091b      	lsrs	r3, r3, #4
 800e432:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d1df      	bne.n	800e3fa <gen_numname+0x7a>
	ns[i] = '~';
 800e43a:	f107 0214 	add.w	r2, r7, #20
 800e43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e440:	4413      	add	r3, r2
 800e442:	227e      	movs	r2, #126	; 0x7e
 800e444:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e446:	2300      	movs	r3, #0
 800e448:	627b      	str	r3, [r7, #36]	; 0x24
 800e44a:	e002      	b.n	800e452 <gen_numname+0xd2>
 800e44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e44e:	3301      	adds	r3, #1
 800e450:	627b      	str	r3, [r7, #36]	; 0x24
 800e452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e456:	429a      	cmp	r2, r3
 800e458:	d205      	bcs.n	800e466 <gen_numname+0xe6>
 800e45a:	68fa      	ldr	r2, [r7, #12]
 800e45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e45e:	4413      	add	r3, r2
 800e460:	781b      	ldrb	r3, [r3, #0]
 800e462:	2b20      	cmp	r3, #32
 800e464:	d1f2      	bne.n	800e44c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e468:	2b07      	cmp	r3, #7
 800e46a:	d807      	bhi.n	800e47c <gen_numname+0xfc>
 800e46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e46e:	1c5a      	adds	r2, r3, #1
 800e470:	62ba      	str	r2, [r7, #40]	; 0x28
 800e472:	3330      	adds	r3, #48	; 0x30
 800e474:	443b      	add	r3, r7
 800e476:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e47a:	e000      	b.n	800e47e <gen_numname+0xfe>
 800e47c:	2120      	movs	r1, #32
 800e47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e480:	1c5a      	adds	r2, r3, #1
 800e482:	627a      	str	r2, [r7, #36]	; 0x24
 800e484:	68fa      	ldr	r2, [r7, #12]
 800e486:	4413      	add	r3, r2
 800e488:	460a      	mov	r2, r1
 800e48a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48e:	2b07      	cmp	r3, #7
 800e490:	d9e9      	bls.n	800e466 <gen_numname+0xe6>
}
 800e492:	bf00      	nop
 800e494:	bf00      	nop
 800e496:	3730      	adds	r7, #48	; 0x30
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}

0800e49c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e49c:	b480      	push	{r7}
 800e49e:	b085      	sub	sp, #20
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e4a8:	230b      	movs	r3, #11
 800e4aa:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e4ac:	7bfb      	ldrb	r3, [r7, #15]
 800e4ae:	b2da      	uxtb	r2, r3
 800e4b0:	0852      	lsrs	r2, r2, #1
 800e4b2:	01db      	lsls	r3, r3, #7
 800e4b4:	4313      	orrs	r3, r2
 800e4b6:	b2da      	uxtb	r2, r3
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	1c59      	adds	r1, r3, #1
 800e4bc:	6079      	str	r1, [r7, #4]
 800e4be:	781b      	ldrb	r3, [r3, #0]
 800e4c0:	4413      	add	r3, r2
 800e4c2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	3b01      	subs	r3, #1
 800e4c8:	60bb      	str	r3, [r7, #8]
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d1ed      	bne.n	800e4ac <sum_sfn+0x10>
	return sum;
 800e4d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3714      	adds	r7, #20
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4dc:	4770      	bx	lr

0800e4de <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800e4de:	b480      	push	{r7}
 800e4e0:	b087      	sub	sp, #28
 800e4e2:	af00      	add	r7, sp, #0
 800e4e4:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	3301      	adds	r3, #1
 800e4ea:	781b      	ldrb	r3, [r3, #0]
 800e4ec:	3301      	adds	r3, #1
 800e4ee:	015b      	lsls	r3, r3, #5
 800e4f0:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	827b      	strh	r3, [r7, #18]
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	617b      	str	r3, [r7, #20]
 800e4fa:	e018      	b.n	800e52e <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	2b02      	cmp	r3, #2
 800e500:	d103      	bne.n	800e50a <xdir_sum+0x2c>
			i++;
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	3301      	adds	r3, #1
 800e506:	617b      	str	r3, [r7, #20]
 800e508:	e00e      	b.n	800e528 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800e50a:	8a7b      	ldrh	r3, [r7, #18]
 800e50c:	03db      	lsls	r3, r3, #15
 800e50e:	b29a      	uxth	r2, r3
 800e510:	8a7b      	ldrh	r3, [r7, #18]
 800e512:	085b      	lsrs	r3, r3, #1
 800e514:	b29b      	uxth	r3, r3
 800e516:	4413      	add	r3, r2
 800e518:	b29a      	uxth	r2, r3
 800e51a:	6879      	ldr	r1, [r7, #4]
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	440b      	add	r3, r1
 800e520:	781b      	ldrb	r3, [r3, #0]
 800e522:	b29b      	uxth	r3, r3
 800e524:	4413      	add	r3, r2
 800e526:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800e528:	697b      	ldr	r3, [r7, #20]
 800e52a:	3301      	adds	r3, #1
 800e52c:	617b      	str	r3, [r7, #20]
 800e52e:	697a      	ldr	r2, [r7, #20]
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	429a      	cmp	r2, r3
 800e534:	d3e2      	bcc.n	800e4fc <xdir_sum+0x1e>
		}
	}
	return sum;
 800e536:	8a7b      	ldrh	r3, [r7, #18]
}
 800e538:	4618      	mov	r0, r3
 800e53a:	371c      	adds	r7, #28
 800e53c:	46bd      	mov	sp, r7
 800e53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e542:	4770      	bx	lr

0800e544 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b084      	sub	sp, #16
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800e54c:	2300      	movs	r3, #0
 800e54e:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800e550:	e01f      	b.n	800e592 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800e552:	89bb      	ldrh	r3, [r7, #12]
 800e554:	4618      	mov	r0, r3
 800e556:	f002 ff7b 	bl	8011450 <ff_wtoupper>
 800e55a:	4603      	mov	r3, r0
 800e55c:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800e55e:	89fb      	ldrh	r3, [r7, #14]
 800e560:	03db      	lsls	r3, r3, #15
 800e562:	b29a      	uxth	r2, r3
 800e564:	89fb      	ldrh	r3, [r7, #14]
 800e566:	085b      	lsrs	r3, r3, #1
 800e568:	b29b      	uxth	r3, r3
 800e56a:	4413      	add	r3, r2
 800e56c:	b29a      	uxth	r2, r3
 800e56e:	89bb      	ldrh	r3, [r7, #12]
 800e570:	b2db      	uxtb	r3, r3
 800e572:	b29b      	uxth	r3, r3
 800e574:	4413      	add	r3, r2
 800e576:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800e578:	89fb      	ldrh	r3, [r7, #14]
 800e57a:	03db      	lsls	r3, r3, #15
 800e57c:	b29a      	uxth	r2, r3
 800e57e:	89fb      	ldrh	r3, [r7, #14]
 800e580:	085b      	lsrs	r3, r3, #1
 800e582:	b29b      	uxth	r3, r3
 800e584:	4413      	add	r3, r2
 800e586:	b29a      	uxth	r2, r3
 800e588:	89bb      	ldrh	r3, [r7, #12]
 800e58a:	0a1b      	lsrs	r3, r3, #8
 800e58c:	b29b      	uxth	r3, r3
 800e58e:	4413      	add	r3, r2
 800e590:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	1c9a      	adds	r2, r3, #2
 800e596:	607a      	str	r2, [r7, #4]
 800e598:	881b      	ldrh	r3, [r3, #0]
 800e59a:	81bb      	strh	r3, [r7, #12]
 800e59c:	89bb      	ldrh	r3, [r7, #12]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d1d7      	bne.n	800e552 <xname_sum+0xe>
	}
	return sum;
 800e5a2:	89fb      	ldrh	r3, [r7, #14]
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3710      	adds	r7, #16
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}

0800e5ac <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800e5ac:	b590      	push	{r4, r7, lr}
 800e5ae:	b087      	sub	sp, #28
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	691b      	ldr	r3, [r3, #16]
 800e5ba:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681a      	ldr	r2, [r3, #0]
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5c4:	4619      	mov	r1, r3
 800e5c6:	4610      	mov	r0, r2
 800e5c8:	f7fe fda2 	bl	800d110 <move_window>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800e5d0:	7bfb      	ldrb	r3, [r7, #15]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d001      	beq.n	800e5da <load_xdir+0x2e>
 800e5d6:	7bfb      	ldrb	r3, [r7, #15]
 800e5d8:	e09f      	b.n	800e71a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5de:	781b      	ldrb	r3, [r3, #0]
 800e5e0:	2b85      	cmp	r3, #133	; 0x85
 800e5e2:	d001      	beq.n	800e5e8 <load_xdir+0x3c>
 800e5e4:	2302      	movs	r3, #2
 800e5e6:	e098      	b.n	800e71a <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5ec:	2220      	movs	r2, #32
 800e5ee:	4619      	mov	r1, r3
 800e5f0:	6938      	ldr	r0, [r7, #16]
 800e5f2:	f7fe fb5e 	bl	800ccb2 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800e5f6:	693b      	ldr	r3, [r7, #16]
 800e5f8:	3301      	adds	r3, #1
 800e5fa:	781b      	ldrb	r3, [r3, #0]
 800e5fc:	3301      	adds	r3, #1
 800e5fe:	015b      	lsls	r3, r3, #5
 800e600:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800e602:	68bb      	ldr	r3, [r7, #8]
 800e604:	2b5f      	cmp	r3, #95	; 0x5f
 800e606:	d903      	bls.n	800e610 <load_xdir+0x64>
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800e60e:	d901      	bls.n	800e614 <load_xdir+0x68>
 800e610:	2302      	movs	r3, #2
 800e612:	e082      	b.n	800e71a <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800e614:	2100      	movs	r1, #0
 800e616:	6878      	ldr	r0, [r7, #4]
 800e618:	f7ff fc05 	bl	800de26 <dir_next>
 800e61c:	4603      	mov	r3, r0
 800e61e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800e620:	7bfb      	ldrb	r3, [r7, #15]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d001      	beq.n	800e62a <load_xdir+0x7e>
 800e626:	7bfb      	ldrb	r3, [r7, #15]
 800e628:	e077      	b.n	800e71a <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681a      	ldr	r2, [r3, #0]
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e632:	4619      	mov	r1, r3
 800e634:	4610      	mov	r0, r2
 800e636:	f7fe fd6b 	bl	800d110 <move_window>
 800e63a:	4603      	mov	r3, r0
 800e63c:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800e63e:	7bfb      	ldrb	r3, [r7, #15]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d001      	beq.n	800e648 <load_xdir+0x9c>
 800e644:	7bfb      	ldrb	r3, [r7, #15]
 800e646:	e068      	b.n	800e71a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	2bc0      	cmp	r3, #192	; 0xc0
 800e650:	d001      	beq.n	800e656 <load_xdir+0xaa>
 800e652:	2302      	movs	r3, #2
 800e654:	e061      	b.n	800e71a <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	f103 0020 	add.w	r0, r3, #32
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e660:	2220      	movs	r2, #32
 800e662:	4619      	mov	r1, r3
 800e664:	f7fe fb25 	bl	800ccb2 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800e668:	693b      	ldr	r3, [r7, #16]
 800e66a:	3323      	adds	r3, #35	; 0x23
 800e66c:	781b      	ldrb	r3, [r3, #0]
 800e66e:	332c      	adds	r3, #44	; 0x2c
 800e670:	4a2c      	ldr	r2, [pc, #176]	; (800e724 <load_xdir+0x178>)
 800e672:	fba2 2303 	umull	r2, r3, r2, r3
 800e676:	08db      	lsrs	r3, r3, #3
 800e678:	015b      	lsls	r3, r3, #5
 800e67a:	68ba      	ldr	r2, [r7, #8]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d201      	bcs.n	800e684 <load_xdir+0xd8>
 800e680:	2302      	movs	r3, #2
 800e682:	e04a      	b.n	800e71a <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800e684:	2340      	movs	r3, #64	; 0x40
 800e686:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800e688:	2100      	movs	r1, #0
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f7ff fbcb 	bl	800de26 <dir_next>
 800e690:	4603      	mov	r3, r0
 800e692:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800e694:	7bfb      	ldrb	r3, [r7, #15]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d001      	beq.n	800e69e <load_xdir+0xf2>
 800e69a:	7bfb      	ldrb	r3, [r7, #15]
 800e69c:	e03d      	b.n	800e71a <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681a      	ldr	r2, [r3, #0]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6a6:	4619      	mov	r1, r3
 800e6a8:	4610      	mov	r0, r2
 800e6aa:	f7fe fd31 	bl	800d110 <move_window>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800e6b2:	7bfb      	ldrb	r3, [r7, #15]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d001      	beq.n	800e6bc <load_xdir+0x110>
 800e6b8:	7bfb      	ldrb	r3, [r7, #15]
 800e6ba:	e02e      	b.n	800e71a <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6c0:	781b      	ldrb	r3, [r3, #0]
 800e6c2:	2bc1      	cmp	r3, #193	; 0xc1
 800e6c4:	d001      	beq.n	800e6ca <load_xdir+0x11e>
 800e6c6:	2302      	movs	r3, #2
 800e6c8:	e027      	b.n	800e71a <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800e6d0:	d208      	bcs.n	800e6e4 <load_xdir+0x138>
 800e6d2:	693a      	ldr	r2, [r7, #16]
 800e6d4:	697b      	ldr	r3, [r7, #20]
 800e6d6:	18d0      	adds	r0, r2, r3
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6dc:	2220      	movs	r2, #32
 800e6de:	4619      	mov	r1, r3
 800e6e0:	f7fe fae7 	bl	800ccb2 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800e6e4:	697b      	ldr	r3, [r7, #20]
 800e6e6:	3320      	adds	r3, #32
 800e6e8:	617b      	str	r3, [r7, #20]
 800e6ea:	697a      	ldr	r2, [r7, #20]
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d3ca      	bcc.n	800e688 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800e6f8:	d80e      	bhi.n	800e718 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800e6fa:	6938      	ldr	r0, [r7, #16]
 800e6fc:	f7ff feef 	bl	800e4de <xdir_sum>
 800e700:	4603      	mov	r3, r0
 800e702:	461c      	mov	r4, r3
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	3302      	adds	r3, #2
 800e708:	4618      	mov	r0, r3
 800e70a:	f7fe f8ed 	bl	800c8e8 <ld_word>
 800e70e:	4603      	mov	r3, r0
 800e710:	429c      	cmp	r4, r3
 800e712:	d001      	beq.n	800e718 <load_xdir+0x16c>
 800e714:	2302      	movs	r3, #2
 800e716:	e000      	b.n	800e71a <load_xdir+0x16e>
	}
	return FR_OK;
 800e718:	2300      	movs	r3, #0
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	371c      	adds	r7, #28
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd90      	pop	{r4, r7, pc}
 800e722:	bf00      	nop
 800e724:	88888889 	.word	0x88888889

0800e728 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800e728:	b5b0      	push	{r4, r5, r7, lr}
 800e72a:	b084      	sub	sp, #16
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800e732:	6839      	ldr	r1, [r7, #0]
 800e734:	6808      	ldr	r0, [r1, #0]
 800e736:	6879      	ldr	r1, [r7, #4]
 800e738:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800e73a:	6839      	ldr	r1, [r7, #0]
 800e73c:	6a08      	ldr	r0, [r1, #32]
 800e73e:	6879      	ldr	r1, [r7, #4]
 800e740:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800e742:	6839      	ldr	r1, [r7, #0]
 800e744:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800e746:	b2c8      	uxtb	r0, r1
 800e748:	6879      	ldr	r1, [r7, #4]
 800e74a:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800e74c:	6839      	ldr	r1, [r7, #0]
 800e74e:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800e750:	2000      	movs	r0, #0
 800e752:	460c      	mov	r4, r1
 800e754:	4605      	mov	r5, r0
 800e756:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800e75a:	2300      	movs	r3, #0
 800e75c:	6879      	ldr	r1, [r7, #4]
 800e75e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e76e:	4619      	mov	r1, r3
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f7ff fad2 	bl	800dd1a <dir_sdi>
 800e776:	4603      	mov	r3, r0
 800e778:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e77a:	7bfb      	ldrb	r3, [r7, #15]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d104      	bne.n	800e78a <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f7ff ff13 	bl	800e5ac <load_xdir>
 800e786:	4603      	mov	r3, r0
 800e788:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800e78a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	3710      	adds	r7, #16
 800e790:	46bd      	mov	sp, r7
 800e792:	bdb0      	pop	{r4, r5, r7, pc}

0800e794 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800e794:	b590      	push	{r4, r7, lr}
 800e796:	b087      	sub	sp, #28
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	691b      	ldr	r3, [r3, #16]
 800e7a2:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	1c9c      	adds	r4, r3, #2
 800e7a8:	68f8      	ldr	r0, [r7, #12]
 800e7aa:	f7ff fe98 	bl	800e4de <xdir_sum>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	4619      	mov	r1, r3
 800e7b2:	4620      	mov	r0, r4
 800e7b4:	f7fe f9ae 	bl	800cb14 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	3301      	adds	r3, #1
 800e7bc:	781b      	ldrb	r3, [r3, #0]
 800e7be:	3301      	adds	r3, #1
 800e7c0:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7c6:	4619      	mov	r1, r3
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f7ff faa6 	bl	800dd1a <dir_sdi>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800e7d2:	e026      	b.n	800e822 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681a      	ldr	r2, [r3, #0]
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7dc:	4619      	mov	r1, r3
 800e7de:	4610      	mov	r0, r2
 800e7e0:	f7fe fc96 	bl	800d110 <move_window>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e7e8:	7dfb      	ldrb	r3, [r7, #23]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d11d      	bne.n	800e82a <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7f2:	2220      	movs	r2, #32
 800e7f4:	68f9      	ldr	r1, [r7, #12]
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f7fe fa5b 	bl	800ccb2 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	2201      	movs	r2, #1
 800e802:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800e804:	693b      	ldr	r3, [r7, #16]
 800e806:	3b01      	subs	r3, #1
 800e808:	613b      	str	r3, [r7, #16]
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d00e      	beq.n	800e82e <store_xdir+0x9a>
		dirb += SZDIRE;
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	3320      	adds	r3, #32
 800e814:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800e816:	2100      	movs	r1, #0
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f7ff fb04 	bl	800de26 <dir_next>
 800e81e:	4603      	mov	r3, r0
 800e820:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800e822:	7dfb      	ldrb	r3, [r7, #23]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d0d5      	beq.n	800e7d4 <store_xdir+0x40>
 800e828:	e002      	b.n	800e830 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800e82a:	bf00      	nop
 800e82c:	e000      	b.n	800e830 <store_xdir+0x9c>
		if (--nent == 0) break;
 800e82e:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800e830:	7dfb      	ldrb	r3, [r7, #23]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d002      	beq.n	800e83c <store_xdir+0xa8>
 800e836:	7dfb      	ldrb	r3, [r7, #23]
 800e838:	2b01      	cmp	r3, #1
 800e83a:	d101      	bne.n	800e840 <store_xdir+0xac>
 800e83c:	7dfb      	ldrb	r3, [r7, #23]
 800e83e:	e000      	b.n	800e842 <store_xdir+0xae>
 800e840:	2302      	movs	r3, #2
}
 800e842:	4618      	mov	r0, r3
 800e844:	371c      	adds	r7, #28
 800e846:	46bd      	mov	sp, r7
 800e848:	bd90      	pop	{r4, r7, pc}

0800e84a <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800e84a:	b590      	push	{r4, r7, lr}
 800e84c:	b085      	sub	sp, #20
 800e84e:	af00      	add	r7, sp, #0
 800e850:	6078      	str	r0, [r7, #4]
 800e852:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800e854:	2240      	movs	r2, #64	; 0x40
 800e856:	2100      	movs	r1, #0
 800e858:	6878      	ldr	r0, [r7, #4]
 800e85a:	f7fe fa4b 	bl	800ccf4 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2285      	movs	r2, #133	; 0x85
 800e862:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	3320      	adds	r3, #32
 800e868:	22c0      	movs	r2, #192	; 0xc0
 800e86a:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800e86c:	2300      	movs	r3, #0
 800e86e:	72bb      	strb	r3, [r7, #10]
 800e870:	2301      	movs	r3, #1
 800e872:	72fb      	strb	r3, [r7, #11]
 800e874:	2301      	movs	r3, #1
 800e876:	813b      	strh	r3, [r7, #8]
 800e878:	2340      	movs	r3, #64	; 0x40
 800e87a:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	1c5a      	adds	r2, r3, #1
 800e880:	60fa      	str	r2, [r7, #12]
 800e882:	687a      	ldr	r2, [r7, #4]
 800e884:	4413      	add	r3, r2
 800e886:	22c1      	movs	r2, #193	; 0xc1
 800e888:	701a      	strb	r2, [r3, #0]
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	1c5a      	adds	r2, r3, #1
 800e88e:	60fa      	str	r2, [r7, #12]
 800e890:	687a      	ldr	r2, [r7, #4]
 800e892:	4413      	add	r3, r2
 800e894:	2200      	movs	r2, #0
 800e896:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800e898:	893b      	ldrh	r3, [r7, #8]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d00b      	beq.n	800e8b6 <create_xdir+0x6c>
 800e89e:	7abb      	ldrb	r3, [r7, #10]
 800e8a0:	005b      	lsls	r3, r3, #1
 800e8a2:	683a      	ldr	r2, [r7, #0]
 800e8a4:	4413      	add	r3, r2
 800e8a6:	881b      	ldrh	r3, [r3, #0]
 800e8a8:	813b      	strh	r3, [r7, #8]
 800e8aa:	893b      	ldrh	r3, [r7, #8]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d002      	beq.n	800e8b6 <create_xdir+0x6c>
 800e8b0:	7abb      	ldrb	r3, [r7, #10]
 800e8b2:	3301      	adds	r3, #1
 800e8b4:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800e8b6:	687a      	ldr	r2, [r7, #4]
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	4413      	add	r3, r2
 800e8bc:	893a      	ldrh	r2, [r7, #8]
 800e8be:	4611      	mov	r1, r2
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7fe f927 	bl	800cb14 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	3302      	adds	r3, #2
 800e8ca:	60fb      	str	r3, [r7, #12]
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	f003 031f 	and.w	r3, r3, #31
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d1e0      	bne.n	800e898 <create_xdir+0x4e>
		nb++;
 800e8d6:	7afb      	ldrb	r3, [r7, #11]
 800e8d8:	3301      	adds	r3, #1
 800e8da:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800e8dc:	7abb      	ldrb	r3, [r7, #10]
 800e8de:	005b      	lsls	r3, r3, #1
 800e8e0:	683a      	ldr	r2, [r7, #0]
 800e8e2:	4413      	add	r3, r2
 800e8e4:	881b      	ldrh	r3, [r3, #0]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d1c8      	bne.n	800e87c <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	3323      	adds	r3, #35	; 0x23
 800e8ee:	7aba      	ldrb	r2, [r7, #10]
 800e8f0:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	3301      	adds	r3, #1
 800e8f6:	7afa      	ldrb	r2, [r7, #11]
 800e8f8:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800e900:	6838      	ldr	r0, [r7, #0]
 800e902:	f7ff fe1f 	bl	800e544 <xname_sum>
 800e906:	4603      	mov	r3, r0
 800e908:	4619      	mov	r1, r3
 800e90a:	4620      	mov	r0, r4
 800e90c:	f7fe f902 	bl	800cb14 <st_word>
}
 800e910:	bf00      	nop
 800e912:	3714      	adds	r7, #20
 800e914:	46bd      	mov	sp, r7
 800e916:	bd90      	pop	{r4, r7, pc}

0800e918 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b086      	sub	sp, #24
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
 800e920:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e922:	2304      	movs	r3, #4
 800e924:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800e92c:	23ff      	movs	r3, #255	; 0xff
 800e92e:	757b      	strb	r3, [r7, #21]
 800e930:	23ff      	movs	r3, #255	; 0xff
 800e932:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800e934:	e09f      	b.n	800ea76 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e93a:	4619      	mov	r1, r3
 800e93c:	6938      	ldr	r0, [r7, #16]
 800e93e:	f7fe fbe7 	bl	800d110 <move_window>
 800e942:	4603      	mov	r3, r0
 800e944:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e946:	7dfb      	ldrb	r3, [r7, #23]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	f040 809a 	bne.w	800ea82 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e952:	781b      	ldrb	r3, [r3, #0]
 800e954:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800e956:	7dbb      	ldrb	r3, [r7, #22]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d102      	bne.n	800e962 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e95c:	2304      	movs	r3, #4
 800e95e:	75fb      	strb	r3, [r7, #23]
 800e960:	e096      	b.n	800ea90 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e962:	693b      	ldr	r3, [r7, #16]
 800e964:	781b      	ldrb	r3, [r3, #0]
 800e966:	2b04      	cmp	r3, #4
 800e968:	d118      	bne.n	800e99c <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800e96a:	7dbb      	ldrb	r3, [r7, #22]
 800e96c:	2b85      	cmp	r3, #133	; 0x85
 800e96e:	d179      	bne.n	800ea64 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f7ff fe17 	bl	800e5ac <load_xdir>
 800e97e:	4603      	mov	r3, r0
 800e980:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800e982:	7dfb      	ldrb	r3, [r7, #23]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d17e      	bne.n	800ea86 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800e988:	693b      	ldr	r3, [r7, #16]
 800e98a:	691b      	ldr	r3, [r3, #16]
 800e98c:	3304      	adds	r3, #4
 800e98e:	781b      	ldrb	r3, [r3, #0]
 800e990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e994:	b2da      	uxtb	r2, r3
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	719a      	strb	r2, [r3, #6]
					}
					break;
 800e99a:	e074      	b.n	800ea86 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9a0:	330b      	adds	r3, #11
 800e9a2:	781b      	ldrb	r3, [r3, #0]
 800e9a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e9a8:	73fb      	strb	r3, [r7, #15]
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	7bfa      	ldrb	r2, [r7, #15]
 800e9ae:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800e9b0:	7dbb      	ldrb	r3, [r7, #22]
 800e9b2:	2be5      	cmp	r3, #229	; 0xe5
 800e9b4:	d00e      	beq.n	800e9d4 <dir_read+0xbc>
 800e9b6:	7dbb      	ldrb	r3, [r7, #22]
 800e9b8:	2b2e      	cmp	r3, #46	; 0x2e
 800e9ba:	d00b      	beq.n	800e9d4 <dir_read+0xbc>
 800e9bc:	7bfb      	ldrb	r3, [r7, #15]
 800e9be:	f023 0320 	bic.w	r3, r3, #32
 800e9c2:	2b08      	cmp	r3, #8
 800e9c4:	bf0c      	ite	eq
 800e9c6:	2301      	moveq	r3, #1
 800e9c8:	2300      	movne	r3, #0
 800e9ca:	b2db      	uxtb	r3, r3
 800e9cc:	461a      	mov	r2, r3
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	4293      	cmp	r3, r2
 800e9d2:	d002      	beq.n	800e9da <dir_read+0xc2>
				ord = 0xFF;
 800e9d4:	23ff      	movs	r3, #255	; 0xff
 800e9d6:	757b      	strb	r3, [r7, #21]
 800e9d8:	e044      	b.n	800ea64 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800e9da:	7bfb      	ldrb	r3, [r7, #15]
 800e9dc:	2b0f      	cmp	r3, #15
 800e9de:	d12f      	bne.n	800ea40 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800e9e0:	7dbb      	ldrb	r3, [r7, #22]
 800e9e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d00d      	beq.n	800ea06 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9ee:	7b5b      	ldrb	r3, [r3, #13]
 800e9f0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800e9f2:	7dbb      	ldrb	r3, [r7, #22]
 800e9f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e9f8:	75bb      	strb	r3, [r7, #22]
 800e9fa:	7dbb      	ldrb	r3, [r7, #22]
 800e9fc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ea06:	7dba      	ldrb	r2, [r7, #22]
 800ea08:	7d7b      	ldrb	r3, [r7, #21]
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	d115      	bne.n	800ea3a <dir_read+0x122>
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea12:	330d      	adds	r3, #13
 800ea14:	781b      	ldrb	r3, [r3, #0]
 800ea16:	7d3a      	ldrb	r2, [r7, #20]
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	d10e      	bne.n	800ea3a <dir_read+0x122>
 800ea1c:	693b      	ldr	r3, [r7, #16]
 800ea1e:	68da      	ldr	r2, [r3, #12]
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea24:	4619      	mov	r1, r3
 800ea26:	4610      	mov	r0, r2
 800ea28:	f7ff fbde 	bl	800e1e8 <pick_lfn>
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d003      	beq.n	800ea3a <dir_read+0x122>
 800ea32:	7d7b      	ldrb	r3, [r7, #21]
 800ea34:	3b01      	subs	r3, #1
 800ea36:	b2db      	uxtb	r3, r3
 800ea38:	e000      	b.n	800ea3c <dir_read+0x124>
 800ea3a:	23ff      	movs	r3, #255	; 0xff
 800ea3c:	757b      	strb	r3, [r7, #21]
 800ea3e:	e011      	b.n	800ea64 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800ea40:	7d7b      	ldrb	r3, [r7, #21]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d109      	bne.n	800ea5a <dir_read+0x142>
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7ff fd26 	bl	800e49c <sum_sfn>
 800ea50:	4603      	mov	r3, r0
 800ea52:	461a      	mov	r2, r3
 800ea54:	7d3b      	ldrb	r3, [r7, #20]
 800ea56:	4293      	cmp	r3, r2
 800ea58:	d017      	beq.n	800ea8a <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ea60:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800ea62:	e012      	b.n	800ea8a <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800ea64:	2100      	movs	r1, #0
 800ea66:	6878      	ldr	r0, [r7, #4]
 800ea68:	f7ff f9dd 	bl	800de26 <dir_next>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ea70:	7dfb      	ldrb	r3, [r7, #23]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d10b      	bne.n	800ea8e <dir_read+0x176>
	while (dp->sect) {
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	f47f af5b 	bne.w	800e936 <dir_read+0x1e>
 800ea80:	e006      	b.n	800ea90 <dir_read+0x178>
		if (res != FR_OK) break;
 800ea82:	bf00      	nop
 800ea84:	e004      	b.n	800ea90 <dir_read+0x178>
					break;
 800ea86:	bf00      	nop
 800ea88:	e002      	b.n	800ea90 <dir_read+0x178>
					break;
 800ea8a:	bf00      	nop
 800ea8c:	e000      	b.n	800ea90 <dir_read+0x178>
		if (res != FR_OK) break;
 800ea8e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ea90:	7dfb      	ldrb	r3, [r7, #23]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d002      	beq.n	800ea9c <dir_read+0x184>
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2200      	movs	r2, #0
 800ea9a:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800ea9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	3718      	adds	r7, #24
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}

0800eaa6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800eaa6:	b590      	push	{r4, r7, lr}
 800eaa8:	b089      	sub	sp, #36	; 0x24
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800eab4:	2100      	movs	r1, #0
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f7ff f92f 	bl	800dd1a <dir_sdi>
 800eabc:	4603      	mov	r3, r0
 800eabe:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800eac0:	7ffb      	ldrb	r3, [r7, #31]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d001      	beq.n	800eaca <dir_find+0x24>
 800eac6:	7ffb      	ldrb	r3, [r7, #31]
 800eac8:	e112      	b.n	800ecf0 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	781b      	ldrb	r3, [r3, #0]
 800eace:	2b04      	cmp	r3, #4
 800ead0:	d164      	bne.n	800eb9c <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	68db      	ldr	r3, [r3, #12]
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7ff fd34 	bl	800e544 <xname_sum>
 800eadc:	4603      	mov	r3, r0
 800eade:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800eae0:	e04f      	b.n	800eb82 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	691b      	ldr	r3, [r3, #16]
 800eae6:	3324      	adds	r3, #36	; 0x24
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7fd fefd 	bl	800c8e8 <ld_word>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	893b      	ldrh	r3, [r7, #8]
 800eaf4:	4293      	cmp	r3, r2
 800eaf6:	d000      	beq.n	800eafa <dir_find+0x54>
 800eaf8:	e043      	b.n	800eb82 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	691b      	ldr	r3, [r3, #16]
 800eafe:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800eb02:	76fb      	strb	r3, [r7, #27]
 800eb04:	2340      	movs	r3, #64	; 0x40
 800eb06:	617b      	str	r3, [r7, #20]
 800eb08:	2300      	movs	r3, #0
 800eb0a:	613b      	str	r3, [r7, #16]
 800eb0c:	e029      	b.n	800eb62 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	f003 031f 	and.w	r3, r3, #31
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d102      	bne.n	800eb1e <dir_find+0x78>
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	3302      	adds	r3, #2
 800eb1c:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	691a      	ldr	r2, [r3, #16]
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	4413      	add	r3, r2
 800eb26:	4618      	mov	r0, r3
 800eb28:	f7fd fede 	bl	800c8e8 <ld_word>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f002 fc8e 	bl	8011450 <ff_wtoupper>
 800eb34:	4603      	mov	r3, r0
 800eb36:	461c      	mov	r4, r3
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	68da      	ldr	r2, [r3, #12]
 800eb3c:	693b      	ldr	r3, [r7, #16]
 800eb3e:	005b      	lsls	r3, r3, #1
 800eb40:	4413      	add	r3, r2
 800eb42:	881b      	ldrh	r3, [r3, #0]
 800eb44:	4618      	mov	r0, r3
 800eb46:	f002 fc83 	bl	8011450 <ff_wtoupper>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	429c      	cmp	r4, r3
 800eb4e:	d10c      	bne.n	800eb6a <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800eb50:	7efb      	ldrb	r3, [r7, #27]
 800eb52:	3b01      	subs	r3, #1
 800eb54:	76fb      	strb	r3, [r7, #27]
 800eb56:	697b      	ldr	r3, [r7, #20]
 800eb58:	3302      	adds	r3, #2
 800eb5a:	617b      	str	r3, [r7, #20]
 800eb5c:	693b      	ldr	r3, [r7, #16]
 800eb5e:	3301      	adds	r3, #1
 800eb60:	613b      	str	r3, [r7, #16]
 800eb62:	7efb      	ldrb	r3, [r7, #27]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d1d2      	bne.n	800eb0e <dir_find+0x68>
 800eb68:	e000      	b.n	800eb6c <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800eb6a:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800eb6c:	7efb      	ldrb	r3, [r7, #27]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d107      	bne.n	800eb82 <dir_find+0xdc>
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	68da      	ldr	r2, [r3, #12]
 800eb76:	693b      	ldr	r3, [r7, #16]
 800eb78:	005b      	lsls	r3, r3, #1
 800eb7a:	4413      	add	r3, r2
 800eb7c:	881b      	ldrh	r3, [r3, #0]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d009      	beq.n	800eb96 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800eb82:	2100      	movs	r1, #0
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f7ff fec7 	bl	800e918 <dir_read>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	77fb      	strb	r3, [r7, #31]
 800eb8e:	7ffb      	ldrb	r3, [r7, #31]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d0a6      	beq.n	800eae2 <dir_find+0x3c>
 800eb94:	e000      	b.n	800eb98 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800eb96:	bf00      	nop
		}
		return res;
 800eb98:	7ffb      	ldrb	r3, [r7, #31]
 800eb9a:	e0a9      	b.n	800ecf0 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800eb9c:	23ff      	movs	r3, #255	; 0xff
 800eb9e:	773b      	strb	r3, [r7, #28]
 800eba0:	7f3b      	ldrb	r3, [r7, #28]
 800eba2:	777b      	strb	r3, [r7, #29]
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f04f 32ff 	mov.w	r2, #4294967295
 800ebaa:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebb0:	4619      	mov	r1, r3
 800ebb2:	68f8      	ldr	r0, [r7, #12]
 800ebb4:	f7fe faac 	bl	800d110 <move_window>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800ebbc:	7ffb      	ldrb	r3, [r7, #31]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	f040 8090 	bne.w	800ece4 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebc8:	781b      	ldrb	r3, [r3, #0]
 800ebca:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ebcc:	7fbb      	ldrb	r3, [r7, #30]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d102      	bne.n	800ebd8 <dir_find+0x132>
 800ebd2:	2304      	movs	r3, #4
 800ebd4:	77fb      	strb	r3, [r7, #31]
 800ebd6:	e08a      	b.n	800ecee <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebdc:	330b      	adds	r3, #11
 800ebde:	781b      	ldrb	r3, [r3, #0]
 800ebe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ebe4:	72fb      	strb	r3, [r7, #11]
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	7afa      	ldrb	r2, [r7, #11]
 800ebea:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ebec:	7fbb      	ldrb	r3, [r7, #30]
 800ebee:	2be5      	cmp	r3, #229	; 0xe5
 800ebf0:	d007      	beq.n	800ec02 <dir_find+0x15c>
 800ebf2:	7afb      	ldrb	r3, [r7, #11]
 800ebf4:	f003 0308 	and.w	r3, r3, #8
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d009      	beq.n	800ec10 <dir_find+0x16a>
 800ebfc:	7afb      	ldrb	r3, [r7, #11]
 800ebfe:	2b0f      	cmp	r3, #15
 800ec00:	d006      	beq.n	800ec10 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ec02:	23ff      	movs	r3, #255	; 0xff
 800ec04:	777b      	strb	r3, [r7, #29]
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	f04f 32ff 	mov.w	r2, #4294967295
 800ec0c:	64da      	str	r2, [r3, #76]	; 0x4c
 800ec0e:	e05e      	b.n	800ecce <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ec10:	7afb      	ldrb	r3, [r7, #11]
 800ec12:	2b0f      	cmp	r3, #15
 800ec14:	d136      	bne.n	800ec84 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800ec1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d154      	bne.n	800ecce <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ec24:	7fbb      	ldrb	r3, [r7, #30]
 800ec26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d00d      	beq.n	800ec4a <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec32:	7b5b      	ldrb	r3, [r3, #13]
 800ec34:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ec36:	7fbb      	ldrb	r3, [r7, #30]
 800ec38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec3c:	77bb      	strb	r3, [r7, #30]
 800ec3e:	7fbb      	ldrb	r3, [r7, #30]
 800ec40:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ec4a:	7fba      	ldrb	r2, [r7, #30]
 800ec4c:	7f7b      	ldrb	r3, [r7, #29]
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	d115      	bne.n	800ec7e <dir_find+0x1d8>
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec56:	330d      	adds	r3, #13
 800ec58:	781b      	ldrb	r3, [r3, #0]
 800ec5a:	7f3a      	ldrb	r2, [r7, #28]
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d10e      	bne.n	800ec7e <dir_find+0x1d8>
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	68da      	ldr	r2, [r3, #12]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec68:	4619      	mov	r1, r3
 800ec6a:	4610      	mov	r0, r2
 800ec6c:	f7ff fa4c 	bl	800e108 <cmp_lfn>
 800ec70:	4603      	mov	r3, r0
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d003      	beq.n	800ec7e <dir_find+0x1d8>
 800ec76:	7f7b      	ldrb	r3, [r7, #29]
 800ec78:	3b01      	subs	r3, #1
 800ec7a:	b2db      	uxtb	r3, r3
 800ec7c:	e000      	b.n	800ec80 <dir_find+0x1da>
 800ec7e:	23ff      	movs	r3, #255	; 0xff
 800ec80:	777b      	strb	r3, [r7, #29]
 800ec82:	e024      	b.n	800ecce <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ec84:	7f7b      	ldrb	r3, [r7, #29]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d109      	bne.n	800ec9e <dir_find+0x1f8>
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f7ff fc04 	bl	800e49c <sum_sfn>
 800ec94:	4603      	mov	r3, r0
 800ec96:	461a      	mov	r2, r3
 800ec98:	7f3b      	ldrb	r3, [r7, #28]
 800ec9a:	4293      	cmp	r3, r2
 800ec9c:	d024      	beq.n	800ece8 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800eca4:	f003 0301 	and.w	r3, r3, #1
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d10a      	bne.n	800ecc2 <dir_find+0x21c>
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	3340      	adds	r3, #64	; 0x40
 800ecb4:	220b      	movs	r2, #11
 800ecb6:	4619      	mov	r1, r3
 800ecb8:	f7fe f837 	bl	800cd2a <mem_cmp>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d014      	beq.n	800ecec <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ecc2:	23ff      	movs	r3, #255	; 0xff
 800ecc4:	777b      	strb	r3, [r7, #29]
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f04f 32ff 	mov.w	r2, #4294967295
 800eccc:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ecce:	2100      	movs	r1, #0
 800ecd0:	6878      	ldr	r0, [r7, #4]
 800ecd2:	f7ff f8a8 	bl	800de26 <dir_next>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800ecda:	7ffb      	ldrb	r3, [r7, #31]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	f43f af65 	beq.w	800ebac <dir_find+0x106>
 800ece2:	e004      	b.n	800ecee <dir_find+0x248>
		if (res != FR_OK) break;
 800ece4:	bf00      	nop
 800ece6:	e002      	b.n	800ecee <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ece8:	bf00      	nop
 800ecea:	e000      	b.n	800ecee <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ecec:	bf00      	nop

	return res;
 800ecee:	7ffb      	ldrb	r3, [r7, #31]
}
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	3724      	adds	r7, #36	; 0x24
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd90      	pop	{r4, r7, pc}

0800ecf8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ecf8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ecfc:	b0a0      	sub	sp, #128	; 0x80
 800ecfe:	af00      	add	r7, sp, #0
 800ed00:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800ed0e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d001      	beq.n	800ed1a <dir_register+0x22>
 800ed16:	2306      	movs	r3, #6
 800ed18:	e18e      	b.n	800f038 <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	677b      	str	r3, [r7, #116]	; 0x74
 800ed1e:	e002      	b.n	800ed26 <dir_register+0x2e>
 800ed20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ed22:	3301      	adds	r3, #1
 800ed24:	677b      	str	r3, [r7, #116]	; 0x74
 800ed26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed28:	68da      	ldr	r2, [r3, #12]
 800ed2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ed2c:	005b      	lsls	r3, r3, #1
 800ed2e:	4413      	add	r3, r2
 800ed30:	881b      	ldrh	r3, [r3, #0]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d1f4      	bne.n	800ed20 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ed36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed38:	781b      	ldrb	r3, [r3, #0]
 800ed3a:	2b04      	cmp	r3, #4
 800ed3c:	f040 809f 	bne.w	800ee7e <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800ed40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ed42:	330e      	adds	r3, #14
 800ed44:	4aa2      	ldr	r2, [pc, #648]	; (800efd0 <dir_register+0x2d8>)
 800ed46:	fba2 2303 	umull	r2, r3, r2, r3
 800ed4a:	08db      	lsrs	r3, r3, #3
 800ed4c:	3302      	adds	r3, #2
 800ed4e:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800ed50:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ed52:	6878      	ldr	r0, [r7, #4]
 800ed54:	f7ff f93c 	bl	800dfd0 <dir_alloc>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800ed5e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d002      	beq.n	800ed6c <dir_register+0x74>
 800ed66:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ed6a:	e165      	b.n	800f038 <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ed72:	3b01      	subs	r3, #1
 800ed74:	015b      	lsls	r3, r3, #5
 800ed76:	1ad2      	subs	r2, r2, r3
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	689b      	ldr	r3, [r3, #8]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d072      	beq.n	800ee6a <dir_register+0x172>
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	79db      	ldrb	r3, [r3, #7]
 800ed88:	f003 0304 	and.w	r3, r3, #4
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d06c      	beq.n	800ee6a <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ed96:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ed98:	8949      	ldrh	r1, [r1, #10]
 800ed9a:	0249      	lsls	r1, r1, #9
 800ed9c:	2000      	movs	r0, #0
 800ed9e:	460c      	mov	r4, r1
 800eda0:	4605      	mov	r5, r0
 800eda2:	eb12 0804 	adds.w	r8, r2, r4
 800eda6:	eb43 0905 	adc.w	r9, r3, r5
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	4618      	mov	r0, r3
 800edb4:	f7fe fd58 	bl	800d868 <fill_first_frag>
 800edb8:	4603      	mov	r3, r0
 800edba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800edbe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d002      	beq.n	800edcc <dir_register+0xd4>
 800edc6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800edca:	e135      	b.n	800f038 <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edd2:	f04f 32ff 	mov.w	r2, #4294967295
 800edd6:	4619      	mov	r1, r3
 800edd8:	f7fe fd75 	bl	800d8c6 <fill_last_frag>
 800eddc:	4603      	mov	r3, r0
 800edde:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800ede2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d002      	beq.n	800edf0 <dir_register+0xf8>
 800edea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800edee:	e123      	b.n	800f038 <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800edf0:	687a      	ldr	r2, [r7, #4]
 800edf2:	f107 0308 	add.w	r3, r7, #8
 800edf6:	4611      	mov	r1, r2
 800edf8:	4618      	mov	r0, r3
 800edfa:	f7ff fc95 	bl	800e728 <load_obj_dir>
 800edfe:	4603      	mov	r3, r0
 800ee00:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800ee04:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d002      	beq.n	800ee12 <dir_register+0x11a>
 800ee0c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ee10:	e112      	b.n	800f038 <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800ee12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee14:	691b      	ldr	r3, [r3, #16]
 800ee16:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ee20:	4608      	mov	r0, r1
 800ee22:	f7fd febe 	bl	800cba2 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800ee26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee28:	691b      	ldr	r3, [r3, #16]
 800ee2a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ee34:	4608      	mov	r0, r1
 800ee36:	f7fd feb4 	bl	800cba2 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	79da      	ldrb	r2, [r3, #7]
 800ee3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee40:	691b      	ldr	r3, [r3, #16]
 800ee42:	3321      	adds	r3, #33	; 0x21
 800ee44:	f042 0201 	orr.w	r2, r2, #1
 800ee48:	b2d2      	uxtb	r2, r2
 800ee4a:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800ee4c:	f107 0308 	add.w	r3, r7, #8
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7ff fc9f 	bl	800e794 <store_xdir>
 800ee56:	4603      	mov	r3, r0
 800ee58:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800ee5c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d002      	beq.n	800ee6a <dir_register+0x172>
 800ee64:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ee68:	e0e6      	b.n	800f038 <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800ee6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee6c:	691a      	ldr	r2, [r3, #16]
 800ee6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee70:	68db      	ldr	r3, [r3, #12]
 800ee72:	4619      	mov	r1, r3
 800ee74:	4610      	mov	r0, r2
 800ee76:	f7ff fce8 	bl	800e84a <create_xdir>
		return FR_OK;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	e0dc      	b.n	800f038 <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800ee84:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ee88:	220c      	movs	r2, #12
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f7fd ff11 	bl	800ccb2 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ee90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ee94:	f003 0301 	and.w	r3, r3, #1
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d033      	beq.n	800ef04 <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2240      	movs	r2, #64	; 0x40
 800eea0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800eea4:	2301      	movs	r3, #1
 800eea6:	67bb      	str	r3, [r7, #120]	; 0x78
 800eea8:	e016      	b.n	800eed8 <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800eeb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eeb2:	68da      	ldr	r2, [r3, #12]
 800eeb4:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800eeb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eeba:	f7ff fa61 	bl	800e380 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f7ff fdf1 	bl	800eaa6 <dir_find>
 800eec4:	4603      	mov	r3, r0
 800eec6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800eeca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d106      	bne.n	800eee0 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 800eed2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eed4:	3301      	adds	r3, #1
 800eed6:	67bb      	str	r3, [r7, #120]	; 0x78
 800eed8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eeda:	2b63      	cmp	r3, #99	; 0x63
 800eedc:	d9e5      	bls.n	800eeaa <dir_register+0x1b2>
 800eede:	e000      	b.n	800eee2 <dir_register+0x1ea>
			if (res != FR_OK) break;
 800eee0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800eee2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eee4:	2b64      	cmp	r3, #100	; 0x64
 800eee6:	d101      	bne.n	800eeec <dir_register+0x1f4>
 800eee8:	2307      	movs	r3, #7
 800eeea:	e0a5      	b.n	800f038 <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800eeec:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eef0:	2b04      	cmp	r3, #4
 800eef2:	d002      	beq.n	800eefa <dir_register+0x202>
 800eef4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eef8:	e09e      	b.n	800f038 <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800eefa:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ef04:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ef08:	f003 0302 	and.w	r3, r3, #2
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d007      	beq.n	800ef20 <dir_register+0x228>
 800ef10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef12:	330c      	adds	r3, #12
 800ef14:	4a2f      	ldr	r2, [pc, #188]	; (800efd4 <dir_register+0x2dc>)
 800ef16:	fba2 2303 	umull	r2, r3, r2, r3
 800ef1a:	089b      	lsrs	r3, r3, #2
 800ef1c:	3301      	adds	r3, #1
 800ef1e:	e000      	b.n	800ef22 <dir_register+0x22a>
 800ef20:	2301      	movs	r3, #1
 800ef22:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ef24:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f7ff f852 	bl	800dfd0 <dir_alloc>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ef32:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d14f      	bne.n	800efda <dir_register+0x2e2>
 800ef3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ef3c:	3b01      	subs	r3, #1
 800ef3e:	673b      	str	r3, [r7, #112]	; 0x70
 800ef40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d049      	beq.n	800efda <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ef4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ef4c:	015b      	lsls	r3, r3, #5
 800ef4e:	1ad3      	subs	r3, r2, r3
 800ef50:	4619      	mov	r1, r3
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f7fe fee1 	bl	800dd1a <dir_sdi>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800ef5e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d139      	bne.n	800efda <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	3340      	adds	r3, #64	; 0x40
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f7ff fa96 	bl	800e49c <sum_sfn>
 800ef70:	4603      	mov	r3, r0
 800ef72:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef7a:	4619      	mov	r1, r3
 800ef7c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ef7e:	f7fe f8c7 	bl	800d110 <move_window>
 800ef82:	4603      	mov	r3, r0
 800ef84:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800ef88:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d123      	bne.n	800efd8 <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ef90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef92:	68d8      	ldr	r0, [r3, #12]
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800ef98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ef9a:	b2da      	uxtb	r2, r3
 800ef9c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800efa0:	f7ff f986 	bl	800e2b0 <put_lfn>
				fs->wflag = 1;
 800efa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800efa6:	2201      	movs	r2, #1
 800efa8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800efaa:	2100      	movs	r1, #0
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f7fe ff3a 	bl	800de26 <dir_next>
 800efb2:	4603      	mov	r3, r0
 800efb4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800efb8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d10c      	bne.n	800efda <dir_register+0x2e2>
 800efc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800efc2:	3b01      	subs	r3, #1
 800efc4:	673b      	str	r3, [r7, #112]	; 0x70
 800efc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d1d4      	bne.n	800ef76 <dir_register+0x27e>
 800efcc:	e005      	b.n	800efda <dir_register+0x2e2>
 800efce:	bf00      	nop
 800efd0:	88888889 	.word	0x88888889
 800efd4:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800efd8:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800efda:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d128      	bne.n	800f034 <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efe6:	4619      	mov	r1, r3
 800efe8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800efea:	f7fe f891 	bl	800d110 <move_window>
 800efee:	4603      	mov	r3, r0
 800eff0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800eff4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d11b      	bne.n	800f034 <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f000:	2220      	movs	r2, #32
 800f002:	2100      	movs	r1, #0
 800f004:	4618      	mov	r0, r3
 800f006:	f7fd fe75 	bl	800ccf4 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	3340      	adds	r3, #64	; 0x40
 800f012:	220b      	movs	r2, #11
 800f014:	4619      	mov	r1, r3
 800f016:	f7fd fe4c 	bl	800ccb2 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f024:	330c      	adds	r3, #12
 800f026:	f002 0218 	and.w	r2, r2, #24
 800f02a:	b2d2      	uxtb	r2, r2
 800f02c:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800f02e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f030:	2201      	movs	r2, #1
 800f032:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f034:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800f038:	4618      	mov	r0, r3
 800f03a:	3780      	adds	r7, #128	; 0x80
 800f03c:	46bd      	mov	sp, r7
 800f03e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800f042:	bf00      	nop

0800f044 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b08a      	sub	sp, #40	; 0x28
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
 800f04c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	613b      	str	r3, [r7, #16]
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	68db      	ldr	r3, [r3, #12]
 800f05a:	60fb      	str	r3, [r7, #12]
 800f05c:	2300      	movs	r3, #0
 800f05e:	617b      	str	r3, [r7, #20]
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f064:	69bb      	ldr	r3, [r7, #24]
 800f066:	1c5a      	adds	r2, r3, #1
 800f068:	61ba      	str	r2, [r7, #24]
 800f06a:	693a      	ldr	r2, [r7, #16]
 800f06c:	4413      	add	r3, r2
 800f06e:	781b      	ldrb	r3, [r3, #0]
 800f070:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800f072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f074:	2b1f      	cmp	r3, #31
 800f076:	d940      	bls.n	800f0fa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800f078:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f07a:	2b2f      	cmp	r3, #47	; 0x2f
 800f07c:	d006      	beq.n	800f08c <create_name+0x48>
 800f07e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f080:	2b5c      	cmp	r3, #92	; 0x5c
 800f082:	d110      	bne.n	800f0a6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f084:	e002      	b.n	800f08c <create_name+0x48>
 800f086:	69bb      	ldr	r3, [r7, #24]
 800f088:	3301      	adds	r3, #1
 800f08a:	61bb      	str	r3, [r7, #24]
 800f08c:	693a      	ldr	r2, [r7, #16]
 800f08e:	69bb      	ldr	r3, [r7, #24]
 800f090:	4413      	add	r3, r2
 800f092:	781b      	ldrb	r3, [r3, #0]
 800f094:	2b2f      	cmp	r3, #47	; 0x2f
 800f096:	d0f6      	beq.n	800f086 <create_name+0x42>
 800f098:	693a      	ldr	r2, [r7, #16]
 800f09a:	69bb      	ldr	r3, [r7, #24]
 800f09c:	4413      	add	r3, r2
 800f09e:	781b      	ldrb	r3, [r3, #0]
 800f0a0:	2b5c      	cmp	r3, #92	; 0x5c
 800f0a2:	d0f0      	beq.n	800f086 <create_name+0x42>
			break;
 800f0a4:	e02a      	b.n	800f0fc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	2bfe      	cmp	r3, #254	; 0xfe
 800f0aa:	d901      	bls.n	800f0b0 <create_name+0x6c>
 800f0ac:	2306      	movs	r3, #6
 800f0ae:	e17d      	b.n	800f3ac <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f0b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0b2:	b2db      	uxtb	r3, r3
 800f0b4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f0b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0b8:	2101      	movs	r1, #1
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f002 f98c 	bl	80113d8 <ff_convert>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f0c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d101      	bne.n	800f0ce <create_name+0x8a>
 800f0ca:	2306      	movs	r3, #6
 800f0cc:	e16e      	b.n	800f3ac <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800f0ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0d0:	2b7f      	cmp	r3, #127	; 0x7f
 800f0d2:	d809      	bhi.n	800f0e8 <create_name+0xa4>
 800f0d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0d6:	4619      	mov	r1, r3
 800f0d8:	488d      	ldr	r0, [pc, #564]	; (800f310 <create_name+0x2cc>)
 800f0da:	f7fd fe4d 	bl	800cd78 <chk_chr>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d001      	beq.n	800f0e8 <create_name+0xa4>
 800f0e4:	2306      	movs	r3, #6
 800f0e6:	e161      	b.n	800f3ac <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800f0e8:	697b      	ldr	r3, [r7, #20]
 800f0ea:	1c5a      	adds	r2, r3, #1
 800f0ec:	617a      	str	r2, [r7, #20]
 800f0ee:	005b      	lsls	r3, r3, #1
 800f0f0:	68fa      	ldr	r2, [r7, #12]
 800f0f2:	4413      	add	r3, r2
 800f0f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f0f6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f0f8:	e7b4      	b.n	800f064 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800f0fa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f0fc:	693a      	ldr	r2, [r7, #16]
 800f0fe:	69bb      	ldr	r3, [r7, #24]
 800f100:	441a      	add	r2, r3
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f106:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f108:	2b1f      	cmp	r3, #31
 800f10a:	d801      	bhi.n	800f110 <create_name+0xcc>
 800f10c:	2304      	movs	r3, #4
 800f10e:	e000      	b.n	800f112 <create_name+0xce>
 800f110:	2300      	movs	r3, #0
 800f112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f116:	e011      	b.n	800f13c <create_name+0xf8>
		w = lfn[di - 1];
 800f118:	697b      	ldr	r3, [r7, #20]
 800f11a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f11e:	3b01      	subs	r3, #1
 800f120:	005b      	lsls	r3, r3, #1
 800f122:	68fa      	ldr	r2, [r7, #12]
 800f124:	4413      	add	r3, r2
 800f126:	881b      	ldrh	r3, [r3, #0]
 800f128:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800f12a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f12c:	2b20      	cmp	r3, #32
 800f12e:	d002      	beq.n	800f136 <create_name+0xf2>
 800f130:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f132:	2b2e      	cmp	r3, #46	; 0x2e
 800f134:	d106      	bne.n	800f144 <create_name+0x100>
		di--;
 800f136:	697b      	ldr	r3, [r7, #20]
 800f138:	3b01      	subs	r3, #1
 800f13a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d1ea      	bne.n	800f118 <create_name+0xd4>
 800f142:	e000      	b.n	800f146 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800f144:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	005b      	lsls	r3, r3, #1
 800f14a:	68fa      	ldr	r2, [r7, #12]
 800f14c:	4413      	add	r3, r2
 800f14e:	2200      	movs	r2, #0
 800f150:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d101      	bne.n	800f15c <create_name+0x118>
 800f158:	2306      	movs	r3, #6
 800f15a:	e127      	b.n	800f3ac <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	3340      	adds	r3, #64	; 0x40
 800f160:	220b      	movs	r2, #11
 800f162:	2120      	movs	r1, #32
 800f164:	4618      	mov	r0, r3
 800f166:	f7fd fdc5 	bl	800ccf4 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f16a:	2300      	movs	r3, #0
 800f16c:	61bb      	str	r3, [r7, #24]
 800f16e:	e002      	b.n	800f176 <create_name+0x132>
 800f170:	69bb      	ldr	r3, [r7, #24]
 800f172:	3301      	adds	r3, #1
 800f174:	61bb      	str	r3, [r7, #24]
 800f176:	69bb      	ldr	r3, [r7, #24]
 800f178:	005b      	lsls	r3, r3, #1
 800f17a:	68fa      	ldr	r2, [r7, #12]
 800f17c:	4413      	add	r3, r2
 800f17e:	881b      	ldrh	r3, [r3, #0]
 800f180:	2b20      	cmp	r3, #32
 800f182:	d0f5      	beq.n	800f170 <create_name+0x12c>
 800f184:	69bb      	ldr	r3, [r7, #24]
 800f186:	005b      	lsls	r3, r3, #1
 800f188:	68fa      	ldr	r2, [r7, #12]
 800f18a:	4413      	add	r3, r2
 800f18c:	881b      	ldrh	r3, [r3, #0]
 800f18e:	2b2e      	cmp	r3, #46	; 0x2e
 800f190:	d0ee      	beq.n	800f170 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f192:	69bb      	ldr	r3, [r7, #24]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d009      	beq.n	800f1ac <create_name+0x168>
 800f198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f19c:	f043 0303 	orr.w	r3, r3, #3
 800f1a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f1a4:	e002      	b.n	800f1ac <create_name+0x168>
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	3b01      	subs	r3, #1
 800f1aa:	617b      	str	r3, [r7, #20]
 800f1ac:	697b      	ldr	r3, [r7, #20]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d009      	beq.n	800f1c6 <create_name+0x182>
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f1b8:	3b01      	subs	r3, #1
 800f1ba:	005b      	lsls	r3, r3, #1
 800f1bc:	68fa      	ldr	r2, [r7, #12]
 800f1be:	4413      	add	r3, r2
 800f1c0:	881b      	ldrh	r3, [r3, #0]
 800f1c2:	2b2e      	cmp	r3, #46	; 0x2e
 800f1c4:	d1ef      	bne.n	800f1a6 <create_name+0x162>

	i = b = 0; ni = 8;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	623b      	str	r3, [r7, #32]
 800f1d0:	2308      	movs	r3, #8
 800f1d2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f1d4:	69bb      	ldr	r3, [r7, #24]
 800f1d6:	1c5a      	adds	r2, r3, #1
 800f1d8:	61ba      	str	r2, [r7, #24]
 800f1da:	005b      	lsls	r3, r3, #1
 800f1dc:	68fa      	ldr	r2, [r7, #12]
 800f1de:	4413      	add	r3, r2
 800f1e0:	881b      	ldrh	r3, [r3, #0]
 800f1e2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f1e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	f000 8090 	beq.w	800f30c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f1ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f1ee:	2b20      	cmp	r3, #32
 800f1f0:	d006      	beq.n	800f200 <create_name+0x1bc>
 800f1f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f1f4:	2b2e      	cmp	r3, #46	; 0x2e
 800f1f6:	d10a      	bne.n	800f20e <create_name+0x1ca>
 800f1f8:	69ba      	ldr	r2, [r7, #24]
 800f1fa:	697b      	ldr	r3, [r7, #20]
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	d006      	beq.n	800f20e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800f200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f204:	f043 0303 	orr.w	r3, r3, #3
 800f208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f20c:	e07d      	b.n	800f30a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f20e:	6a3a      	ldr	r2, [r7, #32]
 800f210:	69fb      	ldr	r3, [r7, #28]
 800f212:	429a      	cmp	r2, r3
 800f214:	d203      	bcs.n	800f21e <create_name+0x1da>
 800f216:	69ba      	ldr	r2, [r7, #24]
 800f218:	697b      	ldr	r3, [r7, #20]
 800f21a:	429a      	cmp	r2, r3
 800f21c:	d123      	bne.n	800f266 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800f21e:	69fb      	ldr	r3, [r7, #28]
 800f220:	2b0b      	cmp	r3, #11
 800f222:	d106      	bne.n	800f232 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800f224:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f228:	f043 0303 	orr.w	r3, r3, #3
 800f22c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f230:	e075      	b.n	800f31e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f232:	69ba      	ldr	r2, [r7, #24]
 800f234:	697b      	ldr	r3, [r7, #20]
 800f236:	429a      	cmp	r2, r3
 800f238:	d005      	beq.n	800f246 <create_name+0x202>
 800f23a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f23e:	f043 0303 	orr.w	r3, r3, #3
 800f242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800f246:	69ba      	ldr	r2, [r7, #24]
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	429a      	cmp	r2, r3
 800f24c:	d866      	bhi.n	800f31c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f24e:	697b      	ldr	r3, [r7, #20]
 800f250:	61bb      	str	r3, [r7, #24]
 800f252:	2308      	movs	r3, #8
 800f254:	623b      	str	r3, [r7, #32]
 800f256:	230b      	movs	r3, #11
 800f258:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f25a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f25e:	009b      	lsls	r3, r3, #2
 800f260:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f264:	e051      	b.n	800f30a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f266:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f268:	2b7f      	cmp	r3, #127	; 0x7f
 800f26a:	d914      	bls.n	800f296 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f26c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f26e:	2100      	movs	r1, #0
 800f270:	4618      	mov	r0, r3
 800f272:	f002 f8b1 	bl	80113d8 <ff_convert>
 800f276:	4603      	mov	r3, r0
 800f278:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f27a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d004      	beq.n	800f28a <create_name+0x246>
 800f280:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f282:	3b80      	subs	r3, #128	; 0x80
 800f284:	4a23      	ldr	r2, [pc, #140]	; (800f314 <create_name+0x2d0>)
 800f286:	5cd3      	ldrb	r3, [r2, r3]
 800f288:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f28a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f28e:	f043 0302 	orr.w	r3, r3, #2
 800f292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f296:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d007      	beq.n	800f2ac <create_name+0x268>
 800f29c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f29e:	4619      	mov	r1, r3
 800f2a0:	481d      	ldr	r0, [pc, #116]	; (800f318 <create_name+0x2d4>)
 800f2a2:	f7fd fd69 	bl	800cd78 <chk_chr>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d008      	beq.n	800f2be <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f2ac:	235f      	movs	r3, #95	; 0x5f
 800f2ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f2b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2b4:	f043 0303 	orr.w	r3, r3, #3
 800f2b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f2bc:	e01b      	b.n	800f2f6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f2be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2c0:	2b40      	cmp	r3, #64	; 0x40
 800f2c2:	d909      	bls.n	800f2d8 <create_name+0x294>
 800f2c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2c6:	2b5a      	cmp	r3, #90	; 0x5a
 800f2c8:	d806      	bhi.n	800f2d8 <create_name+0x294>
					b |= 2;
 800f2ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f2ce:	f043 0302 	orr.w	r3, r3, #2
 800f2d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f2d6:	e00e      	b.n	800f2f6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f2d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2da:	2b60      	cmp	r3, #96	; 0x60
 800f2dc:	d90b      	bls.n	800f2f6 <create_name+0x2b2>
 800f2de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2e0:	2b7a      	cmp	r3, #122	; 0x7a
 800f2e2:	d808      	bhi.n	800f2f6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800f2e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f2e8:	f043 0301 	orr.w	r3, r3, #1
 800f2ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f2f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2f2:	3b20      	subs	r3, #32
 800f2f4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f2f6:	6a3b      	ldr	r3, [r7, #32]
 800f2f8:	1c5a      	adds	r2, r3, #1
 800f2fa:	623a      	str	r2, [r7, #32]
 800f2fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f2fe:	b2d1      	uxtb	r1, r2
 800f300:	687a      	ldr	r2, [r7, #4]
 800f302:	4413      	add	r3, r2
 800f304:	460a      	mov	r2, r1
 800f306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800f30a:	e763      	b.n	800f1d4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800f30c:	bf00      	nop
 800f30e:	e006      	b.n	800f31e <create_name+0x2da>
 800f310:	08016f00 	.word	0x08016f00
 800f314:	08016f88 	.word	0x08016f88
 800f318:	08016f0c 	.word	0x08016f0c
			if (si > di) break;			/* No extension */
 800f31c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f324:	2be5      	cmp	r3, #229	; 0xe5
 800f326:	d103      	bne.n	800f330 <create_name+0x2ec>
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2205      	movs	r2, #5
 800f32c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800f330:	69fb      	ldr	r3, [r7, #28]
 800f332:	2b08      	cmp	r3, #8
 800f334:	d104      	bne.n	800f340 <create_name+0x2fc>
 800f336:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f33a:	009b      	lsls	r3, r3, #2
 800f33c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f340:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f344:	f003 030c 	and.w	r3, r3, #12
 800f348:	2b0c      	cmp	r3, #12
 800f34a:	d005      	beq.n	800f358 <create_name+0x314>
 800f34c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f350:	f003 0303 	and.w	r3, r3, #3
 800f354:	2b03      	cmp	r3, #3
 800f356:	d105      	bne.n	800f364 <create_name+0x320>
 800f358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f35c:	f043 0302 	orr.w	r3, r3, #2
 800f360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f368:	f003 0302 	and.w	r3, r3, #2
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d117      	bne.n	800f3a0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f370:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f374:	f003 0303 	and.w	r3, r3, #3
 800f378:	2b01      	cmp	r3, #1
 800f37a:	d105      	bne.n	800f388 <create_name+0x344>
 800f37c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f380:	f043 0310 	orr.w	r3, r3, #16
 800f384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f388:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f38c:	f003 030c 	and.w	r3, r3, #12
 800f390:	2b04      	cmp	r3, #4
 800f392:	d105      	bne.n	800f3a0 <create_name+0x35c>
 800f394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f398:	f043 0308 	orr.w	r3, r3, #8
 800f39c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f3a6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800f3aa:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	3728      	adds	r7, #40	; 0x28
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}

0800f3b4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b086      	sub	sp, #24
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
 800f3bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f3c2:	693b      	ldr	r3, [r7, #16]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f3c8:	e002      	b.n	800f3d0 <follow_path+0x1c>
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	3301      	adds	r3, #1
 800f3ce:	603b      	str	r3, [r7, #0]
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	781b      	ldrb	r3, [r3, #0]
 800f3d4:	2b2f      	cmp	r3, #47	; 0x2f
 800f3d6:	d0f8      	beq.n	800f3ca <follow_path+0x16>
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	781b      	ldrb	r3, [r3, #0]
 800f3dc:	2b5c      	cmp	r3, #92	; 0x5c
 800f3de:	d0f4      	beq.n	800f3ca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f3e0:	693b      	ldr	r3, [r7, #16]
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800f3e6:	693b      	ldr	r3, [r7, #16]
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	781b      	ldrb	r3, [r3, #0]
 800f3f0:	2b1f      	cmp	r3, #31
 800f3f2:	d80a      	bhi.n	800f40a <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2280      	movs	r2, #128	; 0x80
 800f3f8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800f3fc:	2100      	movs	r1, #0
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f7fe fc8b 	bl	800dd1a <dir_sdi>
 800f404:	4603      	mov	r3, r0
 800f406:	75fb      	strb	r3, [r7, #23]
 800f408:	e078      	b.n	800f4fc <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f40a:	463b      	mov	r3, r7
 800f40c:	4619      	mov	r1, r3
 800f40e:	6878      	ldr	r0, [r7, #4]
 800f410:	f7ff fe18 	bl	800f044 <create_name>
 800f414:	4603      	mov	r3, r0
 800f416:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f418:	7dfb      	ldrb	r3, [r7, #23]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d169      	bne.n	800f4f2 <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f41e:	6878      	ldr	r0, [r7, #4]
 800f420:	f7ff fb41 	bl	800eaa6 <dir_find>
 800f424:	4603      	mov	r3, r0
 800f426:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f42e:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f430:	7dfb      	ldrb	r3, [r7, #23]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d00a      	beq.n	800f44c <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f436:	7dfb      	ldrb	r3, [r7, #23]
 800f438:	2b04      	cmp	r3, #4
 800f43a:	d15c      	bne.n	800f4f6 <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f43c:	7afb      	ldrb	r3, [r7, #11]
 800f43e:	f003 0304 	and.w	r3, r3, #4
 800f442:	2b00      	cmp	r3, #0
 800f444:	d157      	bne.n	800f4f6 <follow_path+0x142>
 800f446:	2305      	movs	r3, #5
 800f448:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f44a:	e054      	b.n	800f4f6 <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f44c:	7afb      	ldrb	r3, [r7, #11]
 800f44e:	f003 0304 	and.w	r3, r3, #4
 800f452:	2b00      	cmp	r3, #0
 800f454:	d151      	bne.n	800f4fa <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f456:	693b      	ldr	r3, [r7, #16]
 800f458:	799b      	ldrb	r3, [r3, #6]
 800f45a:	f003 0310 	and.w	r3, r3, #16
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d102      	bne.n	800f468 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800f462:	2305      	movs	r3, #5
 800f464:	75fb      	strb	r3, [r7, #23]
 800f466:	e049      	b.n	800f4fc <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	781b      	ldrb	r3, [r3, #0]
 800f46c:	2b04      	cmp	r3, #4
 800f46e:	d130      	bne.n	800f4d2 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800f470:	693b      	ldr	r3, [r7, #16]
 800f472:	689a      	ldr	r2, [r3, #8]
 800f474:	693b      	ldr	r3, [r7, #16]
 800f476:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800f478:	693b      	ldr	r3, [r7, #16]
 800f47a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f47e:	4613      	mov	r3, r2
 800f480:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f484:	693a      	ldr	r2, [r7, #16]
 800f486:	79d2      	ldrb	r2, [r2, #7]
 800f488:	431a      	orrs	r2, r3
 800f48a:	693b      	ldr	r3, [r7, #16]
 800f48c:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f492:	693b      	ldr	r3, [r7, #16]
 800f494:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	691b      	ldr	r3, [r3, #16]
 800f49a:	3334      	adds	r3, #52	; 0x34
 800f49c:	4618      	mov	r0, r3
 800f49e:	f7fd fa3b 	bl	800c918 <ld_dword>
 800f4a2:	4602      	mov	r2, r0
 800f4a4:	693b      	ldr	r3, [r7, #16]
 800f4a6:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	691b      	ldr	r3, [r3, #16]
 800f4ac:	3321      	adds	r3, #33	; 0x21
 800f4ae:	781b      	ldrb	r3, [r3, #0]
 800f4b0:	f003 0302 	and.w	r3, r3, #2
 800f4b4:	b2da      	uxtb	r2, r3
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	691b      	ldr	r3, [r3, #16]
 800f4be:	3338      	adds	r3, #56	; 0x38
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f7fd fa4c 	bl	800c95e <ld_qword>
 800f4c6:	4602      	mov	r2, r0
 800f4c8:	460b      	mov	r3, r1
 800f4ca:	6939      	ldr	r1, [r7, #16]
 800f4cc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800f4d0:	e79b      	b.n	800f40a <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4e0:	4413      	add	r3, r2
 800f4e2:	4619      	mov	r1, r3
 800f4e4:	68f8      	ldr	r0, [r7, #12]
 800f4e6:	f7fe fdcf 	bl	800e088 <ld_clust>
 800f4ea:	4602      	mov	r2, r0
 800f4ec:	693b      	ldr	r3, [r7, #16]
 800f4ee:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f4f0:	e78b      	b.n	800f40a <follow_path+0x56>
			if (res != FR_OK) break;
 800f4f2:	bf00      	nop
 800f4f4:	e002      	b.n	800f4fc <follow_path+0x148>
				break;
 800f4f6:	bf00      	nop
 800f4f8:	e000      	b.n	800f4fc <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f4fa:	bf00      	nop
			}
		}
	}

	return res;
 800f4fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	3718      	adds	r7, #24
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}

0800f506 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f506:	b480      	push	{r7}
 800f508:	b087      	sub	sp, #28
 800f50a:	af00      	add	r7, sp, #0
 800f50c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f50e:	f04f 33ff 	mov.w	r3, #4294967295
 800f512:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d031      	beq.n	800f580 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	617b      	str	r3, [r7, #20]
 800f522:	e002      	b.n	800f52a <get_ldnumber+0x24>
 800f524:	697b      	ldr	r3, [r7, #20]
 800f526:	3301      	adds	r3, #1
 800f528:	617b      	str	r3, [r7, #20]
 800f52a:	697b      	ldr	r3, [r7, #20]
 800f52c:	781b      	ldrb	r3, [r3, #0]
 800f52e:	2b1f      	cmp	r3, #31
 800f530:	d903      	bls.n	800f53a <get_ldnumber+0x34>
 800f532:	697b      	ldr	r3, [r7, #20]
 800f534:	781b      	ldrb	r3, [r3, #0]
 800f536:	2b3a      	cmp	r3, #58	; 0x3a
 800f538:	d1f4      	bne.n	800f524 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	781b      	ldrb	r3, [r3, #0]
 800f53e:	2b3a      	cmp	r3, #58	; 0x3a
 800f540:	d11c      	bne.n	800f57c <get_ldnumber+0x76>
			tp = *path;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	1c5a      	adds	r2, r3, #1
 800f54c:	60fa      	str	r2, [r7, #12]
 800f54e:	781b      	ldrb	r3, [r3, #0]
 800f550:	3b30      	subs	r3, #48	; 0x30
 800f552:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	2b09      	cmp	r3, #9
 800f558:	d80e      	bhi.n	800f578 <get_ldnumber+0x72>
 800f55a:	68fa      	ldr	r2, [r7, #12]
 800f55c:	697b      	ldr	r3, [r7, #20]
 800f55e:	429a      	cmp	r2, r3
 800f560:	d10a      	bne.n	800f578 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	2b03      	cmp	r3, #3
 800f566:	d807      	bhi.n	800f578 <get_ldnumber+0x72>
					vol = (int)i;
 800f568:	68bb      	ldr	r3, [r7, #8]
 800f56a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	3301      	adds	r3, #1
 800f570:	617b      	str	r3, [r7, #20]
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	697a      	ldr	r2, [r7, #20]
 800f576:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f578:	693b      	ldr	r3, [r7, #16]
 800f57a:	e002      	b.n	800f582 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f57c:	2300      	movs	r3, #0
 800f57e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f580:	693b      	ldr	r3, [r7, #16]
}
 800f582:	4618      	mov	r0, r3
 800f584:	371c      	adds	r7, #28
 800f586:	46bd      	mov	sp, r7
 800f588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58c:	4770      	bx	lr
	...

0800f590 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b082      	sub	sp, #8
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
 800f598:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	2200      	movs	r2, #0
 800f59e:	70da      	strb	r2, [r3, #3]
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f04f 32ff 	mov.w	r2, #4294967295
 800f5a6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f5a8:	6839      	ldr	r1, [r7, #0]
 800f5aa:	6878      	ldr	r0, [r7, #4]
 800f5ac:	f7fd fdb0 	bl	800d110 <move_window>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d001      	beq.n	800f5ba <check_fs+0x2a>
 800f5b6:	2304      	movs	r3, #4
 800f5b8:	e044      	b.n	800f644 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	3338      	adds	r3, #56	; 0x38
 800f5be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f7fd f990 	bl	800c8e8 <ld_word>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	461a      	mov	r2, r3
 800f5cc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f5d0:	429a      	cmp	r2, r3
 800f5d2:	d001      	beq.n	800f5d8 <check_fs+0x48>
 800f5d4:	2303      	movs	r3, #3
 800f5d6:	e035      	b.n	800f644 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f5de:	2be9      	cmp	r3, #233	; 0xe9
 800f5e0:	d009      	beq.n	800f5f6 <check_fs+0x66>
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f5e8:	2beb      	cmp	r3, #235	; 0xeb
 800f5ea:	d11e      	bne.n	800f62a <check_fs+0x9a>
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f5f2:	2b90      	cmp	r3, #144	; 0x90
 800f5f4:	d119      	bne.n	800f62a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	3338      	adds	r3, #56	; 0x38
 800f5fa:	3336      	adds	r3, #54	; 0x36
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7fd f98b 	bl	800c918 <ld_dword>
 800f602:	4603      	mov	r3, r0
 800f604:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f608:	4a10      	ldr	r2, [pc, #64]	; (800f64c <check_fs+0xbc>)
 800f60a:	4293      	cmp	r3, r2
 800f60c:	d101      	bne.n	800f612 <check_fs+0x82>
 800f60e:	2300      	movs	r3, #0
 800f610:	e018      	b.n	800f644 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	3338      	adds	r3, #56	; 0x38
 800f616:	3352      	adds	r3, #82	; 0x52
 800f618:	4618      	mov	r0, r3
 800f61a:	f7fd f97d 	bl	800c918 <ld_dword>
 800f61e:	4603      	mov	r3, r0
 800f620:	4a0b      	ldr	r2, [pc, #44]	; (800f650 <check_fs+0xc0>)
 800f622:	4293      	cmp	r3, r2
 800f624:	d101      	bne.n	800f62a <check_fs+0x9a>
 800f626:	2300      	movs	r3, #0
 800f628:	e00c      	b.n	800f644 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	3338      	adds	r3, #56	; 0x38
 800f62e:	220b      	movs	r2, #11
 800f630:	4908      	ldr	r1, [pc, #32]	; (800f654 <check_fs+0xc4>)
 800f632:	4618      	mov	r0, r3
 800f634:	f7fd fb79 	bl	800cd2a <mem_cmp>
 800f638:	4603      	mov	r3, r0
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d101      	bne.n	800f642 <check_fs+0xb2>
 800f63e:	2301      	movs	r3, #1
 800f640:	e000      	b.n	800f644 <check_fs+0xb4>
#endif
	return 2;
 800f642:	2302      	movs	r3, #2
}
 800f644:	4618      	mov	r0, r3
 800f646:	3708      	adds	r7, #8
 800f648:	46bd      	mov	sp, r7
 800f64a:	bd80      	pop	{r7, pc}
 800f64c:	00544146 	.word	0x00544146
 800f650:	33544146 	.word	0x33544146
 800f654:	08016f14 	.word	0x08016f14

0800f658 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f65c:	b09c      	sub	sp, #112	; 0x70
 800f65e:	af00      	add	r7, sp, #0
 800f660:	61f8      	str	r0, [r7, #28]
 800f662:	61b9      	str	r1, [r7, #24]
 800f664:	4613      	mov	r3, r2
 800f666:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f668:	69bb      	ldr	r3, [r7, #24]
 800f66a:	2200      	movs	r2, #0
 800f66c:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f66e:	69f8      	ldr	r0, [r7, #28]
 800f670:	f7ff ff49 	bl	800f506 <get_ldnumber>
 800f674:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800f676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f678:	2b00      	cmp	r3, #0
 800f67a:	da01      	bge.n	800f680 <find_volume+0x28>
 800f67c:	230b      	movs	r3, #11
 800f67e:	e337      	b.n	800fcf0 <find_volume+0x698>


	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f680:	4a99      	ldr	r2, [pc, #612]	; (800f8e8 <find_volume+0x290>)
 800f682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f688:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f68a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d101      	bne.n	800f694 <find_volume+0x3c>
 800f690:	230c      	movs	r3, #12
 800f692:	e32d      	b.n	800fcf0 <find_volume+0x698>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f694:	69bb      	ldr	r3, [r7, #24]
 800f696:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f698:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f69a:	7dfb      	ldrb	r3, [r7, #23]
 800f69c:	f023 0301 	bic.w	r3, r3, #1
 800f6a0:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f6a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6a4:	781b      	ldrb	r3, [r3, #0]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d01a      	beq.n	800f6e0 <find_volume+0x88>

		stat = disk_status(fs->drv);
 800f6aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6ac:	785b      	ldrb	r3, [r3, #1]
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f7fd f87c 	bl	800c7ac <disk_status>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f6ba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f6be:	f003 0301 	and.w	r3, r3, #1
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d10c      	bne.n	800f6e0 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f6c6:	7dfb      	ldrb	r3, [r7, #23]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d007      	beq.n	800f6dc <find_volume+0x84>
 800f6cc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f6d0:	f003 0304 	and.w	r3, r3, #4
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d001      	beq.n	800f6dc <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800f6d8:	230a      	movs	r3, #10
 800f6da:	e309      	b.n	800fcf0 <find_volume+0x698>
			}
			return FR_OK;				/* The file system object is valid */
 800f6dc:	2300      	movs	r3, #0
 800f6de:	e307      	b.n	800fcf0 <find_volume+0x698>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f6e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f6e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6e8:	b2da      	uxtb	r2, r3
 800f6ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6ec:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f6ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6f0:	785b      	ldrb	r3, [r3, #1]
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	f7fd f874 	bl	800c7e0 <disk_initialize>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f6fe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f702:	f003 0301 	and.w	r3, r3, #1
 800f706:	2b00      	cmp	r3, #0
 800f708:	d001      	beq.n	800f70e <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f70a:	2303      	movs	r3, #3
 800f70c:	e2f0      	b.n	800fcf0 <find_volume+0x698>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f70e:	7dfb      	ldrb	r3, [r7, #23]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d007      	beq.n	800f724 <find_volume+0xcc>
 800f714:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f718:	f003 0304 	and.w	r3, r3, #4
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d001      	beq.n	800f724 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800f720:	230a      	movs	r3, #10
 800f722:	e2e5      	b.n	800fcf0 <find_volume+0x698>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f724:	2300      	movs	r3, #0
 800f726:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f728:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f72a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f72c:	f7ff ff30 	bl	800f590 <check_fs>
 800f730:	4603      	mov	r3, r0
 800f732:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f736:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f73a:	2b02      	cmp	r3, #2
 800f73c:	d14d      	bne.n	800f7da <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f73e:	2300      	movs	r3, #0
 800f740:	65bb      	str	r3, [r7, #88]	; 0x58
 800f742:	e020      	b.n	800f786 <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f746:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f74a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f74c:	011b      	lsls	r3, r3, #4
 800f74e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f752:	4413      	add	r3, r2
 800f754:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f758:	3304      	adds	r3, #4
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d006      	beq.n	800f76e <find_volume+0x116>
 800f760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f762:	3308      	adds	r3, #8
 800f764:	4618      	mov	r0, r3
 800f766:	f7fd f8d7 	bl	800c918 <ld_dword>
 800f76a:	4602      	mov	r2, r0
 800f76c:	e000      	b.n	800f770 <find_volume+0x118>
 800f76e:	2200      	movs	r2, #0
 800f770:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f772:	009b      	lsls	r3, r3, #2
 800f774:	3360      	adds	r3, #96	; 0x60
 800f776:	f107 0110 	add.w	r1, r7, #16
 800f77a:	440b      	add	r3, r1
 800f77c:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f780:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f782:	3301      	adds	r3, #1
 800f784:	65bb      	str	r3, [r7, #88]	; 0x58
 800f786:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f788:	2b03      	cmp	r3, #3
 800f78a:	d9db      	bls.n	800f744 <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f78c:	2300      	movs	r3, #0
 800f78e:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 800f790:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f792:	2b00      	cmp	r3, #0
 800f794:	d002      	beq.n	800f79c <find_volume+0x144>
 800f796:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f798:	3b01      	subs	r3, #1
 800f79a:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f79c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f79e:	009b      	lsls	r3, r3, #2
 800f7a0:	3360      	adds	r3, #96	; 0x60
 800f7a2:	f107 0210 	add.w	r2, r7, #16
 800f7a6:	4413      	add	r3, r2
 800f7a8:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800f7ac:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f7ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d005      	beq.n	800f7c0 <find_volume+0x168>
 800f7b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f7b6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f7b8:	f7ff feea 	bl	800f590 <check_fs>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	e000      	b.n	800f7c2 <find_volume+0x16a>
 800f7c0:	2303      	movs	r3, #3
 800f7c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f7c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f7ca:	2b01      	cmp	r3, #1
 800f7cc:	d905      	bls.n	800f7da <find_volume+0x182>
 800f7ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f7d0:	3301      	adds	r3, #1
 800f7d2:	65bb      	str	r3, [r7, #88]	; 0x58
 800f7d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f7d6:	2b03      	cmp	r3, #3
 800f7d8:	d9e0      	bls.n	800f79c <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f7da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f7de:	2b04      	cmp	r3, #4
 800f7e0:	d101      	bne.n	800f7e6 <find_volume+0x18e>
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	e284      	b.n	800fcf0 <find_volume+0x698>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f7e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f7ea:	2b01      	cmp	r3, #1
 800f7ec:	d901      	bls.n	800f7f2 <find_volume+0x19a>
 800f7ee:	230d      	movs	r3, #13
 800f7f0:	e27e      	b.n	800fcf0 <find_volume+0x698>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800f7f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f7f6:	2b01      	cmp	r3, #1
 800f7f8:	f040 80fa 	bne.w	800f9f0 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800f7fc:	230b      	movs	r3, #11
 800f7fe:	65bb      	str	r3, [r7, #88]	; 0x58
 800f800:	e002      	b.n	800f808 <find_volume+0x1b0>
 800f802:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f804:	3301      	adds	r3, #1
 800f806:	65bb      	str	r3, [r7, #88]	; 0x58
 800f808:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f80a:	2b3f      	cmp	r3, #63	; 0x3f
 800f80c:	d806      	bhi.n	800f81c <find_volume+0x1c4>
 800f80e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f810:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f812:	4413      	add	r3, r2
 800f814:	3338      	adds	r3, #56	; 0x38
 800f816:	781b      	ldrb	r3, [r3, #0]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d0f2      	beq.n	800f802 <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800f81c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f81e:	2b3f      	cmp	r3, #63	; 0x3f
 800f820:	d801      	bhi.n	800f826 <find_volume+0x1ce>
 800f822:	230d      	movs	r3, #13
 800f824:	e264      	b.n	800fcf0 <find_volume+0x698>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800f826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f828:	3338      	adds	r3, #56	; 0x38
 800f82a:	3368      	adds	r3, #104	; 0x68
 800f82c:	4618      	mov	r0, r3
 800f82e:	f7fd f85b 	bl	800c8e8 <ld_word>
 800f832:	4603      	mov	r3, r0
 800f834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f838:	d001      	beq.n	800f83e <find_volume+0x1e6>
 800f83a:	230d      	movs	r3, #13
 800f83c:	e258      	b.n	800fcf0 <find_volume+0x698>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800f83e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f840:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800f844:	2b09      	cmp	r3, #9
 800f846:	d001      	beq.n	800f84c <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 800f848:	230d      	movs	r3, #13
 800f84a:	e251      	b.n	800fcf0 <find_volume+0x698>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800f84c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f84e:	3338      	adds	r3, #56	; 0x38
 800f850:	3348      	adds	r3, #72	; 0x48
 800f852:	4618      	mov	r0, r3
 800f854:	f7fd f883 	bl	800c95e <ld_qword>
 800f858:	4602      	mov	r2, r0
 800f85a:	460b      	mov	r3, r1
 800f85c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f85e:	2000      	movs	r0, #0
 800f860:	60b9      	str	r1, [r7, #8]
 800f862:	60f8      	str	r0, [r7, #12]
 800f864:	68b9      	ldr	r1, [r7, #8]
 800f866:	1851      	adds	r1, r2, r1
 800f868:	6039      	str	r1, [r7, #0]
 800f86a:	68f9      	ldr	r1, [r7, #12]
 800f86c:	eb43 0101 	adc.w	r1, r3, r1
 800f870:	6079      	str	r1, [r7, #4]
 800f872:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f876:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800f87a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f87e:	2b01      	cmp	r3, #1
 800f880:	d301      	bcc.n	800f886 <find_volume+0x22e>
 800f882:	230d      	movs	r3, #13
 800f884:	e234      	b.n	800fcf0 <find_volume+0x698>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800f886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f888:	3338      	adds	r3, #56	; 0x38
 800f88a:	3354      	adds	r3, #84	; 0x54
 800f88c:	4618      	mov	r0, r3
 800f88e:	f7fd f843 	bl	800c918 <ld_dword>
 800f892:	4602      	mov	r2, r0
 800f894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f896:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800f898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f89a:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 800f89e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8a0:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800f8a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8a4:	789b      	ldrb	r3, [r3, #2]
 800f8a6:	2b01      	cmp	r3, #1
 800f8a8:	d001      	beq.n	800f8ae <find_volume+0x256>
 800f8aa:	230d      	movs	r3, #13
 800f8ac:	e220      	b.n	800fcf0 <find_volume+0x698>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800f8ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800f8b4:	461a      	mov	r2, r3
 800f8b6:	2301      	movs	r3, #1
 800f8b8:	4093      	lsls	r3, r2
 800f8ba:	b29a      	uxth	r2, r3
 800f8bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8be:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800f8c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8c2:	895b      	ldrh	r3, [r3, #10]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d101      	bne.n	800f8cc <find_volume+0x274>
 800f8c8:	230d      	movs	r3, #13
 800f8ca:	e211      	b.n	800fcf0 <find_volume+0x698>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800f8cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8ce:	3338      	adds	r3, #56	; 0x38
 800f8d0:	335c      	adds	r3, #92	; 0x5c
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f7fd f820 	bl	800c918 <ld_dword>
 800f8d8:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800f8da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8dc:	4a03      	ldr	r2, [pc, #12]	; (800f8ec <find_volume+0x294>)
 800f8de:	4293      	cmp	r3, r2
 800f8e0:	d906      	bls.n	800f8f0 <find_volume+0x298>
 800f8e2:	230d      	movs	r3, #13
 800f8e4:	e204      	b.n	800fcf0 <find_volume+0x698>
 800f8e6:	bf00      	nop
 800f8e8:	20001de0 	.word	0x20001de0
 800f8ec:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800f8f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8f2:	1c9a      	adds	r2, r3, #2
 800f8f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8f6:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800f8f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f8fc:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800f8fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f900:	3338      	adds	r3, #56	; 0x38
 800f902:	3358      	adds	r3, #88	; 0x58
 800f904:	4618      	mov	r0, r3
 800f906:	f7fd f807 	bl	800c918 <ld_dword>
 800f90a:	4602      	mov	r2, r0
 800f90c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f90e:	441a      	add	r2, r3
 800f910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f912:	631a      	str	r2, [r3, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800f914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f916:	3338      	adds	r3, #56	; 0x38
 800f918:	3350      	adds	r3, #80	; 0x50
 800f91a:	4618      	mov	r0, r3
 800f91c:	f7fc fffc 	bl	800c918 <ld_dword>
 800f920:	4602      	mov	r2, r0
 800f922:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f924:	441a      	add	r2, r3
 800f926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f928:	629a      	str	r2, [r3, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800f92a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f92c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f92e:	2200      	movs	r2, #0
 800f930:	469a      	mov	sl, r3
 800f932:	4693      	mov	fp, r2
 800f934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f936:	895b      	ldrh	r3, [r3, #10]
 800f938:	461a      	mov	r2, r3
 800f93a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f93c:	fb02 f303 	mul.w	r3, r2, r3
 800f940:	2200      	movs	r2, #0
 800f942:	4698      	mov	r8, r3
 800f944:	4691      	mov	r9, r2
 800f946:	eb1a 0408 	adds.w	r4, sl, r8
 800f94a:	eb4b 0509 	adc.w	r5, fp, r9
 800f94e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f952:	42a2      	cmp	r2, r4
 800f954:	41ab      	sbcs	r3, r5
 800f956:	d201      	bcs.n	800f95c <find_volume+0x304>
 800f958:	230d      	movs	r3, #13
 800f95a:	e1c9      	b.n	800fcf0 <find_volume+0x698>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800f95c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f95e:	3338      	adds	r3, #56	; 0x38
 800f960:	3360      	adds	r3, #96	; 0x60
 800f962:	4618      	mov	r0, r3
 800f964:	f7fc ffd8 	bl	800c918 <ld_dword>
 800f968:	4602      	mov	r2, r0
 800f96a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f96c:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800f96e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f972:	4619      	mov	r1, r3
 800f974:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f976:	f7fd fc67 	bl	800d248 <clust2sect>
 800f97a:	4603      	mov	r3, r0
 800f97c:	4619      	mov	r1, r3
 800f97e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f980:	f7fd fbc6 	bl	800d110 <move_window>
 800f984:	4603      	mov	r3, r0
 800f986:	2b00      	cmp	r3, #0
 800f988:	d001      	beq.n	800f98e <find_volume+0x336>
 800f98a:	2301      	movs	r3, #1
 800f98c:	e1b0      	b.n	800fcf0 <find_volume+0x698>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800f98e:	2300      	movs	r3, #0
 800f990:	65bb      	str	r3, [r7, #88]	; 0x58
 800f992:	e015      	b.n	800f9c0 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800f994:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f996:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f998:	4413      	add	r3, r2
 800f99a:	3338      	adds	r3, #56	; 0x38
 800f99c:	781b      	ldrb	r3, [r3, #0]
 800f99e:	2b81      	cmp	r3, #129	; 0x81
 800f9a0:	d10b      	bne.n	800f9ba <find_volume+0x362>
 800f9a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9a4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f9a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f9aa:	3314      	adds	r3, #20
 800f9ac:	4413      	add	r3, r2
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f7fc ffb2 	bl	800c918 <ld_dword>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	2b02      	cmp	r3, #2
 800f9b8:	d007      	beq.n	800f9ca <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800f9ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f9bc:	3320      	adds	r3, #32
 800f9be:	65bb      	str	r3, [r7, #88]	; 0x58
 800f9c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f9c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f9c6:	d3e5      	bcc.n	800f994 <find_volume+0x33c>
 800f9c8:	e000      	b.n	800f9cc <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800f9ca:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800f9cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f9ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f9d2:	d101      	bne.n	800f9d8 <find_volume+0x380>
 800f9d4:	230d      	movs	r3, #13
 800f9d6:	e18b      	b.n	800fcf0 <find_volume+0x698>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f9d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9da:	f04f 32ff 	mov.w	r2, #4294967295
 800f9de:	619a      	str	r2, [r3, #24]
 800f9e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9e2:	699a      	ldr	r2, [r3, #24]
 800f9e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9e6:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800f9e8:	2304      	movs	r3, #4
 800f9ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800f9ee:	e167      	b.n	800fcc0 <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f9f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9f2:	3338      	adds	r3, #56	; 0x38
 800f9f4:	330b      	adds	r3, #11
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7fc ff76 	bl	800c8e8 <ld_word>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa02:	d001      	beq.n	800fa08 <find_volume+0x3b0>
 800fa04:	230d      	movs	r3, #13
 800fa06:	e173      	b.n	800fcf0 <find_volume+0x698>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fa08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa0a:	3338      	adds	r3, #56	; 0x38
 800fa0c:	3316      	adds	r3, #22
 800fa0e:	4618      	mov	r0, r3
 800fa10:	f7fc ff6a 	bl	800c8e8 <ld_word>
 800fa14:	4603      	mov	r3, r0
 800fa16:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fa18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d106      	bne.n	800fa2c <find_volume+0x3d4>
 800fa1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa20:	3338      	adds	r3, #56	; 0x38
 800fa22:	3324      	adds	r3, #36	; 0x24
 800fa24:	4618      	mov	r0, r3
 800fa26:	f7fc ff77 	bl	800c918 <ld_dword>
 800fa2a:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 800fa2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fa30:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fa32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa34:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fa38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa3a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fa3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa3e:	789b      	ldrb	r3, [r3, #2]
 800fa40:	2b01      	cmp	r3, #1
 800fa42:	d005      	beq.n	800fa50 <find_volume+0x3f8>
 800fa44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa46:	789b      	ldrb	r3, [r3, #2]
 800fa48:	2b02      	cmp	r3, #2
 800fa4a:	d001      	beq.n	800fa50 <find_volume+0x3f8>
 800fa4c:	230d      	movs	r3, #13
 800fa4e:	e14f      	b.n	800fcf0 <find_volume+0x698>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fa50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa52:	789b      	ldrb	r3, [r3, #2]
 800fa54:	461a      	mov	r2, r3
 800fa56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa58:	fb02 f303 	mul.w	r3, r2, r3
 800fa5c:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fa5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fa64:	b29a      	uxth	r2, r3
 800fa66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa68:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fa6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa6c:	895b      	ldrh	r3, [r3, #10]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d008      	beq.n	800fa84 <find_volume+0x42c>
 800fa72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa74:	895b      	ldrh	r3, [r3, #10]
 800fa76:	461a      	mov	r2, r3
 800fa78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa7a:	895b      	ldrh	r3, [r3, #10]
 800fa7c:	3b01      	subs	r3, #1
 800fa7e:	4013      	ands	r3, r2
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d001      	beq.n	800fa88 <find_volume+0x430>
 800fa84:	230d      	movs	r3, #13
 800fa86:	e133      	b.n	800fcf0 <find_volume+0x698>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fa88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa8a:	3338      	adds	r3, #56	; 0x38
 800fa8c:	3311      	adds	r3, #17
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f7fc ff2a 	bl	800c8e8 <ld_word>
 800fa94:	4603      	mov	r3, r0
 800fa96:	461a      	mov	r2, r3
 800fa98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa9a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fa9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa9e:	891b      	ldrh	r3, [r3, #8]
 800faa0:	f003 030f 	and.w	r3, r3, #15
 800faa4:	b29b      	uxth	r3, r3
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d001      	beq.n	800faae <find_volume+0x456>
 800faaa:	230d      	movs	r3, #13
 800faac:	e120      	b.n	800fcf0 <find_volume+0x698>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800faae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fab0:	3338      	adds	r3, #56	; 0x38
 800fab2:	3313      	adds	r3, #19
 800fab4:	4618      	mov	r0, r3
 800fab6:	f7fc ff17 	bl	800c8e8 <ld_word>
 800faba:	4603      	mov	r3, r0
 800fabc:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fabe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d106      	bne.n	800fad2 <find_volume+0x47a>
 800fac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fac6:	3338      	adds	r3, #56	; 0x38
 800fac8:	3320      	adds	r3, #32
 800faca:	4618      	mov	r0, r3
 800facc:	f7fc ff24 	bl	800c918 <ld_dword>
 800fad0:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fad4:	3338      	adds	r3, #56	; 0x38
 800fad6:	330e      	adds	r3, #14
 800fad8:	4618      	mov	r0, r3
 800fada:	f7fc ff05 	bl	800c8e8 <ld_word>
 800fade:	4603      	mov	r3, r0
 800fae0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fae4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d101      	bne.n	800faf0 <find_volume+0x498>
 800faec:	230d      	movs	r3, #13
 800faee:	e0ff      	b.n	800fcf0 <find_volume+0x698>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800faf0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800faf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800faf6:	4413      	add	r3, r2
 800faf8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fafa:	8912      	ldrh	r2, [r2, #8]
 800fafc:	0912      	lsrs	r2, r2, #4
 800fafe:	b292      	uxth	r2, r2
 800fb00:	4413      	add	r3, r2
 800fb02:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fb04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fb06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	d201      	bcs.n	800fb10 <find_volume+0x4b8>
 800fb0c:	230d      	movs	r3, #13
 800fb0e:	e0ef      	b.n	800fcf0 <find_volume+0x698>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fb10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fb12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb14:	1ad3      	subs	r3, r2, r3
 800fb16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fb18:	8952      	ldrh	r2, [r2, #10]
 800fb1a:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb1e:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fb20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d101      	bne.n	800fb2a <find_volume+0x4d2>
 800fb26:	230d      	movs	r3, #13
 800fb28:	e0e2      	b.n	800fcf0 <find_volume+0x698>
		fmt = FS_FAT32;
 800fb2a:	2303      	movs	r3, #3
 800fb2c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fb30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb32:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fb36:	4293      	cmp	r3, r2
 800fb38:	d802      	bhi.n	800fb40 <find_volume+0x4e8>
 800fb3a:	2302      	movs	r3, #2
 800fb3c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fb40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb42:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fb46:	4293      	cmp	r3, r2
 800fb48:	d802      	bhi.n	800fb50 <find_volume+0x4f8>
 800fb4a:	2301      	movs	r3, #1
 800fb4c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fb50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb52:	1c9a      	adds	r2, r3, #2
 800fb54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb56:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800fb58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fb5c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fb5e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800fb62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb64:	441a      	add	r2, r3
 800fb66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb68:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800fb6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fb6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb6e:	441a      	add	r2, r3
 800fb70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb72:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800fb74:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800fb78:	2b03      	cmp	r3, #3
 800fb7a:	d11e      	bne.n	800fbba <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fb7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb7e:	3338      	adds	r3, #56	; 0x38
 800fb80:	332a      	adds	r3, #42	; 0x2a
 800fb82:	4618      	mov	r0, r3
 800fb84:	f7fc feb0 	bl	800c8e8 <ld_word>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d001      	beq.n	800fb92 <find_volume+0x53a>
 800fb8e:	230d      	movs	r3, #13
 800fb90:	e0ae      	b.n	800fcf0 <find_volume+0x698>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fb92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb94:	891b      	ldrh	r3, [r3, #8]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d001      	beq.n	800fb9e <find_volume+0x546>
 800fb9a:	230d      	movs	r3, #13
 800fb9c:	e0a8      	b.n	800fcf0 <find_volume+0x698>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fb9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fba0:	3338      	adds	r3, #56	; 0x38
 800fba2:	332c      	adds	r3, #44	; 0x2c
 800fba4:	4618      	mov	r0, r3
 800fba6:	f7fc feb7 	bl	800c918 <ld_dword>
 800fbaa:	4602      	mov	r2, r0
 800fbac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbae:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fbb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbb2:	69db      	ldr	r3, [r3, #28]
 800fbb4:	009b      	lsls	r3, r3, #2
 800fbb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fbb8:	e01f      	b.n	800fbfa <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fbba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbbc:	891b      	ldrh	r3, [r3, #8]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d101      	bne.n	800fbc6 <find_volume+0x56e>
 800fbc2:	230d      	movs	r3, #13
 800fbc4:	e094      	b.n	800fcf0 <find_volume+0x698>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fbc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fbca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fbcc:	441a      	add	r2, r3
 800fbce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbd0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fbd2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800fbd6:	2b02      	cmp	r3, #2
 800fbd8:	d103      	bne.n	800fbe2 <find_volume+0x58a>
 800fbda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbdc:	69db      	ldr	r3, [r3, #28]
 800fbde:	005b      	lsls	r3, r3, #1
 800fbe0:	e00a      	b.n	800fbf8 <find_volume+0x5a0>
 800fbe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbe4:	69da      	ldr	r2, [r3, #28]
 800fbe6:	4613      	mov	r3, r2
 800fbe8:	005b      	lsls	r3, r3, #1
 800fbea:	4413      	add	r3, r2
 800fbec:	085a      	lsrs	r2, r3, #1
 800fbee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbf0:	69db      	ldr	r3, [r3, #28]
 800fbf2:	f003 0301 	and.w	r3, r3, #1
 800fbf6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fbf8:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fbfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbfc:	6a1a      	ldr	r2, [r3, #32]
 800fbfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc00:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800fc04:	0a5b      	lsrs	r3, r3, #9
 800fc06:	429a      	cmp	r2, r3
 800fc08:	d201      	bcs.n	800fc0e <find_volume+0x5b6>
 800fc0a:	230d      	movs	r3, #13
 800fc0c:	e070      	b.n	800fcf0 <find_volume+0x698>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fc0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc10:	f04f 32ff 	mov.w	r2, #4294967295
 800fc14:	619a      	str	r2, [r3, #24]
 800fc16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc18:	699a      	ldr	r2, [r3, #24]
 800fc1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc1c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800fc1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc20:	2280      	movs	r2, #128	; 0x80
 800fc22:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800fc24:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800fc28:	2b03      	cmp	r3, #3
 800fc2a:	d149      	bne.n	800fcc0 <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fc2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc2e:	3338      	adds	r3, #56	; 0x38
 800fc30:	3330      	adds	r3, #48	; 0x30
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7fc fe58 	bl	800c8e8 <ld_word>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	2b01      	cmp	r3, #1
 800fc3c:	d140      	bne.n	800fcc0 <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fc3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc40:	3301      	adds	r3, #1
 800fc42:	4619      	mov	r1, r3
 800fc44:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fc46:	f7fd fa63 	bl	800d110 <move_window>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d137      	bne.n	800fcc0 <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 800fc50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc52:	2200      	movs	r2, #0
 800fc54:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fc56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc58:	3338      	adds	r3, #56	; 0x38
 800fc5a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f7fc fe42 	bl	800c8e8 <ld_word>
 800fc64:	4603      	mov	r3, r0
 800fc66:	461a      	mov	r2, r3
 800fc68:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fc6c:	429a      	cmp	r2, r3
 800fc6e:	d127      	bne.n	800fcc0 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fc70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc72:	3338      	adds	r3, #56	; 0x38
 800fc74:	4618      	mov	r0, r3
 800fc76:	f7fc fe4f 	bl	800c918 <ld_dword>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	4a1f      	ldr	r2, [pc, #124]	; (800fcfc <find_volume+0x6a4>)
 800fc7e:	4293      	cmp	r3, r2
 800fc80:	d11e      	bne.n	800fcc0 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800fc82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc84:	3338      	adds	r3, #56	; 0x38
 800fc86:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f7fc fe44 	bl	800c918 <ld_dword>
 800fc90:	4603      	mov	r3, r0
 800fc92:	4a1b      	ldr	r2, [pc, #108]	; (800fd00 <find_volume+0x6a8>)
 800fc94:	4293      	cmp	r3, r2
 800fc96:	d113      	bne.n	800fcc0 <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800fc98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc9a:	3338      	adds	r3, #56	; 0x38
 800fc9c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800fca0:	4618      	mov	r0, r3
 800fca2:	f7fc fe39 	bl	800c918 <ld_dword>
 800fca6:	4602      	mov	r2, r0
 800fca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcaa:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fcac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcae:	3338      	adds	r3, #56	; 0x38
 800fcb0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f7fc fe2f 	bl	800c918 <ld_dword>
 800fcba:	4602      	mov	r2, r0
 800fcbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcbe:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800fcc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcc2:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800fcc6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800fcc8:	4b0e      	ldr	r3, [pc, #56]	; (800fd04 <find_volume+0x6ac>)
 800fcca:	881b      	ldrh	r3, [r3, #0]
 800fccc:	3301      	adds	r3, #1
 800fcce:	b29a      	uxth	r2, r3
 800fcd0:	4b0c      	ldr	r3, [pc, #48]	; (800fd04 <find_volume+0x6ac>)
 800fcd2:	801a      	strh	r2, [r3, #0]
 800fcd4:	4b0b      	ldr	r3, [pc, #44]	; (800fd04 <find_volume+0x6ac>)
 800fcd6:	881a      	ldrh	r2, [r3, #0]
 800fcd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcda:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800fcdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcde:	4a0a      	ldr	r2, [pc, #40]	; (800fd08 <find_volume+0x6b0>)
 800fce0:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800fce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fce4:	4a09      	ldr	r2, [pc, #36]	; (800fd0c <find_volume+0x6b4>)
 800fce6:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800fce8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fcea:	f7fd f9a9 	bl	800d040 <clear_lock>
#endif
	return FR_OK;
 800fcee:	2300      	movs	r3, #0
}
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	3770      	adds	r7, #112	; 0x70
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fcfa:	bf00      	nop
 800fcfc:	41615252 	.word	0x41615252
 800fd00:	61417272 	.word	0x61417272
 800fd04:	20001df0 	.word	0x20001df0
 800fd08:	20002074 	.word	0x20002074
 800fd0c:	20001e14 	.word	0x20001e14

0800fd10 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b084      	sub	sp, #16
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
 800fd18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800fd1a:	2309      	movs	r3, #9
 800fd1c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d01c      	beq.n	800fd5e <validate+0x4e>
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d018      	beq.n	800fd5e <validate+0x4e>
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	781b      	ldrb	r3, [r3, #0]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d013      	beq.n	800fd5e <validate+0x4e>
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	889a      	ldrh	r2, [r3, #4]
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	88db      	ldrh	r3, [r3, #6]
 800fd40:	429a      	cmp	r2, r3
 800fd42:	d10c      	bne.n	800fd5e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	785b      	ldrb	r3, [r3, #1]
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	f7fc fd2e 	bl	800c7ac <disk_status>
 800fd50:	4603      	mov	r3, r0
 800fd52:	f003 0301 	and.w	r3, r3, #1
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d101      	bne.n	800fd5e <validate+0x4e>
			res = FR_OK;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fd5e:	7bfb      	ldrb	r3, [r7, #15]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d102      	bne.n	800fd6a <validate+0x5a>
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	e000      	b.n	800fd6c <validate+0x5c>
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	683a      	ldr	r2, [r7, #0]
 800fd6e:	6013      	str	r3, [r2, #0]
	return res;
 800fd70:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	3710      	adds	r7, #16
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}
	...

0800fd7c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b088      	sub	sp, #32
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	60f8      	str	r0, [r7, #12]
 800fd84:	60b9      	str	r1, [r7, #8]
 800fd86:	4613      	mov	r3, r2
 800fd88:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fd8a:	68bb      	ldr	r3, [r7, #8]
 800fd8c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fd8e:	f107 0310 	add.w	r3, r7, #16
 800fd92:	4618      	mov	r0, r3
 800fd94:	f7ff fbb7 	bl	800f506 <get_ldnumber>
 800fd98:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fd9a:	69fb      	ldr	r3, [r7, #28]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	da01      	bge.n	800fda4 <f_mount+0x28>
 800fda0:	230b      	movs	r3, #11
 800fda2:	e02b      	b.n	800fdfc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fda4:	4a17      	ldr	r2, [pc, #92]	; (800fe04 <f_mount+0x88>)
 800fda6:	69fb      	ldr	r3, [r7, #28]
 800fda8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fdae:	69bb      	ldr	r3, [r7, #24]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d005      	beq.n	800fdc0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fdb4:	69b8      	ldr	r0, [r7, #24]
 800fdb6:	f7fd f943 	bl	800d040 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fdba:	69bb      	ldr	r3, [r7, #24]
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d002      	beq.n	800fdcc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	2200      	movs	r2, #0
 800fdca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fdcc:	68fa      	ldr	r2, [r7, #12]
 800fdce:	490d      	ldr	r1, [pc, #52]	; (800fe04 <f_mount+0x88>)
 800fdd0:	69fb      	ldr	r3, [r7, #28]
 800fdd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d002      	beq.n	800fde2 <f_mount+0x66>
 800fddc:	79fb      	ldrb	r3, [r7, #7]
 800fdde:	2b01      	cmp	r3, #1
 800fde0:	d001      	beq.n	800fde6 <f_mount+0x6a>
 800fde2:	2300      	movs	r3, #0
 800fde4:	e00a      	b.n	800fdfc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fde6:	f107 010c 	add.w	r1, r7, #12
 800fdea:	f107 0308 	add.w	r3, r7, #8
 800fdee:	2200      	movs	r2, #0
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f7ff fc31 	bl	800f658 <find_volume>
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fdfa:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	3720      	adds	r7, #32
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd80      	pop	{r7, pc}
 800fe04:	20001de0 	.word	0x20001de0

0800fe08 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fe08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fe0c:	b0a6      	sub	sp, #152	; 0x98
 800fe0e:	af00      	add	r7, sp, #0
 800fe10:	61f8      	str	r0, [r7, #28]
 800fe12:	61b9      	str	r1, [r7, #24]
 800fe14:	4613      	mov	r3, r2
 800fe16:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fe18:	69fb      	ldr	r3, [r7, #28]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d101      	bne.n	800fe22 <f_open+0x1a>
 800fe1e:	2309      	movs	r3, #9
 800fe20:	e2ae      	b.n	8010380 <f_open+0x578>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fe22:	7dfb      	ldrb	r3, [r7, #23]
 800fe24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fe28:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 800fe2a:	7dfa      	ldrb	r2, [r7, #23]
 800fe2c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800fe30:	f107 0318 	add.w	r3, r7, #24
 800fe34:	4618      	mov	r0, r3
 800fe36:	f7ff fc0f 	bl	800f658 <find_volume>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	if (res == FR_OK) {
 800fe40:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	f040 8292 	bne.w	801036e <f_open+0x566>
		dj.obj.fs = fs;
 800fe4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe4c:	62bb      	str	r3, [r7, #40]	; 0x28
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800fe4e:	69ba      	ldr	r2, [r7, #24]
 800fe50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fe54:	4611      	mov	r1, r2
 800fe56:	4618      	mov	r0, r3
 800fe58:	f7ff faac 	bl	800f3b4 <follow_path>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fe62:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d11a      	bne.n	800fea0 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fe6a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800fe6e:	b25b      	sxtb	r3, r3
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	da03      	bge.n	800fe7c <f_open+0x74>
				res = FR_INVALID_NAME;
 800fe74:	2306      	movs	r3, #6
 800fe76:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800fe7a:	e011      	b.n	800fea0 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fe7c:	7dfb      	ldrb	r3, [r7, #23]
 800fe7e:	f023 0301 	bic.w	r3, r3, #1
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	bf14      	ite	ne
 800fe86:	2301      	movne	r3, #1
 800fe88:	2300      	moveq	r3, #0
 800fe8a:	b2db      	uxtb	r3, r3
 800fe8c:	461a      	mov	r2, r3
 800fe8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fe92:	4611      	mov	r1, r2
 800fe94:	4618      	mov	r0, r3
 800fe96:	f7fc ff8b 	bl	800cdb0 <chk_lock>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fea0:	7dfb      	ldrb	r3, [r7, #23]
 800fea2:	f003 031c 	and.w	r3, r3, #28
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	f000 8115 	beq.w	80100d6 <f_open+0x2ce>
			if (res != FR_OK) {					/* No file, create new */
 800feac:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d017      	beq.n	800fee4 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800feb4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800feb8:	2b04      	cmp	r3, #4
 800feba:	d10e      	bne.n	800feda <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800febc:	f7fc ffd4 	bl	800ce68 <enq_lock>
 800fec0:	4603      	mov	r3, r0
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d006      	beq.n	800fed4 <f_open+0xcc>
 800fec6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800feca:	4618      	mov	r0, r3
 800fecc:	f7fe ff14 	bl	800ecf8 <dir_register>
 800fed0:	4603      	mov	r3, r0
 800fed2:	e000      	b.n	800fed6 <f_open+0xce>
 800fed4:	2312      	movs	r3, #18
 800fed6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800feda:	7dfb      	ldrb	r3, [r7, #23]
 800fedc:	f043 0308 	orr.w	r3, r3, #8
 800fee0:	75fb      	strb	r3, [r7, #23]
 800fee2:	e011      	b.n	800ff08 <f_open+0x100>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fee4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800fee8:	f003 0311 	and.w	r3, r3, #17
 800feec:	2b00      	cmp	r3, #0
 800feee:	d003      	beq.n	800fef8 <f_open+0xf0>
					res = FR_DENIED;
 800fef0:	2307      	movs	r3, #7
 800fef2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800fef6:	e007      	b.n	800ff08 <f_open+0x100>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fef8:	7dfb      	ldrb	r3, [r7, #23]
 800fefa:	f003 0304 	and.w	r3, r3, #4
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d002      	beq.n	800ff08 <f_open+0x100>
 800ff02:	2308      	movs	r3, #8
 800ff04:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ff08:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	f040 80fe 	bne.w	801010e <f_open+0x306>
 800ff12:	7dfb      	ldrb	r3, [r7, #23]
 800ff14:	f003 0308 	and.w	r3, r3, #8
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	f000 80f8 	beq.w	801010e <f_open+0x306>
				dw = GET_FATTIME();
 800ff1e:	f7f9 fe51 	bl	8009bc4 <get_fattime>
 800ff22:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800ff26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff28:	781b      	ldrb	r3, [r3, #0]
 800ff2a:	2b04      	cmp	r3, #4
 800ff2c:	f040 8084 	bne.w	8010038 <f_open+0x230>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800ff30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff32:	69fb      	ldr	r3, [r7, #28]
 800ff34:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800ff36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff38:	691b      	ldr	r3, [r3, #16]
 800ff3a:	3334      	adds	r3, #52	; 0x34
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f7fc fceb 	bl	800c918 <ld_dword>
 800ff42:	4602      	mov	r2, r0
 800ff44:	69fb      	ldr	r3, [r7, #28]
 800ff46:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800ff48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff4a:	691b      	ldr	r3, [r3, #16]
 800ff4c:	3338      	adds	r3, #56	; 0x38
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f7fc fd05 	bl	800c95e <ld_qword>
 800ff54:	4602      	mov	r2, r0
 800ff56:	460b      	mov	r3, r1
 800ff58:	69f9      	ldr	r1, [r7, #28]
 800ff5a:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800ff5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff60:	691b      	ldr	r3, [r3, #16]
 800ff62:	3321      	adds	r3, #33	; 0x21
 800ff64:	781b      	ldrb	r3, [r3, #0]
 800ff66:	f003 0302 	and.w	r3, r3, #2
 800ff6a:	b2da      	uxtb	r2, r3
 800ff6c:	69fb      	ldr	r3, [r7, #28]
 800ff6e:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800ff70:	69fb      	ldr	r3, [r7, #28]
 800ff72:	2200      	movs	r2, #0
 800ff74:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800ff76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff78:	691b      	ldr	r3, [r3, #16]
 800ff7a:	3308      	adds	r3, #8
 800ff7c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800ff80:	4618      	mov	r0, r3
 800ff82:	f7fc fde2 	bl	800cb4a <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800ff86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff88:	691b      	ldr	r3, [r3, #16]
 800ff8a:	3314      	adds	r3, #20
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800ff90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff92:	691b      	ldr	r3, [r3, #16]
 800ff94:	330c      	adds	r3, #12
 800ff96:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f7fc fdd5 	bl	800cb4a <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800ffa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffa2:	691b      	ldr	r3, [r3, #16]
 800ffa4:	3315      	adds	r3, #21
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800ffaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffac:	691b      	ldr	r3, [r3, #16]
 800ffae:	3304      	adds	r3, #4
 800ffb0:	2220      	movs	r2, #32
 800ffb2:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800ffb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffb6:	691b      	ldr	r3, [r3, #16]
 800ffb8:	3334      	adds	r3, #52	; 0x34
 800ffba:	2100      	movs	r1, #0
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f7fc fdc4 	bl	800cb4a <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800ffc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc4:	691b      	ldr	r3, [r3, #16]
 800ffc6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ffca:	f04f 0200 	mov.w	r2, #0
 800ffce:	f04f 0300 	mov.w	r3, #0
 800ffd2:	4608      	mov	r0, r1
 800ffd4:	f7fc fde5 	bl	800cba2 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800ffd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffda:	691b      	ldr	r3, [r3, #16]
 800ffdc:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800ffe0:	f04f 0200 	mov.w	r2, #0
 800ffe4:	f04f 0300 	mov.w	r3, #0
 800ffe8:	4608      	mov	r0, r1
 800ffea:	f7fc fdda 	bl	800cba2 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800ffee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fff0:	691b      	ldr	r3, [r3, #16]
 800fff2:	3321      	adds	r3, #33	; 0x21
 800fff4:	2201      	movs	r2, #1
 800fff6:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800fff8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fffc:	4618      	mov	r0, r3
 800fffe:	f7fe fbc9 	bl	800e794 <store_xdir>
 8010002:	4603      	mov	r3, r0
 8010004:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8010008:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801000c:	2b00      	cmp	r3, #0
 801000e:	d17e      	bne.n	801010e <f_open+0x306>
 8010010:	69fb      	ldr	r3, [r7, #28]
 8010012:	689b      	ldr	r3, [r3, #8]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d07a      	beq.n	801010e <f_open+0x306>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8010018:	69f8      	ldr	r0, [r7, #28]
 801001a:	69fb      	ldr	r3, [r7, #28]
 801001c:	689b      	ldr	r3, [r3, #8]
 801001e:	2200      	movs	r2, #0
 8010020:	4619      	mov	r1, r3
 8010022:	f7fd fc81 	bl	800d928 <remove_chain>
 8010026:	4603      	mov	r3, r0
 8010028:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 801002c:	69fb      	ldr	r3, [r7, #28]
 801002e:	689a      	ldr	r2, [r3, #8]
 8010030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010032:	3a01      	subs	r2, #1
 8010034:	615a      	str	r2, [r3, #20]
 8010036:	e06a      	b.n	801010e <f_open+0x306>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801003a:	330e      	adds	r3, #14
 801003c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8010040:	4618      	mov	r0, r3
 8010042:	f7fc fd82 	bl	800cb4a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010046:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010048:	3316      	adds	r3, #22
 801004a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801004e:	4618      	mov	r0, r3
 8010050:	f7fc fd7b 	bl	800cb4a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010054:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010056:	330b      	adds	r3, #11
 8010058:	2220      	movs	r2, #32
 801005a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801005c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801005e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010060:	4611      	mov	r1, r2
 8010062:	4618      	mov	r0, r3
 8010064:	f7fe f810 	bl	800e088 <ld_clust>
 8010068:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801006c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801006e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010070:	2200      	movs	r2, #0
 8010072:	4618      	mov	r0, r3
 8010074:	f7fe f827 	bl	800e0c6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010078:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801007a:	331c      	adds	r3, #28
 801007c:	2100      	movs	r1, #0
 801007e:	4618      	mov	r0, r3
 8010080:	f7fc fd63 	bl	800cb4a <st_dword>
					fs->wflag = 1;
 8010084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010086:	2201      	movs	r2, #1
 8010088:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801008a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801008e:	2b00      	cmp	r3, #0
 8010090:	d03d      	beq.n	801010e <f_open+0x306>
						dw = fs->winsect;
 8010092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010096:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
						res = remove_chain(&dj.obj, cl, 0);
 801009a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801009e:	2200      	movs	r2, #0
 80100a0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80100a4:	4618      	mov	r0, r3
 80100a6:	f7fd fc3f 	bl	800d928 <remove_chain>
 80100aa:	4603      	mov	r3, r0
 80100ac:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						if (res == FR_OK) {
 80100b0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d12a      	bne.n	801010e <f_open+0x306>
							res = move_window(fs, dw);
 80100b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ba:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80100be:	4618      	mov	r0, r3
 80100c0:	f7fd f826 	bl	800d110 <move_window>
 80100c4:	4603      	mov	r3, r0
 80100c6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80100ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80100d0:	3a01      	subs	r2, #1
 80100d2:	615a      	str	r2, [r3, #20]
 80100d4:	e01b      	b.n	801010e <f_open+0x306>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80100d6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d117      	bne.n	801010e <f_open+0x306>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80100de:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80100e2:	f003 0310 	and.w	r3, r3, #16
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d003      	beq.n	80100f2 <f_open+0x2ea>
					res = FR_NO_FILE;
 80100ea:	2304      	movs	r3, #4
 80100ec:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80100f0:	e00d      	b.n	801010e <f_open+0x306>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80100f2:	7dfb      	ldrb	r3, [r7, #23]
 80100f4:	f003 0302 	and.w	r3, r3, #2
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d008      	beq.n	801010e <f_open+0x306>
 80100fc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010100:	f003 0301 	and.w	r3, r3, #1
 8010104:	2b00      	cmp	r3, #0
 8010106:	d002      	beq.n	801010e <f_open+0x306>
						res = FR_DENIED;
 8010108:	2307      	movs	r3, #7
 801010a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					}
				}
			}
		}
		if (res == FR_OK) {
 801010e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010112:	2b00      	cmp	r3, #0
 8010114:	d128      	bne.n	8010168 <f_open+0x360>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010116:	7dfb      	ldrb	r3, [r7, #23]
 8010118:	f003 0308 	and.w	r3, r3, #8
 801011c:	2b00      	cmp	r3, #0
 801011e:	d003      	beq.n	8010128 <f_open+0x320>
				mode |= FA_MODIFIED;
 8010120:	7dfb      	ldrb	r3, [r7, #23]
 8010122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010126:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801012a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801012c:	69fb      	ldr	r3, [r7, #28]
 801012e:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 8010130:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010132:	69fb      	ldr	r3, [r7, #28]
 8010134:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010136:	7dfb      	ldrb	r3, [r7, #23]
 8010138:	f023 0301 	bic.w	r3, r3, #1
 801013c:	2b00      	cmp	r3, #0
 801013e:	bf14      	ite	ne
 8010140:	2301      	movne	r3, #1
 8010142:	2300      	moveq	r3, #0
 8010144:	b2db      	uxtb	r3, r3
 8010146:	461a      	mov	r2, r3
 8010148:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801014c:	4611      	mov	r1, r2
 801014e:	4618      	mov	r0, r3
 8010150:	f7fc feac 	bl	800ceac <inc_lock>
 8010154:	4602      	mov	r2, r0
 8010156:	69fb      	ldr	r3, [r7, #28]
 8010158:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801015a:	69fb      	ldr	r3, [r7, #28]
 801015c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801015e:	2b00      	cmp	r3, #0
 8010160:	d102      	bne.n	8010168 <f_open+0x360>
 8010162:	2302      	movs	r3, #2
 8010164:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010168:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801016c:	2b00      	cmp	r3, #0
 801016e:	f040 80fe 	bne.w	801036e <f_open+0x566>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8010172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010174:	781b      	ldrb	r3, [r3, #0]
 8010176:	2b04      	cmp	r3, #4
 8010178:	d12d      	bne.n	80101d6 <f_open+0x3ce>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 801017a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801017c:	69fb      	ldr	r3, [r7, #28]
 801017e:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8010180:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8010184:	4613      	mov	r3, r2
 8010186:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801018a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801018e:	431a      	orrs	r2, r3
 8010190:	69fb      	ldr	r3, [r7, #28]
 8010192:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8010194:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010196:	69fb      	ldr	r3, [r7, #28]
 8010198:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 801019a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801019c:	691b      	ldr	r3, [r3, #16]
 801019e:	3334      	adds	r3, #52	; 0x34
 80101a0:	4618      	mov	r0, r3
 80101a2:	f7fc fbb9 	bl	800c918 <ld_dword>
 80101a6:	4602      	mov	r2, r0
 80101a8:	69fb      	ldr	r3, [r7, #28]
 80101aa:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80101ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ae:	691b      	ldr	r3, [r3, #16]
 80101b0:	3338      	adds	r3, #56	; 0x38
 80101b2:	4618      	mov	r0, r3
 80101b4:	f7fc fbd3 	bl	800c95e <ld_qword>
 80101b8:	4602      	mov	r2, r0
 80101ba:	460b      	mov	r3, r1
 80101bc:	69f9      	ldr	r1, [r7, #28]
 80101be:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80101c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c4:	691b      	ldr	r3, [r3, #16]
 80101c6:	3321      	adds	r3, #33	; 0x21
 80101c8:	781b      	ldrb	r3, [r3, #0]
 80101ca:	f003 0302 	and.w	r3, r3, #2
 80101ce:	b2da      	uxtb	r2, r3
 80101d0:	69fb      	ldr	r3, [r7, #28]
 80101d2:	71da      	strb	r2, [r3, #7]
 80101d4:	e016      	b.n	8010204 <f_open+0x3fc>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80101d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80101da:	4611      	mov	r1, r2
 80101dc:	4618      	mov	r0, r3
 80101de:	f7fd ff53 	bl	800e088 <ld_clust>
 80101e2:	4602      	mov	r2, r0
 80101e4:	69fb      	ldr	r3, [r7, #28]
 80101e6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80101e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80101ea:	331c      	adds	r3, #28
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7fc fb93 	bl	800c918 <ld_dword>
 80101f2:	4603      	mov	r3, r0
 80101f4:	2200      	movs	r2, #0
 80101f6:	60bb      	str	r3, [r7, #8]
 80101f8:	60fa      	str	r2, [r7, #12]
 80101fa:	69fb      	ldr	r3, [r7, #28]
 80101fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010200:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010204:	69fb      	ldr	r3, [r7, #28]
 8010206:	2200      	movs	r2, #0
 8010208:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801020a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801020c:	69fb      	ldr	r3, [r7, #28]
 801020e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010212:	88da      	ldrh	r2, [r3, #6]
 8010214:	69fb      	ldr	r3, [r7, #28]
 8010216:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010218:	69fb      	ldr	r3, [r7, #28]
 801021a:	7dfa      	ldrb	r2, [r7, #23]
 801021c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 8010220:	69fb      	ldr	r3, [r7, #28]
 8010222:	2200      	movs	r2, #0
 8010224:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8010228:	69fb      	ldr	r3, [r7, #28]
 801022a:	2200      	movs	r2, #0
 801022c:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 801022e:	69f9      	ldr	r1, [r7, #28]
 8010230:	f04f 0200 	mov.w	r2, #0
 8010234:	f04f 0300 	mov.w	r3, #0
 8010238:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801023c:	69fb      	ldr	r3, [r7, #28]
 801023e:	3354      	adds	r3, #84	; 0x54
 8010240:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010244:	2100      	movs	r1, #0
 8010246:	4618      	mov	r0, r3
 8010248:	f7fc fd54 	bl	800ccf4 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801024c:	7dfb      	ldrb	r3, [r7, #23]
 801024e:	f003 0320 	and.w	r3, r3, #32
 8010252:	2b00      	cmp	r3, #0
 8010254:	f000 808b 	beq.w	801036e <f_open+0x566>
 8010258:	69fb      	ldr	r3, [r7, #28]
 801025a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801025e:	4313      	orrs	r3, r2
 8010260:	f000 8085 	beq.w	801036e <f_open+0x566>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010264:	69fb      	ldr	r3, [r7, #28]
 8010266:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801026a:	69f9      	ldr	r1, [r7, #28]
 801026c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010272:	895b      	ldrh	r3, [r3, #10]
 8010274:	025b      	lsls	r3, r3, #9
 8010276:	67fb      	str	r3, [r7, #124]	; 0x7c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010278:	69fb      	ldr	r3, [r7, #28]
 801027a:	689b      	ldr	r3, [r3, #8]
 801027c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010280:	69fb      	ldr	r3, [r7, #28]
 8010282:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010286:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 801028a:	e026      	b.n	80102da <f_open+0x4d2>
					clst = get_fat(&fp->obj, clst);
 801028c:	69fb      	ldr	r3, [r7, #28]
 801028e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010292:	4618      	mov	r0, r3
 8010294:	f7fc fff8 	bl	800d288 <get_fat>
 8010298:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
					if (clst <= 1) res = FR_INT_ERR;
 801029c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80102a0:	2b01      	cmp	r3, #1
 80102a2:	d802      	bhi.n	80102aa <f_open+0x4a2>
 80102a4:	2302      	movs	r3, #2
 80102a6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80102aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80102ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102b2:	d102      	bne.n	80102ba <f_open+0x4b2>
 80102b4:	2301      	movs	r3, #1
 80102b6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80102ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80102bc:	2200      	movs	r2, #0
 80102be:	469a      	mov	sl, r3
 80102c0:	4693      	mov	fp, r2
 80102c2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80102c6:	ebb2 010a 	subs.w	r1, r2, sl
 80102ca:	6039      	str	r1, [r7, #0]
 80102cc:	eb63 030b 	sbc.w	r3, r3, fp
 80102d0:	607b      	str	r3, [r7, #4]
 80102d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102d6:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 80102da:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d109      	bne.n	80102f6 <f_open+0x4ee>
 80102e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80102e4:	2200      	movs	r2, #0
 80102e6:	4698      	mov	r8, r3
 80102e8:	4691      	mov	r9, r2
 80102ea:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80102ee:	4590      	cmp	r8, r2
 80102f0:	eb79 0303 	sbcs.w	r3, r9, r3
 80102f4:	d3ca      	bcc.n	801028c <f_open+0x484>
				}
				fp->clust = clst;
 80102f6:	69fb      	ldr	r3, [r7, #28]
 80102f8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80102fc:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80102fe:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010302:	2b00      	cmp	r3, #0
 8010304:	d133      	bne.n	801036e <f_open+0x566>
 8010306:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801030a:	f3c2 0408 	ubfx	r4, r2, #0, #9
 801030e:	2500      	movs	r5, #0
 8010310:	ea54 0305 	orrs.w	r3, r4, r5
 8010314:	d02b      	beq.n	801036e <f_open+0x566>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010318:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801031c:	4618      	mov	r0, r3
 801031e:	f7fc ff93 	bl	800d248 <clust2sect>
 8010322:	67b8      	str	r0, [r7, #120]	; 0x78
 8010324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010326:	2b00      	cmp	r3, #0
 8010328:	d103      	bne.n	8010332 <f_open+0x52a>
						res = FR_INT_ERR;
 801032a:	2302      	movs	r3, #2
 801032c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8010330:	e01d      	b.n	801036e <f_open+0x566>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010332:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8010336:	f04f 0200 	mov.w	r2, #0
 801033a:	f04f 0300 	mov.w	r3, #0
 801033e:	0a42      	lsrs	r2, r0, #9
 8010340:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8010344:	0a4b      	lsrs	r3, r1, #9
 8010346:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010348:	441a      	add	r2, r3
 801034a:	69fb      	ldr	r3, [r7, #28]
 801034c:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801034e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010350:	7858      	ldrb	r0, [r3, #1]
 8010352:	69fb      	ldr	r3, [r7, #28]
 8010354:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010358:	69fb      	ldr	r3, [r7, #28]
 801035a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801035c:	2301      	movs	r3, #1
 801035e:	f7fc fa65 	bl	800c82c <disk_read>
 8010362:	4603      	mov	r3, r0
 8010364:	2b00      	cmp	r3, #0
 8010366:	d002      	beq.n	801036e <f_open+0x566>
 8010368:	2301      	movs	r3, #1
 801036a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801036e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010372:	2b00      	cmp	r3, #0
 8010374:	d002      	beq.n	801037c <f_open+0x574>
 8010376:	69fb      	ldr	r3, [r7, #28]
 8010378:	2200      	movs	r2, #0
 801037a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801037c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8010380:	4618      	mov	r0, r3
 8010382:	3798      	adds	r7, #152	; 0x98
 8010384:	46bd      	mov	sp, r7
 8010386:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801038a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801038a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801038e:	b08c      	sub	sp, #48	; 0x30
 8010390:	af00      	add	r7, sp, #0
 8010392:	60f8      	str	r0, [r7, #12]
 8010394:	60b9      	str	r1, [r7, #8]
 8010396:	607a      	str	r2, [r7, #4]
 8010398:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	2200      	movs	r2, #0
 80103a2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	f107 0210 	add.w	r2, r7, #16
 80103aa:	4611      	mov	r1, r2
 80103ac:	4618      	mov	r0, r3
 80103ae:	f7ff fcaf 	bl	800fd10 <validate>
 80103b2:	4603      	mov	r3, r0
 80103b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80103b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d108      	bne.n	80103d2 <f_write+0x48>
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80103c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80103ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d002      	beq.n	80103d8 <f_write+0x4e>
 80103d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80103d6:	e187      	b.n	80106e8 <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80103de:	f003 0302 	and.w	r3, r3, #2
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d101      	bne.n	80103ea <f_write+0x60>
 80103e6:	2307      	movs	r3, #7
 80103e8:	e17e      	b.n	80106e8 <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80103ea:	693b      	ldr	r3, [r7, #16]
 80103ec:	781b      	ldrb	r3, [r3, #0]
 80103ee:	2b04      	cmp	r3, #4
 80103f0:	f000 816a 	beq.w	80106c8 <f_write+0x33e>
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	18d1      	adds	r1, r2, r3
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010404:	4613      	mov	r3, r2
 8010406:	4299      	cmp	r1, r3
 8010408:	f080 815e 	bcs.w	80106c8 <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010412:	4613      	mov	r3, r2
 8010414:	43db      	mvns	r3, r3
 8010416:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010418:	e156      	b.n	80106c8 <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010420:	f3c2 0408 	ubfx	r4, r2, #0, #9
 8010424:	2500      	movs	r5, #0
 8010426:	ea54 0305 	orrs.w	r3, r4, r5
 801042a:	f040 80fb 	bne.w	8010624 <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8010434:	f04f 0200 	mov.w	r2, #0
 8010438:	f04f 0300 	mov.w	r3, #0
 801043c:	0a42      	lsrs	r2, r0, #9
 801043e:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8010442:	0a4b      	lsrs	r3, r1, #9
 8010444:	693b      	ldr	r3, [r7, #16]
 8010446:	895b      	ldrh	r3, [r3, #10]
 8010448:	3b01      	subs	r3, #1
 801044a:	4013      	ands	r3, r2
 801044c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801044e:	69bb      	ldr	r3, [r7, #24]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d146      	bne.n	80104e2 <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801045a:	4313      	orrs	r3, r2
 801045c:	d10c      	bne.n	8010478 <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	689b      	ldr	r3, [r3, #8]
 8010462:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010466:	2b00      	cmp	r3, #0
 8010468:	d11a      	bne.n	80104a0 <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	2100      	movs	r1, #0
 801046e:	4618      	mov	r0, r3
 8010470:	f7fd fb0e 	bl	800da90 <create_chain>
 8010474:	62b8      	str	r0, [r7, #40]	; 0x28
 8010476:	e013      	b.n	80104a0 <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801047c:	2b00      	cmp	r3, #0
 801047e:	d007      	beq.n	8010490 <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010486:	68f8      	ldr	r0, [r7, #12]
 8010488:	f7fd fc03 	bl	800dc92 <clmt_clust>
 801048c:	62b8      	str	r0, [r7, #40]	; 0x28
 801048e:	e007      	b.n	80104a0 <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010490:	68fa      	ldr	r2, [r7, #12]
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010496:	4619      	mov	r1, r3
 8010498:	4610      	mov	r0, r2
 801049a:	f7fd faf9 	bl	800da90 <create_chain>
 801049e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80104a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	f000 8115 	beq.w	80106d2 <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80104a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104aa:	2b01      	cmp	r3, #1
 80104ac:	d105      	bne.n	80104ba <f_write+0x130>
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	2202      	movs	r2, #2
 80104b2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80104b6:	2302      	movs	r3, #2
 80104b8:	e116      	b.n	80106e8 <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80104ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104c0:	d105      	bne.n	80104ce <f_write+0x144>
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	2201      	movs	r2, #1
 80104c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80104ca:	2301      	movs	r3, #1
 80104cc:	e10c      	b.n	80106e8 <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104d2:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	689b      	ldr	r3, [r3, #8]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d102      	bne.n	80104e2 <f_write+0x158>
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104e0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80104e8:	b25b      	sxtb	r3, r3
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	da1b      	bge.n	8010526 <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80104ee:	693b      	ldr	r3, [r7, #16]
 80104f0:	7858      	ldrb	r0, [r3, #1]
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80104fc:	2301      	movs	r3, #1
 80104fe:	f7fc f9b5 	bl	800c86c <disk_write>
 8010502:	4603      	mov	r3, r0
 8010504:	2b00      	cmp	r3, #0
 8010506:	d005      	beq.n	8010514 <f_write+0x18a>
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	2201      	movs	r2, #1
 801050c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010510:	2301      	movs	r3, #1
 8010512:	e0e9      	b.n	80106e8 <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801051a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801051e:	b2da      	uxtb	r2, r3
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010526:	693a      	ldr	r2, [r7, #16]
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801052c:	4619      	mov	r1, r3
 801052e:	4610      	mov	r0, r2
 8010530:	f7fc fe8a 	bl	800d248 <clust2sect>
 8010534:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010536:	697b      	ldr	r3, [r7, #20]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d105      	bne.n	8010548 <f_write+0x1be>
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	2202      	movs	r2, #2
 8010540:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010544:	2302      	movs	r3, #2
 8010546:	e0cf      	b.n	80106e8 <f_write+0x35e>
			sect += csect;
 8010548:	697a      	ldr	r2, [r7, #20]
 801054a:	69bb      	ldr	r3, [r7, #24]
 801054c:	4413      	add	r3, r2
 801054e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	0a5b      	lsrs	r3, r3, #9
 8010554:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010556:	6a3b      	ldr	r3, [r7, #32]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d03f      	beq.n	80105dc <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801055c:	69ba      	ldr	r2, [r7, #24]
 801055e:	6a3b      	ldr	r3, [r7, #32]
 8010560:	4413      	add	r3, r2
 8010562:	693a      	ldr	r2, [r7, #16]
 8010564:	8952      	ldrh	r2, [r2, #10]
 8010566:	4293      	cmp	r3, r2
 8010568:	d905      	bls.n	8010576 <f_write+0x1ec>
					cc = fs->csize - csect;
 801056a:	693b      	ldr	r3, [r7, #16]
 801056c:	895b      	ldrh	r3, [r3, #10]
 801056e:	461a      	mov	r2, r3
 8010570:	69bb      	ldr	r3, [r7, #24]
 8010572:	1ad3      	subs	r3, r2, r3
 8010574:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010576:	693b      	ldr	r3, [r7, #16]
 8010578:	7858      	ldrb	r0, [r3, #1]
 801057a:	6a3b      	ldr	r3, [r7, #32]
 801057c:	697a      	ldr	r2, [r7, #20]
 801057e:	69f9      	ldr	r1, [r7, #28]
 8010580:	f7fc f974 	bl	800c86c <disk_write>
 8010584:	4603      	mov	r3, r0
 8010586:	2b00      	cmp	r3, #0
 8010588:	d005      	beq.n	8010596 <f_write+0x20c>
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	2201      	movs	r2, #1
 801058e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010592:	2301      	movs	r3, #1
 8010594:	e0a8      	b.n	80106e8 <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801059a:	697b      	ldr	r3, [r7, #20]
 801059c:	1ad3      	subs	r3, r2, r3
 801059e:	6a3a      	ldr	r2, [r7, #32]
 80105a0:	429a      	cmp	r2, r3
 80105a2:	d917      	bls.n	80105d4 <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	f103 0054 	add.w	r0, r3, #84	; 0x54
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80105ae:	697b      	ldr	r3, [r7, #20]
 80105b0:	1ad3      	subs	r3, r2, r3
 80105b2:	025b      	lsls	r3, r3, #9
 80105b4:	69fa      	ldr	r2, [r7, #28]
 80105b6:	4413      	add	r3, r2
 80105b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80105bc:	4619      	mov	r1, r3
 80105be:	f7fc fb78 	bl	800ccb2 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80105c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105cc:	b2da      	uxtb	r2, r3
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80105d4:	6a3b      	ldr	r3, [r7, #32]
 80105d6:	025b      	lsls	r3, r3, #9
 80105d8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80105da:	e04a      	b.n	8010672 <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105e0:	697a      	ldr	r2, [r7, #20]
 80105e2:	429a      	cmp	r2, r3
 80105e4:	d01b      	beq.n	801061e <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80105f2:	4290      	cmp	r0, r2
 80105f4:	eb71 0303 	sbcs.w	r3, r1, r3
 80105f8:	d211      	bcs.n	801061e <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80105fa:	693b      	ldr	r3, [r7, #16]
 80105fc:	7858      	ldrb	r0, [r3, #1]
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010604:	2301      	movs	r3, #1
 8010606:	697a      	ldr	r2, [r7, #20]
 8010608:	f7fc f910 	bl	800c82c <disk_read>
 801060c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801060e:	2b00      	cmp	r3, #0
 8010610:	d005      	beq.n	801061e <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	2201      	movs	r2, #1
 8010616:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801061a:	2301      	movs	r3, #1
 801061c:	e064      	b.n	80106e8 <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	697a      	ldr	r2, [r7, #20]
 8010622:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801062a:	4613      	mov	r3, r2
 801062c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010630:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010634:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	429a      	cmp	r2, r3
 801063c:	d901      	bls.n	8010642 <f_write+0x2b8>
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801064e:	4613      	mov	r3, r2
 8010650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010654:	440b      	add	r3, r1
 8010656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010658:	69f9      	ldr	r1, [r7, #28]
 801065a:	4618      	mov	r0, r3
 801065c:	f7fc fb29 	bl	800ccb2 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010666:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801066a:	b2da      	uxtb	r2, r3
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010672:	69fa      	ldr	r2, [r7, #28]
 8010674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010676:	4413      	add	r3, r2
 8010678:	61fb      	str	r3, [r7, #28]
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010680:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010682:	2000      	movs	r0, #0
 8010684:	4688      	mov	r8, r1
 8010686:	4681      	mov	r9, r0
 8010688:	eb12 0a08 	adds.w	sl, r2, r8
 801068c:	eb43 0b09 	adc.w	fp, r3, r9
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801069c:	68f9      	ldr	r1, [r7, #12]
 801069e:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 80106a2:	4282      	cmp	r2, r0
 80106a4:	eb73 0c01 	sbcs.w	ip, r3, r1
 80106a8:	d201      	bcs.n	80106ae <f_write+0x324>
 80106aa:	4602      	mov	r2, r0
 80106ac:	460b      	mov	r3, r1
 80106ae:	68f9      	ldr	r1, [r7, #12]
 80106b0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	681a      	ldr	r2, [r3, #0]
 80106b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ba:	441a      	add	r2, r3
 80106bc:	683b      	ldr	r3, [r7, #0]
 80106be:	601a      	str	r2, [r3, #0]
 80106c0:	687a      	ldr	r2, [r7, #4]
 80106c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106c4:	1ad3      	subs	r3, r2, r3
 80106c6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	f47f aea5 	bne.w	801041a <f_write+0x90>
 80106d0:	e000      	b.n	80106d4 <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80106d2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80106da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106de:	b2da      	uxtb	r2, r3
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 80106e6:	2300      	movs	r3, #0
}
 80106e8:	4618      	mov	r0, r3
 80106ea:	3730      	adds	r7, #48	; 0x30
 80106ec:	46bd      	mov	sp, r7
 80106ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080106f2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80106f2:	b580      	push	{r7, lr}
 80106f4:	b09a      	sub	sp, #104	; 0x68
 80106f6:	af00      	add	r7, sp, #0
 80106f8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010700:	4611      	mov	r1, r2
 8010702:	4618      	mov	r0, r3
 8010704:	f7ff fb04 	bl	800fd10 <validate>
 8010708:	4603      	mov	r3, r0
 801070a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 801070e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010712:	2b00      	cmp	r3, #0
 8010714:	f040 8105 	bne.w	8010922 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801071e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010722:	2b00      	cmp	r3, #0
 8010724:	f000 80fd 	beq.w	8010922 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801072e:	b25b      	sxtb	r3, r3
 8010730:	2b00      	cmp	r3, #0
 8010732:	da17      	bge.n	8010764 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010734:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010736:	7858      	ldrb	r0, [r3, #1]
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010742:	2301      	movs	r3, #1
 8010744:	f7fc f892 	bl	800c86c <disk_write>
 8010748:	4603      	mov	r3, r0
 801074a:	2b00      	cmp	r3, #0
 801074c:	d001      	beq.n	8010752 <f_sync+0x60>
 801074e:	2301      	movs	r3, #1
 8010750:	e0e9      	b.n	8010926 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801075c:	b2da      	uxtb	r2, r3
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010764:	f7f9 fa2e 	bl	8009bc4 <get_fattime>
 8010768:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 801076a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801076c:	781b      	ldrb	r3, [r3, #0]
 801076e:	2b04      	cmp	r3, #4
 8010770:	f040 808c 	bne.w	801088c <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	4618      	mov	r0, r3
 8010778:	f7fd f876 	bl	800d868 <fill_first_frag>
 801077c:	4603      	mov	r3, r0
 801077e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 8010782:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010786:	2b00      	cmp	r3, #0
 8010788:	d10a      	bne.n	80107a0 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 801078a:	6878      	ldr	r0, [r7, #4]
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010790:	f04f 32ff 	mov.w	r2, #4294967295
 8010794:	4619      	mov	r1, r3
 8010796:	f7fd f896 	bl	800d8c6 <fill_last_frag>
 801079a:	4603      	mov	r3, r0
 801079c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 80107a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	f040 80bc 	bne.w	8010922 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 80107aa:	687a      	ldr	r2, [r7, #4]
 80107ac:	f107 0308 	add.w	r3, r7, #8
 80107b0:	4611      	mov	r1, r2
 80107b2:	4618      	mov	r0, r3
 80107b4:	f7fd ffb8 	bl	800e728 <load_obj_dir>
 80107b8:	4603      	mov	r3, r0
 80107ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 80107be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	f040 80ad 	bne.w	8010922 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 80107c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80107ca:	691b      	ldr	r3, [r3, #16]
 80107cc:	3304      	adds	r3, #4
 80107ce:	781a      	ldrb	r2, [r3, #0]
 80107d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80107d2:	691b      	ldr	r3, [r3, #16]
 80107d4:	3304      	adds	r3, #4
 80107d6:	f042 0220 	orr.w	r2, r2, #32
 80107da:	b2d2      	uxtb	r2, r2
 80107dc:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	79da      	ldrb	r2, [r3, #7]
 80107e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80107e4:	691b      	ldr	r3, [r3, #16]
 80107e6:	3321      	adds	r3, #33	; 0x21
 80107e8:	f042 0201 	orr.w	r2, r2, #1
 80107ec:	b2d2      	uxtb	r2, r2
 80107ee:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 80107f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80107f2:	691b      	ldr	r3, [r3, #16]
 80107f4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	689b      	ldr	r3, [r3, #8]
 80107fc:	4619      	mov	r1, r3
 80107fe:	4610      	mov	r0, r2
 8010800:	f7fc f9a3 	bl	800cb4a <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8010804:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010806:	691b      	ldr	r3, [r3, #16]
 8010808:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010812:	4608      	mov	r0, r1
 8010814:	f7fc f9c5 	bl	800cba2 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8010818:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801081a:	691b      	ldr	r3, [r3, #16]
 801081c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010826:	4608      	mov	r0, r1
 8010828:	f7fc f9bb 	bl	800cba2 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 801082c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801082e:	691b      	ldr	r3, [r3, #16]
 8010830:	330c      	adds	r3, #12
 8010832:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010834:	4618      	mov	r0, r3
 8010836:	f7fc f988 	bl	800cb4a <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 801083a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801083c:	691b      	ldr	r3, [r3, #16]
 801083e:	3315      	adds	r3, #21
 8010840:	2200      	movs	r2, #0
 8010842:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8010844:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010846:	691b      	ldr	r3, [r3, #16]
 8010848:	3310      	adds	r3, #16
 801084a:	2100      	movs	r1, #0
 801084c:	4618      	mov	r0, r3
 801084e:	f7fc f97c 	bl	800cb4a <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8010852:	f107 0308 	add.w	r3, r7, #8
 8010856:	4618      	mov	r0, r3
 8010858:	f7fd ff9c 	bl	800e794 <store_xdir>
 801085c:	4603      	mov	r3, r0
 801085e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8010862:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010866:	2b00      	cmp	r3, #0
 8010868:	d15b      	bne.n	8010922 <f_sync+0x230>
							res = sync_fs(fs);
 801086a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801086c:	4618      	mov	r0, r3
 801086e:	f7fc fc7d 	bl	800d16c <sync_fs>
 8010872:	4603      	mov	r3, r0
 8010874:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801087e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010882:	b2da      	uxtb	r2, r3
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 801088a:	e04a      	b.n	8010922 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801088c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010892:	4619      	mov	r1, r3
 8010894:	4610      	mov	r0, r2
 8010896:	f7fc fc3b 	bl	800d110 <move_window>
 801089a:	4603      	mov	r3, r0
 801089c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 80108a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d13c      	bne.n	8010922 <f_sync+0x230>
					dir = fp->dir_ptr;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80108ac:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80108ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80108b0:	330b      	adds	r3, #11
 80108b2:	781a      	ldrb	r2, [r3, #0]
 80108b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80108b6:	330b      	adds	r3, #11
 80108b8:	f042 0220 	orr.w	r2, r2, #32
 80108bc:	b2d2      	uxtb	r2, r2
 80108be:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	6818      	ldr	r0, [r3, #0]
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	689b      	ldr	r3, [r3, #8]
 80108c8:	461a      	mov	r2, r3
 80108ca:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80108cc:	f7fd fbfb 	bl	800e0c6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80108d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80108d2:	f103 001c 	add.w	r0, r3, #28
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80108dc:	4613      	mov	r3, r2
 80108de:	4619      	mov	r1, r3
 80108e0:	f7fc f933 	bl	800cb4a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80108e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80108e6:	3316      	adds	r3, #22
 80108e8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80108ea:	4618      	mov	r0, r3
 80108ec:	f7fc f92d 	bl	800cb4a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80108f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80108f2:	3312      	adds	r3, #18
 80108f4:	2100      	movs	r1, #0
 80108f6:	4618      	mov	r0, r3
 80108f8:	f7fc f90c 	bl	800cb14 <st_word>
					fs->wflag = 1;
 80108fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80108fe:	2201      	movs	r2, #1
 8010900:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010902:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010904:	4618      	mov	r0, r3
 8010906:	f7fc fc31 	bl	800d16c <sync_fs>
 801090a:	4603      	mov	r3, r0
 801090c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010916:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801091a:	b2da      	uxtb	r2, r3
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010922:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8010926:	4618      	mov	r0, r3
 8010928:	3768      	adds	r7, #104	; 0x68
 801092a:	46bd      	mov	sp, r7
 801092c:	bd80      	pop	{r7, pc}

0801092e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801092e:	b580      	push	{r7, lr}
 8010930:	b084      	sub	sp, #16
 8010932:	af00      	add	r7, sp, #0
 8010934:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010936:	6878      	ldr	r0, [r7, #4]
 8010938:	f7ff fedb 	bl	80106f2 <f_sync>
 801093c:	4603      	mov	r3, r0
 801093e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010940:	7bfb      	ldrb	r3, [r7, #15]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d118      	bne.n	8010978 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f107 0208 	add.w	r2, r7, #8
 801094c:	4611      	mov	r1, r2
 801094e:	4618      	mov	r0, r3
 8010950:	f7ff f9de 	bl	800fd10 <validate>
 8010954:	4603      	mov	r3, r0
 8010956:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010958:	7bfb      	ldrb	r3, [r7, #15]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d10c      	bne.n	8010978 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010962:	4618      	mov	r0, r3
 8010964:	f7fc fb30 	bl	800cfc8 <dec_lock>
 8010968:	4603      	mov	r3, r0
 801096a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801096c:	7bfb      	ldrb	r3, [r7, #15]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d102      	bne.n	8010978 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	2200      	movs	r2, #0
 8010976:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010978:	7bfb      	ldrb	r3, [r7, #15]
}
 801097a:	4618      	mov	r0, r3
 801097c:	3710      	adds	r7, #16
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}

08010982 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010982:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010986:	b0b6      	sub	sp, #216	; 0xd8
 8010988:	af00      	add	r7, sp, #0
 801098a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 801098e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010992:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010996:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801099a:	4619      	mov	r1, r3
 801099c:	4610      	mov	r0, r2
 801099e:	f7ff f9b7 	bl	800fd10 <validate>
 80109a2:	4603      	mov	r3, r0
 80109a4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	if (res == FR_OK) res = (FRESULT)fp->err;
 80109a8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d105      	bne.n	80109bc <f_lseek+0x3a>
 80109b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80109b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80109b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 80109bc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d111      	bne.n	80109e8 <f_lseek+0x66>
 80109c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80109c8:	781b      	ldrb	r3, [r3, #0]
 80109ca:	2b04      	cmp	r3, #4
 80109cc:	d10c      	bne.n	80109e8 <f_lseek+0x66>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80109ce:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80109d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80109d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109d8:	f04f 32ff 	mov.w	r2, #4294967295
 80109dc:	4619      	mov	r1, r3
 80109de:	f7fc ff72 	bl	800d8c6 <fill_last_frag>
 80109e2:	4603      	mov	r3, r0
 80109e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80109e8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d002      	beq.n	80109f6 <f_lseek+0x74>
 80109f0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80109f4:	e38c      	b.n	8011110 <f_lseek+0x78e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80109f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80109fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	f000 8141 	beq.w	8010c84 <f_lseek+0x302>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010a02:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a0a:	bf08      	it	eq
 8010a0c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8010a10:	f040 8087 	bne.w	8010b22 <f_lseek+0x1a0>
			tbl = fp->cltbl;
 8010a14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010a1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010a22:	1d1a      	adds	r2, r3, #4
 8010a24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010a2e:	2302      	movs	r3, #2
 8010a30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010a34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010a38:	689b      	ldr	r3, [r3, #8]
 8010a3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			if (cl) {
 8010a3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d058      	beq.n	8010af8 <f_lseek+0x176>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010a46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8010a4e:	2300      	movs	r3, #0
 8010a50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010a54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010a58:	3302      	adds	r3, #2
 8010a5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
					do {
						pcl = cl; ncl++;
 8010a5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010a62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010a66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010a6a:	3301      	adds	r3, #1
 8010a6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
						cl = get_fat(&fp->obj, cl);
 8010a70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010a74:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f7fc fc05 	bl	800d288 <get_fat>
 8010a7e:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010a82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010a86:	2b01      	cmp	r3, #1
 8010a88:	d806      	bhi.n	8010a98 <f_lseek+0x116>
 8010a8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010a8e:	2202      	movs	r2, #2
 8010a90:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010a94:	2302      	movs	r3, #2
 8010a96:	e33b      	b.n	8011110 <f_lseek+0x78e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010a98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010aa0:	d106      	bne.n	8010ab0 <f_lseek+0x12e>
 8010aa2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010aa6:	2201      	movs	r2, #1
 8010aa8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010aac:	2301      	movs	r3, #1
 8010aae:	e32f      	b.n	8011110 <f_lseek+0x78e>
					} while (cl == pcl + 1);
 8010ab0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010ab4:	3301      	adds	r3, #1
 8010ab6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010aba:	429a      	cmp	r2, r3
 8010abc:	d0cf      	beq.n	8010a5e <f_lseek+0xdc>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010abe:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010ac2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010ac6:	429a      	cmp	r2, r3
 8010ac8:	d80f      	bhi.n	8010aea <f_lseek+0x168>
						*tbl++ = ncl; *tbl++ = tcl;
 8010aca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010ace:	1d1a      	adds	r2, r3, #4
 8010ad0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8010ad4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010ad8:	601a      	str	r2, [r3, #0]
 8010ada:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010ade:	1d1a      	adds	r2, r3, #4
 8010ae0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8010ae4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8010ae8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010aea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010aee:	69db      	ldr	r3, [r3, #28]
 8010af0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010af4:	429a      	cmp	r2, r3
 8010af6:	d3a6      	bcc.n	8010a46 <f_lseek+0xc4>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010af8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010afe:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010b02:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010b04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010b08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010b0c:	429a      	cmp	r2, r3
 8010b0e:	d804      	bhi.n	8010b1a <f_lseek+0x198>
				*tbl = 0;		/* Terminate table */
 8010b10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010b14:	2200      	movs	r2, #0
 8010b16:	601a      	str	r2, [r3, #0]
 8010b18:	e2f8      	b.n	801110c <f_lseek+0x78a>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010b1a:	2311      	movs	r3, #17
 8010b1c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8010b20:	e2f4      	b.n	801110c <f_lseek+0x78a>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010b22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010b26:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8010b2a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010b2e:	4290      	cmp	r0, r2
 8010b30:	eb71 0303 	sbcs.w	r3, r1, r3
 8010b34:	d205      	bcs.n	8010b42 <f_lseek+0x1c0>
 8010b36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010b3a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010b3e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			fp->fptr = ofs;				/* Set file pointer */
 8010b42:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8010b46:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010b4a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			if (ofs) {
 8010b4e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010b52:	4313      	orrs	r3, r2
 8010b54:	f000 82da 	beq.w	801110c <f_lseek+0x78a>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010b58:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010b5c:	f112 3aff 	adds.w	sl, r2, #4294967295
 8010b60:	f143 3bff 	adc.w	fp, r3, #4294967295
 8010b64:	4652      	mov	r2, sl
 8010b66:	465b      	mov	r3, fp
 8010b68:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8010b6c:	f7fd f891 	bl	800dc92 <clmt_clust>
 8010b70:	4602      	mov	r2, r0
 8010b72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010b76:	641a      	str	r2, [r3, #64]	; 0x40
				dsc = clust2sect(fs, fp->clust);
 8010b78:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010b7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b82:	4619      	mov	r1, r3
 8010b84:	4610      	mov	r0, r2
 8010b86:	f7fc fb5f 	bl	800d248 <clust2sect>
 8010b8a:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010b8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d106      	bne.n	8010ba4 <f_lseek+0x222>
 8010b96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010b9a:	2202      	movs	r2, #2
 8010b9c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010ba0:	2302      	movs	r3, #2
 8010ba2:	e2b5      	b.n	8011110 <f_lseek+0x78e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8010ba4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010ba8:	1e54      	subs	r4, r2, #1
 8010baa:	f143 35ff 	adc.w	r5, r3, #4294967295
 8010bae:	f04f 0200 	mov.w	r2, #0
 8010bb2:	f04f 0300 	mov.w	r3, #0
 8010bb6:	0a62      	lsrs	r2, r4, #9
 8010bb8:	ea42 52c5 	orr.w	r2, r2, r5, lsl #23
 8010bbc:	0a6b      	lsrs	r3, r5, #9
 8010bbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010bc2:	895b      	ldrh	r3, [r3, #10]
 8010bc4:	3b01      	subs	r3, #1
 8010bc6:	4013      	ands	r3, r2
 8010bc8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010bcc:	4413      	add	r3, r2
 8010bce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010bd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010bd6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010bda:	f3c2 0808 	ubfx	r8, r2, #0, #9
 8010bde:	f04f 0900 	mov.w	r9, #0
 8010be2:	ea58 0309 	orrs.w	r3, r8, r9
 8010be6:	f000 8291 	beq.w	801110c <f_lseek+0x78a>
 8010bea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010bf0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010bf4:	429a      	cmp	r2, r3
 8010bf6:	f000 8289 	beq.w	801110c <f_lseek+0x78a>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010bfa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010bfe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010c02:	b25b      	sxtb	r3, r3
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	da21      	bge.n	8010c4c <f_lseek+0x2ca>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010c0c:	7858      	ldrb	r0, [r3, #1]
 8010c0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010c12:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010c16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010c1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010c1c:	2301      	movs	r3, #1
 8010c1e:	f7fb fe25 	bl	800c86c <disk_write>
 8010c22:	4603      	mov	r3, r0
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d006      	beq.n	8010c36 <f_lseek+0x2b4>
 8010c28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010c2c:	2201      	movs	r2, #1
 8010c2e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010c32:	2301      	movs	r3, #1
 8010c34:	e26c      	b.n	8011110 <f_lseek+0x78e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010c36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010c3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c42:	b2da      	uxtb	r2, r3
 8010c44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010c48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010c4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010c50:	7858      	ldrb	r0, [r3, #1]
 8010c52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010c56:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010c5a:	2301      	movs	r3, #1
 8010c5c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010c60:	f7fb fde4 	bl	800c82c <disk_read>
 8010c64:	4603      	mov	r3, r0
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d006      	beq.n	8010c78 <f_lseek+0x2f6>
 8010c6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010c6e:	2201      	movs	r2, #1
 8010c70:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010c74:	2301      	movs	r3, #1
 8010c76:	e24b      	b.n	8011110 <f_lseek+0x78e>
#endif
					fp->sect = dsc;
 8010c78:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010c7c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010c80:	645a      	str	r2, [r3, #68]	; 0x44
 8010c82:	e243      	b.n	801110c <f_lseek+0x78a>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 8010c84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010c88:	781b      	ldrb	r3, [r3, #0]
 8010c8a:	2b04      	cmp	r3, #4
 8010c8c:	d009      	beq.n	8010ca2 <f_lseek+0x320>
 8010c8e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010c92:	2b01      	cmp	r3, #1
 8010c94:	d305      	bcc.n	8010ca2 <f_lseek+0x320>
 8010c96:	f04f 32ff 	mov.w	r2, #4294967295
 8010c9a:	f04f 0300 	mov.w	r3, #0
 8010c9e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010ca2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010ca6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8010caa:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010cae:	4290      	cmp	r0, r2
 8010cb0:	eb71 0303 	sbcs.w	r3, r1, r3
 8010cb4:	d20d      	bcs.n	8010cd2 <f_lseek+0x350>
 8010cb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010cba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010cbe:	f003 0302 	and.w	r3, r3, #2
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d105      	bne.n	8010cd2 <f_lseek+0x350>
			ofs = fp->obj.objsize;
 8010cc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010cca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010cce:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		}
		ifptr = fp->fptr;
 8010cd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010cd6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010cda:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
		fp->fptr = nsect = 0;
 8010cde:	2300      	movs	r3, #0
 8010ce0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010ce4:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8010ce8:	f04f 0200 	mov.w	r2, #0
 8010cec:	f04f 0300 	mov.w	r3, #0
 8010cf0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		if (ofs) {
 8010cf4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010cf8:	4313      	orrs	r3, r2
 8010cfa:	f000 818f 	beq.w	801101c <f_lseek+0x69a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010cfe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010d02:	895b      	ldrh	r3, [r3, #10]
 8010d04:	025b      	lsls	r3, r3, #9
 8010d06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			if (ifptr > 0 &&
 8010d0a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8010d0e:	4313      	orrs	r3, r2
 8010d10:	d06b      	beq.n	8010dea <f_lseek+0x468>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010d12:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010d16:	1e51      	subs	r1, r2, #1
 8010d18:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8010d1c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8010d20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010d24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010d28:	2200      	movs	r2, #0
 8010d2a:	67bb      	str	r3, [r7, #120]	; 0x78
 8010d2c:	67fa      	str	r2, [r7, #124]	; 0x7c
 8010d2e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8010d32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8010d36:	f7ef fab3 	bl	80002a0 <__aeabi_uldivmod>
 8010d3a:	4602      	mov	r2, r0
 8010d3c:	460b      	mov	r3, r1
 8010d3e:	4614      	mov	r4, r2
 8010d40:	461d      	mov	r5, r3
 8010d42:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8010d46:	1e51      	subs	r1, r2, #1
 8010d48:	6739      	str	r1, [r7, #112]	; 0x70
 8010d4a:	f143 33ff 	adc.w	r3, r3, #4294967295
 8010d4e:	677b      	str	r3, [r7, #116]	; 0x74
 8010d50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010d54:	2200      	movs	r2, #0
 8010d56:	66bb      	str	r3, [r7, #104]	; 0x68
 8010d58:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010d5a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010d5e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010d62:	f7ef fa9d 	bl	80002a0 <__aeabi_uldivmod>
 8010d66:	4602      	mov	r2, r0
 8010d68:	460b      	mov	r3, r1
			if (ifptr > 0 &&
 8010d6a:	4294      	cmp	r4, r2
 8010d6c:	eb75 0303 	sbcs.w	r3, r5, r3
 8010d70:	d33b      	bcc.n	8010dea <f_lseek+0x468>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010d72:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8010d76:	1e51      	subs	r1, r2, #1
 8010d78:	6639      	str	r1, [r7, #96]	; 0x60
 8010d7a:	f143 33ff 	adc.w	r3, r3, #4294967295
 8010d7e:	667b      	str	r3, [r7, #100]	; 0x64
 8010d80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010d84:	3b01      	subs	r3, #1
 8010d86:	2200      	movs	r2, #0
 8010d88:	65bb      	str	r3, [r7, #88]	; 0x58
 8010d8a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8010d8c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8010d90:	460b      	mov	r3, r1
 8010d92:	43db      	mvns	r3, r3
 8010d94:	653b      	str	r3, [r7, #80]	; 0x50
 8010d96:	4613      	mov	r3, r2
 8010d98:	43db      	mvns	r3, r3
 8010d9a:	657b      	str	r3, [r7, #84]	; 0x54
 8010d9c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8010da0:	4623      	mov	r3, r4
 8010da2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010da6:	4602      	mov	r2, r0
 8010da8:	4013      	ands	r3, r2
 8010daa:	64bb      	str	r3, [r7, #72]	; 0x48
 8010dac:	462b      	mov	r3, r5
 8010dae:	460a      	mov	r2, r1
 8010db0:	4013      	ands	r3, r2
 8010db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010db4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010db8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8010dbc:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				ofs -= fp->fptr;
 8010dc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010dc4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8010dc8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010dcc:	1a14      	subs	r4, r2, r0
 8010dce:	60bc      	str	r4, [r7, #8]
 8010dd0:	eb63 0301 	sbc.w	r3, r3, r1
 8010dd4:	60fb      	str	r3, [r7, #12]
 8010dd6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010dda:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
				clst = fp->clust;
 8010dde:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010de4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010de8:	e031      	b.n	8010e4e <f_lseek+0x4cc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010dea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010dee:	689b      	ldr	r3, [r3, #8]
 8010df0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010df4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d123      	bne.n	8010e44 <f_lseek+0x4c2>
					clst = create_chain(&fp->obj, 0);
 8010dfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e00:	2100      	movs	r1, #0
 8010e02:	4618      	mov	r0, r3
 8010e04:	f7fc fe44 	bl	800da90 <create_chain>
 8010e08:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010e0c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010e10:	2b01      	cmp	r3, #1
 8010e12:	d106      	bne.n	8010e22 <f_lseek+0x4a0>
 8010e14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e18:	2202      	movs	r2, #2
 8010e1a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010e1e:	2302      	movs	r3, #2
 8010e20:	e176      	b.n	8011110 <f_lseek+0x78e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010e22:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e2a:	d106      	bne.n	8010e3a <f_lseek+0x4b8>
 8010e2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e30:	2201      	movs	r2, #1
 8010e32:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010e36:	2301      	movs	r3, #1
 8010e38:	e16a      	b.n	8011110 <f_lseek+0x78e>
					fp->obj.sclust = clst;
 8010e3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010e3e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010e42:	6093      	str	r3, [r2, #8]
				}
#endif
				fp->clust = clst;
 8010e44:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010e48:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010e4c:	6413      	str	r3, [r2, #64]	; 0x40
			}
			if (clst != 0) {
 8010e4e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	f000 80e2 	beq.w	801101c <f_lseek+0x69a>
				while (ofs > bcs) {						/* Cluster following loop */
 8010e58:	e090      	b.n	8010f7c <f_lseek+0x5fa>
					ofs -= bcs; fp->fptr += bcs;
 8010e5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010e5e:	2200      	movs	r2, #0
 8010e60:	643b      	str	r3, [r7, #64]	; 0x40
 8010e62:	647a      	str	r2, [r7, #68]	; 0x44
 8010e64:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010e68:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8010e6c:	4621      	mov	r1, r4
 8010e6e:	1a51      	subs	r1, r2, r1
 8010e70:	6039      	str	r1, [r7, #0]
 8010e72:	4629      	mov	r1, r5
 8010e74:	eb63 0301 	sbc.w	r3, r3, r1
 8010e78:	607b      	str	r3, [r7, #4]
 8010e7a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010e7e:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
 8010e82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e86:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010e8a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8010e8e:	2000      	movs	r0, #0
 8010e90:	63b9      	str	r1, [r7, #56]	; 0x38
 8010e92:	63f8      	str	r0, [r7, #60]	; 0x3c
 8010e94:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8010e98:	4621      	mov	r1, r4
 8010e9a:	1851      	adds	r1, r2, r1
 8010e9c:	6339      	str	r1, [r7, #48]	; 0x30
 8010e9e:	4629      	mov	r1, r5
 8010ea0:	414b      	adcs	r3, r1
 8010ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8010ea4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010ea8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8010eac:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8010eb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010eb4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010eb8:	f003 0302 	and.w	r3, r3, #2
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d031      	beq.n	8010f24 <f_lseek+0x5a2>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 8010ec0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010ec4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8010ec8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010ecc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010ed0:	4282      	cmp	r2, r0
 8010ed2:	418b      	sbcs	r3, r1
 8010ed4:	d212      	bcs.n	8010efc <f_lseek+0x57a>
							fp->obj.objsize = fp->fptr;
 8010ed6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010eda:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8010ede:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010ee2:	e9c3 0104 	strd	r0, r1, [r3, #16]
							fp->flag |= FA_MODIFIED;
 8010ee6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010eea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ef2:	b2db      	uxtb	r3, r3
 8010ef4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010ef8:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010efc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f00:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8010f04:	4618      	mov	r0, r3
 8010f06:	f7fc fdc3 	bl	800da90 <create_chain>
 8010f0a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010f0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d10f      	bne.n	8010f36 <f_lseek+0x5b4>
							ofs = 0; break;
 8010f16:	f04f 0200 	mov.w	r2, #0
 8010f1a:	f04f 0300 	mov.w	r3, #0
 8010f1e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 8010f22:	e03b      	b.n	8010f9c <f_lseek+0x61a>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8010f24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f28:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	f7fc f9ab 	bl	800d288 <get_fat>
 8010f32:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010f36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f3e:	d106      	bne.n	8010f4e <f_lseek+0x5cc>
 8010f40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f44:	2201      	movs	r2, #1
 8010f46:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010f4a:	2301      	movs	r3, #1
 8010f4c:	e0e0      	b.n	8011110 <f_lseek+0x78e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010f4e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010f52:	2b01      	cmp	r3, #1
 8010f54:	d906      	bls.n	8010f64 <f_lseek+0x5e2>
 8010f56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010f5a:	69da      	ldr	r2, [r3, #28]
 8010f5c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010f60:	4293      	cmp	r3, r2
 8010f62:	d306      	bcc.n	8010f72 <f_lseek+0x5f0>
 8010f64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f68:	2202      	movs	r2, #2
 8010f6a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010f6e:	2302      	movs	r3, #2
 8010f70:	e0ce      	b.n	8011110 <f_lseek+0x78e>
					fp->clust = clst;
 8010f72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010f76:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010f7a:	6413      	str	r3, [r2, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 8010f7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010f80:	2200      	movs	r2, #0
 8010f82:	62bb      	str	r3, [r7, #40]	; 0x28
 8010f84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010f86:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010f8a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8010f8e:	4621      	mov	r1, r4
 8010f90:	4291      	cmp	r1, r2
 8010f92:	4629      	mov	r1, r5
 8010f94:	eb71 0303 	sbcs.w	r3, r1, r3
 8010f98:	f4ff af5f 	bcc.w	8010e5a <f_lseek+0x4d8>
				}
				fp->fptr += ofs;
 8010f9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010fa0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8010fa4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010fa8:	1884      	adds	r4, r0, r2
 8010faa:	623c      	str	r4, [r7, #32]
 8010fac:	eb41 0303 	adc.w	r3, r1, r3
 8010fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8010fb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010fb6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8010fba:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				if (ofs % SS(fs)) {
 8010fbe:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010fc2:	f3c2 0308 	ubfx	r3, r2, #0, #9
 8010fc6:	61bb      	str	r3, [r7, #24]
 8010fc8:	2300      	movs	r3, #0
 8010fca:	61fb      	str	r3, [r7, #28]
 8010fcc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8010fd0:	460b      	mov	r3, r1
 8010fd2:	4313      	orrs	r3, r2
 8010fd4:	d022      	beq.n	801101c <f_lseek+0x69a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010fd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010fda:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8010fde:	4618      	mov	r0, r3
 8010fe0:	f7fc f932 	bl	800d248 <clust2sect>
 8010fe4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8010fe8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d106      	bne.n	8010ffe <f_lseek+0x67c>
 8010ff0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010ff4:	2202      	movs	r2, #2
 8010ff6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010ffa:	2302      	movs	r3, #2
 8010ffc:	e088      	b.n	8011110 <f_lseek+0x78e>
					nsect += (DWORD)(ofs / SS(fs));
 8010ffe:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8011002:	f04f 0200 	mov.w	r2, #0
 8011006:	f04f 0300 	mov.w	r3, #0
 801100a:	0a42      	lsrs	r2, r0, #9
 801100c:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8011010:	0a4b      	lsrs	r3, r1, #9
 8011012:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011016:	4413      	add	r3, r2
 8011018:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801101c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011020:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011024:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8011028:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 801102c:	4290      	cmp	r0, r2
 801102e:	eb71 0303 	sbcs.w	r3, r1, r3
 8011032:	d212      	bcs.n	801105a <f_lseek+0x6d8>
			fp->obj.objsize = fp->fptr;
 8011034:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011038:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801103c:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8011040:	e9c1 2304 	strd	r2, r3, [r1, #16]
			fp->flag |= FA_MODIFIED;
 8011044:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011048:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801104c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011050:	b2da      	uxtb	r2, r3
 8011052:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011056:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801105a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801105e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011062:	f3c2 0308 	ubfx	r3, r2, #0, #9
 8011066:	613b      	str	r3, [r7, #16]
 8011068:	2300      	movs	r3, #0
 801106a:	617b      	str	r3, [r7, #20]
 801106c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8011070:	460b      	mov	r3, r1
 8011072:	4313      	orrs	r3, r2
 8011074:	d04a      	beq.n	801110c <f_lseek+0x78a>
 8011076:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801107a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801107c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8011080:	429a      	cmp	r2, r3
 8011082:	d043      	beq.n	801110c <f_lseek+0x78a>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011084:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011088:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801108c:	b25b      	sxtb	r3, r3
 801108e:	2b00      	cmp	r3, #0
 8011090:	da21      	bge.n	80110d6 <f_lseek+0x754>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011092:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011096:	7858      	ldrb	r0, [r3, #1]
 8011098:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801109c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80110a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80110a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80110a6:	2301      	movs	r3, #1
 80110a8:	f7fb fbe0 	bl	800c86c <disk_write>
 80110ac:	4603      	mov	r3, r0
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d006      	beq.n	80110c0 <f_lseek+0x73e>
 80110b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80110b6:	2201      	movs	r2, #1
 80110b8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80110bc:	2301      	movs	r3, #1
 80110be:	e027      	b.n	8011110 <f_lseek+0x78e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80110c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80110c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80110c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80110cc:	b2da      	uxtb	r2, r3
 80110ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80110d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80110d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80110da:	7858      	ldrb	r0, [r3, #1]
 80110dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80110e0:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80110e4:	2301      	movs	r3, #1
 80110e6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80110ea:	f7fb fb9f 	bl	800c82c <disk_read>
 80110ee:	4603      	mov	r3, r0
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d006      	beq.n	8011102 <f_lseek+0x780>
 80110f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80110f8:	2201      	movs	r2, #1
 80110fa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80110fe:	2301      	movs	r3, #1
 8011100:	e006      	b.n	8011110 <f_lseek+0x78e>
#endif
			fp->sect = nsect;
 8011102:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011106:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 801110a:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}

	LEAVE_FF(fs, res);
 801110c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8011110:	4618      	mov	r0, r3
 8011112:	37d8      	adds	r7, #216	; 0xd8
 8011114:	46bd      	mov	sp, r7
 8011116:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801111a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 801111a:	b580      	push	{r7, lr}
 801111c:	b09a      	sub	sp, #104	; 0x68
 801111e:	af00      	add	r7, sp, #0
 8011120:	60f8      	str	r0, [r7, #12]
 8011122:	60b9      	str	r1, [r7, #8]
 8011124:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8011126:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801112a:	f107 030c 	add.w	r3, r7, #12
 801112e:	2200      	movs	r2, #0
 8011130:	4618      	mov	r0, r3
 8011132:	f7fe fa91 	bl	800f658 <find_volume>
 8011136:	4603      	mov	r3, r0
 8011138:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 801113c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011140:	2b00      	cmp	r3, #0
 8011142:	f040 80e6 	bne.w	8011312 <f_getfree+0x1f8>
		*fatfs = fs;				/* Return ptr to the fs object */
 8011146:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 801114c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801114e:	699a      	ldr	r2, [r3, #24]
 8011150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011152:	69db      	ldr	r3, [r3, #28]
 8011154:	3b02      	subs	r3, #2
 8011156:	429a      	cmp	r2, r3
 8011158:	d804      	bhi.n	8011164 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 801115a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801115c:	699a      	ldr	r2, [r3, #24]
 801115e:	68bb      	ldr	r3, [r7, #8]
 8011160:	601a      	str	r2, [r3, #0]
 8011162:	e0d6      	b.n	8011312 <f_getfree+0x1f8>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8011164:	2300      	movs	r3, #0
 8011166:	663b      	str	r3, [r7, #96]	; 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8011168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801116a:	781b      	ldrb	r3, [r3, #0]
 801116c:	2b01      	cmp	r3, #1
 801116e:	d128      	bne.n	80111c2 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8011170:	2302      	movs	r3, #2
 8011172:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011176:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 8011178:	f107 0310 	add.w	r3, r7, #16
 801117c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801117e:	4618      	mov	r0, r3
 8011180:	f7fc f882 	bl	800d288 <get_fat>
 8011184:	6478      	str	r0, [r7, #68]	; 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8011186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011188:	f1b3 3fff 	cmp.w	r3, #4294967295
 801118c:	d103      	bne.n	8011196 <f_getfree+0x7c>
 801118e:	2301      	movs	r3, #1
 8011190:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8011194:	e0b0      	b.n	80112f8 <f_getfree+0x1de>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8011196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011198:	2b01      	cmp	r3, #1
 801119a:	d103      	bne.n	80111a4 <f_getfree+0x8a>
 801119c:	2302      	movs	r3, #2
 801119e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80111a2:	e0a9      	b.n	80112f8 <f_getfree+0x1de>
					if (stat == 0) nfree++;
 80111a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d102      	bne.n	80111b0 <f_getfree+0x96>
 80111aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80111ac:	3301      	adds	r3, #1
 80111ae:	663b      	str	r3, [r7, #96]	; 0x60
				} while (++clst < fs->n_fatent);
 80111b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80111b2:	3301      	adds	r3, #1
 80111b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80111b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111b8:	69db      	ldr	r3, [r3, #28]
 80111ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80111bc:	429a      	cmp	r2, r3
 80111be:	d3db      	bcc.n	8011178 <f_getfree+0x5e>
 80111c0:	e09a      	b.n	80112f8 <f_getfree+0x1de>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 80111c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111c4:	781b      	ldrb	r3, [r3, #0]
 80111c6:	2b04      	cmp	r3, #4
 80111c8:	d146      	bne.n	8011258 <f_getfree+0x13e>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 80111ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111cc:	69db      	ldr	r3, [r3, #28]
 80111ce:	3b02      	subs	r3, #2
 80111d0:	65fb      	str	r3, [r7, #92]	; 0x5c
					sect = fs->database;
 80111d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111d6:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0;
 80111d8:	2300      	movs	r3, #0
 80111da:	657b      	str	r3, [r7, #84]	; 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 80111dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d10d      	bne.n	80111fe <f_getfree+0xe4>
 80111e2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80111e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80111e6:	1c5a      	adds	r2, r3, #1
 80111e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80111ea:	4619      	mov	r1, r3
 80111ec:	f7fb ff90 	bl	800d110 <move_window>
 80111f0:	4603      	mov	r3, r0
 80111f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80111f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d179      	bne.n	80112f2 <f_getfree+0x1d8>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 80111fe:	2308      	movs	r3, #8
 8011200:	64bb      	str	r3, [r7, #72]	; 0x48
 8011202:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011206:	4413      	add	r3, r2
 8011208:	3338      	adds	r3, #56	; 0x38
 801120a:	781b      	ldrb	r3, [r3, #0]
 801120c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8011210:	e013      	b.n	801123a <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 8011212:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011216:	f003 0301 	and.w	r3, r3, #1
 801121a:	2b00      	cmp	r3, #0
 801121c:	d102      	bne.n	8011224 <f_getfree+0x10a>
 801121e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011220:	3301      	adds	r3, #1
 8011222:	663b      	str	r3, [r7, #96]	; 0x60
							bm >>= 1;
 8011224:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011228:	085b      	lsrs	r3, r3, #1
 801122a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 801122e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011230:	3b01      	subs	r3, #1
 8011232:	64bb      	str	r3, [r7, #72]	; 0x48
 8011234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011236:	3b01      	subs	r3, #1
 8011238:	65fb      	str	r3, [r7, #92]	; 0x5c
 801123a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801123c:	2b00      	cmp	r3, #0
 801123e:	d002      	beq.n	8011246 <f_getfree+0x12c>
 8011240:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011242:	2b00      	cmp	r3, #0
 8011244:	d1e5      	bne.n	8011212 <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 8011246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011248:	3301      	adds	r3, #1
 801124a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801124e:	657b      	str	r3, [r7, #84]	; 0x54
					} while (clst);
 8011250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011252:	2b00      	cmp	r3, #0
 8011254:	d1c2      	bne.n	80111dc <f_getfree+0xc2>
 8011256:	e04f      	b.n	80112f8 <f_getfree+0x1de>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8011258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801125a:	69db      	ldr	r3, [r3, #28]
 801125c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801125e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011262:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0; p = 0;
 8011264:	2300      	movs	r3, #0
 8011266:	657b      	str	r3, [r7, #84]	; 0x54
 8011268:	2300      	movs	r3, #0
 801126a:	653b      	str	r3, [r7, #80]	; 0x50
					do {
						if (i == 0) {
 801126c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801126e:	2b00      	cmp	r3, #0
 8011270:	d113      	bne.n	801129a <f_getfree+0x180>
							res = move_window(fs, sect++);
 8011272:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8011274:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011276:	1c5a      	adds	r2, r3, #1
 8011278:	65ba      	str	r2, [r7, #88]	; 0x58
 801127a:	4619      	mov	r1, r3
 801127c:	f7fb ff48 	bl	800d110 <move_window>
 8011280:	4603      	mov	r3, r0
 8011282:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							if (res != FR_OK) break;
 8011286:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801128a:	2b00      	cmp	r3, #0
 801128c:	d133      	bne.n	80112f6 <f_getfree+0x1dc>
							p = fs->win;
 801128e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011290:	3338      	adds	r3, #56	; 0x38
 8011292:	653b      	str	r3, [r7, #80]	; 0x50
							i = SS(fs);
 8011294:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011298:	657b      	str	r3, [r7, #84]	; 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 801129a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801129c:	781b      	ldrb	r3, [r3, #0]
 801129e:	2b02      	cmp	r3, #2
 80112a0:	d10f      	bne.n	80112c2 <f_getfree+0x1a8>
							if (ld_word(p) == 0) nfree++;
 80112a2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80112a4:	f7fb fb20 	bl	800c8e8 <ld_word>
 80112a8:	4603      	mov	r3, r0
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d102      	bne.n	80112b4 <f_getfree+0x19a>
 80112ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80112b0:	3301      	adds	r3, #1
 80112b2:	663b      	str	r3, [r7, #96]	; 0x60
							p += 2; i -= 2;
 80112b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112b6:	3302      	adds	r3, #2
 80112b8:	653b      	str	r3, [r7, #80]	; 0x50
 80112ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80112bc:	3b02      	subs	r3, #2
 80112be:	657b      	str	r3, [r7, #84]	; 0x54
 80112c0:	e010      	b.n	80112e4 <f_getfree+0x1ca>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80112c2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80112c4:	f7fb fb28 	bl	800c918 <ld_dword>
 80112c8:	4603      	mov	r3, r0
 80112ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d102      	bne.n	80112d8 <f_getfree+0x1be>
 80112d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80112d4:	3301      	adds	r3, #1
 80112d6:	663b      	str	r3, [r7, #96]	; 0x60
							p += 4; i -= 4;
 80112d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112da:	3304      	adds	r3, #4
 80112dc:	653b      	str	r3, [r7, #80]	; 0x50
 80112de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80112e0:	3b04      	subs	r3, #4
 80112e2:	657b      	str	r3, [r7, #84]	; 0x54
						}
					} while (--clst);
 80112e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80112e6:	3b01      	subs	r3, #1
 80112e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80112ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d1bd      	bne.n	801126c <f_getfree+0x152>
 80112f0:	e002      	b.n	80112f8 <f_getfree+0x1de>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 80112f2:	bf00      	nop
 80112f4:	e000      	b.n	80112f8 <f_getfree+0x1de>
							if (res != FR_OK) break;
 80112f6:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80112f8:	68bb      	ldr	r3, [r7, #8]
 80112fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80112fc:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80112fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011300:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011302:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8011304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011306:	791a      	ldrb	r2, [r3, #4]
 8011308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801130a:	f042 0201 	orr.w	r2, r2, #1
 801130e:	b2d2      	uxtb	r2, r2
 8011310:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8011312:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8011316:	4618      	mov	r0, r3
 8011318:	3768      	adds	r7, #104	; 0x68
 801131a:	46bd      	mov	sp, r7
 801131c:	bd80      	pop	{r7, pc}
	...

08011320 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011320:	b480      	push	{r7}
 8011322:	b087      	sub	sp, #28
 8011324:	af00      	add	r7, sp, #0
 8011326:	60f8      	str	r0, [r7, #12]
 8011328:	60b9      	str	r1, [r7, #8]
 801132a:	4613      	mov	r3, r2
 801132c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801132e:	2301      	movs	r3, #1
 8011330:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011332:	2300      	movs	r3, #0
 8011334:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011336:	4b1f      	ldr	r3, [pc, #124]	; (80113b4 <FATFS_LinkDriverEx+0x94>)
 8011338:	7e1b      	ldrb	r3, [r3, #24]
 801133a:	b2db      	uxtb	r3, r3
 801133c:	2b03      	cmp	r3, #3
 801133e:	d831      	bhi.n	80113a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011340:	4b1c      	ldr	r3, [pc, #112]	; (80113b4 <FATFS_LinkDriverEx+0x94>)
 8011342:	7e1b      	ldrb	r3, [r3, #24]
 8011344:	b2db      	uxtb	r3, r3
 8011346:	461a      	mov	r2, r3
 8011348:	4b1a      	ldr	r3, [pc, #104]	; (80113b4 <FATFS_LinkDriverEx+0x94>)
 801134a:	2100      	movs	r1, #0
 801134c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801134e:	4b19      	ldr	r3, [pc, #100]	; (80113b4 <FATFS_LinkDriverEx+0x94>)
 8011350:	7e1b      	ldrb	r3, [r3, #24]
 8011352:	b2db      	uxtb	r3, r3
 8011354:	4a17      	ldr	r2, [pc, #92]	; (80113b4 <FATFS_LinkDriverEx+0x94>)
 8011356:	009b      	lsls	r3, r3, #2
 8011358:	4413      	add	r3, r2
 801135a:	68fa      	ldr	r2, [r7, #12]
 801135c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801135e:	4b15      	ldr	r3, [pc, #84]	; (80113b4 <FATFS_LinkDriverEx+0x94>)
 8011360:	7e1b      	ldrb	r3, [r3, #24]
 8011362:	b2db      	uxtb	r3, r3
 8011364:	461a      	mov	r2, r3
 8011366:	4b13      	ldr	r3, [pc, #76]	; (80113b4 <FATFS_LinkDriverEx+0x94>)
 8011368:	4413      	add	r3, r2
 801136a:	79fa      	ldrb	r2, [r7, #7]
 801136c:	751a      	strb	r2, [r3, #20]
    DiskNum = disk.nbr++;
 801136e:	4b11      	ldr	r3, [pc, #68]	; (80113b4 <FATFS_LinkDriverEx+0x94>)
 8011370:	7e1b      	ldrb	r3, [r3, #24]
 8011372:	b2db      	uxtb	r3, r3
 8011374:	1c5a      	adds	r2, r3, #1
 8011376:	b2d1      	uxtb	r1, r2
 8011378:	4a0e      	ldr	r2, [pc, #56]	; (80113b4 <FATFS_LinkDriverEx+0x94>)
 801137a:	7611      	strb	r1, [r2, #24]
 801137c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801137e:	7dbb      	ldrb	r3, [r7, #22]
 8011380:	3330      	adds	r3, #48	; 0x30
 8011382:	b2da      	uxtb	r2, r3
 8011384:	68bb      	ldr	r3, [r7, #8]
 8011386:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011388:	68bb      	ldr	r3, [r7, #8]
 801138a:	3301      	adds	r3, #1
 801138c:	223a      	movs	r2, #58	; 0x3a
 801138e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011390:	68bb      	ldr	r3, [r7, #8]
 8011392:	3302      	adds	r3, #2
 8011394:	222f      	movs	r2, #47	; 0x2f
 8011396:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011398:	68bb      	ldr	r3, [r7, #8]
 801139a:	3303      	adds	r3, #3
 801139c:	2200      	movs	r2, #0
 801139e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80113a0:	2300      	movs	r3, #0
 80113a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80113a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80113a6:	4618      	mov	r0, r3
 80113a8:	371c      	adds	r7, #28
 80113aa:	46bd      	mov	sp, r7
 80113ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b0:	4770      	bx	lr
 80113b2:	bf00      	nop
 80113b4:	20002274 	.word	0x20002274

080113b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b082      	sub	sp, #8
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
 80113c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80113c2:	2200      	movs	r2, #0
 80113c4:	6839      	ldr	r1, [r7, #0]
 80113c6:	6878      	ldr	r0, [r7, #4]
 80113c8:	f7ff ffaa 	bl	8011320 <FATFS_LinkDriverEx>
 80113cc:	4603      	mov	r3, r0
}
 80113ce:	4618      	mov	r0, r3
 80113d0:	3708      	adds	r7, #8
 80113d2:	46bd      	mov	sp, r7
 80113d4:	bd80      	pop	{r7, pc}
	...

080113d8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80113d8:	b480      	push	{r7}
 80113da:	b085      	sub	sp, #20
 80113dc:	af00      	add	r7, sp, #0
 80113de:	4603      	mov	r3, r0
 80113e0:	6039      	str	r1, [r7, #0]
 80113e2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80113e4:	88fb      	ldrh	r3, [r7, #6]
 80113e6:	2b7f      	cmp	r3, #127	; 0x7f
 80113e8:	d802      	bhi.n	80113f0 <ff_convert+0x18>
		c = chr;
 80113ea:	88fb      	ldrh	r3, [r7, #6]
 80113ec:	81fb      	strh	r3, [r7, #14]
 80113ee:	e025      	b.n	801143c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80113f0:	683b      	ldr	r3, [r7, #0]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d00b      	beq.n	801140e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80113f6:	88fb      	ldrh	r3, [r7, #6]
 80113f8:	2bff      	cmp	r3, #255	; 0xff
 80113fa:	d805      	bhi.n	8011408 <ff_convert+0x30>
 80113fc:	88fb      	ldrh	r3, [r7, #6]
 80113fe:	3b80      	subs	r3, #128	; 0x80
 8011400:	4a12      	ldr	r2, [pc, #72]	; (801144c <ff_convert+0x74>)
 8011402:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011406:	e000      	b.n	801140a <ff_convert+0x32>
 8011408:	2300      	movs	r3, #0
 801140a:	81fb      	strh	r3, [r7, #14]
 801140c:	e016      	b.n	801143c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801140e:	2300      	movs	r3, #0
 8011410:	81fb      	strh	r3, [r7, #14]
 8011412:	e009      	b.n	8011428 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8011414:	89fb      	ldrh	r3, [r7, #14]
 8011416:	4a0d      	ldr	r2, [pc, #52]	; (801144c <ff_convert+0x74>)
 8011418:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801141c:	88fa      	ldrh	r2, [r7, #6]
 801141e:	429a      	cmp	r2, r3
 8011420:	d006      	beq.n	8011430 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8011422:	89fb      	ldrh	r3, [r7, #14]
 8011424:	3301      	adds	r3, #1
 8011426:	81fb      	strh	r3, [r7, #14]
 8011428:	89fb      	ldrh	r3, [r7, #14]
 801142a:	2b7f      	cmp	r3, #127	; 0x7f
 801142c:	d9f2      	bls.n	8011414 <ff_convert+0x3c>
 801142e:	e000      	b.n	8011432 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8011430:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8011432:	89fb      	ldrh	r3, [r7, #14]
 8011434:	3380      	adds	r3, #128	; 0x80
 8011436:	b29b      	uxth	r3, r3
 8011438:	b2db      	uxtb	r3, r3
 801143a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801143c:	89fb      	ldrh	r3, [r7, #14]
}
 801143e:	4618      	mov	r0, r3
 8011440:	3714      	adds	r7, #20
 8011442:	46bd      	mov	sp, r7
 8011444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011448:	4770      	bx	lr
 801144a:	bf00      	nop
 801144c:	08017018 	.word	0x08017018

08011450 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8011450:	b480      	push	{r7}
 8011452:	b087      	sub	sp, #28
 8011454:	af00      	add	r7, sp, #0
 8011456:	4603      	mov	r3, r0
 8011458:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801145a:	88fb      	ldrh	r3, [r7, #6]
 801145c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011460:	d201      	bcs.n	8011466 <ff_wtoupper+0x16>
 8011462:	4b3e      	ldr	r3, [pc, #248]	; (801155c <ff_wtoupper+0x10c>)
 8011464:	e000      	b.n	8011468 <ff_wtoupper+0x18>
 8011466:	4b3e      	ldr	r3, [pc, #248]	; (8011560 <ff_wtoupper+0x110>)
 8011468:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801146a:	697b      	ldr	r3, [r7, #20]
 801146c:	1c9a      	adds	r2, r3, #2
 801146e:	617a      	str	r2, [r7, #20]
 8011470:	881b      	ldrh	r3, [r3, #0]
 8011472:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8011474:	8a7b      	ldrh	r3, [r7, #18]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d068      	beq.n	801154c <ff_wtoupper+0xfc>
 801147a:	88fa      	ldrh	r2, [r7, #6]
 801147c:	8a7b      	ldrh	r3, [r7, #18]
 801147e:	429a      	cmp	r2, r3
 8011480:	d364      	bcc.n	801154c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8011482:	697b      	ldr	r3, [r7, #20]
 8011484:	1c9a      	adds	r2, r3, #2
 8011486:	617a      	str	r2, [r7, #20]
 8011488:	881b      	ldrh	r3, [r3, #0]
 801148a:	823b      	strh	r3, [r7, #16]
 801148c:	8a3b      	ldrh	r3, [r7, #16]
 801148e:	0a1b      	lsrs	r3, r3, #8
 8011490:	81fb      	strh	r3, [r7, #14]
 8011492:	8a3b      	ldrh	r3, [r7, #16]
 8011494:	b2db      	uxtb	r3, r3
 8011496:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8011498:	88fa      	ldrh	r2, [r7, #6]
 801149a:	8a79      	ldrh	r1, [r7, #18]
 801149c:	8a3b      	ldrh	r3, [r7, #16]
 801149e:	440b      	add	r3, r1
 80114a0:	429a      	cmp	r2, r3
 80114a2:	da49      	bge.n	8011538 <ff_wtoupper+0xe8>
			switch (cmd) {
 80114a4:	89fb      	ldrh	r3, [r7, #14]
 80114a6:	2b08      	cmp	r3, #8
 80114a8:	d84f      	bhi.n	801154a <ff_wtoupper+0xfa>
 80114aa:	a201      	add	r2, pc, #4	; (adr r2, 80114b0 <ff_wtoupper+0x60>)
 80114ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114b0:	080114d5 	.word	0x080114d5
 80114b4:	080114e7 	.word	0x080114e7
 80114b8:	080114fd 	.word	0x080114fd
 80114bc:	08011505 	.word	0x08011505
 80114c0:	0801150d 	.word	0x0801150d
 80114c4:	08011515 	.word	0x08011515
 80114c8:	0801151d 	.word	0x0801151d
 80114cc:	08011525 	.word	0x08011525
 80114d0:	0801152d 	.word	0x0801152d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80114d4:	88fa      	ldrh	r2, [r7, #6]
 80114d6:	8a7b      	ldrh	r3, [r7, #18]
 80114d8:	1ad3      	subs	r3, r2, r3
 80114da:	005b      	lsls	r3, r3, #1
 80114dc:	697a      	ldr	r2, [r7, #20]
 80114de:	4413      	add	r3, r2
 80114e0:	881b      	ldrh	r3, [r3, #0]
 80114e2:	80fb      	strh	r3, [r7, #6]
 80114e4:	e027      	b.n	8011536 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80114e6:	88fa      	ldrh	r2, [r7, #6]
 80114e8:	8a7b      	ldrh	r3, [r7, #18]
 80114ea:	1ad3      	subs	r3, r2, r3
 80114ec:	b29b      	uxth	r3, r3
 80114ee:	f003 0301 	and.w	r3, r3, #1
 80114f2:	b29b      	uxth	r3, r3
 80114f4:	88fa      	ldrh	r2, [r7, #6]
 80114f6:	1ad3      	subs	r3, r2, r3
 80114f8:	80fb      	strh	r3, [r7, #6]
 80114fa:	e01c      	b.n	8011536 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80114fc:	88fb      	ldrh	r3, [r7, #6]
 80114fe:	3b10      	subs	r3, #16
 8011500:	80fb      	strh	r3, [r7, #6]
 8011502:	e018      	b.n	8011536 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8011504:	88fb      	ldrh	r3, [r7, #6]
 8011506:	3b20      	subs	r3, #32
 8011508:	80fb      	strh	r3, [r7, #6]
 801150a:	e014      	b.n	8011536 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801150c:	88fb      	ldrh	r3, [r7, #6]
 801150e:	3b30      	subs	r3, #48	; 0x30
 8011510:	80fb      	strh	r3, [r7, #6]
 8011512:	e010      	b.n	8011536 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8011514:	88fb      	ldrh	r3, [r7, #6]
 8011516:	3b1a      	subs	r3, #26
 8011518:	80fb      	strh	r3, [r7, #6]
 801151a:	e00c      	b.n	8011536 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801151c:	88fb      	ldrh	r3, [r7, #6]
 801151e:	3308      	adds	r3, #8
 8011520:	80fb      	strh	r3, [r7, #6]
 8011522:	e008      	b.n	8011536 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8011524:	88fb      	ldrh	r3, [r7, #6]
 8011526:	3b50      	subs	r3, #80	; 0x50
 8011528:	80fb      	strh	r3, [r7, #6]
 801152a:	e004      	b.n	8011536 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801152c:	88fb      	ldrh	r3, [r7, #6]
 801152e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8011532:	80fb      	strh	r3, [r7, #6]
 8011534:	bf00      	nop
			}
			break;
 8011536:	e008      	b.n	801154a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011538:	89fb      	ldrh	r3, [r7, #14]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d195      	bne.n	801146a <ff_wtoupper+0x1a>
 801153e:	8a3b      	ldrh	r3, [r7, #16]
 8011540:	005b      	lsls	r3, r3, #1
 8011542:	697a      	ldr	r2, [r7, #20]
 8011544:	4413      	add	r3, r2
 8011546:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8011548:	e78f      	b.n	801146a <ff_wtoupper+0x1a>
			break;
 801154a:	bf00      	nop
	}

	return chr;
 801154c:	88fb      	ldrh	r3, [r7, #6]
}
 801154e:	4618      	mov	r0, r3
 8011550:	371c      	adds	r7, #28
 8011552:	46bd      	mov	sp, r7
 8011554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011558:	4770      	bx	lr
 801155a:	bf00      	nop
 801155c:	08017118 	.word	0x08017118
 8011560:	0801730c 	.word	0x0801730c

08011564 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011564:	b480      	push	{r7}
 8011566:	b085      	sub	sp, #20
 8011568:	af00      	add	r7, sp, #0
 801156a:	4603      	mov	r3, r0
 801156c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801156e:	2300      	movs	r3, #0
 8011570:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011576:	2b84      	cmp	r3, #132	; 0x84
 8011578:	d005      	beq.n	8011586 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801157a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	4413      	add	r3, r2
 8011582:	3303      	adds	r3, #3
 8011584:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011586:	68fb      	ldr	r3, [r7, #12]
}
 8011588:	4618      	mov	r0, r3
 801158a:	3714      	adds	r7, #20
 801158c:	46bd      	mov	sp, r7
 801158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011592:	4770      	bx	lr

08011594 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8011594:	b480      	push	{r7}
 8011596:	b083      	sub	sp, #12
 8011598:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801159a:	f3ef 8305 	mrs	r3, IPSR
 801159e:	607b      	str	r3, [r7, #4]
  return(result);
 80115a0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	bf14      	ite	ne
 80115a6:	2301      	movne	r3, #1
 80115a8:	2300      	moveq	r3, #0
 80115aa:	b2db      	uxtb	r3, r3
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	370c      	adds	r7, #12
 80115b0:	46bd      	mov	sp, r7
 80115b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b6:	4770      	bx	lr

080115b8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80115bc:	f001 f916 	bl	80127ec <vTaskStartScheduler>
  
  return osOK;
 80115c0:	2300      	movs	r3, #0
}
 80115c2:	4618      	mov	r0, r3
 80115c4:	bd80      	pop	{r7, pc}

080115c6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80115c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115c8:	b089      	sub	sp, #36	; 0x24
 80115ca:	af04      	add	r7, sp, #16
 80115cc:	6078      	str	r0, [r7, #4]
 80115ce:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	695b      	ldr	r3, [r3, #20]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d020      	beq.n	801161a <osThreadCreate+0x54>
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	699b      	ldr	r3, [r3, #24]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d01c      	beq.n	801161a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	685c      	ldr	r4, [r3, #4]
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	681d      	ldr	r5, [r3, #0]
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	691e      	ldr	r6, [r3, #16]
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80115f2:	4618      	mov	r0, r3
 80115f4:	f7ff ffb6 	bl	8011564 <makeFreeRtosPriority>
 80115f8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	695b      	ldr	r3, [r3, #20]
 80115fe:	687a      	ldr	r2, [r7, #4]
 8011600:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011602:	9202      	str	r2, [sp, #8]
 8011604:	9301      	str	r3, [sp, #4]
 8011606:	9100      	str	r1, [sp, #0]
 8011608:	683b      	ldr	r3, [r7, #0]
 801160a:	4632      	mov	r2, r6
 801160c:	4629      	mov	r1, r5
 801160e:	4620      	mov	r0, r4
 8011610:	f000 ff0e 	bl	8012430 <xTaskCreateStatic>
 8011614:	4603      	mov	r3, r0
 8011616:	60fb      	str	r3, [r7, #12]
 8011618:	e01c      	b.n	8011654 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	685c      	ldr	r4, [r3, #4]
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011626:	b29e      	uxth	r6, r3
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801162e:	4618      	mov	r0, r3
 8011630:	f7ff ff98 	bl	8011564 <makeFreeRtosPriority>
 8011634:	4602      	mov	r2, r0
 8011636:	f107 030c 	add.w	r3, r7, #12
 801163a:	9301      	str	r3, [sp, #4]
 801163c:	9200      	str	r2, [sp, #0]
 801163e:	683b      	ldr	r3, [r7, #0]
 8011640:	4632      	mov	r2, r6
 8011642:	4629      	mov	r1, r5
 8011644:	4620      	mov	r0, r4
 8011646:	f000 ff50 	bl	80124ea <xTaskCreate>
 801164a:	4603      	mov	r3, r0
 801164c:	2b01      	cmp	r3, #1
 801164e:	d001      	beq.n	8011654 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8011650:	2300      	movs	r3, #0
 8011652:	e000      	b.n	8011656 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011654:	68fb      	ldr	r3, [r7, #12]
}
 8011656:	4618      	mov	r0, r3
 8011658:	3714      	adds	r7, #20
 801165a:	46bd      	mov	sp, r7
 801165c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801165e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801165e:	b580      	push	{r7, lr}
 8011660:	b084      	sub	sp, #16
 8011662:	af00      	add	r7, sp, #0
 8011664:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d001      	beq.n	8011674 <osDelay+0x16>
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	e000      	b.n	8011676 <osDelay+0x18>
 8011674:	2301      	movs	r3, #1
 8011676:	4618      	mov	r0, r3
 8011678:	f001 f884 	bl	8012784 <vTaskDelay>
  
  return osOK;
 801167c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801167e:	4618      	mov	r0, r3
 8011680:	3710      	adds	r7, #16
 8011682:	46bd      	mov	sp, r7
 8011684:	bd80      	pop	{r7, pc}

08011686 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8011686:	b590      	push	{r4, r7, lr}
 8011688:	b085      	sub	sp, #20
 801168a:	af02      	add	r7, sp, #8
 801168c:	6078      	str	r0, [r7, #4]
 801168e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	689b      	ldr	r3, [r3, #8]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d011      	beq.n	80116bc <osMessageCreate+0x36>
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	68db      	ldr	r3, [r3, #12]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d00d      	beq.n	80116bc <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	6818      	ldr	r0, [r3, #0]
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	6859      	ldr	r1, [r3, #4]
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	689a      	ldr	r2, [r3, #8]
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	68db      	ldr	r3, [r3, #12]
 80116b0:	2400      	movs	r4, #0
 80116b2:	9400      	str	r4, [sp, #0]
 80116b4:	f000 f9e0 	bl	8011a78 <xQueueGenericCreateStatic>
 80116b8:	4603      	mov	r3, r0
 80116ba:	e008      	b.n	80116ce <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	6818      	ldr	r0, [r3, #0]
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	685b      	ldr	r3, [r3, #4]
 80116c4:	2200      	movs	r2, #0
 80116c6:	4619      	mov	r1, r3
 80116c8:	f000 fa4e 	bl	8011b68 <xQueueGenericCreate>
 80116cc:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80116ce:	4618      	mov	r0, r3
 80116d0:	370c      	adds	r7, #12
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bd90      	pop	{r4, r7, pc}
	...

080116d8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b086      	sub	sp, #24
 80116dc:	af00      	add	r7, sp, #0
 80116de:	60f8      	str	r0, [r7, #12]
 80116e0:	60b9      	str	r1, [r7, #8]
 80116e2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80116e4:	2300      	movs	r3, #0
 80116e6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80116ec:	697b      	ldr	r3, [r7, #20]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d101      	bne.n	80116f6 <osMessagePut+0x1e>
    ticks = 1;
 80116f2:	2301      	movs	r3, #1
 80116f4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80116f6:	f7ff ff4d 	bl	8011594 <inHandlerMode>
 80116fa:	4603      	mov	r3, r0
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d018      	beq.n	8011732 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8011700:	f107 0210 	add.w	r2, r7, #16
 8011704:	f107 0108 	add.w	r1, r7, #8
 8011708:	2300      	movs	r3, #0
 801170a:	68f8      	ldr	r0, [r7, #12]
 801170c:	f000 fb84 	bl	8011e18 <xQueueGenericSendFromISR>
 8011710:	4603      	mov	r3, r0
 8011712:	2b01      	cmp	r3, #1
 8011714:	d001      	beq.n	801171a <osMessagePut+0x42>
      return osErrorOS;
 8011716:	23ff      	movs	r3, #255	; 0xff
 8011718:	e018      	b.n	801174c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801171a:	693b      	ldr	r3, [r7, #16]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d014      	beq.n	801174a <osMessagePut+0x72>
 8011720:	4b0c      	ldr	r3, [pc, #48]	; (8011754 <osMessagePut+0x7c>)
 8011722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011726:	601a      	str	r2, [r3, #0]
 8011728:	f3bf 8f4f 	dsb	sy
 801172c:	f3bf 8f6f 	isb	sy
 8011730:	e00b      	b.n	801174a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8011732:	f107 0108 	add.w	r1, r7, #8
 8011736:	2300      	movs	r3, #0
 8011738:	697a      	ldr	r2, [r7, #20]
 801173a:	68f8      	ldr	r0, [r7, #12]
 801173c:	f000 fa6e 	bl	8011c1c <xQueueGenericSend>
 8011740:	4603      	mov	r3, r0
 8011742:	2b01      	cmp	r3, #1
 8011744:	d001      	beq.n	801174a <osMessagePut+0x72>
      return osErrorOS;
 8011746:	23ff      	movs	r3, #255	; 0xff
 8011748:	e000      	b.n	801174c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 801174a:	2300      	movs	r3, #0
}
 801174c:	4618      	mov	r0, r3
 801174e:	3718      	adds	r7, #24
 8011750:	46bd      	mov	sp, r7
 8011752:	bd80      	pop	{r7, pc}
 8011754:	e000ed04 	.word	0xe000ed04

08011758 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8011758:	b590      	push	{r4, r7, lr}
 801175a:	b08b      	sub	sp, #44	; 0x2c
 801175c:	af00      	add	r7, sp, #0
 801175e:	60f8      	str	r0, [r7, #12]
 8011760:	60b9      	str	r1, [r7, #8]
 8011762:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8011764:	68bb      	ldr	r3, [r7, #8]
 8011766:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8011768:	2300      	movs	r3, #0
 801176a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 801176c:	68bb      	ldr	r3, [r7, #8]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d10a      	bne.n	8011788 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8011772:	2380      	movs	r3, #128	; 0x80
 8011774:	617b      	str	r3, [r7, #20]
    return event;
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	461c      	mov	r4, r3
 801177a:	f107 0314 	add.w	r3, r7, #20
 801177e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011782:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011786:	e054      	b.n	8011832 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8011788:	2300      	movs	r3, #0
 801178a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 801178c:	2300      	movs	r3, #0
 801178e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011796:	d103      	bne.n	80117a0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8011798:	f04f 33ff 	mov.w	r3, #4294967295
 801179c:	627b      	str	r3, [r7, #36]	; 0x24
 801179e:	e009      	b.n	80117b4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d006      	beq.n	80117b4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80117aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d101      	bne.n	80117b4 <osMessageGet+0x5c>
      ticks = 1;
 80117b0:	2301      	movs	r3, #1
 80117b2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80117b4:	f7ff feee 	bl	8011594 <inHandlerMode>
 80117b8:	4603      	mov	r3, r0
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d01c      	beq.n	80117f8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80117be:	f107 0220 	add.w	r2, r7, #32
 80117c2:	f107 0314 	add.w	r3, r7, #20
 80117c6:	3304      	adds	r3, #4
 80117c8:	4619      	mov	r1, r3
 80117ca:	68b8      	ldr	r0, [r7, #8]
 80117cc:	f000 fca0 	bl	8012110 <xQueueReceiveFromISR>
 80117d0:	4603      	mov	r3, r0
 80117d2:	2b01      	cmp	r3, #1
 80117d4:	d102      	bne.n	80117dc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80117d6:	2310      	movs	r3, #16
 80117d8:	617b      	str	r3, [r7, #20]
 80117da:	e001      	b.n	80117e0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80117dc:	2300      	movs	r3, #0
 80117de:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80117e0:	6a3b      	ldr	r3, [r7, #32]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d01d      	beq.n	8011822 <osMessageGet+0xca>
 80117e6:	4b15      	ldr	r3, [pc, #84]	; (801183c <osMessageGet+0xe4>)
 80117e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117ec:	601a      	str	r2, [r3, #0]
 80117ee:	f3bf 8f4f 	dsb	sy
 80117f2:	f3bf 8f6f 	isb	sy
 80117f6:	e014      	b.n	8011822 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80117f8:	f107 0314 	add.w	r3, r7, #20
 80117fc:	3304      	adds	r3, #4
 80117fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011800:	4619      	mov	r1, r3
 8011802:	68b8      	ldr	r0, [r7, #8]
 8011804:	f000 fba4 	bl	8011f50 <xQueueReceive>
 8011808:	4603      	mov	r3, r0
 801180a:	2b01      	cmp	r3, #1
 801180c:	d102      	bne.n	8011814 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 801180e:	2310      	movs	r3, #16
 8011810:	617b      	str	r3, [r7, #20]
 8011812:	e006      	b.n	8011822 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8011814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011816:	2b00      	cmp	r3, #0
 8011818:	d101      	bne.n	801181e <osMessageGet+0xc6>
 801181a:	2300      	movs	r3, #0
 801181c:	e000      	b.n	8011820 <osMessageGet+0xc8>
 801181e:	2340      	movs	r3, #64	; 0x40
 8011820:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	461c      	mov	r4, r3
 8011826:	f107 0314 	add.w	r3, r7, #20
 801182a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801182e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011832:	68f8      	ldr	r0, [r7, #12]
 8011834:	372c      	adds	r7, #44	; 0x2c
 8011836:	46bd      	mov	sp, r7
 8011838:	bd90      	pop	{r4, r7, pc}
 801183a:	bf00      	nop
 801183c:	e000ed04 	.word	0xe000ed04

08011840 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011840:	b480      	push	{r7}
 8011842:	b083      	sub	sp, #12
 8011844:	af00      	add	r7, sp, #0
 8011846:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	f103 0208 	add.w	r2, r3, #8
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	f04f 32ff 	mov.w	r2, #4294967295
 8011858:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	f103 0208 	add.w	r2, r3, #8
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	f103 0208 	add.w	r2, r3, #8
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	2200      	movs	r2, #0
 8011872:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011874:	bf00      	nop
 8011876:	370c      	adds	r7, #12
 8011878:	46bd      	mov	sp, r7
 801187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187e:	4770      	bx	lr

08011880 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011880:	b480      	push	{r7}
 8011882:	b083      	sub	sp, #12
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2200      	movs	r2, #0
 801188c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801188e:	bf00      	nop
 8011890:	370c      	adds	r7, #12
 8011892:	46bd      	mov	sp, r7
 8011894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011898:	4770      	bx	lr

0801189a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801189a:	b480      	push	{r7}
 801189c:	b085      	sub	sp, #20
 801189e:	af00      	add	r7, sp, #0
 80118a0:	6078      	str	r0, [r7, #4]
 80118a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	685b      	ldr	r3, [r3, #4]
 80118a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80118aa:	683b      	ldr	r3, [r7, #0]
 80118ac:	68fa      	ldr	r2, [r7, #12]
 80118ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	689a      	ldr	r2, [r3, #8]
 80118b4:	683b      	ldr	r3, [r7, #0]
 80118b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	689b      	ldr	r3, [r3, #8]
 80118bc:	683a      	ldr	r2, [r7, #0]
 80118be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	683a      	ldr	r2, [r7, #0]
 80118c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80118c6:	683b      	ldr	r3, [r7, #0]
 80118c8:	687a      	ldr	r2, [r7, #4]
 80118ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	1c5a      	adds	r2, r3, #1
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	601a      	str	r2, [r3, #0]
}
 80118d6:	bf00      	nop
 80118d8:	3714      	adds	r7, #20
 80118da:	46bd      	mov	sp, r7
 80118dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e0:	4770      	bx	lr

080118e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80118e2:	b480      	push	{r7}
 80118e4:	b085      	sub	sp, #20
 80118e6:	af00      	add	r7, sp, #0
 80118e8:	6078      	str	r0, [r7, #4]
 80118ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80118ec:	683b      	ldr	r3, [r7, #0]
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80118f2:	68bb      	ldr	r3, [r7, #8]
 80118f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118f8:	d103      	bne.n	8011902 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	691b      	ldr	r3, [r3, #16]
 80118fe:	60fb      	str	r3, [r7, #12]
 8011900:	e00c      	b.n	801191c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	3308      	adds	r3, #8
 8011906:	60fb      	str	r3, [r7, #12]
 8011908:	e002      	b.n	8011910 <vListInsert+0x2e>
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	685b      	ldr	r3, [r3, #4]
 801190e:	60fb      	str	r3, [r7, #12]
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	685b      	ldr	r3, [r3, #4]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	68ba      	ldr	r2, [r7, #8]
 8011918:	429a      	cmp	r2, r3
 801191a:	d2f6      	bcs.n	801190a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	685a      	ldr	r2, [r3, #4]
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011924:	683b      	ldr	r3, [r7, #0]
 8011926:	685b      	ldr	r3, [r3, #4]
 8011928:	683a      	ldr	r2, [r7, #0]
 801192a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801192c:	683b      	ldr	r3, [r7, #0]
 801192e:	68fa      	ldr	r2, [r7, #12]
 8011930:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	683a      	ldr	r2, [r7, #0]
 8011936:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011938:	683b      	ldr	r3, [r7, #0]
 801193a:	687a      	ldr	r2, [r7, #4]
 801193c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	1c5a      	adds	r2, r3, #1
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	601a      	str	r2, [r3, #0]
}
 8011948:	bf00      	nop
 801194a:	3714      	adds	r7, #20
 801194c:	46bd      	mov	sp, r7
 801194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011952:	4770      	bx	lr

08011954 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011954:	b480      	push	{r7}
 8011956:	b085      	sub	sp, #20
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	691b      	ldr	r3, [r3, #16]
 8011960:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	685b      	ldr	r3, [r3, #4]
 8011966:	687a      	ldr	r2, [r7, #4]
 8011968:	6892      	ldr	r2, [r2, #8]
 801196a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	689b      	ldr	r3, [r3, #8]
 8011970:	687a      	ldr	r2, [r7, #4]
 8011972:	6852      	ldr	r2, [r2, #4]
 8011974:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	685b      	ldr	r3, [r3, #4]
 801197a:	687a      	ldr	r2, [r7, #4]
 801197c:	429a      	cmp	r2, r3
 801197e:	d103      	bne.n	8011988 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	689a      	ldr	r2, [r3, #8]
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	2200      	movs	r2, #0
 801198c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	1e5a      	subs	r2, r3, #1
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	681b      	ldr	r3, [r3, #0]
}
 801199c:	4618      	mov	r0, r3
 801199e:	3714      	adds	r7, #20
 80119a0:	46bd      	mov	sp, r7
 80119a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a6:	4770      	bx	lr

080119a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b084      	sub	sp, #16
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
 80119b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d10a      	bne.n	80119d2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80119bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119c0:	f383 8811 	msr	BASEPRI, r3
 80119c4:	f3bf 8f6f 	isb	sy
 80119c8:	f3bf 8f4f 	dsb	sy
 80119cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80119ce:	bf00      	nop
 80119d0:	e7fe      	b.n	80119d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80119d2:	f001 fd67 	bl	80134a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	681a      	ldr	r2, [r3, #0]
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119de:	68f9      	ldr	r1, [r7, #12]
 80119e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80119e2:	fb01 f303 	mul.w	r3, r1, r3
 80119e6:	441a      	add	r2, r3
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	2200      	movs	r2, #0
 80119f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	681a      	ldr	r2, [r3, #0]
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	681a      	ldr	r2, [r3, #0]
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a02:	3b01      	subs	r3, #1
 8011a04:	68f9      	ldr	r1, [r7, #12]
 8011a06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011a08:	fb01 f303 	mul.w	r3, r1, r3
 8011a0c:	441a      	add	r2, r3
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	22ff      	movs	r2, #255	; 0xff
 8011a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	22ff      	movs	r2, #255	; 0xff
 8011a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011a22:	683b      	ldr	r3, [r7, #0]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d114      	bne.n	8011a52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	691b      	ldr	r3, [r3, #16]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d01a      	beq.n	8011a66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	3310      	adds	r3, #16
 8011a34:	4618      	mov	r0, r3
 8011a36:	f001 f93b 	bl	8012cb0 <xTaskRemoveFromEventList>
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d012      	beq.n	8011a66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011a40:	4b0c      	ldr	r3, [pc, #48]	; (8011a74 <xQueueGenericReset+0xcc>)
 8011a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a46:	601a      	str	r2, [r3, #0]
 8011a48:	f3bf 8f4f 	dsb	sy
 8011a4c:	f3bf 8f6f 	isb	sy
 8011a50:	e009      	b.n	8011a66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	3310      	adds	r3, #16
 8011a56:	4618      	mov	r0, r3
 8011a58:	f7ff fef2 	bl	8011840 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	3324      	adds	r3, #36	; 0x24
 8011a60:	4618      	mov	r0, r3
 8011a62:	f7ff feed 	bl	8011840 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011a66:	f001 fd4d 	bl	8013504 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011a6a:	2301      	movs	r3, #1
}
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	3710      	adds	r7, #16
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bd80      	pop	{r7, pc}
 8011a74:	e000ed04 	.word	0xe000ed04

08011a78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b08e      	sub	sp, #56	; 0x38
 8011a7c:	af02      	add	r7, sp, #8
 8011a7e:	60f8      	str	r0, [r7, #12]
 8011a80:	60b9      	str	r1, [r7, #8]
 8011a82:	607a      	str	r2, [r7, #4]
 8011a84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d10a      	bne.n	8011aa2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8011a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a90:	f383 8811 	msr	BASEPRI, r3
 8011a94:	f3bf 8f6f 	isb	sy
 8011a98:	f3bf 8f4f 	dsb	sy
 8011a9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011a9e:	bf00      	nop
 8011aa0:	e7fe      	b.n	8011aa0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011aa2:	683b      	ldr	r3, [r7, #0]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d10a      	bne.n	8011abe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8011aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aac:	f383 8811 	msr	BASEPRI, r3
 8011ab0:	f3bf 8f6f 	isb	sy
 8011ab4:	f3bf 8f4f 	dsb	sy
 8011ab8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011aba:	bf00      	nop
 8011abc:	e7fe      	b.n	8011abc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d002      	beq.n	8011aca <xQueueGenericCreateStatic+0x52>
 8011ac4:	68bb      	ldr	r3, [r7, #8]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d001      	beq.n	8011ace <xQueueGenericCreateStatic+0x56>
 8011aca:	2301      	movs	r3, #1
 8011acc:	e000      	b.n	8011ad0 <xQueueGenericCreateStatic+0x58>
 8011ace:	2300      	movs	r3, #0
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d10a      	bne.n	8011aea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8011ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ad8:	f383 8811 	msr	BASEPRI, r3
 8011adc:	f3bf 8f6f 	isb	sy
 8011ae0:	f3bf 8f4f 	dsb	sy
 8011ae4:	623b      	str	r3, [r7, #32]
}
 8011ae6:	bf00      	nop
 8011ae8:	e7fe      	b.n	8011ae8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d102      	bne.n	8011af6 <xQueueGenericCreateStatic+0x7e>
 8011af0:	68bb      	ldr	r3, [r7, #8]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d101      	bne.n	8011afa <xQueueGenericCreateStatic+0x82>
 8011af6:	2301      	movs	r3, #1
 8011af8:	e000      	b.n	8011afc <xQueueGenericCreateStatic+0x84>
 8011afa:	2300      	movs	r3, #0
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d10a      	bne.n	8011b16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8011b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b04:	f383 8811 	msr	BASEPRI, r3
 8011b08:	f3bf 8f6f 	isb	sy
 8011b0c:	f3bf 8f4f 	dsb	sy
 8011b10:	61fb      	str	r3, [r7, #28]
}
 8011b12:	bf00      	nop
 8011b14:	e7fe      	b.n	8011b14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011b16:	2348      	movs	r3, #72	; 0x48
 8011b18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011b1a:	697b      	ldr	r3, [r7, #20]
 8011b1c:	2b48      	cmp	r3, #72	; 0x48
 8011b1e:	d00a      	beq.n	8011b36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8011b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b24:	f383 8811 	msr	BASEPRI, r3
 8011b28:	f3bf 8f6f 	isb	sy
 8011b2c:	f3bf 8f4f 	dsb	sy
 8011b30:	61bb      	str	r3, [r7, #24]
}
 8011b32:	bf00      	nop
 8011b34:	e7fe      	b.n	8011b34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011b36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d00d      	beq.n	8011b5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b44:	2201      	movs	r2, #1
 8011b46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011b4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b50:	9300      	str	r3, [sp, #0]
 8011b52:	4613      	mov	r3, r2
 8011b54:	687a      	ldr	r2, [r7, #4]
 8011b56:	68b9      	ldr	r1, [r7, #8]
 8011b58:	68f8      	ldr	r0, [r7, #12]
 8011b5a:	f000 f83f 	bl	8011bdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011b60:	4618      	mov	r0, r3
 8011b62:	3730      	adds	r7, #48	; 0x30
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}

08011b68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b08a      	sub	sp, #40	; 0x28
 8011b6c:	af02      	add	r7, sp, #8
 8011b6e:	60f8      	str	r0, [r7, #12]
 8011b70:	60b9      	str	r1, [r7, #8]
 8011b72:	4613      	mov	r3, r2
 8011b74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d10a      	bne.n	8011b92 <xQueueGenericCreate+0x2a>
	__asm volatile
 8011b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b80:	f383 8811 	msr	BASEPRI, r3
 8011b84:	f3bf 8f6f 	isb	sy
 8011b88:	f3bf 8f4f 	dsb	sy
 8011b8c:	613b      	str	r3, [r7, #16]
}
 8011b8e:	bf00      	nop
 8011b90:	e7fe      	b.n	8011b90 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	68ba      	ldr	r2, [r7, #8]
 8011b96:	fb02 f303 	mul.w	r3, r2, r3
 8011b9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011b9c:	69fb      	ldr	r3, [r7, #28]
 8011b9e:	3348      	adds	r3, #72	; 0x48
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	f001 fda1 	bl	80136e8 <pvPortMalloc>
 8011ba6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011ba8:	69bb      	ldr	r3, [r7, #24]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d011      	beq.n	8011bd2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011bae:	69bb      	ldr	r3, [r7, #24]
 8011bb0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011bb2:	697b      	ldr	r3, [r7, #20]
 8011bb4:	3348      	adds	r3, #72	; 0x48
 8011bb6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011bb8:	69bb      	ldr	r3, [r7, #24]
 8011bba:	2200      	movs	r2, #0
 8011bbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011bc0:	79fa      	ldrb	r2, [r7, #7]
 8011bc2:	69bb      	ldr	r3, [r7, #24]
 8011bc4:	9300      	str	r3, [sp, #0]
 8011bc6:	4613      	mov	r3, r2
 8011bc8:	697a      	ldr	r2, [r7, #20]
 8011bca:	68b9      	ldr	r1, [r7, #8]
 8011bcc:	68f8      	ldr	r0, [r7, #12]
 8011bce:	f000 f805 	bl	8011bdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011bd2:	69bb      	ldr	r3, [r7, #24]
	}
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	3720      	adds	r7, #32
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	bd80      	pop	{r7, pc}

08011bdc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b084      	sub	sp, #16
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	60f8      	str	r0, [r7, #12]
 8011be4:	60b9      	str	r1, [r7, #8]
 8011be6:	607a      	str	r2, [r7, #4]
 8011be8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011bea:	68bb      	ldr	r3, [r7, #8]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d103      	bne.n	8011bf8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011bf0:	69bb      	ldr	r3, [r7, #24]
 8011bf2:	69ba      	ldr	r2, [r7, #24]
 8011bf4:	601a      	str	r2, [r3, #0]
 8011bf6:	e002      	b.n	8011bfe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011bf8:	69bb      	ldr	r3, [r7, #24]
 8011bfa:	687a      	ldr	r2, [r7, #4]
 8011bfc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011bfe:	69bb      	ldr	r3, [r7, #24]
 8011c00:	68fa      	ldr	r2, [r7, #12]
 8011c02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011c04:	69bb      	ldr	r3, [r7, #24]
 8011c06:	68ba      	ldr	r2, [r7, #8]
 8011c08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011c0a:	2101      	movs	r1, #1
 8011c0c:	69b8      	ldr	r0, [r7, #24]
 8011c0e:	f7ff fecb 	bl	80119a8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011c12:	bf00      	nop
 8011c14:	3710      	adds	r7, #16
 8011c16:	46bd      	mov	sp, r7
 8011c18:	bd80      	pop	{r7, pc}
	...

08011c1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b08e      	sub	sp, #56	; 0x38
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	60f8      	str	r0, [r7, #12]
 8011c24:	60b9      	str	r1, [r7, #8]
 8011c26:	607a      	str	r2, [r7, #4]
 8011c28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d10a      	bne.n	8011c4e <xQueueGenericSend+0x32>
	__asm volatile
 8011c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c3c:	f383 8811 	msr	BASEPRI, r3
 8011c40:	f3bf 8f6f 	isb	sy
 8011c44:	f3bf 8f4f 	dsb	sy
 8011c48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011c4a:	bf00      	nop
 8011c4c:	e7fe      	b.n	8011c4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011c4e:	68bb      	ldr	r3, [r7, #8]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d103      	bne.n	8011c5c <xQueueGenericSend+0x40>
 8011c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d101      	bne.n	8011c60 <xQueueGenericSend+0x44>
 8011c5c:	2301      	movs	r3, #1
 8011c5e:	e000      	b.n	8011c62 <xQueueGenericSend+0x46>
 8011c60:	2300      	movs	r3, #0
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d10a      	bne.n	8011c7c <xQueueGenericSend+0x60>
	__asm volatile
 8011c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c6a:	f383 8811 	msr	BASEPRI, r3
 8011c6e:	f3bf 8f6f 	isb	sy
 8011c72:	f3bf 8f4f 	dsb	sy
 8011c76:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011c78:	bf00      	nop
 8011c7a:	e7fe      	b.n	8011c7a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011c7c:	683b      	ldr	r3, [r7, #0]
 8011c7e:	2b02      	cmp	r3, #2
 8011c80:	d103      	bne.n	8011c8a <xQueueGenericSend+0x6e>
 8011c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c86:	2b01      	cmp	r3, #1
 8011c88:	d101      	bne.n	8011c8e <xQueueGenericSend+0x72>
 8011c8a:	2301      	movs	r3, #1
 8011c8c:	e000      	b.n	8011c90 <xQueueGenericSend+0x74>
 8011c8e:	2300      	movs	r3, #0
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d10a      	bne.n	8011caa <xQueueGenericSend+0x8e>
	__asm volatile
 8011c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c98:	f383 8811 	msr	BASEPRI, r3
 8011c9c:	f3bf 8f6f 	isb	sy
 8011ca0:	f3bf 8f4f 	dsb	sy
 8011ca4:	623b      	str	r3, [r7, #32]
}
 8011ca6:	bf00      	nop
 8011ca8:	e7fe      	b.n	8011ca8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011caa:	f001 f9c1 	bl	8013030 <xTaskGetSchedulerState>
 8011cae:	4603      	mov	r3, r0
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d102      	bne.n	8011cba <xQueueGenericSend+0x9e>
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d101      	bne.n	8011cbe <xQueueGenericSend+0xa2>
 8011cba:	2301      	movs	r3, #1
 8011cbc:	e000      	b.n	8011cc0 <xQueueGenericSend+0xa4>
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d10a      	bne.n	8011cda <xQueueGenericSend+0xbe>
	__asm volatile
 8011cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cc8:	f383 8811 	msr	BASEPRI, r3
 8011ccc:	f3bf 8f6f 	isb	sy
 8011cd0:	f3bf 8f4f 	dsb	sy
 8011cd4:	61fb      	str	r3, [r7, #28]
}
 8011cd6:	bf00      	nop
 8011cd8:	e7fe      	b.n	8011cd8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011cda:	f001 fbe3 	bl	80134a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ce6:	429a      	cmp	r2, r3
 8011ce8:	d302      	bcc.n	8011cf0 <xQueueGenericSend+0xd4>
 8011cea:	683b      	ldr	r3, [r7, #0]
 8011cec:	2b02      	cmp	r3, #2
 8011cee:	d129      	bne.n	8011d44 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011cf0:	683a      	ldr	r2, [r7, #0]
 8011cf2:	68b9      	ldr	r1, [r7, #8]
 8011cf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011cf6:	f000 fa8b 	bl	8012210 <prvCopyDataToQueue>
 8011cfa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d010      	beq.n	8011d26 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d06:	3324      	adds	r3, #36	; 0x24
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f000 ffd1 	bl	8012cb0 <xTaskRemoveFromEventList>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d013      	beq.n	8011d3c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011d14:	4b3f      	ldr	r3, [pc, #252]	; (8011e14 <xQueueGenericSend+0x1f8>)
 8011d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d1a:	601a      	str	r2, [r3, #0]
 8011d1c:	f3bf 8f4f 	dsb	sy
 8011d20:	f3bf 8f6f 	isb	sy
 8011d24:	e00a      	b.n	8011d3c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d007      	beq.n	8011d3c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011d2c:	4b39      	ldr	r3, [pc, #228]	; (8011e14 <xQueueGenericSend+0x1f8>)
 8011d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d32:	601a      	str	r2, [r3, #0]
 8011d34:	f3bf 8f4f 	dsb	sy
 8011d38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011d3c:	f001 fbe2 	bl	8013504 <vPortExitCritical>
				return pdPASS;
 8011d40:	2301      	movs	r3, #1
 8011d42:	e063      	b.n	8011e0c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d103      	bne.n	8011d52 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011d4a:	f001 fbdb 	bl	8013504 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011d4e:	2300      	movs	r3, #0
 8011d50:	e05c      	b.n	8011e0c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d106      	bne.n	8011d66 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011d58:	f107 0314 	add.w	r3, r7, #20
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	f001 f809 	bl	8012d74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011d62:	2301      	movs	r3, #1
 8011d64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011d66:	f001 fbcd 	bl	8013504 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011d6a:	f000 fda9 	bl	80128c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011d6e:	f001 fb99 	bl	80134a4 <vPortEnterCritical>
 8011d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011d78:	b25b      	sxtb	r3, r3
 8011d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d7e:	d103      	bne.n	8011d88 <xQueueGenericSend+0x16c>
 8011d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d82:	2200      	movs	r2, #0
 8011d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011d8e:	b25b      	sxtb	r3, r3
 8011d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d94:	d103      	bne.n	8011d9e <xQueueGenericSend+0x182>
 8011d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d98:	2200      	movs	r2, #0
 8011d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011d9e:	f001 fbb1 	bl	8013504 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011da2:	1d3a      	adds	r2, r7, #4
 8011da4:	f107 0314 	add.w	r3, r7, #20
 8011da8:	4611      	mov	r1, r2
 8011daa:	4618      	mov	r0, r3
 8011dac:	f000 fff8 	bl	8012da0 <xTaskCheckForTimeOut>
 8011db0:	4603      	mov	r3, r0
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d124      	bne.n	8011e00 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011db6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011db8:	f000 fb22 	bl	8012400 <prvIsQueueFull>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d018      	beq.n	8011df4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dc4:	3310      	adds	r3, #16
 8011dc6:	687a      	ldr	r2, [r7, #4]
 8011dc8:	4611      	mov	r1, r2
 8011dca:	4618      	mov	r0, r3
 8011dcc:	f000 ff4c 	bl	8012c68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011dd2:	f000 faad 	bl	8012330 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011dd6:	f000 fd81 	bl	80128dc <xTaskResumeAll>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	f47f af7c 	bne.w	8011cda <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8011de2:	4b0c      	ldr	r3, [pc, #48]	; (8011e14 <xQueueGenericSend+0x1f8>)
 8011de4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011de8:	601a      	str	r2, [r3, #0]
 8011dea:	f3bf 8f4f 	dsb	sy
 8011dee:	f3bf 8f6f 	isb	sy
 8011df2:	e772      	b.n	8011cda <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011df4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011df6:	f000 fa9b 	bl	8012330 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011dfa:	f000 fd6f 	bl	80128dc <xTaskResumeAll>
 8011dfe:	e76c      	b.n	8011cda <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011e00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e02:	f000 fa95 	bl	8012330 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011e06:	f000 fd69 	bl	80128dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011e0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	3738      	adds	r7, #56	; 0x38
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}
 8011e14:	e000ed04 	.word	0xe000ed04

08011e18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b090      	sub	sp, #64	; 0x40
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	60f8      	str	r0, [r7, #12]
 8011e20:	60b9      	str	r1, [r7, #8]
 8011e22:	607a      	str	r2, [r7, #4]
 8011e24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8011e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d10a      	bne.n	8011e46 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8011e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e34:	f383 8811 	msr	BASEPRI, r3
 8011e38:	f3bf 8f6f 	isb	sy
 8011e3c:	f3bf 8f4f 	dsb	sy
 8011e40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011e42:	bf00      	nop
 8011e44:	e7fe      	b.n	8011e44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011e46:	68bb      	ldr	r3, [r7, #8]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d103      	bne.n	8011e54 <xQueueGenericSendFromISR+0x3c>
 8011e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d101      	bne.n	8011e58 <xQueueGenericSendFromISR+0x40>
 8011e54:	2301      	movs	r3, #1
 8011e56:	e000      	b.n	8011e5a <xQueueGenericSendFromISR+0x42>
 8011e58:	2300      	movs	r3, #0
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d10a      	bne.n	8011e74 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8011e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e62:	f383 8811 	msr	BASEPRI, r3
 8011e66:	f3bf 8f6f 	isb	sy
 8011e6a:	f3bf 8f4f 	dsb	sy
 8011e6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011e70:	bf00      	nop
 8011e72:	e7fe      	b.n	8011e72 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011e74:	683b      	ldr	r3, [r7, #0]
 8011e76:	2b02      	cmp	r3, #2
 8011e78:	d103      	bne.n	8011e82 <xQueueGenericSendFromISR+0x6a>
 8011e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e7e:	2b01      	cmp	r3, #1
 8011e80:	d101      	bne.n	8011e86 <xQueueGenericSendFromISR+0x6e>
 8011e82:	2301      	movs	r3, #1
 8011e84:	e000      	b.n	8011e88 <xQueueGenericSendFromISR+0x70>
 8011e86:	2300      	movs	r3, #0
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d10a      	bne.n	8011ea2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8011e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e90:	f383 8811 	msr	BASEPRI, r3
 8011e94:	f3bf 8f6f 	isb	sy
 8011e98:	f3bf 8f4f 	dsb	sy
 8011e9c:	623b      	str	r3, [r7, #32]
}
 8011e9e:	bf00      	nop
 8011ea0:	e7fe      	b.n	8011ea0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011ea2:	f001 fbe1 	bl	8013668 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011ea6:	f3ef 8211 	mrs	r2, BASEPRI
 8011eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eae:	f383 8811 	msr	BASEPRI, r3
 8011eb2:	f3bf 8f6f 	isb	sy
 8011eb6:	f3bf 8f4f 	dsb	sy
 8011eba:	61fa      	str	r2, [r7, #28]
 8011ebc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011ebe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011ec0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011eca:	429a      	cmp	r2, r3
 8011ecc:	d302      	bcc.n	8011ed4 <xQueueGenericSendFromISR+0xbc>
 8011ece:	683b      	ldr	r3, [r7, #0]
 8011ed0:	2b02      	cmp	r3, #2
 8011ed2:	d12f      	bne.n	8011f34 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ed6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011ee4:	683a      	ldr	r2, [r7, #0]
 8011ee6:	68b9      	ldr	r1, [r7, #8]
 8011ee8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011eea:	f000 f991 	bl	8012210 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011eee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8011ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ef6:	d112      	bne.n	8011f1e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d016      	beq.n	8011f2e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f02:	3324      	adds	r3, #36	; 0x24
 8011f04:	4618      	mov	r0, r3
 8011f06:	f000 fed3 	bl	8012cb0 <xTaskRemoveFromEventList>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d00e      	beq.n	8011f2e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d00b      	beq.n	8011f2e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	2201      	movs	r2, #1
 8011f1a:	601a      	str	r2, [r3, #0]
 8011f1c:	e007      	b.n	8011f2e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011f1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011f22:	3301      	adds	r3, #1
 8011f24:	b2db      	uxtb	r3, r3
 8011f26:	b25a      	sxtb	r2, r3
 8011f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011f2e:	2301      	movs	r3, #1
 8011f30:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8011f32:	e001      	b.n	8011f38 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011f34:	2300      	movs	r3, #0
 8011f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f3a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011f3c:	697b      	ldr	r3, [r7, #20]
 8011f3e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011f42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011f46:	4618      	mov	r0, r3
 8011f48:	3740      	adds	r7, #64	; 0x40
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	bd80      	pop	{r7, pc}
	...

08011f50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b08c      	sub	sp, #48	; 0x30
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	60f8      	str	r0, [r7, #12]
 8011f58:	60b9      	str	r1, [r7, #8]
 8011f5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d10a      	bne.n	8011f80 <xQueueReceive+0x30>
	__asm volatile
 8011f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f6e:	f383 8811 	msr	BASEPRI, r3
 8011f72:	f3bf 8f6f 	isb	sy
 8011f76:	f3bf 8f4f 	dsb	sy
 8011f7a:	623b      	str	r3, [r7, #32]
}
 8011f7c:	bf00      	nop
 8011f7e:	e7fe      	b.n	8011f7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011f80:	68bb      	ldr	r3, [r7, #8]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d103      	bne.n	8011f8e <xQueueReceive+0x3e>
 8011f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d101      	bne.n	8011f92 <xQueueReceive+0x42>
 8011f8e:	2301      	movs	r3, #1
 8011f90:	e000      	b.n	8011f94 <xQueueReceive+0x44>
 8011f92:	2300      	movs	r3, #0
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d10a      	bne.n	8011fae <xQueueReceive+0x5e>
	__asm volatile
 8011f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f9c:	f383 8811 	msr	BASEPRI, r3
 8011fa0:	f3bf 8f6f 	isb	sy
 8011fa4:	f3bf 8f4f 	dsb	sy
 8011fa8:	61fb      	str	r3, [r7, #28]
}
 8011faa:	bf00      	nop
 8011fac:	e7fe      	b.n	8011fac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011fae:	f001 f83f 	bl	8013030 <xTaskGetSchedulerState>
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d102      	bne.n	8011fbe <xQueueReceive+0x6e>
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d101      	bne.n	8011fc2 <xQueueReceive+0x72>
 8011fbe:	2301      	movs	r3, #1
 8011fc0:	e000      	b.n	8011fc4 <xQueueReceive+0x74>
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d10a      	bne.n	8011fde <xQueueReceive+0x8e>
	__asm volatile
 8011fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fcc:	f383 8811 	msr	BASEPRI, r3
 8011fd0:	f3bf 8f6f 	isb	sy
 8011fd4:	f3bf 8f4f 	dsb	sy
 8011fd8:	61bb      	str	r3, [r7, #24]
}
 8011fda:	bf00      	nop
 8011fdc:	e7fe      	b.n	8011fdc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011fde:	f001 fa61 	bl	80134a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fe6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d01f      	beq.n	801202e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011fee:	68b9      	ldr	r1, [r7, #8]
 8011ff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ff2:	f000 f977 	bl	80122e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ff8:	1e5a      	subs	r2, r3, #1
 8011ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ffc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012000:	691b      	ldr	r3, [r3, #16]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d00f      	beq.n	8012026 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012008:	3310      	adds	r3, #16
 801200a:	4618      	mov	r0, r3
 801200c:	f000 fe50 	bl	8012cb0 <xTaskRemoveFromEventList>
 8012010:	4603      	mov	r3, r0
 8012012:	2b00      	cmp	r3, #0
 8012014:	d007      	beq.n	8012026 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012016:	4b3d      	ldr	r3, [pc, #244]	; (801210c <xQueueReceive+0x1bc>)
 8012018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801201c:	601a      	str	r2, [r3, #0]
 801201e:	f3bf 8f4f 	dsb	sy
 8012022:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012026:	f001 fa6d 	bl	8013504 <vPortExitCritical>
				return pdPASS;
 801202a:	2301      	movs	r3, #1
 801202c:	e069      	b.n	8012102 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	2b00      	cmp	r3, #0
 8012032:	d103      	bne.n	801203c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012034:	f001 fa66 	bl	8013504 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012038:	2300      	movs	r3, #0
 801203a:	e062      	b.n	8012102 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801203c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801203e:	2b00      	cmp	r3, #0
 8012040:	d106      	bne.n	8012050 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012042:	f107 0310 	add.w	r3, r7, #16
 8012046:	4618      	mov	r0, r3
 8012048:	f000 fe94 	bl	8012d74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801204c:	2301      	movs	r3, #1
 801204e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012050:	f001 fa58 	bl	8013504 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012054:	f000 fc34 	bl	80128c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012058:	f001 fa24 	bl	80134a4 <vPortEnterCritical>
 801205c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801205e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012062:	b25b      	sxtb	r3, r3
 8012064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012068:	d103      	bne.n	8012072 <xQueueReceive+0x122>
 801206a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801206c:	2200      	movs	r2, #0
 801206e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012074:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012078:	b25b      	sxtb	r3, r3
 801207a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801207e:	d103      	bne.n	8012088 <xQueueReceive+0x138>
 8012080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012082:	2200      	movs	r2, #0
 8012084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012088:	f001 fa3c 	bl	8013504 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801208c:	1d3a      	adds	r2, r7, #4
 801208e:	f107 0310 	add.w	r3, r7, #16
 8012092:	4611      	mov	r1, r2
 8012094:	4618      	mov	r0, r3
 8012096:	f000 fe83 	bl	8012da0 <xTaskCheckForTimeOut>
 801209a:	4603      	mov	r3, r0
 801209c:	2b00      	cmp	r3, #0
 801209e:	d123      	bne.n	80120e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80120a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120a2:	f000 f997 	bl	80123d4 <prvIsQueueEmpty>
 80120a6:	4603      	mov	r3, r0
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d017      	beq.n	80120dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80120ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120ae:	3324      	adds	r3, #36	; 0x24
 80120b0:	687a      	ldr	r2, [r7, #4]
 80120b2:	4611      	mov	r1, r2
 80120b4:	4618      	mov	r0, r3
 80120b6:	f000 fdd7 	bl	8012c68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80120ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120bc:	f000 f938 	bl	8012330 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80120c0:	f000 fc0c 	bl	80128dc <xTaskResumeAll>
 80120c4:	4603      	mov	r3, r0
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d189      	bne.n	8011fde <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80120ca:	4b10      	ldr	r3, [pc, #64]	; (801210c <xQueueReceive+0x1bc>)
 80120cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80120d0:	601a      	str	r2, [r3, #0]
 80120d2:	f3bf 8f4f 	dsb	sy
 80120d6:	f3bf 8f6f 	isb	sy
 80120da:	e780      	b.n	8011fde <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80120dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120de:	f000 f927 	bl	8012330 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80120e2:	f000 fbfb 	bl	80128dc <xTaskResumeAll>
 80120e6:	e77a      	b.n	8011fde <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80120e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120ea:	f000 f921 	bl	8012330 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80120ee:	f000 fbf5 	bl	80128dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80120f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120f4:	f000 f96e 	bl	80123d4 <prvIsQueueEmpty>
 80120f8:	4603      	mov	r3, r0
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	f43f af6f 	beq.w	8011fde <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012100:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012102:	4618      	mov	r0, r3
 8012104:	3730      	adds	r7, #48	; 0x30
 8012106:	46bd      	mov	sp, r7
 8012108:	bd80      	pop	{r7, pc}
 801210a:	bf00      	nop
 801210c:	e000ed04 	.word	0xe000ed04

08012110 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012110:	b580      	push	{r7, lr}
 8012112:	b08e      	sub	sp, #56	; 0x38
 8012114:	af00      	add	r7, sp, #0
 8012116:	60f8      	str	r0, [r7, #12]
 8012118:	60b9      	str	r1, [r7, #8]
 801211a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012122:	2b00      	cmp	r3, #0
 8012124:	d10a      	bne.n	801213c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8012126:	f04f 0350 	mov.w	r3, #80	; 0x50
 801212a:	f383 8811 	msr	BASEPRI, r3
 801212e:	f3bf 8f6f 	isb	sy
 8012132:	f3bf 8f4f 	dsb	sy
 8012136:	623b      	str	r3, [r7, #32]
}
 8012138:	bf00      	nop
 801213a:	e7fe      	b.n	801213a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801213c:	68bb      	ldr	r3, [r7, #8]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d103      	bne.n	801214a <xQueueReceiveFromISR+0x3a>
 8012142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012146:	2b00      	cmp	r3, #0
 8012148:	d101      	bne.n	801214e <xQueueReceiveFromISR+0x3e>
 801214a:	2301      	movs	r3, #1
 801214c:	e000      	b.n	8012150 <xQueueReceiveFromISR+0x40>
 801214e:	2300      	movs	r3, #0
 8012150:	2b00      	cmp	r3, #0
 8012152:	d10a      	bne.n	801216a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8012154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012158:	f383 8811 	msr	BASEPRI, r3
 801215c:	f3bf 8f6f 	isb	sy
 8012160:	f3bf 8f4f 	dsb	sy
 8012164:	61fb      	str	r3, [r7, #28]
}
 8012166:	bf00      	nop
 8012168:	e7fe      	b.n	8012168 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801216a:	f001 fa7d 	bl	8013668 <vPortValidateInterruptPriority>
	__asm volatile
 801216e:	f3ef 8211 	mrs	r2, BASEPRI
 8012172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012176:	f383 8811 	msr	BASEPRI, r3
 801217a:	f3bf 8f6f 	isb	sy
 801217e:	f3bf 8f4f 	dsb	sy
 8012182:	61ba      	str	r2, [r7, #24]
 8012184:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012186:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012188:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801218a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801218c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801218e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012192:	2b00      	cmp	r3, #0
 8012194:	d02f      	beq.n	80121f6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012198:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801219c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80121a0:	68b9      	ldr	r1, [r7, #8]
 80121a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80121a4:	f000 f89e 	bl	80122e4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80121a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121aa:	1e5a      	subs	r2, r3, #1
 80121ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80121b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80121b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121b8:	d112      	bne.n	80121e0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80121ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121bc:	691b      	ldr	r3, [r3, #16]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d016      	beq.n	80121f0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80121c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121c4:	3310      	adds	r3, #16
 80121c6:	4618      	mov	r0, r3
 80121c8:	f000 fd72 	bl	8012cb0 <xTaskRemoveFromEventList>
 80121cc:	4603      	mov	r3, r0
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d00e      	beq.n	80121f0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d00b      	beq.n	80121f0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	2201      	movs	r2, #1
 80121dc:	601a      	str	r2, [r3, #0]
 80121de:	e007      	b.n	80121f0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80121e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80121e4:	3301      	adds	r3, #1
 80121e6:	b2db      	uxtb	r3, r3
 80121e8:	b25a      	sxtb	r2, r3
 80121ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80121f0:	2301      	movs	r3, #1
 80121f2:	637b      	str	r3, [r7, #52]	; 0x34
 80121f4:	e001      	b.n	80121fa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80121f6:	2300      	movs	r3, #0
 80121f8:	637b      	str	r3, [r7, #52]	; 0x34
 80121fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80121fe:	693b      	ldr	r3, [r7, #16]
 8012200:	f383 8811 	msr	BASEPRI, r3
}
 8012204:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012208:	4618      	mov	r0, r3
 801220a:	3738      	adds	r7, #56	; 0x38
 801220c:	46bd      	mov	sp, r7
 801220e:	bd80      	pop	{r7, pc}

08012210 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012210:	b580      	push	{r7, lr}
 8012212:	b086      	sub	sp, #24
 8012214:	af00      	add	r7, sp, #0
 8012216:	60f8      	str	r0, [r7, #12]
 8012218:	60b9      	str	r1, [r7, #8]
 801221a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801221c:	2300      	movs	r3, #0
 801221e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012224:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801222a:	2b00      	cmp	r3, #0
 801222c:	d10d      	bne.n	801224a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d14d      	bne.n	80122d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	689b      	ldr	r3, [r3, #8]
 801223a:	4618      	mov	r0, r3
 801223c:	f000 ff16 	bl	801306c <xTaskPriorityDisinherit>
 8012240:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	2200      	movs	r2, #0
 8012246:	609a      	str	r2, [r3, #8]
 8012248:	e043      	b.n	80122d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d119      	bne.n	8012284 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	6858      	ldr	r0, [r3, #4]
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012258:	461a      	mov	r2, r3
 801225a:	68b9      	ldr	r1, [r7, #8]
 801225c:	f002 f8ce 	bl	80143fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	685a      	ldr	r2, [r3, #4]
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012268:	441a      	add	r2, r3
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	685a      	ldr	r2, [r3, #4]
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	689b      	ldr	r3, [r3, #8]
 8012276:	429a      	cmp	r2, r3
 8012278:	d32b      	bcc.n	80122d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	681a      	ldr	r2, [r3, #0]
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	605a      	str	r2, [r3, #4]
 8012282:	e026      	b.n	80122d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	68d8      	ldr	r0, [r3, #12]
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801228c:	461a      	mov	r2, r3
 801228e:	68b9      	ldr	r1, [r7, #8]
 8012290:	f002 f8b4 	bl	80143fc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	68da      	ldr	r2, [r3, #12]
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801229c:	425b      	negs	r3, r3
 801229e:	441a      	add	r2, r3
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	68da      	ldr	r2, [r3, #12]
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	429a      	cmp	r2, r3
 80122ae:	d207      	bcs.n	80122c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	689a      	ldr	r2, [r3, #8]
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122b8:	425b      	negs	r3, r3
 80122ba:	441a      	add	r2, r3
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	2b02      	cmp	r3, #2
 80122c4:	d105      	bne.n	80122d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80122c6:	693b      	ldr	r3, [r7, #16]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d002      	beq.n	80122d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80122cc:	693b      	ldr	r3, [r7, #16]
 80122ce:	3b01      	subs	r3, #1
 80122d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80122d2:	693b      	ldr	r3, [r7, #16]
 80122d4:	1c5a      	adds	r2, r3, #1
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80122da:	697b      	ldr	r3, [r7, #20]
}
 80122dc:	4618      	mov	r0, r3
 80122de:	3718      	adds	r7, #24
 80122e0:	46bd      	mov	sp, r7
 80122e2:	bd80      	pop	{r7, pc}

080122e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b082      	sub	sp, #8
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
 80122ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d018      	beq.n	8012328 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	68da      	ldr	r2, [r3, #12]
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122fe:	441a      	add	r2, r3
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	68da      	ldr	r2, [r3, #12]
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	689b      	ldr	r3, [r3, #8]
 801230c:	429a      	cmp	r2, r3
 801230e:	d303      	bcc.n	8012318 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	681a      	ldr	r2, [r3, #0]
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	68d9      	ldr	r1, [r3, #12]
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012320:	461a      	mov	r2, r3
 8012322:	6838      	ldr	r0, [r7, #0]
 8012324:	f002 f86a 	bl	80143fc <memcpy>
	}
}
 8012328:	bf00      	nop
 801232a:	3708      	adds	r7, #8
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}

08012330 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012330:	b580      	push	{r7, lr}
 8012332:	b084      	sub	sp, #16
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012338:	f001 f8b4 	bl	80134a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012342:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012344:	e011      	b.n	801236a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801234a:	2b00      	cmp	r3, #0
 801234c:	d012      	beq.n	8012374 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	3324      	adds	r3, #36	; 0x24
 8012352:	4618      	mov	r0, r3
 8012354:	f000 fcac 	bl	8012cb0 <xTaskRemoveFromEventList>
 8012358:	4603      	mov	r3, r0
 801235a:	2b00      	cmp	r3, #0
 801235c:	d001      	beq.n	8012362 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801235e:	f000 fd81 	bl	8012e64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012362:	7bfb      	ldrb	r3, [r7, #15]
 8012364:	3b01      	subs	r3, #1
 8012366:	b2db      	uxtb	r3, r3
 8012368:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801236a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801236e:	2b00      	cmp	r3, #0
 8012370:	dce9      	bgt.n	8012346 <prvUnlockQueue+0x16>
 8012372:	e000      	b.n	8012376 <prvUnlockQueue+0x46>
					break;
 8012374:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	22ff      	movs	r2, #255	; 0xff
 801237a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801237e:	f001 f8c1 	bl	8013504 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012382:	f001 f88f 	bl	80134a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801238c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801238e:	e011      	b.n	80123b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	691b      	ldr	r3, [r3, #16]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d012      	beq.n	80123be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	3310      	adds	r3, #16
 801239c:	4618      	mov	r0, r3
 801239e:	f000 fc87 	bl	8012cb0 <xTaskRemoveFromEventList>
 80123a2:	4603      	mov	r3, r0
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d001      	beq.n	80123ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80123a8:	f000 fd5c 	bl	8012e64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80123ac:	7bbb      	ldrb	r3, [r7, #14]
 80123ae:	3b01      	subs	r3, #1
 80123b0:	b2db      	uxtb	r3, r3
 80123b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80123b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	dce9      	bgt.n	8012390 <prvUnlockQueue+0x60>
 80123bc:	e000      	b.n	80123c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80123be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	22ff      	movs	r2, #255	; 0xff
 80123c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80123c8:	f001 f89c 	bl	8013504 <vPortExitCritical>
}
 80123cc:	bf00      	nop
 80123ce:	3710      	adds	r7, #16
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bd80      	pop	{r7, pc}

080123d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b084      	sub	sp, #16
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80123dc:	f001 f862 	bl	80134a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d102      	bne.n	80123ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80123e8:	2301      	movs	r3, #1
 80123ea:	60fb      	str	r3, [r7, #12]
 80123ec:	e001      	b.n	80123f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80123ee:	2300      	movs	r3, #0
 80123f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80123f2:	f001 f887 	bl	8013504 <vPortExitCritical>

	return xReturn;
 80123f6:	68fb      	ldr	r3, [r7, #12]
}
 80123f8:	4618      	mov	r0, r3
 80123fa:	3710      	adds	r7, #16
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd80      	pop	{r7, pc}

08012400 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b084      	sub	sp, #16
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012408:	f001 f84c 	bl	80134a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012414:	429a      	cmp	r2, r3
 8012416:	d102      	bne.n	801241e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012418:	2301      	movs	r3, #1
 801241a:	60fb      	str	r3, [r7, #12]
 801241c:	e001      	b.n	8012422 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801241e:	2300      	movs	r3, #0
 8012420:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012422:	f001 f86f 	bl	8013504 <vPortExitCritical>

	return xReturn;
 8012426:	68fb      	ldr	r3, [r7, #12]
}
 8012428:	4618      	mov	r0, r3
 801242a:	3710      	adds	r7, #16
 801242c:	46bd      	mov	sp, r7
 801242e:	bd80      	pop	{r7, pc}

08012430 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012430:	b580      	push	{r7, lr}
 8012432:	b08e      	sub	sp, #56	; 0x38
 8012434:	af04      	add	r7, sp, #16
 8012436:	60f8      	str	r0, [r7, #12]
 8012438:	60b9      	str	r1, [r7, #8]
 801243a:	607a      	str	r2, [r7, #4]
 801243c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801243e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012440:	2b00      	cmp	r3, #0
 8012442:	d10a      	bne.n	801245a <xTaskCreateStatic+0x2a>
	__asm volatile
 8012444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012448:	f383 8811 	msr	BASEPRI, r3
 801244c:	f3bf 8f6f 	isb	sy
 8012450:	f3bf 8f4f 	dsb	sy
 8012454:	623b      	str	r3, [r7, #32]
}
 8012456:	bf00      	nop
 8012458:	e7fe      	b.n	8012458 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801245a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801245c:	2b00      	cmp	r3, #0
 801245e:	d10a      	bne.n	8012476 <xTaskCreateStatic+0x46>
	__asm volatile
 8012460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012464:	f383 8811 	msr	BASEPRI, r3
 8012468:	f3bf 8f6f 	isb	sy
 801246c:	f3bf 8f4f 	dsb	sy
 8012470:	61fb      	str	r3, [r7, #28]
}
 8012472:	bf00      	nop
 8012474:	e7fe      	b.n	8012474 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012476:	23b4      	movs	r3, #180	; 0xb4
 8012478:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801247a:	693b      	ldr	r3, [r7, #16]
 801247c:	2bb4      	cmp	r3, #180	; 0xb4
 801247e:	d00a      	beq.n	8012496 <xTaskCreateStatic+0x66>
	__asm volatile
 8012480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012484:	f383 8811 	msr	BASEPRI, r3
 8012488:	f3bf 8f6f 	isb	sy
 801248c:	f3bf 8f4f 	dsb	sy
 8012490:	61bb      	str	r3, [r7, #24]
}
 8012492:	bf00      	nop
 8012494:	e7fe      	b.n	8012494 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012496:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801249a:	2b00      	cmp	r3, #0
 801249c:	d01e      	beq.n	80124dc <xTaskCreateStatic+0xac>
 801249e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d01b      	beq.n	80124dc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80124a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80124a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80124ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80124ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b0:	2202      	movs	r2, #2
 80124b2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80124b6:	2300      	movs	r3, #0
 80124b8:	9303      	str	r3, [sp, #12]
 80124ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124bc:	9302      	str	r3, [sp, #8]
 80124be:	f107 0314 	add.w	r3, r7, #20
 80124c2:	9301      	str	r3, [sp, #4]
 80124c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124c6:	9300      	str	r3, [sp, #0]
 80124c8:	683b      	ldr	r3, [r7, #0]
 80124ca:	687a      	ldr	r2, [r7, #4]
 80124cc:	68b9      	ldr	r1, [r7, #8]
 80124ce:	68f8      	ldr	r0, [r7, #12]
 80124d0:	f000 f850 	bl	8012574 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80124d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80124d6:	f000 f8eb 	bl	80126b0 <prvAddNewTaskToReadyList>
 80124da:	e001      	b.n	80124e0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80124dc:	2300      	movs	r3, #0
 80124de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80124e0:	697b      	ldr	r3, [r7, #20]
	}
 80124e2:	4618      	mov	r0, r3
 80124e4:	3728      	adds	r7, #40	; 0x28
 80124e6:	46bd      	mov	sp, r7
 80124e8:	bd80      	pop	{r7, pc}

080124ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80124ea:	b580      	push	{r7, lr}
 80124ec:	b08c      	sub	sp, #48	; 0x30
 80124ee:	af04      	add	r7, sp, #16
 80124f0:	60f8      	str	r0, [r7, #12]
 80124f2:	60b9      	str	r1, [r7, #8]
 80124f4:	603b      	str	r3, [r7, #0]
 80124f6:	4613      	mov	r3, r2
 80124f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80124fa:	88fb      	ldrh	r3, [r7, #6]
 80124fc:	009b      	lsls	r3, r3, #2
 80124fe:	4618      	mov	r0, r3
 8012500:	f001 f8f2 	bl	80136e8 <pvPortMalloc>
 8012504:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012506:	697b      	ldr	r3, [r7, #20]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d00e      	beq.n	801252a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801250c:	20b4      	movs	r0, #180	; 0xb4
 801250e:	f001 f8eb 	bl	80136e8 <pvPortMalloc>
 8012512:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012514:	69fb      	ldr	r3, [r7, #28]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d003      	beq.n	8012522 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801251a:	69fb      	ldr	r3, [r7, #28]
 801251c:	697a      	ldr	r2, [r7, #20]
 801251e:	631a      	str	r2, [r3, #48]	; 0x30
 8012520:	e005      	b.n	801252e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012522:	6978      	ldr	r0, [r7, #20]
 8012524:	f001 f9ac 	bl	8013880 <vPortFree>
 8012528:	e001      	b.n	801252e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801252a:	2300      	movs	r3, #0
 801252c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801252e:	69fb      	ldr	r3, [r7, #28]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d017      	beq.n	8012564 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012534:	69fb      	ldr	r3, [r7, #28]
 8012536:	2200      	movs	r2, #0
 8012538:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801253c:	88fa      	ldrh	r2, [r7, #6]
 801253e:	2300      	movs	r3, #0
 8012540:	9303      	str	r3, [sp, #12]
 8012542:	69fb      	ldr	r3, [r7, #28]
 8012544:	9302      	str	r3, [sp, #8]
 8012546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012548:	9301      	str	r3, [sp, #4]
 801254a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801254c:	9300      	str	r3, [sp, #0]
 801254e:	683b      	ldr	r3, [r7, #0]
 8012550:	68b9      	ldr	r1, [r7, #8]
 8012552:	68f8      	ldr	r0, [r7, #12]
 8012554:	f000 f80e 	bl	8012574 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012558:	69f8      	ldr	r0, [r7, #28]
 801255a:	f000 f8a9 	bl	80126b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801255e:	2301      	movs	r3, #1
 8012560:	61bb      	str	r3, [r7, #24]
 8012562:	e002      	b.n	801256a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012564:	f04f 33ff 	mov.w	r3, #4294967295
 8012568:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801256a:	69bb      	ldr	r3, [r7, #24]
	}
 801256c:	4618      	mov	r0, r3
 801256e:	3720      	adds	r7, #32
 8012570:	46bd      	mov	sp, r7
 8012572:	bd80      	pop	{r7, pc}

08012574 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012574:	b580      	push	{r7, lr}
 8012576:	b088      	sub	sp, #32
 8012578:	af00      	add	r7, sp, #0
 801257a:	60f8      	str	r0, [r7, #12]
 801257c:	60b9      	str	r1, [r7, #8]
 801257e:	607a      	str	r2, [r7, #4]
 8012580:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801258c:	3b01      	subs	r3, #1
 801258e:	009b      	lsls	r3, r3, #2
 8012590:	4413      	add	r3, r2
 8012592:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012594:	69bb      	ldr	r3, [r7, #24]
 8012596:	f023 0307 	bic.w	r3, r3, #7
 801259a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801259c:	69bb      	ldr	r3, [r7, #24]
 801259e:	f003 0307 	and.w	r3, r3, #7
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d00a      	beq.n	80125bc <prvInitialiseNewTask+0x48>
	__asm volatile
 80125a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125aa:	f383 8811 	msr	BASEPRI, r3
 80125ae:	f3bf 8f6f 	isb	sy
 80125b2:	f3bf 8f4f 	dsb	sy
 80125b6:	617b      	str	r3, [r7, #20]
}
 80125b8:	bf00      	nop
 80125ba:	e7fe      	b.n	80125ba <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80125bc:	68bb      	ldr	r3, [r7, #8]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d01f      	beq.n	8012602 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80125c2:	2300      	movs	r3, #0
 80125c4:	61fb      	str	r3, [r7, #28]
 80125c6:	e012      	b.n	80125ee <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80125c8:	68ba      	ldr	r2, [r7, #8]
 80125ca:	69fb      	ldr	r3, [r7, #28]
 80125cc:	4413      	add	r3, r2
 80125ce:	7819      	ldrb	r1, [r3, #0]
 80125d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125d2:	69fb      	ldr	r3, [r7, #28]
 80125d4:	4413      	add	r3, r2
 80125d6:	3334      	adds	r3, #52	; 0x34
 80125d8:	460a      	mov	r2, r1
 80125da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80125dc:	68ba      	ldr	r2, [r7, #8]
 80125de:	69fb      	ldr	r3, [r7, #28]
 80125e0:	4413      	add	r3, r2
 80125e2:	781b      	ldrb	r3, [r3, #0]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d006      	beq.n	80125f6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80125e8:	69fb      	ldr	r3, [r7, #28]
 80125ea:	3301      	adds	r3, #1
 80125ec:	61fb      	str	r3, [r7, #28]
 80125ee:	69fb      	ldr	r3, [r7, #28]
 80125f0:	2b0f      	cmp	r3, #15
 80125f2:	d9e9      	bls.n	80125c8 <prvInitialiseNewTask+0x54>
 80125f4:	e000      	b.n	80125f8 <prvInitialiseNewTask+0x84>
			{
				break;
 80125f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80125f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125fa:	2200      	movs	r2, #0
 80125fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012600:	e003      	b.n	801260a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012604:	2200      	movs	r2, #0
 8012606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801260a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801260c:	2b06      	cmp	r3, #6
 801260e:	d901      	bls.n	8012614 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012610:	2306      	movs	r3, #6
 8012612:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012618:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801261a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801261c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801261e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012622:	2200      	movs	r2, #0
 8012624:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012628:	3304      	adds	r3, #4
 801262a:	4618      	mov	r0, r3
 801262c:	f7ff f928 	bl	8011880 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012632:	3318      	adds	r3, #24
 8012634:	4618      	mov	r0, r3
 8012636:	f7ff f923 	bl	8011880 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801263a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801263c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801263e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012642:	f1c3 0207 	rsb	r2, r3, #7
 8012646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012648:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801264a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801264c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801264e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012652:	2200      	movs	r2, #0
 8012654:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801265a:	2200      	movs	r2, #0
 801265c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8012660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012662:	334c      	adds	r3, #76	; 0x4c
 8012664:	2260      	movs	r2, #96	; 0x60
 8012666:	2100      	movs	r1, #0
 8012668:	4618      	mov	r0, r3
 801266a:	f001 fed5 	bl	8014418 <memset>
 801266e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012670:	4a0c      	ldr	r2, [pc, #48]	; (80126a4 <prvInitialiseNewTask+0x130>)
 8012672:	651a      	str	r2, [r3, #80]	; 0x50
 8012674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012676:	4a0c      	ldr	r2, [pc, #48]	; (80126a8 <prvInitialiseNewTask+0x134>)
 8012678:	655a      	str	r2, [r3, #84]	; 0x54
 801267a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801267c:	4a0b      	ldr	r2, [pc, #44]	; (80126ac <prvInitialiseNewTask+0x138>)
 801267e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012680:	683a      	ldr	r2, [r7, #0]
 8012682:	68f9      	ldr	r1, [r7, #12]
 8012684:	69b8      	ldr	r0, [r7, #24]
 8012686:	f000 fddd 	bl	8013244 <pxPortInitialiseStack>
 801268a:	4602      	mov	r2, r0
 801268c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801268e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012692:	2b00      	cmp	r3, #0
 8012694:	d002      	beq.n	801269c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801269a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801269c:	bf00      	nop
 801269e:	3720      	adds	r7, #32
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bd80      	pop	{r7, pc}
 80126a4:	080173e8 	.word	0x080173e8
 80126a8:	08017408 	.word	0x08017408
 80126ac:	080173c8 	.word	0x080173c8

080126b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b082      	sub	sp, #8
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80126b8:	f000 fef4 	bl	80134a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80126bc:	4b2a      	ldr	r3, [pc, #168]	; (8012768 <prvAddNewTaskToReadyList+0xb8>)
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	3301      	adds	r3, #1
 80126c2:	4a29      	ldr	r2, [pc, #164]	; (8012768 <prvAddNewTaskToReadyList+0xb8>)
 80126c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80126c6:	4b29      	ldr	r3, [pc, #164]	; (801276c <prvAddNewTaskToReadyList+0xbc>)
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d109      	bne.n	80126e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80126ce:	4a27      	ldr	r2, [pc, #156]	; (801276c <prvAddNewTaskToReadyList+0xbc>)
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80126d4:	4b24      	ldr	r3, [pc, #144]	; (8012768 <prvAddNewTaskToReadyList+0xb8>)
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	2b01      	cmp	r3, #1
 80126da:	d110      	bne.n	80126fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80126dc:	f000 fbe6 	bl	8012eac <prvInitialiseTaskLists>
 80126e0:	e00d      	b.n	80126fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80126e2:	4b23      	ldr	r3, [pc, #140]	; (8012770 <prvAddNewTaskToReadyList+0xc0>)
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d109      	bne.n	80126fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80126ea:	4b20      	ldr	r3, [pc, #128]	; (801276c <prvAddNewTaskToReadyList+0xbc>)
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126f4:	429a      	cmp	r2, r3
 80126f6:	d802      	bhi.n	80126fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80126f8:	4a1c      	ldr	r2, [pc, #112]	; (801276c <prvAddNewTaskToReadyList+0xbc>)
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80126fe:	4b1d      	ldr	r3, [pc, #116]	; (8012774 <prvAddNewTaskToReadyList+0xc4>)
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	3301      	adds	r3, #1
 8012704:	4a1b      	ldr	r2, [pc, #108]	; (8012774 <prvAddNewTaskToReadyList+0xc4>)
 8012706:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801270c:	2201      	movs	r2, #1
 801270e:	409a      	lsls	r2, r3
 8012710:	4b19      	ldr	r3, [pc, #100]	; (8012778 <prvAddNewTaskToReadyList+0xc8>)
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	4313      	orrs	r3, r2
 8012716:	4a18      	ldr	r2, [pc, #96]	; (8012778 <prvAddNewTaskToReadyList+0xc8>)
 8012718:	6013      	str	r3, [r2, #0]
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801271e:	4613      	mov	r3, r2
 8012720:	009b      	lsls	r3, r3, #2
 8012722:	4413      	add	r3, r2
 8012724:	009b      	lsls	r3, r3, #2
 8012726:	4a15      	ldr	r2, [pc, #84]	; (801277c <prvAddNewTaskToReadyList+0xcc>)
 8012728:	441a      	add	r2, r3
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	3304      	adds	r3, #4
 801272e:	4619      	mov	r1, r3
 8012730:	4610      	mov	r0, r2
 8012732:	f7ff f8b2 	bl	801189a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012736:	f000 fee5 	bl	8013504 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801273a:	4b0d      	ldr	r3, [pc, #52]	; (8012770 <prvAddNewTaskToReadyList+0xc0>)
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d00e      	beq.n	8012760 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012742:	4b0a      	ldr	r3, [pc, #40]	; (801276c <prvAddNewTaskToReadyList+0xbc>)
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801274c:	429a      	cmp	r2, r3
 801274e:	d207      	bcs.n	8012760 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012750:	4b0b      	ldr	r3, [pc, #44]	; (8012780 <prvAddNewTaskToReadyList+0xd0>)
 8012752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012756:	601a      	str	r2, [r3, #0]
 8012758:	f3bf 8f4f 	dsb	sy
 801275c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012760:	bf00      	nop
 8012762:	3708      	adds	r7, #8
 8012764:	46bd      	mov	sp, r7
 8012766:	bd80      	pop	{r7, pc}
 8012768:	20002390 	.word	0x20002390
 801276c:	20002290 	.word	0x20002290
 8012770:	2000239c 	.word	0x2000239c
 8012774:	200023ac 	.word	0x200023ac
 8012778:	20002398 	.word	0x20002398
 801277c:	20002294 	.word	0x20002294
 8012780:	e000ed04 	.word	0xe000ed04

08012784 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012784:	b580      	push	{r7, lr}
 8012786:	b084      	sub	sp, #16
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801278c:	2300      	movs	r3, #0
 801278e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d017      	beq.n	80127c6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012796:	4b13      	ldr	r3, [pc, #76]	; (80127e4 <vTaskDelay+0x60>)
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d00a      	beq.n	80127b4 <vTaskDelay+0x30>
	__asm volatile
 801279e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127a2:	f383 8811 	msr	BASEPRI, r3
 80127a6:	f3bf 8f6f 	isb	sy
 80127aa:	f3bf 8f4f 	dsb	sy
 80127ae:	60bb      	str	r3, [r7, #8]
}
 80127b0:	bf00      	nop
 80127b2:	e7fe      	b.n	80127b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80127b4:	f000 f884 	bl	80128c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80127b8:	2100      	movs	r1, #0
 80127ba:	6878      	ldr	r0, [r7, #4]
 80127bc:	f000 fcdc 	bl	8013178 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80127c0:	f000 f88c 	bl	80128dc <xTaskResumeAll>
 80127c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d107      	bne.n	80127dc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80127cc:	4b06      	ldr	r3, [pc, #24]	; (80127e8 <vTaskDelay+0x64>)
 80127ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127d2:	601a      	str	r2, [r3, #0]
 80127d4:	f3bf 8f4f 	dsb	sy
 80127d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80127dc:	bf00      	nop
 80127de:	3710      	adds	r7, #16
 80127e0:	46bd      	mov	sp, r7
 80127e2:	bd80      	pop	{r7, pc}
 80127e4:	200023b8 	.word	0x200023b8
 80127e8:	e000ed04 	.word	0xe000ed04

080127ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b08a      	sub	sp, #40	; 0x28
 80127f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80127f2:	2300      	movs	r3, #0
 80127f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80127f6:	2300      	movs	r3, #0
 80127f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80127fa:	463a      	mov	r2, r7
 80127fc:	1d39      	adds	r1, r7, #4
 80127fe:	f107 0308 	add.w	r3, r7, #8
 8012802:	4618      	mov	r0, r3
 8012804:	f7ee fbbc 	bl	8000f80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012808:	6839      	ldr	r1, [r7, #0]
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	68ba      	ldr	r2, [r7, #8]
 801280e:	9202      	str	r2, [sp, #8]
 8012810:	9301      	str	r3, [sp, #4]
 8012812:	2300      	movs	r3, #0
 8012814:	9300      	str	r3, [sp, #0]
 8012816:	2300      	movs	r3, #0
 8012818:	460a      	mov	r2, r1
 801281a:	4921      	ldr	r1, [pc, #132]	; (80128a0 <vTaskStartScheduler+0xb4>)
 801281c:	4821      	ldr	r0, [pc, #132]	; (80128a4 <vTaskStartScheduler+0xb8>)
 801281e:	f7ff fe07 	bl	8012430 <xTaskCreateStatic>
 8012822:	4603      	mov	r3, r0
 8012824:	4a20      	ldr	r2, [pc, #128]	; (80128a8 <vTaskStartScheduler+0xbc>)
 8012826:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012828:	4b1f      	ldr	r3, [pc, #124]	; (80128a8 <vTaskStartScheduler+0xbc>)
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d002      	beq.n	8012836 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012830:	2301      	movs	r3, #1
 8012832:	617b      	str	r3, [r7, #20]
 8012834:	e001      	b.n	801283a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012836:	2300      	movs	r3, #0
 8012838:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801283a:	697b      	ldr	r3, [r7, #20]
 801283c:	2b01      	cmp	r3, #1
 801283e:	d11b      	bne.n	8012878 <vTaskStartScheduler+0x8c>
	__asm volatile
 8012840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012844:	f383 8811 	msr	BASEPRI, r3
 8012848:	f3bf 8f6f 	isb	sy
 801284c:	f3bf 8f4f 	dsb	sy
 8012850:	613b      	str	r3, [r7, #16]
}
 8012852:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012854:	4b15      	ldr	r3, [pc, #84]	; (80128ac <vTaskStartScheduler+0xc0>)
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	334c      	adds	r3, #76	; 0x4c
 801285a:	4a15      	ldr	r2, [pc, #84]	; (80128b0 <vTaskStartScheduler+0xc4>)
 801285c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801285e:	4b15      	ldr	r3, [pc, #84]	; (80128b4 <vTaskStartScheduler+0xc8>)
 8012860:	f04f 32ff 	mov.w	r2, #4294967295
 8012864:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012866:	4b14      	ldr	r3, [pc, #80]	; (80128b8 <vTaskStartScheduler+0xcc>)
 8012868:	2201      	movs	r2, #1
 801286a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801286c:	4b13      	ldr	r3, [pc, #76]	; (80128bc <vTaskStartScheduler+0xd0>)
 801286e:	2200      	movs	r2, #0
 8012870:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012872:	f000 fd75 	bl	8013360 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012876:	e00e      	b.n	8012896 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012878:	697b      	ldr	r3, [r7, #20]
 801287a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801287e:	d10a      	bne.n	8012896 <vTaskStartScheduler+0xaa>
	__asm volatile
 8012880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012884:	f383 8811 	msr	BASEPRI, r3
 8012888:	f3bf 8f6f 	isb	sy
 801288c:	f3bf 8f4f 	dsb	sy
 8012890:	60fb      	str	r3, [r7, #12]
}
 8012892:	bf00      	nop
 8012894:	e7fe      	b.n	8012894 <vTaskStartScheduler+0xa8>
}
 8012896:	bf00      	nop
 8012898:	3718      	adds	r7, #24
 801289a:	46bd      	mov	sp, r7
 801289c:	bd80      	pop	{r7, pc}
 801289e:	bf00      	nop
 80128a0:	08016f54 	.word	0x08016f54
 80128a4:	08012e7d 	.word	0x08012e7d
 80128a8:	200023b4 	.word	0x200023b4
 80128ac:	20002290 	.word	0x20002290
 80128b0:	200002b4 	.word	0x200002b4
 80128b4:	200023b0 	.word	0x200023b0
 80128b8:	2000239c 	.word	0x2000239c
 80128bc:	20002394 	.word	0x20002394

080128c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80128c0:	b480      	push	{r7}
 80128c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80128c4:	4b04      	ldr	r3, [pc, #16]	; (80128d8 <vTaskSuspendAll+0x18>)
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	3301      	adds	r3, #1
 80128ca:	4a03      	ldr	r2, [pc, #12]	; (80128d8 <vTaskSuspendAll+0x18>)
 80128cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80128ce:	bf00      	nop
 80128d0:	46bd      	mov	sp, r7
 80128d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d6:	4770      	bx	lr
 80128d8:	200023b8 	.word	0x200023b8

080128dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	b084      	sub	sp, #16
 80128e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80128e2:	2300      	movs	r3, #0
 80128e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80128e6:	2300      	movs	r3, #0
 80128e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80128ea:	4b41      	ldr	r3, [pc, #260]	; (80129f0 <xTaskResumeAll+0x114>)
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d10a      	bne.n	8012908 <xTaskResumeAll+0x2c>
	__asm volatile
 80128f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128f6:	f383 8811 	msr	BASEPRI, r3
 80128fa:	f3bf 8f6f 	isb	sy
 80128fe:	f3bf 8f4f 	dsb	sy
 8012902:	603b      	str	r3, [r7, #0]
}
 8012904:	bf00      	nop
 8012906:	e7fe      	b.n	8012906 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012908:	f000 fdcc 	bl	80134a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801290c:	4b38      	ldr	r3, [pc, #224]	; (80129f0 <xTaskResumeAll+0x114>)
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	3b01      	subs	r3, #1
 8012912:	4a37      	ldr	r2, [pc, #220]	; (80129f0 <xTaskResumeAll+0x114>)
 8012914:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012916:	4b36      	ldr	r3, [pc, #216]	; (80129f0 <xTaskResumeAll+0x114>)
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	2b00      	cmp	r3, #0
 801291c:	d161      	bne.n	80129e2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801291e:	4b35      	ldr	r3, [pc, #212]	; (80129f4 <xTaskResumeAll+0x118>)
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d05d      	beq.n	80129e2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012926:	e02e      	b.n	8012986 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012928:	4b33      	ldr	r3, [pc, #204]	; (80129f8 <xTaskResumeAll+0x11c>)
 801292a:	68db      	ldr	r3, [r3, #12]
 801292c:	68db      	ldr	r3, [r3, #12]
 801292e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	3318      	adds	r3, #24
 8012934:	4618      	mov	r0, r3
 8012936:	f7ff f80d 	bl	8011954 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	3304      	adds	r3, #4
 801293e:	4618      	mov	r0, r3
 8012940:	f7ff f808 	bl	8011954 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012948:	2201      	movs	r2, #1
 801294a:	409a      	lsls	r2, r3
 801294c:	4b2b      	ldr	r3, [pc, #172]	; (80129fc <xTaskResumeAll+0x120>)
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	4313      	orrs	r3, r2
 8012952:	4a2a      	ldr	r2, [pc, #168]	; (80129fc <xTaskResumeAll+0x120>)
 8012954:	6013      	str	r3, [r2, #0]
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801295a:	4613      	mov	r3, r2
 801295c:	009b      	lsls	r3, r3, #2
 801295e:	4413      	add	r3, r2
 8012960:	009b      	lsls	r3, r3, #2
 8012962:	4a27      	ldr	r2, [pc, #156]	; (8012a00 <xTaskResumeAll+0x124>)
 8012964:	441a      	add	r2, r3
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	3304      	adds	r3, #4
 801296a:	4619      	mov	r1, r3
 801296c:	4610      	mov	r0, r2
 801296e:	f7fe ff94 	bl	801189a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012976:	4b23      	ldr	r3, [pc, #140]	; (8012a04 <xTaskResumeAll+0x128>)
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801297c:	429a      	cmp	r2, r3
 801297e:	d302      	bcc.n	8012986 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8012980:	4b21      	ldr	r3, [pc, #132]	; (8012a08 <xTaskResumeAll+0x12c>)
 8012982:	2201      	movs	r2, #1
 8012984:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012986:	4b1c      	ldr	r3, [pc, #112]	; (80129f8 <xTaskResumeAll+0x11c>)
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	2b00      	cmp	r3, #0
 801298c:	d1cc      	bne.n	8012928 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d001      	beq.n	8012998 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012994:	f000 fb2c 	bl	8012ff0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012998:	4b1c      	ldr	r3, [pc, #112]	; (8012a0c <xTaskResumeAll+0x130>)
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d010      	beq.n	80129c6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80129a4:	f000 f846 	bl	8012a34 <xTaskIncrementTick>
 80129a8:	4603      	mov	r3, r0
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d002      	beq.n	80129b4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80129ae:	4b16      	ldr	r3, [pc, #88]	; (8012a08 <xTaskResumeAll+0x12c>)
 80129b0:	2201      	movs	r2, #1
 80129b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	3b01      	subs	r3, #1
 80129b8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d1f1      	bne.n	80129a4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80129c0:	4b12      	ldr	r3, [pc, #72]	; (8012a0c <xTaskResumeAll+0x130>)
 80129c2:	2200      	movs	r2, #0
 80129c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80129c6:	4b10      	ldr	r3, [pc, #64]	; (8012a08 <xTaskResumeAll+0x12c>)
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d009      	beq.n	80129e2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80129ce:	2301      	movs	r3, #1
 80129d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80129d2:	4b0f      	ldr	r3, [pc, #60]	; (8012a10 <xTaskResumeAll+0x134>)
 80129d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129d8:	601a      	str	r2, [r3, #0]
 80129da:	f3bf 8f4f 	dsb	sy
 80129de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80129e2:	f000 fd8f 	bl	8013504 <vPortExitCritical>

	return xAlreadyYielded;
 80129e6:	68bb      	ldr	r3, [r7, #8]
}
 80129e8:	4618      	mov	r0, r3
 80129ea:	3710      	adds	r7, #16
 80129ec:	46bd      	mov	sp, r7
 80129ee:	bd80      	pop	{r7, pc}
 80129f0:	200023b8 	.word	0x200023b8
 80129f4:	20002390 	.word	0x20002390
 80129f8:	20002350 	.word	0x20002350
 80129fc:	20002398 	.word	0x20002398
 8012a00:	20002294 	.word	0x20002294
 8012a04:	20002290 	.word	0x20002290
 8012a08:	200023a4 	.word	0x200023a4
 8012a0c:	200023a0 	.word	0x200023a0
 8012a10:	e000ed04 	.word	0xe000ed04

08012a14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012a14:	b480      	push	{r7}
 8012a16:	b083      	sub	sp, #12
 8012a18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012a1a:	4b05      	ldr	r3, [pc, #20]	; (8012a30 <xTaskGetTickCount+0x1c>)
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012a20:	687b      	ldr	r3, [r7, #4]
}
 8012a22:	4618      	mov	r0, r3
 8012a24:	370c      	adds	r7, #12
 8012a26:	46bd      	mov	sp, r7
 8012a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a2c:	4770      	bx	lr
 8012a2e:	bf00      	nop
 8012a30:	20002394 	.word	0x20002394

08012a34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012a34:	b580      	push	{r7, lr}
 8012a36:	b086      	sub	sp, #24
 8012a38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012a3e:	4b4e      	ldr	r3, [pc, #312]	; (8012b78 <xTaskIncrementTick+0x144>)
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	f040 808e 	bne.w	8012b64 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012a48:	4b4c      	ldr	r3, [pc, #304]	; (8012b7c <xTaskIncrementTick+0x148>)
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	3301      	adds	r3, #1
 8012a4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012a50:	4a4a      	ldr	r2, [pc, #296]	; (8012b7c <xTaskIncrementTick+0x148>)
 8012a52:	693b      	ldr	r3, [r7, #16]
 8012a54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012a56:	693b      	ldr	r3, [r7, #16]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d120      	bne.n	8012a9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8012a5c:	4b48      	ldr	r3, [pc, #288]	; (8012b80 <xTaskIncrementTick+0x14c>)
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d00a      	beq.n	8012a7c <xTaskIncrementTick+0x48>
	__asm volatile
 8012a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a6a:	f383 8811 	msr	BASEPRI, r3
 8012a6e:	f3bf 8f6f 	isb	sy
 8012a72:	f3bf 8f4f 	dsb	sy
 8012a76:	603b      	str	r3, [r7, #0]
}
 8012a78:	bf00      	nop
 8012a7a:	e7fe      	b.n	8012a7a <xTaskIncrementTick+0x46>
 8012a7c:	4b40      	ldr	r3, [pc, #256]	; (8012b80 <xTaskIncrementTick+0x14c>)
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	60fb      	str	r3, [r7, #12]
 8012a82:	4b40      	ldr	r3, [pc, #256]	; (8012b84 <xTaskIncrementTick+0x150>)
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	4a3e      	ldr	r2, [pc, #248]	; (8012b80 <xTaskIncrementTick+0x14c>)
 8012a88:	6013      	str	r3, [r2, #0]
 8012a8a:	4a3e      	ldr	r2, [pc, #248]	; (8012b84 <xTaskIncrementTick+0x150>)
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	6013      	str	r3, [r2, #0]
 8012a90:	4b3d      	ldr	r3, [pc, #244]	; (8012b88 <xTaskIncrementTick+0x154>)
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	3301      	adds	r3, #1
 8012a96:	4a3c      	ldr	r2, [pc, #240]	; (8012b88 <xTaskIncrementTick+0x154>)
 8012a98:	6013      	str	r3, [r2, #0]
 8012a9a:	f000 faa9 	bl	8012ff0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012a9e:	4b3b      	ldr	r3, [pc, #236]	; (8012b8c <xTaskIncrementTick+0x158>)
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	693a      	ldr	r2, [r7, #16]
 8012aa4:	429a      	cmp	r2, r3
 8012aa6:	d348      	bcc.n	8012b3a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012aa8:	4b35      	ldr	r3, [pc, #212]	; (8012b80 <xTaskIncrementTick+0x14c>)
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d104      	bne.n	8012abc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012ab2:	4b36      	ldr	r3, [pc, #216]	; (8012b8c <xTaskIncrementTick+0x158>)
 8012ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8012ab8:	601a      	str	r2, [r3, #0]
					break;
 8012aba:	e03e      	b.n	8012b3a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012abc:	4b30      	ldr	r3, [pc, #192]	; (8012b80 <xTaskIncrementTick+0x14c>)
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	68db      	ldr	r3, [r3, #12]
 8012ac2:	68db      	ldr	r3, [r3, #12]
 8012ac4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012ac6:	68bb      	ldr	r3, [r7, #8]
 8012ac8:	685b      	ldr	r3, [r3, #4]
 8012aca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012acc:	693a      	ldr	r2, [r7, #16]
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	429a      	cmp	r2, r3
 8012ad2:	d203      	bcs.n	8012adc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012ad4:	4a2d      	ldr	r2, [pc, #180]	; (8012b8c <xTaskIncrementTick+0x158>)
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012ada:	e02e      	b.n	8012b3a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012adc:	68bb      	ldr	r3, [r7, #8]
 8012ade:	3304      	adds	r3, #4
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	f7fe ff37 	bl	8011954 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012ae6:	68bb      	ldr	r3, [r7, #8]
 8012ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d004      	beq.n	8012af8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012aee:	68bb      	ldr	r3, [r7, #8]
 8012af0:	3318      	adds	r3, #24
 8012af2:	4618      	mov	r0, r3
 8012af4:	f7fe ff2e 	bl	8011954 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012af8:	68bb      	ldr	r3, [r7, #8]
 8012afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012afc:	2201      	movs	r2, #1
 8012afe:	409a      	lsls	r2, r3
 8012b00:	4b23      	ldr	r3, [pc, #140]	; (8012b90 <xTaskIncrementTick+0x15c>)
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	4313      	orrs	r3, r2
 8012b06:	4a22      	ldr	r2, [pc, #136]	; (8012b90 <xTaskIncrementTick+0x15c>)
 8012b08:	6013      	str	r3, [r2, #0]
 8012b0a:	68bb      	ldr	r3, [r7, #8]
 8012b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b0e:	4613      	mov	r3, r2
 8012b10:	009b      	lsls	r3, r3, #2
 8012b12:	4413      	add	r3, r2
 8012b14:	009b      	lsls	r3, r3, #2
 8012b16:	4a1f      	ldr	r2, [pc, #124]	; (8012b94 <xTaskIncrementTick+0x160>)
 8012b18:	441a      	add	r2, r3
 8012b1a:	68bb      	ldr	r3, [r7, #8]
 8012b1c:	3304      	adds	r3, #4
 8012b1e:	4619      	mov	r1, r3
 8012b20:	4610      	mov	r0, r2
 8012b22:	f7fe feba 	bl	801189a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012b26:	68bb      	ldr	r3, [r7, #8]
 8012b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b2a:	4b1b      	ldr	r3, [pc, #108]	; (8012b98 <xTaskIncrementTick+0x164>)
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b30:	429a      	cmp	r2, r3
 8012b32:	d3b9      	bcc.n	8012aa8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8012b34:	2301      	movs	r3, #1
 8012b36:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012b38:	e7b6      	b.n	8012aa8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012b3a:	4b17      	ldr	r3, [pc, #92]	; (8012b98 <xTaskIncrementTick+0x164>)
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b40:	4914      	ldr	r1, [pc, #80]	; (8012b94 <xTaskIncrementTick+0x160>)
 8012b42:	4613      	mov	r3, r2
 8012b44:	009b      	lsls	r3, r3, #2
 8012b46:	4413      	add	r3, r2
 8012b48:	009b      	lsls	r3, r3, #2
 8012b4a:	440b      	add	r3, r1
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	2b01      	cmp	r3, #1
 8012b50:	d901      	bls.n	8012b56 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8012b52:	2301      	movs	r3, #1
 8012b54:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8012b56:	4b11      	ldr	r3, [pc, #68]	; (8012b9c <xTaskIncrementTick+0x168>)
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d007      	beq.n	8012b6e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8012b5e:	2301      	movs	r3, #1
 8012b60:	617b      	str	r3, [r7, #20]
 8012b62:	e004      	b.n	8012b6e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012b64:	4b0e      	ldr	r3, [pc, #56]	; (8012ba0 <xTaskIncrementTick+0x16c>)
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	3301      	adds	r3, #1
 8012b6a:	4a0d      	ldr	r2, [pc, #52]	; (8012ba0 <xTaskIncrementTick+0x16c>)
 8012b6c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012b6e:	697b      	ldr	r3, [r7, #20]
}
 8012b70:	4618      	mov	r0, r3
 8012b72:	3718      	adds	r7, #24
 8012b74:	46bd      	mov	sp, r7
 8012b76:	bd80      	pop	{r7, pc}
 8012b78:	200023b8 	.word	0x200023b8
 8012b7c:	20002394 	.word	0x20002394
 8012b80:	20002348 	.word	0x20002348
 8012b84:	2000234c 	.word	0x2000234c
 8012b88:	200023a8 	.word	0x200023a8
 8012b8c:	200023b0 	.word	0x200023b0
 8012b90:	20002398 	.word	0x20002398
 8012b94:	20002294 	.word	0x20002294
 8012b98:	20002290 	.word	0x20002290
 8012b9c:	200023a4 	.word	0x200023a4
 8012ba0:	200023a0 	.word	0x200023a0

08012ba4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012ba4:	b480      	push	{r7}
 8012ba6:	b087      	sub	sp, #28
 8012ba8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012baa:	4b29      	ldr	r3, [pc, #164]	; (8012c50 <vTaskSwitchContext+0xac>)
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d003      	beq.n	8012bba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012bb2:	4b28      	ldr	r3, [pc, #160]	; (8012c54 <vTaskSwitchContext+0xb0>)
 8012bb4:	2201      	movs	r2, #1
 8012bb6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012bb8:	e044      	b.n	8012c44 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8012bba:	4b26      	ldr	r3, [pc, #152]	; (8012c54 <vTaskSwitchContext+0xb0>)
 8012bbc:	2200      	movs	r2, #0
 8012bbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012bc0:	4b25      	ldr	r3, [pc, #148]	; (8012c58 <vTaskSwitchContext+0xb4>)
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	fab3 f383 	clz	r3, r3
 8012bcc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012bce:	7afb      	ldrb	r3, [r7, #11]
 8012bd0:	f1c3 031f 	rsb	r3, r3, #31
 8012bd4:	617b      	str	r3, [r7, #20]
 8012bd6:	4921      	ldr	r1, [pc, #132]	; (8012c5c <vTaskSwitchContext+0xb8>)
 8012bd8:	697a      	ldr	r2, [r7, #20]
 8012bda:	4613      	mov	r3, r2
 8012bdc:	009b      	lsls	r3, r3, #2
 8012bde:	4413      	add	r3, r2
 8012be0:	009b      	lsls	r3, r3, #2
 8012be2:	440b      	add	r3, r1
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d10a      	bne.n	8012c00 <vTaskSwitchContext+0x5c>
	__asm volatile
 8012bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bee:	f383 8811 	msr	BASEPRI, r3
 8012bf2:	f3bf 8f6f 	isb	sy
 8012bf6:	f3bf 8f4f 	dsb	sy
 8012bfa:	607b      	str	r3, [r7, #4]
}
 8012bfc:	bf00      	nop
 8012bfe:	e7fe      	b.n	8012bfe <vTaskSwitchContext+0x5a>
 8012c00:	697a      	ldr	r2, [r7, #20]
 8012c02:	4613      	mov	r3, r2
 8012c04:	009b      	lsls	r3, r3, #2
 8012c06:	4413      	add	r3, r2
 8012c08:	009b      	lsls	r3, r3, #2
 8012c0a:	4a14      	ldr	r2, [pc, #80]	; (8012c5c <vTaskSwitchContext+0xb8>)
 8012c0c:	4413      	add	r3, r2
 8012c0e:	613b      	str	r3, [r7, #16]
 8012c10:	693b      	ldr	r3, [r7, #16]
 8012c12:	685b      	ldr	r3, [r3, #4]
 8012c14:	685a      	ldr	r2, [r3, #4]
 8012c16:	693b      	ldr	r3, [r7, #16]
 8012c18:	605a      	str	r2, [r3, #4]
 8012c1a:	693b      	ldr	r3, [r7, #16]
 8012c1c:	685a      	ldr	r2, [r3, #4]
 8012c1e:	693b      	ldr	r3, [r7, #16]
 8012c20:	3308      	adds	r3, #8
 8012c22:	429a      	cmp	r2, r3
 8012c24:	d104      	bne.n	8012c30 <vTaskSwitchContext+0x8c>
 8012c26:	693b      	ldr	r3, [r7, #16]
 8012c28:	685b      	ldr	r3, [r3, #4]
 8012c2a:	685a      	ldr	r2, [r3, #4]
 8012c2c:	693b      	ldr	r3, [r7, #16]
 8012c2e:	605a      	str	r2, [r3, #4]
 8012c30:	693b      	ldr	r3, [r7, #16]
 8012c32:	685b      	ldr	r3, [r3, #4]
 8012c34:	68db      	ldr	r3, [r3, #12]
 8012c36:	4a0a      	ldr	r2, [pc, #40]	; (8012c60 <vTaskSwitchContext+0xbc>)
 8012c38:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012c3a:	4b09      	ldr	r3, [pc, #36]	; (8012c60 <vTaskSwitchContext+0xbc>)
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	334c      	adds	r3, #76	; 0x4c
 8012c40:	4a08      	ldr	r2, [pc, #32]	; (8012c64 <vTaskSwitchContext+0xc0>)
 8012c42:	6013      	str	r3, [r2, #0]
}
 8012c44:	bf00      	nop
 8012c46:	371c      	adds	r7, #28
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c4e:	4770      	bx	lr
 8012c50:	200023b8 	.word	0x200023b8
 8012c54:	200023a4 	.word	0x200023a4
 8012c58:	20002398 	.word	0x20002398
 8012c5c:	20002294 	.word	0x20002294
 8012c60:	20002290 	.word	0x20002290
 8012c64:	200002b4 	.word	0x200002b4

08012c68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b084      	sub	sp, #16
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
 8012c70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d10a      	bne.n	8012c8e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8012c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c7c:	f383 8811 	msr	BASEPRI, r3
 8012c80:	f3bf 8f6f 	isb	sy
 8012c84:	f3bf 8f4f 	dsb	sy
 8012c88:	60fb      	str	r3, [r7, #12]
}
 8012c8a:	bf00      	nop
 8012c8c:	e7fe      	b.n	8012c8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012c8e:	4b07      	ldr	r3, [pc, #28]	; (8012cac <vTaskPlaceOnEventList+0x44>)
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	3318      	adds	r3, #24
 8012c94:	4619      	mov	r1, r3
 8012c96:	6878      	ldr	r0, [r7, #4]
 8012c98:	f7fe fe23 	bl	80118e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012c9c:	2101      	movs	r1, #1
 8012c9e:	6838      	ldr	r0, [r7, #0]
 8012ca0:	f000 fa6a 	bl	8013178 <prvAddCurrentTaskToDelayedList>
}
 8012ca4:	bf00      	nop
 8012ca6:	3710      	adds	r7, #16
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	bd80      	pop	{r7, pc}
 8012cac:	20002290 	.word	0x20002290

08012cb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b086      	sub	sp, #24
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	68db      	ldr	r3, [r3, #12]
 8012cbc:	68db      	ldr	r3, [r3, #12]
 8012cbe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012cc0:	693b      	ldr	r3, [r7, #16]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d10a      	bne.n	8012cdc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8012cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cca:	f383 8811 	msr	BASEPRI, r3
 8012cce:	f3bf 8f6f 	isb	sy
 8012cd2:	f3bf 8f4f 	dsb	sy
 8012cd6:	60fb      	str	r3, [r7, #12]
}
 8012cd8:	bf00      	nop
 8012cda:	e7fe      	b.n	8012cda <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012cdc:	693b      	ldr	r3, [r7, #16]
 8012cde:	3318      	adds	r3, #24
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f7fe fe37 	bl	8011954 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012ce6:	4b1d      	ldr	r3, [pc, #116]	; (8012d5c <xTaskRemoveFromEventList+0xac>)
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d11c      	bne.n	8012d28 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012cee:	693b      	ldr	r3, [r7, #16]
 8012cf0:	3304      	adds	r3, #4
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	f7fe fe2e 	bl	8011954 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012cf8:	693b      	ldr	r3, [r7, #16]
 8012cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cfc:	2201      	movs	r2, #1
 8012cfe:	409a      	lsls	r2, r3
 8012d00:	4b17      	ldr	r3, [pc, #92]	; (8012d60 <xTaskRemoveFromEventList+0xb0>)
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	4313      	orrs	r3, r2
 8012d06:	4a16      	ldr	r2, [pc, #88]	; (8012d60 <xTaskRemoveFromEventList+0xb0>)
 8012d08:	6013      	str	r3, [r2, #0]
 8012d0a:	693b      	ldr	r3, [r7, #16]
 8012d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d0e:	4613      	mov	r3, r2
 8012d10:	009b      	lsls	r3, r3, #2
 8012d12:	4413      	add	r3, r2
 8012d14:	009b      	lsls	r3, r3, #2
 8012d16:	4a13      	ldr	r2, [pc, #76]	; (8012d64 <xTaskRemoveFromEventList+0xb4>)
 8012d18:	441a      	add	r2, r3
 8012d1a:	693b      	ldr	r3, [r7, #16]
 8012d1c:	3304      	adds	r3, #4
 8012d1e:	4619      	mov	r1, r3
 8012d20:	4610      	mov	r0, r2
 8012d22:	f7fe fdba 	bl	801189a <vListInsertEnd>
 8012d26:	e005      	b.n	8012d34 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012d28:	693b      	ldr	r3, [r7, #16]
 8012d2a:	3318      	adds	r3, #24
 8012d2c:	4619      	mov	r1, r3
 8012d2e:	480e      	ldr	r0, [pc, #56]	; (8012d68 <xTaskRemoveFromEventList+0xb8>)
 8012d30:	f7fe fdb3 	bl	801189a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012d34:	693b      	ldr	r3, [r7, #16]
 8012d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d38:	4b0c      	ldr	r3, [pc, #48]	; (8012d6c <xTaskRemoveFromEventList+0xbc>)
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d3e:	429a      	cmp	r2, r3
 8012d40:	d905      	bls.n	8012d4e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012d42:	2301      	movs	r3, #1
 8012d44:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012d46:	4b0a      	ldr	r3, [pc, #40]	; (8012d70 <xTaskRemoveFromEventList+0xc0>)
 8012d48:	2201      	movs	r2, #1
 8012d4a:	601a      	str	r2, [r3, #0]
 8012d4c:	e001      	b.n	8012d52 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8012d4e:	2300      	movs	r3, #0
 8012d50:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012d52:	697b      	ldr	r3, [r7, #20]
}
 8012d54:	4618      	mov	r0, r3
 8012d56:	3718      	adds	r7, #24
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	bd80      	pop	{r7, pc}
 8012d5c:	200023b8 	.word	0x200023b8
 8012d60:	20002398 	.word	0x20002398
 8012d64:	20002294 	.word	0x20002294
 8012d68:	20002350 	.word	0x20002350
 8012d6c:	20002290 	.word	0x20002290
 8012d70:	200023a4 	.word	0x200023a4

08012d74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012d74:	b480      	push	{r7}
 8012d76:	b083      	sub	sp, #12
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012d7c:	4b06      	ldr	r3, [pc, #24]	; (8012d98 <vTaskInternalSetTimeOutState+0x24>)
 8012d7e:	681a      	ldr	r2, [r3, #0]
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012d84:	4b05      	ldr	r3, [pc, #20]	; (8012d9c <vTaskInternalSetTimeOutState+0x28>)
 8012d86:	681a      	ldr	r2, [r3, #0]
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	605a      	str	r2, [r3, #4]
}
 8012d8c:	bf00      	nop
 8012d8e:	370c      	adds	r7, #12
 8012d90:	46bd      	mov	sp, r7
 8012d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d96:	4770      	bx	lr
 8012d98:	200023a8 	.word	0x200023a8
 8012d9c:	20002394 	.word	0x20002394

08012da0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b088      	sub	sp, #32
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
 8012da8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d10a      	bne.n	8012dc6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8012db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012db4:	f383 8811 	msr	BASEPRI, r3
 8012db8:	f3bf 8f6f 	isb	sy
 8012dbc:	f3bf 8f4f 	dsb	sy
 8012dc0:	613b      	str	r3, [r7, #16]
}
 8012dc2:	bf00      	nop
 8012dc4:	e7fe      	b.n	8012dc4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012dc6:	683b      	ldr	r3, [r7, #0]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d10a      	bne.n	8012de2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8012dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dd0:	f383 8811 	msr	BASEPRI, r3
 8012dd4:	f3bf 8f6f 	isb	sy
 8012dd8:	f3bf 8f4f 	dsb	sy
 8012ddc:	60fb      	str	r3, [r7, #12]
}
 8012dde:	bf00      	nop
 8012de0:	e7fe      	b.n	8012de0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8012de2:	f000 fb5f 	bl	80134a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012de6:	4b1d      	ldr	r3, [pc, #116]	; (8012e5c <xTaskCheckForTimeOut+0xbc>)
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	685b      	ldr	r3, [r3, #4]
 8012df0:	69ba      	ldr	r2, [r7, #24]
 8012df2:	1ad3      	subs	r3, r2, r3
 8012df4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012df6:	683b      	ldr	r3, [r7, #0]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dfe:	d102      	bne.n	8012e06 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012e00:	2300      	movs	r3, #0
 8012e02:	61fb      	str	r3, [r7, #28]
 8012e04:	e023      	b.n	8012e4e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	681a      	ldr	r2, [r3, #0]
 8012e0a:	4b15      	ldr	r3, [pc, #84]	; (8012e60 <xTaskCheckForTimeOut+0xc0>)
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	429a      	cmp	r2, r3
 8012e10:	d007      	beq.n	8012e22 <xTaskCheckForTimeOut+0x82>
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	685b      	ldr	r3, [r3, #4]
 8012e16:	69ba      	ldr	r2, [r7, #24]
 8012e18:	429a      	cmp	r2, r3
 8012e1a:	d302      	bcc.n	8012e22 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012e1c:	2301      	movs	r3, #1
 8012e1e:	61fb      	str	r3, [r7, #28]
 8012e20:	e015      	b.n	8012e4e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012e22:	683b      	ldr	r3, [r7, #0]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	697a      	ldr	r2, [r7, #20]
 8012e28:	429a      	cmp	r2, r3
 8012e2a:	d20b      	bcs.n	8012e44 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012e2c:	683b      	ldr	r3, [r7, #0]
 8012e2e:	681a      	ldr	r2, [r3, #0]
 8012e30:	697b      	ldr	r3, [r7, #20]
 8012e32:	1ad2      	subs	r2, r2, r3
 8012e34:	683b      	ldr	r3, [r7, #0]
 8012e36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012e38:	6878      	ldr	r0, [r7, #4]
 8012e3a:	f7ff ff9b 	bl	8012d74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012e3e:	2300      	movs	r3, #0
 8012e40:	61fb      	str	r3, [r7, #28]
 8012e42:	e004      	b.n	8012e4e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8012e44:	683b      	ldr	r3, [r7, #0]
 8012e46:	2200      	movs	r2, #0
 8012e48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012e4a:	2301      	movs	r3, #1
 8012e4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012e4e:	f000 fb59 	bl	8013504 <vPortExitCritical>

	return xReturn;
 8012e52:	69fb      	ldr	r3, [r7, #28]
}
 8012e54:	4618      	mov	r0, r3
 8012e56:	3720      	adds	r7, #32
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	bd80      	pop	{r7, pc}
 8012e5c:	20002394 	.word	0x20002394
 8012e60:	200023a8 	.word	0x200023a8

08012e64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012e64:	b480      	push	{r7}
 8012e66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012e68:	4b03      	ldr	r3, [pc, #12]	; (8012e78 <vTaskMissedYield+0x14>)
 8012e6a:	2201      	movs	r2, #1
 8012e6c:	601a      	str	r2, [r3, #0]
}
 8012e6e:	bf00      	nop
 8012e70:	46bd      	mov	sp, r7
 8012e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e76:	4770      	bx	lr
 8012e78:	200023a4 	.word	0x200023a4

08012e7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b082      	sub	sp, #8
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012e84:	f000 f852 	bl	8012f2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012e88:	4b06      	ldr	r3, [pc, #24]	; (8012ea4 <prvIdleTask+0x28>)
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	2b01      	cmp	r3, #1
 8012e8e:	d9f9      	bls.n	8012e84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012e90:	4b05      	ldr	r3, [pc, #20]	; (8012ea8 <prvIdleTask+0x2c>)
 8012e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e96:	601a      	str	r2, [r3, #0]
 8012e98:	f3bf 8f4f 	dsb	sy
 8012e9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012ea0:	e7f0      	b.n	8012e84 <prvIdleTask+0x8>
 8012ea2:	bf00      	nop
 8012ea4:	20002294 	.word	0x20002294
 8012ea8:	e000ed04 	.word	0xe000ed04

08012eac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b082      	sub	sp, #8
 8012eb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	607b      	str	r3, [r7, #4]
 8012eb6:	e00c      	b.n	8012ed2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012eb8:	687a      	ldr	r2, [r7, #4]
 8012eba:	4613      	mov	r3, r2
 8012ebc:	009b      	lsls	r3, r3, #2
 8012ebe:	4413      	add	r3, r2
 8012ec0:	009b      	lsls	r3, r3, #2
 8012ec2:	4a12      	ldr	r2, [pc, #72]	; (8012f0c <prvInitialiseTaskLists+0x60>)
 8012ec4:	4413      	add	r3, r2
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	f7fe fcba 	bl	8011840 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	3301      	adds	r3, #1
 8012ed0:	607b      	str	r3, [r7, #4]
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	2b06      	cmp	r3, #6
 8012ed6:	d9ef      	bls.n	8012eb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012ed8:	480d      	ldr	r0, [pc, #52]	; (8012f10 <prvInitialiseTaskLists+0x64>)
 8012eda:	f7fe fcb1 	bl	8011840 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012ede:	480d      	ldr	r0, [pc, #52]	; (8012f14 <prvInitialiseTaskLists+0x68>)
 8012ee0:	f7fe fcae 	bl	8011840 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012ee4:	480c      	ldr	r0, [pc, #48]	; (8012f18 <prvInitialiseTaskLists+0x6c>)
 8012ee6:	f7fe fcab 	bl	8011840 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012eea:	480c      	ldr	r0, [pc, #48]	; (8012f1c <prvInitialiseTaskLists+0x70>)
 8012eec:	f7fe fca8 	bl	8011840 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012ef0:	480b      	ldr	r0, [pc, #44]	; (8012f20 <prvInitialiseTaskLists+0x74>)
 8012ef2:	f7fe fca5 	bl	8011840 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012ef6:	4b0b      	ldr	r3, [pc, #44]	; (8012f24 <prvInitialiseTaskLists+0x78>)
 8012ef8:	4a05      	ldr	r2, [pc, #20]	; (8012f10 <prvInitialiseTaskLists+0x64>)
 8012efa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012efc:	4b0a      	ldr	r3, [pc, #40]	; (8012f28 <prvInitialiseTaskLists+0x7c>)
 8012efe:	4a05      	ldr	r2, [pc, #20]	; (8012f14 <prvInitialiseTaskLists+0x68>)
 8012f00:	601a      	str	r2, [r3, #0]
}
 8012f02:	bf00      	nop
 8012f04:	3708      	adds	r7, #8
 8012f06:	46bd      	mov	sp, r7
 8012f08:	bd80      	pop	{r7, pc}
 8012f0a:	bf00      	nop
 8012f0c:	20002294 	.word	0x20002294
 8012f10:	20002320 	.word	0x20002320
 8012f14:	20002334 	.word	0x20002334
 8012f18:	20002350 	.word	0x20002350
 8012f1c:	20002364 	.word	0x20002364
 8012f20:	2000237c 	.word	0x2000237c
 8012f24:	20002348 	.word	0x20002348
 8012f28:	2000234c 	.word	0x2000234c

08012f2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b082      	sub	sp, #8
 8012f30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012f32:	e019      	b.n	8012f68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012f34:	f000 fab6 	bl	80134a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012f38:	4b10      	ldr	r3, [pc, #64]	; (8012f7c <prvCheckTasksWaitingTermination+0x50>)
 8012f3a:	68db      	ldr	r3, [r3, #12]
 8012f3c:	68db      	ldr	r3, [r3, #12]
 8012f3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	3304      	adds	r3, #4
 8012f44:	4618      	mov	r0, r3
 8012f46:	f7fe fd05 	bl	8011954 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012f4a:	4b0d      	ldr	r3, [pc, #52]	; (8012f80 <prvCheckTasksWaitingTermination+0x54>)
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	3b01      	subs	r3, #1
 8012f50:	4a0b      	ldr	r2, [pc, #44]	; (8012f80 <prvCheckTasksWaitingTermination+0x54>)
 8012f52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012f54:	4b0b      	ldr	r3, [pc, #44]	; (8012f84 <prvCheckTasksWaitingTermination+0x58>)
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	3b01      	subs	r3, #1
 8012f5a:	4a0a      	ldr	r2, [pc, #40]	; (8012f84 <prvCheckTasksWaitingTermination+0x58>)
 8012f5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012f5e:	f000 fad1 	bl	8013504 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012f62:	6878      	ldr	r0, [r7, #4]
 8012f64:	f000 f810 	bl	8012f88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012f68:	4b06      	ldr	r3, [pc, #24]	; (8012f84 <prvCheckTasksWaitingTermination+0x58>)
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d1e1      	bne.n	8012f34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012f70:	bf00      	nop
 8012f72:	bf00      	nop
 8012f74:	3708      	adds	r7, #8
 8012f76:	46bd      	mov	sp, r7
 8012f78:	bd80      	pop	{r7, pc}
 8012f7a:	bf00      	nop
 8012f7c:	20002364 	.word	0x20002364
 8012f80:	20002390 	.word	0x20002390
 8012f84:	20002378 	.word	0x20002378

08012f88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b084      	sub	sp, #16
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	334c      	adds	r3, #76	; 0x4c
 8012f94:	4618      	mov	r0, r3
 8012f96:	f001 fda7 	bl	8014ae8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d108      	bne.n	8012fb6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fa8:	4618      	mov	r0, r3
 8012faa:	f000 fc69 	bl	8013880 <vPortFree>
				vPortFree( pxTCB );
 8012fae:	6878      	ldr	r0, [r7, #4]
 8012fb0:	f000 fc66 	bl	8013880 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012fb4:	e018      	b.n	8012fe8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8012fbc:	2b01      	cmp	r3, #1
 8012fbe:	d103      	bne.n	8012fc8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8012fc0:	6878      	ldr	r0, [r7, #4]
 8012fc2:	f000 fc5d 	bl	8013880 <vPortFree>
	}
 8012fc6:	e00f      	b.n	8012fe8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8012fce:	2b02      	cmp	r3, #2
 8012fd0:	d00a      	beq.n	8012fe8 <prvDeleteTCB+0x60>
	__asm volatile
 8012fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fd6:	f383 8811 	msr	BASEPRI, r3
 8012fda:	f3bf 8f6f 	isb	sy
 8012fde:	f3bf 8f4f 	dsb	sy
 8012fe2:	60fb      	str	r3, [r7, #12]
}
 8012fe4:	bf00      	nop
 8012fe6:	e7fe      	b.n	8012fe6 <prvDeleteTCB+0x5e>
	}
 8012fe8:	bf00      	nop
 8012fea:	3710      	adds	r7, #16
 8012fec:	46bd      	mov	sp, r7
 8012fee:	bd80      	pop	{r7, pc}

08012ff0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012ff0:	b480      	push	{r7}
 8012ff2:	b083      	sub	sp, #12
 8012ff4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012ff6:	4b0c      	ldr	r3, [pc, #48]	; (8013028 <prvResetNextTaskUnblockTime+0x38>)
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d104      	bne.n	801300a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013000:	4b0a      	ldr	r3, [pc, #40]	; (801302c <prvResetNextTaskUnblockTime+0x3c>)
 8013002:	f04f 32ff 	mov.w	r2, #4294967295
 8013006:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013008:	e008      	b.n	801301c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801300a:	4b07      	ldr	r3, [pc, #28]	; (8013028 <prvResetNextTaskUnblockTime+0x38>)
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	68db      	ldr	r3, [r3, #12]
 8013010:	68db      	ldr	r3, [r3, #12]
 8013012:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	685b      	ldr	r3, [r3, #4]
 8013018:	4a04      	ldr	r2, [pc, #16]	; (801302c <prvResetNextTaskUnblockTime+0x3c>)
 801301a:	6013      	str	r3, [r2, #0]
}
 801301c:	bf00      	nop
 801301e:	370c      	adds	r7, #12
 8013020:	46bd      	mov	sp, r7
 8013022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013026:	4770      	bx	lr
 8013028:	20002348 	.word	0x20002348
 801302c:	200023b0 	.word	0x200023b0

08013030 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013030:	b480      	push	{r7}
 8013032:	b083      	sub	sp, #12
 8013034:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013036:	4b0b      	ldr	r3, [pc, #44]	; (8013064 <xTaskGetSchedulerState+0x34>)
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d102      	bne.n	8013044 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801303e:	2301      	movs	r3, #1
 8013040:	607b      	str	r3, [r7, #4]
 8013042:	e008      	b.n	8013056 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013044:	4b08      	ldr	r3, [pc, #32]	; (8013068 <xTaskGetSchedulerState+0x38>)
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d102      	bne.n	8013052 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801304c:	2302      	movs	r3, #2
 801304e:	607b      	str	r3, [r7, #4]
 8013050:	e001      	b.n	8013056 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013052:	2300      	movs	r3, #0
 8013054:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013056:	687b      	ldr	r3, [r7, #4]
	}
 8013058:	4618      	mov	r0, r3
 801305a:	370c      	adds	r7, #12
 801305c:	46bd      	mov	sp, r7
 801305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013062:	4770      	bx	lr
 8013064:	2000239c 	.word	0x2000239c
 8013068:	200023b8 	.word	0x200023b8

0801306c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801306c:	b580      	push	{r7, lr}
 801306e:	b086      	sub	sp, #24
 8013070:	af00      	add	r7, sp, #0
 8013072:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013078:	2300      	movs	r3, #0
 801307a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d06e      	beq.n	8013160 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013082:	4b3a      	ldr	r3, [pc, #232]	; (801316c <xTaskPriorityDisinherit+0x100>)
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	693a      	ldr	r2, [r7, #16]
 8013088:	429a      	cmp	r2, r3
 801308a:	d00a      	beq.n	80130a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801308c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013090:	f383 8811 	msr	BASEPRI, r3
 8013094:	f3bf 8f6f 	isb	sy
 8013098:	f3bf 8f4f 	dsb	sy
 801309c:	60fb      	str	r3, [r7, #12]
}
 801309e:	bf00      	nop
 80130a0:	e7fe      	b.n	80130a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80130a2:	693b      	ldr	r3, [r7, #16]
 80130a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d10a      	bne.n	80130c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80130aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ae:	f383 8811 	msr	BASEPRI, r3
 80130b2:	f3bf 8f6f 	isb	sy
 80130b6:	f3bf 8f4f 	dsb	sy
 80130ba:	60bb      	str	r3, [r7, #8]
}
 80130bc:	bf00      	nop
 80130be:	e7fe      	b.n	80130be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80130c0:	693b      	ldr	r3, [r7, #16]
 80130c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80130c4:	1e5a      	subs	r2, r3, #1
 80130c6:	693b      	ldr	r3, [r7, #16]
 80130c8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80130ca:	693b      	ldr	r3, [r7, #16]
 80130cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130ce:	693b      	ldr	r3, [r7, #16]
 80130d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80130d2:	429a      	cmp	r2, r3
 80130d4:	d044      	beq.n	8013160 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80130d6:	693b      	ldr	r3, [r7, #16]
 80130d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d140      	bne.n	8013160 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80130de:	693b      	ldr	r3, [r7, #16]
 80130e0:	3304      	adds	r3, #4
 80130e2:	4618      	mov	r0, r3
 80130e4:	f7fe fc36 	bl	8011954 <uxListRemove>
 80130e8:	4603      	mov	r3, r0
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d115      	bne.n	801311a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80130ee:	693b      	ldr	r3, [r7, #16]
 80130f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130f2:	491f      	ldr	r1, [pc, #124]	; (8013170 <xTaskPriorityDisinherit+0x104>)
 80130f4:	4613      	mov	r3, r2
 80130f6:	009b      	lsls	r3, r3, #2
 80130f8:	4413      	add	r3, r2
 80130fa:	009b      	lsls	r3, r3, #2
 80130fc:	440b      	add	r3, r1
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d10a      	bne.n	801311a <xTaskPriorityDisinherit+0xae>
 8013104:	693b      	ldr	r3, [r7, #16]
 8013106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013108:	2201      	movs	r2, #1
 801310a:	fa02 f303 	lsl.w	r3, r2, r3
 801310e:	43da      	mvns	r2, r3
 8013110:	4b18      	ldr	r3, [pc, #96]	; (8013174 <xTaskPriorityDisinherit+0x108>)
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	4013      	ands	r3, r2
 8013116:	4a17      	ldr	r2, [pc, #92]	; (8013174 <xTaskPriorityDisinherit+0x108>)
 8013118:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801311a:	693b      	ldr	r3, [r7, #16]
 801311c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801311e:	693b      	ldr	r3, [r7, #16]
 8013120:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013122:	693b      	ldr	r3, [r7, #16]
 8013124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013126:	f1c3 0207 	rsb	r2, r3, #7
 801312a:	693b      	ldr	r3, [r7, #16]
 801312c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801312e:	693b      	ldr	r3, [r7, #16]
 8013130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013132:	2201      	movs	r2, #1
 8013134:	409a      	lsls	r2, r3
 8013136:	4b0f      	ldr	r3, [pc, #60]	; (8013174 <xTaskPriorityDisinherit+0x108>)
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	4313      	orrs	r3, r2
 801313c:	4a0d      	ldr	r2, [pc, #52]	; (8013174 <xTaskPriorityDisinherit+0x108>)
 801313e:	6013      	str	r3, [r2, #0]
 8013140:	693b      	ldr	r3, [r7, #16]
 8013142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013144:	4613      	mov	r3, r2
 8013146:	009b      	lsls	r3, r3, #2
 8013148:	4413      	add	r3, r2
 801314a:	009b      	lsls	r3, r3, #2
 801314c:	4a08      	ldr	r2, [pc, #32]	; (8013170 <xTaskPriorityDisinherit+0x104>)
 801314e:	441a      	add	r2, r3
 8013150:	693b      	ldr	r3, [r7, #16]
 8013152:	3304      	adds	r3, #4
 8013154:	4619      	mov	r1, r3
 8013156:	4610      	mov	r0, r2
 8013158:	f7fe fb9f 	bl	801189a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801315c:	2301      	movs	r3, #1
 801315e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013160:	697b      	ldr	r3, [r7, #20]
	}
 8013162:	4618      	mov	r0, r3
 8013164:	3718      	adds	r7, #24
 8013166:	46bd      	mov	sp, r7
 8013168:	bd80      	pop	{r7, pc}
 801316a:	bf00      	nop
 801316c:	20002290 	.word	0x20002290
 8013170:	20002294 	.word	0x20002294
 8013174:	20002398 	.word	0x20002398

08013178 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013178:	b580      	push	{r7, lr}
 801317a:	b084      	sub	sp, #16
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
 8013180:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013182:	4b29      	ldr	r3, [pc, #164]	; (8013228 <prvAddCurrentTaskToDelayedList+0xb0>)
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013188:	4b28      	ldr	r3, [pc, #160]	; (801322c <prvAddCurrentTaskToDelayedList+0xb4>)
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	3304      	adds	r3, #4
 801318e:	4618      	mov	r0, r3
 8013190:	f7fe fbe0 	bl	8011954 <uxListRemove>
 8013194:	4603      	mov	r3, r0
 8013196:	2b00      	cmp	r3, #0
 8013198:	d10b      	bne.n	80131b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801319a:	4b24      	ldr	r3, [pc, #144]	; (801322c <prvAddCurrentTaskToDelayedList+0xb4>)
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131a0:	2201      	movs	r2, #1
 80131a2:	fa02 f303 	lsl.w	r3, r2, r3
 80131a6:	43da      	mvns	r2, r3
 80131a8:	4b21      	ldr	r3, [pc, #132]	; (8013230 <prvAddCurrentTaskToDelayedList+0xb8>)
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	4013      	ands	r3, r2
 80131ae:	4a20      	ldr	r2, [pc, #128]	; (8013230 <prvAddCurrentTaskToDelayedList+0xb8>)
 80131b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131b8:	d10a      	bne.n	80131d0 <prvAddCurrentTaskToDelayedList+0x58>
 80131ba:	683b      	ldr	r3, [r7, #0]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d007      	beq.n	80131d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80131c0:	4b1a      	ldr	r3, [pc, #104]	; (801322c <prvAddCurrentTaskToDelayedList+0xb4>)
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	3304      	adds	r3, #4
 80131c6:	4619      	mov	r1, r3
 80131c8:	481a      	ldr	r0, [pc, #104]	; (8013234 <prvAddCurrentTaskToDelayedList+0xbc>)
 80131ca:	f7fe fb66 	bl	801189a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80131ce:	e026      	b.n	801321e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80131d0:	68fa      	ldr	r2, [r7, #12]
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	4413      	add	r3, r2
 80131d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80131d8:	4b14      	ldr	r3, [pc, #80]	; (801322c <prvAddCurrentTaskToDelayedList+0xb4>)
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	68ba      	ldr	r2, [r7, #8]
 80131de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80131e0:	68ba      	ldr	r2, [r7, #8]
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	429a      	cmp	r2, r3
 80131e6:	d209      	bcs.n	80131fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80131e8:	4b13      	ldr	r3, [pc, #76]	; (8013238 <prvAddCurrentTaskToDelayedList+0xc0>)
 80131ea:	681a      	ldr	r2, [r3, #0]
 80131ec:	4b0f      	ldr	r3, [pc, #60]	; (801322c <prvAddCurrentTaskToDelayedList+0xb4>)
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	3304      	adds	r3, #4
 80131f2:	4619      	mov	r1, r3
 80131f4:	4610      	mov	r0, r2
 80131f6:	f7fe fb74 	bl	80118e2 <vListInsert>
}
 80131fa:	e010      	b.n	801321e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80131fc:	4b0f      	ldr	r3, [pc, #60]	; (801323c <prvAddCurrentTaskToDelayedList+0xc4>)
 80131fe:	681a      	ldr	r2, [r3, #0]
 8013200:	4b0a      	ldr	r3, [pc, #40]	; (801322c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	3304      	adds	r3, #4
 8013206:	4619      	mov	r1, r3
 8013208:	4610      	mov	r0, r2
 801320a:	f7fe fb6a 	bl	80118e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801320e:	4b0c      	ldr	r3, [pc, #48]	; (8013240 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	68ba      	ldr	r2, [r7, #8]
 8013214:	429a      	cmp	r2, r3
 8013216:	d202      	bcs.n	801321e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013218:	4a09      	ldr	r2, [pc, #36]	; (8013240 <prvAddCurrentTaskToDelayedList+0xc8>)
 801321a:	68bb      	ldr	r3, [r7, #8]
 801321c:	6013      	str	r3, [r2, #0]
}
 801321e:	bf00      	nop
 8013220:	3710      	adds	r7, #16
 8013222:	46bd      	mov	sp, r7
 8013224:	bd80      	pop	{r7, pc}
 8013226:	bf00      	nop
 8013228:	20002394 	.word	0x20002394
 801322c:	20002290 	.word	0x20002290
 8013230:	20002398 	.word	0x20002398
 8013234:	2000237c 	.word	0x2000237c
 8013238:	2000234c 	.word	0x2000234c
 801323c:	20002348 	.word	0x20002348
 8013240:	200023b0 	.word	0x200023b0

08013244 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013244:	b480      	push	{r7}
 8013246:	b085      	sub	sp, #20
 8013248:	af00      	add	r7, sp, #0
 801324a:	60f8      	str	r0, [r7, #12]
 801324c:	60b9      	str	r1, [r7, #8]
 801324e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	3b04      	subs	r3, #4
 8013254:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801325c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	3b04      	subs	r3, #4
 8013262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013264:	68bb      	ldr	r3, [r7, #8]
 8013266:	f023 0201 	bic.w	r2, r3, #1
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	3b04      	subs	r3, #4
 8013272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013274:	4a0c      	ldr	r2, [pc, #48]	; (80132a8 <pxPortInitialiseStack+0x64>)
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	3b14      	subs	r3, #20
 801327e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013280:	687a      	ldr	r2, [r7, #4]
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	3b04      	subs	r3, #4
 801328a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	f06f 0202 	mvn.w	r2, #2
 8013292:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	3b20      	subs	r3, #32
 8013298:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801329a:	68fb      	ldr	r3, [r7, #12]
}
 801329c:	4618      	mov	r0, r3
 801329e:	3714      	adds	r7, #20
 80132a0:	46bd      	mov	sp, r7
 80132a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a6:	4770      	bx	lr
 80132a8:	080132ad 	.word	0x080132ad

080132ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80132ac:	b480      	push	{r7}
 80132ae:	b085      	sub	sp, #20
 80132b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80132b2:	2300      	movs	r3, #0
 80132b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80132b6:	4b12      	ldr	r3, [pc, #72]	; (8013300 <prvTaskExitError+0x54>)
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132be:	d00a      	beq.n	80132d6 <prvTaskExitError+0x2a>
	__asm volatile
 80132c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132c4:	f383 8811 	msr	BASEPRI, r3
 80132c8:	f3bf 8f6f 	isb	sy
 80132cc:	f3bf 8f4f 	dsb	sy
 80132d0:	60fb      	str	r3, [r7, #12]
}
 80132d2:	bf00      	nop
 80132d4:	e7fe      	b.n	80132d4 <prvTaskExitError+0x28>
	__asm volatile
 80132d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132da:	f383 8811 	msr	BASEPRI, r3
 80132de:	f3bf 8f6f 	isb	sy
 80132e2:	f3bf 8f4f 	dsb	sy
 80132e6:	60bb      	str	r3, [r7, #8]
}
 80132e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80132ea:	bf00      	nop
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d0fc      	beq.n	80132ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80132f2:	bf00      	nop
 80132f4:	bf00      	nop
 80132f6:	3714      	adds	r7, #20
 80132f8:	46bd      	mov	sp, r7
 80132fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132fe:	4770      	bx	lr
 8013300:	200002b0 	.word	0x200002b0
	...

08013310 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013310:	4b07      	ldr	r3, [pc, #28]	; (8013330 <pxCurrentTCBConst2>)
 8013312:	6819      	ldr	r1, [r3, #0]
 8013314:	6808      	ldr	r0, [r1, #0]
 8013316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801331a:	f380 8809 	msr	PSP, r0
 801331e:	f3bf 8f6f 	isb	sy
 8013322:	f04f 0000 	mov.w	r0, #0
 8013326:	f380 8811 	msr	BASEPRI, r0
 801332a:	4770      	bx	lr
 801332c:	f3af 8000 	nop.w

08013330 <pxCurrentTCBConst2>:
 8013330:	20002290 	.word	0x20002290
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013334:	bf00      	nop
 8013336:	bf00      	nop

08013338 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013338:	4808      	ldr	r0, [pc, #32]	; (801335c <prvPortStartFirstTask+0x24>)
 801333a:	6800      	ldr	r0, [r0, #0]
 801333c:	6800      	ldr	r0, [r0, #0]
 801333e:	f380 8808 	msr	MSP, r0
 8013342:	f04f 0000 	mov.w	r0, #0
 8013346:	f380 8814 	msr	CONTROL, r0
 801334a:	b662      	cpsie	i
 801334c:	b661      	cpsie	f
 801334e:	f3bf 8f4f 	dsb	sy
 8013352:	f3bf 8f6f 	isb	sy
 8013356:	df00      	svc	0
 8013358:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801335a:	bf00      	nop
 801335c:	e000ed08 	.word	0xe000ed08

08013360 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b086      	sub	sp, #24
 8013364:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013366:	4b46      	ldr	r3, [pc, #280]	; (8013480 <xPortStartScheduler+0x120>)
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	4a46      	ldr	r2, [pc, #280]	; (8013484 <xPortStartScheduler+0x124>)
 801336c:	4293      	cmp	r3, r2
 801336e:	d10a      	bne.n	8013386 <xPortStartScheduler+0x26>
	__asm volatile
 8013370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013374:	f383 8811 	msr	BASEPRI, r3
 8013378:	f3bf 8f6f 	isb	sy
 801337c:	f3bf 8f4f 	dsb	sy
 8013380:	613b      	str	r3, [r7, #16]
}
 8013382:	bf00      	nop
 8013384:	e7fe      	b.n	8013384 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013386:	4b3e      	ldr	r3, [pc, #248]	; (8013480 <xPortStartScheduler+0x120>)
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	4a3f      	ldr	r2, [pc, #252]	; (8013488 <xPortStartScheduler+0x128>)
 801338c:	4293      	cmp	r3, r2
 801338e:	d10a      	bne.n	80133a6 <xPortStartScheduler+0x46>
	__asm volatile
 8013390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013394:	f383 8811 	msr	BASEPRI, r3
 8013398:	f3bf 8f6f 	isb	sy
 801339c:	f3bf 8f4f 	dsb	sy
 80133a0:	60fb      	str	r3, [r7, #12]
}
 80133a2:	bf00      	nop
 80133a4:	e7fe      	b.n	80133a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80133a6:	4b39      	ldr	r3, [pc, #228]	; (801348c <xPortStartScheduler+0x12c>)
 80133a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80133aa:	697b      	ldr	r3, [r7, #20]
 80133ac:	781b      	ldrb	r3, [r3, #0]
 80133ae:	b2db      	uxtb	r3, r3
 80133b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80133b2:	697b      	ldr	r3, [r7, #20]
 80133b4:	22ff      	movs	r2, #255	; 0xff
 80133b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80133b8:	697b      	ldr	r3, [r7, #20]
 80133ba:	781b      	ldrb	r3, [r3, #0]
 80133bc:	b2db      	uxtb	r3, r3
 80133be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80133c0:	78fb      	ldrb	r3, [r7, #3]
 80133c2:	b2db      	uxtb	r3, r3
 80133c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80133c8:	b2da      	uxtb	r2, r3
 80133ca:	4b31      	ldr	r3, [pc, #196]	; (8013490 <xPortStartScheduler+0x130>)
 80133cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80133ce:	4b31      	ldr	r3, [pc, #196]	; (8013494 <xPortStartScheduler+0x134>)
 80133d0:	2207      	movs	r2, #7
 80133d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80133d4:	e009      	b.n	80133ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80133d6:	4b2f      	ldr	r3, [pc, #188]	; (8013494 <xPortStartScheduler+0x134>)
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	3b01      	subs	r3, #1
 80133dc:	4a2d      	ldr	r2, [pc, #180]	; (8013494 <xPortStartScheduler+0x134>)
 80133de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80133e0:	78fb      	ldrb	r3, [r7, #3]
 80133e2:	b2db      	uxtb	r3, r3
 80133e4:	005b      	lsls	r3, r3, #1
 80133e6:	b2db      	uxtb	r3, r3
 80133e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80133ea:	78fb      	ldrb	r3, [r7, #3]
 80133ec:	b2db      	uxtb	r3, r3
 80133ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80133f2:	2b80      	cmp	r3, #128	; 0x80
 80133f4:	d0ef      	beq.n	80133d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80133f6:	4b27      	ldr	r3, [pc, #156]	; (8013494 <xPortStartScheduler+0x134>)
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	f1c3 0307 	rsb	r3, r3, #7
 80133fe:	2b04      	cmp	r3, #4
 8013400:	d00a      	beq.n	8013418 <xPortStartScheduler+0xb8>
	__asm volatile
 8013402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013406:	f383 8811 	msr	BASEPRI, r3
 801340a:	f3bf 8f6f 	isb	sy
 801340e:	f3bf 8f4f 	dsb	sy
 8013412:	60bb      	str	r3, [r7, #8]
}
 8013414:	bf00      	nop
 8013416:	e7fe      	b.n	8013416 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013418:	4b1e      	ldr	r3, [pc, #120]	; (8013494 <xPortStartScheduler+0x134>)
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	021b      	lsls	r3, r3, #8
 801341e:	4a1d      	ldr	r2, [pc, #116]	; (8013494 <xPortStartScheduler+0x134>)
 8013420:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013422:	4b1c      	ldr	r3, [pc, #112]	; (8013494 <xPortStartScheduler+0x134>)
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801342a:	4a1a      	ldr	r2, [pc, #104]	; (8013494 <xPortStartScheduler+0x134>)
 801342c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	b2da      	uxtb	r2, r3
 8013432:	697b      	ldr	r3, [r7, #20]
 8013434:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013436:	4b18      	ldr	r3, [pc, #96]	; (8013498 <xPortStartScheduler+0x138>)
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	4a17      	ldr	r2, [pc, #92]	; (8013498 <xPortStartScheduler+0x138>)
 801343c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013440:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013442:	4b15      	ldr	r3, [pc, #84]	; (8013498 <xPortStartScheduler+0x138>)
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	4a14      	ldr	r2, [pc, #80]	; (8013498 <xPortStartScheduler+0x138>)
 8013448:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801344c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801344e:	f000 f8dd 	bl	801360c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013452:	4b12      	ldr	r3, [pc, #72]	; (801349c <xPortStartScheduler+0x13c>)
 8013454:	2200      	movs	r2, #0
 8013456:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013458:	f000 f8fc 	bl	8013654 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801345c:	4b10      	ldr	r3, [pc, #64]	; (80134a0 <xPortStartScheduler+0x140>)
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	4a0f      	ldr	r2, [pc, #60]	; (80134a0 <xPortStartScheduler+0x140>)
 8013462:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013466:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013468:	f7ff ff66 	bl	8013338 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801346c:	f7ff fb9a 	bl	8012ba4 <vTaskSwitchContext>
	prvTaskExitError();
 8013470:	f7ff ff1c 	bl	80132ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013474:	2300      	movs	r3, #0
}
 8013476:	4618      	mov	r0, r3
 8013478:	3718      	adds	r7, #24
 801347a:	46bd      	mov	sp, r7
 801347c:	bd80      	pop	{r7, pc}
 801347e:	bf00      	nop
 8013480:	e000ed00 	.word	0xe000ed00
 8013484:	410fc271 	.word	0x410fc271
 8013488:	410fc270 	.word	0x410fc270
 801348c:	e000e400 	.word	0xe000e400
 8013490:	200023bc 	.word	0x200023bc
 8013494:	200023c0 	.word	0x200023c0
 8013498:	e000ed20 	.word	0xe000ed20
 801349c:	200002b0 	.word	0x200002b0
 80134a0:	e000ef34 	.word	0xe000ef34

080134a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80134a4:	b480      	push	{r7}
 80134a6:	b083      	sub	sp, #12
 80134a8:	af00      	add	r7, sp, #0
	__asm volatile
 80134aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134ae:	f383 8811 	msr	BASEPRI, r3
 80134b2:	f3bf 8f6f 	isb	sy
 80134b6:	f3bf 8f4f 	dsb	sy
 80134ba:	607b      	str	r3, [r7, #4]
}
 80134bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80134be:	4b0f      	ldr	r3, [pc, #60]	; (80134fc <vPortEnterCritical+0x58>)
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	3301      	adds	r3, #1
 80134c4:	4a0d      	ldr	r2, [pc, #52]	; (80134fc <vPortEnterCritical+0x58>)
 80134c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80134c8:	4b0c      	ldr	r3, [pc, #48]	; (80134fc <vPortEnterCritical+0x58>)
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	2b01      	cmp	r3, #1
 80134ce:	d10f      	bne.n	80134f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80134d0:	4b0b      	ldr	r3, [pc, #44]	; (8013500 <vPortEnterCritical+0x5c>)
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	b2db      	uxtb	r3, r3
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d00a      	beq.n	80134f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80134da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134de:	f383 8811 	msr	BASEPRI, r3
 80134e2:	f3bf 8f6f 	isb	sy
 80134e6:	f3bf 8f4f 	dsb	sy
 80134ea:	603b      	str	r3, [r7, #0]
}
 80134ec:	bf00      	nop
 80134ee:	e7fe      	b.n	80134ee <vPortEnterCritical+0x4a>
	}
}
 80134f0:	bf00      	nop
 80134f2:	370c      	adds	r7, #12
 80134f4:	46bd      	mov	sp, r7
 80134f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134fa:	4770      	bx	lr
 80134fc:	200002b0 	.word	0x200002b0
 8013500:	e000ed04 	.word	0xe000ed04

08013504 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013504:	b480      	push	{r7}
 8013506:	b083      	sub	sp, #12
 8013508:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801350a:	4b12      	ldr	r3, [pc, #72]	; (8013554 <vPortExitCritical+0x50>)
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d10a      	bne.n	8013528 <vPortExitCritical+0x24>
	__asm volatile
 8013512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013516:	f383 8811 	msr	BASEPRI, r3
 801351a:	f3bf 8f6f 	isb	sy
 801351e:	f3bf 8f4f 	dsb	sy
 8013522:	607b      	str	r3, [r7, #4]
}
 8013524:	bf00      	nop
 8013526:	e7fe      	b.n	8013526 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013528:	4b0a      	ldr	r3, [pc, #40]	; (8013554 <vPortExitCritical+0x50>)
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	3b01      	subs	r3, #1
 801352e:	4a09      	ldr	r2, [pc, #36]	; (8013554 <vPortExitCritical+0x50>)
 8013530:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013532:	4b08      	ldr	r3, [pc, #32]	; (8013554 <vPortExitCritical+0x50>)
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d105      	bne.n	8013546 <vPortExitCritical+0x42>
 801353a:	2300      	movs	r3, #0
 801353c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801353e:	683b      	ldr	r3, [r7, #0]
 8013540:	f383 8811 	msr	BASEPRI, r3
}
 8013544:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013546:	bf00      	nop
 8013548:	370c      	adds	r7, #12
 801354a:	46bd      	mov	sp, r7
 801354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013550:	4770      	bx	lr
 8013552:	bf00      	nop
 8013554:	200002b0 	.word	0x200002b0
	...

08013560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013560:	f3ef 8009 	mrs	r0, PSP
 8013564:	f3bf 8f6f 	isb	sy
 8013568:	4b15      	ldr	r3, [pc, #84]	; (80135c0 <pxCurrentTCBConst>)
 801356a:	681a      	ldr	r2, [r3, #0]
 801356c:	f01e 0f10 	tst.w	lr, #16
 8013570:	bf08      	it	eq
 8013572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801357a:	6010      	str	r0, [r2, #0]
 801357c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013580:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013584:	f380 8811 	msr	BASEPRI, r0
 8013588:	f3bf 8f4f 	dsb	sy
 801358c:	f3bf 8f6f 	isb	sy
 8013590:	f7ff fb08 	bl	8012ba4 <vTaskSwitchContext>
 8013594:	f04f 0000 	mov.w	r0, #0
 8013598:	f380 8811 	msr	BASEPRI, r0
 801359c:	bc09      	pop	{r0, r3}
 801359e:	6819      	ldr	r1, [r3, #0]
 80135a0:	6808      	ldr	r0, [r1, #0]
 80135a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135a6:	f01e 0f10 	tst.w	lr, #16
 80135aa:	bf08      	it	eq
 80135ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80135b0:	f380 8809 	msr	PSP, r0
 80135b4:	f3bf 8f6f 	isb	sy
 80135b8:	4770      	bx	lr
 80135ba:	bf00      	nop
 80135bc:	f3af 8000 	nop.w

080135c0 <pxCurrentTCBConst>:
 80135c0:	20002290 	.word	0x20002290
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80135c4:	bf00      	nop
 80135c6:	bf00      	nop

080135c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b082      	sub	sp, #8
 80135cc:	af00      	add	r7, sp, #0
	__asm volatile
 80135ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135d2:	f383 8811 	msr	BASEPRI, r3
 80135d6:	f3bf 8f6f 	isb	sy
 80135da:	f3bf 8f4f 	dsb	sy
 80135de:	607b      	str	r3, [r7, #4]
}
 80135e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80135e2:	f7ff fa27 	bl	8012a34 <xTaskIncrementTick>
 80135e6:	4603      	mov	r3, r0
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d003      	beq.n	80135f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80135ec:	4b06      	ldr	r3, [pc, #24]	; (8013608 <SysTick_Handler+0x40>)
 80135ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135f2:	601a      	str	r2, [r3, #0]
 80135f4:	2300      	movs	r3, #0
 80135f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80135f8:	683b      	ldr	r3, [r7, #0]
 80135fa:	f383 8811 	msr	BASEPRI, r3
}
 80135fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013600:	bf00      	nop
 8013602:	3708      	adds	r7, #8
 8013604:	46bd      	mov	sp, r7
 8013606:	bd80      	pop	{r7, pc}
 8013608:	e000ed04 	.word	0xe000ed04

0801360c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801360c:	b480      	push	{r7}
 801360e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013610:	4b0b      	ldr	r3, [pc, #44]	; (8013640 <vPortSetupTimerInterrupt+0x34>)
 8013612:	2200      	movs	r2, #0
 8013614:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013616:	4b0b      	ldr	r3, [pc, #44]	; (8013644 <vPortSetupTimerInterrupt+0x38>)
 8013618:	2200      	movs	r2, #0
 801361a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801361c:	4b0a      	ldr	r3, [pc, #40]	; (8013648 <vPortSetupTimerInterrupt+0x3c>)
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	4a0a      	ldr	r2, [pc, #40]	; (801364c <vPortSetupTimerInterrupt+0x40>)
 8013622:	fba2 2303 	umull	r2, r3, r2, r3
 8013626:	099b      	lsrs	r3, r3, #6
 8013628:	4a09      	ldr	r2, [pc, #36]	; (8013650 <vPortSetupTimerInterrupt+0x44>)
 801362a:	3b01      	subs	r3, #1
 801362c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801362e:	4b04      	ldr	r3, [pc, #16]	; (8013640 <vPortSetupTimerInterrupt+0x34>)
 8013630:	2207      	movs	r2, #7
 8013632:	601a      	str	r2, [r3, #0]
}
 8013634:	bf00      	nop
 8013636:	46bd      	mov	sp, r7
 8013638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801363c:	4770      	bx	lr
 801363e:	bf00      	nop
 8013640:	e000e010 	.word	0xe000e010
 8013644:	e000e018 	.word	0xe000e018
 8013648:	20000234 	.word	0x20000234
 801364c:	10624dd3 	.word	0x10624dd3
 8013650:	e000e014 	.word	0xe000e014

08013654 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013654:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013664 <vPortEnableVFP+0x10>
 8013658:	6801      	ldr	r1, [r0, #0]
 801365a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801365e:	6001      	str	r1, [r0, #0]
 8013660:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013662:	bf00      	nop
 8013664:	e000ed88 	.word	0xe000ed88

08013668 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013668:	b480      	push	{r7}
 801366a:	b085      	sub	sp, #20
 801366c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801366e:	f3ef 8305 	mrs	r3, IPSR
 8013672:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	2b0f      	cmp	r3, #15
 8013678:	d914      	bls.n	80136a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801367a:	4a17      	ldr	r2, [pc, #92]	; (80136d8 <vPortValidateInterruptPriority+0x70>)
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	4413      	add	r3, r2
 8013680:	781b      	ldrb	r3, [r3, #0]
 8013682:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013684:	4b15      	ldr	r3, [pc, #84]	; (80136dc <vPortValidateInterruptPriority+0x74>)
 8013686:	781b      	ldrb	r3, [r3, #0]
 8013688:	7afa      	ldrb	r2, [r7, #11]
 801368a:	429a      	cmp	r2, r3
 801368c:	d20a      	bcs.n	80136a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801368e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013692:	f383 8811 	msr	BASEPRI, r3
 8013696:	f3bf 8f6f 	isb	sy
 801369a:	f3bf 8f4f 	dsb	sy
 801369e:	607b      	str	r3, [r7, #4]
}
 80136a0:	bf00      	nop
 80136a2:	e7fe      	b.n	80136a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80136a4:	4b0e      	ldr	r3, [pc, #56]	; (80136e0 <vPortValidateInterruptPriority+0x78>)
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80136ac:	4b0d      	ldr	r3, [pc, #52]	; (80136e4 <vPortValidateInterruptPriority+0x7c>)
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	429a      	cmp	r2, r3
 80136b2:	d90a      	bls.n	80136ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80136b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136b8:	f383 8811 	msr	BASEPRI, r3
 80136bc:	f3bf 8f6f 	isb	sy
 80136c0:	f3bf 8f4f 	dsb	sy
 80136c4:	603b      	str	r3, [r7, #0]
}
 80136c6:	bf00      	nop
 80136c8:	e7fe      	b.n	80136c8 <vPortValidateInterruptPriority+0x60>
	}
 80136ca:	bf00      	nop
 80136cc:	3714      	adds	r7, #20
 80136ce:	46bd      	mov	sp, r7
 80136d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d4:	4770      	bx	lr
 80136d6:	bf00      	nop
 80136d8:	e000e3f0 	.word	0xe000e3f0
 80136dc:	200023bc 	.word	0x200023bc
 80136e0:	e000ed0c 	.word	0xe000ed0c
 80136e4:	200023c0 	.word	0x200023c0

080136e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80136e8:	b580      	push	{r7, lr}
 80136ea:	b08a      	sub	sp, #40	; 0x28
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80136f0:	2300      	movs	r3, #0
 80136f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80136f4:	f7ff f8e4 	bl	80128c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80136f8:	4b5b      	ldr	r3, [pc, #364]	; (8013868 <pvPortMalloc+0x180>)
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d101      	bne.n	8013704 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013700:	f000 f920 	bl	8013944 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013704:	4b59      	ldr	r3, [pc, #356]	; (801386c <pvPortMalloc+0x184>)
 8013706:	681a      	ldr	r2, [r3, #0]
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	4013      	ands	r3, r2
 801370c:	2b00      	cmp	r3, #0
 801370e:	f040 8093 	bne.w	8013838 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d01d      	beq.n	8013754 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8013718:	2208      	movs	r2, #8
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	4413      	add	r3, r2
 801371e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	f003 0307 	and.w	r3, r3, #7
 8013726:	2b00      	cmp	r3, #0
 8013728:	d014      	beq.n	8013754 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	f023 0307 	bic.w	r3, r3, #7
 8013730:	3308      	adds	r3, #8
 8013732:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	f003 0307 	and.w	r3, r3, #7
 801373a:	2b00      	cmp	r3, #0
 801373c:	d00a      	beq.n	8013754 <pvPortMalloc+0x6c>
	__asm volatile
 801373e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013742:	f383 8811 	msr	BASEPRI, r3
 8013746:	f3bf 8f6f 	isb	sy
 801374a:	f3bf 8f4f 	dsb	sy
 801374e:	617b      	str	r3, [r7, #20]
}
 8013750:	bf00      	nop
 8013752:	e7fe      	b.n	8013752 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d06e      	beq.n	8013838 <pvPortMalloc+0x150>
 801375a:	4b45      	ldr	r3, [pc, #276]	; (8013870 <pvPortMalloc+0x188>)
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	687a      	ldr	r2, [r7, #4]
 8013760:	429a      	cmp	r2, r3
 8013762:	d869      	bhi.n	8013838 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013764:	4b43      	ldr	r3, [pc, #268]	; (8013874 <pvPortMalloc+0x18c>)
 8013766:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013768:	4b42      	ldr	r3, [pc, #264]	; (8013874 <pvPortMalloc+0x18c>)
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801376e:	e004      	b.n	801377a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8013770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013772:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801377c:	685b      	ldr	r3, [r3, #4]
 801377e:	687a      	ldr	r2, [r7, #4]
 8013780:	429a      	cmp	r2, r3
 8013782:	d903      	bls.n	801378c <pvPortMalloc+0xa4>
 8013784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d1f1      	bne.n	8013770 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801378c:	4b36      	ldr	r3, [pc, #216]	; (8013868 <pvPortMalloc+0x180>)
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013792:	429a      	cmp	r2, r3
 8013794:	d050      	beq.n	8013838 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013796:	6a3b      	ldr	r3, [r7, #32]
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	2208      	movs	r2, #8
 801379c:	4413      	add	r3, r2
 801379e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80137a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137a2:	681a      	ldr	r2, [r3, #0]
 80137a4:	6a3b      	ldr	r3, [r7, #32]
 80137a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80137a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137aa:	685a      	ldr	r2, [r3, #4]
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	1ad2      	subs	r2, r2, r3
 80137b0:	2308      	movs	r3, #8
 80137b2:	005b      	lsls	r3, r3, #1
 80137b4:	429a      	cmp	r2, r3
 80137b6:	d91f      	bls.n	80137f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80137b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	4413      	add	r3, r2
 80137be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80137c0:	69bb      	ldr	r3, [r7, #24]
 80137c2:	f003 0307 	and.w	r3, r3, #7
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d00a      	beq.n	80137e0 <pvPortMalloc+0xf8>
	__asm volatile
 80137ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137ce:	f383 8811 	msr	BASEPRI, r3
 80137d2:	f3bf 8f6f 	isb	sy
 80137d6:	f3bf 8f4f 	dsb	sy
 80137da:	613b      	str	r3, [r7, #16]
}
 80137dc:	bf00      	nop
 80137de:	e7fe      	b.n	80137de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80137e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137e2:	685a      	ldr	r2, [r3, #4]
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	1ad2      	subs	r2, r2, r3
 80137e8:	69bb      	ldr	r3, [r7, #24]
 80137ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80137ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ee:	687a      	ldr	r2, [r7, #4]
 80137f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80137f2:	69b8      	ldr	r0, [r7, #24]
 80137f4:	f000 f908 	bl	8013a08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80137f8:	4b1d      	ldr	r3, [pc, #116]	; (8013870 <pvPortMalloc+0x188>)
 80137fa:	681a      	ldr	r2, [r3, #0]
 80137fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137fe:	685b      	ldr	r3, [r3, #4]
 8013800:	1ad3      	subs	r3, r2, r3
 8013802:	4a1b      	ldr	r2, [pc, #108]	; (8013870 <pvPortMalloc+0x188>)
 8013804:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013806:	4b1a      	ldr	r3, [pc, #104]	; (8013870 <pvPortMalloc+0x188>)
 8013808:	681a      	ldr	r2, [r3, #0]
 801380a:	4b1b      	ldr	r3, [pc, #108]	; (8013878 <pvPortMalloc+0x190>)
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	429a      	cmp	r2, r3
 8013810:	d203      	bcs.n	801381a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013812:	4b17      	ldr	r3, [pc, #92]	; (8013870 <pvPortMalloc+0x188>)
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	4a18      	ldr	r2, [pc, #96]	; (8013878 <pvPortMalloc+0x190>)
 8013818:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801381c:	685a      	ldr	r2, [r3, #4]
 801381e:	4b13      	ldr	r3, [pc, #76]	; (801386c <pvPortMalloc+0x184>)
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	431a      	orrs	r2, r3
 8013824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013826:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801382a:	2200      	movs	r2, #0
 801382c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801382e:	4b13      	ldr	r3, [pc, #76]	; (801387c <pvPortMalloc+0x194>)
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	3301      	adds	r3, #1
 8013834:	4a11      	ldr	r2, [pc, #68]	; (801387c <pvPortMalloc+0x194>)
 8013836:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013838:	f7ff f850 	bl	80128dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801383c:	69fb      	ldr	r3, [r7, #28]
 801383e:	f003 0307 	and.w	r3, r3, #7
 8013842:	2b00      	cmp	r3, #0
 8013844:	d00a      	beq.n	801385c <pvPortMalloc+0x174>
	__asm volatile
 8013846:	f04f 0350 	mov.w	r3, #80	; 0x50
 801384a:	f383 8811 	msr	BASEPRI, r3
 801384e:	f3bf 8f6f 	isb	sy
 8013852:	f3bf 8f4f 	dsb	sy
 8013856:	60fb      	str	r3, [r7, #12]
}
 8013858:	bf00      	nop
 801385a:	e7fe      	b.n	801385a <pvPortMalloc+0x172>
	return pvReturn;
 801385c:	69fb      	ldr	r3, [r7, #28]
}
 801385e:	4618      	mov	r0, r3
 8013860:	3728      	adds	r7, #40	; 0x28
 8013862:	46bd      	mov	sp, r7
 8013864:	bd80      	pop	{r7, pc}
 8013866:	bf00      	nop
 8013868:	2000818c 	.word	0x2000818c
 801386c:	200081a0 	.word	0x200081a0
 8013870:	20008190 	.word	0x20008190
 8013874:	20008184 	.word	0x20008184
 8013878:	20008194 	.word	0x20008194
 801387c:	20008198 	.word	0x20008198

08013880 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013880:	b580      	push	{r7, lr}
 8013882:	b086      	sub	sp, #24
 8013884:	af00      	add	r7, sp, #0
 8013886:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d04d      	beq.n	801392e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013892:	2308      	movs	r3, #8
 8013894:	425b      	negs	r3, r3
 8013896:	697a      	ldr	r2, [r7, #20]
 8013898:	4413      	add	r3, r2
 801389a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801389c:	697b      	ldr	r3, [r7, #20]
 801389e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80138a0:	693b      	ldr	r3, [r7, #16]
 80138a2:	685a      	ldr	r2, [r3, #4]
 80138a4:	4b24      	ldr	r3, [pc, #144]	; (8013938 <vPortFree+0xb8>)
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	4013      	ands	r3, r2
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d10a      	bne.n	80138c4 <vPortFree+0x44>
	__asm volatile
 80138ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138b2:	f383 8811 	msr	BASEPRI, r3
 80138b6:	f3bf 8f6f 	isb	sy
 80138ba:	f3bf 8f4f 	dsb	sy
 80138be:	60fb      	str	r3, [r7, #12]
}
 80138c0:	bf00      	nop
 80138c2:	e7fe      	b.n	80138c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80138c4:	693b      	ldr	r3, [r7, #16]
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d00a      	beq.n	80138e2 <vPortFree+0x62>
	__asm volatile
 80138cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138d0:	f383 8811 	msr	BASEPRI, r3
 80138d4:	f3bf 8f6f 	isb	sy
 80138d8:	f3bf 8f4f 	dsb	sy
 80138dc:	60bb      	str	r3, [r7, #8]
}
 80138de:	bf00      	nop
 80138e0:	e7fe      	b.n	80138e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80138e2:	693b      	ldr	r3, [r7, #16]
 80138e4:	685a      	ldr	r2, [r3, #4]
 80138e6:	4b14      	ldr	r3, [pc, #80]	; (8013938 <vPortFree+0xb8>)
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	4013      	ands	r3, r2
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d01e      	beq.n	801392e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80138f0:	693b      	ldr	r3, [r7, #16]
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d11a      	bne.n	801392e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80138f8:	693b      	ldr	r3, [r7, #16]
 80138fa:	685a      	ldr	r2, [r3, #4]
 80138fc:	4b0e      	ldr	r3, [pc, #56]	; (8013938 <vPortFree+0xb8>)
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	43db      	mvns	r3, r3
 8013902:	401a      	ands	r2, r3
 8013904:	693b      	ldr	r3, [r7, #16]
 8013906:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013908:	f7fe ffda 	bl	80128c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801390c:	693b      	ldr	r3, [r7, #16]
 801390e:	685a      	ldr	r2, [r3, #4]
 8013910:	4b0a      	ldr	r3, [pc, #40]	; (801393c <vPortFree+0xbc>)
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	4413      	add	r3, r2
 8013916:	4a09      	ldr	r2, [pc, #36]	; (801393c <vPortFree+0xbc>)
 8013918:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801391a:	6938      	ldr	r0, [r7, #16]
 801391c:	f000 f874 	bl	8013a08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013920:	4b07      	ldr	r3, [pc, #28]	; (8013940 <vPortFree+0xc0>)
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	3301      	adds	r3, #1
 8013926:	4a06      	ldr	r2, [pc, #24]	; (8013940 <vPortFree+0xc0>)
 8013928:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801392a:	f7fe ffd7 	bl	80128dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801392e:	bf00      	nop
 8013930:	3718      	adds	r7, #24
 8013932:	46bd      	mov	sp, r7
 8013934:	bd80      	pop	{r7, pc}
 8013936:	bf00      	nop
 8013938:	200081a0 	.word	0x200081a0
 801393c:	20008190 	.word	0x20008190
 8013940:	2000819c 	.word	0x2000819c

08013944 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013944:	b480      	push	{r7}
 8013946:	b085      	sub	sp, #20
 8013948:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801394a:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 801394e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013950:	4b27      	ldr	r3, [pc, #156]	; (80139f0 <prvHeapInit+0xac>)
 8013952:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	f003 0307 	and.w	r3, r3, #7
 801395a:	2b00      	cmp	r3, #0
 801395c:	d00c      	beq.n	8013978 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	3307      	adds	r3, #7
 8013962:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	f023 0307 	bic.w	r3, r3, #7
 801396a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801396c:	68ba      	ldr	r2, [r7, #8]
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	1ad3      	subs	r3, r2, r3
 8013972:	4a1f      	ldr	r2, [pc, #124]	; (80139f0 <prvHeapInit+0xac>)
 8013974:	4413      	add	r3, r2
 8013976:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801397c:	4a1d      	ldr	r2, [pc, #116]	; (80139f4 <prvHeapInit+0xb0>)
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013982:	4b1c      	ldr	r3, [pc, #112]	; (80139f4 <prvHeapInit+0xb0>)
 8013984:	2200      	movs	r2, #0
 8013986:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	68ba      	ldr	r2, [r7, #8]
 801398c:	4413      	add	r3, r2
 801398e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013990:	2208      	movs	r2, #8
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	1a9b      	subs	r3, r3, r2
 8013996:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	f023 0307 	bic.w	r3, r3, #7
 801399e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	4a15      	ldr	r2, [pc, #84]	; (80139f8 <prvHeapInit+0xb4>)
 80139a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80139a6:	4b14      	ldr	r3, [pc, #80]	; (80139f8 <prvHeapInit+0xb4>)
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	2200      	movs	r2, #0
 80139ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80139ae:	4b12      	ldr	r3, [pc, #72]	; (80139f8 <prvHeapInit+0xb4>)
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	2200      	movs	r2, #0
 80139b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80139ba:	683b      	ldr	r3, [r7, #0]
 80139bc:	68fa      	ldr	r2, [r7, #12]
 80139be:	1ad2      	subs	r2, r2, r3
 80139c0:	683b      	ldr	r3, [r7, #0]
 80139c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80139c4:	4b0c      	ldr	r3, [pc, #48]	; (80139f8 <prvHeapInit+0xb4>)
 80139c6:	681a      	ldr	r2, [r3, #0]
 80139c8:	683b      	ldr	r3, [r7, #0]
 80139ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80139cc:	683b      	ldr	r3, [r7, #0]
 80139ce:	685b      	ldr	r3, [r3, #4]
 80139d0:	4a0a      	ldr	r2, [pc, #40]	; (80139fc <prvHeapInit+0xb8>)
 80139d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80139d4:	683b      	ldr	r3, [r7, #0]
 80139d6:	685b      	ldr	r3, [r3, #4]
 80139d8:	4a09      	ldr	r2, [pc, #36]	; (8013a00 <prvHeapInit+0xbc>)
 80139da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80139dc:	4b09      	ldr	r3, [pc, #36]	; (8013a04 <prvHeapInit+0xc0>)
 80139de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80139e2:	601a      	str	r2, [r3, #0]
}
 80139e4:	bf00      	nop
 80139e6:	3714      	adds	r7, #20
 80139e8:	46bd      	mov	sp, r7
 80139ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ee:	4770      	bx	lr
 80139f0:	200023c4 	.word	0x200023c4
 80139f4:	20008184 	.word	0x20008184
 80139f8:	2000818c 	.word	0x2000818c
 80139fc:	20008194 	.word	0x20008194
 8013a00:	20008190 	.word	0x20008190
 8013a04:	200081a0 	.word	0x200081a0

08013a08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013a08:	b480      	push	{r7}
 8013a0a:	b085      	sub	sp, #20
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013a10:	4b28      	ldr	r3, [pc, #160]	; (8013ab4 <prvInsertBlockIntoFreeList+0xac>)
 8013a12:	60fb      	str	r3, [r7, #12]
 8013a14:	e002      	b.n	8013a1c <prvInsertBlockIntoFreeList+0x14>
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	60fb      	str	r3, [r7, #12]
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	687a      	ldr	r2, [r7, #4]
 8013a22:	429a      	cmp	r2, r3
 8013a24:	d8f7      	bhi.n	8013a16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	685b      	ldr	r3, [r3, #4]
 8013a2e:	68ba      	ldr	r2, [r7, #8]
 8013a30:	4413      	add	r3, r2
 8013a32:	687a      	ldr	r2, [r7, #4]
 8013a34:	429a      	cmp	r2, r3
 8013a36:	d108      	bne.n	8013a4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	685a      	ldr	r2, [r3, #4]
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	685b      	ldr	r3, [r3, #4]
 8013a40:	441a      	add	r2, r3
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	685b      	ldr	r3, [r3, #4]
 8013a52:	68ba      	ldr	r2, [r7, #8]
 8013a54:	441a      	add	r2, r3
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	429a      	cmp	r2, r3
 8013a5c:	d118      	bne.n	8013a90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	681a      	ldr	r2, [r3, #0]
 8013a62:	4b15      	ldr	r3, [pc, #84]	; (8013ab8 <prvInsertBlockIntoFreeList+0xb0>)
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	429a      	cmp	r2, r3
 8013a68:	d00d      	beq.n	8013a86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	685a      	ldr	r2, [r3, #4]
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	685b      	ldr	r3, [r3, #4]
 8013a74:	441a      	add	r2, r3
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	681a      	ldr	r2, [r3, #0]
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	601a      	str	r2, [r3, #0]
 8013a84:	e008      	b.n	8013a98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013a86:	4b0c      	ldr	r3, [pc, #48]	; (8013ab8 <prvInsertBlockIntoFreeList+0xb0>)
 8013a88:	681a      	ldr	r2, [r3, #0]
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	601a      	str	r2, [r3, #0]
 8013a8e:	e003      	b.n	8013a98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	681a      	ldr	r2, [r3, #0]
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013a98:	68fa      	ldr	r2, [r7, #12]
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	429a      	cmp	r2, r3
 8013a9e:	d002      	beq.n	8013aa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	687a      	ldr	r2, [r7, #4]
 8013aa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013aa6:	bf00      	nop
 8013aa8:	3714      	adds	r7, #20
 8013aaa:	46bd      	mov	sp, r7
 8013aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab0:	4770      	bx	lr
 8013ab2:	bf00      	nop
 8013ab4:	20008184 	.word	0x20008184
 8013ab8:	2000818c 	.word	0x2000818c

08013abc <USB_transmit_msg>:

/*
 * -- Insert your variables declaration here --
 */
/* USER CODE BEGIN 0 */
void USB_transmit_msg(uint8_t* data,uint32_t size){
 8013abc:	b580      	push	{r7, lr}
 8013abe:	b082      	sub	sp, #8
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	6078      	str	r0, [r7, #4]
 8013ac4:	6039      	str	r1, [r7, #0]
  USBH_CDC_Stop(&hUsbHostFS);
 8013ac6:	4806      	ldr	r0, [pc, #24]	; (8013ae0 <USB_transmit_msg+0x24>)
 8013ac8:	f7f6 fda5 	bl	800a616 <USBH_CDC_Stop>
  USBH_CDC_Transmit(&hUsbHostFS,data, size);
 8013acc:	683a      	ldr	r2, [r7, #0]
 8013ace:	6879      	ldr	r1, [r7, #4]
 8013ad0:	4803      	ldr	r0, [pc, #12]	; (8013ae0 <USB_transmit_msg+0x24>)
 8013ad2:	f7f6 fe30 	bl	800a736 <USBH_CDC_Transmit>
}
 8013ad6:	bf00      	nop
 8013ad8:	3708      	adds	r7, #8
 8013ada:	46bd      	mov	sp, r7
 8013adc:	bd80      	pop	{r7, pc}
 8013ade:	bf00      	nop
 8013ae0:	2000b860 	.word	0x2000b860

08013ae4 <USB_receive_msg>:

void USB_receive_msg(){
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	af00      	add	r7, sp, #0
  USBH_CDC_Stop(&hUsbHostFS);
 8013ae8:	4809      	ldr	r0, [pc, #36]	; (8013b10 <USB_receive_msg+0x2c>)
 8013aea:	f7f6 fd94 	bl	800a616 <USBH_CDC_Stop>
  USBH_CDC_Receive(&hUsbHostFS,usb_rx_buff[usb_rx_buff_active],USB_RX_BUFF_SIZE);
 8013aee:	4b09      	ldr	r3, [pc, #36]	; (8013b14 <USB_receive_msg+0x30>)
 8013af0:	781b      	ldrb	r3, [r3, #0]
 8013af2:	461a      	mov	r2, r3
 8013af4:	f640 53ac 	movw	r3, #3500	; 0xdac
 8013af8:	fb02 f303 	mul.w	r3, r2, r3
 8013afc:	4a06      	ldr	r2, [pc, #24]	; (8013b18 <USB_receive_msg+0x34>)
 8013afe:	4413      	add	r3, r2
 8013b00:	f640 52ac 	movw	r2, #3500	; 0xdac
 8013b04:	4619      	mov	r1, r3
 8013b06:	4802      	ldr	r0, [pc, #8]	; (8013b10 <USB_receive_msg+0x2c>)
 8013b08:	f7f6 fe50 	bl	800a7ac <USBH_CDC_Receive>
}
 8013b0c:	bf00      	nop
 8013b0e:	bd80      	pop	{r7, pc}
 8013b10:	2000b860 	.word	0x2000b860
 8013b14:	2000b85c 	.word	0x2000b85c
 8013b18:	200081ac 	.word	0x200081ac

08013b1c <USB_set_line_coding>:


void USB_set_line_coding(){
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	af00      	add	r7, sp, #0
	FrameFormat.b.dwDTERate = 1250000;
 8013b20:	4b08      	ldr	r3, [pc, #32]	; (8013b44 <USB_set_line_coding+0x28>)
 8013b22:	4a09      	ldr	r2, [pc, #36]	; (8013b48 <USB_set_line_coding+0x2c>)
 8013b24:	601a      	str	r2, [r3, #0]
	FrameFormat.b.bCharFormat = 0;
 8013b26:	4b07      	ldr	r3, [pc, #28]	; (8013b44 <USB_set_line_coding+0x28>)
 8013b28:	2200      	movs	r2, #0
 8013b2a:	711a      	strb	r2, [r3, #4]
	FrameFormat.b.bDataBits = 8;
 8013b2c:	4b05      	ldr	r3, [pc, #20]	; (8013b44 <USB_set_line_coding+0x28>)
 8013b2e:	2208      	movs	r2, #8
 8013b30:	719a      	strb	r2, [r3, #6]
	FrameFormat.b.bParityType = 0;
 8013b32:	4b04      	ldr	r3, [pc, #16]	; (8013b44 <USB_set_line_coding+0x28>)
 8013b34:	2200      	movs	r2, #0
 8013b36:	715a      	strb	r2, [r3, #5]

	USBH_CDC_SetLineCoding(&hUsbHostFS, &FrameFormat);
 8013b38:	4902      	ldr	r1, [pc, #8]	; (8013b44 <USB_set_line_coding+0x28>)
 8013b3a:	4804      	ldr	r0, [pc, #16]	; (8013b4c <USB_set_line_coding+0x30>)
 8013b3c:	f7f6 fdd2 	bl	800a6e4 <USBH_CDC_SetLineCoding>
}
 8013b40:	bf00      	nop
 8013b42:	bd80      	pop	{r7, pc}
 8013b44:	200081a4 	.word	0x200081a4
 8013b48:	001312d0 	.word	0x001312d0
 8013b4c:	2000b860 	.word	0x2000b860

08013b50 <USBH_CDC_TransmitCallback>:
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */

void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b082      	sub	sp, #8
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	6078      	str	r0, [r7, #4]
  USB_receive_msg();
 8013b58:	f7ff ffc4 	bl	8013ae4 <USB_receive_msg>
}
 8013b5c:	bf00      	nop
 8013b5e:	3708      	adds	r7, #8
 8013b60:	46bd      	mov	sp, r7
 8013b62:	bd80      	pop	{r7, pc}

08013b64 <USBH_CDC_ReceiveCallback>:


void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8013b64:	b480      	push	{r7}
 8013b66:	b083      	sub	sp, #12
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
}
 8013b6c:	bf00      	nop
 8013b6e:	370c      	adds	r7, #12
 8013b70:	46bd      	mov	sp, r7
 8013b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b76:	4770      	bx	lr

08013b78 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8013b78:	b580      	push	{r7, lr}
 8013b7a:	af00      	add	r7, sp, #0


  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8013b7c:	2201      	movs	r2, #1
 8013b7e:	490e      	ldr	r1, [pc, #56]	; (8013bb8 <MX_USB_HOST_Init+0x40>)
 8013b80:	480e      	ldr	r0, [pc, #56]	; (8013bbc <MX_USB_HOST_Init+0x44>)
 8013b82:	f7f6 ff8f 	bl	800aaa4 <USBH_Init>
 8013b86:	4603      	mov	r3, r0
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d001      	beq.n	8013b90 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8013b8c:	f7ee f960 	bl	8001e50 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8013b90:	490b      	ldr	r1, [pc, #44]	; (8013bc0 <MX_USB_HOST_Init+0x48>)
 8013b92:	480a      	ldr	r0, [pc, #40]	; (8013bbc <MX_USB_HOST_Init+0x44>)
 8013b94:	f7f7 f83c 	bl	800ac10 <USBH_RegisterClass>
 8013b98:	4603      	mov	r3, r0
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d001      	beq.n	8013ba2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8013b9e:	f7ee f957 	bl	8001e50 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8013ba2:	4806      	ldr	r0, [pc, #24]	; (8013bbc <MX_USB_HOST_Init+0x44>)
 8013ba4:	f7f7 f8c0 	bl	800ad28 <USBH_Start>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d001      	beq.n	8013bb2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8013bae:	f7ee f94f 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8013bb2:	bf00      	nop
 8013bb4:	bd80      	pop	{r7, pc}
 8013bb6:	bf00      	nop
 8013bb8:	08013bc5 	.word	0x08013bc5
 8013bbc:	2000b860 	.word	0x2000b860
 8013bc0:	20000290 	.word	0x20000290

08013bc4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b082      	sub	sp, #8
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
 8013bcc:	460b      	mov	r3, r1
 8013bce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8013bd0:	78fb      	ldrb	r3, [r7, #3]
 8013bd2:	3b01      	subs	r3, #1
 8013bd4:	2b04      	cmp	r3, #4
 8013bd6:	d82e      	bhi.n	8013c36 <USBH_UserProcess+0x72>
 8013bd8:	a201      	add	r2, pc, #4	; (adr r2, 8013be0 <USBH_UserProcess+0x1c>)
 8013bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bde:	bf00      	nop
 8013be0:	08013c37 	.word	0x08013c37
 8013be4:	08013c0b 	.word	0x08013c0b
 8013be8:	08013c37 	.word	0x08013c37
 8013bec:	08013c21 	.word	0x08013c21
 8013bf0:	08013bf5 	.word	0x08013bf5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8013bf4:	4b12      	ldr	r3, [pc, #72]	; (8013c40 <USBH_UserProcess+0x7c>)
 8013bf6:	2203      	movs	r2, #3
 8013bf8:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_DISCONNECT, 0);
 8013bfa:	4b12      	ldr	r3, [pc, #72]	; (8013c44 <USBH_UserProcess+0x80>)
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	2200      	movs	r2, #0
 8013c00:	2103      	movs	r1, #3
 8013c02:	4618      	mov	r0, r3
 8013c04:	f7fd fd68 	bl	80116d8 <osMessagePut>
  break;
 8013c08:	e016      	b.n	8013c38 <USBH_UserProcess+0x74>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8013c0a:	4b0d      	ldr	r3, [pc, #52]	; (8013c40 <USBH_UserProcess+0x7c>)
 8013c0c:	2202      	movs	r2, #2
 8013c0e:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_READY, 0);
 8013c10:	4b0c      	ldr	r3, [pc, #48]	; (8013c44 <USBH_UserProcess+0x80>)
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	2200      	movs	r2, #0
 8013c16:	2102      	movs	r1, #2
 8013c18:	4618      	mov	r0, r3
 8013c1a:	f7fd fd5d 	bl	80116d8 <osMessagePut>
  break;
 8013c1e:	e00b      	b.n	8013c38 <USBH_UserProcess+0x74>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8013c20:	4b07      	ldr	r3, [pc, #28]	; (8013c40 <USBH_UserProcess+0x7c>)
 8013c22:	2201      	movs	r2, #1
 8013c24:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_START, 0);
 8013c26:	4b07      	ldr	r3, [pc, #28]	; (8013c44 <USBH_UserProcess+0x80>)
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	2200      	movs	r2, #0
 8013c2c:	2101      	movs	r1, #1
 8013c2e:	4618      	mov	r0, r3
 8013c30:	f7fd fd52 	bl	80116d8 <osMessagePut>
  break;
 8013c34:	e000      	b.n	8013c38 <USBH_UserProcess+0x74>

  default:
  break;
 8013c36:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8013c38:	bf00      	nop
 8013c3a:	3708      	adds	r7, #8
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	bd80      	pop	{r7, pc}
 8013c40:	2000bc44 	.word	0x2000bc44
 8013c44:	200009a0 	.word	0x200009a0

08013c48 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b08a      	sub	sp, #40	; 0x28
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013c50:	f107 0314 	add.w	r3, r7, #20
 8013c54:	2200      	movs	r2, #0
 8013c56:	601a      	str	r2, [r3, #0]
 8013c58:	605a      	str	r2, [r3, #4]
 8013c5a:	609a      	str	r2, [r3, #8]
 8013c5c:	60da      	str	r2, [r3, #12]
 8013c5e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013c68:	d13a      	bne.n	8013ce0 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	613b      	str	r3, [r7, #16]
 8013c6e:	4b1e      	ldr	r3, [pc, #120]	; (8013ce8 <HAL_HCD_MspInit+0xa0>)
 8013c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c72:	4a1d      	ldr	r2, [pc, #116]	; (8013ce8 <HAL_HCD_MspInit+0xa0>)
 8013c74:	f043 0301 	orr.w	r3, r3, #1
 8013c78:	6313      	str	r3, [r2, #48]	; 0x30
 8013c7a:	4b1b      	ldr	r3, [pc, #108]	; (8013ce8 <HAL_HCD_MspInit+0xa0>)
 8013c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c7e:	f003 0301 	and.w	r3, r3, #1
 8013c82:	613b      	str	r3, [r7, #16]
 8013c84:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8013c86:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8013c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013c8c:	2302      	movs	r3, #2
 8013c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c90:	2300      	movs	r3, #0
 8013c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013c94:	2303      	movs	r3, #3
 8013c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8013c98:	230a      	movs	r3, #10
 8013c9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013c9c:	f107 0314 	add.w	r3, r7, #20
 8013ca0:	4619      	mov	r1, r3
 8013ca2:	4812      	ldr	r0, [pc, #72]	; (8013cec <HAL_HCD_MspInit+0xa4>)
 8013ca4:	f7f0 f812 	bl	8003ccc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8013ca8:	4b0f      	ldr	r3, [pc, #60]	; (8013ce8 <HAL_HCD_MspInit+0xa0>)
 8013caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013cac:	4a0e      	ldr	r2, [pc, #56]	; (8013ce8 <HAL_HCD_MspInit+0xa0>)
 8013cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013cb2:	6353      	str	r3, [r2, #52]	; 0x34
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	60fb      	str	r3, [r7, #12]
 8013cb8:	4b0b      	ldr	r3, [pc, #44]	; (8013ce8 <HAL_HCD_MspInit+0xa0>)
 8013cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013cbc:	4a0a      	ldr	r2, [pc, #40]	; (8013ce8 <HAL_HCD_MspInit+0xa0>)
 8013cbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013cc2:	6453      	str	r3, [r2, #68]	; 0x44
 8013cc4:	4b08      	ldr	r3, [pc, #32]	; (8013ce8 <HAL_HCD_MspInit+0xa0>)
 8013cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013cc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013ccc:	60fb      	str	r3, [r7, #12]
 8013cce:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	2105      	movs	r1, #5
 8013cd4:	2043      	movs	r0, #67	; 0x43
 8013cd6:	f7ef f97b 	bl	8002fd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8013cda:	2043      	movs	r0, #67	; 0x43
 8013cdc:	f7ef f994 	bl	8003008 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013ce0:	bf00      	nop
 8013ce2:	3728      	adds	r7, #40	; 0x28
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}
 8013ce8:	40023800 	.word	0x40023800
 8013cec:	40020000 	.word	0x40020000

08013cf0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b082      	sub	sp, #8
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8013cfe:	4618      	mov	r0, r3
 8013d00:	f7f7 fcc9 	bl	800b696 <USBH_LL_IncTimer>
}
 8013d04:	bf00      	nop
 8013d06:	3708      	adds	r7, #8
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	bd80      	pop	{r7, pc}

08013d0c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8013d0c:	b580      	push	{r7, lr}
 8013d0e:	b082      	sub	sp, #8
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	f7f7 fd0d 	bl	800b73a <USBH_LL_Connect>
}
 8013d20:	bf00      	nop
 8013d22:	3708      	adds	r7, #8
 8013d24:	46bd      	mov	sp, r7
 8013d26:	bd80      	pop	{r7, pc}

08013d28 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b082      	sub	sp, #8
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8013d36:	4618      	mov	r0, r3
 8013d38:	f7f7 fd22 	bl	800b780 <USBH_LL_Disconnect>
}
 8013d3c:	bf00      	nop
 8013d3e:	3708      	adds	r7, #8
 8013d40:	46bd      	mov	sp, r7
 8013d42:	bd80      	pop	{r7, pc}

08013d44 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b082      	sub	sp, #8
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
 8013d4c:	460b      	mov	r3, r1
 8013d4e:	70fb      	strb	r3, [r7, #3]
 8013d50:	4613      	mov	r3, r2
 8013d52:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	f7f7 fd57 	bl	800b80e <USBH_LL_NotifyURBChange>
#endif
}
 8013d60:	bf00      	nop
 8013d62:	3708      	adds	r7, #8
 8013d64:	46bd      	mov	sp, r7
 8013d66:	bd80      	pop	{r7, pc}

08013d68 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b082      	sub	sp, #8
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8013d76:	4618      	mov	r0, r3
 8013d78:	f7f7 fcb7 	bl	800b6ea <USBH_LL_PortEnabled>
}
 8013d7c:	bf00      	nop
 8013d7e:	3708      	adds	r7, #8
 8013d80:	46bd      	mov	sp, r7
 8013d82:	bd80      	pop	{r7, pc}

08013d84 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8013d84:	b580      	push	{r7, lr}
 8013d86:	b082      	sub	sp, #8
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8013d92:	4618      	mov	r0, r3
 8013d94:	f7f7 fcc3 	bl	800b71e <USBH_LL_PortDisabled>
}
 8013d98:	bf00      	nop
 8013d9a:	3708      	adds	r7, #8
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	bd80      	pop	{r7, pc}

08013da0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8013da0:	b580      	push	{r7, lr}
 8013da2:	b082      	sub	sp, #8
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8013dae:	2b01      	cmp	r3, #1
 8013db0:	d12a      	bne.n	8013e08 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8013db2:	4a18      	ldr	r2, [pc, #96]	; (8013e14 <USBH_LL_Init+0x74>)
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	4a15      	ldr	r2, [pc, #84]	; (8013e14 <USBH_LL_Init+0x74>)
 8013dbe:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013dc2:	4b14      	ldr	r3, [pc, #80]	; (8013e14 <USBH_LL_Init+0x74>)
 8013dc4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8013dc8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8013dca:	4b12      	ldr	r3, [pc, #72]	; (8013e14 <USBH_LL_Init+0x74>)
 8013dcc:	2208      	movs	r2, #8
 8013dce:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8013dd0:	4b10      	ldr	r3, [pc, #64]	; (8013e14 <USBH_LL_Init+0x74>)
 8013dd2:	2201      	movs	r2, #1
 8013dd4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8013dd6:	4b0f      	ldr	r3, [pc, #60]	; (8013e14 <USBH_LL_Init+0x74>)
 8013dd8:	2200      	movs	r2, #0
 8013dda:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8013ddc:	4b0d      	ldr	r3, [pc, #52]	; (8013e14 <USBH_LL_Init+0x74>)
 8013dde:	2202      	movs	r2, #2
 8013de0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013de2:	4b0c      	ldr	r3, [pc, #48]	; (8013e14 <USBH_LL_Init+0x74>)
 8013de4:	2200      	movs	r2, #0
 8013de6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8013de8:	480a      	ldr	r0, [pc, #40]	; (8013e14 <USBH_LL_Init+0x74>)
 8013dea:	f7f0 f924 	bl	8004036 <HAL_HCD_Init>
 8013dee:	4603      	mov	r3, r0
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d001      	beq.n	8013df8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8013df4:	f7ee f82c 	bl	8001e50 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8013df8:	4806      	ldr	r0, [pc, #24]	; (8013e14 <USBH_LL_Init+0x74>)
 8013dfa:	f7f0 fd08 	bl	800480e <HAL_HCD_GetCurrentFrame>
 8013dfe:	4603      	mov	r3, r0
 8013e00:	4619      	mov	r1, r3
 8013e02:	6878      	ldr	r0, [r7, #4]
 8013e04:	f7f7 fc38 	bl	800b678 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8013e08:	2300      	movs	r3, #0
}
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	3708      	adds	r7, #8
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	bd80      	pop	{r7, pc}
 8013e12:	bf00      	nop
 8013e14:	2000bc48 	.word	0x2000bc48

08013e18 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8013e18:	b580      	push	{r7, lr}
 8013e1a:	b084      	sub	sp, #16
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013e20:	2300      	movs	r3, #0
 8013e22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013e24:	2300      	movs	r3, #0
 8013e26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013e2e:	4618      	mov	r0, r3
 8013e30:	f7f0 fc77 	bl	8004722 <HAL_HCD_Start>
 8013e34:	4603      	mov	r3, r0
 8013e36:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013e38:	7bfb      	ldrb	r3, [r7, #15]
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	f000 f95c 	bl	80140f8 <USBH_Get_USB_Status>
 8013e40:	4603      	mov	r3, r0
 8013e42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013e44:	7bbb      	ldrb	r3, [r7, #14]
}
 8013e46:	4618      	mov	r0, r3
 8013e48:	3710      	adds	r7, #16
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	bd80      	pop	{r7, pc}

08013e4e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8013e4e:	b580      	push	{r7, lr}
 8013e50:	b084      	sub	sp, #16
 8013e52:	af00      	add	r7, sp, #0
 8013e54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013e56:	2300      	movs	r3, #0
 8013e58:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013e64:	4618      	mov	r0, r3
 8013e66:	f7f0 fc7f 	bl	8004768 <HAL_HCD_Stop>
 8013e6a:	4603      	mov	r3, r0
 8013e6c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013e6e:	7bfb      	ldrb	r3, [r7, #15]
 8013e70:	4618      	mov	r0, r3
 8013e72:	f000 f941 	bl	80140f8 <USBH_Get_USB_Status>
 8013e76:	4603      	mov	r3, r0
 8013e78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013e7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	3710      	adds	r7, #16
 8013e80:	46bd      	mov	sp, r7
 8013e82:	bd80      	pop	{r7, pc}

08013e84 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b084      	sub	sp, #16
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8013e8c:	2301      	movs	r3, #1
 8013e8e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013e96:	4618      	mov	r0, r3
 8013e98:	f7f0 fcc7 	bl	800482a <HAL_HCD_GetCurrentSpeed>
 8013e9c:	4603      	mov	r3, r0
 8013e9e:	2b02      	cmp	r3, #2
 8013ea0:	d00c      	beq.n	8013ebc <USBH_LL_GetSpeed+0x38>
 8013ea2:	2b02      	cmp	r3, #2
 8013ea4:	d80d      	bhi.n	8013ec2 <USBH_LL_GetSpeed+0x3e>
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d002      	beq.n	8013eb0 <USBH_LL_GetSpeed+0x2c>
 8013eaa:	2b01      	cmp	r3, #1
 8013eac:	d003      	beq.n	8013eb6 <USBH_LL_GetSpeed+0x32>
 8013eae:	e008      	b.n	8013ec2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	73fb      	strb	r3, [r7, #15]
    break;
 8013eb4:	e008      	b.n	8013ec8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8013eb6:	2301      	movs	r3, #1
 8013eb8:	73fb      	strb	r3, [r7, #15]
    break;
 8013eba:	e005      	b.n	8013ec8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8013ebc:	2302      	movs	r3, #2
 8013ebe:	73fb      	strb	r3, [r7, #15]
    break;
 8013ec0:	e002      	b.n	8013ec8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8013ec2:	2301      	movs	r3, #1
 8013ec4:	73fb      	strb	r3, [r7, #15]
    break;
 8013ec6:	bf00      	nop
  }
  return  speed;
 8013ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8013eca:	4618      	mov	r0, r3
 8013ecc:	3710      	adds	r7, #16
 8013ece:	46bd      	mov	sp, r7
 8013ed0:	bd80      	pop	{r7, pc}

08013ed2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8013ed2:	b580      	push	{r7, lr}
 8013ed4:	b084      	sub	sp, #16
 8013ed6:	af00      	add	r7, sp, #0
 8013ed8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013eda:	2300      	movs	r3, #0
 8013edc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013ede:	2300      	movs	r3, #0
 8013ee0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013ee8:	4618      	mov	r0, r3
 8013eea:	f7f0 fc5a 	bl	80047a2 <HAL_HCD_ResetPort>
 8013eee:	4603      	mov	r3, r0
 8013ef0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013ef2:	7bfb      	ldrb	r3, [r7, #15]
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	f000 f8ff 	bl	80140f8 <USBH_Get_USB_Status>
 8013efa:	4603      	mov	r3, r0
 8013efc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013efe:	7bbb      	ldrb	r3, [r7, #14]
}
 8013f00:	4618      	mov	r0, r3
 8013f02:	3710      	adds	r7, #16
 8013f04:	46bd      	mov	sp, r7
 8013f06:	bd80      	pop	{r7, pc}

08013f08 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b082      	sub	sp, #8
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
 8013f10:	460b      	mov	r3, r1
 8013f12:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013f1a:	78fa      	ldrb	r2, [r7, #3]
 8013f1c:	4611      	mov	r1, r2
 8013f1e:	4618      	mov	r0, r3
 8013f20:	f7f0 fc61 	bl	80047e6 <HAL_HCD_HC_GetXferCount>
 8013f24:	4603      	mov	r3, r0
}
 8013f26:	4618      	mov	r0, r3
 8013f28:	3708      	adds	r7, #8
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	bd80      	pop	{r7, pc}

08013f2e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8013f2e:	b590      	push	{r4, r7, lr}
 8013f30:	b089      	sub	sp, #36	; 0x24
 8013f32:	af04      	add	r7, sp, #16
 8013f34:	6078      	str	r0, [r7, #4]
 8013f36:	4608      	mov	r0, r1
 8013f38:	4611      	mov	r1, r2
 8013f3a:	461a      	mov	r2, r3
 8013f3c:	4603      	mov	r3, r0
 8013f3e:	70fb      	strb	r3, [r7, #3]
 8013f40:	460b      	mov	r3, r1
 8013f42:	70bb      	strb	r3, [r7, #2]
 8013f44:	4613      	mov	r3, r2
 8013f46:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013f48:	2300      	movs	r3, #0
 8013f4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8013f56:	787c      	ldrb	r4, [r7, #1]
 8013f58:	78ba      	ldrb	r2, [r7, #2]
 8013f5a:	78f9      	ldrb	r1, [r7, #3]
 8013f5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013f5e:	9302      	str	r3, [sp, #8]
 8013f60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013f64:	9301      	str	r3, [sp, #4]
 8013f66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013f6a:	9300      	str	r3, [sp, #0]
 8013f6c:	4623      	mov	r3, r4
 8013f6e:	f7f0 f8c4 	bl	80040fa <HAL_HCD_HC_Init>
 8013f72:	4603      	mov	r3, r0
 8013f74:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8013f76:	7bfb      	ldrb	r3, [r7, #15]
 8013f78:	4618      	mov	r0, r3
 8013f7a:	f000 f8bd 	bl	80140f8 <USBH_Get_USB_Status>
 8013f7e:	4603      	mov	r3, r0
 8013f80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013f82:	7bbb      	ldrb	r3, [r7, #14]
}
 8013f84:	4618      	mov	r0, r3
 8013f86:	3714      	adds	r7, #20
 8013f88:	46bd      	mov	sp, r7
 8013f8a:	bd90      	pop	{r4, r7, pc}

08013f8c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013f8c:	b580      	push	{r7, lr}
 8013f8e:	b084      	sub	sp, #16
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	6078      	str	r0, [r7, #4]
 8013f94:	460b      	mov	r3, r1
 8013f96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013f98:	2300      	movs	r3, #0
 8013f9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013f9c:	2300      	movs	r3, #0
 8013f9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013fa6:	78fa      	ldrb	r2, [r7, #3]
 8013fa8:	4611      	mov	r1, r2
 8013faa:	4618      	mov	r0, r3
 8013fac:	f7f0 f934 	bl	8004218 <HAL_HCD_HC_Halt>
 8013fb0:	4603      	mov	r3, r0
 8013fb2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013fb4:	7bfb      	ldrb	r3, [r7, #15]
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	f000 f89e 	bl	80140f8 <USBH_Get_USB_Status>
 8013fbc:	4603      	mov	r3, r0
 8013fbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013fc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	3710      	adds	r7, #16
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	bd80      	pop	{r7, pc}

08013fca <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8013fca:	b590      	push	{r4, r7, lr}
 8013fcc:	b089      	sub	sp, #36	; 0x24
 8013fce:	af04      	add	r7, sp, #16
 8013fd0:	6078      	str	r0, [r7, #4]
 8013fd2:	4608      	mov	r0, r1
 8013fd4:	4611      	mov	r1, r2
 8013fd6:	461a      	mov	r2, r3
 8013fd8:	4603      	mov	r3, r0
 8013fda:	70fb      	strb	r3, [r7, #3]
 8013fdc:	460b      	mov	r3, r1
 8013fde:	70bb      	strb	r3, [r7, #2]
 8013fe0:	4613      	mov	r3, r2
 8013fe2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013fe8:	2300      	movs	r3, #0
 8013fea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8013ff2:	787c      	ldrb	r4, [r7, #1]
 8013ff4:	78ba      	ldrb	r2, [r7, #2]
 8013ff6:	78f9      	ldrb	r1, [r7, #3]
 8013ff8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013ffc:	9303      	str	r3, [sp, #12]
 8013ffe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8014000:	9302      	str	r3, [sp, #8]
 8014002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014004:	9301      	str	r3, [sp, #4]
 8014006:	f897 3020 	ldrb.w	r3, [r7, #32]
 801400a:	9300      	str	r3, [sp, #0]
 801400c:	4623      	mov	r3, r4
 801400e:	f7f0 f927 	bl	8004260 <HAL_HCD_HC_SubmitRequest>
 8014012:	4603      	mov	r3, r0
 8014014:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8014016:	7bfb      	ldrb	r3, [r7, #15]
 8014018:	4618      	mov	r0, r3
 801401a:	f000 f86d 	bl	80140f8 <USBH_Get_USB_Status>
 801401e:	4603      	mov	r3, r0
 8014020:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014022:	7bbb      	ldrb	r3, [r7, #14]
}
 8014024:	4618      	mov	r0, r3
 8014026:	3714      	adds	r7, #20
 8014028:	46bd      	mov	sp, r7
 801402a:	bd90      	pop	{r4, r7, pc}

0801402c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801402c:	b580      	push	{r7, lr}
 801402e:	b082      	sub	sp, #8
 8014030:	af00      	add	r7, sp, #0
 8014032:	6078      	str	r0, [r7, #4]
 8014034:	460b      	mov	r3, r1
 8014036:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801403e:	78fa      	ldrb	r2, [r7, #3]
 8014040:	4611      	mov	r1, r2
 8014042:	4618      	mov	r0, r3
 8014044:	f7f0 fbbb 	bl	80047be <HAL_HCD_HC_GetURBState>
 8014048:	4603      	mov	r3, r0
}
 801404a:	4618      	mov	r0, r3
 801404c:	3708      	adds	r7, #8
 801404e:	46bd      	mov	sp, r7
 8014050:	bd80      	pop	{r7, pc}

08014052 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8014052:	b580      	push	{r7, lr}
 8014054:	b082      	sub	sp, #8
 8014056:	af00      	add	r7, sp, #0
 8014058:	6078      	str	r0, [r7, #4]
 801405a:	460b      	mov	r3, r1
 801405c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8014064:	2b01      	cmp	r3, #1
 8014066:	d103      	bne.n	8014070 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8014068:	78fb      	ldrb	r3, [r7, #3]
 801406a:	4618      	mov	r0, r3
 801406c:	f000 f870 	bl	8014150 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8014070:	20c8      	movs	r0, #200	; 0xc8
 8014072:	f7ee fed1 	bl	8002e18 <HAL_Delay>
  return USBH_OK;
 8014076:	2300      	movs	r3, #0
}
 8014078:	4618      	mov	r0, r3
 801407a:	3708      	adds	r7, #8
 801407c:	46bd      	mov	sp, r7
 801407e:	bd80      	pop	{r7, pc}

08014080 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8014080:	b480      	push	{r7}
 8014082:	b085      	sub	sp, #20
 8014084:	af00      	add	r7, sp, #0
 8014086:	6078      	str	r0, [r7, #4]
 8014088:	460b      	mov	r3, r1
 801408a:	70fb      	strb	r3, [r7, #3]
 801408c:	4613      	mov	r3, r2
 801408e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014096:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8014098:	78fb      	ldrb	r3, [r7, #3]
 801409a:	68fa      	ldr	r2, [r7, #12]
 801409c:	212c      	movs	r1, #44	; 0x2c
 801409e:	fb01 f303 	mul.w	r3, r1, r3
 80140a2:	4413      	add	r3, r2
 80140a4:	333b      	adds	r3, #59	; 0x3b
 80140a6:	781b      	ldrb	r3, [r3, #0]
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d009      	beq.n	80140c0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80140ac:	78fb      	ldrb	r3, [r7, #3]
 80140ae:	68fa      	ldr	r2, [r7, #12]
 80140b0:	212c      	movs	r1, #44	; 0x2c
 80140b2:	fb01 f303 	mul.w	r3, r1, r3
 80140b6:	4413      	add	r3, r2
 80140b8:	3354      	adds	r3, #84	; 0x54
 80140ba:	78ba      	ldrb	r2, [r7, #2]
 80140bc:	701a      	strb	r2, [r3, #0]
 80140be:	e008      	b.n	80140d2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80140c0:	78fb      	ldrb	r3, [r7, #3]
 80140c2:	68fa      	ldr	r2, [r7, #12]
 80140c4:	212c      	movs	r1, #44	; 0x2c
 80140c6:	fb01 f303 	mul.w	r3, r1, r3
 80140ca:	4413      	add	r3, r2
 80140cc:	3355      	adds	r3, #85	; 0x55
 80140ce:	78ba      	ldrb	r2, [r7, #2]
 80140d0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80140d2:	2300      	movs	r3, #0
}
 80140d4:	4618      	mov	r0, r3
 80140d6:	3714      	adds	r7, #20
 80140d8:	46bd      	mov	sp, r7
 80140da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140de:	4770      	bx	lr

080140e0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80140e0:	b580      	push	{r7, lr}
 80140e2:	b082      	sub	sp, #8
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80140e8:	6878      	ldr	r0, [r7, #4]
 80140ea:	f7ee fe95 	bl	8002e18 <HAL_Delay>
}
 80140ee:	bf00      	nop
 80140f0:	3708      	adds	r7, #8
 80140f2:	46bd      	mov	sp, r7
 80140f4:	bd80      	pop	{r7, pc}
	...

080140f8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80140f8:	b480      	push	{r7}
 80140fa:	b085      	sub	sp, #20
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	4603      	mov	r3, r0
 8014100:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014102:	2300      	movs	r3, #0
 8014104:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014106:	79fb      	ldrb	r3, [r7, #7]
 8014108:	2b03      	cmp	r3, #3
 801410a:	d817      	bhi.n	801413c <USBH_Get_USB_Status+0x44>
 801410c:	a201      	add	r2, pc, #4	; (adr r2, 8014114 <USBH_Get_USB_Status+0x1c>)
 801410e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014112:	bf00      	nop
 8014114:	08014125 	.word	0x08014125
 8014118:	0801412b 	.word	0x0801412b
 801411c:	08014131 	.word	0x08014131
 8014120:	08014137 	.word	0x08014137
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8014124:	2300      	movs	r3, #0
 8014126:	73fb      	strb	r3, [r7, #15]
    break;
 8014128:	e00b      	b.n	8014142 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801412a:	2302      	movs	r3, #2
 801412c:	73fb      	strb	r3, [r7, #15]
    break;
 801412e:	e008      	b.n	8014142 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8014130:	2301      	movs	r3, #1
 8014132:	73fb      	strb	r3, [r7, #15]
    break;
 8014134:	e005      	b.n	8014142 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8014136:	2302      	movs	r3, #2
 8014138:	73fb      	strb	r3, [r7, #15]
    break;
 801413a:	e002      	b.n	8014142 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801413c:	2302      	movs	r3, #2
 801413e:	73fb      	strb	r3, [r7, #15]
    break;
 8014140:	bf00      	nop
  }
  return usb_status;
 8014142:	7bfb      	ldrb	r3, [r7, #15]
}
 8014144:	4618      	mov	r0, r3
 8014146:	3714      	adds	r7, #20
 8014148:	46bd      	mov	sp, r7
 801414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801414e:	4770      	bx	lr

08014150 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b084      	sub	sp, #16
 8014154:	af00      	add	r7, sp, #0
 8014156:	4603      	mov	r3, r0
 8014158:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801415a:	79fb      	ldrb	r3, [r7, #7]
 801415c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801415e:	79fb      	ldrb	r3, [r7, #7]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d102      	bne.n	801416a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8014164:	2301      	movs	r3, #1
 8014166:	73fb      	strb	r3, [r7, #15]
 8014168:	e001      	b.n	801416e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801416a:	2300      	movs	r3, #0
 801416c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,(GPIO_PinState)data);
 801416e:	7bfb      	ldrb	r3, [r7, #15]
 8014170:	461a      	mov	r2, r3
 8014172:	2101      	movs	r1, #1
 8014174:	4803      	ldr	r0, [pc, #12]	; (8014184 <MX_DriverVbusFS+0x34>)
 8014176:	f7ef ff45 	bl	8004004 <HAL_GPIO_WritePin>
}
 801417a:	bf00      	nop
 801417c:	3710      	adds	r7, #16
 801417e:	46bd      	mov	sp, r7
 8014180:	bd80      	pop	{r7, pc}
 8014182:	bf00      	nop
 8014184:	40020400 	.word	0x40020400

08014188 <atol>:
 8014188:	220a      	movs	r2, #10
 801418a:	2100      	movs	r1, #0
 801418c:	f000 be5e 	b.w	8014e4c <strtol>

08014190 <__errno>:
 8014190:	4b01      	ldr	r3, [pc, #4]	; (8014198 <__errno+0x8>)
 8014192:	6818      	ldr	r0, [r3, #0]
 8014194:	4770      	bx	lr
 8014196:	bf00      	nop
 8014198:	200002b4 	.word	0x200002b4

0801419c <std>:
 801419c:	2300      	movs	r3, #0
 801419e:	b510      	push	{r4, lr}
 80141a0:	4604      	mov	r4, r0
 80141a2:	e9c0 3300 	strd	r3, r3, [r0]
 80141a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80141aa:	6083      	str	r3, [r0, #8]
 80141ac:	8181      	strh	r1, [r0, #12]
 80141ae:	6643      	str	r3, [r0, #100]	; 0x64
 80141b0:	81c2      	strh	r2, [r0, #14]
 80141b2:	6183      	str	r3, [r0, #24]
 80141b4:	4619      	mov	r1, r3
 80141b6:	2208      	movs	r2, #8
 80141b8:	305c      	adds	r0, #92	; 0x5c
 80141ba:	f000 f92d 	bl	8014418 <memset>
 80141be:	4b05      	ldr	r3, [pc, #20]	; (80141d4 <std+0x38>)
 80141c0:	6263      	str	r3, [r4, #36]	; 0x24
 80141c2:	4b05      	ldr	r3, [pc, #20]	; (80141d8 <std+0x3c>)
 80141c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80141c6:	4b05      	ldr	r3, [pc, #20]	; (80141dc <std+0x40>)
 80141c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80141ca:	4b05      	ldr	r3, [pc, #20]	; (80141e0 <std+0x44>)
 80141cc:	6224      	str	r4, [r4, #32]
 80141ce:	6323      	str	r3, [r4, #48]	; 0x30
 80141d0:	bd10      	pop	{r4, pc}
 80141d2:	bf00      	nop
 80141d4:	08014c01 	.word	0x08014c01
 80141d8:	08014c27 	.word	0x08014c27
 80141dc:	08014c5f 	.word	0x08014c5f
 80141e0:	08014c83 	.word	0x08014c83

080141e4 <_cleanup_r>:
 80141e4:	4901      	ldr	r1, [pc, #4]	; (80141ec <_cleanup_r+0x8>)
 80141e6:	f000 b8af 	b.w	8014348 <_fwalk_reent>
 80141ea:	bf00      	nop
 80141ec:	0801548d 	.word	0x0801548d

080141f0 <__sfmoreglue>:
 80141f0:	b570      	push	{r4, r5, r6, lr}
 80141f2:	2268      	movs	r2, #104	; 0x68
 80141f4:	1e4d      	subs	r5, r1, #1
 80141f6:	4355      	muls	r5, r2
 80141f8:	460e      	mov	r6, r1
 80141fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80141fe:	f000 fbf1 	bl	80149e4 <_malloc_r>
 8014202:	4604      	mov	r4, r0
 8014204:	b140      	cbz	r0, 8014218 <__sfmoreglue+0x28>
 8014206:	2100      	movs	r1, #0
 8014208:	e9c0 1600 	strd	r1, r6, [r0]
 801420c:	300c      	adds	r0, #12
 801420e:	60a0      	str	r0, [r4, #8]
 8014210:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014214:	f000 f900 	bl	8014418 <memset>
 8014218:	4620      	mov	r0, r4
 801421a:	bd70      	pop	{r4, r5, r6, pc}

0801421c <__sfp_lock_acquire>:
 801421c:	4801      	ldr	r0, [pc, #4]	; (8014224 <__sfp_lock_acquire+0x8>)
 801421e:	f000 b8d9 	b.w	80143d4 <__retarget_lock_acquire_recursive>
 8014222:	bf00      	nop
 8014224:	2000bf4e 	.word	0x2000bf4e

08014228 <__sfp_lock_release>:
 8014228:	4801      	ldr	r0, [pc, #4]	; (8014230 <__sfp_lock_release+0x8>)
 801422a:	f000 b8d5 	b.w	80143d8 <__retarget_lock_release_recursive>
 801422e:	bf00      	nop
 8014230:	2000bf4e 	.word	0x2000bf4e

08014234 <__sinit_lock_acquire>:
 8014234:	4801      	ldr	r0, [pc, #4]	; (801423c <__sinit_lock_acquire+0x8>)
 8014236:	f000 b8cd 	b.w	80143d4 <__retarget_lock_acquire_recursive>
 801423a:	bf00      	nop
 801423c:	2000bf4f 	.word	0x2000bf4f

08014240 <__sinit_lock_release>:
 8014240:	4801      	ldr	r0, [pc, #4]	; (8014248 <__sinit_lock_release+0x8>)
 8014242:	f000 b8c9 	b.w	80143d8 <__retarget_lock_release_recursive>
 8014246:	bf00      	nop
 8014248:	2000bf4f 	.word	0x2000bf4f

0801424c <__sinit>:
 801424c:	b510      	push	{r4, lr}
 801424e:	4604      	mov	r4, r0
 8014250:	f7ff fff0 	bl	8014234 <__sinit_lock_acquire>
 8014254:	69a3      	ldr	r3, [r4, #24]
 8014256:	b11b      	cbz	r3, 8014260 <__sinit+0x14>
 8014258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801425c:	f7ff bff0 	b.w	8014240 <__sinit_lock_release>
 8014260:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014264:	6523      	str	r3, [r4, #80]	; 0x50
 8014266:	4b13      	ldr	r3, [pc, #76]	; (80142b4 <__sinit+0x68>)
 8014268:	4a13      	ldr	r2, [pc, #76]	; (80142b8 <__sinit+0x6c>)
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	62a2      	str	r2, [r4, #40]	; 0x28
 801426e:	42a3      	cmp	r3, r4
 8014270:	bf04      	itt	eq
 8014272:	2301      	moveq	r3, #1
 8014274:	61a3      	streq	r3, [r4, #24]
 8014276:	4620      	mov	r0, r4
 8014278:	f000 f820 	bl	80142bc <__sfp>
 801427c:	6060      	str	r0, [r4, #4]
 801427e:	4620      	mov	r0, r4
 8014280:	f000 f81c 	bl	80142bc <__sfp>
 8014284:	60a0      	str	r0, [r4, #8]
 8014286:	4620      	mov	r0, r4
 8014288:	f000 f818 	bl	80142bc <__sfp>
 801428c:	2200      	movs	r2, #0
 801428e:	60e0      	str	r0, [r4, #12]
 8014290:	2104      	movs	r1, #4
 8014292:	6860      	ldr	r0, [r4, #4]
 8014294:	f7ff ff82 	bl	801419c <std>
 8014298:	68a0      	ldr	r0, [r4, #8]
 801429a:	2201      	movs	r2, #1
 801429c:	2109      	movs	r1, #9
 801429e:	f7ff ff7d 	bl	801419c <std>
 80142a2:	68e0      	ldr	r0, [r4, #12]
 80142a4:	2202      	movs	r2, #2
 80142a6:	2112      	movs	r1, #18
 80142a8:	f7ff ff78 	bl	801419c <std>
 80142ac:	2301      	movs	r3, #1
 80142ae:	61a3      	str	r3, [r4, #24]
 80142b0:	e7d2      	b.n	8014258 <__sinit+0xc>
 80142b2:	bf00      	nop
 80142b4:	08017428 	.word	0x08017428
 80142b8:	080141e5 	.word	0x080141e5

080142bc <__sfp>:
 80142bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142be:	4607      	mov	r7, r0
 80142c0:	f7ff ffac 	bl	801421c <__sfp_lock_acquire>
 80142c4:	4b1e      	ldr	r3, [pc, #120]	; (8014340 <__sfp+0x84>)
 80142c6:	681e      	ldr	r6, [r3, #0]
 80142c8:	69b3      	ldr	r3, [r6, #24]
 80142ca:	b913      	cbnz	r3, 80142d2 <__sfp+0x16>
 80142cc:	4630      	mov	r0, r6
 80142ce:	f7ff ffbd 	bl	801424c <__sinit>
 80142d2:	3648      	adds	r6, #72	; 0x48
 80142d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80142d8:	3b01      	subs	r3, #1
 80142da:	d503      	bpl.n	80142e4 <__sfp+0x28>
 80142dc:	6833      	ldr	r3, [r6, #0]
 80142de:	b30b      	cbz	r3, 8014324 <__sfp+0x68>
 80142e0:	6836      	ldr	r6, [r6, #0]
 80142e2:	e7f7      	b.n	80142d4 <__sfp+0x18>
 80142e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80142e8:	b9d5      	cbnz	r5, 8014320 <__sfp+0x64>
 80142ea:	4b16      	ldr	r3, [pc, #88]	; (8014344 <__sfp+0x88>)
 80142ec:	60e3      	str	r3, [r4, #12]
 80142ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80142f2:	6665      	str	r5, [r4, #100]	; 0x64
 80142f4:	f000 f86c 	bl	80143d0 <__retarget_lock_init_recursive>
 80142f8:	f7ff ff96 	bl	8014228 <__sfp_lock_release>
 80142fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014300:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014304:	6025      	str	r5, [r4, #0]
 8014306:	61a5      	str	r5, [r4, #24]
 8014308:	2208      	movs	r2, #8
 801430a:	4629      	mov	r1, r5
 801430c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014310:	f000 f882 	bl	8014418 <memset>
 8014314:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014318:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801431c:	4620      	mov	r0, r4
 801431e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014320:	3468      	adds	r4, #104	; 0x68
 8014322:	e7d9      	b.n	80142d8 <__sfp+0x1c>
 8014324:	2104      	movs	r1, #4
 8014326:	4638      	mov	r0, r7
 8014328:	f7ff ff62 	bl	80141f0 <__sfmoreglue>
 801432c:	4604      	mov	r4, r0
 801432e:	6030      	str	r0, [r6, #0]
 8014330:	2800      	cmp	r0, #0
 8014332:	d1d5      	bne.n	80142e0 <__sfp+0x24>
 8014334:	f7ff ff78 	bl	8014228 <__sfp_lock_release>
 8014338:	230c      	movs	r3, #12
 801433a:	603b      	str	r3, [r7, #0]
 801433c:	e7ee      	b.n	801431c <__sfp+0x60>
 801433e:	bf00      	nop
 8014340:	08017428 	.word	0x08017428
 8014344:	ffff0001 	.word	0xffff0001

08014348 <_fwalk_reent>:
 8014348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801434c:	4606      	mov	r6, r0
 801434e:	4688      	mov	r8, r1
 8014350:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014354:	2700      	movs	r7, #0
 8014356:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801435a:	f1b9 0901 	subs.w	r9, r9, #1
 801435e:	d505      	bpl.n	801436c <_fwalk_reent+0x24>
 8014360:	6824      	ldr	r4, [r4, #0]
 8014362:	2c00      	cmp	r4, #0
 8014364:	d1f7      	bne.n	8014356 <_fwalk_reent+0xe>
 8014366:	4638      	mov	r0, r7
 8014368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801436c:	89ab      	ldrh	r3, [r5, #12]
 801436e:	2b01      	cmp	r3, #1
 8014370:	d907      	bls.n	8014382 <_fwalk_reent+0x3a>
 8014372:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014376:	3301      	adds	r3, #1
 8014378:	d003      	beq.n	8014382 <_fwalk_reent+0x3a>
 801437a:	4629      	mov	r1, r5
 801437c:	4630      	mov	r0, r6
 801437e:	47c0      	blx	r8
 8014380:	4307      	orrs	r7, r0
 8014382:	3568      	adds	r5, #104	; 0x68
 8014384:	e7e9      	b.n	801435a <_fwalk_reent+0x12>
	...

08014388 <__libc_init_array>:
 8014388:	b570      	push	{r4, r5, r6, lr}
 801438a:	4d0d      	ldr	r5, [pc, #52]	; (80143c0 <__libc_init_array+0x38>)
 801438c:	4c0d      	ldr	r4, [pc, #52]	; (80143c4 <__libc_init_array+0x3c>)
 801438e:	1b64      	subs	r4, r4, r5
 8014390:	10a4      	asrs	r4, r4, #2
 8014392:	2600      	movs	r6, #0
 8014394:	42a6      	cmp	r6, r4
 8014396:	d109      	bne.n	80143ac <__libc_init_array+0x24>
 8014398:	4d0b      	ldr	r5, [pc, #44]	; (80143c8 <__libc_init_array+0x40>)
 801439a:	4c0c      	ldr	r4, [pc, #48]	; (80143cc <__libc_init_array+0x44>)
 801439c:	f002 fbd4 	bl	8016b48 <_init>
 80143a0:	1b64      	subs	r4, r4, r5
 80143a2:	10a4      	asrs	r4, r4, #2
 80143a4:	2600      	movs	r6, #0
 80143a6:	42a6      	cmp	r6, r4
 80143a8:	d105      	bne.n	80143b6 <__libc_init_array+0x2e>
 80143aa:	bd70      	pop	{r4, r5, r6, pc}
 80143ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80143b0:	4798      	blx	r3
 80143b2:	3601      	adds	r6, #1
 80143b4:	e7ee      	b.n	8014394 <__libc_init_array+0xc>
 80143b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80143ba:	4798      	blx	r3
 80143bc:	3601      	adds	r6, #1
 80143be:	e7f2      	b.n	80143a6 <__libc_init_array+0x1e>
 80143c0:	08017734 	.word	0x08017734
 80143c4:	08017734 	.word	0x08017734
 80143c8:	08017734 	.word	0x08017734
 80143cc:	08017738 	.word	0x08017738

080143d0 <__retarget_lock_init_recursive>:
 80143d0:	4770      	bx	lr

080143d2 <__retarget_lock_acquire>:
 80143d2:	4770      	bx	lr

080143d4 <__retarget_lock_acquire_recursive>:
 80143d4:	4770      	bx	lr

080143d6 <__retarget_lock_release>:
 80143d6:	4770      	bx	lr

080143d8 <__retarget_lock_release_recursive>:
 80143d8:	4770      	bx	lr
	...

080143dc <malloc>:
 80143dc:	4b02      	ldr	r3, [pc, #8]	; (80143e8 <malloc+0xc>)
 80143de:	4601      	mov	r1, r0
 80143e0:	6818      	ldr	r0, [r3, #0]
 80143e2:	f000 baff 	b.w	80149e4 <_malloc_r>
 80143e6:	bf00      	nop
 80143e8:	200002b4 	.word	0x200002b4

080143ec <free>:
 80143ec:	4b02      	ldr	r3, [pc, #8]	; (80143f8 <free+0xc>)
 80143ee:	4601      	mov	r1, r0
 80143f0:	6818      	ldr	r0, [r3, #0]
 80143f2:	f000 ba8b 	b.w	801490c <_free_r>
 80143f6:	bf00      	nop
 80143f8:	200002b4 	.word	0x200002b4

080143fc <memcpy>:
 80143fc:	440a      	add	r2, r1
 80143fe:	4291      	cmp	r1, r2
 8014400:	f100 33ff 	add.w	r3, r0, #4294967295
 8014404:	d100      	bne.n	8014408 <memcpy+0xc>
 8014406:	4770      	bx	lr
 8014408:	b510      	push	{r4, lr}
 801440a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801440e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014412:	4291      	cmp	r1, r2
 8014414:	d1f9      	bne.n	801440a <memcpy+0xe>
 8014416:	bd10      	pop	{r4, pc}

08014418 <memset>:
 8014418:	4402      	add	r2, r0
 801441a:	4603      	mov	r3, r0
 801441c:	4293      	cmp	r3, r2
 801441e:	d100      	bne.n	8014422 <memset+0xa>
 8014420:	4770      	bx	lr
 8014422:	f803 1b01 	strb.w	r1, [r3], #1
 8014426:	e7f9      	b.n	801441c <memset+0x4>

08014428 <validate_structure>:
 8014428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801442a:	6801      	ldr	r1, [r0, #0]
 801442c:	293b      	cmp	r1, #59	; 0x3b
 801442e:	4604      	mov	r4, r0
 8014430:	d911      	bls.n	8014456 <validate_structure+0x2e>
 8014432:	223c      	movs	r2, #60	; 0x3c
 8014434:	4668      	mov	r0, sp
 8014436:	f000 ff8f 	bl	8015358 <div>
 801443a:	9a01      	ldr	r2, [sp, #4]
 801443c:	6863      	ldr	r3, [r4, #4]
 801443e:	9900      	ldr	r1, [sp, #0]
 8014440:	2a00      	cmp	r2, #0
 8014442:	440b      	add	r3, r1
 8014444:	6063      	str	r3, [r4, #4]
 8014446:	bfbb      	ittet	lt
 8014448:	323c      	addlt	r2, #60	; 0x3c
 801444a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801444e:	6022      	strge	r2, [r4, #0]
 8014450:	6022      	strlt	r2, [r4, #0]
 8014452:	bfb8      	it	lt
 8014454:	6063      	strlt	r3, [r4, #4]
 8014456:	6861      	ldr	r1, [r4, #4]
 8014458:	293b      	cmp	r1, #59	; 0x3b
 801445a:	d911      	bls.n	8014480 <validate_structure+0x58>
 801445c:	223c      	movs	r2, #60	; 0x3c
 801445e:	4668      	mov	r0, sp
 8014460:	f000 ff7a 	bl	8015358 <div>
 8014464:	9a01      	ldr	r2, [sp, #4]
 8014466:	68a3      	ldr	r3, [r4, #8]
 8014468:	9900      	ldr	r1, [sp, #0]
 801446a:	2a00      	cmp	r2, #0
 801446c:	440b      	add	r3, r1
 801446e:	60a3      	str	r3, [r4, #8]
 8014470:	bfbb      	ittet	lt
 8014472:	323c      	addlt	r2, #60	; 0x3c
 8014474:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8014478:	6062      	strge	r2, [r4, #4]
 801447a:	6062      	strlt	r2, [r4, #4]
 801447c:	bfb8      	it	lt
 801447e:	60a3      	strlt	r3, [r4, #8]
 8014480:	68a1      	ldr	r1, [r4, #8]
 8014482:	2917      	cmp	r1, #23
 8014484:	d911      	bls.n	80144aa <validate_structure+0x82>
 8014486:	2218      	movs	r2, #24
 8014488:	4668      	mov	r0, sp
 801448a:	f000 ff65 	bl	8015358 <div>
 801448e:	9a01      	ldr	r2, [sp, #4]
 8014490:	68e3      	ldr	r3, [r4, #12]
 8014492:	9900      	ldr	r1, [sp, #0]
 8014494:	2a00      	cmp	r2, #0
 8014496:	440b      	add	r3, r1
 8014498:	60e3      	str	r3, [r4, #12]
 801449a:	bfbb      	ittet	lt
 801449c:	3218      	addlt	r2, #24
 801449e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80144a2:	60a2      	strge	r2, [r4, #8]
 80144a4:	60a2      	strlt	r2, [r4, #8]
 80144a6:	bfb8      	it	lt
 80144a8:	60e3      	strlt	r3, [r4, #12]
 80144aa:	6921      	ldr	r1, [r4, #16]
 80144ac:	290b      	cmp	r1, #11
 80144ae:	d911      	bls.n	80144d4 <validate_structure+0xac>
 80144b0:	220c      	movs	r2, #12
 80144b2:	4668      	mov	r0, sp
 80144b4:	f000 ff50 	bl	8015358 <div>
 80144b8:	9a01      	ldr	r2, [sp, #4]
 80144ba:	6963      	ldr	r3, [r4, #20]
 80144bc:	9900      	ldr	r1, [sp, #0]
 80144be:	2a00      	cmp	r2, #0
 80144c0:	440b      	add	r3, r1
 80144c2:	6163      	str	r3, [r4, #20]
 80144c4:	bfbb      	ittet	lt
 80144c6:	320c      	addlt	r2, #12
 80144c8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80144cc:	6122      	strge	r2, [r4, #16]
 80144ce:	6122      	strlt	r2, [r4, #16]
 80144d0:	bfb8      	it	lt
 80144d2:	6163      	strlt	r3, [r4, #20]
 80144d4:	6963      	ldr	r3, [r4, #20]
 80144d6:	0798      	lsls	r0, r3, #30
 80144d8:	d120      	bne.n	801451c <validate_structure+0xf4>
 80144da:	2164      	movs	r1, #100	; 0x64
 80144dc:	fb93 f2f1 	sdiv	r2, r3, r1
 80144e0:	fb01 3212 	mls	r2, r1, r2, r3
 80144e4:	b9e2      	cbnz	r2, 8014520 <validate_structure+0xf8>
 80144e6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80144ea:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80144ee:	fb93 f1f2 	sdiv	r1, r3, r2
 80144f2:	fb02 3311 	mls	r3, r2, r1, r3
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	bf14      	ite	ne
 80144fa:	231c      	movne	r3, #28
 80144fc:	231d      	moveq	r3, #29
 80144fe:	68e2      	ldr	r2, [r4, #12]
 8014500:	2a00      	cmp	r2, #0
 8014502:	dc0f      	bgt.n	8014524 <validate_structure+0xfc>
 8014504:	4f33      	ldr	r7, [pc, #204]	; (80145d4 <validate_structure+0x1ac>)
 8014506:	260b      	movs	r6, #11
 8014508:	2064      	movs	r0, #100	; 0x64
 801450a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 801450e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8014512:	f1bc 0f00 	cmp.w	ip, #0
 8014516:	dd31      	ble.n	801457c <validate_structure+0x154>
 8014518:	b003      	add	sp, #12
 801451a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801451c:	231c      	movs	r3, #28
 801451e:	e7ee      	b.n	80144fe <validate_structure+0xd6>
 8014520:	231d      	movs	r3, #29
 8014522:	e7ec      	b.n	80144fe <validate_structure+0xd6>
 8014524:	4e2b      	ldr	r6, [pc, #172]	; (80145d4 <validate_structure+0x1ac>)
 8014526:	2700      	movs	r7, #0
 8014528:	2064      	movs	r0, #100	; 0x64
 801452a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 801452e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8014532:	2a01      	cmp	r2, #1
 8014534:	bf14      	ite	ne
 8014536:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 801453a:	469c      	moveq	ip, r3
 801453c:	4561      	cmp	r1, ip
 801453e:	ddeb      	ble.n	8014518 <validate_structure+0xf0>
 8014540:	3201      	adds	r2, #1
 8014542:	eba1 010c 	sub.w	r1, r1, ip
 8014546:	2a0c      	cmp	r2, #12
 8014548:	60e1      	str	r1, [r4, #12]
 801454a:	6122      	str	r2, [r4, #16]
 801454c:	d1ef      	bne.n	801452e <validate_structure+0x106>
 801454e:	6963      	ldr	r3, [r4, #20]
 8014550:	1c5a      	adds	r2, r3, #1
 8014552:	0791      	lsls	r1, r2, #30
 8014554:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8014558:	d137      	bne.n	80145ca <validate_structure+0x1a2>
 801455a:	fb92 f1f0 	sdiv	r1, r2, r0
 801455e:	fb00 2211 	mls	r2, r0, r1, r2
 8014562:	2a00      	cmp	r2, #0
 8014564:	d133      	bne.n	80145ce <validate_structure+0x1a6>
 8014566:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 801456a:	fb93 f2f5 	sdiv	r2, r3, r5
 801456e:	fb05 3312 	mls	r3, r5, r2, r3
 8014572:	2b00      	cmp	r3, #0
 8014574:	bf14      	ite	ne
 8014576:	231c      	movne	r3, #28
 8014578:	231d      	moveq	r3, #29
 801457a:	e7d8      	b.n	801452e <validate_structure+0x106>
 801457c:	6921      	ldr	r1, [r4, #16]
 801457e:	3901      	subs	r1, #1
 8014580:	6121      	str	r1, [r4, #16]
 8014582:	3101      	adds	r1, #1
 8014584:	d114      	bne.n	80145b0 <validate_structure+0x188>
 8014586:	6963      	ldr	r3, [r4, #20]
 8014588:	1e5a      	subs	r2, r3, #1
 801458a:	0791      	lsls	r1, r2, #30
 801458c:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8014590:	d117      	bne.n	80145c2 <validate_structure+0x19a>
 8014592:	fb92 f1f0 	sdiv	r1, r2, r0
 8014596:	fb00 2211 	mls	r2, r0, r1, r2
 801459a:	b9a2      	cbnz	r2, 80145c6 <validate_structure+0x19e>
 801459c:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80145a0:	fb93 f2f5 	sdiv	r2, r3, r5
 80145a4:	fb05 3312 	mls	r3, r5, r2, r3
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	bf14      	ite	ne
 80145ac:	231c      	movne	r3, #28
 80145ae:	231d      	moveq	r3, #29
 80145b0:	6922      	ldr	r2, [r4, #16]
 80145b2:	2a01      	cmp	r2, #1
 80145b4:	bf14      	ite	ne
 80145b6:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80145ba:	461a      	moveq	r2, r3
 80145bc:	4462      	add	r2, ip
 80145be:	60e2      	str	r2, [r4, #12]
 80145c0:	e7a5      	b.n	801450e <validate_structure+0xe6>
 80145c2:	231c      	movs	r3, #28
 80145c4:	e7f4      	b.n	80145b0 <validate_structure+0x188>
 80145c6:	231d      	movs	r3, #29
 80145c8:	e7f2      	b.n	80145b0 <validate_structure+0x188>
 80145ca:	231c      	movs	r3, #28
 80145cc:	e7af      	b.n	801452e <validate_structure+0x106>
 80145ce:	231d      	movs	r3, #29
 80145d0:	e7ad      	b.n	801452e <validate_structure+0x106>
 80145d2:	bf00      	nop
 80145d4:	0801742c 	.word	0x0801742c

080145d8 <mktime>:
 80145d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145dc:	b085      	sub	sp, #20
 80145de:	4607      	mov	r7, r0
 80145e0:	f000 ffe6 	bl	80155b0 <__gettzinfo>
 80145e4:	4681      	mov	r9, r0
 80145e6:	4638      	mov	r0, r7
 80145e8:	f7ff ff1e 	bl	8014428 <validate_structure>
 80145ec:	e9d7 4000 	ldrd	r4, r0, [r7]
 80145f0:	233c      	movs	r3, #60	; 0x3c
 80145f2:	fb03 4400 	mla	r4, r3, r0, r4
 80145f6:	68b8      	ldr	r0, [r7, #8]
 80145f8:	4abc      	ldr	r2, [pc, #752]	; (80148ec <mktime+0x314>)
 80145fa:	697e      	ldr	r6, [r7, #20]
 80145fc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8014600:	fb03 4400 	mla	r4, r3, r0, r4
 8014604:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8014608:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801460c:	3d01      	subs	r5, #1
 801460e:	2b01      	cmp	r3, #1
 8014610:	4415      	add	r5, r2
 8014612:	dd11      	ble.n	8014638 <mktime+0x60>
 8014614:	07b1      	lsls	r1, r6, #30
 8014616:	d10f      	bne.n	8014638 <mktime+0x60>
 8014618:	2264      	movs	r2, #100	; 0x64
 801461a:	fb96 f3f2 	sdiv	r3, r6, r2
 801461e:	fb02 6313 	mls	r3, r2, r3, r6
 8014622:	b943      	cbnz	r3, 8014636 <mktime+0x5e>
 8014624:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8014628:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801462c:	fb93 f1f2 	sdiv	r1, r3, r2
 8014630:	fb02 3311 	mls	r3, r2, r1, r3
 8014634:	b903      	cbnz	r3, 8014638 <mktime+0x60>
 8014636:	3501      	adds	r5, #1
 8014638:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 801463c:	3310      	adds	r3, #16
 801463e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8014642:	4293      	cmp	r3, r2
 8014644:	61fd      	str	r5, [r7, #28]
 8014646:	f200 815d 	bhi.w	8014904 <mktime+0x32c>
 801464a:	2e46      	cmp	r6, #70	; 0x46
 801464c:	dd71      	ble.n	8014732 <mktime+0x15a>
 801464e:	2346      	movs	r3, #70	; 0x46
 8014650:	f240 1c6d 	movw	ip, #365	; 0x16d
 8014654:	2164      	movs	r1, #100	; 0x64
 8014656:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801465a:	079a      	lsls	r2, r3, #30
 801465c:	d163      	bne.n	8014726 <mktime+0x14e>
 801465e:	fb93 f2f1 	sdiv	r2, r3, r1
 8014662:	fb01 3212 	mls	r2, r1, r2, r3
 8014666:	2a00      	cmp	r2, #0
 8014668:	d160      	bne.n	801472c <mktime+0x154>
 801466a:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 801466e:	fb92 fef0 	sdiv	lr, r2, r0
 8014672:	fb00 221e 	mls	r2, r0, lr, r2
 8014676:	2a00      	cmp	r2, #0
 8014678:	bf14      	ite	ne
 801467a:	4662      	movne	r2, ip
 801467c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8014680:	3301      	adds	r3, #1
 8014682:	429e      	cmp	r6, r3
 8014684:	4415      	add	r5, r2
 8014686:	d1e8      	bne.n	801465a <mktime+0x82>
 8014688:	4b99      	ldr	r3, [pc, #612]	; (80148f0 <mktime+0x318>)
 801468a:	ea4f 78e4 	mov.w	r8, r4, asr #31
 801468e:	fbc5 4803 	smlal	r4, r8, r5, r3
 8014692:	f000 fc8f 	bl	8014fb4 <__tz_lock>
 8014696:	f000 fc99 	bl	8014fcc <_tzset_unlocked>
 801469a:	4b96      	ldr	r3, [pc, #600]	; (80148f4 <mktime+0x31c>)
 801469c:	f8d3 b000 	ldr.w	fp, [r3]
 80146a0:	f1bb 0f00 	cmp.w	fp, #0
 80146a4:	d039      	beq.n	801471a <mktime+0x142>
 80146a6:	f8d7 b020 	ldr.w	fp, [r7, #32]
 80146aa:	6978      	ldr	r0, [r7, #20]
 80146ac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80146b0:	f1bb 0f01 	cmp.w	fp, #1
 80146b4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80146b8:	46da      	mov	sl, fp
 80146ba:	bfa8      	it	ge
 80146bc:	f04f 0a01 	movge.w	sl, #1
 80146c0:	4283      	cmp	r3, r0
 80146c2:	d178      	bne.n	80147b6 <mktime+0x1de>
 80146c4:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 80146c8:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 80146cc:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 80146d0:	1a5b      	subs	r3, r3, r1
 80146d2:	9302      	str	r3, [sp, #8]
 80146d4:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 80146d8:	9303      	str	r3, [sp, #12]
 80146da:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 80146de:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 80146e2:	9301      	str	r3, [sp, #4]
 80146e4:	ebb3 0c02 	subs.w	ip, r3, r2
 80146e8:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 80146ec:	4564      	cmp	r4, ip
 80146ee:	eb78 0300 	sbcs.w	r3, r8, r0
 80146f2:	da66      	bge.n	80147c2 <mktime+0x1ea>
 80146f4:	f8d9 3000 	ldr.w	r3, [r9]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d06f      	beq.n	80147dc <mktime+0x204>
 80146fc:	9b02      	ldr	r3, [sp, #8]
 80146fe:	429c      	cmp	r4, r3
 8014700:	9b03      	ldr	r3, [sp, #12]
 8014702:	eb78 0303 	sbcs.w	r3, r8, r3
 8014706:	db03      	blt.n	8014710 <mktime+0x138>
 8014708:	4564      	cmp	r4, ip
 801470a:	eb78 0300 	sbcs.w	r3, r8, r0
 801470e:	db6b      	blt.n	80147e8 <mktime+0x210>
 8014710:	f1bb 0f00 	cmp.w	fp, #0
 8014714:	f04f 0b00 	mov.w	fp, #0
 8014718:	da6b      	bge.n	80147f2 <mktime+0x21a>
 801471a:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 801471e:	190c      	adds	r4, r1, r4
 8014720:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8014724:	e0a9      	b.n	801487a <mktime+0x2a2>
 8014726:	f240 126d 	movw	r2, #365	; 0x16d
 801472a:	e7a9      	b.n	8014680 <mktime+0xa8>
 801472c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8014730:	e7a6      	b.n	8014680 <mktime+0xa8>
 8014732:	d0a9      	beq.n	8014688 <mktime+0xb0>
 8014734:	2345      	movs	r3, #69	; 0x45
 8014736:	f240 1c6d 	movw	ip, #365	; 0x16d
 801473a:	2164      	movs	r1, #100	; 0x64
 801473c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8014740:	e012      	b.n	8014768 <mktime+0x190>
 8014742:	bb62      	cbnz	r2, 801479e <mktime+0x1c6>
 8014744:	fb93 f2f1 	sdiv	r2, r3, r1
 8014748:	fb01 3212 	mls	r2, r1, r2, r3
 801474c:	bb52      	cbnz	r2, 80147a4 <mktime+0x1cc>
 801474e:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8014752:	fb92 fef0 	sdiv	lr, r2, r0
 8014756:	fb00 221e 	mls	r2, r0, lr, r2
 801475a:	2a00      	cmp	r2, #0
 801475c:	bf14      	ite	ne
 801475e:	4662      	movne	r2, ip
 8014760:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8014764:	1aad      	subs	r5, r5, r2
 8014766:	3b01      	subs	r3, #1
 8014768:	429e      	cmp	r6, r3
 801476a:	f003 0203 	and.w	r2, r3, #3
 801476e:	dbe8      	blt.n	8014742 <mktime+0x16a>
 8014770:	b9da      	cbnz	r2, 80147aa <mktime+0x1d2>
 8014772:	2264      	movs	r2, #100	; 0x64
 8014774:	fb96 f3f2 	sdiv	r3, r6, r2
 8014778:	fb02 6313 	mls	r3, r2, r3, r6
 801477c:	b9c3      	cbnz	r3, 80147b0 <mktime+0x1d8>
 801477e:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8014782:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8014786:	fb93 f1f2 	sdiv	r1, r3, r2
 801478a:	fb02 3311 	mls	r3, r2, r1, r3
 801478e:	2b00      	cmp	r3, #0
 8014790:	f240 136d 	movw	r3, #365	; 0x16d
 8014794:	bf08      	it	eq
 8014796:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 801479a:	1aed      	subs	r5, r5, r3
 801479c:	e774      	b.n	8014688 <mktime+0xb0>
 801479e:	f240 126d 	movw	r2, #365	; 0x16d
 80147a2:	e7df      	b.n	8014764 <mktime+0x18c>
 80147a4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80147a8:	e7dc      	b.n	8014764 <mktime+0x18c>
 80147aa:	f240 136d 	movw	r3, #365	; 0x16d
 80147ae:	e7f4      	b.n	801479a <mktime+0x1c2>
 80147b0:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80147b4:	e7f1      	b.n	801479a <mktime+0x1c2>
 80147b6:	f000 fb53 	bl	8014e60 <__tzcalc_limits>
 80147ba:	2800      	cmp	r0, #0
 80147bc:	d182      	bne.n	80146c4 <mktime+0xec>
 80147be:	46d3      	mov	fp, sl
 80147c0:	e050      	b.n	8014864 <mktime+0x28c>
 80147c2:	9b01      	ldr	r3, [sp, #4]
 80147c4:	1a5b      	subs	r3, r3, r1
 80147c6:	9301      	str	r3, [sp, #4]
 80147c8:	ea4f 73e1 	mov.w	r3, r1, asr #31
 80147cc:	eb6e 0e03 	sbc.w	lr, lr, r3
 80147d0:	9b01      	ldr	r3, [sp, #4]
 80147d2:	429c      	cmp	r4, r3
 80147d4:	eb78 030e 	sbcs.w	r3, r8, lr
 80147d8:	dbf1      	blt.n	80147be <mktime+0x1e6>
 80147da:	e78b      	b.n	80146f4 <mktime+0x11c>
 80147dc:	9b02      	ldr	r3, [sp, #8]
 80147de:	429c      	cmp	r4, r3
 80147e0:	9b03      	ldr	r3, [sp, #12]
 80147e2:	eb78 0303 	sbcs.w	r3, r8, r3
 80147e6:	db8f      	blt.n	8014708 <mktime+0x130>
 80147e8:	f1bb 0f00 	cmp.w	fp, #0
 80147ec:	db3e      	blt.n	801486c <mktime+0x294>
 80147ee:	f04f 0b01 	mov.w	fp, #1
 80147f2:	ea8a 0a0b 	eor.w	sl, sl, fp
 80147f6:	f1ba 0f01 	cmp.w	sl, #1
 80147fa:	d133      	bne.n	8014864 <mktime+0x28c>
 80147fc:	f1bb 0f00 	cmp.w	fp, #0
 8014800:	d04e      	beq.n	80148a0 <mktime+0x2c8>
 8014802:	1a52      	subs	r2, r2, r1
 8014804:	683b      	ldr	r3, [r7, #0]
 8014806:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 801480a:	4413      	add	r3, r2
 801480c:	1914      	adds	r4, r2, r4
 801480e:	603b      	str	r3, [r7, #0]
 8014810:	4638      	mov	r0, r7
 8014812:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8014816:	f7ff fe07 	bl	8014428 <validate_structure>
 801481a:	68fa      	ldr	r2, [r7, #12]
 801481c:	ebb2 020a 	subs.w	r2, r2, sl
 8014820:	d020      	beq.n	8014864 <mktime+0x28c>
 8014822:	2a01      	cmp	r2, #1
 8014824:	dc3e      	bgt.n	80148a4 <mktime+0x2cc>
 8014826:	1c90      	adds	r0, r2, #2
 8014828:	bfd8      	it	le
 801482a:	2201      	movle	r2, #1
 801482c:	69fb      	ldr	r3, [r7, #28]
 801482e:	18d3      	adds	r3, r2, r3
 8014830:	4415      	add	r5, r2
 8014832:	d540      	bpl.n	80148b6 <mktime+0x2de>
 8014834:	1e73      	subs	r3, r6, #1
 8014836:	0799      	lsls	r1, r3, #30
 8014838:	d137      	bne.n	80148aa <mktime+0x2d2>
 801483a:	2264      	movs	r2, #100	; 0x64
 801483c:	fb93 f1f2 	sdiv	r1, r3, r2
 8014840:	fb02 3311 	mls	r3, r2, r1, r3
 8014844:	bba3      	cbnz	r3, 80148b0 <mktime+0x2d8>
 8014846:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801484a:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 801484e:	fb96 f2f3 	sdiv	r2, r6, r3
 8014852:	fb03 6612 	mls	r6, r3, r2, r6
 8014856:	2e00      	cmp	r6, #0
 8014858:	f240 136d 	movw	r3, #365	; 0x16d
 801485c:	bf18      	it	ne
 801485e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8014862:	61fb      	str	r3, [r7, #28]
 8014864:	f1bb 0f01 	cmp.w	fp, #1
 8014868:	f47f af57 	bne.w	801471a <mktime+0x142>
 801486c:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8014870:	190c      	adds	r4, r1, r4
 8014872:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8014876:	f04f 0b01 	mov.w	fp, #1
 801487a:	f000 fba1 	bl	8014fc0 <__tz_unlock>
 801487e:	3504      	adds	r5, #4
 8014880:	2307      	movs	r3, #7
 8014882:	fb95 f3f3 	sdiv	r3, r5, r3
 8014886:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801488a:	1aed      	subs	r5, r5, r3
 801488c:	bf48      	it	mi
 801488e:	3507      	addmi	r5, #7
 8014890:	f8c7 b020 	str.w	fp, [r7, #32]
 8014894:	61bd      	str	r5, [r7, #24]
 8014896:	4620      	mov	r0, r4
 8014898:	4641      	mov	r1, r8
 801489a:	b005      	add	sp, #20
 801489c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148a0:	1a8a      	subs	r2, r1, r2
 80148a2:	e7af      	b.n	8014804 <mktime+0x22c>
 80148a4:	f04f 32ff 	mov.w	r2, #4294967295
 80148a8:	e7c0      	b.n	801482c <mktime+0x254>
 80148aa:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80148ae:	e7d8      	b.n	8014862 <mktime+0x28a>
 80148b0:	f240 136d 	movw	r3, #365	; 0x16d
 80148b4:	e7d5      	b.n	8014862 <mktime+0x28a>
 80148b6:	07b2      	lsls	r2, r6, #30
 80148b8:	d11e      	bne.n	80148f8 <mktime+0x320>
 80148ba:	2164      	movs	r1, #100	; 0x64
 80148bc:	fb96 f2f1 	sdiv	r2, r6, r1
 80148c0:	fb01 6212 	mls	r2, r1, r2, r6
 80148c4:	b9da      	cbnz	r2, 80148fe <mktime+0x326>
 80148c6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80148ca:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80148ce:	fb96 f1f2 	sdiv	r1, r6, r2
 80148d2:	fb02 6611 	mls	r6, r2, r1, r6
 80148d6:	2e00      	cmp	r6, #0
 80148d8:	f240 126d 	movw	r2, #365	; 0x16d
 80148dc:	bf08      	it	eq
 80148de:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80148e2:	4293      	cmp	r3, r2
 80148e4:	bfa8      	it	ge
 80148e6:	1a9b      	subge	r3, r3, r2
 80148e8:	e7bb      	b.n	8014862 <mktime+0x28a>
 80148ea:	bf00      	nop
 80148ec:	0801745c 	.word	0x0801745c
 80148f0:	00015180 	.word	0x00015180
 80148f4:	2000bf7c 	.word	0x2000bf7c
 80148f8:	f240 126d 	movw	r2, #365	; 0x16d
 80148fc:	e7f1      	b.n	80148e2 <mktime+0x30a>
 80148fe:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8014902:	e7ee      	b.n	80148e2 <mktime+0x30a>
 8014904:	f04f 34ff 	mov.w	r4, #4294967295
 8014908:	46a0      	mov	r8, r4
 801490a:	e7c4      	b.n	8014896 <mktime+0x2be>

0801490c <_free_r>:
 801490c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801490e:	2900      	cmp	r1, #0
 8014910:	d044      	beq.n	801499c <_free_r+0x90>
 8014912:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014916:	9001      	str	r0, [sp, #4]
 8014918:	2b00      	cmp	r3, #0
 801491a:	f1a1 0404 	sub.w	r4, r1, #4
 801491e:	bfb8      	it	lt
 8014920:	18e4      	addlt	r4, r4, r3
 8014922:	f000 fe5b 	bl	80155dc <__malloc_lock>
 8014926:	4a1e      	ldr	r2, [pc, #120]	; (80149a0 <_free_r+0x94>)
 8014928:	9801      	ldr	r0, [sp, #4]
 801492a:	6813      	ldr	r3, [r2, #0]
 801492c:	b933      	cbnz	r3, 801493c <_free_r+0x30>
 801492e:	6063      	str	r3, [r4, #4]
 8014930:	6014      	str	r4, [r2, #0]
 8014932:	b003      	add	sp, #12
 8014934:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014938:	f000 be56 	b.w	80155e8 <__malloc_unlock>
 801493c:	42a3      	cmp	r3, r4
 801493e:	d908      	bls.n	8014952 <_free_r+0x46>
 8014940:	6825      	ldr	r5, [r4, #0]
 8014942:	1961      	adds	r1, r4, r5
 8014944:	428b      	cmp	r3, r1
 8014946:	bf01      	itttt	eq
 8014948:	6819      	ldreq	r1, [r3, #0]
 801494a:	685b      	ldreq	r3, [r3, #4]
 801494c:	1949      	addeq	r1, r1, r5
 801494e:	6021      	streq	r1, [r4, #0]
 8014950:	e7ed      	b.n	801492e <_free_r+0x22>
 8014952:	461a      	mov	r2, r3
 8014954:	685b      	ldr	r3, [r3, #4]
 8014956:	b10b      	cbz	r3, 801495c <_free_r+0x50>
 8014958:	42a3      	cmp	r3, r4
 801495a:	d9fa      	bls.n	8014952 <_free_r+0x46>
 801495c:	6811      	ldr	r1, [r2, #0]
 801495e:	1855      	adds	r5, r2, r1
 8014960:	42a5      	cmp	r5, r4
 8014962:	d10b      	bne.n	801497c <_free_r+0x70>
 8014964:	6824      	ldr	r4, [r4, #0]
 8014966:	4421      	add	r1, r4
 8014968:	1854      	adds	r4, r2, r1
 801496a:	42a3      	cmp	r3, r4
 801496c:	6011      	str	r1, [r2, #0]
 801496e:	d1e0      	bne.n	8014932 <_free_r+0x26>
 8014970:	681c      	ldr	r4, [r3, #0]
 8014972:	685b      	ldr	r3, [r3, #4]
 8014974:	6053      	str	r3, [r2, #4]
 8014976:	4421      	add	r1, r4
 8014978:	6011      	str	r1, [r2, #0]
 801497a:	e7da      	b.n	8014932 <_free_r+0x26>
 801497c:	d902      	bls.n	8014984 <_free_r+0x78>
 801497e:	230c      	movs	r3, #12
 8014980:	6003      	str	r3, [r0, #0]
 8014982:	e7d6      	b.n	8014932 <_free_r+0x26>
 8014984:	6825      	ldr	r5, [r4, #0]
 8014986:	1961      	adds	r1, r4, r5
 8014988:	428b      	cmp	r3, r1
 801498a:	bf04      	itt	eq
 801498c:	6819      	ldreq	r1, [r3, #0]
 801498e:	685b      	ldreq	r3, [r3, #4]
 8014990:	6063      	str	r3, [r4, #4]
 8014992:	bf04      	itt	eq
 8014994:	1949      	addeq	r1, r1, r5
 8014996:	6021      	streq	r1, [r4, #0]
 8014998:	6054      	str	r4, [r2, #4]
 801499a:	e7ca      	b.n	8014932 <_free_r+0x26>
 801499c:	b003      	add	sp, #12
 801499e:	bd30      	pop	{r4, r5, pc}
 80149a0:	2000bf54 	.word	0x2000bf54

080149a4 <sbrk_aligned>:
 80149a4:	b570      	push	{r4, r5, r6, lr}
 80149a6:	4e0e      	ldr	r6, [pc, #56]	; (80149e0 <sbrk_aligned+0x3c>)
 80149a8:	460c      	mov	r4, r1
 80149aa:	6831      	ldr	r1, [r6, #0]
 80149ac:	4605      	mov	r5, r0
 80149ae:	b911      	cbnz	r1, 80149b6 <sbrk_aligned+0x12>
 80149b0:	f000 f8f6 	bl	8014ba0 <_sbrk_r>
 80149b4:	6030      	str	r0, [r6, #0]
 80149b6:	4621      	mov	r1, r4
 80149b8:	4628      	mov	r0, r5
 80149ba:	f000 f8f1 	bl	8014ba0 <_sbrk_r>
 80149be:	1c43      	adds	r3, r0, #1
 80149c0:	d00a      	beq.n	80149d8 <sbrk_aligned+0x34>
 80149c2:	1cc4      	adds	r4, r0, #3
 80149c4:	f024 0403 	bic.w	r4, r4, #3
 80149c8:	42a0      	cmp	r0, r4
 80149ca:	d007      	beq.n	80149dc <sbrk_aligned+0x38>
 80149cc:	1a21      	subs	r1, r4, r0
 80149ce:	4628      	mov	r0, r5
 80149d0:	f000 f8e6 	bl	8014ba0 <_sbrk_r>
 80149d4:	3001      	adds	r0, #1
 80149d6:	d101      	bne.n	80149dc <sbrk_aligned+0x38>
 80149d8:	f04f 34ff 	mov.w	r4, #4294967295
 80149dc:	4620      	mov	r0, r4
 80149de:	bd70      	pop	{r4, r5, r6, pc}
 80149e0:	2000bf58 	.word	0x2000bf58

080149e4 <_malloc_r>:
 80149e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149e8:	1ccd      	adds	r5, r1, #3
 80149ea:	f025 0503 	bic.w	r5, r5, #3
 80149ee:	3508      	adds	r5, #8
 80149f0:	2d0c      	cmp	r5, #12
 80149f2:	bf38      	it	cc
 80149f4:	250c      	movcc	r5, #12
 80149f6:	2d00      	cmp	r5, #0
 80149f8:	4607      	mov	r7, r0
 80149fa:	db01      	blt.n	8014a00 <_malloc_r+0x1c>
 80149fc:	42a9      	cmp	r1, r5
 80149fe:	d905      	bls.n	8014a0c <_malloc_r+0x28>
 8014a00:	230c      	movs	r3, #12
 8014a02:	603b      	str	r3, [r7, #0]
 8014a04:	2600      	movs	r6, #0
 8014a06:	4630      	mov	r0, r6
 8014a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a0c:	4e2e      	ldr	r6, [pc, #184]	; (8014ac8 <_malloc_r+0xe4>)
 8014a0e:	f000 fde5 	bl	80155dc <__malloc_lock>
 8014a12:	6833      	ldr	r3, [r6, #0]
 8014a14:	461c      	mov	r4, r3
 8014a16:	bb34      	cbnz	r4, 8014a66 <_malloc_r+0x82>
 8014a18:	4629      	mov	r1, r5
 8014a1a:	4638      	mov	r0, r7
 8014a1c:	f7ff ffc2 	bl	80149a4 <sbrk_aligned>
 8014a20:	1c43      	adds	r3, r0, #1
 8014a22:	4604      	mov	r4, r0
 8014a24:	d14d      	bne.n	8014ac2 <_malloc_r+0xde>
 8014a26:	6834      	ldr	r4, [r6, #0]
 8014a28:	4626      	mov	r6, r4
 8014a2a:	2e00      	cmp	r6, #0
 8014a2c:	d140      	bne.n	8014ab0 <_malloc_r+0xcc>
 8014a2e:	6823      	ldr	r3, [r4, #0]
 8014a30:	4631      	mov	r1, r6
 8014a32:	4638      	mov	r0, r7
 8014a34:	eb04 0803 	add.w	r8, r4, r3
 8014a38:	f000 f8b2 	bl	8014ba0 <_sbrk_r>
 8014a3c:	4580      	cmp	r8, r0
 8014a3e:	d13a      	bne.n	8014ab6 <_malloc_r+0xd2>
 8014a40:	6821      	ldr	r1, [r4, #0]
 8014a42:	3503      	adds	r5, #3
 8014a44:	1a6d      	subs	r5, r5, r1
 8014a46:	f025 0503 	bic.w	r5, r5, #3
 8014a4a:	3508      	adds	r5, #8
 8014a4c:	2d0c      	cmp	r5, #12
 8014a4e:	bf38      	it	cc
 8014a50:	250c      	movcc	r5, #12
 8014a52:	4629      	mov	r1, r5
 8014a54:	4638      	mov	r0, r7
 8014a56:	f7ff ffa5 	bl	80149a4 <sbrk_aligned>
 8014a5a:	3001      	adds	r0, #1
 8014a5c:	d02b      	beq.n	8014ab6 <_malloc_r+0xd2>
 8014a5e:	6823      	ldr	r3, [r4, #0]
 8014a60:	442b      	add	r3, r5
 8014a62:	6023      	str	r3, [r4, #0]
 8014a64:	e00e      	b.n	8014a84 <_malloc_r+0xa0>
 8014a66:	6822      	ldr	r2, [r4, #0]
 8014a68:	1b52      	subs	r2, r2, r5
 8014a6a:	d41e      	bmi.n	8014aaa <_malloc_r+0xc6>
 8014a6c:	2a0b      	cmp	r2, #11
 8014a6e:	d916      	bls.n	8014a9e <_malloc_r+0xba>
 8014a70:	1961      	adds	r1, r4, r5
 8014a72:	42a3      	cmp	r3, r4
 8014a74:	6025      	str	r5, [r4, #0]
 8014a76:	bf18      	it	ne
 8014a78:	6059      	strne	r1, [r3, #4]
 8014a7a:	6863      	ldr	r3, [r4, #4]
 8014a7c:	bf08      	it	eq
 8014a7e:	6031      	streq	r1, [r6, #0]
 8014a80:	5162      	str	r2, [r4, r5]
 8014a82:	604b      	str	r3, [r1, #4]
 8014a84:	4638      	mov	r0, r7
 8014a86:	f104 060b 	add.w	r6, r4, #11
 8014a8a:	f000 fdad 	bl	80155e8 <__malloc_unlock>
 8014a8e:	f026 0607 	bic.w	r6, r6, #7
 8014a92:	1d23      	adds	r3, r4, #4
 8014a94:	1af2      	subs	r2, r6, r3
 8014a96:	d0b6      	beq.n	8014a06 <_malloc_r+0x22>
 8014a98:	1b9b      	subs	r3, r3, r6
 8014a9a:	50a3      	str	r3, [r4, r2]
 8014a9c:	e7b3      	b.n	8014a06 <_malloc_r+0x22>
 8014a9e:	6862      	ldr	r2, [r4, #4]
 8014aa0:	42a3      	cmp	r3, r4
 8014aa2:	bf0c      	ite	eq
 8014aa4:	6032      	streq	r2, [r6, #0]
 8014aa6:	605a      	strne	r2, [r3, #4]
 8014aa8:	e7ec      	b.n	8014a84 <_malloc_r+0xa0>
 8014aaa:	4623      	mov	r3, r4
 8014aac:	6864      	ldr	r4, [r4, #4]
 8014aae:	e7b2      	b.n	8014a16 <_malloc_r+0x32>
 8014ab0:	4634      	mov	r4, r6
 8014ab2:	6876      	ldr	r6, [r6, #4]
 8014ab4:	e7b9      	b.n	8014a2a <_malloc_r+0x46>
 8014ab6:	230c      	movs	r3, #12
 8014ab8:	603b      	str	r3, [r7, #0]
 8014aba:	4638      	mov	r0, r7
 8014abc:	f000 fd94 	bl	80155e8 <__malloc_unlock>
 8014ac0:	e7a1      	b.n	8014a06 <_malloc_r+0x22>
 8014ac2:	6025      	str	r5, [r4, #0]
 8014ac4:	e7de      	b.n	8014a84 <_malloc_r+0xa0>
 8014ac6:	bf00      	nop
 8014ac8:	2000bf54 	.word	0x2000bf54

08014acc <cleanup_glue>:
 8014acc:	b538      	push	{r3, r4, r5, lr}
 8014ace:	460c      	mov	r4, r1
 8014ad0:	6809      	ldr	r1, [r1, #0]
 8014ad2:	4605      	mov	r5, r0
 8014ad4:	b109      	cbz	r1, 8014ada <cleanup_glue+0xe>
 8014ad6:	f7ff fff9 	bl	8014acc <cleanup_glue>
 8014ada:	4621      	mov	r1, r4
 8014adc:	4628      	mov	r0, r5
 8014ade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014ae2:	f7ff bf13 	b.w	801490c <_free_r>
	...

08014ae8 <_reclaim_reent>:
 8014ae8:	4b2c      	ldr	r3, [pc, #176]	; (8014b9c <_reclaim_reent+0xb4>)
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	4283      	cmp	r3, r0
 8014aee:	b570      	push	{r4, r5, r6, lr}
 8014af0:	4604      	mov	r4, r0
 8014af2:	d051      	beq.n	8014b98 <_reclaim_reent+0xb0>
 8014af4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014af6:	b143      	cbz	r3, 8014b0a <_reclaim_reent+0x22>
 8014af8:	68db      	ldr	r3, [r3, #12]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d14a      	bne.n	8014b94 <_reclaim_reent+0xac>
 8014afe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b00:	6819      	ldr	r1, [r3, #0]
 8014b02:	b111      	cbz	r1, 8014b0a <_reclaim_reent+0x22>
 8014b04:	4620      	mov	r0, r4
 8014b06:	f7ff ff01 	bl	801490c <_free_r>
 8014b0a:	6961      	ldr	r1, [r4, #20]
 8014b0c:	b111      	cbz	r1, 8014b14 <_reclaim_reent+0x2c>
 8014b0e:	4620      	mov	r0, r4
 8014b10:	f7ff fefc 	bl	801490c <_free_r>
 8014b14:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014b16:	b111      	cbz	r1, 8014b1e <_reclaim_reent+0x36>
 8014b18:	4620      	mov	r0, r4
 8014b1a:	f7ff fef7 	bl	801490c <_free_r>
 8014b1e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014b20:	b111      	cbz	r1, 8014b28 <_reclaim_reent+0x40>
 8014b22:	4620      	mov	r0, r4
 8014b24:	f7ff fef2 	bl	801490c <_free_r>
 8014b28:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8014b2a:	b111      	cbz	r1, 8014b32 <_reclaim_reent+0x4a>
 8014b2c:	4620      	mov	r0, r4
 8014b2e:	f7ff feed 	bl	801490c <_free_r>
 8014b32:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8014b34:	b111      	cbz	r1, 8014b3c <_reclaim_reent+0x54>
 8014b36:	4620      	mov	r0, r4
 8014b38:	f7ff fee8 	bl	801490c <_free_r>
 8014b3c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8014b3e:	b111      	cbz	r1, 8014b46 <_reclaim_reent+0x5e>
 8014b40:	4620      	mov	r0, r4
 8014b42:	f7ff fee3 	bl	801490c <_free_r>
 8014b46:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8014b48:	b111      	cbz	r1, 8014b50 <_reclaim_reent+0x68>
 8014b4a:	4620      	mov	r0, r4
 8014b4c:	f7ff fede 	bl	801490c <_free_r>
 8014b50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014b52:	b111      	cbz	r1, 8014b5a <_reclaim_reent+0x72>
 8014b54:	4620      	mov	r0, r4
 8014b56:	f7ff fed9 	bl	801490c <_free_r>
 8014b5a:	69a3      	ldr	r3, [r4, #24]
 8014b5c:	b1e3      	cbz	r3, 8014b98 <_reclaim_reent+0xb0>
 8014b5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014b60:	4620      	mov	r0, r4
 8014b62:	4798      	blx	r3
 8014b64:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014b66:	b1b9      	cbz	r1, 8014b98 <_reclaim_reent+0xb0>
 8014b68:	4620      	mov	r0, r4
 8014b6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014b6e:	f7ff bfad 	b.w	8014acc <cleanup_glue>
 8014b72:	5949      	ldr	r1, [r1, r5]
 8014b74:	b941      	cbnz	r1, 8014b88 <_reclaim_reent+0xa0>
 8014b76:	3504      	adds	r5, #4
 8014b78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b7a:	2d80      	cmp	r5, #128	; 0x80
 8014b7c:	68d9      	ldr	r1, [r3, #12]
 8014b7e:	d1f8      	bne.n	8014b72 <_reclaim_reent+0x8a>
 8014b80:	4620      	mov	r0, r4
 8014b82:	f7ff fec3 	bl	801490c <_free_r>
 8014b86:	e7ba      	b.n	8014afe <_reclaim_reent+0x16>
 8014b88:	680e      	ldr	r6, [r1, #0]
 8014b8a:	4620      	mov	r0, r4
 8014b8c:	f7ff febe 	bl	801490c <_free_r>
 8014b90:	4631      	mov	r1, r6
 8014b92:	e7ef      	b.n	8014b74 <_reclaim_reent+0x8c>
 8014b94:	2500      	movs	r5, #0
 8014b96:	e7ef      	b.n	8014b78 <_reclaim_reent+0x90>
 8014b98:	bd70      	pop	{r4, r5, r6, pc}
 8014b9a:	bf00      	nop
 8014b9c:	200002b4 	.word	0x200002b4

08014ba0 <_sbrk_r>:
 8014ba0:	b538      	push	{r3, r4, r5, lr}
 8014ba2:	4d06      	ldr	r5, [pc, #24]	; (8014bbc <_sbrk_r+0x1c>)
 8014ba4:	2300      	movs	r3, #0
 8014ba6:	4604      	mov	r4, r0
 8014ba8:	4608      	mov	r0, r1
 8014baa:	602b      	str	r3, [r5, #0]
 8014bac:	f7ed ffa8 	bl	8002b00 <_sbrk>
 8014bb0:	1c43      	adds	r3, r0, #1
 8014bb2:	d102      	bne.n	8014bba <_sbrk_r+0x1a>
 8014bb4:	682b      	ldr	r3, [r5, #0]
 8014bb6:	b103      	cbz	r3, 8014bba <_sbrk_r+0x1a>
 8014bb8:	6023      	str	r3, [r4, #0]
 8014bba:	bd38      	pop	{r3, r4, r5, pc}
 8014bbc:	2000bf5c 	.word	0x2000bf5c

08014bc0 <siprintf>:
 8014bc0:	b40e      	push	{r1, r2, r3}
 8014bc2:	b500      	push	{lr}
 8014bc4:	b09c      	sub	sp, #112	; 0x70
 8014bc6:	ab1d      	add	r3, sp, #116	; 0x74
 8014bc8:	9002      	str	r0, [sp, #8]
 8014bca:	9006      	str	r0, [sp, #24]
 8014bcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014bd0:	4809      	ldr	r0, [pc, #36]	; (8014bf8 <siprintf+0x38>)
 8014bd2:	9107      	str	r1, [sp, #28]
 8014bd4:	9104      	str	r1, [sp, #16]
 8014bd6:	4909      	ldr	r1, [pc, #36]	; (8014bfc <siprintf+0x3c>)
 8014bd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8014bdc:	9105      	str	r1, [sp, #20]
 8014bde:	6800      	ldr	r0, [r0, #0]
 8014be0:	9301      	str	r3, [sp, #4]
 8014be2:	a902      	add	r1, sp, #8
 8014be4:	f000 fd62 	bl	80156ac <_svfiprintf_r>
 8014be8:	9b02      	ldr	r3, [sp, #8]
 8014bea:	2200      	movs	r2, #0
 8014bec:	701a      	strb	r2, [r3, #0]
 8014bee:	b01c      	add	sp, #112	; 0x70
 8014bf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8014bf4:	b003      	add	sp, #12
 8014bf6:	4770      	bx	lr
 8014bf8:	200002b4 	.word	0x200002b4
 8014bfc:	ffff0208 	.word	0xffff0208

08014c00 <__sread>:
 8014c00:	b510      	push	{r4, lr}
 8014c02:	460c      	mov	r4, r1
 8014c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c08:	f001 f93e 	bl	8015e88 <_read_r>
 8014c0c:	2800      	cmp	r0, #0
 8014c0e:	bfab      	itete	ge
 8014c10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014c12:	89a3      	ldrhlt	r3, [r4, #12]
 8014c14:	181b      	addge	r3, r3, r0
 8014c16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014c1a:	bfac      	ite	ge
 8014c1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8014c1e:	81a3      	strhlt	r3, [r4, #12]
 8014c20:	bd10      	pop	{r4, pc}

08014c22 <__seofread>:
 8014c22:	2000      	movs	r0, #0
 8014c24:	4770      	bx	lr

08014c26 <__swrite>:
 8014c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c2a:	461f      	mov	r7, r3
 8014c2c:	898b      	ldrh	r3, [r1, #12]
 8014c2e:	05db      	lsls	r3, r3, #23
 8014c30:	4605      	mov	r5, r0
 8014c32:	460c      	mov	r4, r1
 8014c34:	4616      	mov	r6, r2
 8014c36:	d505      	bpl.n	8014c44 <__swrite+0x1e>
 8014c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c3c:	2302      	movs	r3, #2
 8014c3e:	2200      	movs	r2, #0
 8014c40:	f000 fcba 	bl	80155b8 <_lseek_r>
 8014c44:	89a3      	ldrh	r3, [r4, #12]
 8014c46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014c4e:	81a3      	strh	r3, [r4, #12]
 8014c50:	4632      	mov	r2, r6
 8014c52:	463b      	mov	r3, r7
 8014c54:	4628      	mov	r0, r5
 8014c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c5a:	f000 bb3d 	b.w	80152d8 <_write_r>

08014c5e <__sseek>:
 8014c5e:	b510      	push	{r4, lr}
 8014c60:	460c      	mov	r4, r1
 8014c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c66:	f000 fca7 	bl	80155b8 <_lseek_r>
 8014c6a:	1c43      	adds	r3, r0, #1
 8014c6c:	89a3      	ldrh	r3, [r4, #12]
 8014c6e:	bf15      	itete	ne
 8014c70:	6560      	strne	r0, [r4, #84]	; 0x54
 8014c72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014c76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014c7a:	81a3      	strheq	r3, [r4, #12]
 8014c7c:	bf18      	it	ne
 8014c7e:	81a3      	strhne	r3, [r4, #12]
 8014c80:	bd10      	pop	{r4, pc}

08014c82 <__sclose>:
 8014c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c86:	f000 bb57 	b.w	8015338 <_close_r>
	...

08014c8c <strtok>:
 8014c8c:	4b16      	ldr	r3, [pc, #88]	; (8014ce8 <strtok+0x5c>)
 8014c8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014c90:	681e      	ldr	r6, [r3, #0]
 8014c92:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8014c94:	4605      	mov	r5, r0
 8014c96:	b9fc      	cbnz	r4, 8014cd8 <strtok+0x4c>
 8014c98:	2050      	movs	r0, #80	; 0x50
 8014c9a:	9101      	str	r1, [sp, #4]
 8014c9c:	f7ff fb9e 	bl	80143dc <malloc>
 8014ca0:	9901      	ldr	r1, [sp, #4]
 8014ca2:	65b0      	str	r0, [r6, #88]	; 0x58
 8014ca4:	4602      	mov	r2, r0
 8014ca6:	b920      	cbnz	r0, 8014cb2 <strtok+0x26>
 8014ca8:	4b10      	ldr	r3, [pc, #64]	; (8014cec <strtok+0x60>)
 8014caa:	4811      	ldr	r0, [pc, #68]	; (8014cf0 <strtok+0x64>)
 8014cac:	2157      	movs	r1, #87	; 0x57
 8014cae:	f000 fb25 	bl	80152fc <__assert_func>
 8014cb2:	e9c0 4400 	strd	r4, r4, [r0]
 8014cb6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8014cba:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8014cbe:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8014cc2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8014cc6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8014cca:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8014cce:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8014cd2:	6184      	str	r4, [r0, #24]
 8014cd4:	7704      	strb	r4, [r0, #28]
 8014cd6:	6244      	str	r4, [r0, #36]	; 0x24
 8014cd8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8014cda:	2301      	movs	r3, #1
 8014cdc:	4628      	mov	r0, r5
 8014cde:	b002      	add	sp, #8
 8014ce0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014ce4:	f000 b806 	b.w	8014cf4 <__strtok_r>
 8014ce8:	200002b4 	.word	0x200002b4
 8014cec:	0801748c 	.word	0x0801748c
 8014cf0:	080174a3 	.word	0x080174a3

08014cf4 <__strtok_r>:
 8014cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cf6:	b908      	cbnz	r0, 8014cfc <__strtok_r+0x8>
 8014cf8:	6810      	ldr	r0, [r2, #0]
 8014cfa:	b188      	cbz	r0, 8014d20 <__strtok_r+0x2c>
 8014cfc:	4604      	mov	r4, r0
 8014cfe:	4620      	mov	r0, r4
 8014d00:	f814 5b01 	ldrb.w	r5, [r4], #1
 8014d04:	460f      	mov	r7, r1
 8014d06:	f817 6b01 	ldrb.w	r6, [r7], #1
 8014d0a:	b91e      	cbnz	r6, 8014d14 <__strtok_r+0x20>
 8014d0c:	b965      	cbnz	r5, 8014d28 <__strtok_r+0x34>
 8014d0e:	6015      	str	r5, [r2, #0]
 8014d10:	4628      	mov	r0, r5
 8014d12:	e005      	b.n	8014d20 <__strtok_r+0x2c>
 8014d14:	42b5      	cmp	r5, r6
 8014d16:	d1f6      	bne.n	8014d06 <__strtok_r+0x12>
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d1f0      	bne.n	8014cfe <__strtok_r+0xa>
 8014d1c:	6014      	str	r4, [r2, #0]
 8014d1e:	7003      	strb	r3, [r0, #0]
 8014d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d22:	461c      	mov	r4, r3
 8014d24:	e00c      	b.n	8014d40 <__strtok_r+0x4c>
 8014d26:	b915      	cbnz	r5, 8014d2e <__strtok_r+0x3a>
 8014d28:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014d2c:	460e      	mov	r6, r1
 8014d2e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8014d32:	42ab      	cmp	r3, r5
 8014d34:	d1f7      	bne.n	8014d26 <__strtok_r+0x32>
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d0f3      	beq.n	8014d22 <__strtok_r+0x2e>
 8014d3a:	2300      	movs	r3, #0
 8014d3c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8014d40:	6014      	str	r4, [r2, #0]
 8014d42:	e7ed      	b.n	8014d20 <__strtok_r+0x2c>

08014d44 <_strtol_l.constprop.0>:
 8014d44:	2b01      	cmp	r3, #1
 8014d46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d4a:	d001      	beq.n	8014d50 <_strtol_l.constprop.0+0xc>
 8014d4c:	2b24      	cmp	r3, #36	; 0x24
 8014d4e:	d906      	bls.n	8014d5e <_strtol_l.constprop.0+0x1a>
 8014d50:	f7ff fa1e 	bl	8014190 <__errno>
 8014d54:	2316      	movs	r3, #22
 8014d56:	6003      	str	r3, [r0, #0]
 8014d58:	2000      	movs	r0, #0
 8014d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d5e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8014e44 <_strtol_l.constprop.0+0x100>
 8014d62:	460d      	mov	r5, r1
 8014d64:	462e      	mov	r6, r5
 8014d66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014d6a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8014d6e:	f017 0708 	ands.w	r7, r7, #8
 8014d72:	d1f7      	bne.n	8014d64 <_strtol_l.constprop.0+0x20>
 8014d74:	2c2d      	cmp	r4, #45	; 0x2d
 8014d76:	d132      	bne.n	8014dde <_strtol_l.constprop.0+0x9a>
 8014d78:	782c      	ldrb	r4, [r5, #0]
 8014d7a:	2701      	movs	r7, #1
 8014d7c:	1cb5      	adds	r5, r6, #2
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d05b      	beq.n	8014e3a <_strtol_l.constprop.0+0xf6>
 8014d82:	2b10      	cmp	r3, #16
 8014d84:	d109      	bne.n	8014d9a <_strtol_l.constprop.0+0x56>
 8014d86:	2c30      	cmp	r4, #48	; 0x30
 8014d88:	d107      	bne.n	8014d9a <_strtol_l.constprop.0+0x56>
 8014d8a:	782c      	ldrb	r4, [r5, #0]
 8014d8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014d90:	2c58      	cmp	r4, #88	; 0x58
 8014d92:	d14d      	bne.n	8014e30 <_strtol_l.constprop.0+0xec>
 8014d94:	786c      	ldrb	r4, [r5, #1]
 8014d96:	2310      	movs	r3, #16
 8014d98:	3502      	adds	r5, #2
 8014d9a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014d9e:	f108 38ff 	add.w	r8, r8, #4294967295
 8014da2:	f04f 0c00 	mov.w	ip, #0
 8014da6:	fbb8 f9f3 	udiv	r9, r8, r3
 8014daa:	4666      	mov	r6, ip
 8014dac:	fb03 8a19 	mls	sl, r3, r9, r8
 8014db0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8014db4:	f1be 0f09 	cmp.w	lr, #9
 8014db8:	d816      	bhi.n	8014de8 <_strtol_l.constprop.0+0xa4>
 8014dba:	4674      	mov	r4, lr
 8014dbc:	42a3      	cmp	r3, r4
 8014dbe:	dd24      	ble.n	8014e0a <_strtol_l.constprop.0+0xc6>
 8014dc0:	f1bc 0f00 	cmp.w	ip, #0
 8014dc4:	db1e      	blt.n	8014e04 <_strtol_l.constprop.0+0xc0>
 8014dc6:	45b1      	cmp	r9, r6
 8014dc8:	d31c      	bcc.n	8014e04 <_strtol_l.constprop.0+0xc0>
 8014dca:	d101      	bne.n	8014dd0 <_strtol_l.constprop.0+0x8c>
 8014dcc:	45a2      	cmp	sl, r4
 8014dce:	db19      	blt.n	8014e04 <_strtol_l.constprop.0+0xc0>
 8014dd0:	fb06 4603 	mla	r6, r6, r3, r4
 8014dd4:	f04f 0c01 	mov.w	ip, #1
 8014dd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014ddc:	e7e8      	b.n	8014db0 <_strtol_l.constprop.0+0x6c>
 8014dde:	2c2b      	cmp	r4, #43	; 0x2b
 8014de0:	bf04      	itt	eq
 8014de2:	782c      	ldrbeq	r4, [r5, #0]
 8014de4:	1cb5      	addeq	r5, r6, #2
 8014de6:	e7ca      	b.n	8014d7e <_strtol_l.constprop.0+0x3a>
 8014de8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8014dec:	f1be 0f19 	cmp.w	lr, #25
 8014df0:	d801      	bhi.n	8014df6 <_strtol_l.constprop.0+0xb2>
 8014df2:	3c37      	subs	r4, #55	; 0x37
 8014df4:	e7e2      	b.n	8014dbc <_strtol_l.constprop.0+0x78>
 8014df6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8014dfa:	f1be 0f19 	cmp.w	lr, #25
 8014dfe:	d804      	bhi.n	8014e0a <_strtol_l.constprop.0+0xc6>
 8014e00:	3c57      	subs	r4, #87	; 0x57
 8014e02:	e7db      	b.n	8014dbc <_strtol_l.constprop.0+0x78>
 8014e04:	f04f 3cff 	mov.w	ip, #4294967295
 8014e08:	e7e6      	b.n	8014dd8 <_strtol_l.constprop.0+0x94>
 8014e0a:	f1bc 0f00 	cmp.w	ip, #0
 8014e0e:	da05      	bge.n	8014e1c <_strtol_l.constprop.0+0xd8>
 8014e10:	2322      	movs	r3, #34	; 0x22
 8014e12:	6003      	str	r3, [r0, #0]
 8014e14:	4646      	mov	r6, r8
 8014e16:	b942      	cbnz	r2, 8014e2a <_strtol_l.constprop.0+0xe6>
 8014e18:	4630      	mov	r0, r6
 8014e1a:	e79e      	b.n	8014d5a <_strtol_l.constprop.0+0x16>
 8014e1c:	b107      	cbz	r7, 8014e20 <_strtol_l.constprop.0+0xdc>
 8014e1e:	4276      	negs	r6, r6
 8014e20:	2a00      	cmp	r2, #0
 8014e22:	d0f9      	beq.n	8014e18 <_strtol_l.constprop.0+0xd4>
 8014e24:	f1bc 0f00 	cmp.w	ip, #0
 8014e28:	d000      	beq.n	8014e2c <_strtol_l.constprop.0+0xe8>
 8014e2a:	1e69      	subs	r1, r5, #1
 8014e2c:	6011      	str	r1, [r2, #0]
 8014e2e:	e7f3      	b.n	8014e18 <_strtol_l.constprop.0+0xd4>
 8014e30:	2430      	movs	r4, #48	; 0x30
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d1b1      	bne.n	8014d9a <_strtol_l.constprop.0+0x56>
 8014e36:	2308      	movs	r3, #8
 8014e38:	e7af      	b.n	8014d9a <_strtol_l.constprop.0+0x56>
 8014e3a:	2c30      	cmp	r4, #48	; 0x30
 8014e3c:	d0a5      	beq.n	8014d8a <_strtol_l.constprop.0+0x46>
 8014e3e:	230a      	movs	r3, #10
 8014e40:	e7ab      	b.n	8014d9a <_strtol_l.constprop.0+0x56>
 8014e42:	bf00      	nop
 8014e44:	08017579 	.word	0x08017579

08014e48 <_strtol_r>:
 8014e48:	f7ff bf7c 	b.w	8014d44 <_strtol_l.constprop.0>

08014e4c <strtol>:
 8014e4c:	4613      	mov	r3, r2
 8014e4e:	460a      	mov	r2, r1
 8014e50:	4601      	mov	r1, r0
 8014e52:	4802      	ldr	r0, [pc, #8]	; (8014e5c <strtol+0x10>)
 8014e54:	6800      	ldr	r0, [r0, #0]
 8014e56:	f7ff bf75 	b.w	8014d44 <_strtol_l.constprop.0>
 8014e5a:	bf00      	nop
 8014e5c:	200002b4 	.word	0x200002b4

08014e60 <__tzcalc_limits>:
 8014e60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e64:	4605      	mov	r5, r0
 8014e66:	f000 fba3 	bl	80155b0 <__gettzinfo>
 8014e6a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8014e6e:	429d      	cmp	r5, r3
 8014e70:	f340 8099 	ble.w	8014fa6 <__tzcalc_limits+0x146>
 8014e74:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8014e78:	18ac      	adds	r4, r5, r2
 8014e7a:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8014e7e:	f240 126d 	movw	r2, #365	; 0x16d
 8014e82:	10a4      	asrs	r4, r4, #2
 8014e84:	fb02 4403 	mla	r4, r2, r3, r4
 8014e88:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8014e8c:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8014e90:	fb93 f3f2 	sdiv	r3, r3, r2
 8014e94:	441c      	add	r4, r3
 8014e96:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8014e9a:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8014e9e:	fb95 fcf3 	sdiv	ip, r5, r3
 8014ea2:	fb03 5c1c 	mls	ip, r3, ip, r5
 8014ea6:	186a      	adds	r2, r5, r1
 8014ea8:	fabc f68c 	clz	r6, ip
 8014eac:	fbb2 f2f3 	udiv	r2, r2, r3
 8014eb0:	f005 0303 	and.w	r3, r5, #3
 8014eb4:	4414      	add	r4, r2
 8014eb6:	2264      	movs	r2, #100	; 0x64
 8014eb8:	6045      	str	r5, [r0, #4]
 8014eba:	fb95 f7f2 	sdiv	r7, r5, r2
 8014ebe:	0976      	lsrs	r6, r6, #5
 8014ec0:	fb02 5717 	mls	r7, r2, r7, r5
 8014ec4:	4601      	mov	r1, r0
 8014ec6:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8014eca:	9300      	str	r3, [sp, #0]
 8014ecc:	f04f 0a07 	mov.w	sl, #7
 8014ed0:	7a0d      	ldrb	r5, [r1, #8]
 8014ed2:	694b      	ldr	r3, [r1, #20]
 8014ed4:	2d4a      	cmp	r5, #74	; 0x4a
 8014ed6:	d12d      	bne.n	8014f34 <__tzcalc_limits+0xd4>
 8014ed8:	9a00      	ldr	r2, [sp, #0]
 8014eda:	eb04 0e03 	add.w	lr, r4, r3
 8014ede:	b902      	cbnz	r2, 8014ee2 <__tzcalc_limits+0x82>
 8014ee0:	b917      	cbnz	r7, 8014ee8 <__tzcalc_limits+0x88>
 8014ee2:	f1bc 0f00 	cmp.w	ip, #0
 8014ee6:	d123      	bne.n	8014f30 <__tzcalc_limits+0xd0>
 8014ee8:	2b3b      	cmp	r3, #59	; 0x3b
 8014eea:	bfd4      	ite	le
 8014eec:	2300      	movle	r3, #0
 8014eee:	2301      	movgt	r3, #1
 8014ef0:	4473      	add	r3, lr
 8014ef2:	3b01      	subs	r3, #1
 8014ef4:	698d      	ldr	r5, [r1, #24]
 8014ef6:	4a2d      	ldr	r2, [pc, #180]	; (8014fac <__tzcalc_limits+0x14c>)
 8014ef8:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8014efc:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8014f00:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8014f02:	18ed      	adds	r5, r5, r3
 8014f04:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8014f08:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8014f0c:	3128      	adds	r1, #40	; 0x28
 8014f0e:	458b      	cmp	fp, r1
 8014f10:	d1de      	bne.n	8014ed0 <__tzcalc_limits+0x70>
 8014f12:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 8014f16:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8014f1a:	428c      	cmp	r4, r1
 8014f1c:	eb72 0303 	sbcs.w	r3, r2, r3
 8014f20:	bfb4      	ite	lt
 8014f22:	2301      	movlt	r3, #1
 8014f24:	2300      	movge	r3, #0
 8014f26:	6003      	str	r3, [r0, #0]
 8014f28:	2001      	movs	r0, #1
 8014f2a:	b003      	add	sp, #12
 8014f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f30:	2300      	movs	r3, #0
 8014f32:	e7dd      	b.n	8014ef0 <__tzcalc_limits+0x90>
 8014f34:	2d44      	cmp	r5, #68	; 0x44
 8014f36:	d101      	bne.n	8014f3c <__tzcalc_limits+0xdc>
 8014f38:	4423      	add	r3, r4
 8014f3a:	e7db      	b.n	8014ef4 <__tzcalc_limits+0x94>
 8014f3c:	9a00      	ldr	r2, [sp, #0]
 8014f3e:	bb62      	cbnz	r2, 8014f9a <__tzcalc_limits+0x13a>
 8014f40:	2f00      	cmp	r7, #0
 8014f42:	bf0c      	ite	eq
 8014f44:	4635      	moveq	r5, r6
 8014f46:	2501      	movne	r5, #1
 8014f48:	68ca      	ldr	r2, [r1, #12]
 8014f4a:	9201      	str	r2, [sp, #4]
 8014f4c:	4a18      	ldr	r2, [pc, #96]	; (8014fb0 <__tzcalc_limits+0x150>)
 8014f4e:	f04f 0930 	mov.w	r9, #48	; 0x30
 8014f52:	fb09 2505 	mla	r5, r9, r5, r2
 8014f56:	46a6      	mov	lr, r4
 8014f58:	f04f 0800 	mov.w	r8, #0
 8014f5c:	3d04      	subs	r5, #4
 8014f5e:	9a01      	ldr	r2, [sp, #4]
 8014f60:	f108 0801 	add.w	r8, r8, #1
 8014f64:	4542      	cmp	r2, r8
 8014f66:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8014f6a:	dc18      	bgt.n	8014f9e <__tzcalc_limits+0x13e>
 8014f6c:	f10e 0504 	add.w	r5, lr, #4
 8014f70:	fb95 f8fa 	sdiv	r8, r5, sl
 8014f74:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8014f78:	eba5 0808 	sub.w	r8, r5, r8
 8014f7c:	ebb3 0808 	subs.w	r8, r3, r8
 8014f80:	690b      	ldr	r3, [r1, #16]
 8014f82:	f103 33ff 	add.w	r3, r3, #4294967295
 8014f86:	bf48      	it	mi
 8014f88:	f108 0807 	addmi.w	r8, r8, #7
 8014f8c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8014f90:	4443      	add	r3, r8
 8014f92:	454b      	cmp	r3, r9
 8014f94:	da05      	bge.n	8014fa2 <__tzcalc_limits+0x142>
 8014f96:	4473      	add	r3, lr
 8014f98:	e7ac      	b.n	8014ef4 <__tzcalc_limits+0x94>
 8014f9a:	4635      	mov	r5, r6
 8014f9c:	e7d4      	b.n	8014f48 <__tzcalc_limits+0xe8>
 8014f9e:	44ce      	add	lr, r9
 8014fa0:	e7dd      	b.n	8014f5e <__tzcalc_limits+0xfe>
 8014fa2:	3b07      	subs	r3, #7
 8014fa4:	e7f5      	b.n	8014f92 <__tzcalc_limits+0x132>
 8014fa6:	2000      	movs	r0, #0
 8014fa8:	e7bf      	b.n	8014f2a <__tzcalc_limits+0xca>
 8014faa:	bf00      	nop
 8014fac:	00015180 	.word	0x00015180
 8014fb0:	0801767c 	.word	0x0801767c

08014fb4 <__tz_lock>:
 8014fb4:	4801      	ldr	r0, [pc, #4]	; (8014fbc <__tz_lock+0x8>)
 8014fb6:	f7ff ba0c 	b.w	80143d2 <__retarget_lock_acquire>
 8014fba:	bf00      	nop
 8014fbc:	2000bf50 	.word	0x2000bf50

08014fc0 <__tz_unlock>:
 8014fc0:	4801      	ldr	r0, [pc, #4]	; (8014fc8 <__tz_unlock+0x8>)
 8014fc2:	f7ff ba08 	b.w	80143d6 <__retarget_lock_release>
 8014fc6:	bf00      	nop
 8014fc8:	2000bf50 	.word	0x2000bf50

08014fcc <_tzset_unlocked>:
 8014fcc:	4b01      	ldr	r3, [pc, #4]	; (8014fd4 <_tzset_unlocked+0x8>)
 8014fce:	6818      	ldr	r0, [r3, #0]
 8014fd0:	f000 b802 	b.w	8014fd8 <_tzset_unlocked_r>
 8014fd4:	200002b4 	.word	0x200002b4

08014fd8 <_tzset_unlocked_r>:
 8014fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fdc:	b08d      	sub	sp, #52	; 0x34
 8014fde:	4607      	mov	r7, r0
 8014fe0:	f000 fae6 	bl	80155b0 <__gettzinfo>
 8014fe4:	49b0      	ldr	r1, [pc, #704]	; (80152a8 <_tzset_unlocked_r+0x2d0>)
 8014fe6:	4eb1      	ldr	r6, [pc, #708]	; (80152ac <_tzset_unlocked_r+0x2d4>)
 8014fe8:	4605      	mov	r5, r0
 8014fea:	4638      	mov	r0, r7
 8014fec:	f000 fad8 	bl	80155a0 <_getenv_r>
 8014ff0:	4604      	mov	r4, r0
 8014ff2:	b970      	cbnz	r0, 8015012 <_tzset_unlocked_r+0x3a>
 8014ff4:	4bae      	ldr	r3, [pc, #696]	; (80152b0 <_tzset_unlocked_r+0x2d8>)
 8014ff6:	4aaf      	ldr	r2, [pc, #700]	; (80152b4 <_tzset_unlocked_r+0x2dc>)
 8014ff8:	6018      	str	r0, [r3, #0]
 8014ffa:	4baf      	ldr	r3, [pc, #700]	; (80152b8 <_tzset_unlocked_r+0x2e0>)
 8014ffc:	6018      	str	r0, [r3, #0]
 8014ffe:	4baf      	ldr	r3, [pc, #700]	; (80152bc <_tzset_unlocked_r+0x2e4>)
 8015000:	6830      	ldr	r0, [r6, #0]
 8015002:	e9c3 2200 	strd	r2, r2, [r3]
 8015006:	f7ff f9f1 	bl	80143ec <free>
 801500a:	6034      	str	r4, [r6, #0]
 801500c:	b00d      	add	sp, #52	; 0x34
 801500e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015012:	6831      	ldr	r1, [r6, #0]
 8015014:	2900      	cmp	r1, #0
 8015016:	d162      	bne.n	80150de <_tzset_unlocked_r+0x106>
 8015018:	6830      	ldr	r0, [r6, #0]
 801501a:	f7ff f9e7 	bl	80143ec <free>
 801501e:	4620      	mov	r0, r4
 8015020:	f7eb f8e0 	bl	80001e4 <strlen>
 8015024:	1c41      	adds	r1, r0, #1
 8015026:	4638      	mov	r0, r7
 8015028:	f7ff fcdc 	bl	80149e4 <_malloc_r>
 801502c:	6030      	str	r0, [r6, #0]
 801502e:	2800      	cmp	r0, #0
 8015030:	d15a      	bne.n	80150e8 <_tzset_unlocked_r+0x110>
 8015032:	7823      	ldrb	r3, [r4, #0]
 8015034:	4aa2      	ldr	r2, [pc, #648]	; (80152c0 <_tzset_unlocked_r+0x2e8>)
 8015036:	49a3      	ldr	r1, [pc, #652]	; (80152c4 <_tzset_unlocked_r+0x2ec>)
 8015038:	2b3a      	cmp	r3, #58	; 0x3a
 801503a:	bf08      	it	eq
 801503c:	3401      	addeq	r4, #1
 801503e:	ae0a      	add	r6, sp, #40	; 0x28
 8015040:	4633      	mov	r3, r6
 8015042:	4620      	mov	r0, r4
 8015044:	f000 ff32 	bl	8015eac <siscanf>
 8015048:	2800      	cmp	r0, #0
 801504a:	dddf      	ble.n	801500c <_tzset_unlocked_r+0x34>
 801504c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801504e:	18e7      	adds	r7, r4, r3
 8015050:	5ce3      	ldrb	r3, [r4, r3]
 8015052:	2b2d      	cmp	r3, #45	; 0x2d
 8015054:	d14c      	bne.n	80150f0 <_tzset_unlocked_r+0x118>
 8015056:	3701      	adds	r7, #1
 8015058:	f04f 38ff 	mov.w	r8, #4294967295
 801505c:	f10d 0a20 	add.w	sl, sp, #32
 8015060:	f10d 0b1e 	add.w	fp, sp, #30
 8015064:	2400      	movs	r4, #0
 8015066:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801506a:	4997      	ldr	r1, [pc, #604]	; (80152c8 <_tzset_unlocked_r+0x2f0>)
 801506c:	9603      	str	r6, [sp, #12]
 801506e:	f8cd b000 	str.w	fp, [sp]
 8015072:	4633      	mov	r3, r6
 8015074:	aa07      	add	r2, sp, #28
 8015076:	4638      	mov	r0, r7
 8015078:	f8ad 401e 	strh.w	r4, [sp, #30]
 801507c:	f8ad 4020 	strh.w	r4, [sp, #32]
 8015080:	f000 ff14 	bl	8015eac <siscanf>
 8015084:	42a0      	cmp	r0, r4
 8015086:	ddc1      	ble.n	801500c <_tzset_unlocked_r+0x34>
 8015088:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801508c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015090:	f8df 9240 	ldr.w	r9, [pc, #576]	; 80152d4 <_tzset_unlocked_r+0x2fc>
 8015094:	213c      	movs	r1, #60	; 0x3c
 8015096:	fb01 3302 	mla	r3, r1, r2, r3
 801509a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801509e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80150a2:	fb01 3302 	mla	r3, r1, r2, r3
 80150a6:	fb08 f303 	mul.w	r3, r8, r3
 80150aa:	f8df 8210 	ldr.w	r8, [pc, #528]	; 80152bc <_tzset_unlocked_r+0x2e4>
 80150ae:	62ab      	str	r3, [r5, #40]	; 0x28
 80150b0:	4b83      	ldr	r3, [pc, #524]	; (80152c0 <_tzset_unlocked_r+0x2e8>)
 80150b2:	f8c8 3000 	str.w	r3, [r8]
 80150b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150b8:	4982      	ldr	r1, [pc, #520]	; (80152c4 <_tzset_unlocked_r+0x2ec>)
 80150ba:	441f      	add	r7, r3
 80150bc:	464a      	mov	r2, r9
 80150be:	4633      	mov	r3, r6
 80150c0:	4638      	mov	r0, r7
 80150c2:	f000 fef3 	bl	8015eac <siscanf>
 80150c6:	42a0      	cmp	r0, r4
 80150c8:	dc18      	bgt.n	80150fc <_tzset_unlocked_r+0x124>
 80150ca:	f8d8 3000 	ldr.w	r3, [r8]
 80150ce:	f8c8 3004 	str.w	r3, [r8, #4]
 80150d2:	4b77      	ldr	r3, [pc, #476]	; (80152b0 <_tzset_unlocked_r+0x2d8>)
 80150d4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80150d6:	601a      	str	r2, [r3, #0]
 80150d8:	4b77      	ldr	r3, [pc, #476]	; (80152b8 <_tzset_unlocked_r+0x2e0>)
 80150da:	601c      	str	r4, [r3, #0]
 80150dc:	e796      	b.n	801500c <_tzset_unlocked_r+0x34>
 80150de:	f7eb f877 	bl	80001d0 <strcmp>
 80150e2:	2800      	cmp	r0, #0
 80150e4:	d198      	bne.n	8015018 <_tzset_unlocked_r+0x40>
 80150e6:	e791      	b.n	801500c <_tzset_unlocked_r+0x34>
 80150e8:	4621      	mov	r1, r4
 80150ea:	f000 ff0b 	bl	8015f04 <strcpy>
 80150ee:	e7a0      	b.n	8015032 <_tzset_unlocked_r+0x5a>
 80150f0:	2b2b      	cmp	r3, #43	; 0x2b
 80150f2:	bf08      	it	eq
 80150f4:	3701      	addeq	r7, #1
 80150f6:	f04f 0801 	mov.w	r8, #1
 80150fa:	e7af      	b.n	801505c <_tzset_unlocked_r+0x84>
 80150fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150fe:	f8c8 9004 	str.w	r9, [r8, #4]
 8015102:	18fc      	adds	r4, r7, r3
 8015104:	5cfb      	ldrb	r3, [r7, r3]
 8015106:	2b2d      	cmp	r3, #45	; 0x2d
 8015108:	f040 808b 	bne.w	8015222 <_tzset_unlocked_r+0x24a>
 801510c:	3401      	adds	r4, #1
 801510e:	f04f 37ff 	mov.w	r7, #4294967295
 8015112:	2300      	movs	r3, #0
 8015114:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015118:	f8ad 301e 	strh.w	r3, [sp, #30]
 801511c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015120:	930a      	str	r3, [sp, #40]	; 0x28
 8015122:	e9cd a602 	strd	sl, r6, [sp, #8]
 8015126:	e9cd b600 	strd	fp, r6, [sp]
 801512a:	4967      	ldr	r1, [pc, #412]	; (80152c8 <_tzset_unlocked_r+0x2f0>)
 801512c:	4633      	mov	r3, r6
 801512e:	aa07      	add	r2, sp, #28
 8015130:	4620      	mov	r0, r4
 8015132:	f000 febb 	bl	8015eac <siscanf>
 8015136:	2800      	cmp	r0, #0
 8015138:	dc78      	bgt.n	801522c <_tzset_unlocked_r+0x254>
 801513a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801513c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8015140:	652b      	str	r3, [r5, #80]	; 0x50
 8015142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015144:	462f      	mov	r7, r5
 8015146:	441c      	add	r4, r3
 8015148:	f04f 0900 	mov.w	r9, #0
 801514c:	7823      	ldrb	r3, [r4, #0]
 801514e:	2b2c      	cmp	r3, #44	; 0x2c
 8015150:	bf08      	it	eq
 8015152:	3401      	addeq	r4, #1
 8015154:	f894 8000 	ldrb.w	r8, [r4]
 8015158:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801515c:	d178      	bne.n	8015250 <_tzset_unlocked_r+0x278>
 801515e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8015162:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8015166:	ab09      	add	r3, sp, #36	; 0x24
 8015168:	9300      	str	r3, [sp, #0]
 801516a:	4958      	ldr	r1, [pc, #352]	; (80152cc <_tzset_unlocked_r+0x2f4>)
 801516c:	9603      	str	r6, [sp, #12]
 801516e:	4633      	mov	r3, r6
 8015170:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8015174:	4620      	mov	r0, r4
 8015176:	f000 fe99 	bl	8015eac <siscanf>
 801517a:	2803      	cmp	r0, #3
 801517c:	f47f af46 	bne.w	801500c <_tzset_unlocked_r+0x34>
 8015180:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8015184:	1e4b      	subs	r3, r1, #1
 8015186:	2b0b      	cmp	r3, #11
 8015188:	f63f af40 	bhi.w	801500c <_tzset_unlocked_r+0x34>
 801518c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8015190:	1e53      	subs	r3, r2, #1
 8015192:	2b04      	cmp	r3, #4
 8015194:	f63f af3a 	bhi.w	801500c <_tzset_unlocked_r+0x34>
 8015198:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801519c:	2b06      	cmp	r3, #6
 801519e:	f63f af35 	bhi.w	801500c <_tzset_unlocked_r+0x34>
 80151a2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80151a6:	f887 8008 	strb.w	r8, [r7, #8]
 80151aa:	617b      	str	r3, [r7, #20]
 80151ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151ae:	eb04 0803 	add.w	r8, r4, r3
 80151b2:	2302      	movs	r3, #2
 80151b4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80151b8:	2300      	movs	r3, #0
 80151ba:	f8ad 301e 	strh.w	r3, [sp, #30]
 80151be:	f8ad 3020 	strh.w	r3, [sp, #32]
 80151c2:	930a      	str	r3, [sp, #40]	; 0x28
 80151c4:	f898 3000 	ldrb.w	r3, [r8]
 80151c8:	2b2f      	cmp	r3, #47	; 0x2f
 80151ca:	d109      	bne.n	80151e0 <_tzset_unlocked_r+0x208>
 80151cc:	e9cd a602 	strd	sl, r6, [sp, #8]
 80151d0:	e9cd b600 	strd	fp, r6, [sp]
 80151d4:	493e      	ldr	r1, [pc, #248]	; (80152d0 <_tzset_unlocked_r+0x2f8>)
 80151d6:	4633      	mov	r3, r6
 80151d8:	aa07      	add	r2, sp, #28
 80151da:	4640      	mov	r0, r8
 80151dc:	f000 fe66 	bl	8015eac <siscanf>
 80151e0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80151e4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80151e8:	213c      	movs	r1, #60	; 0x3c
 80151ea:	fb01 3302 	mla	r3, r1, r2, r3
 80151ee:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80151f2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80151f6:	fb01 3302 	mla	r3, r1, r2, r3
 80151fa:	61bb      	str	r3, [r7, #24]
 80151fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80151fe:	3728      	adds	r7, #40	; 0x28
 8015200:	4444      	add	r4, r8
 8015202:	f1b9 0f00 	cmp.w	r9, #0
 8015206:	d020      	beq.n	801524a <_tzset_unlocked_r+0x272>
 8015208:	6868      	ldr	r0, [r5, #4]
 801520a:	f7ff fe29 	bl	8014e60 <__tzcalc_limits>
 801520e:	4b28      	ldr	r3, [pc, #160]	; (80152b0 <_tzset_unlocked_r+0x2d8>)
 8015210:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8015212:	601a      	str	r2, [r3, #0]
 8015214:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8015216:	1a9b      	subs	r3, r3, r2
 8015218:	4a27      	ldr	r2, [pc, #156]	; (80152b8 <_tzset_unlocked_r+0x2e0>)
 801521a:	bf18      	it	ne
 801521c:	2301      	movne	r3, #1
 801521e:	6013      	str	r3, [r2, #0]
 8015220:	e6f4      	b.n	801500c <_tzset_unlocked_r+0x34>
 8015222:	2b2b      	cmp	r3, #43	; 0x2b
 8015224:	bf08      	it	eq
 8015226:	3401      	addeq	r4, #1
 8015228:	2701      	movs	r7, #1
 801522a:	e772      	b.n	8015112 <_tzset_unlocked_r+0x13a>
 801522c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8015230:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015234:	213c      	movs	r1, #60	; 0x3c
 8015236:	fb01 3302 	mla	r3, r1, r2, r3
 801523a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801523e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8015242:	fb01 3302 	mla	r3, r1, r2, r3
 8015246:	437b      	muls	r3, r7
 8015248:	e77a      	b.n	8015140 <_tzset_unlocked_r+0x168>
 801524a:	f04f 0901 	mov.w	r9, #1
 801524e:	e77d      	b.n	801514c <_tzset_unlocked_r+0x174>
 8015250:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8015254:	bf06      	itte	eq
 8015256:	3401      	addeq	r4, #1
 8015258:	4643      	moveq	r3, r8
 801525a:	2344      	movne	r3, #68	; 0x44
 801525c:	220a      	movs	r2, #10
 801525e:	a90b      	add	r1, sp, #44	; 0x2c
 8015260:	4620      	mov	r0, r4
 8015262:	9305      	str	r3, [sp, #20]
 8015264:	f000 fede 	bl	8016024 <strtoul>
 8015268:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801526c:	9b05      	ldr	r3, [sp, #20]
 801526e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8015272:	45a0      	cmp	r8, r4
 8015274:	d114      	bne.n	80152a0 <_tzset_unlocked_r+0x2c8>
 8015276:	234d      	movs	r3, #77	; 0x4d
 8015278:	f1b9 0f00 	cmp.w	r9, #0
 801527c:	d107      	bne.n	801528e <_tzset_unlocked_r+0x2b6>
 801527e:	722b      	strb	r3, [r5, #8]
 8015280:	2103      	movs	r1, #3
 8015282:	2302      	movs	r3, #2
 8015284:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8015288:	f8c5 9014 	str.w	r9, [r5, #20]
 801528c:	e791      	b.n	80151b2 <_tzset_unlocked_r+0x1da>
 801528e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8015292:	220b      	movs	r2, #11
 8015294:	2301      	movs	r3, #1
 8015296:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801529a:	2300      	movs	r3, #0
 801529c:	63eb      	str	r3, [r5, #60]	; 0x3c
 801529e:	e788      	b.n	80151b2 <_tzset_unlocked_r+0x1da>
 80152a0:	b280      	uxth	r0, r0
 80152a2:	723b      	strb	r3, [r7, #8]
 80152a4:	6178      	str	r0, [r7, #20]
 80152a6:	e784      	b.n	80151b2 <_tzset_unlocked_r+0x1da>
 80152a8:	08017500 	.word	0x08017500
 80152ac:	2000bf78 	.word	0x2000bf78
 80152b0:	2000bf80 	.word	0x2000bf80
 80152b4:	08017503 	.word	0x08017503
 80152b8:	2000bf7c 	.word	0x2000bf7c
 80152bc:	20000318 	.word	0x20000318
 80152c0:	2000bf6b 	.word	0x2000bf6b
 80152c4:	08017507 	.word	0x08017507
 80152c8:	0801752a 	.word	0x0801752a
 80152cc:	08017516 	.word	0x08017516
 80152d0:	08017529 	.word	0x08017529
 80152d4:	2000bf60 	.word	0x2000bf60

080152d8 <_write_r>:
 80152d8:	b538      	push	{r3, r4, r5, lr}
 80152da:	4d07      	ldr	r5, [pc, #28]	; (80152f8 <_write_r+0x20>)
 80152dc:	4604      	mov	r4, r0
 80152de:	4608      	mov	r0, r1
 80152e0:	4611      	mov	r1, r2
 80152e2:	2200      	movs	r2, #0
 80152e4:	602a      	str	r2, [r5, #0]
 80152e6:	461a      	mov	r2, r3
 80152e8:	f7ed fbb9 	bl	8002a5e <_write>
 80152ec:	1c43      	adds	r3, r0, #1
 80152ee:	d102      	bne.n	80152f6 <_write_r+0x1e>
 80152f0:	682b      	ldr	r3, [r5, #0]
 80152f2:	b103      	cbz	r3, 80152f6 <_write_r+0x1e>
 80152f4:	6023      	str	r3, [r4, #0]
 80152f6:	bd38      	pop	{r3, r4, r5, pc}
 80152f8:	2000bf5c 	.word	0x2000bf5c

080152fc <__assert_func>:
 80152fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80152fe:	4614      	mov	r4, r2
 8015300:	461a      	mov	r2, r3
 8015302:	4b09      	ldr	r3, [pc, #36]	; (8015328 <__assert_func+0x2c>)
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	4605      	mov	r5, r0
 8015308:	68d8      	ldr	r0, [r3, #12]
 801530a:	b14c      	cbz	r4, 8015320 <__assert_func+0x24>
 801530c:	4b07      	ldr	r3, [pc, #28]	; (801532c <__assert_func+0x30>)
 801530e:	9100      	str	r1, [sp, #0]
 8015310:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015314:	4906      	ldr	r1, [pc, #24]	; (8015330 <__assert_func+0x34>)
 8015316:	462b      	mov	r3, r5
 8015318:	f000 f8f4 	bl	8015504 <fiprintf>
 801531c:	f000 ff4c 	bl	80161b8 <abort>
 8015320:	4b04      	ldr	r3, [pc, #16]	; (8015334 <__assert_func+0x38>)
 8015322:	461c      	mov	r4, r3
 8015324:	e7f3      	b.n	801530e <__assert_func+0x12>
 8015326:	bf00      	nop
 8015328:	200002b4 	.word	0x200002b4
 801532c:	0801753c 	.word	0x0801753c
 8015330:	08017549 	.word	0x08017549
 8015334:	08017577 	.word	0x08017577

08015338 <_close_r>:
 8015338:	b538      	push	{r3, r4, r5, lr}
 801533a:	4d06      	ldr	r5, [pc, #24]	; (8015354 <_close_r+0x1c>)
 801533c:	2300      	movs	r3, #0
 801533e:	4604      	mov	r4, r0
 8015340:	4608      	mov	r0, r1
 8015342:	602b      	str	r3, [r5, #0]
 8015344:	f7ed fba7 	bl	8002a96 <_close>
 8015348:	1c43      	adds	r3, r0, #1
 801534a:	d102      	bne.n	8015352 <_close_r+0x1a>
 801534c:	682b      	ldr	r3, [r5, #0]
 801534e:	b103      	cbz	r3, 8015352 <_close_r+0x1a>
 8015350:	6023      	str	r3, [r4, #0]
 8015352:	bd38      	pop	{r3, r4, r5, pc}
 8015354:	2000bf5c 	.word	0x2000bf5c

08015358 <div>:
 8015358:	2900      	cmp	r1, #0
 801535a:	b510      	push	{r4, lr}
 801535c:	fb91 f4f2 	sdiv	r4, r1, r2
 8015360:	fb02 1314 	mls	r3, r2, r4, r1
 8015364:	db06      	blt.n	8015374 <div+0x1c>
 8015366:	2b00      	cmp	r3, #0
 8015368:	da01      	bge.n	801536e <div+0x16>
 801536a:	3401      	adds	r4, #1
 801536c:	1a9b      	subs	r3, r3, r2
 801536e:	e9c0 4300 	strd	r4, r3, [r0]
 8015372:	bd10      	pop	{r4, pc}
 8015374:	2b00      	cmp	r3, #0
 8015376:	bfc4      	itt	gt
 8015378:	f104 34ff 	addgt.w	r4, r4, #4294967295
 801537c:	189b      	addgt	r3, r3, r2
 801537e:	e7f6      	b.n	801536e <div+0x16>

08015380 <__sflush_r>:
 8015380:	898a      	ldrh	r2, [r1, #12]
 8015382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015386:	4605      	mov	r5, r0
 8015388:	0710      	lsls	r0, r2, #28
 801538a:	460c      	mov	r4, r1
 801538c:	d458      	bmi.n	8015440 <__sflush_r+0xc0>
 801538e:	684b      	ldr	r3, [r1, #4]
 8015390:	2b00      	cmp	r3, #0
 8015392:	dc05      	bgt.n	80153a0 <__sflush_r+0x20>
 8015394:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015396:	2b00      	cmp	r3, #0
 8015398:	dc02      	bgt.n	80153a0 <__sflush_r+0x20>
 801539a:	2000      	movs	r0, #0
 801539c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80153a2:	2e00      	cmp	r6, #0
 80153a4:	d0f9      	beq.n	801539a <__sflush_r+0x1a>
 80153a6:	2300      	movs	r3, #0
 80153a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80153ac:	682f      	ldr	r7, [r5, #0]
 80153ae:	602b      	str	r3, [r5, #0]
 80153b0:	d032      	beq.n	8015418 <__sflush_r+0x98>
 80153b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80153b4:	89a3      	ldrh	r3, [r4, #12]
 80153b6:	075a      	lsls	r2, r3, #29
 80153b8:	d505      	bpl.n	80153c6 <__sflush_r+0x46>
 80153ba:	6863      	ldr	r3, [r4, #4]
 80153bc:	1ac0      	subs	r0, r0, r3
 80153be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80153c0:	b10b      	cbz	r3, 80153c6 <__sflush_r+0x46>
 80153c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80153c4:	1ac0      	subs	r0, r0, r3
 80153c6:	2300      	movs	r3, #0
 80153c8:	4602      	mov	r2, r0
 80153ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80153cc:	6a21      	ldr	r1, [r4, #32]
 80153ce:	4628      	mov	r0, r5
 80153d0:	47b0      	blx	r6
 80153d2:	1c43      	adds	r3, r0, #1
 80153d4:	89a3      	ldrh	r3, [r4, #12]
 80153d6:	d106      	bne.n	80153e6 <__sflush_r+0x66>
 80153d8:	6829      	ldr	r1, [r5, #0]
 80153da:	291d      	cmp	r1, #29
 80153dc:	d82c      	bhi.n	8015438 <__sflush_r+0xb8>
 80153de:	4a2a      	ldr	r2, [pc, #168]	; (8015488 <__sflush_r+0x108>)
 80153e0:	40ca      	lsrs	r2, r1
 80153e2:	07d6      	lsls	r6, r2, #31
 80153e4:	d528      	bpl.n	8015438 <__sflush_r+0xb8>
 80153e6:	2200      	movs	r2, #0
 80153e8:	6062      	str	r2, [r4, #4]
 80153ea:	04d9      	lsls	r1, r3, #19
 80153ec:	6922      	ldr	r2, [r4, #16]
 80153ee:	6022      	str	r2, [r4, #0]
 80153f0:	d504      	bpl.n	80153fc <__sflush_r+0x7c>
 80153f2:	1c42      	adds	r2, r0, #1
 80153f4:	d101      	bne.n	80153fa <__sflush_r+0x7a>
 80153f6:	682b      	ldr	r3, [r5, #0]
 80153f8:	b903      	cbnz	r3, 80153fc <__sflush_r+0x7c>
 80153fa:	6560      	str	r0, [r4, #84]	; 0x54
 80153fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80153fe:	602f      	str	r7, [r5, #0]
 8015400:	2900      	cmp	r1, #0
 8015402:	d0ca      	beq.n	801539a <__sflush_r+0x1a>
 8015404:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015408:	4299      	cmp	r1, r3
 801540a:	d002      	beq.n	8015412 <__sflush_r+0x92>
 801540c:	4628      	mov	r0, r5
 801540e:	f7ff fa7d 	bl	801490c <_free_r>
 8015412:	2000      	movs	r0, #0
 8015414:	6360      	str	r0, [r4, #52]	; 0x34
 8015416:	e7c1      	b.n	801539c <__sflush_r+0x1c>
 8015418:	6a21      	ldr	r1, [r4, #32]
 801541a:	2301      	movs	r3, #1
 801541c:	4628      	mov	r0, r5
 801541e:	47b0      	blx	r6
 8015420:	1c41      	adds	r1, r0, #1
 8015422:	d1c7      	bne.n	80153b4 <__sflush_r+0x34>
 8015424:	682b      	ldr	r3, [r5, #0]
 8015426:	2b00      	cmp	r3, #0
 8015428:	d0c4      	beq.n	80153b4 <__sflush_r+0x34>
 801542a:	2b1d      	cmp	r3, #29
 801542c:	d001      	beq.n	8015432 <__sflush_r+0xb2>
 801542e:	2b16      	cmp	r3, #22
 8015430:	d101      	bne.n	8015436 <__sflush_r+0xb6>
 8015432:	602f      	str	r7, [r5, #0]
 8015434:	e7b1      	b.n	801539a <__sflush_r+0x1a>
 8015436:	89a3      	ldrh	r3, [r4, #12]
 8015438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801543c:	81a3      	strh	r3, [r4, #12]
 801543e:	e7ad      	b.n	801539c <__sflush_r+0x1c>
 8015440:	690f      	ldr	r7, [r1, #16]
 8015442:	2f00      	cmp	r7, #0
 8015444:	d0a9      	beq.n	801539a <__sflush_r+0x1a>
 8015446:	0793      	lsls	r3, r2, #30
 8015448:	680e      	ldr	r6, [r1, #0]
 801544a:	bf08      	it	eq
 801544c:	694b      	ldreq	r3, [r1, #20]
 801544e:	600f      	str	r7, [r1, #0]
 8015450:	bf18      	it	ne
 8015452:	2300      	movne	r3, #0
 8015454:	eba6 0807 	sub.w	r8, r6, r7
 8015458:	608b      	str	r3, [r1, #8]
 801545a:	f1b8 0f00 	cmp.w	r8, #0
 801545e:	dd9c      	ble.n	801539a <__sflush_r+0x1a>
 8015460:	6a21      	ldr	r1, [r4, #32]
 8015462:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015464:	4643      	mov	r3, r8
 8015466:	463a      	mov	r2, r7
 8015468:	4628      	mov	r0, r5
 801546a:	47b0      	blx	r6
 801546c:	2800      	cmp	r0, #0
 801546e:	dc06      	bgt.n	801547e <__sflush_r+0xfe>
 8015470:	89a3      	ldrh	r3, [r4, #12]
 8015472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015476:	81a3      	strh	r3, [r4, #12]
 8015478:	f04f 30ff 	mov.w	r0, #4294967295
 801547c:	e78e      	b.n	801539c <__sflush_r+0x1c>
 801547e:	4407      	add	r7, r0
 8015480:	eba8 0800 	sub.w	r8, r8, r0
 8015484:	e7e9      	b.n	801545a <__sflush_r+0xda>
 8015486:	bf00      	nop
 8015488:	20400001 	.word	0x20400001

0801548c <_fflush_r>:
 801548c:	b538      	push	{r3, r4, r5, lr}
 801548e:	690b      	ldr	r3, [r1, #16]
 8015490:	4605      	mov	r5, r0
 8015492:	460c      	mov	r4, r1
 8015494:	b913      	cbnz	r3, 801549c <_fflush_r+0x10>
 8015496:	2500      	movs	r5, #0
 8015498:	4628      	mov	r0, r5
 801549a:	bd38      	pop	{r3, r4, r5, pc}
 801549c:	b118      	cbz	r0, 80154a6 <_fflush_r+0x1a>
 801549e:	6983      	ldr	r3, [r0, #24]
 80154a0:	b90b      	cbnz	r3, 80154a6 <_fflush_r+0x1a>
 80154a2:	f7fe fed3 	bl	801424c <__sinit>
 80154a6:	4b14      	ldr	r3, [pc, #80]	; (80154f8 <_fflush_r+0x6c>)
 80154a8:	429c      	cmp	r4, r3
 80154aa:	d11b      	bne.n	80154e4 <_fflush_r+0x58>
 80154ac:	686c      	ldr	r4, [r5, #4]
 80154ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d0ef      	beq.n	8015496 <_fflush_r+0xa>
 80154b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80154b8:	07d0      	lsls	r0, r2, #31
 80154ba:	d404      	bmi.n	80154c6 <_fflush_r+0x3a>
 80154bc:	0599      	lsls	r1, r3, #22
 80154be:	d402      	bmi.n	80154c6 <_fflush_r+0x3a>
 80154c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80154c2:	f7fe ff87 	bl	80143d4 <__retarget_lock_acquire_recursive>
 80154c6:	4628      	mov	r0, r5
 80154c8:	4621      	mov	r1, r4
 80154ca:	f7ff ff59 	bl	8015380 <__sflush_r>
 80154ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80154d0:	07da      	lsls	r2, r3, #31
 80154d2:	4605      	mov	r5, r0
 80154d4:	d4e0      	bmi.n	8015498 <_fflush_r+0xc>
 80154d6:	89a3      	ldrh	r3, [r4, #12]
 80154d8:	059b      	lsls	r3, r3, #22
 80154da:	d4dd      	bmi.n	8015498 <_fflush_r+0xc>
 80154dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80154de:	f7fe ff7b 	bl	80143d8 <__retarget_lock_release_recursive>
 80154e2:	e7d9      	b.n	8015498 <_fflush_r+0xc>
 80154e4:	4b05      	ldr	r3, [pc, #20]	; (80154fc <_fflush_r+0x70>)
 80154e6:	429c      	cmp	r4, r3
 80154e8:	d101      	bne.n	80154ee <_fflush_r+0x62>
 80154ea:	68ac      	ldr	r4, [r5, #8]
 80154ec:	e7df      	b.n	80154ae <_fflush_r+0x22>
 80154ee:	4b04      	ldr	r3, [pc, #16]	; (8015500 <_fflush_r+0x74>)
 80154f0:	429c      	cmp	r4, r3
 80154f2:	bf08      	it	eq
 80154f4:	68ec      	ldreq	r4, [r5, #12]
 80154f6:	e7da      	b.n	80154ae <_fflush_r+0x22>
 80154f8:	080173e8 	.word	0x080173e8
 80154fc:	08017408 	.word	0x08017408
 8015500:	080173c8 	.word	0x080173c8

08015504 <fiprintf>:
 8015504:	b40e      	push	{r1, r2, r3}
 8015506:	b503      	push	{r0, r1, lr}
 8015508:	4601      	mov	r1, r0
 801550a:	ab03      	add	r3, sp, #12
 801550c:	4805      	ldr	r0, [pc, #20]	; (8015524 <fiprintf+0x20>)
 801550e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015512:	6800      	ldr	r0, [r0, #0]
 8015514:	9301      	str	r3, [sp, #4]
 8015516:	f000 f9f3 	bl	8015900 <_vfiprintf_r>
 801551a:	b002      	add	sp, #8
 801551c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015520:	b003      	add	sp, #12
 8015522:	4770      	bx	lr
 8015524:	200002b4 	.word	0x200002b4

08015528 <_findenv_r>:
 8015528:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801552c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801559c <_findenv_r+0x74>
 8015530:	4607      	mov	r7, r0
 8015532:	4689      	mov	r9, r1
 8015534:	4616      	mov	r6, r2
 8015536:	f000 fe47 	bl	80161c8 <__env_lock>
 801553a:	f8da 4000 	ldr.w	r4, [sl]
 801553e:	b134      	cbz	r4, 801554e <_findenv_r+0x26>
 8015540:	464b      	mov	r3, r9
 8015542:	4698      	mov	r8, r3
 8015544:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015548:	b13a      	cbz	r2, 801555a <_findenv_r+0x32>
 801554a:	2a3d      	cmp	r2, #61	; 0x3d
 801554c:	d1f9      	bne.n	8015542 <_findenv_r+0x1a>
 801554e:	4638      	mov	r0, r7
 8015550:	f000 fe40 	bl	80161d4 <__env_unlock>
 8015554:	2000      	movs	r0, #0
 8015556:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801555a:	eba8 0809 	sub.w	r8, r8, r9
 801555e:	46a3      	mov	fp, r4
 8015560:	f854 0b04 	ldr.w	r0, [r4], #4
 8015564:	2800      	cmp	r0, #0
 8015566:	d0f2      	beq.n	801554e <_findenv_r+0x26>
 8015568:	4642      	mov	r2, r8
 801556a:	4649      	mov	r1, r9
 801556c:	f000 fcd2 	bl	8015f14 <strncmp>
 8015570:	2800      	cmp	r0, #0
 8015572:	d1f4      	bne.n	801555e <_findenv_r+0x36>
 8015574:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015578:	eb03 0508 	add.w	r5, r3, r8
 801557c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8015580:	2b3d      	cmp	r3, #61	; 0x3d
 8015582:	d1ec      	bne.n	801555e <_findenv_r+0x36>
 8015584:	f8da 3000 	ldr.w	r3, [sl]
 8015588:	ebab 0303 	sub.w	r3, fp, r3
 801558c:	109b      	asrs	r3, r3, #2
 801558e:	4638      	mov	r0, r7
 8015590:	6033      	str	r3, [r6, #0]
 8015592:	f000 fe1f 	bl	80161d4 <__env_unlock>
 8015596:	1c68      	adds	r0, r5, #1
 8015598:	e7dd      	b.n	8015556 <_findenv_r+0x2e>
 801559a:	bf00      	nop
 801559c:	20000230 	.word	0x20000230

080155a0 <_getenv_r>:
 80155a0:	b507      	push	{r0, r1, r2, lr}
 80155a2:	aa01      	add	r2, sp, #4
 80155a4:	f7ff ffc0 	bl	8015528 <_findenv_r>
 80155a8:	b003      	add	sp, #12
 80155aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080155b0 <__gettzinfo>:
 80155b0:	4800      	ldr	r0, [pc, #0]	; (80155b4 <__gettzinfo+0x4>)
 80155b2:	4770      	bx	lr
 80155b4:	20000320 	.word	0x20000320

080155b8 <_lseek_r>:
 80155b8:	b538      	push	{r3, r4, r5, lr}
 80155ba:	4d07      	ldr	r5, [pc, #28]	; (80155d8 <_lseek_r+0x20>)
 80155bc:	4604      	mov	r4, r0
 80155be:	4608      	mov	r0, r1
 80155c0:	4611      	mov	r1, r2
 80155c2:	2200      	movs	r2, #0
 80155c4:	602a      	str	r2, [r5, #0]
 80155c6:	461a      	mov	r2, r3
 80155c8:	f7ed fa8c 	bl	8002ae4 <_lseek>
 80155cc:	1c43      	adds	r3, r0, #1
 80155ce:	d102      	bne.n	80155d6 <_lseek_r+0x1e>
 80155d0:	682b      	ldr	r3, [r5, #0]
 80155d2:	b103      	cbz	r3, 80155d6 <_lseek_r+0x1e>
 80155d4:	6023      	str	r3, [r4, #0]
 80155d6:	bd38      	pop	{r3, r4, r5, pc}
 80155d8:	2000bf5c 	.word	0x2000bf5c

080155dc <__malloc_lock>:
 80155dc:	4801      	ldr	r0, [pc, #4]	; (80155e4 <__malloc_lock+0x8>)
 80155de:	f7fe bef9 	b.w	80143d4 <__retarget_lock_acquire_recursive>
 80155e2:	bf00      	nop
 80155e4:	2000bf4d 	.word	0x2000bf4d

080155e8 <__malloc_unlock>:
 80155e8:	4801      	ldr	r0, [pc, #4]	; (80155f0 <__malloc_unlock+0x8>)
 80155ea:	f7fe bef5 	b.w	80143d8 <__retarget_lock_release_recursive>
 80155ee:	bf00      	nop
 80155f0:	2000bf4d 	.word	0x2000bf4d

080155f4 <__ssputs_r>:
 80155f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155f8:	688e      	ldr	r6, [r1, #8]
 80155fa:	429e      	cmp	r6, r3
 80155fc:	4682      	mov	sl, r0
 80155fe:	460c      	mov	r4, r1
 8015600:	4690      	mov	r8, r2
 8015602:	461f      	mov	r7, r3
 8015604:	d838      	bhi.n	8015678 <__ssputs_r+0x84>
 8015606:	898a      	ldrh	r2, [r1, #12]
 8015608:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801560c:	d032      	beq.n	8015674 <__ssputs_r+0x80>
 801560e:	6825      	ldr	r5, [r4, #0]
 8015610:	6909      	ldr	r1, [r1, #16]
 8015612:	eba5 0901 	sub.w	r9, r5, r1
 8015616:	6965      	ldr	r5, [r4, #20]
 8015618:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801561c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015620:	3301      	adds	r3, #1
 8015622:	444b      	add	r3, r9
 8015624:	106d      	asrs	r5, r5, #1
 8015626:	429d      	cmp	r5, r3
 8015628:	bf38      	it	cc
 801562a:	461d      	movcc	r5, r3
 801562c:	0553      	lsls	r3, r2, #21
 801562e:	d531      	bpl.n	8015694 <__ssputs_r+0xa0>
 8015630:	4629      	mov	r1, r5
 8015632:	f7ff f9d7 	bl	80149e4 <_malloc_r>
 8015636:	4606      	mov	r6, r0
 8015638:	b950      	cbnz	r0, 8015650 <__ssputs_r+0x5c>
 801563a:	230c      	movs	r3, #12
 801563c:	f8ca 3000 	str.w	r3, [sl]
 8015640:	89a3      	ldrh	r3, [r4, #12]
 8015642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015646:	81a3      	strh	r3, [r4, #12]
 8015648:	f04f 30ff 	mov.w	r0, #4294967295
 801564c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015650:	6921      	ldr	r1, [r4, #16]
 8015652:	464a      	mov	r2, r9
 8015654:	f7fe fed2 	bl	80143fc <memcpy>
 8015658:	89a3      	ldrh	r3, [r4, #12]
 801565a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801565e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015662:	81a3      	strh	r3, [r4, #12]
 8015664:	6126      	str	r6, [r4, #16]
 8015666:	6165      	str	r5, [r4, #20]
 8015668:	444e      	add	r6, r9
 801566a:	eba5 0509 	sub.w	r5, r5, r9
 801566e:	6026      	str	r6, [r4, #0]
 8015670:	60a5      	str	r5, [r4, #8]
 8015672:	463e      	mov	r6, r7
 8015674:	42be      	cmp	r6, r7
 8015676:	d900      	bls.n	801567a <__ssputs_r+0x86>
 8015678:	463e      	mov	r6, r7
 801567a:	6820      	ldr	r0, [r4, #0]
 801567c:	4632      	mov	r2, r6
 801567e:	4641      	mov	r1, r8
 8015680:	f000 fe14 	bl	80162ac <memmove>
 8015684:	68a3      	ldr	r3, [r4, #8]
 8015686:	1b9b      	subs	r3, r3, r6
 8015688:	60a3      	str	r3, [r4, #8]
 801568a:	6823      	ldr	r3, [r4, #0]
 801568c:	4433      	add	r3, r6
 801568e:	6023      	str	r3, [r4, #0]
 8015690:	2000      	movs	r0, #0
 8015692:	e7db      	b.n	801564c <__ssputs_r+0x58>
 8015694:	462a      	mov	r2, r5
 8015696:	f000 fe23 	bl	80162e0 <_realloc_r>
 801569a:	4606      	mov	r6, r0
 801569c:	2800      	cmp	r0, #0
 801569e:	d1e1      	bne.n	8015664 <__ssputs_r+0x70>
 80156a0:	6921      	ldr	r1, [r4, #16]
 80156a2:	4650      	mov	r0, sl
 80156a4:	f7ff f932 	bl	801490c <_free_r>
 80156a8:	e7c7      	b.n	801563a <__ssputs_r+0x46>
	...

080156ac <_svfiprintf_r>:
 80156ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156b0:	4698      	mov	r8, r3
 80156b2:	898b      	ldrh	r3, [r1, #12]
 80156b4:	061b      	lsls	r3, r3, #24
 80156b6:	b09d      	sub	sp, #116	; 0x74
 80156b8:	4607      	mov	r7, r0
 80156ba:	460d      	mov	r5, r1
 80156bc:	4614      	mov	r4, r2
 80156be:	d50e      	bpl.n	80156de <_svfiprintf_r+0x32>
 80156c0:	690b      	ldr	r3, [r1, #16]
 80156c2:	b963      	cbnz	r3, 80156de <_svfiprintf_r+0x32>
 80156c4:	2140      	movs	r1, #64	; 0x40
 80156c6:	f7ff f98d 	bl	80149e4 <_malloc_r>
 80156ca:	6028      	str	r0, [r5, #0]
 80156cc:	6128      	str	r0, [r5, #16]
 80156ce:	b920      	cbnz	r0, 80156da <_svfiprintf_r+0x2e>
 80156d0:	230c      	movs	r3, #12
 80156d2:	603b      	str	r3, [r7, #0]
 80156d4:	f04f 30ff 	mov.w	r0, #4294967295
 80156d8:	e0d1      	b.n	801587e <_svfiprintf_r+0x1d2>
 80156da:	2340      	movs	r3, #64	; 0x40
 80156dc:	616b      	str	r3, [r5, #20]
 80156de:	2300      	movs	r3, #0
 80156e0:	9309      	str	r3, [sp, #36]	; 0x24
 80156e2:	2320      	movs	r3, #32
 80156e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80156e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80156ec:	2330      	movs	r3, #48	; 0x30
 80156ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015898 <_svfiprintf_r+0x1ec>
 80156f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80156f6:	f04f 0901 	mov.w	r9, #1
 80156fa:	4623      	mov	r3, r4
 80156fc:	469a      	mov	sl, r3
 80156fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015702:	b10a      	cbz	r2, 8015708 <_svfiprintf_r+0x5c>
 8015704:	2a25      	cmp	r2, #37	; 0x25
 8015706:	d1f9      	bne.n	80156fc <_svfiprintf_r+0x50>
 8015708:	ebba 0b04 	subs.w	fp, sl, r4
 801570c:	d00b      	beq.n	8015726 <_svfiprintf_r+0x7a>
 801570e:	465b      	mov	r3, fp
 8015710:	4622      	mov	r2, r4
 8015712:	4629      	mov	r1, r5
 8015714:	4638      	mov	r0, r7
 8015716:	f7ff ff6d 	bl	80155f4 <__ssputs_r>
 801571a:	3001      	adds	r0, #1
 801571c:	f000 80aa 	beq.w	8015874 <_svfiprintf_r+0x1c8>
 8015720:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015722:	445a      	add	r2, fp
 8015724:	9209      	str	r2, [sp, #36]	; 0x24
 8015726:	f89a 3000 	ldrb.w	r3, [sl]
 801572a:	2b00      	cmp	r3, #0
 801572c:	f000 80a2 	beq.w	8015874 <_svfiprintf_r+0x1c8>
 8015730:	2300      	movs	r3, #0
 8015732:	f04f 32ff 	mov.w	r2, #4294967295
 8015736:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801573a:	f10a 0a01 	add.w	sl, sl, #1
 801573e:	9304      	str	r3, [sp, #16]
 8015740:	9307      	str	r3, [sp, #28]
 8015742:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015746:	931a      	str	r3, [sp, #104]	; 0x68
 8015748:	4654      	mov	r4, sl
 801574a:	2205      	movs	r2, #5
 801574c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015750:	4851      	ldr	r0, [pc, #324]	; (8015898 <_svfiprintf_r+0x1ec>)
 8015752:	f7ea fd55 	bl	8000200 <memchr>
 8015756:	9a04      	ldr	r2, [sp, #16]
 8015758:	b9d8      	cbnz	r0, 8015792 <_svfiprintf_r+0xe6>
 801575a:	06d0      	lsls	r0, r2, #27
 801575c:	bf44      	itt	mi
 801575e:	2320      	movmi	r3, #32
 8015760:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015764:	0711      	lsls	r1, r2, #28
 8015766:	bf44      	itt	mi
 8015768:	232b      	movmi	r3, #43	; 0x2b
 801576a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801576e:	f89a 3000 	ldrb.w	r3, [sl]
 8015772:	2b2a      	cmp	r3, #42	; 0x2a
 8015774:	d015      	beq.n	80157a2 <_svfiprintf_r+0xf6>
 8015776:	9a07      	ldr	r2, [sp, #28]
 8015778:	4654      	mov	r4, sl
 801577a:	2000      	movs	r0, #0
 801577c:	f04f 0c0a 	mov.w	ip, #10
 8015780:	4621      	mov	r1, r4
 8015782:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015786:	3b30      	subs	r3, #48	; 0x30
 8015788:	2b09      	cmp	r3, #9
 801578a:	d94e      	bls.n	801582a <_svfiprintf_r+0x17e>
 801578c:	b1b0      	cbz	r0, 80157bc <_svfiprintf_r+0x110>
 801578e:	9207      	str	r2, [sp, #28]
 8015790:	e014      	b.n	80157bc <_svfiprintf_r+0x110>
 8015792:	eba0 0308 	sub.w	r3, r0, r8
 8015796:	fa09 f303 	lsl.w	r3, r9, r3
 801579a:	4313      	orrs	r3, r2
 801579c:	9304      	str	r3, [sp, #16]
 801579e:	46a2      	mov	sl, r4
 80157a0:	e7d2      	b.n	8015748 <_svfiprintf_r+0x9c>
 80157a2:	9b03      	ldr	r3, [sp, #12]
 80157a4:	1d19      	adds	r1, r3, #4
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	9103      	str	r1, [sp, #12]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	bfbb      	ittet	lt
 80157ae:	425b      	neglt	r3, r3
 80157b0:	f042 0202 	orrlt.w	r2, r2, #2
 80157b4:	9307      	strge	r3, [sp, #28]
 80157b6:	9307      	strlt	r3, [sp, #28]
 80157b8:	bfb8      	it	lt
 80157ba:	9204      	strlt	r2, [sp, #16]
 80157bc:	7823      	ldrb	r3, [r4, #0]
 80157be:	2b2e      	cmp	r3, #46	; 0x2e
 80157c0:	d10c      	bne.n	80157dc <_svfiprintf_r+0x130>
 80157c2:	7863      	ldrb	r3, [r4, #1]
 80157c4:	2b2a      	cmp	r3, #42	; 0x2a
 80157c6:	d135      	bne.n	8015834 <_svfiprintf_r+0x188>
 80157c8:	9b03      	ldr	r3, [sp, #12]
 80157ca:	1d1a      	adds	r2, r3, #4
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	9203      	str	r2, [sp, #12]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	bfb8      	it	lt
 80157d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80157d8:	3402      	adds	r4, #2
 80157da:	9305      	str	r3, [sp, #20]
 80157dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80158a8 <_svfiprintf_r+0x1fc>
 80157e0:	7821      	ldrb	r1, [r4, #0]
 80157e2:	2203      	movs	r2, #3
 80157e4:	4650      	mov	r0, sl
 80157e6:	f7ea fd0b 	bl	8000200 <memchr>
 80157ea:	b140      	cbz	r0, 80157fe <_svfiprintf_r+0x152>
 80157ec:	2340      	movs	r3, #64	; 0x40
 80157ee:	eba0 000a 	sub.w	r0, r0, sl
 80157f2:	fa03 f000 	lsl.w	r0, r3, r0
 80157f6:	9b04      	ldr	r3, [sp, #16]
 80157f8:	4303      	orrs	r3, r0
 80157fa:	3401      	adds	r4, #1
 80157fc:	9304      	str	r3, [sp, #16]
 80157fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015802:	4826      	ldr	r0, [pc, #152]	; (801589c <_svfiprintf_r+0x1f0>)
 8015804:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015808:	2206      	movs	r2, #6
 801580a:	f7ea fcf9 	bl	8000200 <memchr>
 801580e:	2800      	cmp	r0, #0
 8015810:	d038      	beq.n	8015884 <_svfiprintf_r+0x1d8>
 8015812:	4b23      	ldr	r3, [pc, #140]	; (80158a0 <_svfiprintf_r+0x1f4>)
 8015814:	bb1b      	cbnz	r3, 801585e <_svfiprintf_r+0x1b2>
 8015816:	9b03      	ldr	r3, [sp, #12]
 8015818:	3307      	adds	r3, #7
 801581a:	f023 0307 	bic.w	r3, r3, #7
 801581e:	3308      	adds	r3, #8
 8015820:	9303      	str	r3, [sp, #12]
 8015822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015824:	4433      	add	r3, r6
 8015826:	9309      	str	r3, [sp, #36]	; 0x24
 8015828:	e767      	b.n	80156fa <_svfiprintf_r+0x4e>
 801582a:	fb0c 3202 	mla	r2, ip, r2, r3
 801582e:	460c      	mov	r4, r1
 8015830:	2001      	movs	r0, #1
 8015832:	e7a5      	b.n	8015780 <_svfiprintf_r+0xd4>
 8015834:	2300      	movs	r3, #0
 8015836:	3401      	adds	r4, #1
 8015838:	9305      	str	r3, [sp, #20]
 801583a:	4619      	mov	r1, r3
 801583c:	f04f 0c0a 	mov.w	ip, #10
 8015840:	4620      	mov	r0, r4
 8015842:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015846:	3a30      	subs	r2, #48	; 0x30
 8015848:	2a09      	cmp	r2, #9
 801584a:	d903      	bls.n	8015854 <_svfiprintf_r+0x1a8>
 801584c:	2b00      	cmp	r3, #0
 801584e:	d0c5      	beq.n	80157dc <_svfiprintf_r+0x130>
 8015850:	9105      	str	r1, [sp, #20]
 8015852:	e7c3      	b.n	80157dc <_svfiprintf_r+0x130>
 8015854:	fb0c 2101 	mla	r1, ip, r1, r2
 8015858:	4604      	mov	r4, r0
 801585a:	2301      	movs	r3, #1
 801585c:	e7f0      	b.n	8015840 <_svfiprintf_r+0x194>
 801585e:	ab03      	add	r3, sp, #12
 8015860:	9300      	str	r3, [sp, #0]
 8015862:	462a      	mov	r2, r5
 8015864:	4b0f      	ldr	r3, [pc, #60]	; (80158a4 <_svfiprintf_r+0x1f8>)
 8015866:	a904      	add	r1, sp, #16
 8015868:	4638      	mov	r0, r7
 801586a:	f3af 8000 	nop.w
 801586e:	1c42      	adds	r2, r0, #1
 8015870:	4606      	mov	r6, r0
 8015872:	d1d6      	bne.n	8015822 <_svfiprintf_r+0x176>
 8015874:	89ab      	ldrh	r3, [r5, #12]
 8015876:	065b      	lsls	r3, r3, #25
 8015878:	f53f af2c 	bmi.w	80156d4 <_svfiprintf_r+0x28>
 801587c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801587e:	b01d      	add	sp, #116	; 0x74
 8015880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015884:	ab03      	add	r3, sp, #12
 8015886:	9300      	str	r3, [sp, #0]
 8015888:	462a      	mov	r2, r5
 801588a:	4b06      	ldr	r3, [pc, #24]	; (80158a4 <_svfiprintf_r+0x1f8>)
 801588c:	a904      	add	r1, sp, #16
 801588e:	4638      	mov	r0, r7
 8015890:	f000 f9d4 	bl	8015c3c <_printf_i>
 8015894:	e7eb      	b.n	801586e <_svfiprintf_r+0x1c2>
 8015896:	bf00      	nop
 8015898:	080176dc 	.word	0x080176dc
 801589c:	080176e6 	.word	0x080176e6
 80158a0:	00000000 	.word	0x00000000
 80158a4:	080155f5 	.word	0x080155f5
 80158a8:	080176e2 	.word	0x080176e2

080158ac <__sfputc_r>:
 80158ac:	6893      	ldr	r3, [r2, #8]
 80158ae:	3b01      	subs	r3, #1
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	b410      	push	{r4}
 80158b4:	6093      	str	r3, [r2, #8]
 80158b6:	da08      	bge.n	80158ca <__sfputc_r+0x1e>
 80158b8:	6994      	ldr	r4, [r2, #24]
 80158ba:	42a3      	cmp	r3, r4
 80158bc:	db01      	blt.n	80158c2 <__sfputc_r+0x16>
 80158be:	290a      	cmp	r1, #10
 80158c0:	d103      	bne.n	80158ca <__sfputc_r+0x1e>
 80158c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80158c6:	f000 bbb7 	b.w	8016038 <__swbuf_r>
 80158ca:	6813      	ldr	r3, [r2, #0]
 80158cc:	1c58      	adds	r0, r3, #1
 80158ce:	6010      	str	r0, [r2, #0]
 80158d0:	7019      	strb	r1, [r3, #0]
 80158d2:	4608      	mov	r0, r1
 80158d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80158d8:	4770      	bx	lr

080158da <__sfputs_r>:
 80158da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158dc:	4606      	mov	r6, r0
 80158de:	460f      	mov	r7, r1
 80158e0:	4614      	mov	r4, r2
 80158e2:	18d5      	adds	r5, r2, r3
 80158e4:	42ac      	cmp	r4, r5
 80158e6:	d101      	bne.n	80158ec <__sfputs_r+0x12>
 80158e8:	2000      	movs	r0, #0
 80158ea:	e007      	b.n	80158fc <__sfputs_r+0x22>
 80158ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80158f0:	463a      	mov	r2, r7
 80158f2:	4630      	mov	r0, r6
 80158f4:	f7ff ffda 	bl	80158ac <__sfputc_r>
 80158f8:	1c43      	adds	r3, r0, #1
 80158fa:	d1f3      	bne.n	80158e4 <__sfputs_r+0xa>
 80158fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015900 <_vfiprintf_r>:
 8015900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015904:	460d      	mov	r5, r1
 8015906:	b09d      	sub	sp, #116	; 0x74
 8015908:	4614      	mov	r4, r2
 801590a:	4698      	mov	r8, r3
 801590c:	4606      	mov	r6, r0
 801590e:	b118      	cbz	r0, 8015918 <_vfiprintf_r+0x18>
 8015910:	6983      	ldr	r3, [r0, #24]
 8015912:	b90b      	cbnz	r3, 8015918 <_vfiprintf_r+0x18>
 8015914:	f7fe fc9a 	bl	801424c <__sinit>
 8015918:	4b89      	ldr	r3, [pc, #548]	; (8015b40 <_vfiprintf_r+0x240>)
 801591a:	429d      	cmp	r5, r3
 801591c:	d11b      	bne.n	8015956 <_vfiprintf_r+0x56>
 801591e:	6875      	ldr	r5, [r6, #4]
 8015920:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015922:	07d9      	lsls	r1, r3, #31
 8015924:	d405      	bmi.n	8015932 <_vfiprintf_r+0x32>
 8015926:	89ab      	ldrh	r3, [r5, #12]
 8015928:	059a      	lsls	r2, r3, #22
 801592a:	d402      	bmi.n	8015932 <_vfiprintf_r+0x32>
 801592c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801592e:	f7fe fd51 	bl	80143d4 <__retarget_lock_acquire_recursive>
 8015932:	89ab      	ldrh	r3, [r5, #12]
 8015934:	071b      	lsls	r3, r3, #28
 8015936:	d501      	bpl.n	801593c <_vfiprintf_r+0x3c>
 8015938:	692b      	ldr	r3, [r5, #16]
 801593a:	b9eb      	cbnz	r3, 8015978 <_vfiprintf_r+0x78>
 801593c:	4629      	mov	r1, r5
 801593e:	4630      	mov	r0, r6
 8015940:	f000 fbcc 	bl	80160dc <__swsetup_r>
 8015944:	b1c0      	cbz	r0, 8015978 <_vfiprintf_r+0x78>
 8015946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015948:	07dc      	lsls	r4, r3, #31
 801594a:	d50e      	bpl.n	801596a <_vfiprintf_r+0x6a>
 801594c:	f04f 30ff 	mov.w	r0, #4294967295
 8015950:	b01d      	add	sp, #116	; 0x74
 8015952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015956:	4b7b      	ldr	r3, [pc, #492]	; (8015b44 <_vfiprintf_r+0x244>)
 8015958:	429d      	cmp	r5, r3
 801595a:	d101      	bne.n	8015960 <_vfiprintf_r+0x60>
 801595c:	68b5      	ldr	r5, [r6, #8]
 801595e:	e7df      	b.n	8015920 <_vfiprintf_r+0x20>
 8015960:	4b79      	ldr	r3, [pc, #484]	; (8015b48 <_vfiprintf_r+0x248>)
 8015962:	429d      	cmp	r5, r3
 8015964:	bf08      	it	eq
 8015966:	68f5      	ldreq	r5, [r6, #12]
 8015968:	e7da      	b.n	8015920 <_vfiprintf_r+0x20>
 801596a:	89ab      	ldrh	r3, [r5, #12]
 801596c:	0598      	lsls	r0, r3, #22
 801596e:	d4ed      	bmi.n	801594c <_vfiprintf_r+0x4c>
 8015970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015972:	f7fe fd31 	bl	80143d8 <__retarget_lock_release_recursive>
 8015976:	e7e9      	b.n	801594c <_vfiprintf_r+0x4c>
 8015978:	2300      	movs	r3, #0
 801597a:	9309      	str	r3, [sp, #36]	; 0x24
 801597c:	2320      	movs	r3, #32
 801597e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015982:	f8cd 800c 	str.w	r8, [sp, #12]
 8015986:	2330      	movs	r3, #48	; 0x30
 8015988:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015b4c <_vfiprintf_r+0x24c>
 801598c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015990:	f04f 0901 	mov.w	r9, #1
 8015994:	4623      	mov	r3, r4
 8015996:	469a      	mov	sl, r3
 8015998:	f813 2b01 	ldrb.w	r2, [r3], #1
 801599c:	b10a      	cbz	r2, 80159a2 <_vfiprintf_r+0xa2>
 801599e:	2a25      	cmp	r2, #37	; 0x25
 80159a0:	d1f9      	bne.n	8015996 <_vfiprintf_r+0x96>
 80159a2:	ebba 0b04 	subs.w	fp, sl, r4
 80159a6:	d00b      	beq.n	80159c0 <_vfiprintf_r+0xc0>
 80159a8:	465b      	mov	r3, fp
 80159aa:	4622      	mov	r2, r4
 80159ac:	4629      	mov	r1, r5
 80159ae:	4630      	mov	r0, r6
 80159b0:	f7ff ff93 	bl	80158da <__sfputs_r>
 80159b4:	3001      	adds	r0, #1
 80159b6:	f000 80aa 	beq.w	8015b0e <_vfiprintf_r+0x20e>
 80159ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80159bc:	445a      	add	r2, fp
 80159be:	9209      	str	r2, [sp, #36]	; 0x24
 80159c0:	f89a 3000 	ldrb.w	r3, [sl]
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	f000 80a2 	beq.w	8015b0e <_vfiprintf_r+0x20e>
 80159ca:	2300      	movs	r3, #0
 80159cc:	f04f 32ff 	mov.w	r2, #4294967295
 80159d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80159d4:	f10a 0a01 	add.w	sl, sl, #1
 80159d8:	9304      	str	r3, [sp, #16]
 80159da:	9307      	str	r3, [sp, #28]
 80159dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80159e0:	931a      	str	r3, [sp, #104]	; 0x68
 80159e2:	4654      	mov	r4, sl
 80159e4:	2205      	movs	r2, #5
 80159e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80159ea:	4858      	ldr	r0, [pc, #352]	; (8015b4c <_vfiprintf_r+0x24c>)
 80159ec:	f7ea fc08 	bl	8000200 <memchr>
 80159f0:	9a04      	ldr	r2, [sp, #16]
 80159f2:	b9d8      	cbnz	r0, 8015a2c <_vfiprintf_r+0x12c>
 80159f4:	06d1      	lsls	r1, r2, #27
 80159f6:	bf44      	itt	mi
 80159f8:	2320      	movmi	r3, #32
 80159fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80159fe:	0713      	lsls	r3, r2, #28
 8015a00:	bf44      	itt	mi
 8015a02:	232b      	movmi	r3, #43	; 0x2b
 8015a04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015a08:	f89a 3000 	ldrb.w	r3, [sl]
 8015a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8015a0e:	d015      	beq.n	8015a3c <_vfiprintf_r+0x13c>
 8015a10:	9a07      	ldr	r2, [sp, #28]
 8015a12:	4654      	mov	r4, sl
 8015a14:	2000      	movs	r0, #0
 8015a16:	f04f 0c0a 	mov.w	ip, #10
 8015a1a:	4621      	mov	r1, r4
 8015a1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015a20:	3b30      	subs	r3, #48	; 0x30
 8015a22:	2b09      	cmp	r3, #9
 8015a24:	d94e      	bls.n	8015ac4 <_vfiprintf_r+0x1c4>
 8015a26:	b1b0      	cbz	r0, 8015a56 <_vfiprintf_r+0x156>
 8015a28:	9207      	str	r2, [sp, #28]
 8015a2a:	e014      	b.n	8015a56 <_vfiprintf_r+0x156>
 8015a2c:	eba0 0308 	sub.w	r3, r0, r8
 8015a30:	fa09 f303 	lsl.w	r3, r9, r3
 8015a34:	4313      	orrs	r3, r2
 8015a36:	9304      	str	r3, [sp, #16]
 8015a38:	46a2      	mov	sl, r4
 8015a3a:	e7d2      	b.n	80159e2 <_vfiprintf_r+0xe2>
 8015a3c:	9b03      	ldr	r3, [sp, #12]
 8015a3e:	1d19      	adds	r1, r3, #4
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	9103      	str	r1, [sp, #12]
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	bfbb      	ittet	lt
 8015a48:	425b      	neglt	r3, r3
 8015a4a:	f042 0202 	orrlt.w	r2, r2, #2
 8015a4e:	9307      	strge	r3, [sp, #28]
 8015a50:	9307      	strlt	r3, [sp, #28]
 8015a52:	bfb8      	it	lt
 8015a54:	9204      	strlt	r2, [sp, #16]
 8015a56:	7823      	ldrb	r3, [r4, #0]
 8015a58:	2b2e      	cmp	r3, #46	; 0x2e
 8015a5a:	d10c      	bne.n	8015a76 <_vfiprintf_r+0x176>
 8015a5c:	7863      	ldrb	r3, [r4, #1]
 8015a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8015a60:	d135      	bne.n	8015ace <_vfiprintf_r+0x1ce>
 8015a62:	9b03      	ldr	r3, [sp, #12]
 8015a64:	1d1a      	adds	r2, r3, #4
 8015a66:	681b      	ldr	r3, [r3, #0]
 8015a68:	9203      	str	r2, [sp, #12]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	bfb8      	it	lt
 8015a6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8015a72:	3402      	adds	r4, #2
 8015a74:	9305      	str	r3, [sp, #20]
 8015a76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015b5c <_vfiprintf_r+0x25c>
 8015a7a:	7821      	ldrb	r1, [r4, #0]
 8015a7c:	2203      	movs	r2, #3
 8015a7e:	4650      	mov	r0, sl
 8015a80:	f7ea fbbe 	bl	8000200 <memchr>
 8015a84:	b140      	cbz	r0, 8015a98 <_vfiprintf_r+0x198>
 8015a86:	2340      	movs	r3, #64	; 0x40
 8015a88:	eba0 000a 	sub.w	r0, r0, sl
 8015a8c:	fa03 f000 	lsl.w	r0, r3, r0
 8015a90:	9b04      	ldr	r3, [sp, #16]
 8015a92:	4303      	orrs	r3, r0
 8015a94:	3401      	adds	r4, #1
 8015a96:	9304      	str	r3, [sp, #16]
 8015a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a9c:	482c      	ldr	r0, [pc, #176]	; (8015b50 <_vfiprintf_r+0x250>)
 8015a9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015aa2:	2206      	movs	r2, #6
 8015aa4:	f7ea fbac 	bl	8000200 <memchr>
 8015aa8:	2800      	cmp	r0, #0
 8015aaa:	d03f      	beq.n	8015b2c <_vfiprintf_r+0x22c>
 8015aac:	4b29      	ldr	r3, [pc, #164]	; (8015b54 <_vfiprintf_r+0x254>)
 8015aae:	bb1b      	cbnz	r3, 8015af8 <_vfiprintf_r+0x1f8>
 8015ab0:	9b03      	ldr	r3, [sp, #12]
 8015ab2:	3307      	adds	r3, #7
 8015ab4:	f023 0307 	bic.w	r3, r3, #7
 8015ab8:	3308      	adds	r3, #8
 8015aba:	9303      	str	r3, [sp, #12]
 8015abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015abe:	443b      	add	r3, r7
 8015ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8015ac2:	e767      	b.n	8015994 <_vfiprintf_r+0x94>
 8015ac4:	fb0c 3202 	mla	r2, ip, r2, r3
 8015ac8:	460c      	mov	r4, r1
 8015aca:	2001      	movs	r0, #1
 8015acc:	e7a5      	b.n	8015a1a <_vfiprintf_r+0x11a>
 8015ace:	2300      	movs	r3, #0
 8015ad0:	3401      	adds	r4, #1
 8015ad2:	9305      	str	r3, [sp, #20]
 8015ad4:	4619      	mov	r1, r3
 8015ad6:	f04f 0c0a 	mov.w	ip, #10
 8015ada:	4620      	mov	r0, r4
 8015adc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015ae0:	3a30      	subs	r2, #48	; 0x30
 8015ae2:	2a09      	cmp	r2, #9
 8015ae4:	d903      	bls.n	8015aee <_vfiprintf_r+0x1ee>
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d0c5      	beq.n	8015a76 <_vfiprintf_r+0x176>
 8015aea:	9105      	str	r1, [sp, #20]
 8015aec:	e7c3      	b.n	8015a76 <_vfiprintf_r+0x176>
 8015aee:	fb0c 2101 	mla	r1, ip, r1, r2
 8015af2:	4604      	mov	r4, r0
 8015af4:	2301      	movs	r3, #1
 8015af6:	e7f0      	b.n	8015ada <_vfiprintf_r+0x1da>
 8015af8:	ab03      	add	r3, sp, #12
 8015afa:	9300      	str	r3, [sp, #0]
 8015afc:	462a      	mov	r2, r5
 8015afe:	4b16      	ldr	r3, [pc, #88]	; (8015b58 <_vfiprintf_r+0x258>)
 8015b00:	a904      	add	r1, sp, #16
 8015b02:	4630      	mov	r0, r6
 8015b04:	f3af 8000 	nop.w
 8015b08:	4607      	mov	r7, r0
 8015b0a:	1c78      	adds	r0, r7, #1
 8015b0c:	d1d6      	bne.n	8015abc <_vfiprintf_r+0x1bc>
 8015b0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015b10:	07d9      	lsls	r1, r3, #31
 8015b12:	d405      	bmi.n	8015b20 <_vfiprintf_r+0x220>
 8015b14:	89ab      	ldrh	r3, [r5, #12]
 8015b16:	059a      	lsls	r2, r3, #22
 8015b18:	d402      	bmi.n	8015b20 <_vfiprintf_r+0x220>
 8015b1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015b1c:	f7fe fc5c 	bl	80143d8 <__retarget_lock_release_recursive>
 8015b20:	89ab      	ldrh	r3, [r5, #12]
 8015b22:	065b      	lsls	r3, r3, #25
 8015b24:	f53f af12 	bmi.w	801594c <_vfiprintf_r+0x4c>
 8015b28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015b2a:	e711      	b.n	8015950 <_vfiprintf_r+0x50>
 8015b2c:	ab03      	add	r3, sp, #12
 8015b2e:	9300      	str	r3, [sp, #0]
 8015b30:	462a      	mov	r2, r5
 8015b32:	4b09      	ldr	r3, [pc, #36]	; (8015b58 <_vfiprintf_r+0x258>)
 8015b34:	a904      	add	r1, sp, #16
 8015b36:	4630      	mov	r0, r6
 8015b38:	f000 f880 	bl	8015c3c <_printf_i>
 8015b3c:	e7e4      	b.n	8015b08 <_vfiprintf_r+0x208>
 8015b3e:	bf00      	nop
 8015b40:	080173e8 	.word	0x080173e8
 8015b44:	08017408 	.word	0x08017408
 8015b48:	080173c8 	.word	0x080173c8
 8015b4c:	080176dc 	.word	0x080176dc
 8015b50:	080176e6 	.word	0x080176e6
 8015b54:	00000000 	.word	0x00000000
 8015b58:	080158db 	.word	0x080158db
 8015b5c:	080176e2 	.word	0x080176e2

08015b60 <_printf_common>:
 8015b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b64:	4616      	mov	r6, r2
 8015b66:	4699      	mov	r9, r3
 8015b68:	688a      	ldr	r2, [r1, #8]
 8015b6a:	690b      	ldr	r3, [r1, #16]
 8015b6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015b70:	4293      	cmp	r3, r2
 8015b72:	bfb8      	it	lt
 8015b74:	4613      	movlt	r3, r2
 8015b76:	6033      	str	r3, [r6, #0]
 8015b78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015b7c:	4607      	mov	r7, r0
 8015b7e:	460c      	mov	r4, r1
 8015b80:	b10a      	cbz	r2, 8015b86 <_printf_common+0x26>
 8015b82:	3301      	adds	r3, #1
 8015b84:	6033      	str	r3, [r6, #0]
 8015b86:	6823      	ldr	r3, [r4, #0]
 8015b88:	0699      	lsls	r1, r3, #26
 8015b8a:	bf42      	ittt	mi
 8015b8c:	6833      	ldrmi	r3, [r6, #0]
 8015b8e:	3302      	addmi	r3, #2
 8015b90:	6033      	strmi	r3, [r6, #0]
 8015b92:	6825      	ldr	r5, [r4, #0]
 8015b94:	f015 0506 	ands.w	r5, r5, #6
 8015b98:	d106      	bne.n	8015ba8 <_printf_common+0x48>
 8015b9a:	f104 0a19 	add.w	sl, r4, #25
 8015b9e:	68e3      	ldr	r3, [r4, #12]
 8015ba0:	6832      	ldr	r2, [r6, #0]
 8015ba2:	1a9b      	subs	r3, r3, r2
 8015ba4:	42ab      	cmp	r3, r5
 8015ba6:	dc26      	bgt.n	8015bf6 <_printf_common+0x96>
 8015ba8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015bac:	1e13      	subs	r3, r2, #0
 8015bae:	6822      	ldr	r2, [r4, #0]
 8015bb0:	bf18      	it	ne
 8015bb2:	2301      	movne	r3, #1
 8015bb4:	0692      	lsls	r2, r2, #26
 8015bb6:	d42b      	bmi.n	8015c10 <_printf_common+0xb0>
 8015bb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015bbc:	4649      	mov	r1, r9
 8015bbe:	4638      	mov	r0, r7
 8015bc0:	47c0      	blx	r8
 8015bc2:	3001      	adds	r0, #1
 8015bc4:	d01e      	beq.n	8015c04 <_printf_common+0xa4>
 8015bc6:	6823      	ldr	r3, [r4, #0]
 8015bc8:	68e5      	ldr	r5, [r4, #12]
 8015bca:	6832      	ldr	r2, [r6, #0]
 8015bcc:	f003 0306 	and.w	r3, r3, #6
 8015bd0:	2b04      	cmp	r3, #4
 8015bd2:	bf08      	it	eq
 8015bd4:	1aad      	subeq	r5, r5, r2
 8015bd6:	68a3      	ldr	r3, [r4, #8]
 8015bd8:	6922      	ldr	r2, [r4, #16]
 8015bda:	bf0c      	ite	eq
 8015bdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015be0:	2500      	movne	r5, #0
 8015be2:	4293      	cmp	r3, r2
 8015be4:	bfc4      	itt	gt
 8015be6:	1a9b      	subgt	r3, r3, r2
 8015be8:	18ed      	addgt	r5, r5, r3
 8015bea:	2600      	movs	r6, #0
 8015bec:	341a      	adds	r4, #26
 8015bee:	42b5      	cmp	r5, r6
 8015bf0:	d11a      	bne.n	8015c28 <_printf_common+0xc8>
 8015bf2:	2000      	movs	r0, #0
 8015bf4:	e008      	b.n	8015c08 <_printf_common+0xa8>
 8015bf6:	2301      	movs	r3, #1
 8015bf8:	4652      	mov	r2, sl
 8015bfa:	4649      	mov	r1, r9
 8015bfc:	4638      	mov	r0, r7
 8015bfe:	47c0      	blx	r8
 8015c00:	3001      	adds	r0, #1
 8015c02:	d103      	bne.n	8015c0c <_printf_common+0xac>
 8015c04:	f04f 30ff 	mov.w	r0, #4294967295
 8015c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c0c:	3501      	adds	r5, #1
 8015c0e:	e7c6      	b.n	8015b9e <_printf_common+0x3e>
 8015c10:	18e1      	adds	r1, r4, r3
 8015c12:	1c5a      	adds	r2, r3, #1
 8015c14:	2030      	movs	r0, #48	; 0x30
 8015c16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015c1a:	4422      	add	r2, r4
 8015c1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015c20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015c24:	3302      	adds	r3, #2
 8015c26:	e7c7      	b.n	8015bb8 <_printf_common+0x58>
 8015c28:	2301      	movs	r3, #1
 8015c2a:	4622      	mov	r2, r4
 8015c2c:	4649      	mov	r1, r9
 8015c2e:	4638      	mov	r0, r7
 8015c30:	47c0      	blx	r8
 8015c32:	3001      	adds	r0, #1
 8015c34:	d0e6      	beq.n	8015c04 <_printf_common+0xa4>
 8015c36:	3601      	adds	r6, #1
 8015c38:	e7d9      	b.n	8015bee <_printf_common+0x8e>
	...

08015c3c <_printf_i>:
 8015c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015c40:	7e0f      	ldrb	r7, [r1, #24]
 8015c42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015c44:	2f78      	cmp	r7, #120	; 0x78
 8015c46:	4691      	mov	r9, r2
 8015c48:	4680      	mov	r8, r0
 8015c4a:	460c      	mov	r4, r1
 8015c4c:	469a      	mov	sl, r3
 8015c4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015c52:	d807      	bhi.n	8015c64 <_printf_i+0x28>
 8015c54:	2f62      	cmp	r7, #98	; 0x62
 8015c56:	d80a      	bhi.n	8015c6e <_printf_i+0x32>
 8015c58:	2f00      	cmp	r7, #0
 8015c5a:	f000 80d8 	beq.w	8015e0e <_printf_i+0x1d2>
 8015c5e:	2f58      	cmp	r7, #88	; 0x58
 8015c60:	f000 80a3 	beq.w	8015daa <_printf_i+0x16e>
 8015c64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015c68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015c6c:	e03a      	b.n	8015ce4 <_printf_i+0xa8>
 8015c6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015c72:	2b15      	cmp	r3, #21
 8015c74:	d8f6      	bhi.n	8015c64 <_printf_i+0x28>
 8015c76:	a101      	add	r1, pc, #4	; (adr r1, 8015c7c <_printf_i+0x40>)
 8015c78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015c7c:	08015cd5 	.word	0x08015cd5
 8015c80:	08015ce9 	.word	0x08015ce9
 8015c84:	08015c65 	.word	0x08015c65
 8015c88:	08015c65 	.word	0x08015c65
 8015c8c:	08015c65 	.word	0x08015c65
 8015c90:	08015c65 	.word	0x08015c65
 8015c94:	08015ce9 	.word	0x08015ce9
 8015c98:	08015c65 	.word	0x08015c65
 8015c9c:	08015c65 	.word	0x08015c65
 8015ca0:	08015c65 	.word	0x08015c65
 8015ca4:	08015c65 	.word	0x08015c65
 8015ca8:	08015df5 	.word	0x08015df5
 8015cac:	08015d19 	.word	0x08015d19
 8015cb0:	08015dd7 	.word	0x08015dd7
 8015cb4:	08015c65 	.word	0x08015c65
 8015cb8:	08015c65 	.word	0x08015c65
 8015cbc:	08015e17 	.word	0x08015e17
 8015cc0:	08015c65 	.word	0x08015c65
 8015cc4:	08015d19 	.word	0x08015d19
 8015cc8:	08015c65 	.word	0x08015c65
 8015ccc:	08015c65 	.word	0x08015c65
 8015cd0:	08015ddf 	.word	0x08015ddf
 8015cd4:	682b      	ldr	r3, [r5, #0]
 8015cd6:	1d1a      	adds	r2, r3, #4
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	602a      	str	r2, [r5, #0]
 8015cdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015ce0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015ce4:	2301      	movs	r3, #1
 8015ce6:	e0a3      	b.n	8015e30 <_printf_i+0x1f4>
 8015ce8:	6820      	ldr	r0, [r4, #0]
 8015cea:	6829      	ldr	r1, [r5, #0]
 8015cec:	0606      	lsls	r6, r0, #24
 8015cee:	f101 0304 	add.w	r3, r1, #4
 8015cf2:	d50a      	bpl.n	8015d0a <_printf_i+0xce>
 8015cf4:	680e      	ldr	r6, [r1, #0]
 8015cf6:	602b      	str	r3, [r5, #0]
 8015cf8:	2e00      	cmp	r6, #0
 8015cfa:	da03      	bge.n	8015d04 <_printf_i+0xc8>
 8015cfc:	232d      	movs	r3, #45	; 0x2d
 8015cfe:	4276      	negs	r6, r6
 8015d00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015d04:	485e      	ldr	r0, [pc, #376]	; (8015e80 <_printf_i+0x244>)
 8015d06:	230a      	movs	r3, #10
 8015d08:	e019      	b.n	8015d3e <_printf_i+0x102>
 8015d0a:	680e      	ldr	r6, [r1, #0]
 8015d0c:	602b      	str	r3, [r5, #0]
 8015d0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015d12:	bf18      	it	ne
 8015d14:	b236      	sxthne	r6, r6
 8015d16:	e7ef      	b.n	8015cf8 <_printf_i+0xbc>
 8015d18:	682b      	ldr	r3, [r5, #0]
 8015d1a:	6820      	ldr	r0, [r4, #0]
 8015d1c:	1d19      	adds	r1, r3, #4
 8015d1e:	6029      	str	r1, [r5, #0]
 8015d20:	0601      	lsls	r1, r0, #24
 8015d22:	d501      	bpl.n	8015d28 <_printf_i+0xec>
 8015d24:	681e      	ldr	r6, [r3, #0]
 8015d26:	e002      	b.n	8015d2e <_printf_i+0xf2>
 8015d28:	0646      	lsls	r6, r0, #25
 8015d2a:	d5fb      	bpl.n	8015d24 <_printf_i+0xe8>
 8015d2c:	881e      	ldrh	r6, [r3, #0]
 8015d2e:	4854      	ldr	r0, [pc, #336]	; (8015e80 <_printf_i+0x244>)
 8015d30:	2f6f      	cmp	r7, #111	; 0x6f
 8015d32:	bf0c      	ite	eq
 8015d34:	2308      	moveq	r3, #8
 8015d36:	230a      	movne	r3, #10
 8015d38:	2100      	movs	r1, #0
 8015d3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015d3e:	6865      	ldr	r5, [r4, #4]
 8015d40:	60a5      	str	r5, [r4, #8]
 8015d42:	2d00      	cmp	r5, #0
 8015d44:	bfa2      	ittt	ge
 8015d46:	6821      	ldrge	r1, [r4, #0]
 8015d48:	f021 0104 	bicge.w	r1, r1, #4
 8015d4c:	6021      	strge	r1, [r4, #0]
 8015d4e:	b90e      	cbnz	r6, 8015d54 <_printf_i+0x118>
 8015d50:	2d00      	cmp	r5, #0
 8015d52:	d04d      	beq.n	8015df0 <_printf_i+0x1b4>
 8015d54:	4615      	mov	r5, r2
 8015d56:	fbb6 f1f3 	udiv	r1, r6, r3
 8015d5a:	fb03 6711 	mls	r7, r3, r1, r6
 8015d5e:	5dc7      	ldrb	r7, [r0, r7]
 8015d60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015d64:	4637      	mov	r7, r6
 8015d66:	42bb      	cmp	r3, r7
 8015d68:	460e      	mov	r6, r1
 8015d6a:	d9f4      	bls.n	8015d56 <_printf_i+0x11a>
 8015d6c:	2b08      	cmp	r3, #8
 8015d6e:	d10b      	bne.n	8015d88 <_printf_i+0x14c>
 8015d70:	6823      	ldr	r3, [r4, #0]
 8015d72:	07de      	lsls	r6, r3, #31
 8015d74:	d508      	bpl.n	8015d88 <_printf_i+0x14c>
 8015d76:	6923      	ldr	r3, [r4, #16]
 8015d78:	6861      	ldr	r1, [r4, #4]
 8015d7a:	4299      	cmp	r1, r3
 8015d7c:	bfde      	ittt	le
 8015d7e:	2330      	movle	r3, #48	; 0x30
 8015d80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015d84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015d88:	1b52      	subs	r2, r2, r5
 8015d8a:	6122      	str	r2, [r4, #16]
 8015d8c:	f8cd a000 	str.w	sl, [sp]
 8015d90:	464b      	mov	r3, r9
 8015d92:	aa03      	add	r2, sp, #12
 8015d94:	4621      	mov	r1, r4
 8015d96:	4640      	mov	r0, r8
 8015d98:	f7ff fee2 	bl	8015b60 <_printf_common>
 8015d9c:	3001      	adds	r0, #1
 8015d9e:	d14c      	bne.n	8015e3a <_printf_i+0x1fe>
 8015da0:	f04f 30ff 	mov.w	r0, #4294967295
 8015da4:	b004      	add	sp, #16
 8015da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015daa:	4835      	ldr	r0, [pc, #212]	; (8015e80 <_printf_i+0x244>)
 8015dac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015db0:	6829      	ldr	r1, [r5, #0]
 8015db2:	6823      	ldr	r3, [r4, #0]
 8015db4:	f851 6b04 	ldr.w	r6, [r1], #4
 8015db8:	6029      	str	r1, [r5, #0]
 8015dba:	061d      	lsls	r5, r3, #24
 8015dbc:	d514      	bpl.n	8015de8 <_printf_i+0x1ac>
 8015dbe:	07df      	lsls	r7, r3, #31
 8015dc0:	bf44      	itt	mi
 8015dc2:	f043 0320 	orrmi.w	r3, r3, #32
 8015dc6:	6023      	strmi	r3, [r4, #0]
 8015dc8:	b91e      	cbnz	r6, 8015dd2 <_printf_i+0x196>
 8015dca:	6823      	ldr	r3, [r4, #0]
 8015dcc:	f023 0320 	bic.w	r3, r3, #32
 8015dd0:	6023      	str	r3, [r4, #0]
 8015dd2:	2310      	movs	r3, #16
 8015dd4:	e7b0      	b.n	8015d38 <_printf_i+0xfc>
 8015dd6:	6823      	ldr	r3, [r4, #0]
 8015dd8:	f043 0320 	orr.w	r3, r3, #32
 8015ddc:	6023      	str	r3, [r4, #0]
 8015dde:	2378      	movs	r3, #120	; 0x78
 8015de0:	4828      	ldr	r0, [pc, #160]	; (8015e84 <_printf_i+0x248>)
 8015de2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015de6:	e7e3      	b.n	8015db0 <_printf_i+0x174>
 8015de8:	0659      	lsls	r1, r3, #25
 8015dea:	bf48      	it	mi
 8015dec:	b2b6      	uxthmi	r6, r6
 8015dee:	e7e6      	b.n	8015dbe <_printf_i+0x182>
 8015df0:	4615      	mov	r5, r2
 8015df2:	e7bb      	b.n	8015d6c <_printf_i+0x130>
 8015df4:	682b      	ldr	r3, [r5, #0]
 8015df6:	6826      	ldr	r6, [r4, #0]
 8015df8:	6961      	ldr	r1, [r4, #20]
 8015dfa:	1d18      	adds	r0, r3, #4
 8015dfc:	6028      	str	r0, [r5, #0]
 8015dfe:	0635      	lsls	r5, r6, #24
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	d501      	bpl.n	8015e08 <_printf_i+0x1cc>
 8015e04:	6019      	str	r1, [r3, #0]
 8015e06:	e002      	b.n	8015e0e <_printf_i+0x1d2>
 8015e08:	0670      	lsls	r0, r6, #25
 8015e0a:	d5fb      	bpl.n	8015e04 <_printf_i+0x1c8>
 8015e0c:	8019      	strh	r1, [r3, #0]
 8015e0e:	2300      	movs	r3, #0
 8015e10:	6123      	str	r3, [r4, #16]
 8015e12:	4615      	mov	r5, r2
 8015e14:	e7ba      	b.n	8015d8c <_printf_i+0x150>
 8015e16:	682b      	ldr	r3, [r5, #0]
 8015e18:	1d1a      	adds	r2, r3, #4
 8015e1a:	602a      	str	r2, [r5, #0]
 8015e1c:	681d      	ldr	r5, [r3, #0]
 8015e1e:	6862      	ldr	r2, [r4, #4]
 8015e20:	2100      	movs	r1, #0
 8015e22:	4628      	mov	r0, r5
 8015e24:	f7ea f9ec 	bl	8000200 <memchr>
 8015e28:	b108      	cbz	r0, 8015e2e <_printf_i+0x1f2>
 8015e2a:	1b40      	subs	r0, r0, r5
 8015e2c:	6060      	str	r0, [r4, #4]
 8015e2e:	6863      	ldr	r3, [r4, #4]
 8015e30:	6123      	str	r3, [r4, #16]
 8015e32:	2300      	movs	r3, #0
 8015e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015e38:	e7a8      	b.n	8015d8c <_printf_i+0x150>
 8015e3a:	6923      	ldr	r3, [r4, #16]
 8015e3c:	462a      	mov	r2, r5
 8015e3e:	4649      	mov	r1, r9
 8015e40:	4640      	mov	r0, r8
 8015e42:	47d0      	blx	sl
 8015e44:	3001      	adds	r0, #1
 8015e46:	d0ab      	beq.n	8015da0 <_printf_i+0x164>
 8015e48:	6823      	ldr	r3, [r4, #0]
 8015e4a:	079b      	lsls	r3, r3, #30
 8015e4c:	d413      	bmi.n	8015e76 <_printf_i+0x23a>
 8015e4e:	68e0      	ldr	r0, [r4, #12]
 8015e50:	9b03      	ldr	r3, [sp, #12]
 8015e52:	4298      	cmp	r0, r3
 8015e54:	bfb8      	it	lt
 8015e56:	4618      	movlt	r0, r3
 8015e58:	e7a4      	b.n	8015da4 <_printf_i+0x168>
 8015e5a:	2301      	movs	r3, #1
 8015e5c:	4632      	mov	r2, r6
 8015e5e:	4649      	mov	r1, r9
 8015e60:	4640      	mov	r0, r8
 8015e62:	47d0      	blx	sl
 8015e64:	3001      	adds	r0, #1
 8015e66:	d09b      	beq.n	8015da0 <_printf_i+0x164>
 8015e68:	3501      	adds	r5, #1
 8015e6a:	68e3      	ldr	r3, [r4, #12]
 8015e6c:	9903      	ldr	r1, [sp, #12]
 8015e6e:	1a5b      	subs	r3, r3, r1
 8015e70:	42ab      	cmp	r3, r5
 8015e72:	dcf2      	bgt.n	8015e5a <_printf_i+0x21e>
 8015e74:	e7eb      	b.n	8015e4e <_printf_i+0x212>
 8015e76:	2500      	movs	r5, #0
 8015e78:	f104 0619 	add.w	r6, r4, #25
 8015e7c:	e7f5      	b.n	8015e6a <_printf_i+0x22e>
 8015e7e:	bf00      	nop
 8015e80:	080176ed 	.word	0x080176ed
 8015e84:	080176fe 	.word	0x080176fe

08015e88 <_read_r>:
 8015e88:	b538      	push	{r3, r4, r5, lr}
 8015e8a:	4d07      	ldr	r5, [pc, #28]	; (8015ea8 <_read_r+0x20>)
 8015e8c:	4604      	mov	r4, r0
 8015e8e:	4608      	mov	r0, r1
 8015e90:	4611      	mov	r1, r2
 8015e92:	2200      	movs	r2, #0
 8015e94:	602a      	str	r2, [r5, #0]
 8015e96:	461a      	mov	r2, r3
 8015e98:	f7ec fdc4 	bl	8002a24 <_read>
 8015e9c:	1c43      	adds	r3, r0, #1
 8015e9e:	d102      	bne.n	8015ea6 <_read_r+0x1e>
 8015ea0:	682b      	ldr	r3, [r5, #0]
 8015ea2:	b103      	cbz	r3, 8015ea6 <_read_r+0x1e>
 8015ea4:	6023      	str	r3, [r4, #0]
 8015ea6:	bd38      	pop	{r3, r4, r5, pc}
 8015ea8:	2000bf5c 	.word	0x2000bf5c

08015eac <siscanf>:
 8015eac:	b40e      	push	{r1, r2, r3}
 8015eae:	b510      	push	{r4, lr}
 8015eb0:	b09f      	sub	sp, #124	; 0x7c
 8015eb2:	ac21      	add	r4, sp, #132	; 0x84
 8015eb4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8015eb8:	f854 2b04 	ldr.w	r2, [r4], #4
 8015ebc:	9201      	str	r2, [sp, #4]
 8015ebe:	f8ad 101c 	strh.w	r1, [sp, #28]
 8015ec2:	9004      	str	r0, [sp, #16]
 8015ec4:	9008      	str	r0, [sp, #32]
 8015ec6:	f7ea f98d 	bl	80001e4 <strlen>
 8015eca:	4b0c      	ldr	r3, [pc, #48]	; (8015efc <siscanf+0x50>)
 8015ecc:	9005      	str	r0, [sp, #20]
 8015ece:	9009      	str	r0, [sp, #36]	; 0x24
 8015ed0:	930d      	str	r3, [sp, #52]	; 0x34
 8015ed2:	480b      	ldr	r0, [pc, #44]	; (8015f00 <siscanf+0x54>)
 8015ed4:	9a01      	ldr	r2, [sp, #4]
 8015ed6:	6800      	ldr	r0, [r0, #0]
 8015ed8:	9403      	str	r4, [sp, #12]
 8015eda:	2300      	movs	r3, #0
 8015edc:	9311      	str	r3, [sp, #68]	; 0x44
 8015ede:	9316      	str	r3, [sp, #88]	; 0x58
 8015ee0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015ee4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015ee8:	a904      	add	r1, sp, #16
 8015eea:	4623      	mov	r3, r4
 8015eec:	f000 fa82 	bl	80163f4 <__ssvfiscanf_r>
 8015ef0:	b01f      	add	sp, #124	; 0x7c
 8015ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ef6:	b003      	add	sp, #12
 8015ef8:	4770      	bx	lr
 8015efa:	bf00      	nop
 8015efc:	08014c23 	.word	0x08014c23
 8015f00:	200002b4 	.word	0x200002b4

08015f04 <strcpy>:
 8015f04:	4603      	mov	r3, r0
 8015f06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015f0a:	f803 2b01 	strb.w	r2, [r3], #1
 8015f0e:	2a00      	cmp	r2, #0
 8015f10:	d1f9      	bne.n	8015f06 <strcpy+0x2>
 8015f12:	4770      	bx	lr

08015f14 <strncmp>:
 8015f14:	b510      	push	{r4, lr}
 8015f16:	b17a      	cbz	r2, 8015f38 <strncmp+0x24>
 8015f18:	4603      	mov	r3, r0
 8015f1a:	3901      	subs	r1, #1
 8015f1c:	1884      	adds	r4, r0, r2
 8015f1e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015f22:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015f26:	4290      	cmp	r0, r2
 8015f28:	d101      	bne.n	8015f2e <strncmp+0x1a>
 8015f2a:	42a3      	cmp	r3, r4
 8015f2c:	d101      	bne.n	8015f32 <strncmp+0x1e>
 8015f2e:	1a80      	subs	r0, r0, r2
 8015f30:	bd10      	pop	{r4, pc}
 8015f32:	2800      	cmp	r0, #0
 8015f34:	d1f3      	bne.n	8015f1e <strncmp+0xa>
 8015f36:	e7fa      	b.n	8015f2e <strncmp+0x1a>
 8015f38:	4610      	mov	r0, r2
 8015f3a:	e7f9      	b.n	8015f30 <strncmp+0x1c>

08015f3c <_strtoul_l.constprop.0>:
 8015f3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f40:	4f36      	ldr	r7, [pc, #216]	; (801601c <_strtoul_l.constprop.0+0xe0>)
 8015f42:	4686      	mov	lr, r0
 8015f44:	460d      	mov	r5, r1
 8015f46:	4628      	mov	r0, r5
 8015f48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015f4c:	5de6      	ldrb	r6, [r4, r7]
 8015f4e:	f016 0608 	ands.w	r6, r6, #8
 8015f52:	d1f8      	bne.n	8015f46 <_strtoul_l.constprop.0+0xa>
 8015f54:	2c2d      	cmp	r4, #45	; 0x2d
 8015f56:	d12f      	bne.n	8015fb8 <_strtoul_l.constprop.0+0x7c>
 8015f58:	782c      	ldrb	r4, [r5, #0]
 8015f5a:	2601      	movs	r6, #1
 8015f5c:	1c85      	adds	r5, r0, #2
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d057      	beq.n	8016012 <_strtoul_l.constprop.0+0xd6>
 8015f62:	2b10      	cmp	r3, #16
 8015f64:	d109      	bne.n	8015f7a <_strtoul_l.constprop.0+0x3e>
 8015f66:	2c30      	cmp	r4, #48	; 0x30
 8015f68:	d107      	bne.n	8015f7a <_strtoul_l.constprop.0+0x3e>
 8015f6a:	7828      	ldrb	r0, [r5, #0]
 8015f6c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8015f70:	2858      	cmp	r0, #88	; 0x58
 8015f72:	d149      	bne.n	8016008 <_strtoul_l.constprop.0+0xcc>
 8015f74:	786c      	ldrb	r4, [r5, #1]
 8015f76:	2310      	movs	r3, #16
 8015f78:	3502      	adds	r5, #2
 8015f7a:	f04f 38ff 	mov.w	r8, #4294967295
 8015f7e:	2700      	movs	r7, #0
 8015f80:	fbb8 f8f3 	udiv	r8, r8, r3
 8015f84:	fb03 f908 	mul.w	r9, r3, r8
 8015f88:	ea6f 0909 	mvn.w	r9, r9
 8015f8c:	4638      	mov	r0, r7
 8015f8e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8015f92:	f1bc 0f09 	cmp.w	ip, #9
 8015f96:	d814      	bhi.n	8015fc2 <_strtoul_l.constprop.0+0x86>
 8015f98:	4664      	mov	r4, ip
 8015f9a:	42a3      	cmp	r3, r4
 8015f9c:	dd22      	ble.n	8015fe4 <_strtoul_l.constprop.0+0xa8>
 8015f9e:	2f00      	cmp	r7, #0
 8015fa0:	db1d      	blt.n	8015fde <_strtoul_l.constprop.0+0xa2>
 8015fa2:	4580      	cmp	r8, r0
 8015fa4:	d31b      	bcc.n	8015fde <_strtoul_l.constprop.0+0xa2>
 8015fa6:	d101      	bne.n	8015fac <_strtoul_l.constprop.0+0x70>
 8015fa8:	45a1      	cmp	r9, r4
 8015faa:	db18      	blt.n	8015fde <_strtoul_l.constprop.0+0xa2>
 8015fac:	fb00 4003 	mla	r0, r0, r3, r4
 8015fb0:	2701      	movs	r7, #1
 8015fb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015fb6:	e7ea      	b.n	8015f8e <_strtoul_l.constprop.0+0x52>
 8015fb8:	2c2b      	cmp	r4, #43	; 0x2b
 8015fba:	bf04      	itt	eq
 8015fbc:	782c      	ldrbeq	r4, [r5, #0]
 8015fbe:	1c85      	addeq	r5, r0, #2
 8015fc0:	e7cd      	b.n	8015f5e <_strtoul_l.constprop.0+0x22>
 8015fc2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8015fc6:	f1bc 0f19 	cmp.w	ip, #25
 8015fca:	d801      	bhi.n	8015fd0 <_strtoul_l.constprop.0+0x94>
 8015fcc:	3c37      	subs	r4, #55	; 0x37
 8015fce:	e7e4      	b.n	8015f9a <_strtoul_l.constprop.0+0x5e>
 8015fd0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8015fd4:	f1bc 0f19 	cmp.w	ip, #25
 8015fd8:	d804      	bhi.n	8015fe4 <_strtoul_l.constprop.0+0xa8>
 8015fda:	3c57      	subs	r4, #87	; 0x57
 8015fdc:	e7dd      	b.n	8015f9a <_strtoul_l.constprop.0+0x5e>
 8015fde:	f04f 37ff 	mov.w	r7, #4294967295
 8015fe2:	e7e6      	b.n	8015fb2 <_strtoul_l.constprop.0+0x76>
 8015fe4:	2f00      	cmp	r7, #0
 8015fe6:	da07      	bge.n	8015ff8 <_strtoul_l.constprop.0+0xbc>
 8015fe8:	2322      	movs	r3, #34	; 0x22
 8015fea:	f8ce 3000 	str.w	r3, [lr]
 8015fee:	f04f 30ff 	mov.w	r0, #4294967295
 8015ff2:	b932      	cbnz	r2, 8016002 <_strtoul_l.constprop.0+0xc6>
 8015ff4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ff8:	b106      	cbz	r6, 8015ffc <_strtoul_l.constprop.0+0xc0>
 8015ffa:	4240      	negs	r0, r0
 8015ffc:	2a00      	cmp	r2, #0
 8015ffe:	d0f9      	beq.n	8015ff4 <_strtoul_l.constprop.0+0xb8>
 8016000:	b107      	cbz	r7, 8016004 <_strtoul_l.constprop.0+0xc8>
 8016002:	1e69      	subs	r1, r5, #1
 8016004:	6011      	str	r1, [r2, #0]
 8016006:	e7f5      	b.n	8015ff4 <_strtoul_l.constprop.0+0xb8>
 8016008:	2430      	movs	r4, #48	; 0x30
 801600a:	2b00      	cmp	r3, #0
 801600c:	d1b5      	bne.n	8015f7a <_strtoul_l.constprop.0+0x3e>
 801600e:	2308      	movs	r3, #8
 8016010:	e7b3      	b.n	8015f7a <_strtoul_l.constprop.0+0x3e>
 8016012:	2c30      	cmp	r4, #48	; 0x30
 8016014:	d0a9      	beq.n	8015f6a <_strtoul_l.constprop.0+0x2e>
 8016016:	230a      	movs	r3, #10
 8016018:	e7af      	b.n	8015f7a <_strtoul_l.constprop.0+0x3e>
 801601a:	bf00      	nop
 801601c:	08017579 	.word	0x08017579

08016020 <_strtoul_r>:
 8016020:	f7ff bf8c 	b.w	8015f3c <_strtoul_l.constprop.0>

08016024 <strtoul>:
 8016024:	4613      	mov	r3, r2
 8016026:	460a      	mov	r2, r1
 8016028:	4601      	mov	r1, r0
 801602a:	4802      	ldr	r0, [pc, #8]	; (8016034 <strtoul+0x10>)
 801602c:	6800      	ldr	r0, [r0, #0]
 801602e:	f7ff bf85 	b.w	8015f3c <_strtoul_l.constprop.0>
 8016032:	bf00      	nop
 8016034:	200002b4 	.word	0x200002b4

08016038 <__swbuf_r>:
 8016038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801603a:	460e      	mov	r6, r1
 801603c:	4614      	mov	r4, r2
 801603e:	4605      	mov	r5, r0
 8016040:	b118      	cbz	r0, 801604a <__swbuf_r+0x12>
 8016042:	6983      	ldr	r3, [r0, #24]
 8016044:	b90b      	cbnz	r3, 801604a <__swbuf_r+0x12>
 8016046:	f7fe f901 	bl	801424c <__sinit>
 801604a:	4b21      	ldr	r3, [pc, #132]	; (80160d0 <__swbuf_r+0x98>)
 801604c:	429c      	cmp	r4, r3
 801604e:	d12b      	bne.n	80160a8 <__swbuf_r+0x70>
 8016050:	686c      	ldr	r4, [r5, #4]
 8016052:	69a3      	ldr	r3, [r4, #24]
 8016054:	60a3      	str	r3, [r4, #8]
 8016056:	89a3      	ldrh	r3, [r4, #12]
 8016058:	071a      	lsls	r2, r3, #28
 801605a:	d52f      	bpl.n	80160bc <__swbuf_r+0x84>
 801605c:	6923      	ldr	r3, [r4, #16]
 801605e:	b36b      	cbz	r3, 80160bc <__swbuf_r+0x84>
 8016060:	6923      	ldr	r3, [r4, #16]
 8016062:	6820      	ldr	r0, [r4, #0]
 8016064:	1ac0      	subs	r0, r0, r3
 8016066:	6963      	ldr	r3, [r4, #20]
 8016068:	b2f6      	uxtb	r6, r6
 801606a:	4283      	cmp	r3, r0
 801606c:	4637      	mov	r7, r6
 801606e:	dc04      	bgt.n	801607a <__swbuf_r+0x42>
 8016070:	4621      	mov	r1, r4
 8016072:	4628      	mov	r0, r5
 8016074:	f7ff fa0a 	bl	801548c <_fflush_r>
 8016078:	bb30      	cbnz	r0, 80160c8 <__swbuf_r+0x90>
 801607a:	68a3      	ldr	r3, [r4, #8]
 801607c:	3b01      	subs	r3, #1
 801607e:	60a3      	str	r3, [r4, #8]
 8016080:	6823      	ldr	r3, [r4, #0]
 8016082:	1c5a      	adds	r2, r3, #1
 8016084:	6022      	str	r2, [r4, #0]
 8016086:	701e      	strb	r6, [r3, #0]
 8016088:	6963      	ldr	r3, [r4, #20]
 801608a:	3001      	adds	r0, #1
 801608c:	4283      	cmp	r3, r0
 801608e:	d004      	beq.n	801609a <__swbuf_r+0x62>
 8016090:	89a3      	ldrh	r3, [r4, #12]
 8016092:	07db      	lsls	r3, r3, #31
 8016094:	d506      	bpl.n	80160a4 <__swbuf_r+0x6c>
 8016096:	2e0a      	cmp	r6, #10
 8016098:	d104      	bne.n	80160a4 <__swbuf_r+0x6c>
 801609a:	4621      	mov	r1, r4
 801609c:	4628      	mov	r0, r5
 801609e:	f7ff f9f5 	bl	801548c <_fflush_r>
 80160a2:	b988      	cbnz	r0, 80160c8 <__swbuf_r+0x90>
 80160a4:	4638      	mov	r0, r7
 80160a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160a8:	4b0a      	ldr	r3, [pc, #40]	; (80160d4 <__swbuf_r+0x9c>)
 80160aa:	429c      	cmp	r4, r3
 80160ac:	d101      	bne.n	80160b2 <__swbuf_r+0x7a>
 80160ae:	68ac      	ldr	r4, [r5, #8]
 80160b0:	e7cf      	b.n	8016052 <__swbuf_r+0x1a>
 80160b2:	4b09      	ldr	r3, [pc, #36]	; (80160d8 <__swbuf_r+0xa0>)
 80160b4:	429c      	cmp	r4, r3
 80160b6:	bf08      	it	eq
 80160b8:	68ec      	ldreq	r4, [r5, #12]
 80160ba:	e7ca      	b.n	8016052 <__swbuf_r+0x1a>
 80160bc:	4621      	mov	r1, r4
 80160be:	4628      	mov	r0, r5
 80160c0:	f000 f80c 	bl	80160dc <__swsetup_r>
 80160c4:	2800      	cmp	r0, #0
 80160c6:	d0cb      	beq.n	8016060 <__swbuf_r+0x28>
 80160c8:	f04f 37ff 	mov.w	r7, #4294967295
 80160cc:	e7ea      	b.n	80160a4 <__swbuf_r+0x6c>
 80160ce:	bf00      	nop
 80160d0:	080173e8 	.word	0x080173e8
 80160d4:	08017408 	.word	0x08017408
 80160d8:	080173c8 	.word	0x080173c8

080160dc <__swsetup_r>:
 80160dc:	4b32      	ldr	r3, [pc, #200]	; (80161a8 <__swsetup_r+0xcc>)
 80160de:	b570      	push	{r4, r5, r6, lr}
 80160e0:	681d      	ldr	r5, [r3, #0]
 80160e2:	4606      	mov	r6, r0
 80160e4:	460c      	mov	r4, r1
 80160e6:	b125      	cbz	r5, 80160f2 <__swsetup_r+0x16>
 80160e8:	69ab      	ldr	r3, [r5, #24]
 80160ea:	b913      	cbnz	r3, 80160f2 <__swsetup_r+0x16>
 80160ec:	4628      	mov	r0, r5
 80160ee:	f7fe f8ad 	bl	801424c <__sinit>
 80160f2:	4b2e      	ldr	r3, [pc, #184]	; (80161ac <__swsetup_r+0xd0>)
 80160f4:	429c      	cmp	r4, r3
 80160f6:	d10f      	bne.n	8016118 <__swsetup_r+0x3c>
 80160f8:	686c      	ldr	r4, [r5, #4]
 80160fa:	89a3      	ldrh	r3, [r4, #12]
 80160fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016100:	0719      	lsls	r1, r3, #28
 8016102:	d42c      	bmi.n	801615e <__swsetup_r+0x82>
 8016104:	06dd      	lsls	r5, r3, #27
 8016106:	d411      	bmi.n	801612c <__swsetup_r+0x50>
 8016108:	2309      	movs	r3, #9
 801610a:	6033      	str	r3, [r6, #0]
 801610c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016110:	81a3      	strh	r3, [r4, #12]
 8016112:	f04f 30ff 	mov.w	r0, #4294967295
 8016116:	e03e      	b.n	8016196 <__swsetup_r+0xba>
 8016118:	4b25      	ldr	r3, [pc, #148]	; (80161b0 <__swsetup_r+0xd4>)
 801611a:	429c      	cmp	r4, r3
 801611c:	d101      	bne.n	8016122 <__swsetup_r+0x46>
 801611e:	68ac      	ldr	r4, [r5, #8]
 8016120:	e7eb      	b.n	80160fa <__swsetup_r+0x1e>
 8016122:	4b24      	ldr	r3, [pc, #144]	; (80161b4 <__swsetup_r+0xd8>)
 8016124:	429c      	cmp	r4, r3
 8016126:	bf08      	it	eq
 8016128:	68ec      	ldreq	r4, [r5, #12]
 801612a:	e7e6      	b.n	80160fa <__swsetup_r+0x1e>
 801612c:	0758      	lsls	r0, r3, #29
 801612e:	d512      	bpl.n	8016156 <__swsetup_r+0x7a>
 8016130:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016132:	b141      	cbz	r1, 8016146 <__swsetup_r+0x6a>
 8016134:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016138:	4299      	cmp	r1, r3
 801613a:	d002      	beq.n	8016142 <__swsetup_r+0x66>
 801613c:	4630      	mov	r0, r6
 801613e:	f7fe fbe5 	bl	801490c <_free_r>
 8016142:	2300      	movs	r3, #0
 8016144:	6363      	str	r3, [r4, #52]	; 0x34
 8016146:	89a3      	ldrh	r3, [r4, #12]
 8016148:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801614c:	81a3      	strh	r3, [r4, #12]
 801614e:	2300      	movs	r3, #0
 8016150:	6063      	str	r3, [r4, #4]
 8016152:	6923      	ldr	r3, [r4, #16]
 8016154:	6023      	str	r3, [r4, #0]
 8016156:	89a3      	ldrh	r3, [r4, #12]
 8016158:	f043 0308 	orr.w	r3, r3, #8
 801615c:	81a3      	strh	r3, [r4, #12]
 801615e:	6923      	ldr	r3, [r4, #16]
 8016160:	b94b      	cbnz	r3, 8016176 <__swsetup_r+0x9a>
 8016162:	89a3      	ldrh	r3, [r4, #12]
 8016164:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801616c:	d003      	beq.n	8016176 <__swsetup_r+0x9a>
 801616e:	4621      	mov	r1, r4
 8016170:	4630      	mov	r0, r6
 8016172:	f000 f85b 	bl	801622c <__smakebuf_r>
 8016176:	89a0      	ldrh	r0, [r4, #12]
 8016178:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801617c:	f010 0301 	ands.w	r3, r0, #1
 8016180:	d00a      	beq.n	8016198 <__swsetup_r+0xbc>
 8016182:	2300      	movs	r3, #0
 8016184:	60a3      	str	r3, [r4, #8]
 8016186:	6963      	ldr	r3, [r4, #20]
 8016188:	425b      	negs	r3, r3
 801618a:	61a3      	str	r3, [r4, #24]
 801618c:	6923      	ldr	r3, [r4, #16]
 801618e:	b943      	cbnz	r3, 80161a2 <__swsetup_r+0xc6>
 8016190:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016194:	d1ba      	bne.n	801610c <__swsetup_r+0x30>
 8016196:	bd70      	pop	{r4, r5, r6, pc}
 8016198:	0781      	lsls	r1, r0, #30
 801619a:	bf58      	it	pl
 801619c:	6963      	ldrpl	r3, [r4, #20]
 801619e:	60a3      	str	r3, [r4, #8]
 80161a0:	e7f4      	b.n	801618c <__swsetup_r+0xb0>
 80161a2:	2000      	movs	r0, #0
 80161a4:	e7f7      	b.n	8016196 <__swsetup_r+0xba>
 80161a6:	bf00      	nop
 80161a8:	200002b4 	.word	0x200002b4
 80161ac:	080173e8 	.word	0x080173e8
 80161b0:	08017408 	.word	0x08017408
 80161b4:	080173c8 	.word	0x080173c8

080161b8 <abort>:
 80161b8:	b508      	push	{r3, lr}
 80161ba:	2006      	movs	r0, #6
 80161bc:	f000 fc44 	bl	8016a48 <raise>
 80161c0:	2001      	movs	r0, #1
 80161c2:	f7ec fc25 	bl	8002a10 <_exit>
	...

080161c8 <__env_lock>:
 80161c8:	4801      	ldr	r0, [pc, #4]	; (80161d0 <__env_lock+0x8>)
 80161ca:	f7fe b903 	b.w	80143d4 <__retarget_lock_acquire_recursive>
 80161ce:	bf00      	nop
 80161d0:	2000bf4c 	.word	0x2000bf4c

080161d4 <__env_unlock>:
 80161d4:	4801      	ldr	r0, [pc, #4]	; (80161dc <__env_unlock+0x8>)
 80161d6:	f7fe b8ff 	b.w	80143d8 <__retarget_lock_release_recursive>
 80161da:	bf00      	nop
 80161dc:	2000bf4c 	.word	0x2000bf4c

080161e0 <__swhatbuf_r>:
 80161e0:	b570      	push	{r4, r5, r6, lr}
 80161e2:	460e      	mov	r6, r1
 80161e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80161e8:	2900      	cmp	r1, #0
 80161ea:	b096      	sub	sp, #88	; 0x58
 80161ec:	4614      	mov	r4, r2
 80161ee:	461d      	mov	r5, r3
 80161f0:	da08      	bge.n	8016204 <__swhatbuf_r+0x24>
 80161f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80161f6:	2200      	movs	r2, #0
 80161f8:	602a      	str	r2, [r5, #0]
 80161fa:	061a      	lsls	r2, r3, #24
 80161fc:	d410      	bmi.n	8016220 <__swhatbuf_r+0x40>
 80161fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016202:	e00e      	b.n	8016222 <__swhatbuf_r+0x42>
 8016204:	466a      	mov	r2, sp
 8016206:	f000 fc75 	bl	8016af4 <_fstat_r>
 801620a:	2800      	cmp	r0, #0
 801620c:	dbf1      	blt.n	80161f2 <__swhatbuf_r+0x12>
 801620e:	9a01      	ldr	r2, [sp, #4]
 8016210:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016214:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016218:	425a      	negs	r2, r3
 801621a:	415a      	adcs	r2, r3
 801621c:	602a      	str	r2, [r5, #0]
 801621e:	e7ee      	b.n	80161fe <__swhatbuf_r+0x1e>
 8016220:	2340      	movs	r3, #64	; 0x40
 8016222:	2000      	movs	r0, #0
 8016224:	6023      	str	r3, [r4, #0]
 8016226:	b016      	add	sp, #88	; 0x58
 8016228:	bd70      	pop	{r4, r5, r6, pc}
	...

0801622c <__smakebuf_r>:
 801622c:	898b      	ldrh	r3, [r1, #12]
 801622e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016230:	079d      	lsls	r5, r3, #30
 8016232:	4606      	mov	r6, r0
 8016234:	460c      	mov	r4, r1
 8016236:	d507      	bpl.n	8016248 <__smakebuf_r+0x1c>
 8016238:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801623c:	6023      	str	r3, [r4, #0]
 801623e:	6123      	str	r3, [r4, #16]
 8016240:	2301      	movs	r3, #1
 8016242:	6163      	str	r3, [r4, #20]
 8016244:	b002      	add	sp, #8
 8016246:	bd70      	pop	{r4, r5, r6, pc}
 8016248:	ab01      	add	r3, sp, #4
 801624a:	466a      	mov	r2, sp
 801624c:	f7ff ffc8 	bl	80161e0 <__swhatbuf_r>
 8016250:	9900      	ldr	r1, [sp, #0]
 8016252:	4605      	mov	r5, r0
 8016254:	4630      	mov	r0, r6
 8016256:	f7fe fbc5 	bl	80149e4 <_malloc_r>
 801625a:	b948      	cbnz	r0, 8016270 <__smakebuf_r+0x44>
 801625c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016260:	059a      	lsls	r2, r3, #22
 8016262:	d4ef      	bmi.n	8016244 <__smakebuf_r+0x18>
 8016264:	f023 0303 	bic.w	r3, r3, #3
 8016268:	f043 0302 	orr.w	r3, r3, #2
 801626c:	81a3      	strh	r3, [r4, #12]
 801626e:	e7e3      	b.n	8016238 <__smakebuf_r+0xc>
 8016270:	4b0d      	ldr	r3, [pc, #52]	; (80162a8 <__smakebuf_r+0x7c>)
 8016272:	62b3      	str	r3, [r6, #40]	; 0x28
 8016274:	89a3      	ldrh	r3, [r4, #12]
 8016276:	6020      	str	r0, [r4, #0]
 8016278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801627c:	81a3      	strh	r3, [r4, #12]
 801627e:	9b00      	ldr	r3, [sp, #0]
 8016280:	6163      	str	r3, [r4, #20]
 8016282:	9b01      	ldr	r3, [sp, #4]
 8016284:	6120      	str	r0, [r4, #16]
 8016286:	b15b      	cbz	r3, 80162a0 <__smakebuf_r+0x74>
 8016288:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801628c:	4630      	mov	r0, r6
 801628e:	f000 fc43 	bl	8016b18 <_isatty_r>
 8016292:	b128      	cbz	r0, 80162a0 <__smakebuf_r+0x74>
 8016294:	89a3      	ldrh	r3, [r4, #12]
 8016296:	f023 0303 	bic.w	r3, r3, #3
 801629a:	f043 0301 	orr.w	r3, r3, #1
 801629e:	81a3      	strh	r3, [r4, #12]
 80162a0:	89a0      	ldrh	r0, [r4, #12]
 80162a2:	4305      	orrs	r5, r0
 80162a4:	81a5      	strh	r5, [r4, #12]
 80162a6:	e7cd      	b.n	8016244 <__smakebuf_r+0x18>
 80162a8:	080141e5 	.word	0x080141e5

080162ac <memmove>:
 80162ac:	4288      	cmp	r0, r1
 80162ae:	b510      	push	{r4, lr}
 80162b0:	eb01 0402 	add.w	r4, r1, r2
 80162b4:	d902      	bls.n	80162bc <memmove+0x10>
 80162b6:	4284      	cmp	r4, r0
 80162b8:	4623      	mov	r3, r4
 80162ba:	d807      	bhi.n	80162cc <memmove+0x20>
 80162bc:	1e43      	subs	r3, r0, #1
 80162be:	42a1      	cmp	r1, r4
 80162c0:	d008      	beq.n	80162d4 <memmove+0x28>
 80162c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80162c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80162ca:	e7f8      	b.n	80162be <memmove+0x12>
 80162cc:	4402      	add	r2, r0
 80162ce:	4601      	mov	r1, r0
 80162d0:	428a      	cmp	r2, r1
 80162d2:	d100      	bne.n	80162d6 <memmove+0x2a>
 80162d4:	bd10      	pop	{r4, pc}
 80162d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80162da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80162de:	e7f7      	b.n	80162d0 <memmove+0x24>

080162e0 <_realloc_r>:
 80162e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162e4:	4680      	mov	r8, r0
 80162e6:	4614      	mov	r4, r2
 80162e8:	460e      	mov	r6, r1
 80162ea:	b921      	cbnz	r1, 80162f6 <_realloc_r+0x16>
 80162ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80162f0:	4611      	mov	r1, r2
 80162f2:	f7fe bb77 	b.w	80149e4 <_malloc_r>
 80162f6:	b92a      	cbnz	r2, 8016304 <_realloc_r+0x24>
 80162f8:	f7fe fb08 	bl	801490c <_free_r>
 80162fc:	4625      	mov	r5, r4
 80162fe:	4628      	mov	r0, r5
 8016300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016304:	f000 fc18 	bl	8016b38 <_malloc_usable_size_r>
 8016308:	4284      	cmp	r4, r0
 801630a:	4607      	mov	r7, r0
 801630c:	d802      	bhi.n	8016314 <_realloc_r+0x34>
 801630e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016312:	d812      	bhi.n	801633a <_realloc_r+0x5a>
 8016314:	4621      	mov	r1, r4
 8016316:	4640      	mov	r0, r8
 8016318:	f7fe fb64 	bl	80149e4 <_malloc_r>
 801631c:	4605      	mov	r5, r0
 801631e:	2800      	cmp	r0, #0
 8016320:	d0ed      	beq.n	80162fe <_realloc_r+0x1e>
 8016322:	42bc      	cmp	r4, r7
 8016324:	4622      	mov	r2, r4
 8016326:	4631      	mov	r1, r6
 8016328:	bf28      	it	cs
 801632a:	463a      	movcs	r2, r7
 801632c:	f7fe f866 	bl	80143fc <memcpy>
 8016330:	4631      	mov	r1, r6
 8016332:	4640      	mov	r0, r8
 8016334:	f7fe faea 	bl	801490c <_free_r>
 8016338:	e7e1      	b.n	80162fe <_realloc_r+0x1e>
 801633a:	4635      	mov	r5, r6
 801633c:	e7df      	b.n	80162fe <_realloc_r+0x1e>

0801633e <_sungetc_r>:
 801633e:	b538      	push	{r3, r4, r5, lr}
 8016340:	1c4b      	adds	r3, r1, #1
 8016342:	4614      	mov	r4, r2
 8016344:	d103      	bne.n	801634e <_sungetc_r+0x10>
 8016346:	f04f 35ff 	mov.w	r5, #4294967295
 801634a:	4628      	mov	r0, r5
 801634c:	bd38      	pop	{r3, r4, r5, pc}
 801634e:	8993      	ldrh	r3, [r2, #12]
 8016350:	f023 0320 	bic.w	r3, r3, #32
 8016354:	8193      	strh	r3, [r2, #12]
 8016356:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016358:	6852      	ldr	r2, [r2, #4]
 801635a:	b2cd      	uxtb	r5, r1
 801635c:	b18b      	cbz	r3, 8016382 <_sungetc_r+0x44>
 801635e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016360:	4293      	cmp	r3, r2
 8016362:	dd08      	ble.n	8016376 <_sungetc_r+0x38>
 8016364:	6823      	ldr	r3, [r4, #0]
 8016366:	1e5a      	subs	r2, r3, #1
 8016368:	6022      	str	r2, [r4, #0]
 801636a:	f803 5c01 	strb.w	r5, [r3, #-1]
 801636e:	6863      	ldr	r3, [r4, #4]
 8016370:	3301      	adds	r3, #1
 8016372:	6063      	str	r3, [r4, #4]
 8016374:	e7e9      	b.n	801634a <_sungetc_r+0xc>
 8016376:	4621      	mov	r1, r4
 8016378:	f000 fb82 	bl	8016a80 <__submore>
 801637c:	2800      	cmp	r0, #0
 801637e:	d0f1      	beq.n	8016364 <_sungetc_r+0x26>
 8016380:	e7e1      	b.n	8016346 <_sungetc_r+0x8>
 8016382:	6921      	ldr	r1, [r4, #16]
 8016384:	6823      	ldr	r3, [r4, #0]
 8016386:	b151      	cbz	r1, 801639e <_sungetc_r+0x60>
 8016388:	4299      	cmp	r1, r3
 801638a:	d208      	bcs.n	801639e <_sungetc_r+0x60>
 801638c:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016390:	42a9      	cmp	r1, r5
 8016392:	d104      	bne.n	801639e <_sungetc_r+0x60>
 8016394:	3b01      	subs	r3, #1
 8016396:	3201      	adds	r2, #1
 8016398:	6023      	str	r3, [r4, #0]
 801639a:	6062      	str	r2, [r4, #4]
 801639c:	e7d5      	b.n	801634a <_sungetc_r+0xc>
 801639e:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80163a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80163a6:	6363      	str	r3, [r4, #52]	; 0x34
 80163a8:	2303      	movs	r3, #3
 80163aa:	63a3      	str	r3, [r4, #56]	; 0x38
 80163ac:	4623      	mov	r3, r4
 80163ae:	f803 5f46 	strb.w	r5, [r3, #70]!
 80163b2:	6023      	str	r3, [r4, #0]
 80163b4:	2301      	movs	r3, #1
 80163b6:	e7dc      	b.n	8016372 <_sungetc_r+0x34>

080163b8 <__ssrefill_r>:
 80163b8:	b510      	push	{r4, lr}
 80163ba:	460c      	mov	r4, r1
 80163bc:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80163be:	b169      	cbz	r1, 80163dc <__ssrefill_r+0x24>
 80163c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80163c4:	4299      	cmp	r1, r3
 80163c6:	d001      	beq.n	80163cc <__ssrefill_r+0x14>
 80163c8:	f7fe faa0 	bl	801490c <_free_r>
 80163cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80163ce:	6063      	str	r3, [r4, #4]
 80163d0:	2000      	movs	r0, #0
 80163d2:	6360      	str	r0, [r4, #52]	; 0x34
 80163d4:	b113      	cbz	r3, 80163dc <__ssrefill_r+0x24>
 80163d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80163d8:	6023      	str	r3, [r4, #0]
 80163da:	bd10      	pop	{r4, pc}
 80163dc:	6923      	ldr	r3, [r4, #16]
 80163de:	6023      	str	r3, [r4, #0]
 80163e0:	2300      	movs	r3, #0
 80163e2:	6063      	str	r3, [r4, #4]
 80163e4:	89a3      	ldrh	r3, [r4, #12]
 80163e6:	f043 0320 	orr.w	r3, r3, #32
 80163ea:	81a3      	strh	r3, [r4, #12]
 80163ec:	f04f 30ff 	mov.w	r0, #4294967295
 80163f0:	e7f3      	b.n	80163da <__ssrefill_r+0x22>
	...

080163f4 <__ssvfiscanf_r>:
 80163f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163f8:	460c      	mov	r4, r1
 80163fa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80163fe:	2100      	movs	r1, #0
 8016400:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8016404:	49a6      	ldr	r1, [pc, #664]	; (80166a0 <__ssvfiscanf_r+0x2ac>)
 8016406:	91a0      	str	r1, [sp, #640]	; 0x280
 8016408:	f10d 0804 	add.w	r8, sp, #4
 801640c:	49a5      	ldr	r1, [pc, #660]	; (80166a4 <__ssvfiscanf_r+0x2b0>)
 801640e:	4fa6      	ldr	r7, [pc, #664]	; (80166a8 <__ssvfiscanf_r+0x2b4>)
 8016410:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80166ac <__ssvfiscanf_r+0x2b8>
 8016414:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016418:	4606      	mov	r6, r0
 801641a:	91a1      	str	r1, [sp, #644]	; 0x284
 801641c:	9300      	str	r3, [sp, #0]
 801641e:	7813      	ldrb	r3, [r2, #0]
 8016420:	2b00      	cmp	r3, #0
 8016422:	f000 815a 	beq.w	80166da <__ssvfiscanf_r+0x2e6>
 8016426:	5dd9      	ldrb	r1, [r3, r7]
 8016428:	f011 0108 	ands.w	r1, r1, #8
 801642c:	f102 0501 	add.w	r5, r2, #1
 8016430:	d019      	beq.n	8016466 <__ssvfiscanf_r+0x72>
 8016432:	6863      	ldr	r3, [r4, #4]
 8016434:	2b00      	cmp	r3, #0
 8016436:	dd0f      	ble.n	8016458 <__ssvfiscanf_r+0x64>
 8016438:	6823      	ldr	r3, [r4, #0]
 801643a:	781a      	ldrb	r2, [r3, #0]
 801643c:	5cba      	ldrb	r2, [r7, r2]
 801643e:	0712      	lsls	r2, r2, #28
 8016440:	d401      	bmi.n	8016446 <__ssvfiscanf_r+0x52>
 8016442:	462a      	mov	r2, r5
 8016444:	e7eb      	b.n	801641e <__ssvfiscanf_r+0x2a>
 8016446:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016448:	3201      	adds	r2, #1
 801644a:	9245      	str	r2, [sp, #276]	; 0x114
 801644c:	6862      	ldr	r2, [r4, #4]
 801644e:	3301      	adds	r3, #1
 8016450:	3a01      	subs	r2, #1
 8016452:	6062      	str	r2, [r4, #4]
 8016454:	6023      	str	r3, [r4, #0]
 8016456:	e7ec      	b.n	8016432 <__ssvfiscanf_r+0x3e>
 8016458:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801645a:	4621      	mov	r1, r4
 801645c:	4630      	mov	r0, r6
 801645e:	4798      	blx	r3
 8016460:	2800      	cmp	r0, #0
 8016462:	d0e9      	beq.n	8016438 <__ssvfiscanf_r+0x44>
 8016464:	e7ed      	b.n	8016442 <__ssvfiscanf_r+0x4e>
 8016466:	2b25      	cmp	r3, #37	; 0x25
 8016468:	d012      	beq.n	8016490 <__ssvfiscanf_r+0x9c>
 801646a:	469a      	mov	sl, r3
 801646c:	6863      	ldr	r3, [r4, #4]
 801646e:	2b00      	cmp	r3, #0
 8016470:	f340 8091 	ble.w	8016596 <__ssvfiscanf_r+0x1a2>
 8016474:	6822      	ldr	r2, [r4, #0]
 8016476:	7813      	ldrb	r3, [r2, #0]
 8016478:	4553      	cmp	r3, sl
 801647a:	f040 812e 	bne.w	80166da <__ssvfiscanf_r+0x2e6>
 801647e:	6863      	ldr	r3, [r4, #4]
 8016480:	3b01      	subs	r3, #1
 8016482:	6063      	str	r3, [r4, #4]
 8016484:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8016486:	3201      	adds	r2, #1
 8016488:	3301      	adds	r3, #1
 801648a:	6022      	str	r2, [r4, #0]
 801648c:	9345      	str	r3, [sp, #276]	; 0x114
 801648e:	e7d8      	b.n	8016442 <__ssvfiscanf_r+0x4e>
 8016490:	9141      	str	r1, [sp, #260]	; 0x104
 8016492:	9143      	str	r1, [sp, #268]	; 0x10c
 8016494:	7853      	ldrb	r3, [r2, #1]
 8016496:	2b2a      	cmp	r3, #42	; 0x2a
 8016498:	bf02      	ittt	eq
 801649a:	2310      	moveq	r3, #16
 801649c:	1c95      	addeq	r5, r2, #2
 801649e:	9341      	streq	r3, [sp, #260]	; 0x104
 80164a0:	220a      	movs	r2, #10
 80164a2:	46aa      	mov	sl, r5
 80164a4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80164a8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80164ac:	2b09      	cmp	r3, #9
 80164ae:	d91d      	bls.n	80164ec <__ssvfiscanf_r+0xf8>
 80164b0:	487e      	ldr	r0, [pc, #504]	; (80166ac <__ssvfiscanf_r+0x2b8>)
 80164b2:	2203      	movs	r2, #3
 80164b4:	f7e9 fea4 	bl	8000200 <memchr>
 80164b8:	b140      	cbz	r0, 80164cc <__ssvfiscanf_r+0xd8>
 80164ba:	2301      	movs	r3, #1
 80164bc:	eba0 0009 	sub.w	r0, r0, r9
 80164c0:	fa03 f000 	lsl.w	r0, r3, r0
 80164c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80164c6:	4318      	orrs	r0, r3
 80164c8:	9041      	str	r0, [sp, #260]	; 0x104
 80164ca:	4655      	mov	r5, sl
 80164cc:	f815 3b01 	ldrb.w	r3, [r5], #1
 80164d0:	2b78      	cmp	r3, #120	; 0x78
 80164d2:	d806      	bhi.n	80164e2 <__ssvfiscanf_r+0xee>
 80164d4:	2b57      	cmp	r3, #87	; 0x57
 80164d6:	d810      	bhi.n	80164fa <__ssvfiscanf_r+0x106>
 80164d8:	2b25      	cmp	r3, #37	; 0x25
 80164da:	d0c6      	beq.n	801646a <__ssvfiscanf_r+0x76>
 80164dc:	d856      	bhi.n	801658c <__ssvfiscanf_r+0x198>
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d064      	beq.n	80165ac <__ssvfiscanf_r+0x1b8>
 80164e2:	2303      	movs	r3, #3
 80164e4:	9347      	str	r3, [sp, #284]	; 0x11c
 80164e6:	230a      	movs	r3, #10
 80164e8:	9342      	str	r3, [sp, #264]	; 0x108
 80164ea:	e071      	b.n	80165d0 <__ssvfiscanf_r+0x1dc>
 80164ec:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80164ee:	fb02 1103 	mla	r1, r2, r3, r1
 80164f2:	3930      	subs	r1, #48	; 0x30
 80164f4:	9143      	str	r1, [sp, #268]	; 0x10c
 80164f6:	4655      	mov	r5, sl
 80164f8:	e7d3      	b.n	80164a2 <__ssvfiscanf_r+0xae>
 80164fa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80164fe:	2a20      	cmp	r2, #32
 8016500:	d8ef      	bhi.n	80164e2 <__ssvfiscanf_r+0xee>
 8016502:	a101      	add	r1, pc, #4	; (adr r1, 8016508 <__ssvfiscanf_r+0x114>)
 8016504:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016508:	080165bb 	.word	0x080165bb
 801650c:	080164e3 	.word	0x080164e3
 8016510:	080164e3 	.word	0x080164e3
 8016514:	08016619 	.word	0x08016619
 8016518:	080164e3 	.word	0x080164e3
 801651c:	080164e3 	.word	0x080164e3
 8016520:	080164e3 	.word	0x080164e3
 8016524:	080164e3 	.word	0x080164e3
 8016528:	080164e3 	.word	0x080164e3
 801652c:	080164e3 	.word	0x080164e3
 8016530:	080164e3 	.word	0x080164e3
 8016534:	0801662f 	.word	0x0801662f
 8016538:	08016605 	.word	0x08016605
 801653c:	08016593 	.word	0x08016593
 8016540:	08016593 	.word	0x08016593
 8016544:	08016593 	.word	0x08016593
 8016548:	080164e3 	.word	0x080164e3
 801654c:	08016609 	.word	0x08016609
 8016550:	080164e3 	.word	0x080164e3
 8016554:	080164e3 	.word	0x080164e3
 8016558:	080164e3 	.word	0x080164e3
 801655c:	080164e3 	.word	0x080164e3
 8016560:	0801663f 	.word	0x0801663f
 8016564:	08016611 	.word	0x08016611
 8016568:	080165b3 	.word	0x080165b3
 801656c:	080164e3 	.word	0x080164e3
 8016570:	080164e3 	.word	0x080164e3
 8016574:	0801663b 	.word	0x0801663b
 8016578:	080164e3 	.word	0x080164e3
 801657c:	08016605 	.word	0x08016605
 8016580:	080164e3 	.word	0x080164e3
 8016584:	080164e3 	.word	0x080164e3
 8016588:	080165bb 	.word	0x080165bb
 801658c:	3b45      	subs	r3, #69	; 0x45
 801658e:	2b02      	cmp	r3, #2
 8016590:	d8a7      	bhi.n	80164e2 <__ssvfiscanf_r+0xee>
 8016592:	2305      	movs	r3, #5
 8016594:	e01b      	b.n	80165ce <__ssvfiscanf_r+0x1da>
 8016596:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016598:	4621      	mov	r1, r4
 801659a:	4630      	mov	r0, r6
 801659c:	4798      	blx	r3
 801659e:	2800      	cmp	r0, #0
 80165a0:	f43f af68 	beq.w	8016474 <__ssvfiscanf_r+0x80>
 80165a4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80165a6:	2800      	cmp	r0, #0
 80165a8:	f040 808d 	bne.w	80166c6 <__ssvfiscanf_r+0x2d2>
 80165ac:	f04f 30ff 	mov.w	r0, #4294967295
 80165b0:	e08f      	b.n	80166d2 <__ssvfiscanf_r+0x2de>
 80165b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80165b4:	f042 0220 	orr.w	r2, r2, #32
 80165b8:	9241      	str	r2, [sp, #260]	; 0x104
 80165ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80165bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80165c0:	9241      	str	r2, [sp, #260]	; 0x104
 80165c2:	2210      	movs	r2, #16
 80165c4:	2b6f      	cmp	r3, #111	; 0x6f
 80165c6:	9242      	str	r2, [sp, #264]	; 0x108
 80165c8:	bf34      	ite	cc
 80165ca:	2303      	movcc	r3, #3
 80165cc:	2304      	movcs	r3, #4
 80165ce:	9347      	str	r3, [sp, #284]	; 0x11c
 80165d0:	6863      	ldr	r3, [r4, #4]
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	dd42      	ble.n	801665c <__ssvfiscanf_r+0x268>
 80165d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80165d8:	0659      	lsls	r1, r3, #25
 80165da:	d404      	bmi.n	80165e6 <__ssvfiscanf_r+0x1f2>
 80165dc:	6823      	ldr	r3, [r4, #0]
 80165de:	781a      	ldrb	r2, [r3, #0]
 80165e0:	5cba      	ldrb	r2, [r7, r2]
 80165e2:	0712      	lsls	r2, r2, #28
 80165e4:	d441      	bmi.n	801666a <__ssvfiscanf_r+0x276>
 80165e6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80165e8:	2b02      	cmp	r3, #2
 80165ea:	dc50      	bgt.n	801668e <__ssvfiscanf_r+0x29a>
 80165ec:	466b      	mov	r3, sp
 80165ee:	4622      	mov	r2, r4
 80165f0:	a941      	add	r1, sp, #260	; 0x104
 80165f2:	4630      	mov	r0, r6
 80165f4:	f000 f876 	bl	80166e4 <_scanf_chars>
 80165f8:	2801      	cmp	r0, #1
 80165fa:	d06e      	beq.n	80166da <__ssvfiscanf_r+0x2e6>
 80165fc:	2802      	cmp	r0, #2
 80165fe:	f47f af20 	bne.w	8016442 <__ssvfiscanf_r+0x4e>
 8016602:	e7cf      	b.n	80165a4 <__ssvfiscanf_r+0x1b0>
 8016604:	220a      	movs	r2, #10
 8016606:	e7dd      	b.n	80165c4 <__ssvfiscanf_r+0x1d0>
 8016608:	2300      	movs	r3, #0
 801660a:	9342      	str	r3, [sp, #264]	; 0x108
 801660c:	2303      	movs	r3, #3
 801660e:	e7de      	b.n	80165ce <__ssvfiscanf_r+0x1da>
 8016610:	2308      	movs	r3, #8
 8016612:	9342      	str	r3, [sp, #264]	; 0x108
 8016614:	2304      	movs	r3, #4
 8016616:	e7da      	b.n	80165ce <__ssvfiscanf_r+0x1da>
 8016618:	4629      	mov	r1, r5
 801661a:	4640      	mov	r0, r8
 801661c:	f000 f9b4 	bl	8016988 <__sccl>
 8016620:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016626:	9341      	str	r3, [sp, #260]	; 0x104
 8016628:	4605      	mov	r5, r0
 801662a:	2301      	movs	r3, #1
 801662c:	e7cf      	b.n	80165ce <__ssvfiscanf_r+0x1da>
 801662e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016634:	9341      	str	r3, [sp, #260]	; 0x104
 8016636:	2300      	movs	r3, #0
 8016638:	e7c9      	b.n	80165ce <__ssvfiscanf_r+0x1da>
 801663a:	2302      	movs	r3, #2
 801663c:	e7c7      	b.n	80165ce <__ssvfiscanf_r+0x1da>
 801663e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8016640:	06c3      	lsls	r3, r0, #27
 8016642:	f53f aefe 	bmi.w	8016442 <__ssvfiscanf_r+0x4e>
 8016646:	9b00      	ldr	r3, [sp, #0]
 8016648:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801664a:	1d19      	adds	r1, r3, #4
 801664c:	9100      	str	r1, [sp, #0]
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	f010 0f01 	tst.w	r0, #1
 8016654:	bf14      	ite	ne
 8016656:	801a      	strhne	r2, [r3, #0]
 8016658:	601a      	streq	r2, [r3, #0]
 801665a:	e6f2      	b.n	8016442 <__ssvfiscanf_r+0x4e>
 801665c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801665e:	4621      	mov	r1, r4
 8016660:	4630      	mov	r0, r6
 8016662:	4798      	blx	r3
 8016664:	2800      	cmp	r0, #0
 8016666:	d0b6      	beq.n	80165d6 <__ssvfiscanf_r+0x1e2>
 8016668:	e79c      	b.n	80165a4 <__ssvfiscanf_r+0x1b0>
 801666a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801666c:	3201      	adds	r2, #1
 801666e:	9245      	str	r2, [sp, #276]	; 0x114
 8016670:	6862      	ldr	r2, [r4, #4]
 8016672:	3a01      	subs	r2, #1
 8016674:	2a00      	cmp	r2, #0
 8016676:	6062      	str	r2, [r4, #4]
 8016678:	dd02      	ble.n	8016680 <__ssvfiscanf_r+0x28c>
 801667a:	3301      	adds	r3, #1
 801667c:	6023      	str	r3, [r4, #0]
 801667e:	e7ad      	b.n	80165dc <__ssvfiscanf_r+0x1e8>
 8016680:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016682:	4621      	mov	r1, r4
 8016684:	4630      	mov	r0, r6
 8016686:	4798      	blx	r3
 8016688:	2800      	cmp	r0, #0
 801668a:	d0a7      	beq.n	80165dc <__ssvfiscanf_r+0x1e8>
 801668c:	e78a      	b.n	80165a4 <__ssvfiscanf_r+0x1b0>
 801668e:	2b04      	cmp	r3, #4
 8016690:	dc0e      	bgt.n	80166b0 <__ssvfiscanf_r+0x2bc>
 8016692:	466b      	mov	r3, sp
 8016694:	4622      	mov	r2, r4
 8016696:	a941      	add	r1, sp, #260	; 0x104
 8016698:	4630      	mov	r0, r6
 801669a:	f000 f87d 	bl	8016798 <_scanf_i>
 801669e:	e7ab      	b.n	80165f8 <__ssvfiscanf_r+0x204>
 80166a0:	0801633f 	.word	0x0801633f
 80166a4:	080163b9 	.word	0x080163b9
 80166a8:	08017579 	.word	0x08017579
 80166ac:	080176e2 	.word	0x080176e2
 80166b0:	4b0b      	ldr	r3, [pc, #44]	; (80166e0 <__ssvfiscanf_r+0x2ec>)
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	f43f aec5 	beq.w	8016442 <__ssvfiscanf_r+0x4e>
 80166b8:	466b      	mov	r3, sp
 80166ba:	4622      	mov	r2, r4
 80166bc:	a941      	add	r1, sp, #260	; 0x104
 80166be:	4630      	mov	r0, r6
 80166c0:	f3af 8000 	nop.w
 80166c4:	e798      	b.n	80165f8 <__ssvfiscanf_r+0x204>
 80166c6:	89a3      	ldrh	r3, [r4, #12]
 80166c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80166cc:	bf18      	it	ne
 80166ce:	f04f 30ff 	movne.w	r0, #4294967295
 80166d2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80166d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166da:	9844      	ldr	r0, [sp, #272]	; 0x110
 80166dc:	e7f9      	b.n	80166d2 <__ssvfiscanf_r+0x2de>
 80166de:	bf00      	nop
 80166e0:	00000000 	.word	0x00000000

080166e4 <_scanf_chars>:
 80166e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80166e8:	4615      	mov	r5, r2
 80166ea:	688a      	ldr	r2, [r1, #8]
 80166ec:	4680      	mov	r8, r0
 80166ee:	460c      	mov	r4, r1
 80166f0:	b932      	cbnz	r2, 8016700 <_scanf_chars+0x1c>
 80166f2:	698a      	ldr	r2, [r1, #24]
 80166f4:	2a00      	cmp	r2, #0
 80166f6:	bf0c      	ite	eq
 80166f8:	2201      	moveq	r2, #1
 80166fa:	f04f 32ff 	movne.w	r2, #4294967295
 80166fe:	608a      	str	r2, [r1, #8]
 8016700:	6822      	ldr	r2, [r4, #0]
 8016702:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8016794 <_scanf_chars+0xb0>
 8016706:	06d1      	lsls	r1, r2, #27
 8016708:	bf5f      	itttt	pl
 801670a:	681a      	ldrpl	r2, [r3, #0]
 801670c:	1d11      	addpl	r1, r2, #4
 801670e:	6019      	strpl	r1, [r3, #0]
 8016710:	6816      	ldrpl	r6, [r2, #0]
 8016712:	2700      	movs	r7, #0
 8016714:	69a0      	ldr	r0, [r4, #24]
 8016716:	b188      	cbz	r0, 801673c <_scanf_chars+0x58>
 8016718:	2801      	cmp	r0, #1
 801671a:	d107      	bne.n	801672c <_scanf_chars+0x48>
 801671c:	682a      	ldr	r2, [r5, #0]
 801671e:	7811      	ldrb	r1, [r2, #0]
 8016720:	6962      	ldr	r2, [r4, #20]
 8016722:	5c52      	ldrb	r2, [r2, r1]
 8016724:	b952      	cbnz	r2, 801673c <_scanf_chars+0x58>
 8016726:	2f00      	cmp	r7, #0
 8016728:	d031      	beq.n	801678e <_scanf_chars+0xaa>
 801672a:	e022      	b.n	8016772 <_scanf_chars+0x8e>
 801672c:	2802      	cmp	r0, #2
 801672e:	d120      	bne.n	8016772 <_scanf_chars+0x8e>
 8016730:	682b      	ldr	r3, [r5, #0]
 8016732:	781b      	ldrb	r3, [r3, #0]
 8016734:	f813 3009 	ldrb.w	r3, [r3, r9]
 8016738:	071b      	lsls	r3, r3, #28
 801673a:	d41a      	bmi.n	8016772 <_scanf_chars+0x8e>
 801673c:	6823      	ldr	r3, [r4, #0]
 801673e:	06da      	lsls	r2, r3, #27
 8016740:	bf5e      	ittt	pl
 8016742:	682b      	ldrpl	r3, [r5, #0]
 8016744:	781b      	ldrbpl	r3, [r3, #0]
 8016746:	f806 3b01 	strbpl.w	r3, [r6], #1
 801674a:	682a      	ldr	r2, [r5, #0]
 801674c:	686b      	ldr	r3, [r5, #4]
 801674e:	3201      	adds	r2, #1
 8016750:	602a      	str	r2, [r5, #0]
 8016752:	68a2      	ldr	r2, [r4, #8]
 8016754:	3b01      	subs	r3, #1
 8016756:	3a01      	subs	r2, #1
 8016758:	606b      	str	r3, [r5, #4]
 801675a:	3701      	adds	r7, #1
 801675c:	60a2      	str	r2, [r4, #8]
 801675e:	b142      	cbz	r2, 8016772 <_scanf_chars+0x8e>
 8016760:	2b00      	cmp	r3, #0
 8016762:	dcd7      	bgt.n	8016714 <_scanf_chars+0x30>
 8016764:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016768:	4629      	mov	r1, r5
 801676a:	4640      	mov	r0, r8
 801676c:	4798      	blx	r3
 801676e:	2800      	cmp	r0, #0
 8016770:	d0d0      	beq.n	8016714 <_scanf_chars+0x30>
 8016772:	6823      	ldr	r3, [r4, #0]
 8016774:	f013 0310 	ands.w	r3, r3, #16
 8016778:	d105      	bne.n	8016786 <_scanf_chars+0xa2>
 801677a:	68e2      	ldr	r2, [r4, #12]
 801677c:	3201      	adds	r2, #1
 801677e:	60e2      	str	r2, [r4, #12]
 8016780:	69a2      	ldr	r2, [r4, #24]
 8016782:	b102      	cbz	r2, 8016786 <_scanf_chars+0xa2>
 8016784:	7033      	strb	r3, [r6, #0]
 8016786:	6923      	ldr	r3, [r4, #16]
 8016788:	443b      	add	r3, r7
 801678a:	6123      	str	r3, [r4, #16]
 801678c:	2000      	movs	r0, #0
 801678e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016792:	bf00      	nop
 8016794:	08017579 	.word	0x08017579

08016798 <_scanf_i>:
 8016798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801679c:	4698      	mov	r8, r3
 801679e:	4b76      	ldr	r3, [pc, #472]	; (8016978 <_scanf_i+0x1e0>)
 80167a0:	460c      	mov	r4, r1
 80167a2:	4682      	mov	sl, r0
 80167a4:	4616      	mov	r6, r2
 80167a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80167aa:	b087      	sub	sp, #28
 80167ac:	ab03      	add	r3, sp, #12
 80167ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80167b2:	4b72      	ldr	r3, [pc, #456]	; (801697c <_scanf_i+0x1e4>)
 80167b4:	69a1      	ldr	r1, [r4, #24]
 80167b6:	4a72      	ldr	r2, [pc, #456]	; (8016980 <_scanf_i+0x1e8>)
 80167b8:	2903      	cmp	r1, #3
 80167ba:	bf18      	it	ne
 80167bc:	461a      	movne	r2, r3
 80167be:	68a3      	ldr	r3, [r4, #8]
 80167c0:	9201      	str	r2, [sp, #4]
 80167c2:	1e5a      	subs	r2, r3, #1
 80167c4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80167c8:	bf88      	it	hi
 80167ca:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80167ce:	4627      	mov	r7, r4
 80167d0:	bf82      	ittt	hi
 80167d2:	eb03 0905 	addhi.w	r9, r3, r5
 80167d6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80167da:	60a3      	strhi	r3, [r4, #8]
 80167dc:	f857 3b1c 	ldr.w	r3, [r7], #28
 80167e0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80167e4:	bf98      	it	ls
 80167e6:	f04f 0900 	movls.w	r9, #0
 80167ea:	6023      	str	r3, [r4, #0]
 80167ec:	463d      	mov	r5, r7
 80167ee:	f04f 0b00 	mov.w	fp, #0
 80167f2:	6831      	ldr	r1, [r6, #0]
 80167f4:	ab03      	add	r3, sp, #12
 80167f6:	7809      	ldrb	r1, [r1, #0]
 80167f8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80167fc:	2202      	movs	r2, #2
 80167fe:	f7e9 fcff 	bl	8000200 <memchr>
 8016802:	b328      	cbz	r0, 8016850 <_scanf_i+0xb8>
 8016804:	f1bb 0f01 	cmp.w	fp, #1
 8016808:	d159      	bne.n	80168be <_scanf_i+0x126>
 801680a:	6862      	ldr	r2, [r4, #4]
 801680c:	b92a      	cbnz	r2, 801681a <_scanf_i+0x82>
 801680e:	6822      	ldr	r2, [r4, #0]
 8016810:	2308      	movs	r3, #8
 8016812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016816:	6063      	str	r3, [r4, #4]
 8016818:	6022      	str	r2, [r4, #0]
 801681a:	6822      	ldr	r2, [r4, #0]
 801681c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8016820:	6022      	str	r2, [r4, #0]
 8016822:	68a2      	ldr	r2, [r4, #8]
 8016824:	1e51      	subs	r1, r2, #1
 8016826:	60a1      	str	r1, [r4, #8]
 8016828:	b192      	cbz	r2, 8016850 <_scanf_i+0xb8>
 801682a:	6832      	ldr	r2, [r6, #0]
 801682c:	1c51      	adds	r1, r2, #1
 801682e:	6031      	str	r1, [r6, #0]
 8016830:	7812      	ldrb	r2, [r2, #0]
 8016832:	f805 2b01 	strb.w	r2, [r5], #1
 8016836:	6872      	ldr	r2, [r6, #4]
 8016838:	3a01      	subs	r2, #1
 801683a:	2a00      	cmp	r2, #0
 801683c:	6072      	str	r2, [r6, #4]
 801683e:	dc07      	bgt.n	8016850 <_scanf_i+0xb8>
 8016840:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8016844:	4631      	mov	r1, r6
 8016846:	4650      	mov	r0, sl
 8016848:	4790      	blx	r2
 801684a:	2800      	cmp	r0, #0
 801684c:	f040 8085 	bne.w	801695a <_scanf_i+0x1c2>
 8016850:	f10b 0b01 	add.w	fp, fp, #1
 8016854:	f1bb 0f03 	cmp.w	fp, #3
 8016858:	d1cb      	bne.n	80167f2 <_scanf_i+0x5a>
 801685a:	6863      	ldr	r3, [r4, #4]
 801685c:	b90b      	cbnz	r3, 8016862 <_scanf_i+0xca>
 801685e:	230a      	movs	r3, #10
 8016860:	6063      	str	r3, [r4, #4]
 8016862:	6863      	ldr	r3, [r4, #4]
 8016864:	4947      	ldr	r1, [pc, #284]	; (8016984 <_scanf_i+0x1ec>)
 8016866:	6960      	ldr	r0, [r4, #20]
 8016868:	1ac9      	subs	r1, r1, r3
 801686a:	f000 f88d 	bl	8016988 <__sccl>
 801686e:	f04f 0b00 	mov.w	fp, #0
 8016872:	68a3      	ldr	r3, [r4, #8]
 8016874:	6822      	ldr	r2, [r4, #0]
 8016876:	2b00      	cmp	r3, #0
 8016878:	d03d      	beq.n	80168f6 <_scanf_i+0x15e>
 801687a:	6831      	ldr	r1, [r6, #0]
 801687c:	6960      	ldr	r0, [r4, #20]
 801687e:	f891 c000 	ldrb.w	ip, [r1]
 8016882:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016886:	2800      	cmp	r0, #0
 8016888:	d035      	beq.n	80168f6 <_scanf_i+0x15e>
 801688a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801688e:	d124      	bne.n	80168da <_scanf_i+0x142>
 8016890:	0510      	lsls	r0, r2, #20
 8016892:	d522      	bpl.n	80168da <_scanf_i+0x142>
 8016894:	f10b 0b01 	add.w	fp, fp, #1
 8016898:	f1b9 0f00 	cmp.w	r9, #0
 801689c:	d003      	beq.n	80168a6 <_scanf_i+0x10e>
 801689e:	3301      	adds	r3, #1
 80168a0:	f109 39ff 	add.w	r9, r9, #4294967295
 80168a4:	60a3      	str	r3, [r4, #8]
 80168a6:	6873      	ldr	r3, [r6, #4]
 80168a8:	3b01      	subs	r3, #1
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	6073      	str	r3, [r6, #4]
 80168ae:	dd1b      	ble.n	80168e8 <_scanf_i+0x150>
 80168b0:	6833      	ldr	r3, [r6, #0]
 80168b2:	3301      	adds	r3, #1
 80168b4:	6033      	str	r3, [r6, #0]
 80168b6:	68a3      	ldr	r3, [r4, #8]
 80168b8:	3b01      	subs	r3, #1
 80168ba:	60a3      	str	r3, [r4, #8]
 80168bc:	e7d9      	b.n	8016872 <_scanf_i+0xda>
 80168be:	f1bb 0f02 	cmp.w	fp, #2
 80168c2:	d1ae      	bne.n	8016822 <_scanf_i+0x8a>
 80168c4:	6822      	ldr	r2, [r4, #0]
 80168c6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80168ca:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80168ce:	d1bf      	bne.n	8016850 <_scanf_i+0xb8>
 80168d0:	2310      	movs	r3, #16
 80168d2:	6063      	str	r3, [r4, #4]
 80168d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80168d8:	e7a2      	b.n	8016820 <_scanf_i+0x88>
 80168da:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80168de:	6022      	str	r2, [r4, #0]
 80168e0:	780b      	ldrb	r3, [r1, #0]
 80168e2:	f805 3b01 	strb.w	r3, [r5], #1
 80168e6:	e7de      	b.n	80168a6 <_scanf_i+0x10e>
 80168e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80168ec:	4631      	mov	r1, r6
 80168ee:	4650      	mov	r0, sl
 80168f0:	4798      	blx	r3
 80168f2:	2800      	cmp	r0, #0
 80168f4:	d0df      	beq.n	80168b6 <_scanf_i+0x11e>
 80168f6:	6823      	ldr	r3, [r4, #0]
 80168f8:	05db      	lsls	r3, r3, #23
 80168fa:	d50d      	bpl.n	8016918 <_scanf_i+0x180>
 80168fc:	42bd      	cmp	r5, r7
 80168fe:	d909      	bls.n	8016914 <_scanf_i+0x17c>
 8016900:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016904:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016908:	4632      	mov	r2, r6
 801690a:	4650      	mov	r0, sl
 801690c:	4798      	blx	r3
 801690e:	f105 39ff 	add.w	r9, r5, #4294967295
 8016912:	464d      	mov	r5, r9
 8016914:	42bd      	cmp	r5, r7
 8016916:	d02d      	beq.n	8016974 <_scanf_i+0x1dc>
 8016918:	6822      	ldr	r2, [r4, #0]
 801691a:	f012 0210 	ands.w	r2, r2, #16
 801691e:	d113      	bne.n	8016948 <_scanf_i+0x1b0>
 8016920:	702a      	strb	r2, [r5, #0]
 8016922:	6863      	ldr	r3, [r4, #4]
 8016924:	9e01      	ldr	r6, [sp, #4]
 8016926:	4639      	mov	r1, r7
 8016928:	4650      	mov	r0, sl
 801692a:	47b0      	blx	r6
 801692c:	6821      	ldr	r1, [r4, #0]
 801692e:	f8d8 3000 	ldr.w	r3, [r8]
 8016932:	f011 0f20 	tst.w	r1, #32
 8016936:	d013      	beq.n	8016960 <_scanf_i+0x1c8>
 8016938:	1d1a      	adds	r2, r3, #4
 801693a:	f8c8 2000 	str.w	r2, [r8]
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	6018      	str	r0, [r3, #0]
 8016942:	68e3      	ldr	r3, [r4, #12]
 8016944:	3301      	adds	r3, #1
 8016946:	60e3      	str	r3, [r4, #12]
 8016948:	1bed      	subs	r5, r5, r7
 801694a:	44ab      	add	fp, r5
 801694c:	6925      	ldr	r5, [r4, #16]
 801694e:	445d      	add	r5, fp
 8016950:	6125      	str	r5, [r4, #16]
 8016952:	2000      	movs	r0, #0
 8016954:	b007      	add	sp, #28
 8016956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801695a:	f04f 0b00 	mov.w	fp, #0
 801695e:	e7ca      	b.n	80168f6 <_scanf_i+0x15e>
 8016960:	1d1a      	adds	r2, r3, #4
 8016962:	f8c8 2000 	str.w	r2, [r8]
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	f011 0f01 	tst.w	r1, #1
 801696c:	bf14      	ite	ne
 801696e:	8018      	strhne	r0, [r3, #0]
 8016970:	6018      	streq	r0, [r3, #0]
 8016972:	e7e6      	b.n	8016942 <_scanf_i+0x1aa>
 8016974:	2001      	movs	r0, #1
 8016976:	e7ed      	b.n	8016954 <_scanf_i+0x1bc>
 8016978:	08016f5c 	.word	0x08016f5c
 801697c:	08016021 	.word	0x08016021
 8016980:	08014e49 	.word	0x08014e49
 8016984:	08017728 	.word	0x08017728

08016988 <__sccl>:
 8016988:	b570      	push	{r4, r5, r6, lr}
 801698a:	780b      	ldrb	r3, [r1, #0]
 801698c:	4604      	mov	r4, r0
 801698e:	2b5e      	cmp	r3, #94	; 0x5e
 8016990:	bf0b      	itete	eq
 8016992:	784b      	ldrbeq	r3, [r1, #1]
 8016994:	1c48      	addne	r0, r1, #1
 8016996:	1c88      	addeq	r0, r1, #2
 8016998:	2200      	movne	r2, #0
 801699a:	bf08      	it	eq
 801699c:	2201      	moveq	r2, #1
 801699e:	1e61      	subs	r1, r4, #1
 80169a0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80169a4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80169a8:	42a9      	cmp	r1, r5
 80169aa:	d1fb      	bne.n	80169a4 <__sccl+0x1c>
 80169ac:	b90b      	cbnz	r3, 80169b2 <__sccl+0x2a>
 80169ae:	3801      	subs	r0, #1
 80169b0:	bd70      	pop	{r4, r5, r6, pc}
 80169b2:	f082 0201 	eor.w	r2, r2, #1
 80169b6:	54e2      	strb	r2, [r4, r3]
 80169b8:	4605      	mov	r5, r0
 80169ba:	4628      	mov	r0, r5
 80169bc:	f810 1b01 	ldrb.w	r1, [r0], #1
 80169c0:	292d      	cmp	r1, #45	; 0x2d
 80169c2:	d006      	beq.n	80169d2 <__sccl+0x4a>
 80169c4:	295d      	cmp	r1, #93	; 0x5d
 80169c6:	d0f3      	beq.n	80169b0 <__sccl+0x28>
 80169c8:	b909      	cbnz	r1, 80169ce <__sccl+0x46>
 80169ca:	4628      	mov	r0, r5
 80169cc:	e7f0      	b.n	80169b0 <__sccl+0x28>
 80169ce:	460b      	mov	r3, r1
 80169d0:	e7f1      	b.n	80169b6 <__sccl+0x2e>
 80169d2:	786e      	ldrb	r6, [r5, #1]
 80169d4:	2e5d      	cmp	r6, #93	; 0x5d
 80169d6:	d0fa      	beq.n	80169ce <__sccl+0x46>
 80169d8:	42b3      	cmp	r3, r6
 80169da:	dcf8      	bgt.n	80169ce <__sccl+0x46>
 80169dc:	3502      	adds	r5, #2
 80169de:	4619      	mov	r1, r3
 80169e0:	3101      	adds	r1, #1
 80169e2:	428e      	cmp	r6, r1
 80169e4:	5462      	strb	r2, [r4, r1]
 80169e6:	dcfb      	bgt.n	80169e0 <__sccl+0x58>
 80169e8:	1af1      	subs	r1, r6, r3
 80169ea:	3901      	subs	r1, #1
 80169ec:	1c58      	adds	r0, r3, #1
 80169ee:	42b3      	cmp	r3, r6
 80169f0:	bfa8      	it	ge
 80169f2:	2100      	movge	r1, #0
 80169f4:	1843      	adds	r3, r0, r1
 80169f6:	e7e0      	b.n	80169ba <__sccl+0x32>

080169f8 <_raise_r>:
 80169f8:	291f      	cmp	r1, #31
 80169fa:	b538      	push	{r3, r4, r5, lr}
 80169fc:	4604      	mov	r4, r0
 80169fe:	460d      	mov	r5, r1
 8016a00:	d904      	bls.n	8016a0c <_raise_r+0x14>
 8016a02:	2316      	movs	r3, #22
 8016a04:	6003      	str	r3, [r0, #0]
 8016a06:	f04f 30ff 	mov.w	r0, #4294967295
 8016a0a:	bd38      	pop	{r3, r4, r5, pc}
 8016a0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016a0e:	b112      	cbz	r2, 8016a16 <_raise_r+0x1e>
 8016a10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016a14:	b94b      	cbnz	r3, 8016a2a <_raise_r+0x32>
 8016a16:	4620      	mov	r0, r4
 8016a18:	f000 f830 	bl	8016a7c <_getpid_r>
 8016a1c:	462a      	mov	r2, r5
 8016a1e:	4601      	mov	r1, r0
 8016a20:	4620      	mov	r0, r4
 8016a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016a26:	f000 b817 	b.w	8016a58 <_kill_r>
 8016a2a:	2b01      	cmp	r3, #1
 8016a2c:	d00a      	beq.n	8016a44 <_raise_r+0x4c>
 8016a2e:	1c59      	adds	r1, r3, #1
 8016a30:	d103      	bne.n	8016a3a <_raise_r+0x42>
 8016a32:	2316      	movs	r3, #22
 8016a34:	6003      	str	r3, [r0, #0]
 8016a36:	2001      	movs	r0, #1
 8016a38:	e7e7      	b.n	8016a0a <_raise_r+0x12>
 8016a3a:	2400      	movs	r4, #0
 8016a3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016a40:	4628      	mov	r0, r5
 8016a42:	4798      	blx	r3
 8016a44:	2000      	movs	r0, #0
 8016a46:	e7e0      	b.n	8016a0a <_raise_r+0x12>

08016a48 <raise>:
 8016a48:	4b02      	ldr	r3, [pc, #8]	; (8016a54 <raise+0xc>)
 8016a4a:	4601      	mov	r1, r0
 8016a4c:	6818      	ldr	r0, [r3, #0]
 8016a4e:	f7ff bfd3 	b.w	80169f8 <_raise_r>
 8016a52:	bf00      	nop
 8016a54:	200002b4 	.word	0x200002b4

08016a58 <_kill_r>:
 8016a58:	b538      	push	{r3, r4, r5, lr}
 8016a5a:	4d07      	ldr	r5, [pc, #28]	; (8016a78 <_kill_r+0x20>)
 8016a5c:	2300      	movs	r3, #0
 8016a5e:	4604      	mov	r4, r0
 8016a60:	4608      	mov	r0, r1
 8016a62:	4611      	mov	r1, r2
 8016a64:	602b      	str	r3, [r5, #0]
 8016a66:	f7eb ffc3 	bl	80029f0 <_kill>
 8016a6a:	1c43      	adds	r3, r0, #1
 8016a6c:	d102      	bne.n	8016a74 <_kill_r+0x1c>
 8016a6e:	682b      	ldr	r3, [r5, #0]
 8016a70:	b103      	cbz	r3, 8016a74 <_kill_r+0x1c>
 8016a72:	6023      	str	r3, [r4, #0]
 8016a74:	bd38      	pop	{r3, r4, r5, pc}
 8016a76:	bf00      	nop
 8016a78:	2000bf5c 	.word	0x2000bf5c

08016a7c <_getpid_r>:
 8016a7c:	f7eb bfb0 	b.w	80029e0 <_getpid>

08016a80 <__submore>:
 8016a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a84:	460c      	mov	r4, r1
 8016a86:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016a88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016a8c:	4299      	cmp	r1, r3
 8016a8e:	d11d      	bne.n	8016acc <__submore+0x4c>
 8016a90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016a94:	f7fd ffa6 	bl	80149e4 <_malloc_r>
 8016a98:	b918      	cbnz	r0, 8016aa2 <__submore+0x22>
 8016a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8016a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016aa6:	63a3      	str	r3, [r4, #56]	; 0x38
 8016aa8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8016aac:	6360      	str	r0, [r4, #52]	; 0x34
 8016aae:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8016ab2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016ab6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8016aba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016abe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8016ac2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8016ac6:	6020      	str	r0, [r4, #0]
 8016ac8:	2000      	movs	r0, #0
 8016aca:	e7e8      	b.n	8016a9e <__submore+0x1e>
 8016acc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8016ace:	0077      	lsls	r7, r6, #1
 8016ad0:	463a      	mov	r2, r7
 8016ad2:	f7ff fc05 	bl	80162e0 <_realloc_r>
 8016ad6:	4605      	mov	r5, r0
 8016ad8:	2800      	cmp	r0, #0
 8016ada:	d0de      	beq.n	8016a9a <__submore+0x1a>
 8016adc:	eb00 0806 	add.w	r8, r0, r6
 8016ae0:	4601      	mov	r1, r0
 8016ae2:	4632      	mov	r2, r6
 8016ae4:	4640      	mov	r0, r8
 8016ae6:	f7fd fc89 	bl	80143fc <memcpy>
 8016aea:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8016aee:	f8c4 8000 	str.w	r8, [r4]
 8016af2:	e7e9      	b.n	8016ac8 <__submore+0x48>

08016af4 <_fstat_r>:
 8016af4:	b538      	push	{r3, r4, r5, lr}
 8016af6:	4d07      	ldr	r5, [pc, #28]	; (8016b14 <_fstat_r+0x20>)
 8016af8:	2300      	movs	r3, #0
 8016afa:	4604      	mov	r4, r0
 8016afc:	4608      	mov	r0, r1
 8016afe:	4611      	mov	r1, r2
 8016b00:	602b      	str	r3, [r5, #0]
 8016b02:	f7eb ffd4 	bl	8002aae <_fstat>
 8016b06:	1c43      	adds	r3, r0, #1
 8016b08:	d102      	bne.n	8016b10 <_fstat_r+0x1c>
 8016b0a:	682b      	ldr	r3, [r5, #0]
 8016b0c:	b103      	cbz	r3, 8016b10 <_fstat_r+0x1c>
 8016b0e:	6023      	str	r3, [r4, #0]
 8016b10:	bd38      	pop	{r3, r4, r5, pc}
 8016b12:	bf00      	nop
 8016b14:	2000bf5c 	.word	0x2000bf5c

08016b18 <_isatty_r>:
 8016b18:	b538      	push	{r3, r4, r5, lr}
 8016b1a:	4d06      	ldr	r5, [pc, #24]	; (8016b34 <_isatty_r+0x1c>)
 8016b1c:	2300      	movs	r3, #0
 8016b1e:	4604      	mov	r4, r0
 8016b20:	4608      	mov	r0, r1
 8016b22:	602b      	str	r3, [r5, #0]
 8016b24:	f7eb ffd3 	bl	8002ace <_isatty>
 8016b28:	1c43      	adds	r3, r0, #1
 8016b2a:	d102      	bne.n	8016b32 <_isatty_r+0x1a>
 8016b2c:	682b      	ldr	r3, [r5, #0]
 8016b2e:	b103      	cbz	r3, 8016b32 <_isatty_r+0x1a>
 8016b30:	6023      	str	r3, [r4, #0]
 8016b32:	bd38      	pop	{r3, r4, r5, pc}
 8016b34:	2000bf5c 	.word	0x2000bf5c

08016b38 <_malloc_usable_size_r>:
 8016b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016b3c:	1f18      	subs	r0, r3, #4
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	bfbc      	itt	lt
 8016b42:	580b      	ldrlt	r3, [r1, r0]
 8016b44:	18c0      	addlt	r0, r0, r3
 8016b46:	4770      	bx	lr

08016b48 <_init>:
 8016b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b4a:	bf00      	nop
 8016b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016b4e:	bc08      	pop	{r3}
 8016b50:	469e      	mov	lr, r3
 8016b52:	4770      	bx	lr

08016b54 <_fini>:
 8016b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b56:	bf00      	nop
 8016b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016b5a:	bc08      	pop	{r3}
 8016b5c:	469e      	mov	lr, r3
 8016b5e:	4770      	bx	lr
