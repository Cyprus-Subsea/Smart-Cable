
icListen_SD9_USB_R_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  0800ca58  0800ca58  0001ca58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc18  0800cc18  000202c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc18  0800cc18  0001cc18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc20  0800cc20  000202c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc20  0800cc20  0001cc20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc24  0800cc24  0001cc24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c4  20000000  0800cc28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202c4  2**0
                  CONTENTS
 10 .bss          00005838  200002c4  200002c4  000202c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005afc  20005afc  000202c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026e9c  00000000  00000000  000202f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000057ea  00000000  00000000  00047190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cb8  00000000  00000000  0004c980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a90  00000000  00000000  0004e638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025aef  00000000  00000000  000500c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024063  00000000  00000000  00075bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1c60  00000000  00000000  00099c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016b87a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007c68  00000000  00000000  0016b8cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ca40 	.word	0x0800ca40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800ca40 	.word	0x0800ca40

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <crc16_arc_update>:
};



uint16_t crc16_arc_update( char data, uint16_t accum )
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	460a      	mov	r2, r1
 800057e:	71fb      	strb	r3, [r7, #7]
 8000580:	4613      	mov	r3, r2
 8000582:	80bb      	strh	r3, [r7, #4]
  unsigned char comb_value;
  comb_value = ( accum&0x00ff ) ^ (unsigned char)data;
 8000584:	88bb      	ldrh	r3, [r7, #4]
 8000586:	b25a      	sxtb	r2, r3
 8000588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058c:	4053      	eors	r3, r2
 800058e:	b25b      	sxtb	r3, r3
 8000590:	73fb      	strb	r3, [r7, #15]
  accum = ( accum >> 8 ) ^ crc16_arc_table[ comb_value ];
 8000592:	88bb      	ldrh	r3, [r7, #4]
 8000594:	0a1b      	lsrs	r3, r3, #8
 8000596:	b29a      	uxth	r2, r3
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	4906      	ldr	r1, [pc, #24]	; (80005b4 <crc16_arc_update+0x40>)
 800059c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005a0:	4053      	eors	r3, r2
 80005a2:	80bb      	strh	r3, [r7, #4]
  return ( accum );
 80005a4:	88bb      	ldrh	r3, [r7, #4]
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000000 	.word	0x20000000

080005b8 <get_crc16_arc>:

uint16_t get_crc16_arc( uint8_t* data,uint16_t length )
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	460b      	mov	r3, r1
 80005c2:	807b      	strh	r3, [r7, #2]
  uint16_t accm=0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	81fb      	strh	r3, [r7, #14]

  for(int i=0;i<length;i++)
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	e00d      	b.n	80005ea <get_crc16_arc+0x32>
  {
    accm=crc16_arc_update(data[i], accm);
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	4413      	add	r3, r2
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	89fa      	ldrh	r2, [r7, #14]
 80005d8:	4611      	mov	r1, r2
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff ffca 	bl	8000574 <crc16_arc_update>
 80005e0:	4603      	mov	r3, r0
 80005e2:	81fb      	strh	r3, [r7, #14]
  for(int i=0;i<length;i++)
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	3301      	adds	r3, #1
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	887b      	ldrh	r3, [r7, #2]
 80005ec:	68ba      	ldr	r2, [r7, #8]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	dbed      	blt.n	80005ce <get_crc16_arc+0x16>
  }

  return accm;
 80005f2:	89fb      	ldrh	r3, [r7, #14]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4a07      	ldr	r2, [pc, #28]	; (8000628 <vApplicationGetIdleTaskMemory+0x2c>)
 800060c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	4a06      	ldr	r2, [pc, #24]	; (800062c <vApplicationGetIdleTaskMemory+0x30>)
 8000612:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2280      	movs	r2, #128	; 0x80
 8000618:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800061a:	bf00      	nop
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	200002e0 	.word	0x200002e0
 800062c:	20000394 	.word	0x20000394

08000630 <icListen_prepare_setup_msg>:
#include "icListen.h"
#include "crc.h"
#include "string.h"

void icListen_prepare_setup_msg(icListen_setup_full_msg* msg,uint32_t wav_sample_rate,uint32_t wav_sample_bit_depth)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	607a      	str	r2, [r7, #4]
	msg->basic_hdr.sync=MSG_SYNC;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	222a      	movs	r2, #42	; 0x2a
 8000640:	701a      	strb	r2, [r3, #0]
	msg->basic_hdr.type=MSG_TYPE_JOB_SETUP;
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	2244      	movs	r2, #68	; 0x44
 8000646:	705a      	strb	r2, [r3, #1]
	msg->setup_type=MSG_JOB_SETUP_WAVEFORM_HF;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	2200      	movs	r2, #0
 800064c:	f042 020b 	orr.w	r2, r2, #11
 8000650:	711a      	strb	r2, [r3, #4]
 8000652:	2200      	movs	r2, #0
 8000654:	715a      	strb	r2, [r3, #5]
	msg->num_of_tags=11;
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	2200      	movs	r2, #0
 800065a:	f042 020b 	orr.w	r2, r2, #11
 800065e:	719a      	strb	r2, [r3, #6]
 8000660:	2200      	movs	r2, #0
 8000662:	71da      	strb	r2, [r3, #7]

	msg->t01_log_start_time.tag=MSG_JOB_SETUP_TAG_LOG_START_TIME;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	2200      	movs	r2, #0
 8000668:	f042 0201 	orr.w	r2, r2, #1
 800066c:	721a      	strb	r2, [r3, #8]
 800066e:	2200      	movs	r2, #0
 8000670:	725a      	strb	r2, [r3, #9]
	msg->t01_log_start_time.tag_value=4294967295;
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	f04f 32ff 	mov.w	r2, #4294967295
 8000678:	731a      	strb	r2, [r3, #12]
 800067a:	f04f 32ff 	mov.w	r2, #4294967295
 800067e:	735a      	strb	r2, [r3, #13]
 8000680:	f04f 32ff 	mov.w	r2, #4294967295
 8000684:	739a      	strb	r2, [r3, #14]
 8000686:	f04f 32ff 	mov.w	r2, #4294967295
 800068a:	73da      	strb	r2, [r3, #15]
	msg->t01_log_start_time.tag_value_len=4;
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	2200      	movs	r2, #0
 8000690:	f042 0204 	orr.w	r2, r2, #4
 8000694:	729a      	strb	r2, [r3, #10]
 8000696:	2200      	movs	r2, #0
 8000698:	72da      	strb	r2, [r3, #11]

	msg->t02_spectrum_sample_rate.tag=MSG_JOB_SETUP_TAG_SPECT_SAMPLE_RATE;
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	2200      	movs	r2, #0
 800069e:	f042 0202 	orr.w	r2, r2, #2
 80006a2:	741a      	strb	r2, [r3, #16]
 80006a4:	2200      	movs	r2, #0
 80006a6:	745a      	strb	r2, [r3, #17]
	msg->t02_spectrum_sample_rate.tag_value=0;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	2200      	movs	r2, #0
 80006ac:	751a      	strb	r2, [r3, #20]
 80006ae:	2200      	movs	r2, #0
 80006b0:	755a      	strb	r2, [r3, #21]
 80006b2:	2200      	movs	r2, #0
 80006b4:	759a      	strb	r2, [r3, #22]
 80006b6:	2200      	movs	r2, #0
 80006b8:	75da      	strb	r2, [r3, #23]
	msg->t02_spectrum_sample_rate.tag_value_len=4;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	2200      	movs	r2, #0
 80006be:	f042 0204 	orr.w	r2, r2, #4
 80006c2:	749a      	strb	r2, [r3, #18]
 80006c4:	2200      	movs	r2, #0
 80006c6:	74da      	strb	r2, [r3, #19]

	msg->t06_fft_processing_type.tag=MSG_JOB_SETUP_TAG_FFT_PROCESSING_TYPE;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	2200      	movs	r2, #0
 80006cc:	f042 0206 	orr.w	r2, r2, #6
 80006d0:	761a      	strb	r2, [r3, #24]
 80006d2:	2200      	movs	r2, #0
 80006d4:	765a      	strb	r2, [r3, #25]
	msg->t06_fft_processing_type.tag_value=0;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	2200      	movs	r2, #0
 80006da:	771a      	strb	r2, [r3, #28]
 80006dc:	2200      	movs	r2, #0
 80006de:	775a      	strb	r2, [r3, #29]
 80006e0:	2200      	movs	r2, #0
 80006e2:	779a      	strb	r2, [r3, #30]
 80006e4:	2200      	movs	r2, #0
 80006e6:	77da      	strb	r2, [r3, #31]
	msg->t06_fft_processing_type.tag_value_len=4;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2200      	movs	r2, #0
 80006ec:	f042 0204 	orr.w	r2, r2, #4
 80006f0:	769a      	strb	r2, [r3, #26]
 80006f2:	2200      	movs	r2, #0
 80006f4:	76da      	strb	r2, [r3, #27]

	msg->t07_fft_accumulates.tag=MSG_JOB_SETUP_TAG_FFT_ACCUMULATED;
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	2200      	movs	r2, #0
 80006fa:	f042 0207 	orr.w	r2, r2, #7
 80006fe:	f883 2020 	strb.w	r2, [r3, #32]
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	msg->t07_fft_accumulates.tag_value=0;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2200      	movs	r2, #0
 800070c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000710:	2200      	movs	r2, #0
 8000712:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8000716:	2200      	movs	r2, #0
 8000718:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800071c:	2200      	movs	r2, #0
 800071e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	msg->t07_fft_accumulates.tag_value_len=4;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	2200      	movs	r2, #0
 8000726:	f042 0204 	orr.w	r2, r2, #4
 800072a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	msg->t09_spectrum_logging_mode.tag=MSG_JOB_SETUP_TAG_SPECT_LOGGING_MODE;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2200      	movs	r2, #0
 8000738:	f042 0209 	orr.w	r2, r2, #9
 800073c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8000740:	2200      	movs	r2, #0
 8000742:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	msg->t09_spectrum_logging_mode.tag_value=0;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	2200      	movs	r2, #0
 800074a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800074e:	2200      	movs	r2, #0
 8000750:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8000754:	2200      	movs	r2, #0
 8000756:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800075a:	2200      	movs	r2, #0
 800075c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	msg->t09_spectrum_logging_mode.tag_value_len=4;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	2200      	movs	r2, #0
 8000764:	f042 0204 	orr.w	r2, r2, #4
 8000768:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800076c:	2200      	movs	r2, #0
 800076e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	msg->t0A_spectrum_log_file_length.tag=MSG_JOB_SETUP_TAG_SPECT_LOG_FILE_LEN;
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	2200      	movs	r2, #0
 8000776:	f042 020a 	orr.w	r2, r2, #10
 800077a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	msg->t0A_spectrum_log_file_length.tag_value=1;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	2200      	movs	r2, #0
 8000788:	f042 0201 	orr.w	r2, r2, #1
 800078c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8000790:	2200      	movs	r2, #0
 8000792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8000796:	2200      	movs	r2, #0
 8000798:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800079c:	2200      	movs	r2, #0
 800079e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	msg->t0A_spectrum_log_file_length.tag_value_len=4;
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	2200      	movs	r2, #0
 80007a6:	f042 0204 	orr.w	r2, r2, #4
 80007aa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80007ae:	2200      	movs	r2, #0
 80007b0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	msg->t0E_waveform_sample_rate.tag=MSG_JOB_SETUP_TAG_WAVEFORM_SAMPLE_RATE;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	2200      	movs	r2, #0
 80007b8:	f042 020e 	orr.w	r2, r2, #14
 80007bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80007c0:	2200      	movs	r2, #0
 80007c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	msg->t0E_waveform_sample_rate.tag_value=wav_sample_rate;
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	68ba      	ldr	r2, [r7, #8]
 80007ca:	63da      	str	r2, [r3, #60]	; 0x3c
	msg->t0E_waveform_sample_rate.tag_value_len=4;
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	2200      	movs	r2, #0
 80007d0:	f042 0204 	orr.w	r2, r2, #4
 80007d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80007d8:	2200      	movs	r2, #0
 80007da:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	msg->t0F_waveform_data_bit_depth.tag=MSG_JOB_SETUP_TAG_WAVEFORM_DATA_BITS_DEPTH;
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	2200      	movs	r2, #0
 80007e2:	f042 020f 	orr.w	r2, r2, #15
 80007e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80007ea:	2200      	movs	r2, #0
 80007ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	msg->t0F_waveform_data_bit_depth.tag_value=wav_sample_bit_depth;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	645a      	str	r2, [r3, #68]	; 0x44
	msg->t0F_waveform_data_bit_depth.tag_value_len=4;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	2200      	movs	r2, #0
 80007fa:	f042 0204 	orr.w	r2, r2, #4
 80007fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000802:	2200      	movs	r2, #0
 8000804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	msg->t12_waveform_logging_mode.tag=MSG_JOB_SETUP_TAG_WAVEFROM_DATA_LOGGING_MODE;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	2200      	movs	r2, #0
 800080c:	f042 0212 	orr.w	r2, r2, #18
 8000810:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8000814:	2200      	movs	r2, #0
 8000816:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	msg->t12_waveform_logging_mode.tag_value=0;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	2200      	movs	r2, #0
 800081e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8000822:	2200      	movs	r2, #0
 8000824:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8000828:	2200      	movs	r2, #0
 800082a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800082e:	2200      	movs	r2, #0
 8000830:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	msg->t12_waveform_logging_mode.tag_value_len=4;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	2200      	movs	r2, #0
 8000838:	f042 0204 	orr.w	r2, r2, #4
 800083c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8000840:	2200      	movs	r2, #0
 8000842:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	msg->t13_waveform_log_file_length.tag=MSG_JOB_SETUP_TAG_WAVEFORM_LOG_FILE_LENGTH;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	2200      	movs	r2, #0
 800084a:	f042 0213 	orr.w	r2, r2, #19
 800084e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000852:	2200      	movs	r2, #0
 8000854:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	msg->t13_waveform_log_file_length.tag_value=1;
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	2200      	movs	r2, #0
 800085c:	f042 0201 	orr.w	r2, r2, #1
 8000860:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8000864:	2200      	movs	r2, #0
 8000866:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 800086a:	2200      	movs	r2, #0
 800086c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8000870:	2200      	movs	r2, #0
 8000872:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	msg->t13_waveform_log_file_length.tag_value_len=4;
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	2200      	movs	r2, #0
 800087a:	f042 0204 	orr.w	r2, r2, #4
 800087e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8000882:	2200      	movs	r2, #0
 8000884:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	msg->t14_aux_pin_messages.tag=MSG_JOB_SETUP_TAG_AUX_PIN_MESSAGE;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	2200      	movs	r2, #0
 800088c:	f042 0214 	orr.w	r2, r2, #20
 8000890:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8000894:	2200      	movs	r2, #0
 8000896:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	msg->t14_aux_pin_messages.tag_value=1;
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	2200      	movs	r2, #0
 800089e:	f042 0201 	orr.w	r2, r2, #1
 80008a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80008a6:	2200      	movs	r2, #0
 80008a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 80008b2:	2200      	movs	r2, #0
 80008b4:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	msg->t14_aux_pin_messages.tag_value_len=4;
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	2200      	movs	r2, #0
 80008bc:	f042 0204 	orr.w	r2, r2, #4
 80008c0:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 80008c4:	2200      	movs	r2, #0
 80008c6:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b


	msg->basic_hdr.length=sizeof(icListen_setup_full_msg)-4-2;
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	2200      	movs	r2, #0
 80008ce:	f042 025c 	orr.w	r2, r2, #92	; 0x5c
 80008d2:	709a      	strb	r2, [r3, #2]
 80008d4:	2200      	movs	r2, #0
 80008d6:	70da      	strb	r2, [r3, #3]
	msg->crc=get_crc16_arc((uint8_t*)msg,sizeof(icListen_setup_full_msg)-2);
 80008d8:	2160      	movs	r1, #96	; 0x60
 80008da:	68f8      	ldr	r0, [r7, #12]
 80008dc:	f7ff fe6c 	bl	80005b8 <get_crc16_arc>
 80008e0:	4603      	mov	r3, r0
 80008e2:	461a      	mov	r2, r3
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
}
 80008ea:	bf00      	nop
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <icListen_prepare_collect_msg>:

void icListen_prepare_collect_msg(icListen_collect_short_mask_msg* msg,uint8_t mask)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b082      	sub	sp, #8
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
 80008fa:	460b      	mov	r3, r1
 80008fc:	70fb      	strb	r3, [r7, #3]
	msg->basic_hdr.sync=MSG_SYNC;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	222a      	movs	r2, #42	; 0x2a
 8000902:	701a      	strb	r2, [r3, #0]
    msg->basic_hdr.type=MSG_TYPE_COLLECT_DATA;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2243      	movs	r2, #67	; 0x43
 8000908:	705a      	strb	r2, [r3, #1]
    msg->mask_hdr.mask=mask;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	78fa      	ldrb	r2, [r7, #3]
 800090e:	711a      	strb	r2, [r3, #4]
    msg->basic_hdr.length=1;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2200      	movs	r2, #0
 8000914:	f042 0201 	orr.w	r2, r2, #1
 8000918:	709a      	strb	r2, [r3, #2]
 800091a:	2200      	movs	r2, #0
 800091c:	70da      	strb	r2, [r3, #3]
	msg->crc=get_crc16_arc((uint8_t*)msg,sizeof(icListen_collect_short_mask_msg)-2);
 800091e:	2105      	movs	r1, #5
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff fe49 	bl	80005b8 <get_crc16_arc>
 8000926:	4603      	mov	r3, r0
 8000928:	461a      	mov	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f8a3 2005 	strh.w	r2, [r3, #5]
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	b5b0      	push	{r4, r5, r7, lr}
 800093a:	b0a4      	sub	sp, #144	; 0x90
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093e:	f000 fdaf 	bl	80014a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000942:	f000 f88b 	bl	8000a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000946:	f000 f99f 	bl	8000c88 <MX_GPIO_Init>
  MX_SPI1_Init();
 800094a:	f000 f8f1 	bl	8000b30 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800094e:	f000 f971 	bl	8000c34 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000952:	f000 f923 	bl	8000b9c <MX_TIM2_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of AppliEvent */
  osMessageQDef(AppliEvent, 16, uint16_t);
 8000956:	4b35      	ldr	r3, [pc, #212]	; (8000a2c <main+0xf4>)
 8000958:	f107 0480 	add.w	r4, r7, #128	; 0x80
 800095c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800095e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  AppliEventHandle = osMessageCreate(osMessageQ(AppliEvent), NULL);
 8000962:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000966:	2100      	movs	r1, #0
 8000968:	4618      	mov	r0, r3
 800096a:	f008 fe02 	bl	8009572 <osMessageCreate>
 800096e:	4603      	mov	r3, r0
 8000970:	4a2f      	ldr	r2, [pc, #188]	; (8000a30 <main+0xf8>)
 8000972:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_rx */
  osMessageQDef(USB_rx, 10, uint32_t);
 8000974:	4b2f      	ldr	r3, [pc, #188]	; (8000a34 <main+0xfc>)
 8000976:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800097a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800097c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  USB_rxHandle = osMessageCreate(osMessageQ(USB_rx), NULL);
 8000980:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f008 fdf3 	bl	8009572 <osMessageCreate>
 800098c:	4603      	mov	r3, r0
 800098e:	4a2a      	ldr	r2, [pc, #168]	; (8000a38 <main+0x100>)
 8000990:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000992:	4b2a      	ldr	r3, [pc, #168]	; (8000a3c <main+0x104>)
 8000994:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000998:	461d      	mov	r5, r3
 800099a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800099c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800099e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80009a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f008 fd80 	bl	80094b2 <osThreadCreate>
 80009b2:	4603      	mov	r3, r0
 80009b4:	4a22      	ldr	r2, [pc, #136]	; (8000a40 <main+0x108>)
 80009b6:	6013      	str	r3, [r2, #0]

  /* definition and creation of storage_t */
  osThreadDef(storage_t, storage_f, osPriorityNormal, 0, 512);
 80009b8:	4b22      	ldr	r3, [pc, #136]	; (8000a44 <main+0x10c>)
 80009ba:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80009be:	461d      	mov	r5, r3
 80009c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  storage_tHandle = osThreadCreate(osThread(storage_t), NULL);
 80009cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f008 fd6d 	bl	80094b2 <osThreadCreate>
 80009d8:	4603      	mov	r3, r0
 80009da:	4a1b      	ldr	r2, [pc, #108]	; (8000a48 <main+0x110>)
 80009dc:	6013      	str	r3, [r2, #0]

  /* definition and creation of icListen_t */
  osThreadDef(icListen_t, icListen_f, osPriorityNormal, 0, 512);
 80009de:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <main+0x114>)
 80009e0:	f107 041c 	add.w	r4, r7, #28
 80009e4:	461d      	mov	r5, r3
 80009e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  icListen_tHandle = osThreadCreate(osThread(icListen_t), NULL);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	2100      	movs	r1, #0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f008 fd5a 	bl	80094b2 <osThreadCreate>
 80009fe:	4603      	mov	r3, r0
 8000a00:	4a13      	ldr	r2, [pc, #76]	; (8000a50 <main+0x118>)
 8000a02:	6013      	str	r3, [r2, #0]

  /* definition and creation of UI_t */
  osThreadDef(UI_t, UI_f, osPriorityIdle, 0, 256);
 8000a04:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <main+0x11c>)
 8000a06:	463c      	mov	r4, r7
 8000a08:	461d      	mov	r5, r3
 8000a0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UI_tHandle = osThreadCreate(osThread(UI_t), NULL);
 8000a16:	463b      	mov	r3, r7
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f008 fd49 	bl	80094b2 <osThreadCreate>
 8000a20:	4603      	mov	r3, r0
 8000a22:	4a0d      	ldr	r2, [pc, #52]	; (8000a58 <main+0x120>)
 8000a24:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a26:	f008 fd3d 	bl	80094a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <main+0xf2>
 8000a2c:	0800ca84 	.word	0x0800ca84
 8000a30:	20000688 	.word	0x20000688
 8000a34:	0800ca94 	.word	0x0800ca94
 8000a38:	2000068c 	.word	0x2000068c
 8000a3c:	0800caa4 	.word	0x0800caa4
 8000a40:	20000678 	.word	0x20000678
 8000a44:	0800cac0 	.word	0x0800cac0
 8000a48:	2000067c 	.word	0x2000067c
 8000a4c:	0800cadc 	.word	0x0800cadc
 8000a50:	20000680 	.word	0x20000680
 8000a54:	0800caf8 	.word	0x0800caf8
 8000a58:	20000684 	.word	0x20000684

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b094      	sub	sp, #80	; 0x50
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 0320 	add.w	r3, r7, #32
 8000a66:	2230      	movs	r2, #48	; 0x30
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f00b fb18 	bl	800c0a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	4b28      	ldr	r3, [pc, #160]	; (8000b28 <SystemClock_Config+0xcc>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	4a27      	ldr	r2, [pc, #156]	; (8000b28 <SystemClock_Config+0xcc>)
 8000a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a90:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <SystemClock_Config+0xcc>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <SystemClock_Config+0xd0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a21      	ldr	r2, [pc, #132]	; (8000b2c <SystemClock_Config+0xd0>)
 8000aa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aaa:	6013      	str	r3, [r2, #0]
 8000aac:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <SystemClock_Config+0xd0>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000abc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000acc:	230f      	movs	r3, #15
 8000ace:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000ad0:	2390      	movs	r3, #144	; 0x90
 8000ad2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000ad8:	2305      	movs	r3, #5
 8000ada:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000adc:	f107 0320 	add.w	r3, r7, #32
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f002 ff4f 	bl	8003984 <HAL_RCC_OscConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000aec:	f000 f9f8 	bl	8000ee0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af0:	230f      	movs	r3, #15
 8000af2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af4:	2302      	movs	r3, #2
 8000af6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000afc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	2103      	movs	r1, #3
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f003 f9b0 	bl	8003e74 <HAL_RCC_ClockConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b1a:	f000 f9e1 	bl	8000ee0 <Error_Handler>
  }
}
 8000b1e:	bf00      	nop
 8000b20:	3750      	adds	r7, #80	; 0x50
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40007000 	.word	0x40007000

08000b30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b34:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b36:	4a18      	ldr	r2, [pc, #96]	; (8000b98 <MX_SPI1_Init+0x68>)
 8000b38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b3a:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b68:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b7c:	220a      	movs	r2, #10
 8000b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b80:	4804      	ldr	r0, [pc, #16]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b82:	f003 fb89 	bl	8004298 <HAL_SPI_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b8c:	f000 f9a8 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000594 	.word	0x20000594
 8000b98:	40013000 	.word	0x40013000

08000b9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba2:	f107 0308 	add.w	r3, r7, #8
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bb8:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000bcc:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bce:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000be0:	4813      	ldr	r0, [pc, #76]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000be2:	f003 fd01 	bl	80045e8 <HAL_TIM_Base_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bec:	f000 f978 	bl	8000ee0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480c      	ldr	r0, [pc, #48]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bfe:	f003 febb 	bl	8004978 <HAL_TIM_ConfigClockSource>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c08:	f000 f96a 	bl	8000ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c14:	463b      	mov	r3, r7
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000c1a:	f004 f8d7 	bl	8004dcc <HAL_TIMEx_MasterConfigSynchronization>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c24:	f000 f95c 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200005ec 	.word	0x200005ec

08000c34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c3a:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <MX_USART1_UART_Init+0x50>)
 8000c3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5e:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c6c:	f004 f93e 	bl	8004eec <HAL_UART_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c76:	f000 f933 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000634 	.word	0x20000634
 8000c84:	40011000 	.word	0x40011000

08000c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	4b39      	ldr	r3, [pc, #228]	; (8000d88 <MX_GPIO_Init+0x100>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a38      	ldr	r2, [pc, #224]	; (8000d88 <MX_GPIO_Init+0x100>)
 8000ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b36      	ldr	r3, [pc, #216]	; (8000d88 <MX_GPIO_Init+0x100>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	4b32      	ldr	r3, [pc, #200]	; (8000d88 <MX_GPIO_Init+0x100>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a31      	ldr	r2, [pc, #196]	; (8000d88 <MX_GPIO_Init+0x100>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b2f      	ldr	r3, [pc, #188]	; (8000d88 <MX_GPIO_Init+0x100>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <MX_GPIO_Init+0x100>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a2a      	ldr	r2, [pc, #168]	; (8000d88 <MX_GPIO_Init+0x100>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b28      	ldr	r3, [pc, #160]	; (8000d88 <MX_GPIO_Init+0x100>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	4b24      	ldr	r3, [pc, #144]	; (8000d88 <MX_GPIO_Init+0x100>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a23      	ldr	r2, [pc, #140]	; (8000d88 <MX_GPIO_Init+0x100>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <MX_GPIO_Init+0x100>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_SD3_GPIO_Port, SS_SD3_Pin, GPIO_PIN_SET);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2102      	movs	r1, #2
 8000d12:	481e      	ldr	r0, [pc, #120]	; (8000d8c <MX_GPIO_Init+0x104>)
 8000d14:	f001 fa12 	bl	800213c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin, GPIO_PIN_SET);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2186      	movs	r1, #134	; 0x86
 8000d1c:	481c      	ldr	r0, [pc, #112]	; (8000d90 <MX_GPIO_Init+0x108>)
 8000d1e:	f001 fa0d 	bl	800213c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_VBUS_GPIO_Port, USB_VBUS_Pin, GPIO_PIN_SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	2101      	movs	r1, #1
 8000d26:	481b      	ldr	r0, [pc, #108]	; (8000d94 <MX_GPIO_Init+0x10c>)
 8000d28:	f001 fa08 	bl	800213c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SS_SD3_Pin */
  GPIO_InitStruct.Pin = SS_SD3_Pin;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d30:	2301      	movs	r3, #1
 8000d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SS_SD3_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	4812      	ldr	r0, [pc, #72]	; (8000d8c <MX_GPIO_Init+0x104>)
 8000d44:	f001 f85e 	bl	8001e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS_SD1_Pin SS_SD2_Pin SS_SD4_Pin */
  GPIO_InitStruct.Pin = SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin;
 8000d48:	2386      	movs	r3, #134	; 0x86
 8000d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	480c      	ldr	r0, [pc, #48]	; (8000d90 <MX_GPIO_Init+0x108>)
 8000d60:	f001 f850 	bl	8001e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d64:	2301      	movs	r3, #1
 8000d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4806      	ldr	r0, [pc, #24]	; (8000d94 <MX_GPIO_Init+0x10c>)
 8000d7c:	f001 f842 	bl	8001e04 <HAL_GPIO_Init>

}
 8000d80:	bf00      	nop
 8000d82:	3728      	adds	r7, #40	; 0x28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020800 	.word	0x40020800
 8000d90:	40020000 	.word	0x40020000
 8000d94:	40020400 	.word	0x40020400

08000d98 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_IT(&huart1,uart_tx_msg,1);
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000db4:	f00a fe22 	bl	800b9fc <MX_USB_HOST_Init>
   osEvent event;
   //HAL_UART_Transmit(&huart1,"USB start\n",10,100);
  /* Infinite loop */
  for(;;)
  {
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 8000db8:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <StartDefaultTask+0x60>)
 8000dba:	6819      	ldr	r1, [r3, #0]
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f008 fc3d 	bl	8009644 <osMessageGet>

	  if(event.status == osEventMessage)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	2b10      	cmp	r3, #16
 8000dce:	d118      	bne.n	8000e02 <StartDefaultTask+0x56>
	  {
		switch(event.value.v)
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	2b03      	cmp	r3, #3
 8000dd4:	d006      	beq.n	8000de4 <StartDefaultTask+0x38>
 8000dd6:	2b03      	cmp	r3, #3
 8000dd8:	d815      	bhi.n	8000e06 <StartDefaultTask+0x5a>
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d00e      	beq.n	8000dfc <StartDefaultTask+0x50>
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d004      	beq.n	8000dec <StartDefaultTask+0x40>
		 case APPLICATION_START:
		   set_line_coding();
		 break;

		 default:
		 break;
 8000de2:	e010      	b.n	8000e06 <StartDefaultTask+0x5a>
			 usb_status=0;
 8000de4:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <StartDefaultTask+0x64>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]
		 break;
 8000dea:	e00d      	b.n	8000e08 <StartDefaultTask+0x5c>
			 osDelay(5000);
 8000dec:	f241 3088 	movw	r0, #5000	; 0x1388
 8000df0:	f008 fbab 	bl	800954a <osDelay>
			 usb_status=1;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <StartDefaultTask+0x64>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	701a      	strb	r2, [r3, #0]
		 break;
 8000dfa:	e005      	b.n	8000e08 <StartDefaultTask+0x5c>
		   set_line_coding();
 8000dfc:	f00a fdd0 	bl	800b9a0 <set_line_coding>
		 break;
 8000e00:	e002      	b.n	8000e08 <StartDefaultTask+0x5c>
		 }
	   }
 8000e02:	bf00      	nop
 8000e04:	e7d8      	b.n	8000db8 <StartDefaultTask+0xc>
		 break;
 8000e06:	bf00      	nop
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 8000e08:	e7d6      	b.n	8000db8 <StartDefaultTask+0xc>
 8000e0a:	bf00      	nop
 8000e0c:	20000688 	.word	0x20000688
 8000e10:	20000690 	.word	0x20000690

08000e14 <storage_f>:
* @retval None
*/

/* USER CODE END Header_storage_f */
void storage_f(void const * argument)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN storage_f */
  osDelay(500);
 8000e1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e20:	f008 fb93 	bl	800954a <osDelay>

  */
  /* Infinite loop */
  for(;;)
  {
    osDelay(200);
 8000e24:	20c8      	movs	r0, #200	; 0xc8
 8000e26:	f008 fb90 	bl	800954a <osDelay>
 8000e2a:	e7fb      	b.n	8000e24 <storage_f+0x10>

08000e2c <icListen_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_icListen_f */
void icListen_f(void const * argument)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
		   }
		   prev_seq=event.value.v;
		 }
	   }
	   */
	  osDelay(2);
 8000e34:	2002      	movs	r0, #2
 8000e36:	f008 fb88 	bl	800954a <osDelay>
 8000e3a:	e7fb      	b.n	8000e34 <icListen_f+0x8>

08000e3c <UI_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UI_f */
void UI_f(void const * argument)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b0a6      	sub	sp, #152	; 0x98
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  mcu_flash_typedef flash1;

  icListen_setup_full_msg setup_msg;
  icListen_collect_short_mask_msg collect_msg;

  mcu_flash_init(&flash1,7);
 8000e44:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000e48:	2107      	movs	r1, #7
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f84e 	bl	8000eec <mcu_flash_init>
  //HAL_UART_Transmit(&huart1,"Flash init\n",11,100);
  if(mcu_flash_read(&flash1)==F_OK){
 8000e50:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 f89b 	bl	8000f90 <mcu_flash_read>
  else{
	  //HAL_UART_Transmit(&huart1,"CRC BAD\n",8,100);
  }

  //HAL_UART_Transmit(&huart1,(uint8_t*)&flash1.data,18,100);
  sprintf(flash1.data.raw_data,"Hello world!!!!\n");
 8000e5a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000e5e:	330c      	adds	r3, #12
 8000e60:	4914      	ldr	r1, [pc, #80]	; (8000eb4 <UI_f+0x78>)
 8000e62:	4618      	mov	r0, r3
 8000e64:	f00b fa7e 	bl	800c364 <siprintf>
  mcu_flash_save(&flash1);
 8000e68:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 f8af 	bl	8000fd0 <mcu_flash_save>

  icListen_prepare_setup_msg(&setup_msg,128000,24);
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	2218      	movs	r2, #24
 8000e78:	f44f 31fa 	mov.w	r1, #128000	; 0x1f400
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fbd7 	bl	8000630 <icListen_prepare_setup_msg>
  icListen_prepare_collect_msg(&collect_msg,0x20);
 8000e82:	f107 030c 	add.w	r3, r7, #12
 8000e86:	2120      	movs	r1, #32
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fd32 	bl	80008f2 <icListen_prepare_collect_msg>

  HAL_UART_Transmit(&huart1,(uint8_t*)&setup_msg,sizeof(icListen_setup_full_msg),100);
 8000e8e:	f107 0114 	add.w	r1, r7, #20
 8000e92:	2364      	movs	r3, #100	; 0x64
 8000e94:	2262      	movs	r2, #98	; 0x62
 8000e96:	4808      	ldr	r0, [pc, #32]	; (8000eb8 <UI_f+0x7c>)
 8000e98:	f004 f875 	bl	8004f86 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t*)&collect_msg,sizeof(icListen_collect_short_mask_msg),100);
 8000e9c:	f107 010c 	add.w	r1, r7, #12
 8000ea0:	2364      	movs	r3, #100	; 0x64
 8000ea2:	2207      	movs	r2, #7
 8000ea4:	4804      	ldr	r0, [pc, #16]	; (8000eb8 <UI_f+0x7c>)
 8000ea6:	f004 f86e 	bl	8004f86 <HAL_UART_Transmit>
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f008 fb4d 	bl	800954a <osDelay>
 8000eb0:	e7fb      	b.n	8000eaa <UI_f+0x6e>
 8000eb2:	bf00      	nop
 8000eb4:	0800cb14 	.word	0x0800cb14
 8000eb8:	20000634 	.word	0x20000634

08000ebc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d101      	bne.n	8000ed2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ece:	f000 fb09 	bl	80014e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40010000 	.word	0x40010000

08000ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee4:	b672      	cpsid	i
}
 8000ee6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <Error_Handler+0x8>
	...

08000eec <mcu_flash_init>:
#if defined(STM32F205xx)  //KB
uint32_t  flash_block_size[]={16,16,16,16,64,128,128,128,128,128,128,128};
#endif

void mcu_flash_init(mcu_flash_typedef* mcu_flash_obj,uint32_t first_block)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b087      	sub	sp, #28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
	uint32_t temp=0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
	int32_t temp2=0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
	if(first_block<FLASH_NUM_OF_BLOCKS){
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	2b0b      	cmp	r3, #11
 8000f02:	d83d      	bhi.n	8000f80 <mcu_flash_init+0x94>
      mcu_flash_obj->first_block_num=first_block;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	683a      	ldr	r2, [r7, #0]
 8000f08:	605a      	str	r2, [r3, #4]
      for(int i=0;i<first_block;i++) temp+=flash_block_size[i];
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	e009      	b.n	8000f24 <mcu_flash_init+0x38>
 8000f10:	4a1e      	ldr	r2, [pc, #120]	; (8000f8c <mcu_flash_init+0xa0>)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	617b      	str	r3, [r7, #20]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	3301      	adds	r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	683a      	ldr	r2, [r7, #0]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d8f1      	bhi.n	8000f10 <mcu_flash_init+0x24>
	  mcu_flash_obj->first_block_addr=FLASH_BASE+(temp*1024);
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000f32:	029a      	lsls	r2, r3, #10
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	601a      	str	r2, [r3, #0]

	  temp2=FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE;
 8000f38:	2312      	movs	r3, #18
 8000f3a:	613b      	str	r3, [r7, #16]
	  mcu_flash_obj->num_of_blocks=0;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	721a      	strb	r2, [r3, #8]
 8000f42:	2200      	movs	r2, #0
 8000f44:	725a      	strb	r2, [r3, #9]
 8000f46:	2200      	movs	r2, #0
 8000f48:	729a      	strb	r2, [r3, #10]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	72da      	strb	r2, [r3, #11]
	  for(int i=mcu_flash_obj->first_block_num;i<FLASH_NUM_OF_BLOCKS&&temp2>0;i++) {
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	e00e      	b.n	8000f74 <mcu_flash_init+0x88>
		  temp2-=flash_block_size[i];
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	490c      	ldr	r1, [pc, #48]	; (8000f8c <mcu_flash_init+0xa0>)
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	613b      	str	r3, [r7, #16]
		  mcu_flash_obj->num_of_blocks++;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	1c5a      	adds	r2, r3, #1
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
	  for(int i=mcu_flash_obj->first_block_num;i<FLASH_NUM_OF_BLOCKS&&temp2>0;i++) {
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	3301      	adds	r3, #1
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	2b0b      	cmp	r3, #11
 8000f78:	dc02      	bgt.n	8000f80 <mcu_flash_init+0x94>
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	dcea      	bgt.n	8000f56 <mcu_flash_init+0x6a>
	  }
	}
}
 8000f80:	bf00      	nop
 8000f82:	371c      	adds	r7, #28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	20000200 	.word	0x20000200

08000f90 <mcu_flash_read>:

F_RES mcu_flash_read(mcu_flash_typedef* mcu_flash_obj)
{
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	 memcpy((uint8_t*)&(mcu_flash_obj->data),(uint8_t*)mcu_flash_obj->first_block_addr,FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f103 000c 	add.w	r0, r3, #12
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2212      	movs	r2, #18
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f00b f86d 	bl	800c084 <memcpy>
	 if(mcu_flash_obj->data.crc==get_crc16_arc(mcu_flash_obj->data.raw_data,FLASH_DATA_SIZE)){
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	8b9b      	ldrh	r3, [r3, #28]
 8000fae:	b29c      	uxth	r4, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	330c      	adds	r3, #12
 8000fb4:	2110      	movs	r1, #16
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fafe 	bl	80005b8 <get_crc16_arc>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	429c      	cmp	r4, r3
 8000fc0:	d101      	bne.n	8000fc6 <mcu_flash_read+0x36>
		 return F_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <mcu_flash_read+0x38>
	 }
	 else{
		 return F_ERR;
 8000fc6:	2301      	movs	r3, #1
	 }

}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd90      	pop	{r4, r7, pc}

08000fd0 <mcu_flash_save>:
void mcu_flash_save(mcu_flash_typedef* mcu_flash_obj)
{
 8000fd0:	b5b0      	push	{r4, r5, r7, lr}
 8000fd2:	b08c      	sub	sp, #48	; 0x30
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	uint32_t i=0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t tmp;
	uint32_t pgerr = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	623b      	str	r3, [r7, #32]
	uint8_t* data=(uint8_t*)&mcu_flash_obj->data;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	330c      	adds	r3, #12
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24

	mcu_flash_obj->data.crc=get_crc16_arc(mcu_flash_obj->data.raw_data,FLASH_DATA_SIZE);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	330c      	adds	r3, #12
 8000fea:	2110      	movs	r1, #16
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fae3 	bl	80005b8 <get_crc16_arc>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	839a      	strh	r2, [r3, #28]

    HAL_FLASH_Unlock();
 8000ffa:	f000 fc7f 	bl	80018fc <HAL_FLASH_Unlock>
    #if defined(STM32F405xx)
	FLASH_EraseInitTypeDef erase_info = {
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]
		.TypeErase = FLASH_TYPEERASE_SECTORS,
		.Sector = mcu_flash_obj->first_block_num,
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
	FLASH_EraseInitTypeDef erase_info = {
 8001012:	617b      	str	r3, [r7, #20]
		.NbSectors = mcu_flash_obj->num_of_blocks,
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
	FLASH_EraseInitTypeDef erase_info = {
 8001018:	61bb      	str	r3, [r7, #24]
	.NbPages = mcu_flash_obj->num_of_blocks,
    };
    #endif


	HAL_FLASHEx_Erase(&erase_info, &pgerr);
 800101a:	f107 0220 	add.w	r2, r7, #32
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f000 fdcb 	bl	8001bc0 <HAL_FLASHEx_Erase>

	if(pgerr != 0xFFFFFFFFul)
 800102a:	6a3b      	ldr	r3, [r7, #32]
 800102c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001030:	d027      	beq.n	8001082 <mcu_flash_save+0xb2>
	{
		HAL_FLASH_Lock();
 8001032:	f000 fc85 	bl	8001940 <HAL_FLASH_Lock>
 8001036:	e029      	b.n	800108c <mcu_flash_save+0xbc>
		return ;
	}

	while(i<(FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE))
	{
        tmp=(tmp&0x0000)|(data[i]&0x00FF);
 8001038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800103a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800103c:	4413      	add	r3, r2
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	857b      	strh	r3, [r7, #42]	; 0x2a
		if((i+1)<(FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE)) tmp=tmp|(data[i+1]<<8&0xFF00);
 8001042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001044:	3301      	adds	r3, #1
 8001046:	2b11      	cmp	r3, #17
 8001048:	d80b      	bhi.n	8001062 <mcu_flash_save+0x92>
 800104a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800104c:	3301      	adds	r3, #1
 800104e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001050:	4413      	add	r3, r2
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	b21a      	sxth	r2, r3
 8001058:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800105c:	4313      	orrs	r3, r2
 800105e:	b21b      	sxth	r3, r3
 8001060:	857b      	strh	r3, [r7, #42]	; 0x2a
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,mcu_flash_obj->first_block_addr+i,tmp);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001068:	18d1      	adds	r1, r2, r3
 800106a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800106c:	2200      	movs	r2, #0
 800106e:	461c      	mov	r4, r3
 8001070:	4615      	mov	r5, r2
 8001072:	4622      	mov	r2, r4
 8001074:	462b      	mov	r3, r5
 8001076:	2001      	movs	r0, #1
 8001078:	f000 fbec 	bl	8001854 <HAL_FLASH_Program>
		i=i+2;
 800107c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107e:	3302      	adds	r3, #2
 8001080:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(i<(FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE))
 8001082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001084:	2b11      	cmp	r3, #17
 8001086:	d9d7      	bls.n	8001038 <mcu_flash_save+0x68>
	}

	HAL_FLASH_Lock();
 8001088:	f000 fc5a 	bl	8001940 <HAL_FLASH_Lock>
}
 800108c:	3730      	adds	r7, #48	; 0x30
 800108e:	46bd      	mov	sp, r7
 8001090:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001094 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_MspInit+0x54>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <HAL_MspInit+0x54>)
 80010a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a8:	6453      	str	r3, [r2, #68]	; 0x44
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <HAL_MspInit+0x54>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <HAL_MspInit+0x54>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <HAL_MspInit+0x54>)
 80010c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c4:	6413      	str	r3, [r2, #64]	; 0x40
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <HAL_MspInit+0x54>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	210f      	movs	r1, #15
 80010d6:	f06f 0001 	mvn.w	r0, #1
 80010da:	f000 faff 	bl	80016dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800

080010ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a1d      	ldr	r2, [pc, #116]	; (8001180 <HAL_SPI_MspInit+0x94>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d133      	bne.n	8001176 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <HAL_SPI_MspInit+0x98>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	4a1b      	ldr	r2, [pc, #108]	; (8001184 <HAL_SPI_MspInit+0x98>)
 8001118:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800111c:	6453      	str	r3, [r2, #68]	; 0x44
 800111e:	4b19      	ldr	r3, [pc, #100]	; (8001184 <HAL_SPI_MspInit+0x98>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <HAL_SPI_MspInit+0x98>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a14      	ldr	r2, [pc, #80]	; (8001184 <HAL_SPI_MspInit+0x98>)
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_SPI_MspInit+0x98>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001146:	2338      	movs	r3, #56	; 0x38
 8001148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001152:	2303      	movs	r3, #3
 8001154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001156:	2305      	movs	r3, #5
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	4809      	ldr	r0, [pc, #36]	; (8001188 <HAL_SPI_MspInit+0x9c>)
 8001162:	f000 fe4f 	bl	8001e04 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2105      	movs	r1, #5
 800116a:	2023      	movs	r0, #35	; 0x23
 800116c:	f000 fab6 	bl	80016dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001170:	2023      	movs	r0, #35	; 0x23
 8001172:	f000 facf 	bl	8001714 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001176:	bf00      	nop
 8001178:	3728      	adds	r7, #40	; 0x28
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40013000 	.word	0x40013000
 8001184:	40023800 	.word	0x40023800
 8001188:	40020400 	.word	0x40020400

0800118c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800119c:	d115      	bne.n	80011ca <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <HAL_TIM_Base_MspInit+0x48>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <HAL_TIM_Base_MspInit+0x48>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6413      	str	r3, [r2, #64]	; 0x40
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <HAL_TIM_Base_MspInit+0x48>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2105      	movs	r1, #5
 80011be:	201c      	movs	r0, #28
 80011c0:	f000 fa8c 	bl	80016dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011c4:	201c      	movs	r0, #28
 80011c6:	f000 faa5 	bl	8001714 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800

080011d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a1d      	ldr	r2, [pc, #116]	; (800126c <HAL_UART_MspInit+0x94>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d134      	bne.n	8001264 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <HAL_UART_MspInit+0x98>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	4a1b      	ldr	r2, [pc, #108]	; (8001270 <HAL_UART_MspInit+0x98>)
 8001204:	f043 0310 	orr.w	r3, r3, #16
 8001208:	6453      	str	r3, [r2, #68]	; 0x44
 800120a:	4b19      	ldr	r3, [pc, #100]	; (8001270 <HAL_UART_MspInit+0x98>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	f003 0310 	and.w	r3, r3, #16
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <HAL_UART_MspInit+0x98>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a14      	ldr	r2, [pc, #80]	; (8001270 <HAL_UART_MspInit+0x98>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_UART_MspInit+0x98>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001232:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001244:	2307      	movs	r3, #7
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4809      	ldr	r0, [pc, #36]	; (8001274 <HAL_UART_MspInit+0x9c>)
 8001250:	f000 fdd8 	bl	8001e04 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	2105      	movs	r1, #5
 8001258:	2025      	movs	r0, #37	; 0x25
 800125a:	f000 fa3f 	bl	80016dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800125e:	2025      	movs	r0, #37	; 0x25
 8001260:	f000 fa58 	bl	8001714 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001264:	bf00      	nop
 8001266:	3728      	adds	r7, #40	; 0x28
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40011000 	.word	0x40011000
 8001270:	40023800 	.word	0x40023800
 8001274:	40020000 	.word	0x40020000

08001278 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08c      	sub	sp, #48	; 0x30
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001288:	2200      	movs	r2, #0
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	2019      	movs	r0, #25
 800128e:	f000 fa25 	bl	80016dc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001292:	2019      	movs	r0, #25
 8001294:	f000 fa3e 	bl	8001714 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	4b1f      	ldr	r3, [pc, #124]	; (800131c <HAL_InitTick+0xa4>)
 800129e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a0:	4a1e      	ldr	r2, [pc, #120]	; (800131c <HAL_InitTick+0xa4>)
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	6453      	str	r3, [r2, #68]	; 0x44
 80012a8:	4b1c      	ldr	r3, [pc, #112]	; (800131c <HAL_InitTick+0xa4>)
 80012aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012b4:	f107 0210 	add.w	r2, r7, #16
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4611      	mov	r1, r2
 80012be:	4618      	mov	r0, r3
 80012c0:	f002 ffb8 	bl	8004234 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80012c4:	f002 ffa2 	bl	800420c <HAL_RCC_GetPCLK2Freq>
 80012c8:	4603      	mov	r3, r0
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d0:	4a13      	ldr	r2, [pc, #76]	; (8001320 <HAL_InitTick+0xa8>)
 80012d2:	fba2 2303 	umull	r2, r3, r2, r3
 80012d6:	0c9b      	lsrs	r3, r3, #18
 80012d8:	3b01      	subs	r3, #1
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_InitTick+0xac>)
 80012de:	4a12      	ldr	r2, [pc, #72]	; (8001328 <HAL_InitTick+0xb0>)
 80012e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <HAL_InitTick+0xac>)
 80012e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012e8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80012ea:	4a0e      	ldr	r2, [pc, #56]	; (8001324 <HAL_InitTick+0xac>)
 80012ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <HAL_InitTick+0xac>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <HAL_InitTick+0xac>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80012fc:	4809      	ldr	r0, [pc, #36]	; (8001324 <HAL_InitTick+0xac>)
 80012fe:	f003 f973 	bl	80045e8 <HAL_TIM_Base_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d104      	bne.n	8001312 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001308:	4806      	ldr	r0, [pc, #24]	; (8001324 <HAL_InitTick+0xac>)
 800130a:	f003 f9bd 	bl	8004688 <HAL_TIM_Base_Start_IT>
 800130e:	4603      	mov	r3, r0
 8001310:	e000      	b.n	8001314 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
}
 8001314:	4618      	mov	r0, r3
 8001316:	3730      	adds	r7, #48	; 0x30
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40023800 	.word	0x40023800
 8001320:	431bde83 	.word	0x431bde83
 8001324:	20000694 	.word	0x20000694
 8001328:	40010000 	.word	0x40010000

0800132c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <NMI_Handler+0x4>

08001332 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001336:	e7fe      	b.n	8001336 <HardFault_Handler+0x4>

08001338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800133c:	e7fe      	b.n	800133c <MemManage_Handler+0x4>

0800133e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <BusFault_Handler+0x4>

08001344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <UsageFault_Handler+0x4>

0800134a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800135e:	f003 fa03 	bl	8004768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000694 	.word	0x20000694

0800136c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <TIM2_IRQHandler+0x10>)
 8001372:	f003 f9f9 	bl	8004768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200005ec 	.word	0x200005ec

08001380 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <SPI1_IRQHandler+0x10>)
 8001386:	f003 f811 	bl	80043ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000594 	.word	0x20000594

08001394 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <USART1_IRQHandler+0x10>)
 800139a:	f003 fe87 	bl	80050ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000634 	.word	0x20000634

080013a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <OTG_FS_IRQHandler+0x10>)
 80013ae:	f001 f949 	bl	8002644 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200057e8 	.word	0x200057e8

080013bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c4:	4a14      	ldr	r2, [pc, #80]	; (8001418 <_sbrk+0x5c>)
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <_sbrk+0x60>)
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d0:	4b13      	ldr	r3, [pc, #76]	; (8001420 <_sbrk+0x64>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <_sbrk+0x64>)
 80013da:	4a12      	ldr	r2, [pc, #72]	; (8001424 <_sbrk+0x68>)
 80013dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <_sbrk+0x64>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d207      	bcs.n	80013fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013ec:	f00a fe0e 	bl	800c00c <__errno>
 80013f0:	4603      	mov	r3, r0
 80013f2:	220c      	movs	r2, #12
 80013f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	e009      	b.n	8001410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <_sbrk+0x64>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001402:	4b07      	ldr	r3, [pc, #28]	; (8001420 <_sbrk+0x64>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	4a05      	ldr	r2, [pc, #20]	; (8001420 <_sbrk+0x64>)
 800140c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800140e:	68fb      	ldr	r3, [r7, #12]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20020000 	.word	0x20020000
 800141c:	00000400 	.word	0x00000400
 8001420:	200006dc 	.word	0x200006dc
 8001424:	20005b00 	.word	0x20005b00

08001428 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <SystemInit+0x20>)
 800142e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001432:	4a05      	ldr	r2, [pc, #20]	; (8001448 <SystemInit+0x20>)
 8001434:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001438:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800144c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001484 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001450:	480d      	ldr	r0, [pc, #52]	; (8001488 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001452:	490e      	ldr	r1, [pc, #56]	; (800148c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001454:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001458:	e002      	b.n	8001460 <LoopCopyDataInit>

0800145a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800145c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145e:	3304      	adds	r3, #4

08001460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001464:	d3f9      	bcc.n	800145a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001466:	4a0b      	ldr	r2, [pc, #44]	; (8001494 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001468:	4c0b      	ldr	r4, [pc, #44]	; (8001498 <LoopFillZerobss+0x26>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800146c:	e001      	b.n	8001472 <LoopFillZerobss>

0800146e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001470:	3204      	adds	r2, #4

08001472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001474:	d3fb      	bcc.n	800146e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001476:	f7ff ffd7 	bl	8001428 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800147a:	f00a fdcd 	bl	800c018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800147e:	f7ff fa5b 	bl	8000938 <main>
  bx  lr    
 8001482:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001484:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800148c:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8001490:	0800cc28 	.word	0x0800cc28
  ldr r2, =_sbss
 8001494:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001498:	20005afc 	.word	0x20005afc

0800149c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800149c:	e7fe      	b.n	800149c <ADC_IRQHandler>
	...

080014a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014a4:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <HAL_Init+0x40>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a0d      	ldr	r2, [pc, #52]	; (80014e0 <HAL_Init+0x40>)
 80014aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <HAL_Init+0x40>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <HAL_Init+0x40>)
 80014b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <HAL_Init+0x40>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <HAL_Init+0x40>)
 80014c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c8:	2003      	movs	r0, #3
 80014ca:	f000 f8fc 	bl	80016c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ce:	200f      	movs	r0, #15
 80014d0:	f7ff fed2 	bl	8001278 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d4:	f7ff fdde 	bl	8001094 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40023c00 	.word	0x40023c00

080014e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_IncTick+0x20>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_IncTick+0x24>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4413      	add	r3, r2
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <HAL_IncTick+0x24>)
 80014f6:	6013      	str	r3, [r2, #0]
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000238 	.word	0x20000238
 8001508:	200006e0 	.word	0x200006e0

0800150c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return uwTick;
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <HAL_GetTick+0x14>)
 8001512:	681b      	ldr	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	200006e0 	.word	0x200006e0

08001524 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800152c:	f7ff ffee 	bl	800150c <HAL_GetTick>
 8001530:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800153c:	d005      	beq.n	800154a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <HAL_Delay+0x44>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	461a      	mov	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4413      	add	r3, r2
 8001548:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800154a:	bf00      	nop
 800154c:	f7ff ffde 	bl	800150c <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	429a      	cmp	r2, r3
 800155a:	d8f7      	bhi.n	800154c <HAL_Delay+0x28>
  {
  }
}
 800155c:	bf00      	nop
 800155e:	bf00      	nop
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000238 	.word	0x20000238

0800156c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001588:	4013      	ands	r3, r2
 800158a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800159c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159e:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	60d3      	str	r3, [r2, #12]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <__NVIC_GetPriorityGrouping+0x18>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	f003 0307 	and.w	r3, r3, #7
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	db0b      	blt.n	80015fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	f003 021f 	and.w	r2, r3, #31
 80015e8:	4907      	ldr	r1, [pc, #28]	; (8001608 <__NVIC_EnableIRQ+0x38>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	2001      	movs	r0, #1
 80015f2:	fa00 f202 	lsl.w	r2, r0, r2
 80015f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000e100 	.word	0xe000e100

0800160c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	6039      	str	r1, [r7, #0]
 8001616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161c:	2b00      	cmp	r3, #0
 800161e:	db0a      	blt.n	8001636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	b2da      	uxtb	r2, r3
 8001624:	490c      	ldr	r1, [pc, #48]	; (8001658 <__NVIC_SetPriority+0x4c>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	0112      	lsls	r2, r2, #4
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	440b      	add	r3, r1
 8001630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001634:	e00a      	b.n	800164c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4908      	ldr	r1, [pc, #32]	; (800165c <__NVIC_SetPriority+0x50>)
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	3b04      	subs	r3, #4
 8001644:	0112      	lsls	r2, r2, #4
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	440b      	add	r3, r1
 800164a:	761a      	strb	r2, [r3, #24]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000e100 	.word	0xe000e100
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	; 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f1c3 0307 	rsb	r3, r3, #7
 800167a:	2b04      	cmp	r3, #4
 800167c:	bf28      	it	cs
 800167e:	2304      	movcs	r3, #4
 8001680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3304      	adds	r3, #4
 8001686:	2b06      	cmp	r3, #6
 8001688:	d902      	bls.n	8001690 <NVIC_EncodePriority+0x30>
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3b03      	subs	r3, #3
 800168e:	e000      	b.n	8001692 <NVIC_EncodePriority+0x32>
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	f04f 32ff 	mov.w	r2, #4294967295
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43da      	mvns	r2, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	401a      	ands	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	fa01 f303 	lsl.w	r3, r1, r3
 80016b2:	43d9      	mvns	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	4313      	orrs	r3, r2
         );
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3724      	adds	r7, #36	; 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ff4c 	bl	800156c <__NVIC_SetPriorityGrouping>
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
 80016e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ee:	f7ff ff61 	bl	80015b4 <__NVIC_GetPriorityGrouping>
 80016f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	68b9      	ldr	r1, [r7, #8]
 80016f8:	6978      	ldr	r0, [r7, #20]
 80016fa:	f7ff ffb1 	bl	8001660 <NVIC_EncodePriority>
 80016fe:	4602      	mov	r2, r0
 8001700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001704:	4611      	mov	r1, r2
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff ff80 	bl	800160c <__NVIC_SetPriority>
}
 800170c:	bf00      	nop
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff ff54 	bl	80015d0 <__NVIC_EnableIRQ>
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800173e:	f7ff fee5 	bl	800150c <HAL_GetTick>
 8001742:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d008      	beq.n	8001762 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2280      	movs	r2, #128	; 0x80
 8001754:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e052      	b.n	8001808 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0216 	bic.w	r2, r2, #22
 8001770:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	695a      	ldr	r2, [r3, #20]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001780:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	2b00      	cmp	r3, #0
 8001788:	d103      	bne.n	8001792 <HAL_DMA_Abort+0x62>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800178e:	2b00      	cmp	r3, #0
 8001790:	d007      	beq.n	80017a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0208 	bic.w	r2, r2, #8
 80017a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0201 	bic.w	r2, r2, #1
 80017b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017b2:	e013      	b.n	80017dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017b4:	f7ff feaa 	bl	800150c <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b05      	cmp	r3, #5
 80017c0:	d90c      	bls.n	80017dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2220      	movs	r2, #32
 80017c6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2203      	movs	r2, #3
 80017cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e015      	b.n	8001808 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1e4      	bne.n	80017b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ee:	223f      	movs	r2, #63	; 0x3f
 80017f0:	409a      	lsls	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d004      	beq.n	800182e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2280      	movs	r2, #128	; 0x80
 8001828:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e00c      	b.n	8001848 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2205      	movs	r2, #5
 8001832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 0201 	bic.w	r2, r2, #1
 8001844:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001866:	4b23      	ldr	r3, [pc, #140]	; (80018f4 <HAL_FLASH_Program+0xa0>)
 8001868:	7e1b      	ldrb	r3, [r3, #24]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d101      	bne.n	8001872 <HAL_FLASH_Program+0x1e>
 800186e:	2302      	movs	r3, #2
 8001870:	e03b      	b.n	80018ea <HAL_FLASH_Program+0x96>
 8001872:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <HAL_FLASH_Program+0xa0>)
 8001874:	2201      	movs	r2, #1
 8001876:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001878:	f24c 3050 	movw	r0, #50000	; 0xc350
 800187c:	f000 f870 	bl	8001960 <FLASH_WaitForLastOperation>
 8001880:	4603      	mov	r3, r0
 8001882:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001884:	7dfb      	ldrb	r3, [r7, #23]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d12b      	bne.n	80018e2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d105      	bne.n	800189c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001890:	783b      	ldrb	r3, [r7, #0]
 8001892:	4619      	mov	r1, r3
 8001894:	68b8      	ldr	r0, [r7, #8]
 8001896:	f000 f91b 	bl	8001ad0 <FLASH_Program_Byte>
 800189a:	e016      	b.n	80018ca <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d105      	bne.n	80018ae <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80018a2:	883b      	ldrh	r3, [r7, #0]
 80018a4:	4619      	mov	r1, r3
 80018a6:	68b8      	ldr	r0, [r7, #8]
 80018a8:	f000 f8ee 	bl	8001a88 <FLASH_Program_HalfWord>
 80018ac:	e00d      	b.n	80018ca <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d105      	bne.n	80018c0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	4619      	mov	r1, r3
 80018b8:	68b8      	ldr	r0, [r7, #8]
 80018ba:	f000 f8c3 	bl	8001a44 <FLASH_Program_Word>
 80018be:	e004      	b.n	80018ca <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80018c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018c4:	68b8      	ldr	r0, [r7, #8]
 80018c6:	f000 f88b 	bl	80019e0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018ca:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018ce:	f000 f847 	bl	8001960 <FLASH_WaitForLastOperation>
 80018d2:	4603      	mov	r3, r0
 80018d4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80018d6:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <HAL_FLASH_Program+0xa4>)
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	4a07      	ldr	r2, [pc, #28]	; (80018f8 <HAL_FLASH_Program+0xa4>)
 80018dc:	f023 0301 	bic.w	r3, r3, #1
 80018e0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80018e2:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <HAL_FLASH_Program+0xa0>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	761a      	strb	r2, [r3, #24]
  
  return status;
 80018e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200006e4 	.word	0x200006e4
 80018f8:	40023c00 	.word	0x40023c00

080018fc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001906:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <HAL_FLASH_Unlock+0x38>)
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	2b00      	cmp	r3, #0
 800190c:	da0b      	bge.n	8001926 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <HAL_FLASH_Unlock+0x38>)
 8001910:	4a09      	ldr	r2, [pc, #36]	; (8001938 <HAL_FLASH_Unlock+0x3c>)
 8001912:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001914:	4b07      	ldr	r3, [pc, #28]	; (8001934 <HAL_FLASH_Unlock+0x38>)
 8001916:	4a09      	ldr	r2, [pc, #36]	; (800193c <HAL_FLASH_Unlock+0x40>)
 8001918:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_FLASH_Unlock+0x38>)
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	2b00      	cmp	r3, #0
 8001920:	da01      	bge.n	8001926 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001926:	79fb      	ldrb	r3, [r7, #7]
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	40023c00 	.word	0x40023c00
 8001938:	45670123 	.word	0x45670123
 800193c:	cdef89ab 	.word	0xcdef89ab

08001940 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <HAL_FLASH_Lock+0x1c>)
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	4a04      	ldr	r2, [pc, #16]	; (800195c <HAL_FLASH_Lock+0x1c>)
 800194a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800194e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	40023c00 	.word	0x40023c00

08001960 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800196c:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <FLASH_WaitForLastOperation+0x78>)
 800196e:	2200      	movs	r2, #0
 8001970:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001972:	f7ff fdcb 	bl	800150c <HAL_GetTick>
 8001976:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001978:	e010      	b.n	800199c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001980:	d00c      	beq.n	800199c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d007      	beq.n	8001998 <FLASH_WaitForLastOperation+0x38>
 8001988:	f7ff fdc0 	bl	800150c <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	429a      	cmp	r2, r3
 8001996:	d201      	bcs.n	800199c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e019      	b.n	80019d0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800199c:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <FLASH_WaitForLastOperation+0x7c>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1e8      	bne.n	800197a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <FLASH_WaitForLastOperation+0x7c>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d002      	beq.n	80019ba <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <FLASH_WaitForLastOperation+0x7c>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <FLASH_WaitForLastOperation+0x7c>)
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80019c6:	f000 f8a5 	bl	8001b14 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e000      	b.n	80019d0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
  
}  
 80019d0:	4618      	mov	r0, r3
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	200006e4 	.word	0x200006e4
 80019dc:	40023c00 	.word	0x40023c00

080019e0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80019ec:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <FLASH_Program_DoubleWord+0x60>)
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	4a13      	ldr	r2, [pc, #76]	; (8001a40 <FLASH_Program_DoubleWord+0x60>)
 80019f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <FLASH_Program_DoubleWord+0x60>)
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <FLASH_Program_DoubleWord+0x60>)
 80019fe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001a02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <FLASH_Program_DoubleWord+0x60>)
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <FLASH_Program_DoubleWord+0x60>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001a16:	f3bf 8f6f 	isb	sy
}
 8001a1a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001a1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	000a      	movs	r2, r1
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	68f9      	ldr	r1, [r7, #12]
 8001a2e:	3104      	adds	r1, #4
 8001a30:	4613      	mov	r3, r2
 8001a32:	600b      	str	r3, [r1, #0]
}
 8001a34:	bf00      	nop
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	40023c00 	.word	0x40023c00

08001a44 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <FLASH_Program_Word+0x40>)
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	4a0c      	ldr	r2, [pc, #48]	; (8001a84 <FLASH_Program_Word+0x40>)
 8001a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a58:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <FLASH_Program_Word+0x40>)
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	4a09      	ldr	r2, [pc, #36]	; (8001a84 <FLASH_Program_Word+0x40>)
 8001a60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a64:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001a66:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <FLASH_Program_Word+0x40>)
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	4a06      	ldr	r2, [pc, #24]	; (8001a84 <FLASH_Program_Word+0x40>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	601a      	str	r2, [r3, #0]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	40023c00 	.word	0x40023c00

08001a88 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a94:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <FLASH_Program_HalfWord+0x44>)
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	4a0c      	ldr	r2, [pc, #48]	; (8001acc <FLASH_Program_HalfWord+0x44>)
 8001a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <FLASH_Program_HalfWord+0x44>)
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	4a09      	ldr	r2, [pc, #36]	; (8001acc <FLASH_Program_HalfWord+0x44>)
 8001aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aaa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001aac:	4b07      	ldr	r3, [pc, #28]	; (8001acc <FLASH_Program_HalfWord+0x44>)
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	4a06      	ldr	r2, [pc, #24]	; (8001acc <FLASH_Program_HalfWord+0x44>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	887a      	ldrh	r2, [r7, #2]
 8001abc:	801a      	strh	r2, [r3, #0]
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40023c00 	.word	0x40023c00

08001ad0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <FLASH_Program_Byte+0x40>)
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	4a0b      	ldr	r2, [pc, #44]	; (8001b10 <FLASH_Program_Byte+0x40>)
 8001ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ae6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001ae8:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <FLASH_Program_Byte+0x40>)
 8001aea:	4a09      	ldr	r2, [pc, #36]	; (8001b10 <FLASH_Program_Byte+0x40>)
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001af0:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <FLASH_Program_Byte+0x40>)
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	4a06      	ldr	r2, [pc, #24]	; (8001b10 <FLASH_Program_Byte+0x40>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	78fa      	ldrb	r2, [r7, #3]
 8001b00:	701a      	strb	r2, [r3, #0]
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40023c00 	.word	0x40023c00

08001b14 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001b18:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <FLASH_SetErrorCode+0xa4>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f003 0310 	and.w	r3, r3, #16
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d008      	beq.n	8001b36 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001b24:	4b25      	ldr	r3, [pc, #148]	; (8001bbc <FLASH_SetErrorCode+0xa8>)
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	f043 0310 	orr.w	r3, r3, #16
 8001b2c:	4a23      	ldr	r2, [pc, #140]	; (8001bbc <FLASH_SetErrorCode+0xa8>)
 8001b2e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001b30:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <FLASH_SetErrorCode+0xa4>)
 8001b32:	2210      	movs	r2, #16
 8001b34:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001b36:	4b20      	ldr	r3, [pc, #128]	; (8001bb8 <FLASH_SetErrorCode+0xa4>)
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	f003 0320 	and.w	r3, r3, #32
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d008      	beq.n	8001b54 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001b42:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <FLASH_SetErrorCode+0xa8>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	f043 0308 	orr.w	r3, r3, #8
 8001b4a:	4a1c      	ldr	r2, [pc, #112]	; (8001bbc <FLASH_SetErrorCode+0xa8>)
 8001b4c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <FLASH_SetErrorCode+0xa4>)
 8001b50:	2220      	movs	r2, #32
 8001b52:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001b54:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <FLASH_SetErrorCode+0xa4>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d008      	beq.n	8001b72 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001b60:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <FLASH_SetErrorCode+0xa8>)
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	f043 0304 	orr.w	r3, r3, #4
 8001b68:	4a14      	ldr	r2, [pc, #80]	; (8001bbc <FLASH_SetErrorCode+0xa8>)
 8001b6a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <FLASH_SetErrorCode+0xa4>)
 8001b6e:	2240      	movs	r2, #64	; 0x40
 8001b70:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <FLASH_SetErrorCode+0xa4>)
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d008      	beq.n	8001b90 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <FLASH_SetErrorCode+0xa8>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	f043 0302 	orr.w	r3, r3, #2
 8001b86:	4a0d      	ldr	r2, [pc, #52]	; (8001bbc <FLASH_SetErrorCode+0xa8>)
 8001b88:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <FLASH_SetErrorCode+0xa4>)
 8001b8c:	2280      	movs	r2, #128	; 0x80
 8001b8e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <FLASH_SetErrorCode+0xa4>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d008      	beq.n	8001bae <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001b9c:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <FLASH_SetErrorCode+0xa8>)
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	f043 0320 	orr.w	r3, r3, #32
 8001ba4:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <FLASH_SetErrorCode+0xa8>)
 8001ba6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <FLASH_SetErrorCode+0xa4>)
 8001baa:	2202      	movs	r2, #2
 8001bac:	60da      	str	r2, [r3, #12]
  }
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	40023c00 	.word	0x40023c00
 8001bbc:	200006e4 	.word	0x200006e4

08001bc0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001bd2:	4b31      	ldr	r3, [pc, #196]	; (8001c98 <HAL_FLASHEx_Erase+0xd8>)
 8001bd4:	7e1b      	ldrb	r3, [r3, #24]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d101      	bne.n	8001bde <HAL_FLASHEx_Erase+0x1e>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e058      	b.n	8001c90 <HAL_FLASHEx_Erase+0xd0>
 8001bde:	4b2e      	ldr	r3, [pc, #184]	; (8001c98 <HAL_FLASHEx_Erase+0xd8>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001be4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001be8:	f7ff feba 	bl	8001960 <FLASH_WaitForLastOperation>
 8001bec:	4603      	mov	r3, r0
 8001bee:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d148      	bne.n	8001c88 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bfc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d115      	bne.n	8001c32 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	4619      	mov	r1, r3
 8001c12:	4610      	mov	r0, r2
 8001c14:	f000 f844 	bl	8001ca0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c1c:	f7ff fea0 	bl	8001960 <FLASH_WaitForLastOperation>
 8001c20:	4603      	mov	r3, r0
 8001c22:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001c24:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <HAL_FLASHEx_Erase+0xdc>)
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	4a1c      	ldr	r2, [pc, #112]	; (8001c9c <HAL_FLASHEx_Erase+0xdc>)
 8001c2a:	f023 0304 	bic.w	r3, r3, #4
 8001c2e:	6113      	str	r3, [r2, #16]
 8001c30:	e028      	b.n	8001c84 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	e01c      	b.n	8001c74 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	4619      	mov	r1, r3
 8001c42:	68b8      	ldr	r0, [r7, #8]
 8001c44:	f000 f850 	bl	8001ce8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c48:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c4c:	f7ff fe88 	bl	8001960 <FLASH_WaitForLastOperation>
 8001c50:	4603      	mov	r3, r0
 8001c52:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <HAL_FLASHEx_Erase+0xdc>)
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	4a10      	ldr	r2, [pc, #64]	; (8001c9c <HAL_FLASHEx_Erase+0xdc>)
 8001c5a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001c5e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	68ba      	ldr	r2, [r7, #8]
 8001c6a:	601a      	str	r2, [r3, #0]
          break;
 8001c6c:	e00a      	b.n	8001c84 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	3301      	adds	r3, #1
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d3da      	bcc.n	8001c3a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001c84:	f000 f878 	bl	8001d78 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <HAL_FLASHEx_Erase+0xd8>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	761a      	strb	r2, [r3, #24]

  return status;
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	200006e4 	.word	0x200006e4
 8001c9c:	40023c00 	.word	0x40023c00

08001ca0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	6039      	str	r1, [r7, #0]
 8001caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001cac:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <FLASH_MassErase+0x44>)
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	4a0c      	ldr	r2, [pc, #48]	; (8001ce4 <FLASH_MassErase+0x44>)
 8001cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cb6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001cb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <FLASH_MassErase+0x44>)
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	4a09      	ldr	r2, [pc, #36]	; (8001ce4 <FLASH_MassErase+0x44>)
 8001cbe:	f043 0304 	orr.w	r3, r3, #4
 8001cc2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001cc4:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <FLASH_MassErase+0x44>)
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	4a05      	ldr	r2, [pc, #20]	; (8001ce4 <FLASH_MassErase+0x44>)
 8001cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd4:	6113      	str	r3, [r2, #16]
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40023c00 	.word	0x40023c00

08001ce8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001cf8:	78fb      	ldrb	r3, [r7, #3]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d102      	bne.n	8001d04 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	e010      	b.n	8001d26 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d103      	bne.n	8001d12 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001d0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	e009      	b.n	8001d26 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001d12:	78fb      	ldrb	r3, [r7, #3]
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d103      	bne.n	8001d20 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001d18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	e002      	b.n	8001d26 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001d20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d24:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d26:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <FLASH_Erase_Sector+0x8c>)
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	4a12      	ldr	r2, [pc, #72]	; (8001d74 <FLASH_Erase_Sector+0x8c>)
 8001d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d30:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <FLASH_Erase_Sector+0x8c>)
 8001d34:	691a      	ldr	r2, [r3, #16]
 8001d36:	490f      	ldr	r1, [pc, #60]	; (8001d74 <FLASH_Erase_Sector+0x8c>)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <FLASH_Erase_Sector+0x8c>)
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	4a0c      	ldr	r2, [pc, #48]	; (8001d74 <FLASH_Erase_Sector+0x8c>)
 8001d44:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001d48:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <FLASH_Erase_Sector+0x8c>)
 8001d4c:	691a      	ldr	r2, [r3, #16]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	4313      	orrs	r3, r2
 8001d54:	4a07      	ldr	r2, [pc, #28]	; (8001d74 <FLASH_Erase_Sector+0x8c>)
 8001d56:	f043 0302 	orr.w	r3, r3, #2
 8001d5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <FLASH_Erase_Sector+0x8c>)
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	4a04      	ldr	r2, [pc, #16]	; (8001d74 <FLASH_Erase_Sector+0x8c>)
 8001d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d66:	6113      	str	r3, [r2, #16]
}
 8001d68:	bf00      	nop
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	40023c00 	.word	0x40023c00

08001d78 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001d7c:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <FLASH_FlushCaches+0x88>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d017      	beq.n	8001db8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001d88:	4b1d      	ldr	r3, [pc, #116]	; (8001e00 <FLASH_FlushCaches+0x88>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a1c      	ldr	r2, [pc, #112]	; (8001e00 <FLASH_FlushCaches+0x88>)
 8001d8e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d92:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001d94:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <FLASH_FlushCaches+0x88>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a19      	ldr	r2, [pc, #100]	; (8001e00 <FLASH_FlushCaches+0x88>)
 8001d9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <FLASH_FlushCaches+0x88>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a16      	ldr	r2, [pc, #88]	; (8001e00 <FLASH_FlushCaches+0x88>)
 8001da6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001daa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dac:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <FLASH_FlushCaches+0x88>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a13      	ldr	r2, [pc, #76]	; (8001e00 <FLASH_FlushCaches+0x88>)
 8001db2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001db6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <FLASH_FlushCaches+0x88>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d017      	beq.n	8001df4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001dc4:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <FLASH_FlushCaches+0x88>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0d      	ldr	r2, [pc, #52]	; (8001e00 <FLASH_FlushCaches+0x88>)
 8001dca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001dce:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <FLASH_FlushCaches+0x88>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <FLASH_FlushCaches+0x88>)
 8001dd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <FLASH_FlushCaches+0x88>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a07      	ldr	r2, [pc, #28]	; (8001e00 <FLASH_FlushCaches+0x88>)
 8001de2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001de6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <FLASH_FlushCaches+0x88>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <FLASH_FlushCaches+0x88>)
 8001dee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001df2:	6013      	str	r3, [r2, #0]
  }
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40023c00 	.word	0x40023c00

08001e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b089      	sub	sp, #36	; 0x24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	e16b      	b.n	80020f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e20:	2201      	movs	r2, #1
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	f040 815a 	bne.w	80020f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d005      	beq.n	8001e56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d130      	bne.n	8001eb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	2203      	movs	r2, #3
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	f003 0201 	and.w	r2, r3, #1
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d017      	beq.n	8001ef4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	2203      	movs	r2, #3
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d123      	bne.n	8001f48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	08da      	lsrs	r2, r3, #3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3208      	adds	r2, #8
 8001f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	220f      	movs	r2, #15
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	08da      	lsrs	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3208      	adds	r2, #8
 8001f42:	69b9      	ldr	r1, [r7, #24]
 8001f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	2203      	movs	r2, #3
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 0203 	and.w	r2, r3, #3
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 80b4 	beq.w	80020f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	4b60      	ldr	r3, [pc, #384]	; (8002110 <HAL_GPIO_Init+0x30c>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	4a5f      	ldr	r2, [pc, #380]	; (8002110 <HAL_GPIO_Init+0x30c>)
 8001f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f98:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9a:	4b5d      	ldr	r3, [pc, #372]	; (8002110 <HAL_GPIO_Init+0x30c>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fa6:	4a5b      	ldr	r2, [pc, #364]	; (8002114 <HAL_GPIO_Init+0x310>)
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	089b      	lsrs	r3, r3, #2
 8001fac:	3302      	adds	r3, #2
 8001fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	220f      	movs	r2, #15
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a52      	ldr	r2, [pc, #328]	; (8002118 <HAL_GPIO_Init+0x314>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d02b      	beq.n	800202a <HAL_GPIO_Init+0x226>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a51      	ldr	r2, [pc, #324]	; (800211c <HAL_GPIO_Init+0x318>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d025      	beq.n	8002026 <HAL_GPIO_Init+0x222>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a50      	ldr	r2, [pc, #320]	; (8002120 <HAL_GPIO_Init+0x31c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d01f      	beq.n	8002022 <HAL_GPIO_Init+0x21e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a4f      	ldr	r2, [pc, #316]	; (8002124 <HAL_GPIO_Init+0x320>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d019      	beq.n	800201e <HAL_GPIO_Init+0x21a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a4e      	ldr	r2, [pc, #312]	; (8002128 <HAL_GPIO_Init+0x324>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d013      	beq.n	800201a <HAL_GPIO_Init+0x216>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a4d      	ldr	r2, [pc, #308]	; (800212c <HAL_GPIO_Init+0x328>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d00d      	beq.n	8002016 <HAL_GPIO_Init+0x212>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4c      	ldr	r2, [pc, #304]	; (8002130 <HAL_GPIO_Init+0x32c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d007      	beq.n	8002012 <HAL_GPIO_Init+0x20e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a4b      	ldr	r2, [pc, #300]	; (8002134 <HAL_GPIO_Init+0x330>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d101      	bne.n	800200e <HAL_GPIO_Init+0x20a>
 800200a:	2307      	movs	r3, #7
 800200c:	e00e      	b.n	800202c <HAL_GPIO_Init+0x228>
 800200e:	2308      	movs	r3, #8
 8002010:	e00c      	b.n	800202c <HAL_GPIO_Init+0x228>
 8002012:	2306      	movs	r3, #6
 8002014:	e00a      	b.n	800202c <HAL_GPIO_Init+0x228>
 8002016:	2305      	movs	r3, #5
 8002018:	e008      	b.n	800202c <HAL_GPIO_Init+0x228>
 800201a:	2304      	movs	r3, #4
 800201c:	e006      	b.n	800202c <HAL_GPIO_Init+0x228>
 800201e:	2303      	movs	r3, #3
 8002020:	e004      	b.n	800202c <HAL_GPIO_Init+0x228>
 8002022:	2302      	movs	r3, #2
 8002024:	e002      	b.n	800202c <HAL_GPIO_Init+0x228>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <HAL_GPIO_Init+0x228>
 800202a:	2300      	movs	r3, #0
 800202c:	69fa      	ldr	r2, [r7, #28]
 800202e:	f002 0203 	and.w	r2, r2, #3
 8002032:	0092      	lsls	r2, r2, #2
 8002034:	4093      	lsls	r3, r2
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800203c:	4935      	ldr	r1, [pc, #212]	; (8002114 <HAL_GPIO_Init+0x310>)
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	089b      	lsrs	r3, r3, #2
 8002042:	3302      	adds	r3, #2
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800204a:	4b3b      	ldr	r3, [pc, #236]	; (8002138 <HAL_GPIO_Init+0x334>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800206e:	4a32      	ldr	r2, [pc, #200]	; (8002138 <HAL_GPIO_Init+0x334>)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002074:	4b30      	ldr	r3, [pc, #192]	; (8002138 <HAL_GPIO_Init+0x334>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002098:	4a27      	ldr	r2, [pc, #156]	; (8002138 <HAL_GPIO_Init+0x334>)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800209e:	4b26      	ldr	r3, [pc, #152]	; (8002138 <HAL_GPIO_Init+0x334>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020c2:	4a1d      	ldr	r2, [pc, #116]	; (8002138 <HAL_GPIO_Init+0x334>)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020c8:	4b1b      	ldr	r3, [pc, #108]	; (8002138 <HAL_GPIO_Init+0x334>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020ec:	4a12      	ldr	r2, [pc, #72]	; (8002138 <HAL_GPIO_Init+0x334>)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3301      	adds	r3, #1
 80020f6:	61fb      	str	r3, [r7, #28]
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	2b0f      	cmp	r3, #15
 80020fc:	f67f ae90 	bls.w	8001e20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	3724      	adds	r7, #36	; 0x24
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40023800 	.word	0x40023800
 8002114:	40013800 	.word	0x40013800
 8002118:	40020000 	.word	0x40020000
 800211c:	40020400 	.word	0x40020400
 8002120:	40020800 	.word	0x40020800
 8002124:	40020c00 	.word	0x40020c00
 8002128:	40021000 	.word	0x40021000
 800212c:	40021400 	.word	0x40021400
 8002130:	40021800 	.word	0x40021800
 8002134:	40021c00 	.word	0x40021c00
 8002138:	40013c00 	.word	0x40013c00

0800213c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	807b      	strh	r3, [r7, #2]
 8002148:	4613      	mov	r3, r2
 800214a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800214c:	787b      	ldrb	r3, [r7, #1]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002152:	887a      	ldrh	r2, [r7, #2]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002158:	e003      	b.n	8002162 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800215a:	887b      	ldrh	r3, [r7, #2]
 800215c:	041a      	lsls	r2, r3, #16
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	619a      	str	r2, [r3, #24]
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800216e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002170:	b08f      	sub	sp, #60	; 0x3c
 8002172:	af0a      	add	r7, sp, #40	; 0x28
 8002174:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e054      	b.n	800222a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d106      	bne.n	80021a0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f009 fc96 	bl	800bacc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2203      	movs	r2, #3
 80021a4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d102      	bne.n	80021ba <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f003 ff10 	bl	8005fe4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	603b      	str	r3, [r7, #0]
 80021ca:	687e      	ldr	r6, [r7, #4]
 80021cc:	466d      	mov	r5, sp
 80021ce:	f106 0410 	add.w	r4, r6, #16
 80021d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021de:	e885 0003 	stmia.w	r5, {r0, r1}
 80021e2:	1d33      	adds	r3, r6, #4
 80021e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021e6:	6838      	ldr	r0, [r7, #0]
 80021e8:	f003 fe8a 	bl	8005f00 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2101      	movs	r1, #1
 80021f2:	4618      	mov	r0, r3
 80021f4:	f003 ff07 	bl	8006006 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	603b      	str	r3, [r7, #0]
 80021fe:	687e      	ldr	r6, [r7, #4]
 8002200:	466d      	mov	r5, sp
 8002202:	f106 0410 	add.w	r4, r6, #16
 8002206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002208:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800220a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800220c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800220e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002212:	e885 0003 	stmia.w	r5, {r0, r1}
 8002216:	1d33      	adds	r3, r6, #4
 8002218:	cb0e      	ldmia	r3, {r1, r2, r3}
 800221a:	6838      	ldr	r0, [r7, #0]
 800221c:	f004 f890 	bl	8006340 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002232 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002232:	b590      	push	{r4, r7, lr}
 8002234:	b089      	sub	sp, #36	; 0x24
 8002236:	af04      	add	r7, sp, #16
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	4608      	mov	r0, r1
 800223c:	4611      	mov	r1, r2
 800223e:	461a      	mov	r2, r3
 8002240:	4603      	mov	r3, r0
 8002242:	70fb      	strb	r3, [r7, #3]
 8002244:	460b      	mov	r3, r1
 8002246:	70bb      	strb	r3, [r7, #2]
 8002248:	4613      	mov	r3, r2
 800224a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <HAL_HCD_HC_Init+0x28>
 8002256:	2302      	movs	r3, #2
 8002258:	e076      	b.n	8002348 <HAL_HCD_HC_Init+0x116>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	212c      	movs	r1, #44	; 0x2c
 8002268:	fb01 f303 	mul.w	r3, r1, r3
 800226c:	4413      	add	r3, r2
 800226e:	333d      	adds	r3, #61	; 0x3d
 8002270:	2200      	movs	r2, #0
 8002272:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	212c      	movs	r1, #44	; 0x2c
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4413      	add	r3, r2
 8002280:	3338      	adds	r3, #56	; 0x38
 8002282:	787a      	ldrb	r2, [r7, #1]
 8002284:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002286:	78fb      	ldrb	r3, [r7, #3]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	212c      	movs	r1, #44	; 0x2c
 800228c:	fb01 f303 	mul.w	r3, r1, r3
 8002290:	4413      	add	r3, r2
 8002292:	3340      	adds	r3, #64	; 0x40
 8002294:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002296:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	212c      	movs	r1, #44	; 0x2c
 800229e:	fb01 f303 	mul.w	r3, r1, r3
 80022a2:	4413      	add	r3, r2
 80022a4:	3339      	adds	r3, #57	; 0x39
 80022a6:	78fa      	ldrb	r2, [r7, #3]
 80022a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	212c      	movs	r1, #44	; 0x2c
 80022b0:	fb01 f303 	mul.w	r3, r1, r3
 80022b4:	4413      	add	r3, r2
 80022b6:	333f      	adds	r3, #63	; 0x3f
 80022b8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80022bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80022be:	78fb      	ldrb	r3, [r7, #3]
 80022c0:	78ba      	ldrb	r2, [r7, #2]
 80022c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022c6:	b2d0      	uxtb	r0, r2
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	212c      	movs	r1, #44	; 0x2c
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	4413      	add	r3, r2
 80022d2:	333a      	adds	r3, #58	; 0x3a
 80022d4:	4602      	mov	r2, r0
 80022d6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80022d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	da09      	bge.n	80022f4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80022e0:	78fb      	ldrb	r3, [r7, #3]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	212c      	movs	r1, #44	; 0x2c
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	333b      	adds	r3, #59	; 0x3b
 80022ee:	2201      	movs	r2, #1
 80022f0:	701a      	strb	r2, [r3, #0]
 80022f2:	e008      	b.n	8002306 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	212c      	movs	r1, #44	; 0x2c
 80022fa:	fb01 f303 	mul.w	r3, r1, r3
 80022fe:	4413      	add	r3, r2
 8002300:	333b      	adds	r3, #59	; 0x3b
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002306:	78fb      	ldrb	r3, [r7, #3]
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	212c      	movs	r1, #44	; 0x2c
 800230c:	fb01 f303 	mul.w	r3, r1, r3
 8002310:	4413      	add	r3, r2
 8002312:	333c      	adds	r3, #60	; 0x3c
 8002314:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002318:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	787c      	ldrb	r4, [r7, #1]
 8002320:	78ba      	ldrb	r2, [r7, #2]
 8002322:	78f9      	ldrb	r1, [r7, #3]
 8002324:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002326:	9302      	str	r3, [sp, #8]
 8002328:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800232c:	9301      	str	r3, [sp, #4]
 800232e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	4623      	mov	r3, r4
 8002336:	f004 f989 	bl	800664c <USB_HC_Init>
 800233a:	4603      	mov	r3, r0
 800233c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002346:	7bfb      	ldrb	r3, [r7, #15]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	bd90      	pop	{r4, r7, pc}

08002350 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_HCD_HC_Halt+0x1e>
 800236a:	2302      	movs	r3, #2
 800236c:	e00f      	b.n	800238e <HAL_HCD_HC_Halt+0x3e>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	78fa      	ldrb	r2, [r7, #3]
 800237c:	4611      	mov	r1, r2
 800237e:	4618      	mov	r0, r3
 8002380:	f004 fbd9 	bl	8006b36 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800238c:	7bfb      	ldrb	r3, [r7, #15]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	4608      	mov	r0, r1
 80023a2:	4611      	mov	r1, r2
 80023a4:	461a      	mov	r2, r3
 80023a6:	4603      	mov	r3, r0
 80023a8:	70fb      	strb	r3, [r7, #3]
 80023aa:	460b      	mov	r3, r1
 80023ac:	70bb      	strb	r3, [r7, #2]
 80023ae:	4613      	mov	r3, r2
 80023b0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	212c      	movs	r1, #44	; 0x2c
 80023b8:	fb01 f303 	mul.w	r3, r1, r3
 80023bc:	4413      	add	r3, r2
 80023be:	333b      	adds	r3, #59	; 0x3b
 80023c0:	78ba      	ldrb	r2, [r7, #2]
 80023c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	212c      	movs	r1, #44	; 0x2c
 80023ca:	fb01 f303 	mul.w	r3, r1, r3
 80023ce:	4413      	add	r3, r2
 80023d0:	333f      	adds	r3, #63	; 0x3f
 80023d2:	787a      	ldrb	r2, [r7, #1]
 80023d4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80023d6:	7c3b      	ldrb	r3, [r7, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d112      	bne.n	8002402 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80023dc:	78fb      	ldrb	r3, [r7, #3]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	212c      	movs	r1, #44	; 0x2c
 80023e2:	fb01 f303 	mul.w	r3, r1, r3
 80023e6:	4413      	add	r3, r2
 80023e8:	3342      	adds	r3, #66	; 0x42
 80023ea:	2203      	movs	r2, #3
 80023ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80023ee:	78fb      	ldrb	r3, [r7, #3]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	212c      	movs	r1, #44	; 0x2c
 80023f4:	fb01 f303 	mul.w	r3, r1, r3
 80023f8:	4413      	add	r3, r2
 80023fa:	333d      	adds	r3, #61	; 0x3d
 80023fc:	7f3a      	ldrb	r2, [r7, #28]
 80023fe:	701a      	strb	r2, [r3, #0]
 8002400:	e008      	b.n	8002414 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002402:	78fb      	ldrb	r3, [r7, #3]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	212c      	movs	r1, #44	; 0x2c
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	4413      	add	r3, r2
 800240e:	3342      	adds	r3, #66	; 0x42
 8002410:	2202      	movs	r2, #2
 8002412:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002414:	787b      	ldrb	r3, [r7, #1]
 8002416:	2b03      	cmp	r3, #3
 8002418:	f200 80c6 	bhi.w	80025a8 <HAL_HCD_HC_SubmitRequest+0x210>
 800241c:	a201      	add	r2, pc, #4	; (adr r2, 8002424 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800241e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002422:	bf00      	nop
 8002424:	08002435 	.word	0x08002435
 8002428:	08002595 	.word	0x08002595
 800242c:	08002499 	.word	0x08002499
 8002430:	08002517 	.word	0x08002517
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002434:	7c3b      	ldrb	r3, [r7, #16]
 8002436:	2b01      	cmp	r3, #1
 8002438:	f040 80b8 	bne.w	80025ac <HAL_HCD_HC_SubmitRequest+0x214>
 800243c:	78bb      	ldrb	r3, [r7, #2]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f040 80b4 	bne.w	80025ac <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002444:	8b3b      	ldrh	r3, [r7, #24]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d108      	bne.n	800245c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800244a:	78fb      	ldrb	r3, [r7, #3]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	212c      	movs	r1, #44	; 0x2c
 8002450:	fb01 f303 	mul.w	r3, r1, r3
 8002454:	4413      	add	r3, r2
 8002456:	3355      	adds	r3, #85	; 0x55
 8002458:	2201      	movs	r2, #1
 800245a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	212c      	movs	r1, #44	; 0x2c
 8002462:	fb01 f303 	mul.w	r3, r1, r3
 8002466:	4413      	add	r3, r2
 8002468:	3355      	adds	r3, #85	; 0x55
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d109      	bne.n	8002484 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	212c      	movs	r1, #44	; 0x2c
 8002476:	fb01 f303 	mul.w	r3, r1, r3
 800247a:	4413      	add	r3, r2
 800247c:	3342      	adds	r3, #66	; 0x42
 800247e:	2200      	movs	r2, #0
 8002480:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002482:	e093      	b.n	80025ac <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002484:	78fb      	ldrb	r3, [r7, #3]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	212c      	movs	r1, #44	; 0x2c
 800248a:	fb01 f303 	mul.w	r3, r1, r3
 800248e:	4413      	add	r3, r2
 8002490:	3342      	adds	r3, #66	; 0x42
 8002492:	2202      	movs	r2, #2
 8002494:	701a      	strb	r2, [r3, #0]
      break;
 8002496:	e089      	b.n	80025ac <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002498:	78bb      	ldrb	r3, [r7, #2]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d11d      	bne.n	80024da <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800249e:	78fb      	ldrb	r3, [r7, #3]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	212c      	movs	r1, #44	; 0x2c
 80024a4:	fb01 f303 	mul.w	r3, r1, r3
 80024a8:	4413      	add	r3, r2
 80024aa:	3355      	adds	r3, #85	; 0x55
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d109      	bne.n	80024c6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024b2:	78fb      	ldrb	r3, [r7, #3]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	212c      	movs	r1, #44	; 0x2c
 80024b8:	fb01 f303 	mul.w	r3, r1, r3
 80024bc:	4413      	add	r3, r2
 80024be:	3342      	adds	r3, #66	; 0x42
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80024c4:	e073      	b.n	80025ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024c6:	78fb      	ldrb	r3, [r7, #3]
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	212c      	movs	r1, #44	; 0x2c
 80024cc:	fb01 f303 	mul.w	r3, r1, r3
 80024d0:	4413      	add	r3, r2
 80024d2:	3342      	adds	r3, #66	; 0x42
 80024d4:	2202      	movs	r2, #2
 80024d6:	701a      	strb	r2, [r3, #0]
      break;
 80024d8:	e069      	b.n	80025ae <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	212c      	movs	r1, #44	; 0x2c
 80024e0:	fb01 f303 	mul.w	r3, r1, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	3354      	adds	r3, #84	; 0x54
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d109      	bne.n	8002502 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024ee:	78fb      	ldrb	r3, [r7, #3]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	212c      	movs	r1, #44	; 0x2c
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	4413      	add	r3, r2
 80024fa:	3342      	adds	r3, #66	; 0x42
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]
      break;
 8002500:	e055      	b.n	80025ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002502:	78fb      	ldrb	r3, [r7, #3]
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	212c      	movs	r1, #44	; 0x2c
 8002508:	fb01 f303 	mul.w	r3, r1, r3
 800250c:	4413      	add	r3, r2
 800250e:	3342      	adds	r3, #66	; 0x42
 8002510:	2202      	movs	r2, #2
 8002512:	701a      	strb	r2, [r3, #0]
      break;
 8002514:	e04b      	b.n	80025ae <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002516:	78bb      	ldrb	r3, [r7, #2]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d11d      	bne.n	8002558 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800251c:	78fb      	ldrb	r3, [r7, #3]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	212c      	movs	r1, #44	; 0x2c
 8002522:	fb01 f303 	mul.w	r3, r1, r3
 8002526:	4413      	add	r3, r2
 8002528:	3355      	adds	r3, #85	; 0x55
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d109      	bne.n	8002544 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	212c      	movs	r1, #44	; 0x2c
 8002536:	fb01 f303 	mul.w	r3, r1, r3
 800253a:	4413      	add	r3, r2
 800253c:	3342      	adds	r3, #66	; 0x42
 800253e:	2200      	movs	r2, #0
 8002540:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002542:	e034      	b.n	80025ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	212c      	movs	r1, #44	; 0x2c
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	4413      	add	r3, r2
 8002550:	3342      	adds	r3, #66	; 0x42
 8002552:	2202      	movs	r2, #2
 8002554:	701a      	strb	r2, [r3, #0]
      break;
 8002556:	e02a      	b.n	80025ae <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	212c      	movs	r1, #44	; 0x2c
 800255e:	fb01 f303 	mul.w	r3, r1, r3
 8002562:	4413      	add	r3, r2
 8002564:	3354      	adds	r3, #84	; 0x54
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d109      	bne.n	8002580 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	212c      	movs	r1, #44	; 0x2c
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	4413      	add	r3, r2
 8002578:	3342      	adds	r3, #66	; 0x42
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]
      break;
 800257e:	e016      	b.n	80025ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002580:	78fb      	ldrb	r3, [r7, #3]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	212c      	movs	r1, #44	; 0x2c
 8002586:	fb01 f303 	mul.w	r3, r1, r3
 800258a:	4413      	add	r3, r2
 800258c:	3342      	adds	r3, #66	; 0x42
 800258e:	2202      	movs	r2, #2
 8002590:	701a      	strb	r2, [r3, #0]
      break;
 8002592:	e00c      	b.n	80025ae <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002594:	78fb      	ldrb	r3, [r7, #3]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	212c      	movs	r1, #44	; 0x2c
 800259a:	fb01 f303 	mul.w	r3, r1, r3
 800259e:	4413      	add	r3, r2
 80025a0:	3342      	adds	r3, #66	; 0x42
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
      break;
 80025a6:	e002      	b.n	80025ae <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80025a8:	bf00      	nop
 80025aa:	e000      	b.n	80025ae <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80025ac:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80025ae:	78fb      	ldrb	r3, [r7, #3]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	212c      	movs	r1, #44	; 0x2c
 80025b4:	fb01 f303 	mul.w	r3, r1, r3
 80025b8:	4413      	add	r3, r2
 80025ba:	3344      	adds	r3, #68	; 0x44
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	8b3a      	ldrh	r2, [r7, #24]
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	202c      	movs	r0, #44	; 0x2c
 80025c8:	fb00 f303 	mul.w	r3, r0, r3
 80025cc:	440b      	add	r3, r1
 80025ce:	334c      	adds	r3, #76	; 0x4c
 80025d0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	212c      	movs	r1, #44	; 0x2c
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	4413      	add	r3, r2
 80025de:	3360      	adds	r3, #96	; 0x60
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80025e4:	78fb      	ldrb	r3, [r7, #3]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	212c      	movs	r1, #44	; 0x2c
 80025ea:	fb01 f303 	mul.w	r3, r1, r3
 80025ee:	4413      	add	r3, r2
 80025f0:	3350      	adds	r3, #80	; 0x50
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80025f6:	78fb      	ldrb	r3, [r7, #3]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	212c      	movs	r1, #44	; 0x2c
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	4413      	add	r3, r2
 8002602:	3339      	adds	r3, #57	; 0x39
 8002604:	78fa      	ldrb	r2, [r7, #3]
 8002606:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	212c      	movs	r1, #44	; 0x2c
 800260e:	fb01 f303 	mul.w	r3, r1, r3
 8002612:	4413      	add	r3, r2
 8002614:	3361      	adds	r3, #97	; 0x61
 8002616:	2200      	movs	r2, #0
 8002618:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	78fb      	ldrb	r3, [r7, #3]
 8002620:	222c      	movs	r2, #44	; 0x2c
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	3338      	adds	r3, #56	; 0x38
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	18d1      	adds	r1, r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	461a      	mov	r2, r3
 8002634:	f004 f92c 	bl	8006890 <USB_HC_StartXfer>
 8002638:	4603      	mov	r3, r0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop

08002644 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f003 fe2d 	bl	80062ba <USB_GetMode>
 8002660:	4603      	mov	r3, r0
 8002662:	2b01      	cmp	r3, #1
 8002664:	f040 80f6 	bne.w	8002854 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f003 fe11 	bl	8006294 <USB_ReadInterrupts>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 80ec 	beq.w	8002852 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f003 fe08 	bl	8006294 <USB_ReadInterrupts>
 8002684:	4603      	mov	r3, r0
 8002686:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800268a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800268e:	d104      	bne.n	800269a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002698:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f003 fdf8 	bl	8006294 <USB_ReadInterrupts>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026ae:	d104      	bne.n	80026ba <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80026b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f003 fde8 	bl	8006294 <USB_ReadInterrupts>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026ce:	d104      	bne.n	80026da <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80026d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f003 fdd8 	bl	8006294 <USB_ReadInterrupts>
 80026e4:	4603      	mov	r3, r0
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d103      	bne.n	80026f6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2202      	movs	r2, #2
 80026f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f003 fdca 	bl	8006294 <USB_ReadInterrupts>
 8002700:	4603      	mov	r3, r0
 8002702:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002706:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800270a:	d11c      	bne.n	8002746 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002714:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10f      	bne.n	8002746 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002726:	2110      	movs	r1, #16
 8002728:	6938      	ldr	r0, [r7, #16]
 800272a:	f003 fcb9 	bl	80060a0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800272e:	6938      	ldr	r0, [r7, #16]
 8002730:	f003 fcea 	bl	8006108 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2101      	movs	r1, #1
 800273a:	4618      	mov	r0, r3
 800273c:	f003 fec0 	bl	80064c0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f009 fa33 	bl	800bbac <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f003 fda2 	bl	8006294 <USB_ReadInterrupts>
 8002750:	4603      	mov	r3, r0
 8002752:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002756:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800275a:	d102      	bne.n	8002762 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f001 f89e 	bl	800389e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f003 fd94 	bl	8006294 <USB_ReadInterrupts>
 800276c:	4603      	mov	r3, r0
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b08      	cmp	r3, #8
 8002774:	d106      	bne.n	8002784 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f009 f9fc 	bl	800bb74 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2208      	movs	r2, #8
 8002782:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f003 fd83 	bl	8006294 <USB_ReadInterrupts>
 800278e:	4603      	mov	r3, r0
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	2b10      	cmp	r3, #16
 8002796:	d101      	bne.n	800279c <HAL_HCD_IRQHandler+0x158>
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <HAL_HCD_IRQHandler+0x15a>
 800279c:	2300      	movs	r3, #0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d012      	beq.n	80027c8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	699a      	ldr	r2, [r3, #24]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 0210 	bic.w	r2, r2, #16
 80027b0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 ffa1 	bl	80036fa <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	699a      	ldr	r2, [r3, #24]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0210 	orr.w	r2, r2, #16
 80027c6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f003 fd61 	bl	8006294 <USB_ReadInterrupts>
 80027d2:	4603      	mov	r3, r0
 80027d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027dc:	d13a      	bne.n	8002854 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f004 f996 	bl	8006b14 <USB_HC_ReadInterrupt>
 80027e8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	e025      	b.n	800283c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	fa22 f303 	lsr.w	r3, r2, r3
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d018      	beq.n	8002836 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	015a      	lsls	r2, r3, #5
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4413      	add	r3, r2
 800280c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800281a:	d106      	bne.n	800282a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	b2db      	uxtb	r3, r3
 8002820:	4619      	mov	r1, r3
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f8ab 	bl	800297e <HCD_HC_IN_IRQHandler>
 8002828:	e005      	b.n	8002836 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	4619      	mov	r1, r3
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fbf9 	bl	8003028 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	3301      	adds	r3, #1
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	429a      	cmp	r2, r3
 8002844:	d3d4      	bcc.n	80027f0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800284e:	615a      	str	r2, [r3, #20]
 8002850:	e000      	b.n	8002854 <HAL_HCD_IRQHandler+0x210>
      return;
 8002852:	bf00      	nop
    }
  }
}
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_HCD_Start+0x16>
 800286c:	2302      	movs	r3, #2
 800286e:	e013      	b.n	8002898 <HAL_HCD_Start+0x3e>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2101      	movs	r1, #1
 800287e:	4618      	mov	r0, r3
 8002880:	f003 fe82 	bl	8006588 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f003 fb9a 	bl	8005fc2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d101      	bne.n	80028b6 <HAL_HCD_Stop+0x16>
 80028b2:	2302      	movs	r3, #2
 80028b4:	e00d      	b.n	80028d2 <HAL_HCD_Stop+0x32>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f004 fa70 	bl	8006da8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f003 fe24 	bl	8006534 <USB_ResetPort>
 80028ec:	4603      	mov	r3, r0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
 80028fe:	460b      	mov	r3, r1
 8002900:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002902:	78fb      	ldrb	r3, [r7, #3]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	212c      	movs	r1, #44	; 0x2c
 8002908:	fb01 f303 	mul.w	r3, r1, r3
 800290c:	4413      	add	r3, r2
 800290e:	3360      	adds	r3, #96	; 0x60
 8002910:	781b      	ldrb	r3, [r3, #0]
}
 8002912:	4618      	mov	r0, r3
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	460b      	mov	r3, r1
 8002928:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800292a:	78fb      	ldrb	r3, [r7, #3]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	212c      	movs	r1, #44	; 0x2c
 8002930:	fb01 f303 	mul.w	r3, r1, r3
 8002934:	4413      	add	r3, r2
 8002936:	3350      	adds	r3, #80	; 0x50
 8002938:	681b      	ldr	r3, [r3, #0]
}
 800293a:	4618      	mov	r0, r3
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f003 fe68 	bl	8006628 <USB_GetCurrentFrame>
 8002958:	4603      	mov	r3, r0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f003 fe43 	bl	80065fa <USB_GetHostSpeed>
 8002974:	4603      	mov	r3, r0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b086      	sub	sp, #24
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	460b      	mov	r3, r1
 8002988:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002994:	78fb      	ldrb	r3, [r7, #3]
 8002996:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 0304 	and.w	r3, r3, #4
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d11a      	bne.n	80029e4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	015a      	lsls	r2, r3, #5
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ba:	461a      	mov	r2, r3
 80029bc:	2304      	movs	r3, #4
 80029be:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	212c      	movs	r1, #44	; 0x2c
 80029c6:	fb01 f303 	mul.w	r3, r1, r3
 80029ca:	4413      	add	r3, r2
 80029cc:	3361      	adds	r3, #97	; 0x61
 80029ce:	2206      	movs	r2, #6
 80029d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	4611      	mov	r1, r2
 80029dc:	4618      	mov	r0, r3
 80029de:	f004 f8aa 	bl	8006b36 <USB_HC_Halt>
 80029e2:	e0af      	b.n	8002b44 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029fa:	d11b      	bne.n	8002a34 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a08:	461a      	mov	r2, r3
 8002a0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a0e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	212c      	movs	r1, #44	; 0x2c
 8002a16:	fb01 f303 	mul.w	r3, r1, r3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3361      	adds	r3, #97	; 0x61
 8002a1e:	2207      	movs	r2, #7
 8002a20:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f004 f882 	bl	8006b36 <USB_HC_Halt>
 8002a32:	e087      	b.n	8002b44 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0320 	and.w	r3, r3, #32
 8002a46:	2b20      	cmp	r3, #32
 8002a48:	d109      	bne.n	8002a5e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	015a      	lsls	r2, r3, #5
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4413      	add	r3, r2
 8002a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a56:	461a      	mov	r2, r3
 8002a58:	2320      	movs	r3, #32
 8002a5a:	6093      	str	r3, [r2, #8]
 8002a5c:	e072      	b.n	8002b44 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	015a      	lsls	r2, r3, #5
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	4413      	add	r3, r2
 8002a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d11a      	bne.n	8002aaa <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a80:	461a      	mov	r2, r3
 8002a82:	2308      	movs	r3, #8
 8002a84:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	212c      	movs	r1, #44	; 0x2c
 8002a8c:	fb01 f303 	mul.w	r3, r1, r3
 8002a90:	4413      	add	r3, r2
 8002a92:	3361      	adds	r3, #97	; 0x61
 8002a94:	2205      	movs	r2, #5
 8002a96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	4611      	mov	r1, r2
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f004 f847 	bl	8006b36 <USB_HC_Halt>
 8002aa8:	e04c      	b.n	8002b44 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	015a      	lsls	r2, r3, #5
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac0:	d11b      	bne.n	8002afa <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	015a      	lsls	r2, r3, #5
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	4413      	add	r3, r2
 8002aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ace:	461a      	mov	r2, r3
 8002ad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ad4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	212c      	movs	r1, #44	; 0x2c
 8002adc:	fb01 f303 	mul.w	r3, r1, r3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3361      	adds	r3, #97	; 0x61
 8002ae4:	2208      	movs	r2, #8
 8002ae6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	4611      	mov	r1, r2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f004 f81f 	bl	8006b36 <USB_HC_Halt>
 8002af8:	e024      	b.n	8002b44 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	015a      	lsls	r2, r3, #5
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4413      	add	r3, r2
 8002b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0c:	2b80      	cmp	r3, #128	; 0x80
 8002b0e:	d119      	bne.n	8002b44 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2380      	movs	r3, #128	; 0x80
 8002b20:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	212c      	movs	r1, #44	; 0x2c
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3361      	adds	r3, #97	; 0x61
 8002b30:	2206      	movs	r2, #6
 8002b32:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	4611      	mov	r1, r2
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f003 fff9 	bl	8006b36 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b5a:	d112      	bne.n	8002b82 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	4611      	mov	r1, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f003 ffe5 	bl	8006b36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4413      	add	r3, r2
 8002b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b78:	461a      	mov	r2, r3
 8002b7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b7e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002b80:	e24e      	b.n	8003020 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	f040 80df 	bne.w	8002d58 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d019      	beq.n	8002bd6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	212c      	movs	r1, #44	; 0x2c
 8002ba8:	fb01 f303 	mul.w	r3, r1, r3
 8002bac:	4413      	add	r3, r2
 8002bae:	3348      	adds	r3, #72	; 0x48
 8002bb0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	0159      	lsls	r1, r3, #5
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	440b      	add	r3, r1
 8002bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002bc4:	1ad2      	subs	r2, r2, r3
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	202c      	movs	r0, #44	; 0x2c
 8002bcc:	fb00 f303 	mul.w	r3, r0, r3
 8002bd0:	440b      	add	r3, r1
 8002bd2:	3350      	adds	r3, #80	; 0x50
 8002bd4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	212c      	movs	r1, #44	; 0x2c
 8002bdc:	fb01 f303 	mul.w	r3, r1, r3
 8002be0:	4413      	add	r3, r2
 8002be2:	3361      	adds	r3, #97	; 0x61
 8002be4:	2201      	movs	r2, #1
 8002be6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	212c      	movs	r1, #44	; 0x2c
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	335c      	adds	r3, #92	; 0x5c
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	015a      	lsls	r2, r3, #5
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c06:	461a      	mov	r2, r3
 8002c08:	2301      	movs	r3, #1
 8002c0a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	212c      	movs	r1, #44	; 0x2c
 8002c12:	fb01 f303 	mul.w	r3, r1, r3
 8002c16:	4413      	add	r3, r2
 8002c18:	333f      	adds	r3, #63	; 0x3f
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d009      	beq.n	8002c34 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	212c      	movs	r1, #44	; 0x2c
 8002c26:	fb01 f303 	mul.w	r3, r1, r3
 8002c2a:	4413      	add	r3, r2
 8002c2c:	333f      	adds	r3, #63	; 0x3f
 8002c2e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d111      	bne.n	8002c58 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f003 ff79 	bl	8006b36 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c50:	461a      	mov	r2, r3
 8002c52:	2310      	movs	r3, #16
 8002c54:	6093      	str	r3, [r2, #8]
 8002c56:	e03a      	b.n	8002cce <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	212c      	movs	r1, #44	; 0x2c
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	4413      	add	r3, r2
 8002c64:	333f      	adds	r3, #63	; 0x3f
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b03      	cmp	r3, #3
 8002c6a:	d009      	beq.n	8002c80 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	212c      	movs	r1, #44	; 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	333f      	adds	r3, #63	; 0x3f
 8002c7a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d126      	bne.n	8002cce <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	015a      	lsls	r2, r3, #5
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	0151      	lsls	r1, r2, #5
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	440a      	add	r2, r1
 8002c96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c9e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	212c      	movs	r1, #44	; 0x2c
 8002ca6:	fb01 f303 	mul.w	r3, r1, r3
 8002caa:	4413      	add	r3, r2
 8002cac:	3360      	adds	r3, #96	; 0x60
 8002cae:	2201      	movs	r2, #1
 8002cb0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	b2d9      	uxtb	r1, r3
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	202c      	movs	r0, #44	; 0x2c
 8002cbc:	fb00 f303 	mul.w	r3, r0, r3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3360      	adds	r3, #96	; 0x60
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f008 ff7d 	bl	800bbc8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d12b      	bne.n	8002d2e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	212c      	movs	r1, #44	; 0x2c
 8002cdc:	fb01 f303 	mul.w	r3, r1, r3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3348      	adds	r3, #72	; 0x48
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	202c      	movs	r0, #44	; 0x2c
 8002cec:	fb00 f202 	mul.w	r2, r0, r2
 8002cf0:	440a      	add	r2, r1
 8002cf2:	3240      	adds	r2, #64	; 0x40
 8002cf4:	8812      	ldrh	r2, [r2, #0]
 8002cf6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 818e 	beq.w	8003020 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	3354      	adds	r3, #84	; 0x54
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	f083 0301 	eor.w	r3, r3, #1
 8002d18:	b2d8      	uxtb	r0, r3
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	212c      	movs	r1, #44	; 0x2c
 8002d20:	fb01 f303 	mul.w	r3, r1, r3
 8002d24:	4413      	add	r3, r2
 8002d26:	3354      	adds	r3, #84	; 0x54
 8002d28:	4602      	mov	r2, r0
 8002d2a:	701a      	strb	r2, [r3, #0]
}
 8002d2c:	e178      	b.n	8003020 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	212c      	movs	r1, #44	; 0x2c
 8002d34:	fb01 f303 	mul.w	r3, r1, r3
 8002d38:	4413      	add	r3, r2
 8002d3a:	3354      	adds	r3, #84	; 0x54
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	f083 0301 	eor.w	r3, r3, #1
 8002d42:	b2d8      	uxtb	r0, r3
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	212c      	movs	r1, #44	; 0x2c
 8002d4a:	fb01 f303 	mul.w	r3, r1, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	3354      	adds	r3, #84	; 0x54
 8002d52:	4602      	mov	r2, r0
 8002d54:	701a      	strb	r2, [r3, #0]
}
 8002d56:	e163      	b.n	8003020 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	015a      	lsls	r2, r3, #5
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	4413      	add	r3, r2
 8002d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	f040 80f6 	bne.w	8002f5c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	212c      	movs	r1, #44	; 0x2c
 8002d76:	fb01 f303 	mul.w	r3, r1, r3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3361      	adds	r3, #97	; 0x61
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d109      	bne.n	8002d98 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	212c      	movs	r1, #44	; 0x2c
 8002d8a:	fb01 f303 	mul.w	r3, r1, r3
 8002d8e:	4413      	add	r3, r2
 8002d90:	3360      	adds	r3, #96	; 0x60
 8002d92:	2201      	movs	r2, #1
 8002d94:	701a      	strb	r2, [r3, #0]
 8002d96:	e0c9      	b.n	8002f2c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	212c      	movs	r1, #44	; 0x2c
 8002d9e:	fb01 f303 	mul.w	r3, r1, r3
 8002da2:	4413      	add	r3, r2
 8002da4:	3361      	adds	r3, #97	; 0x61
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b05      	cmp	r3, #5
 8002daa:	d109      	bne.n	8002dc0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	212c      	movs	r1, #44	; 0x2c
 8002db2:	fb01 f303 	mul.w	r3, r1, r3
 8002db6:	4413      	add	r3, r2
 8002db8:	3360      	adds	r3, #96	; 0x60
 8002dba:	2205      	movs	r2, #5
 8002dbc:	701a      	strb	r2, [r3, #0]
 8002dbe:	e0b5      	b.n	8002f2c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	212c      	movs	r1, #44	; 0x2c
 8002dc6:	fb01 f303 	mul.w	r3, r1, r3
 8002dca:	4413      	add	r3, r2
 8002dcc:	3361      	adds	r3, #97	; 0x61
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b06      	cmp	r3, #6
 8002dd2:	d009      	beq.n	8002de8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	212c      	movs	r1, #44	; 0x2c
 8002dda:	fb01 f303 	mul.w	r3, r1, r3
 8002dde:	4413      	add	r3, r2
 8002de0:	3361      	adds	r3, #97	; 0x61
 8002de2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d150      	bne.n	8002e8a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	212c      	movs	r1, #44	; 0x2c
 8002dee:	fb01 f303 	mul.w	r3, r1, r3
 8002df2:	4413      	add	r3, r2
 8002df4:	335c      	adds	r3, #92	; 0x5c
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	1c5a      	adds	r2, r3, #1
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	202c      	movs	r0, #44	; 0x2c
 8002e00:	fb00 f303 	mul.w	r3, r0, r3
 8002e04:	440b      	add	r3, r1
 8002e06:	335c      	adds	r3, #92	; 0x5c
 8002e08:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	212c      	movs	r1, #44	; 0x2c
 8002e10:	fb01 f303 	mul.w	r3, r1, r3
 8002e14:	4413      	add	r3, r2
 8002e16:	335c      	adds	r3, #92	; 0x5c
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d912      	bls.n	8002e44 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	212c      	movs	r1, #44	; 0x2c
 8002e24:	fb01 f303 	mul.w	r3, r1, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	335c      	adds	r3, #92	; 0x5c
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	212c      	movs	r1, #44	; 0x2c
 8002e36:	fb01 f303 	mul.w	r3, r1, r3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3360      	adds	r3, #96	; 0x60
 8002e3e:	2204      	movs	r2, #4
 8002e40:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e42:	e073      	b.n	8002f2c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	212c      	movs	r1, #44	; 0x2c
 8002e4a:	fb01 f303 	mul.w	r3, r1, r3
 8002e4e:	4413      	add	r3, r2
 8002e50:	3360      	adds	r3, #96	; 0x60
 8002e52:	2202      	movs	r2, #2
 8002e54:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e6c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e74:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e82:	461a      	mov	r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e88:	e050      	b.n	8002f2c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	212c      	movs	r1, #44	; 0x2c
 8002e90:	fb01 f303 	mul.w	r3, r1, r3
 8002e94:	4413      	add	r3, r2
 8002e96:	3361      	adds	r3, #97	; 0x61
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d122      	bne.n	8002ee4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	212c      	movs	r1, #44	; 0x2c
 8002ea4:	fb01 f303 	mul.w	r3, r1, r3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3360      	adds	r3, #96	; 0x60
 8002eac:	2202      	movs	r2, #2
 8002eae:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	015a      	lsls	r2, r3, #5
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ec6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ece:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	015a      	lsls	r2, r3, #5
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002edc:	461a      	mov	r2, r3
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	e023      	b.n	8002f2c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	212c      	movs	r1, #44	; 0x2c
 8002eea:	fb01 f303 	mul.w	r3, r1, r3
 8002eee:	4413      	add	r3, r2
 8002ef0:	3361      	adds	r3, #97	; 0x61
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b07      	cmp	r3, #7
 8002ef6:	d119      	bne.n	8002f2c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	212c      	movs	r1, #44	; 0x2c
 8002efe:	fb01 f303 	mul.w	r3, r1, r3
 8002f02:	4413      	add	r3, r2
 8002f04:	335c      	adds	r3, #92	; 0x5c
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	1c5a      	adds	r2, r3, #1
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	202c      	movs	r0, #44	; 0x2c
 8002f10:	fb00 f303 	mul.w	r3, r0, r3
 8002f14:	440b      	add	r3, r1
 8002f16:	335c      	adds	r3, #92	; 0x5c
 8002f18:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	212c      	movs	r1, #44	; 0x2c
 8002f20:	fb01 f303 	mul.w	r3, r1, r3
 8002f24:	4413      	add	r3, r2
 8002f26:	3360      	adds	r3, #96	; 0x60
 8002f28:	2204      	movs	r2, #4
 8002f2a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	015a      	lsls	r2, r3, #5
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f38:	461a      	mov	r2, r3
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	b2d9      	uxtb	r1, r3
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	202c      	movs	r0, #44	; 0x2c
 8002f48:	fb00 f303 	mul.w	r3, r0, r3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	3360      	adds	r3, #96	; 0x60
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	461a      	mov	r2, r3
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f008 fe37 	bl	800bbc8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f5a:	e061      	b.n	8003020 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	015a      	lsls	r2, r3, #5
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	4413      	add	r3, r2
 8002f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b10      	cmp	r3, #16
 8002f70:	d156      	bne.n	8003020 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	212c      	movs	r1, #44	; 0x2c
 8002f78:	fb01 f303 	mul.w	r3, r1, r3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	333f      	adds	r3, #63	; 0x3f
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	d111      	bne.n	8002faa <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	212c      	movs	r1, #44	; 0x2c
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	335c      	adds	r3, #92	; 0x5c
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f003 fdc7 	bl	8006b36 <USB_HC_Halt>
 8002fa8:	e031      	b.n	800300e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	212c      	movs	r1, #44	; 0x2c
 8002fb0:	fb01 f303 	mul.w	r3, r1, r3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	333f      	adds	r3, #63	; 0x3f
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d009      	beq.n	8002fd2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	212c      	movs	r1, #44	; 0x2c
 8002fc4:	fb01 f303 	mul.w	r3, r1, r3
 8002fc8:	4413      	add	r3, r2
 8002fca:	333f      	adds	r3, #63	; 0x3f
 8002fcc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d11d      	bne.n	800300e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	212c      	movs	r1, #44	; 0x2c
 8002fd8:	fb01 f303 	mul.w	r3, r1, r3
 8002fdc:	4413      	add	r3, r2
 8002fde:	335c      	adds	r3, #92	; 0x5c
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d110      	bne.n	800300e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	212c      	movs	r1, #44	; 0x2c
 8002ff2:	fb01 f303 	mul.w	r3, r1, r3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3361      	adds	r3, #97	; 0x61
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	4611      	mov	r1, r2
 8003008:	4618      	mov	r0, r3
 800300a:	f003 fd94 	bl	8006b36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	015a      	lsls	r2, r3, #5
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4413      	add	r3, r2
 8003016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301a:	461a      	mov	r2, r3
 800301c:	2310      	movs	r3, #16
 800301e:	6093      	str	r3, [r2, #8]
}
 8003020:	bf00      	nop
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	4413      	add	r3, r2
 800304a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b04      	cmp	r3, #4
 8003056:	d11a      	bne.n	800308e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	015a      	lsls	r2, r3, #5
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	4413      	add	r3, r2
 8003060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003064:	461a      	mov	r2, r3
 8003066:	2304      	movs	r3, #4
 8003068:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	212c      	movs	r1, #44	; 0x2c
 8003070:	fb01 f303 	mul.w	r3, r1, r3
 8003074:	4413      	add	r3, r2
 8003076:	3361      	adds	r3, #97	; 0x61
 8003078:	2206      	movs	r2, #6
 800307a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	f003 fd55 	bl	8006b36 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800308c:	e331      	b.n	80036f2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	4413      	add	r3, r2
 8003096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 0320 	and.w	r3, r3, #32
 80030a0:	2b20      	cmp	r3, #32
 80030a2:	d12e      	bne.n	8003102 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	015a      	lsls	r2, r3, #5
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	4413      	add	r3, r2
 80030ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b0:	461a      	mov	r2, r3
 80030b2:	2320      	movs	r3, #32
 80030b4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	212c      	movs	r1, #44	; 0x2c
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	4413      	add	r3, r2
 80030c2:	333d      	adds	r3, #61	; 0x3d
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	f040 8313 	bne.w	80036f2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	212c      	movs	r1, #44	; 0x2c
 80030d2:	fb01 f303 	mul.w	r3, r1, r3
 80030d6:	4413      	add	r3, r2
 80030d8:	333d      	adds	r3, #61	; 0x3d
 80030da:	2200      	movs	r2, #0
 80030dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	212c      	movs	r1, #44	; 0x2c
 80030e4:	fb01 f303 	mul.w	r3, r1, r3
 80030e8:	4413      	add	r3, r2
 80030ea:	3360      	adds	r3, #96	; 0x60
 80030ec:	2202      	movs	r2, #2
 80030ee:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	4611      	mov	r1, r2
 80030fa:	4618      	mov	r0, r3
 80030fc:	f003 fd1b 	bl	8006b36 <USB_HC_Halt>
}
 8003100:	e2f7      	b.n	80036f2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	4413      	add	r3, r2
 800310a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003118:	d112      	bne.n	8003140 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	015a      	lsls	r2, r3, #5
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	4413      	add	r3, r2
 8003122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003126:	461a      	mov	r2, r3
 8003128:	f44f 7300 	mov.w	r3, #512	; 0x200
 800312c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	4611      	mov	r1, r2
 8003138:	4618      	mov	r0, r3
 800313a:	f003 fcfc 	bl	8006b36 <USB_HC_Halt>
}
 800313e:	e2d8      	b.n	80036f2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	4413      	add	r3, r2
 8003148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b01      	cmp	r3, #1
 8003154:	d140      	bne.n	80031d8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	212c      	movs	r1, #44	; 0x2c
 800315c:	fb01 f303 	mul.w	r3, r1, r3
 8003160:	4413      	add	r3, r2
 8003162:	335c      	adds	r3, #92	; 0x5c
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	015a      	lsls	r2, r3, #5
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	4413      	add	r3, r2
 8003170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317a:	2b40      	cmp	r3, #64	; 0x40
 800317c:	d111      	bne.n	80031a2 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	212c      	movs	r1, #44	; 0x2c
 8003184:	fb01 f303 	mul.w	r3, r1, r3
 8003188:	4413      	add	r3, r2
 800318a:	333d      	adds	r3, #61	; 0x3d
 800318c:	2201      	movs	r2, #1
 800318e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	4413      	add	r3, r2
 8003198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800319c:	461a      	mov	r2, r3
 800319e:	2340      	movs	r3, #64	; 0x40
 80031a0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ae:	461a      	mov	r2, r3
 80031b0:	2301      	movs	r3, #1
 80031b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	212c      	movs	r1, #44	; 0x2c
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	4413      	add	r3, r2
 80031c0:	3361      	adds	r3, #97	; 0x61
 80031c2:	2201      	movs	r2, #1
 80031c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f003 fcb0 	bl	8006b36 <USB_HC_Halt>
}
 80031d6:	e28c      	b.n	80036f2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	015a      	lsls	r2, r3, #5
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	4413      	add	r3, r2
 80031e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ea:	2b40      	cmp	r3, #64	; 0x40
 80031ec:	d12c      	bne.n	8003248 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	212c      	movs	r1, #44	; 0x2c
 80031f4:	fb01 f303 	mul.w	r3, r1, r3
 80031f8:	4413      	add	r3, r2
 80031fa:	3361      	adds	r3, #97	; 0x61
 80031fc:	2204      	movs	r2, #4
 80031fe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	212c      	movs	r1, #44	; 0x2c
 8003206:	fb01 f303 	mul.w	r3, r1, r3
 800320a:	4413      	add	r3, r2
 800320c:	333d      	adds	r3, #61	; 0x3d
 800320e:	2201      	movs	r2, #1
 8003210:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	212c      	movs	r1, #44	; 0x2c
 8003218:	fb01 f303 	mul.w	r3, r1, r3
 800321c:	4413      	add	r3, r2
 800321e:	335c      	adds	r3, #92	; 0x5c
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	4611      	mov	r1, r2
 800322e:	4618      	mov	r0, r3
 8003230:	f003 fc81 	bl	8006b36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	015a      	lsls	r2, r3, #5
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	4413      	add	r3, r2
 800323c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003240:	461a      	mov	r2, r3
 8003242:	2340      	movs	r3, #64	; 0x40
 8003244:	6093      	str	r3, [r2, #8]
}
 8003246:	e254      	b.n	80036f2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	4413      	add	r3, r2
 8003250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b08      	cmp	r3, #8
 800325c:	d11a      	bne.n	8003294 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	015a      	lsls	r2, r3, #5
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	4413      	add	r3, r2
 8003266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326a:	461a      	mov	r2, r3
 800326c:	2308      	movs	r3, #8
 800326e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	212c      	movs	r1, #44	; 0x2c
 8003276:	fb01 f303 	mul.w	r3, r1, r3
 800327a:	4413      	add	r3, r2
 800327c:	3361      	adds	r3, #97	; 0x61
 800327e:	2205      	movs	r2, #5
 8003280:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	4611      	mov	r1, r2
 800328c:	4618      	mov	r0, r3
 800328e:	f003 fc52 	bl	8006b36 <USB_HC_Halt>
}
 8003292:	e22e      	b.n	80036f2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	4413      	add	r3, r2
 800329c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 0310 	and.w	r3, r3, #16
 80032a6:	2b10      	cmp	r3, #16
 80032a8:	d140      	bne.n	800332c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	212c      	movs	r1, #44	; 0x2c
 80032b0:	fb01 f303 	mul.w	r3, r1, r3
 80032b4:	4413      	add	r3, r2
 80032b6:	335c      	adds	r3, #92	; 0x5c
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	212c      	movs	r1, #44	; 0x2c
 80032c2:	fb01 f303 	mul.w	r3, r1, r3
 80032c6:	4413      	add	r3, r2
 80032c8:	3361      	adds	r3, #97	; 0x61
 80032ca:	2203      	movs	r2, #3
 80032cc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	212c      	movs	r1, #44	; 0x2c
 80032d4:	fb01 f303 	mul.w	r3, r1, r3
 80032d8:	4413      	add	r3, r2
 80032da:	333d      	adds	r3, #61	; 0x3d
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d112      	bne.n	8003308 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	212c      	movs	r1, #44	; 0x2c
 80032e8:	fb01 f303 	mul.w	r3, r1, r3
 80032ec:	4413      	add	r3, r2
 80032ee:	333c      	adds	r3, #60	; 0x3c
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d108      	bne.n	8003308 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	212c      	movs	r1, #44	; 0x2c
 80032fc:	fb01 f303 	mul.w	r3, r1, r3
 8003300:	4413      	add	r3, r2
 8003302:	333d      	adds	r3, #61	; 0x3d
 8003304:	2201      	movs	r2, #1
 8003306:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	4611      	mov	r1, r2
 8003312:	4618      	mov	r0, r3
 8003314:	f003 fc0f 	bl	8006b36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	4413      	add	r3, r2
 8003320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003324:	461a      	mov	r2, r3
 8003326:	2310      	movs	r3, #16
 8003328:	6093      	str	r3, [r2, #8]
}
 800332a:	e1e2      	b.n	80036f2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	4413      	add	r3, r2
 8003334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333e:	2b80      	cmp	r3, #128	; 0x80
 8003340:	d164      	bne.n	800340c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d111      	bne.n	800336e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	212c      	movs	r1, #44	; 0x2c
 8003350:	fb01 f303 	mul.w	r3, r1, r3
 8003354:	4413      	add	r3, r2
 8003356:	3361      	adds	r3, #97	; 0x61
 8003358:	2206      	movs	r2, #6
 800335a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	4611      	mov	r1, r2
 8003366:	4618      	mov	r0, r3
 8003368:	f003 fbe5 	bl	8006b36 <USB_HC_Halt>
 800336c:	e044      	b.n	80033f8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	212c      	movs	r1, #44	; 0x2c
 8003374:	fb01 f303 	mul.w	r3, r1, r3
 8003378:	4413      	add	r3, r2
 800337a:	335c      	adds	r3, #92	; 0x5c
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	1c5a      	adds	r2, r3, #1
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	202c      	movs	r0, #44	; 0x2c
 8003386:	fb00 f303 	mul.w	r3, r0, r3
 800338a:	440b      	add	r3, r1
 800338c:	335c      	adds	r3, #92	; 0x5c
 800338e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	212c      	movs	r1, #44	; 0x2c
 8003396:	fb01 f303 	mul.w	r3, r1, r3
 800339a:	4413      	add	r3, r2
 800339c:	335c      	adds	r3, #92	; 0x5c
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d920      	bls.n	80033e6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	212c      	movs	r1, #44	; 0x2c
 80033aa:	fb01 f303 	mul.w	r3, r1, r3
 80033ae:	4413      	add	r3, r2
 80033b0:	335c      	adds	r3, #92	; 0x5c
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	212c      	movs	r1, #44	; 0x2c
 80033bc:	fb01 f303 	mul.w	r3, r1, r3
 80033c0:	4413      	add	r3, r2
 80033c2:	3360      	adds	r3, #96	; 0x60
 80033c4:	2204      	movs	r2, #4
 80033c6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	b2d9      	uxtb	r1, r3
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	202c      	movs	r0, #44	; 0x2c
 80033d2:	fb00 f303 	mul.w	r3, r0, r3
 80033d6:	4413      	add	r3, r2
 80033d8:	3360      	adds	r3, #96	; 0x60
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	461a      	mov	r2, r3
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f008 fbf2 	bl	800bbc8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80033e4:	e008      	b.n	80033f8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	212c      	movs	r1, #44	; 0x2c
 80033ec:	fb01 f303 	mul.w	r3, r1, r3
 80033f0:	4413      	add	r3, r2
 80033f2:	3360      	adds	r3, #96	; 0x60
 80033f4:	2202      	movs	r2, #2
 80033f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003404:	461a      	mov	r2, r3
 8003406:	2380      	movs	r3, #128	; 0x80
 8003408:	6093      	str	r3, [r2, #8]
}
 800340a:	e172      	b.n	80036f2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	4413      	add	r3, r2
 8003414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800341e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003422:	d11b      	bne.n	800345c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	212c      	movs	r1, #44	; 0x2c
 800342a:	fb01 f303 	mul.w	r3, r1, r3
 800342e:	4413      	add	r3, r2
 8003430:	3361      	adds	r3, #97	; 0x61
 8003432:	2208      	movs	r2, #8
 8003434:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	4611      	mov	r1, r2
 8003440:	4618      	mov	r0, r3
 8003442:	f003 fb78 	bl	8006b36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	4413      	add	r3, r2
 800344e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003452:	461a      	mov	r2, r3
 8003454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003458:	6093      	str	r3, [r2, #8]
}
 800345a:	e14a      	b.n	80036f2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	4413      	add	r3, r2
 8003464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b02      	cmp	r3, #2
 8003470:	f040 813f 	bne.w	80036f2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	212c      	movs	r1, #44	; 0x2c
 800347a:	fb01 f303 	mul.w	r3, r1, r3
 800347e:	4413      	add	r3, r2
 8003480:	3361      	adds	r3, #97	; 0x61
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d17d      	bne.n	8003584 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	212c      	movs	r1, #44	; 0x2c
 800348e:	fb01 f303 	mul.w	r3, r1, r3
 8003492:	4413      	add	r3, r2
 8003494:	3360      	adds	r3, #96	; 0x60
 8003496:	2201      	movs	r2, #1
 8003498:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	212c      	movs	r1, #44	; 0x2c
 80034a0:	fb01 f303 	mul.w	r3, r1, r3
 80034a4:	4413      	add	r3, r2
 80034a6:	333f      	adds	r3, #63	; 0x3f
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d00a      	beq.n	80034c4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	212c      	movs	r1, #44	; 0x2c
 80034b4:	fb01 f303 	mul.w	r3, r1, r3
 80034b8:	4413      	add	r3, r2
 80034ba:	333f      	adds	r3, #63	; 0x3f
 80034bc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80034be:	2b03      	cmp	r3, #3
 80034c0:	f040 8100 	bne.w	80036c4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d113      	bne.n	80034f4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	212c      	movs	r1, #44	; 0x2c
 80034d2:	fb01 f303 	mul.w	r3, r1, r3
 80034d6:	4413      	add	r3, r2
 80034d8:	3355      	adds	r3, #85	; 0x55
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	f083 0301 	eor.w	r3, r3, #1
 80034e0:	b2d8      	uxtb	r0, r3
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	212c      	movs	r1, #44	; 0x2c
 80034e8:	fb01 f303 	mul.w	r3, r1, r3
 80034ec:	4413      	add	r3, r2
 80034ee:	3355      	adds	r3, #85	; 0x55
 80034f0:	4602      	mov	r2, r0
 80034f2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	f040 80e3 	bne.w	80036c4 <HCD_HC_OUT_IRQHandler+0x69c>
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	212c      	movs	r1, #44	; 0x2c
 8003504:	fb01 f303 	mul.w	r3, r1, r3
 8003508:	4413      	add	r3, r2
 800350a:	334c      	adds	r3, #76	; 0x4c
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 80d8 	beq.w	80036c4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	212c      	movs	r1, #44	; 0x2c
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	4413      	add	r3, r2
 8003520:	334c      	adds	r3, #76	; 0x4c
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	202c      	movs	r0, #44	; 0x2c
 800352a:	fb00 f202 	mul.w	r2, r0, r2
 800352e:	440a      	add	r2, r1
 8003530:	3240      	adds	r2, #64	; 0x40
 8003532:	8812      	ldrh	r2, [r2, #0]
 8003534:	4413      	add	r3, r2
 8003536:	3b01      	subs	r3, #1
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	202c      	movs	r0, #44	; 0x2c
 800353e:	fb00 f202 	mul.w	r2, r0, r2
 8003542:	440a      	add	r2, r1
 8003544:	3240      	adds	r2, #64	; 0x40
 8003546:	8812      	ldrh	r2, [r2, #0]
 8003548:	fbb3 f3f2 	udiv	r3, r3, r2
 800354c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 80b5 	beq.w	80036c4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	212c      	movs	r1, #44	; 0x2c
 8003560:	fb01 f303 	mul.w	r3, r1, r3
 8003564:	4413      	add	r3, r2
 8003566:	3355      	adds	r3, #85	; 0x55
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	f083 0301 	eor.w	r3, r3, #1
 800356e:	b2d8      	uxtb	r0, r3
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	212c      	movs	r1, #44	; 0x2c
 8003576:	fb01 f303 	mul.w	r3, r1, r3
 800357a:	4413      	add	r3, r2
 800357c:	3355      	adds	r3, #85	; 0x55
 800357e:	4602      	mov	r2, r0
 8003580:	701a      	strb	r2, [r3, #0]
 8003582:	e09f      	b.n	80036c4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	212c      	movs	r1, #44	; 0x2c
 800358a:	fb01 f303 	mul.w	r3, r1, r3
 800358e:	4413      	add	r3, r2
 8003590:	3361      	adds	r3, #97	; 0x61
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b03      	cmp	r3, #3
 8003596:	d109      	bne.n	80035ac <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	212c      	movs	r1, #44	; 0x2c
 800359e:	fb01 f303 	mul.w	r3, r1, r3
 80035a2:	4413      	add	r3, r2
 80035a4:	3360      	adds	r3, #96	; 0x60
 80035a6:	2202      	movs	r2, #2
 80035a8:	701a      	strb	r2, [r3, #0]
 80035aa:	e08b      	b.n	80036c4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	212c      	movs	r1, #44	; 0x2c
 80035b2:	fb01 f303 	mul.w	r3, r1, r3
 80035b6:	4413      	add	r3, r2
 80035b8:	3361      	adds	r3, #97	; 0x61
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d109      	bne.n	80035d4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	212c      	movs	r1, #44	; 0x2c
 80035c6:	fb01 f303 	mul.w	r3, r1, r3
 80035ca:	4413      	add	r3, r2
 80035cc:	3360      	adds	r3, #96	; 0x60
 80035ce:	2202      	movs	r2, #2
 80035d0:	701a      	strb	r2, [r3, #0]
 80035d2:	e077      	b.n	80036c4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	212c      	movs	r1, #44	; 0x2c
 80035da:	fb01 f303 	mul.w	r3, r1, r3
 80035de:	4413      	add	r3, r2
 80035e0:	3361      	adds	r3, #97	; 0x61
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b05      	cmp	r3, #5
 80035e6:	d109      	bne.n	80035fc <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	212c      	movs	r1, #44	; 0x2c
 80035ee:	fb01 f303 	mul.w	r3, r1, r3
 80035f2:	4413      	add	r3, r2
 80035f4:	3360      	adds	r3, #96	; 0x60
 80035f6:	2205      	movs	r2, #5
 80035f8:	701a      	strb	r2, [r3, #0]
 80035fa:	e063      	b.n	80036c4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	212c      	movs	r1, #44	; 0x2c
 8003602:	fb01 f303 	mul.w	r3, r1, r3
 8003606:	4413      	add	r3, r2
 8003608:	3361      	adds	r3, #97	; 0x61
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b06      	cmp	r3, #6
 800360e:	d009      	beq.n	8003624 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	212c      	movs	r1, #44	; 0x2c
 8003616:	fb01 f303 	mul.w	r3, r1, r3
 800361a:	4413      	add	r3, r2
 800361c:	3361      	adds	r3, #97	; 0x61
 800361e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003620:	2b08      	cmp	r3, #8
 8003622:	d14f      	bne.n	80036c4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	212c      	movs	r1, #44	; 0x2c
 800362a:	fb01 f303 	mul.w	r3, r1, r3
 800362e:	4413      	add	r3, r2
 8003630:	335c      	adds	r3, #92	; 0x5c
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	202c      	movs	r0, #44	; 0x2c
 800363c:	fb00 f303 	mul.w	r3, r0, r3
 8003640:	440b      	add	r3, r1
 8003642:	335c      	adds	r3, #92	; 0x5c
 8003644:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	212c      	movs	r1, #44	; 0x2c
 800364c:	fb01 f303 	mul.w	r3, r1, r3
 8003650:	4413      	add	r3, r2
 8003652:	335c      	adds	r3, #92	; 0x5c
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d912      	bls.n	8003680 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	212c      	movs	r1, #44	; 0x2c
 8003660:	fb01 f303 	mul.w	r3, r1, r3
 8003664:	4413      	add	r3, r2
 8003666:	335c      	adds	r3, #92	; 0x5c
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	212c      	movs	r1, #44	; 0x2c
 8003672:	fb01 f303 	mul.w	r3, r1, r3
 8003676:	4413      	add	r3, r2
 8003678:	3360      	adds	r3, #96	; 0x60
 800367a:	2204      	movs	r2, #4
 800367c:	701a      	strb	r2, [r3, #0]
 800367e:	e021      	b.n	80036c4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	212c      	movs	r1, #44	; 0x2c
 8003686:	fb01 f303 	mul.w	r3, r1, r3
 800368a:	4413      	add	r3, r2
 800368c:	3360      	adds	r3, #96	; 0x60
 800368e:	2202      	movs	r2, #2
 8003690:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	015a      	lsls	r2, r3, #5
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	4413      	add	r3, r2
 800369a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036a8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036b0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	015a      	lsls	r2, r3, #5
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036be:	461a      	mov	r2, r3
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	015a      	lsls	r2, r3, #5
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	4413      	add	r3, r2
 80036cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d0:	461a      	mov	r2, r3
 80036d2:	2302      	movs	r3, #2
 80036d4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	b2d9      	uxtb	r1, r3
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	202c      	movs	r0, #44	; 0x2c
 80036e0:	fb00 f303 	mul.w	r3, r0, r3
 80036e4:	4413      	add	r3, r2
 80036e6:	3360      	adds	r3, #96	; 0x60
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f008 fa6b 	bl	800bbc8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80036f2:	bf00      	nop
 80036f4:	3720      	adds	r7, #32
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b08a      	sub	sp, #40	; 0x28
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	0c5b      	lsrs	r3, r3, #17
 8003720:	f003 030f 	and.w	r3, r3, #15
 8003724:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	091b      	lsrs	r3, r3, #4
 800372a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800372e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	2b02      	cmp	r3, #2
 8003734:	d004      	beq.n	8003740 <HCD_RXQLVL_IRQHandler+0x46>
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2b05      	cmp	r3, #5
 800373a:	f000 80a9 	beq.w	8003890 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800373e:	e0aa      	b.n	8003896 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 80a6 	beq.w	8003894 <HCD_RXQLVL_IRQHandler+0x19a>
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	212c      	movs	r1, #44	; 0x2c
 800374e:	fb01 f303 	mul.w	r3, r1, r3
 8003752:	4413      	add	r3, r2
 8003754:	3344      	adds	r3, #68	; 0x44
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 809b 	beq.w	8003894 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	212c      	movs	r1, #44	; 0x2c
 8003764:	fb01 f303 	mul.w	r3, r1, r3
 8003768:	4413      	add	r3, r2
 800376a:	3350      	adds	r3, #80	; 0x50
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	441a      	add	r2, r3
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	202c      	movs	r0, #44	; 0x2c
 8003778:	fb00 f303 	mul.w	r3, r0, r3
 800377c:	440b      	add	r3, r1
 800377e:	334c      	adds	r3, #76	; 0x4c
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d87a      	bhi.n	800387c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6818      	ldr	r0, [r3, #0]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	212c      	movs	r1, #44	; 0x2c
 8003790:	fb01 f303 	mul.w	r3, r1, r3
 8003794:	4413      	add	r3, r2
 8003796:	3344      	adds	r3, #68	; 0x44
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	b292      	uxth	r2, r2
 800379e:	4619      	mov	r1, r3
 80037a0:	f002 fd20 	bl	80061e4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	212c      	movs	r1, #44	; 0x2c
 80037aa:	fb01 f303 	mul.w	r3, r1, r3
 80037ae:	4413      	add	r3, r2
 80037b0:	3344      	adds	r3, #68	; 0x44
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	441a      	add	r2, r3
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	202c      	movs	r0, #44	; 0x2c
 80037be:	fb00 f303 	mul.w	r3, r0, r3
 80037c2:	440b      	add	r3, r1
 80037c4:	3344      	adds	r3, #68	; 0x44
 80037c6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	212c      	movs	r1, #44	; 0x2c
 80037ce:	fb01 f303 	mul.w	r3, r1, r3
 80037d2:	4413      	add	r3, r2
 80037d4:	3350      	adds	r3, #80	; 0x50
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	441a      	add	r2, r3
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	202c      	movs	r0, #44	; 0x2c
 80037e2:	fb00 f303 	mul.w	r3, r0, r3
 80037e6:	440b      	add	r3, r1
 80037e8:	3350      	adds	r3, #80	; 0x50
 80037ea:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	0cdb      	lsrs	r3, r3, #19
 80037fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003800:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	212c      	movs	r1, #44	; 0x2c
 8003808:	fb01 f303 	mul.w	r3, r1, r3
 800380c:	4413      	add	r3, r2
 800380e:	3340      	adds	r3, #64	; 0x40
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	461a      	mov	r2, r3
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	4293      	cmp	r3, r2
 8003818:	d13c      	bne.n	8003894 <HCD_RXQLVL_IRQHandler+0x19a>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d039      	beq.n	8003894 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	4413      	add	r3, r2
 8003828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003836:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800383e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	6a3b      	ldr	r3, [r7, #32]
 8003846:	4413      	add	r3, r2
 8003848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800384c:	461a      	mov	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	212c      	movs	r1, #44	; 0x2c
 8003858:	fb01 f303 	mul.w	r3, r1, r3
 800385c:	4413      	add	r3, r2
 800385e:	3354      	adds	r3, #84	; 0x54
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	f083 0301 	eor.w	r3, r3, #1
 8003866:	b2d8      	uxtb	r0, r3
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	212c      	movs	r1, #44	; 0x2c
 800386e:	fb01 f303 	mul.w	r3, r1, r3
 8003872:	4413      	add	r3, r2
 8003874:	3354      	adds	r3, #84	; 0x54
 8003876:	4602      	mov	r2, r0
 8003878:	701a      	strb	r2, [r3, #0]
      break;
 800387a:	e00b      	b.n	8003894 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	212c      	movs	r1, #44	; 0x2c
 8003882:	fb01 f303 	mul.w	r3, r1, r3
 8003886:	4413      	add	r3, r2
 8003888:	3360      	adds	r3, #96	; 0x60
 800388a:	2204      	movs	r2, #4
 800388c:	701a      	strb	r2, [r3, #0]
      break;
 800388e:	e001      	b.n	8003894 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003890:	bf00      	nop
 8003892:	e000      	b.n	8003896 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003894:	bf00      	nop
  }
}
 8003896:	bf00      	nop
 8003898:	3728      	adds	r7, #40	; 0x28
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b086      	sub	sp, #24
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80038ca:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d10b      	bne.n	80038ee <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d102      	bne.n	80038e6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f008 f955 	bl	800bb90 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f043 0302 	orr.w	r3, r3, #2
 80038ec:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	d132      	bne.n	800395e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	f043 0308 	orr.w	r3, r3, #8
 80038fe:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	2b04      	cmp	r3, #4
 8003908:	d126      	bne.n	8003958 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	2b02      	cmp	r3, #2
 8003910:	d113      	bne.n	800393a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003918:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800391c:	d106      	bne.n	800392c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2102      	movs	r1, #2
 8003924:	4618      	mov	r0, r3
 8003926:	f002 fdcb 	bl	80064c0 <USB_InitFSLSPClkSel>
 800392a:	e011      	b.n	8003950 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2101      	movs	r1, #1
 8003932:	4618      	mov	r0, r3
 8003934:	f002 fdc4 	bl	80064c0 <USB_InitFSLSPClkSel>
 8003938:	e00a      	b.n	8003950 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d106      	bne.n	8003950 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003948:	461a      	mov	r2, r3
 800394a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800394e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f008 f94b 	bl	800bbec <HAL_HCD_PortEnabled_Callback>
 8003956:	e002      	b.n	800395e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f008 f955 	bl	800bc08 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f003 0320 	and.w	r3, r3, #32
 8003964:	2b20      	cmp	r3, #32
 8003966:	d103      	bne.n	8003970 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	f043 0320 	orr.w	r3, r3, #32
 800396e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003976:	461a      	mov	r2, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	6013      	str	r3, [r2, #0]
}
 800397c:	bf00      	nop
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e267      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d075      	beq.n	8003a8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039a2:	4b88      	ldr	r3, [pc, #544]	; (8003bc4 <HAL_RCC_OscConfig+0x240>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 030c 	and.w	r3, r3, #12
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d00c      	beq.n	80039c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ae:	4b85      	ldr	r3, [pc, #532]	; (8003bc4 <HAL_RCC_OscConfig+0x240>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039b6:	2b08      	cmp	r3, #8
 80039b8:	d112      	bne.n	80039e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ba:	4b82      	ldr	r3, [pc, #520]	; (8003bc4 <HAL_RCC_OscConfig+0x240>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039c6:	d10b      	bne.n	80039e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c8:	4b7e      	ldr	r3, [pc, #504]	; (8003bc4 <HAL_RCC_OscConfig+0x240>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d05b      	beq.n	8003a8c <HAL_RCC_OscConfig+0x108>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d157      	bne.n	8003a8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e242      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e8:	d106      	bne.n	80039f8 <HAL_RCC_OscConfig+0x74>
 80039ea:	4b76      	ldr	r3, [pc, #472]	; (8003bc4 <HAL_RCC_OscConfig+0x240>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a75      	ldr	r2, [pc, #468]	; (8003bc4 <HAL_RCC_OscConfig+0x240>)
 80039f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	e01d      	b.n	8003a34 <HAL_RCC_OscConfig+0xb0>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a00:	d10c      	bne.n	8003a1c <HAL_RCC_OscConfig+0x98>
 8003a02:	4b70      	ldr	r3, [pc, #448]	; (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a6f      	ldr	r2, [pc, #444]	; (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	4b6d      	ldr	r3, [pc, #436]	; (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a6c      	ldr	r2, [pc, #432]	; (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	e00b      	b.n	8003a34 <HAL_RCC_OscConfig+0xb0>
 8003a1c:	4b69      	ldr	r3, [pc, #420]	; (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a68      	ldr	r2, [pc, #416]	; (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a26:	6013      	str	r3, [r2, #0]
 8003a28:	4b66      	ldr	r3, [pc, #408]	; (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a65      	ldr	r2, [pc, #404]	; (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d013      	beq.n	8003a64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3c:	f7fd fd66 	bl	800150c <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a44:	f7fd fd62 	bl	800150c <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b64      	cmp	r3, #100	; 0x64
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e207      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a56:	4b5b      	ldr	r3, [pc, #364]	; (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f0      	beq.n	8003a44 <HAL_RCC_OscConfig+0xc0>
 8003a62:	e014      	b.n	8003a8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a64:	f7fd fd52 	bl	800150c <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a6c:	f7fd fd4e 	bl	800150c <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b64      	cmp	r3, #100	; 0x64
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e1f3      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a7e:	4b51      	ldr	r3, [pc, #324]	; (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f0      	bne.n	8003a6c <HAL_RCC_OscConfig+0xe8>
 8003a8a:	e000      	b.n	8003a8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d063      	beq.n	8003b62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a9a:	4b4a      	ldr	r3, [pc, #296]	; (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 030c 	and.w	r3, r3, #12
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00b      	beq.n	8003abe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aa6:	4b47      	ldr	r3, [pc, #284]	; (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aae:	2b08      	cmp	r3, #8
 8003ab0:	d11c      	bne.n	8003aec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ab2:	4b44      	ldr	r3, [pc, #272]	; (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d116      	bne.n	8003aec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003abe:	4b41      	ldr	r3, [pc, #260]	; (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d005      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x152>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d001      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e1c7      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad6:	4b3b      	ldr	r3, [pc, #236]	; (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	4937      	ldr	r1, [pc, #220]	; (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aea:	e03a      	b.n	8003b62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d020      	beq.n	8003b36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003af4:	4b34      	ldr	r3, [pc, #208]	; (8003bc8 <HAL_RCC_OscConfig+0x244>)
 8003af6:	2201      	movs	r2, #1
 8003af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afa:	f7fd fd07 	bl	800150c <HAL_GetTick>
 8003afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b00:	e008      	b.n	8003b14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b02:	f7fd fd03 	bl	800150c <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e1a8      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b14:	4b2b      	ldr	r3, [pc, #172]	; (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0f0      	beq.n	8003b02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b20:	4b28      	ldr	r3, [pc, #160]	; (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4925      	ldr	r1, [pc, #148]	; (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	600b      	str	r3, [r1, #0]
 8003b34:	e015      	b.n	8003b62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b36:	4b24      	ldr	r3, [pc, #144]	; (8003bc8 <HAL_RCC_OscConfig+0x244>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3c:	f7fd fce6 	bl	800150c <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b44:	f7fd fce2 	bl	800150c <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e187      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b56:	4b1b      	ldr	r3, [pc, #108]	; (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f0      	bne.n	8003b44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d036      	beq.n	8003bdc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d016      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b76:	4b15      	ldr	r3, [pc, #84]	; (8003bcc <HAL_RCC_OscConfig+0x248>)
 8003b78:	2201      	movs	r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7c:	f7fd fcc6 	bl	800150c <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b84:	f7fd fcc2 	bl	800150c <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e167      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b96:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0f0      	beq.n	8003b84 <HAL_RCC_OscConfig+0x200>
 8003ba2:	e01b      	b.n	8003bdc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ba4:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <HAL_RCC_OscConfig+0x248>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003baa:	f7fd fcaf 	bl	800150c <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb0:	e00e      	b.n	8003bd0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bb2:	f7fd fcab 	bl	800150c <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d907      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e150      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	42470000 	.word	0x42470000
 8003bcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd0:	4b88      	ldr	r3, [pc, #544]	; (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1ea      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 8097 	beq.w	8003d18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bea:	2300      	movs	r3, #0
 8003bec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bee:	4b81      	ldr	r3, [pc, #516]	; (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10f      	bne.n	8003c1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60bb      	str	r3, [r7, #8]
 8003bfe:	4b7d      	ldr	r3, [pc, #500]	; (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	4a7c      	ldr	r2, [pc, #496]	; (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c08:	6413      	str	r3, [r2, #64]	; 0x40
 8003c0a:	4b7a      	ldr	r3, [pc, #488]	; (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c12:	60bb      	str	r3, [r7, #8]
 8003c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c16:	2301      	movs	r3, #1
 8003c18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1a:	4b77      	ldr	r3, [pc, #476]	; (8003df8 <HAL_RCC_OscConfig+0x474>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d118      	bne.n	8003c58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c26:	4b74      	ldr	r3, [pc, #464]	; (8003df8 <HAL_RCC_OscConfig+0x474>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a73      	ldr	r2, [pc, #460]	; (8003df8 <HAL_RCC_OscConfig+0x474>)
 8003c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c32:	f7fd fc6b 	bl	800150c <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c3a:	f7fd fc67 	bl	800150c <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e10c      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4c:	4b6a      	ldr	r3, [pc, #424]	; (8003df8 <HAL_RCC_OscConfig+0x474>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0f0      	beq.n	8003c3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d106      	bne.n	8003c6e <HAL_RCC_OscConfig+0x2ea>
 8003c60:	4b64      	ldr	r3, [pc, #400]	; (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c64:	4a63      	ldr	r2, [pc, #396]	; (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003c66:	f043 0301 	orr.w	r3, r3, #1
 8003c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6c:	e01c      	b.n	8003ca8 <HAL_RCC_OscConfig+0x324>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b05      	cmp	r3, #5
 8003c74:	d10c      	bne.n	8003c90 <HAL_RCC_OscConfig+0x30c>
 8003c76:	4b5f      	ldr	r3, [pc, #380]	; (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7a:	4a5e      	ldr	r2, [pc, #376]	; (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003c7c:	f043 0304 	orr.w	r3, r3, #4
 8003c80:	6713      	str	r3, [r2, #112]	; 0x70
 8003c82:	4b5c      	ldr	r3, [pc, #368]	; (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c86:	4a5b      	ldr	r2, [pc, #364]	; (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003c88:	f043 0301 	orr.w	r3, r3, #1
 8003c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c8e:	e00b      	b.n	8003ca8 <HAL_RCC_OscConfig+0x324>
 8003c90:	4b58      	ldr	r3, [pc, #352]	; (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c94:	4a57      	ldr	r2, [pc, #348]	; (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003c96:	f023 0301 	bic.w	r3, r3, #1
 8003c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c9c:	4b55      	ldr	r3, [pc, #340]	; (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca0:	4a54      	ldr	r2, [pc, #336]	; (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003ca2:	f023 0304 	bic.w	r3, r3, #4
 8003ca6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d015      	beq.n	8003cdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb0:	f7fd fc2c 	bl	800150c <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb6:	e00a      	b.n	8003cce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb8:	f7fd fc28 	bl	800150c <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e0cb      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cce:	4b49      	ldr	r3, [pc, #292]	; (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0ee      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x334>
 8003cda:	e014      	b.n	8003d06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cdc:	f7fd fc16 	bl	800150c <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ce2:	e00a      	b.n	8003cfa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ce4:	f7fd fc12 	bl	800150c <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e0b5      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cfa:	4b3e      	ldr	r3, [pc, #248]	; (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1ee      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d06:	7dfb      	ldrb	r3, [r7, #23]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d105      	bne.n	8003d18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d0c:	4b39      	ldr	r3, [pc, #228]	; (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d10:	4a38      	ldr	r2, [pc, #224]	; (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003d12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 80a1 	beq.w	8003e64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d22:	4b34      	ldr	r3, [pc, #208]	; (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 030c 	and.w	r3, r3, #12
 8003d2a:	2b08      	cmp	r3, #8
 8003d2c:	d05c      	beq.n	8003de8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d141      	bne.n	8003dba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d36:	4b31      	ldr	r3, [pc, #196]	; (8003dfc <HAL_RCC_OscConfig+0x478>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3c:	f7fd fbe6 	bl	800150c <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d44:	f7fd fbe2 	bl	800150c <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e087      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d56:	4b27      	ldr	r3, [pc, #156]	; (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f0      	bne.n	8003d44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	69da      	ldr	r2, [r3, #28]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	019b      	lsls	r3, r3, #6
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d78:	085b      	lsrs	r3, r3, #1
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	041b      	lsls	r3, r3, #16
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d84:	061b      	lsls	r3, r3, #24
 8003d86:	491b      	ldr	r1, [pc, #108]	; (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d8c:	4b1b      	ldr	r3, [pc, #108]	; (8003dfc <HAL_RCC_OscConfig+0x478>)
 8003d8e:	2201      	movs	r2, #1
 8003d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d92:	f7fd fbbb 	bl	800150c <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d9a:	f7fd fbb7 	bl	800150c <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e05c      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dac:	4b11      	ldr	r3, [pc, #68]	; (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0f0      	beq.n	8003d9a <HAL_RCC_OscConfig+0x416>
 8003db8:	e054      	b.n	8003e64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dba:	4b10      	ldr	r3, [pc, #64]	; (8003dfc <HAL_RCC_OscConfig+0x478>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc0:	f7fd fba4 	bl	800150c <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc8:	f7fd fba0 	bl	800150c <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e045      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dda:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f0      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x444>
 8003de6:	e03d      	b.n	8003e64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d107      	bne.n	8003e00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e038      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
 8003df4:	40023800 	.word	0x40023800
 8003df8:	40007000 	.word	0x40007000
 8003dfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e00:	4b1b      	ldr	r3, [pc, #108]	; (8003e70 <HAL_RCC_OscConfig+0x4ec>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d028      	beq.n	8003e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d121      	bne.n	8003e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d11a      	bne.n	8003e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e30:	4013      	ands	r3, r2
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d111      	bne.n	8003e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e46:	085b      	lsrs	r3, r3, #1
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d107      	bne.n	8003e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d001      	beq.n	8003e64 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e000      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	40023800 	.word	0x40023800

08003e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0cc      	b.n	8004022 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e88:	4b68      	ldr	r3, [pc, #416]	; (800402c <HAL_RCC_ClockConfig+0x1b8>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d90c      	bls.n	8003eb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e96:	4b65      	ldr	r3, [pc, #404]	; (800402c <HAL_RCC_ClockConfig+0x1b8>)
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9e:	4b63      	ldr	r3, [pc, #396]	; (800402c <HAL_RCC_ClockConfig+0x1b8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d001      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e0b8      	b.n	8004022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d020      	beq.n	8003efe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d005      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ec8:	4b59      	ldr	r3, [pc, #356]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	4a58      	ldr	r2, [pc, #352]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003ece:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ed2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0308 	and.w	r3, r3, #8
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d005      	beq.n	8003eec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ee0:	4b53      	ldr	r3, [pc, #332]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	4a52      	ldr	r2, [pc, #328]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003eea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eec:	4b50      	ldr	r3, [pc, #320]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	494d      	ldr	r1, [pc, #308]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d044      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d107      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f12:	4b47      	ldr	r3, [pc, #284]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d119      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e07f      	b.n	8004022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d003      	beq.n	8003f32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d107      	bne.n	8003f42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f32:	4b3f      	ldr	r3, [pc, #252]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d109      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e06f      	b.n	8004022 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f42:	4b3b      	ldr	r3, [pc, #236]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e067      	b.n	8004022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f52:	4b37      	ldr	r3, [pc, #220]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f023 0203 	bic.w	r2, r3, #3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	4934      	ldr	r1, [pc, #208]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f64:	f7fd fad2 	bl	800150c <HAL_GetTick>
 8003f68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f6a:	e00a      	b.n	8003f82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f6c:	f7fd face 	bl	800150c <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e04f      	b.n	8004022 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f82:	4b2b      	ldr	r3, [pc, #172]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 020c 	and.w	r2, r3, #12
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d1eb      	bne.n	8003f6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f94:	4b25      	ldr	r3, [pc, #148]	; (800402c <HAL_RCC_ClockConfig+0x1b8>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d20c      	bcs.n	8003fbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa2:	4b22      	ldr	r3, [pc, #136]	; (800402c <HAL_RCC_ClockConfig+0x1b8>)
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003faa:	4b20      	ldr	r3, [pc, #128]	; (800402c <HAL_RCC_ClockConfig+0x1b8>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0307 	and.w	r3, r3, #7
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d001      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e032      	b.n	8004022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d008      	beq.n	8003fda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fc8:	4b19      	ldr	r3, [pc, #100]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	4916      	ldr	r1, [pc, #88]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0308 	and.w	r3, r3, #8
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d009      	beq.n	8003ffa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fe6:	4b12      	ldr	r3, [pc, #72]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	490e      	ldr	r1, [pc, #56]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ffa:	f000 f821 	bl	8004040 <HAL_RCC_GetSysClockFreq>
 8003ffe:	4602      	mov	r2, r0
 8004000:	4b0b      	ldr	r3, [pc, #44]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	091b      	lsrs	r3, r3, #4
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	490a      	ldr	r1, [pc, #40]	; (8004034 <HAL_RCC_ClockConfig+0x1c0>)
 800400c:	5ccb      	ldrb	r3, [r1, r3]
 800400e:	fa22 f303 	lsr.w	r3, r2, r3
 8004012:	4a09      	ldr	r2, [pc, #36]	; (8004038 <HAL_RCC_ClockConfig+0x1c4>)
 8004014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004016:	4b09      	ldr	r3, [pc, #36]	; (800403c <HAL_RCC_ClockConfig+0x1c8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f7fd f92c 	bl	8001278 <HAL_InitTick>

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40023c00 	.word	0x40023c00
 8004030:	40023800 	.word	0x40023800
 8004034:	0800cb6c 	.word	0x0800cb6c
 8004038:	20000230 	.word	0x20000230
 800403c:	20000234 	.word	0x20000234

08004040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004044:	b090      	sub	sp, #64	; 0x40
 8004046:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	637b      	str	r3, [r7, #52]	; 0x34
 800404c:	2300      	movs	r3, #0
 800404e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004050:	2300      	movs	r3, #0
 8004052:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004058:	4b59      	ldr	r3, [pc, #356]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f003 030c 	and.w	r3, r3, #12
 8004060:	2b08      	cmp	r3, #8
 8004062:	d00d      	beq.n	8004080 <HAL_RCC_GetSysClockFreq+0x40>
 8004064:	2b08      	cmp	r3, #8
 8004066:	f200 80a1 	bhi.w	80041ac <HAL_RCC_GetSysClockFreq+0x16c>
 800406a:	2b00      	cmp	r3, #0
 800406c:	d002      	beq.n	8004074 <HAL_RCC_GetSysClockFreq+0x34>
 800406e:	2b04      	cmp	r3, #4
 8004070:	d003      	beq.n	800407a <HAL_RCC_GetSysClockFreq+0x3a>
 8004072:	e09b      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004074:	4b53      	ldr	r3, [pc, #332]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004076:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004078:	e09b      	b.n	80041b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800407a:	4b53      	ldr	r3, [pc, #332]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800407c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800407e:	e098      	b.n	80041b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004080:	4b4f      	ldr	r3, [pc, #316]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004088:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800408a:	4b4d      	ldr	r3, [pc, #308]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d028      	beq.n	80040e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004096:	4b4a      	ldr	r3, [pc, #296]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	099b      	lsrs	r3, r3, #6
 800409c:	2200      	movs	r2, #0
 800409e:	623b      	str	r3, [r7, #32]
 80040a0:	627a      	str	r2, [r7, #36]	; 0x24
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80040a8:	2100      	movs	r1, #0
 80040aa:	4b47      	ldr	r3, [pc, #284]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80040ac:	fb03 f201 	mul.w	r2, r3, r1
 80040b0:	2300      	movs	r3, #0
 80040b2:	fb00 f303 	mul.w	r3, r0, r3
 80040b6:	4413      	add	r3, r2
 80040b8:	4a43      	ldr	r2, [pc, #268]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80040ba:	fba0 1202 	umull	r1, r2, r0, r2
 80040be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040c0:	460a      	mov	r2, r1
 80040c2:	62ba      	str	r2, [r7, #40]	; 0x28
 80040c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040c6:	4413      	add	r3, r2
 80040c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040cc:	2200      	movs	r2, #0
 80040ce:	61bb      	str	r3, [r7, #24]
 80040d0:	61fa      	str	r2, [r7, #28]
 80040d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80040da:	f7fc f8c9 	bl	8000270 <__aeabi_uldivmod>
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	4613      	mov	r3, r2
 80040e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040e6:	e053      	b.n	8004190 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040e8:	4b35      	ldr	r3, [pc, #212]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	099b      	lsrs	r3, r3, #6
 80040ee:	2200      	movs	r2, #0
 80040f0:	613b      	str	r3, [r7, #16]
 80040f2:	617a      	str	r2, [r7, #20]
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80040fa:	f04f 0b00 	mov.w	fp, #0
 80040fe:	4652      	mov	r2, sl
 8004100:	465b      	mov	r3, fp
 8004102:	f04f 0000 	mov.w	r0, #0
 8004106:	f04f 0100 	mov.w	r1, #0
 800410a:	0159      	lsls	r1, r3, #5
 800410c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004110:	0150      	lsls	r0, r2, #5
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	ebb2 080a 	subs.w	r8, r2, sl
 800411a:	eb63 090b 	sbc.w	r9, r3, fp
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800412a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800412e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004132:	ebb2 0408 	subs.w	r4, r2, r8
 8004136:	eb63 0509 	sbc.w	r5, r3, r9
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	00eb      	lsls	r3, r5, #3
 8004144:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004148:	00e2      	lsls	r2, r4, #3
 800414a:	4614      	mov	r4, r2
 800414c:	461d      	mov	r5, r3
 800414e:	eb14 030a 	adds.w	r3, r4, sl
 8004152:	603b      	str	r3, [r7, #0]
 8004154:	eb45 030b 	adc.w	r3, r5, fp
 8004158:	607b      	str	r3, [r7, #4]
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004166:	4629      	mov	r1, r5
 8004168:	028b      	lsls	r3, r1, #10
 800416a:	4621      	mov	r1, r4
 800416c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004170:	4621      	mov	r1, r4
 8004172:	028a      	lsls	r2, r1, #10
 8004174:	4610      	mov	r0, r2
 8004176:	4619      	mov	r1, r3
 8004178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800417a:	2200      	movs	r2, #0
 800417c:	60bb      	str	r3, [r7, #8]
 800417e:	60fa      	str	r2, [r7, #12]
 8004180:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004184:	f7fc f874 	bl	8000270 <__aeabi_uldivmod>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4613      	mov	r3, r2
 800418e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004190:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	0c1b      	lsrs	r3, r3, #16
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	3301      	adds	r3, #1
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80041a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041aa:	e002      	b.n	80041b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041ac:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80041ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3740      	adds	r7, #64	; 0x40
 80041b8:	46bd      	mov	sp, r7
 80041ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041be:	bf00      	nop
 80041c0:	40023800 	.word	0x40023800
 80041c4:	00f42400 	.word	0x00f42400
 80041c8:	017d7840 	.word	0x017d7840

080041cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041d0:	4b03      	ldr	r3, [pc, #12]	; (80041e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80041d2:	681b      	ldr	r3, [r3, #0]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	20000230 	.word	0x20000230

080041e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041e8:	f7ff fff0 	bl	80041cc <HAL_RCC_GetHCLKFreq>
 80041ec:	4602      	mov	r2, r0
 80041ee:	4b05      	ldr	r3, [pc, #20]	; (8004204 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	0a9b      	lsrs	r3, r3, #10
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	4903      	ldr	r1, [pc, #12]	; (8004208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041fa:	5ccb      	ldrb	r3, [r1, r3]
 80041fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004200:	4618      	mov	r0, r3
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40023800 	.word	0x40023800
 8004208:	0800cb7c 	.word	0x0800cb7c

0800420c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004210:	f7ff ffdc 	bl	80041cc <HAL_RCC_GetHCLKFreq>
 8004214:	4602      	mov	r2, r0
 8004216:	4b05      	ldr	r3, [pc, #20]	; (800422c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	0b5b      	lsrs	r3, r3, #13
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	4903      	ldr	r1, [pc, #12]	; (8004230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004222:	5ccb      	ldrb	r3, [r1, r3]
 8004224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004228:	4618      	mov	r0, r3
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40023800 	.word	0x40023800
 8004230:	0800cb7c 	.word	0x0800cb7c

08004234 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	220f      	movs	r2, #15
 8004242:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004244:	4b12      	ldr	r3, [pc, #72]	; (8004290 <HAL_RCC_GetClockConfig+0x5c>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 0203 	and.w	r2, r3, #3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004250:	4b0f      	ldr	r3, [pc, #60]	; (8004290 <HAL_RCC_GetClockConfig+0x5c>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800425c:	4b0c      	ldr	r3, [pc, #48]	; (8004290 <HAL_RCC_GetClockConfig+0x5c>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004268:	4b09      	ldr	r3, [pc, #36]	; (8004290 <HAL_RCC_GetClockConfig+0x5c>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	08db      	lsrs	r3, r3, #3
 800426e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004276:	4b07      	ldr	r3, [pc, #28]	; (8004294 <HAL_RCC_GetClockConfig+0x60>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0207 	and.w	r2, r3, #7
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	601a      	str	r2, [r3, #0]
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	40023800 	.word	0x40023800
 8004294:	40023c00 	.word	0x40023c00

08004298 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e07b      	b.n	80043a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d108      	bne.n	80042c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042ba:	d009      	beq.n	80042d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	61da      	str	r2, [r3, #28]
 80042c2:	e005      	b.n	80042d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d106      	bne.n	80042f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7fc fefe 	bl	80010ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004306:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004318:	431a      	orrs	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	431a      	orrs	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004340:	431a      	orrs	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004354:	ea42 0103 	orr.w	r1, r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	0c1b      	lsrs	r3, r3, #16
 800436e:	f003 0104 	and.w	r1, r3, #4
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	f003 0210 	and.w	r2, r3, #16
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	69da      	ldr	r2, [r3, #28]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004390:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
	...

080043ac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b088      	sub	sp, #32
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	099b      	lsrs	r3, r3, #6
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10f      	bne.n	80043f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00a      	beq.n	80043f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	099b      	lsrs	r3, r3, #6
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d004      	beq.n	80043f0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	4798      	blx	r3
    return;
 80043ee:	e0d7      	b.n	80045a0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	085b      	lsrs	r3, r3, #1
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00a      	beq.n	8004412 <HAL_SPI_IRQHandler+0x66>
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	09db      	lsrs	r3, r3, #7
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b00      	cmp	r3, #0
 8004406:	d004      	beq.n	8004412 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	4798      	blx	r3
    return;
 8004410:	e0c6      	b.n	80045a0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	095b      	lsrs	r3, r3, #5
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10c      	bne.n	8004438 <HAL_SPI_IRQHandler+0x8c>
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	099b      	lsrs	r3, r3, #6
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d106      	bne.n	8004438 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	0a1b      	lsrs	r3, r3, #8
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 80b4 	beq.w	80045a0 <HAL_SPI_IRQHandler+0x1f4>
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 80ad 	beq.w	80045a0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	099b      	lsrs	r3, r3, #6
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d023      	beq.n	800449a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b03      	cmp	r3, #3
 800445c:	d011      	beq.n	8004482 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004462:	f043 0204 	orr.w	r2, r3, #4
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800446a:	2300      	movs	r3, #0
 800446c:	617b      	str	r3, [r7, #20]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	617b      	str	r3, [r7, #20]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	e00b      	b.n	800449a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004482:	2300      	movs	r3, #0
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	693b      	ldr	r3, [r7, #16]
        return;
 8004498:	e082      	b.n	80045a0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	095b      	lsrs	r3, r3, #5
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d014      	beq.n	80044d0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044aa:	f043 0201 	orr.w	r2, r3, #1
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80044b2:	2300      	movs	r3, #0
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	0a1b      	lsrs	r3, r3, #8
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00c      	beq.n	80044f6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e0:	f043 0208 	orr.w	r2, r3, #8
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80044e8:	2300      	movs	r3, #0
 80044ea:	60bb      	str	r3, [r7, #8]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	60bb      	str	r3, [r7, #8]
 80044f4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d04f      	beq.n	800459e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800450c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d104      	bne.n	800452a <HAL_SPI_IRQHandler+0x17e>
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d034      	beq.n	8004594 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0203 	bic.w	r2, r2, #3
 8004538:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453e:	2b00      	cmp	r3, #0
 8004540:	d011      	beq.n	8004566 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004546:	4a18      	ldr	r2, [pc, #96]	; (80045a8 <HAL_SPI_IRQHandler+0x1fc>)
 8004548:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800454e:	4618      	mov	r0, r3
 8004550:	f7fd f95e 	bl	8001810 <HAL_DMA_Abort_IT>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800456a:	2b00      	cmp	r3, #0
 800456c:	d016      	beq.n	800459c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004572:	4a0d      	ldr	r2, [pc, #52]	; (80045a8 <HAL_SPI_IRQHandler+0x1fc>)
 8004574:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800457a:	4618      	mov	r0, r3
 800457c:	f7fd f948 	bl	8001810 <HAL_DMA_Abort_IT>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004592:	e003      	b.n	800459c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f809 	bl	80045ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800459a:	e000      	b.n	800459e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800459c:	bf00      	nop
    return;
 800459e:	bf00      	nop
  }
}
 80045a0:	3720      	adds	r7, #32
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	080045c1 	.word	0x080045c1

080045ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045cc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f7ff ffe6 	bl	80045ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045e0:	bf00      	nop
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e041      	b.n	800467e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7fc fdbc 	bl	800118c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3304      	adds	r3, #4
 8004624:	4619      	mov	r1, r3
 8004626:	4610      	mov	r0, r2
 8004628:	f000 fa96 	bl	8004b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b01      	cmp	r3, #1
 800469a:	d001      	beq.n	80046a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e04e      	b.n	800473e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0201 	orr.w	r2, r2, #1
 80046b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a23      	ldr	r2, [pc, #140]	; (800474c <HAL_TIM_Base_Start_IT+0xc4>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d022      	beq.n	8004708 <HAL_TIM_Base_Start_IT+0x80>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ca:	d01d      	beq.n	8004708 <HAL_TIM_Base_Start_IT+0x80>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a1f      	ldr	r2, [pc, #124]	; (8004750 <HAL_TIM_Base_Start_IT+0xc8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d018      	beq.n	8004708 <HAL_TIM_Base_Start_IT+0x80>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a1e      	ldr	r2, [pc, #120]	; (8004754 <HAL_TIM_Base_Start_IT+0xcc>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d013      	beq.n	8004708 <HAL_TIM_Base_Start_IT+0x80>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a1c      	ldr	r2, [pc, #112]	; (8004758 <HAL_TIM_Base_Start_IT+0xd0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d00e      	beq.n	8004708 <HAL_TIM_Base_Start_IT+0x80>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a1b      	ldr	r2, [pc, #108]	; (800475c <HAL_TIM_Base_Start_IT+0xd4>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d009      	beq.n	8004708 <HAL_TIM_Base_Start_IT+0x80>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a19      	ldr	r2, [pc, #100]	; (8004760 <HAL_TIM_Base_Start_IT+0xd8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d004      	beq.n	8004708 <HAL_TIM_Base_Start_IT+0x80>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a18      	ldr	r2, [pc, #96]	; (8004764 <HAL_TIM_Base_Start_IT+0xdc>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d111      	bne.n	800472c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2b06      	cmp	r3, #6
 8004718:	d010      	beq.n	800473c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f042 0201 	orr.w	r2, r2, #1
 8004728:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800472a:	e007      	b.n	800473c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0201 	orr.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	40010000 	.word	0x40010000
 8004750:	40000400 	.word	0x40000400
 8004754:	40000800 	.word	0x40000800
 8004758:	40000c00 	.word	0x40000c00
 800475c:	40010400 	.word	0x40010400
 8004760:	40014000 	.word	0x40014000
 8004764:	40001800 	.word	0x40001800

08004768 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b02      	cmp	r3, #2
 800477c:	d122      	bne.n	80047c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b02      	cmp	r3, #2
 800478a:	d11b      	bne.n	80047c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f06f 0202 	mvn.w	r2, #2
 8004794:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f9b5 	bl	8004b1a <HAL_TIM_IC_CaptureCallback>
 80047b0:	e005      	b.n	80047be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f9a7 	bl	8004b06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f9b8 	bl	8004b2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d122      	bne.n	8004818 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b04      	cmp	r3, #4
 80047de:	d11b      	bne.n	8004818 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f06f 0204 	mvn.w	r2, #4
 80047e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2202      	movs	r2, #2
 80047ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f98b 	bl	8004b1a <HAL_TIM_IC_CaptureCallback>
 8004804:	e005      	b.n	8004812 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f97d 	bl	8004b06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f98e 	bl	8004b2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	f003 0308 	and.w	r3, r3, #8
 8004822:	2b08      	cmp	r3, #8
 8004824:	d122      	bne.n	800486c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b08      	cmp	r3, #8
 8004832:	d11b      	bne.n	800486c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f06f 0208 	mvn.w	r2, #8
 800483c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2204      	movs	r2, #4
 8004842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f961 	bl	8004b1a <HAL_TIM_IC_CaptureCallback>
 8004858:	e005      	b.n	8004866 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f953 	bl	8004b06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 f964 	bl	8004b2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	f003 0310 	and.w	r3, r3, #16
 8004876:	2b10      	cmp	r3, #16
 8004878:	d122      	bne.n	80048c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f003 0310 	and.w	r3, r3, #16
 8004884:	2b10      	cmp	r3, #16
 8004886:	d11b      	bne.n	80048c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f06f 0210 	mvn.w	r2, #16
 8004890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2208      	movs	r2, #8
 8004896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f937 	bl	8004b1a <HAL_TIM_IC_CaptureCallback>
 80048ac:	e005      	b.n	80048ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f929 	bl	8004b06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f93a 	bl	8004b2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d10e      	bne.n	80048ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d107      	bne.n	80048ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f06f 0201 	mvn.w	r2, #1
 80048e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7fc fae8 	bl	8000ebc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f6:	2b80      	cmp	r3, #128	; 0x80
 80048f8:	d10e      	bne.n	8004918 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004904:	2b80      	cmp	r3, #128	; 0x80
 8004906:	d107      	bne.n	8004918 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fae0 	bl	8004ed8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004922:	2b40      	cmp	r3, #64	; 0x40
 8004924:	d10e      	bne.n	8004944 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004930:	2b40      	cmp	r3, #64	; 0x40
 8004932:	d107      	bne.n	8004944 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800493c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f8ff 	bl	8004b42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	f003 0320 	and.w	r3, r3, #32
 800494e:	2b20      	cmp	r3, #32
 8004950:	d10e      	bne.n	8004970 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f003 0320 	and.w	r3, r3, #32
 800495c:	2b20      	cmp	r3, #32
 800495e:	d107      	bne.n	8004970 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f06f 0220 	mvn.w	r2, #32
 8004968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 faaa 	bl	8004ec4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004970:	bf00      	nop
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800498c:	2b01      	cmp	r3, #1
 800498e:	d101      	bne.n	8004994 <HAL_TIM_ConfigClockSource+0x1c>
 8004990:	2302      	movs	r3, #2
 8004992:	e0b4      	b.n	8004afe <HAL_TIM_ConfigClockSource+0x186>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049cc:	d03e      	beq.n	8004a4c <HAL_TIM_ConfigClockSource+0xd4>
 80049ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049d2:	f200 8087 	bhi.w	8004ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80049d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049da:	f000 8086 	beq.w	8004aea <HAL_TIM_ConfigClockSource+0x172>
 80049de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e2:	d87f      	bhi.n	8004ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80049e4:	2b70      	cmp	r3, #112	; 0x70
 80049e6:	d01a      	beq.n	8004a1e <HAL_TIM_ConfigClockSource+0xa6>
 80049e8:	2b70      	cmp	r3, #112	; 0x70
 80049ea:	d87b      	bhi.n	8004ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80049ec:	2b60      	cmp	r3, #96	; 0x60
 80049ee:	d050      	beq.n	8004a92 <HAL_TIM_ConfigClockSource+0x11a>
 80049f0:	2b60      	cmp	r3, #96	; 0x60
 80049f2:	d877      	bhi.n	8004ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80049f4:	2b50      	cmp	r3, #80	; 0x50
 80049f6:	d03c      	beq.n	8004a72 <HAL_TIM_ConfigClockSource+0xfa>
 80049f8:	2b50      	cmp	r3, #80	; 0x50
 80049fa:	d873      	bhi.n	8004ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80049fc:	2b40      	cmp	r3, #64	; 0x40
 80049fe:	d058      	beq.n	8004ab2 <HAL_TIM_ConfigClockSource+0x13a>
 8004a00:	2b40      	cmp	r3, #64	; 0x40
 8004a02:	d86f      	bhi.n	8004ae4 <HAL_TIM_ConfigClockSource+0x16c>
 8004a04:	2b30      	cmp	r3, #48	; 0x30
 8004a06:	d064      	beq.n	8004ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8004a08:	2b30      	cmp	r3, #48	; 0x30
 8004a0a:	d86b      	bhi.n	8004ae4 <HAL_TIM_ConfigClockSource+0x16c>
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	d060      	beq.n	8004ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8004a10:	2b20      	cmp	r3, #32
 8004a12:	d867      	bhi.n	8004ae4 <HAL_TIM_ConfigClockSource+0x16c>
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d05c      	beq.n	8004ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8004a18:	2b10      	cmp	r3, #16
 8004a1a:	d05a      	beq.n	8004ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8004a1c:	e062      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6818      	ldr	r0, [r3, #0]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	6899      	ldr	r1, [r3, #8]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f000 f9ad 	bl	8004d8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	609a      	str	r2, [r3, #8]
      break;
 8004a4a:	e04f      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6818      	ldr	r0, [r3, #0]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	6899      	ldr	r1, [r3, #8]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f000 f996 	bl	8004d8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a6e:	609a      	str	r2, [r3, #8]
      break;
 8004a70:	e03c      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6818      	ldr	r0, [r3, #0]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	6859      	ldr	r1, [r3, #4]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	f000 f90a 	bl	8004c98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2150      	movs	r1, #80	; 0x50
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 f963 	bl	8004d56 <TIM_ITRx_SetConfig>
      break;
 8004a90:	e02c      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6818      	ldr	r0, [r3, #0]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	6859      	ldr	r1, [r3, #4]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	f000 f929 	bl	8004cf6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2160      	movs	r1, #96	; 0x60
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 f953 	bl	8004d56 <TIM_ITRx_SetConfig>
      break;
 8004ab0:	e01c      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	6859      	ldr	r1, [r3, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f000 f8ea 	bl	8004c98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2140      	movs	r1, #64	; 0x40
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 f943 	bl	8004d56 <TIM_ITRx_SetConfig>
      break;
 8004ad0:	e00c      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4619      	mov	r1, r3
 8004adc:	4610      	mov	r0, r2
 8004ade:	f000 f93a 	bl	8004d56 <TIM_ITRx_SetConfig>
      break;
 8004ae2:	e003      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ae8:	e000      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004aea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b083      	sub	sp, #12
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
	...

08004b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a40      	ldr	r2, [pc, #256]	; (8004c6c <TIM_Base_SetConfig+0x114>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d013      	beq.n	8004b98 <TIM_Base_SetConfig+0x40>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b76:	d00f      	beq.n	8004b98 <TIM_Base_SetConfig+0x40>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a3d      	ldr	r2, [pc, #244]	; (8004c70 <TIM_Base_SetConfig+0x118>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d00b      	beq.n	8004b98 <TIM_Base_SetConfig+0x40>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a3c      	ldr	r2, [pc, #240]	; (8004c74 <TIM_Base_SetConfig+0x11c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d007      	beq.n	8004b98 <TIM_Base_SetConfig+0x40>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a3b      	ldr	r2, [pc, #236]	; (8004c78 <TIM_Base_SetConfig+0x120>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d003      	beq.n	8004b98 <TIM_Base_SetConfig+0x40>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a3a      	ldr	r2, [pc, #232]	; (8004c7c <TIM_Base_SetConfig+0x124>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d108      	bne.n	8004baa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a2f      	ldr	r2, [pc, #188]	; (8004c6c <TIM_Base_SetConfig+0x114>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d02b      	beq.n	8004c0a <TIM_Base_SetConfig+0xb2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb8:	d027      	beq.n	8004c0a <TIM_Base_SetConfig+0xb2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a2c      	ldr	r2, [pc, #176]	; (8004c70 <TIM_Base_SetConfig+0x118>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d023      	beq.n	8004c0a <TIM_Base_SetConfig+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a2b      	ldr	r2, [pc, #172]	; (8004c74 <TIM_Base_SetConfig+0x11c>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d01f      	beq.n	8004c0a <TIM_Base_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a2a      	ldr	r2, [pc, #168]	; (8004c78 <TIM_Base_SetConfig+0x120>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d01b      	beq.n	8004c0a <TIM_Base_SetConfig+0xb2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a29      	ldr	r2, [pc, #164]	; (8004c7c <TIM_Base_SetConfig+0x124>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d017      	beq.n	8004c0a <TIM_Base_SetConfig+0xb2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a28      	ldr	r2, [pc, #160]	; (8004c80 <TIM_Base_SetConfig+0x128>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d013      	beq.n	8004c0a <TIM_Base_SetConfig+0xb2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a27      	ldr	r2, [pc, #156]	; (8004c84 <TIM_Base_SetConfig+0x12c>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d00f      	beq.n	8004c0a <TIM_Base_SetConfig+0xb2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a26      	ldr	r2, [pc, #152]	; (8004c88 <TIM_Base_SetConfig+0x130>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00b      	beq.n	8004c0a <TIM_Base_SetConfig+0xb2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a25      	ldr	r2, [pc, #148]	; (8004c8c <TIM_Base_SetConfig+0x134>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d007      	beq.n	8004c0a <TIM_Base_SetConfig+0xb2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a24      	ldr	r2, [pc, #144]	; (8004c90 <TIM_Base_SetConfig+0x138>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d003      	beq.n	8004c0a <TIM_Base_SetConfig+0xb2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a23      	ldr	r2, [pc, #140]	; (8004c94 <TIM_Base_SetConfig+0x13c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d108      	bne.n	8004c1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a0a      	ldr	r2, [pc, #40]	; (8004c6c <TIM_Base_SetConfig+0x114>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d003      	beq.n	8004c50 <TIM_Base_SetConfig+0xf8>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a0c      	ldr	r2, [pc, #48]	; (8004c7c <TIM_Base_SetConfig+0x124>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d103      	bne.n	8004c58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	691a      	ldr	r2, [r3, #16]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	615a      	str	r2, [r3, #20]
}
 8004c5e:	bf00      	nop
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40010000 	.word	0x40010000
 8004c70:	40000400 	.word	0x40000400
 8004c74:	40000800 	.word	0x40000800
 8004c78:	40000c00 	.word	0x40000c00
 8004c7c:	40010400 	.word	0x40010400
 8004c80:	40014000 	.word	0x40014000
 8004c84:	40014400 	.word	0x40014400
 8004c88:	40014800 	.word	0x40014800
 8004c8c:	40001800 	.word	0x40001800
 8004c90:	40001c00 	.word	0x40001c00
 8004c94:	40002000 	.word	0x40002000

08004c98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	f023 0201 	bic.w	r2, r3, #1
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f023 030a 	bic.w	r3, r3, #10
 8004cd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	621a      	str	r2, [r3, #32]
}
 8004cea:	bf00      	nop
 8004cec:	371c      	adds	r7, #28
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b087      	sub	sp, #28
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	60f8      	str	r0, [r7, #12]
 8004cfe:	60b9      	str	r1, [r7, #8]
 8004d00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	f023 0210 	bic.w	r2, r3, #16
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	031b      	lsls	r3, r3, #12
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	011b      	lsls	r3, r3, #4
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	621a      	str	r2, [r3, #32]
}
 8004d4a:	bf00      	nop
 8004d4c:	371c      	adds	r7, #28
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b085      	sub	sp, #20
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
 8004d5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f043 0307 	orr.w	r3, r3, #7
 8004d78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	609a      	str	r2, [r3, #8]
}
 8004d80:	bf00      	nop
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
 8004d98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004da6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	021a      	lsls	r2, r3, #8
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	431a      	orrs	r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	609a      	str	r2, [r3, #8]
}
 8004dc0:	bf00      	nop
 8004dc2:	371c      	adds	r7, #28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d101      	bne.n	8004de4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e05a      	b.n	8004e9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a21      	ldr	r2, [pc, #132]	; (8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d022      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e30:	d01d      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a1d      	ldr	r2, [pc, #116]	; (8004eac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d018      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a1b      	ldr	r2, [pc, #108]	; (8004eb0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d013      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a1a      	ldr	r2, [pc, #104]	; (8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d00e      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a18      	ldr	r2, [pc, #96]	; (8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d009      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a17      	ldr	r2, [pc, #92]	; (8004ebc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d004      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a15      	ldr	r2, [pc, #84]	; (8004ec0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d10c      	bne.n	8004e88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	40010000 	.word	0x40010000
 8004eac:	40000400 	.word	0x40000400
 8004eb0:	40000800 	.word	0x40000800
 8004eb4:	40000c00 	.word	0x40000c00
 8004eb8:	40010400 	.word	0x40010400
 8004ebc:	40014000 	.word	0x40014000
 8004ec0:	40001800 	.word	0x40001800

08004ec4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e03f      	b.n	8004f7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d106      	bne.n	8004f18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7fc f960 	bl	80011d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2224      	movs	r2, #36	; 0x24
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 fd71 	bl	8005a18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	691a      	ldr	r2, [r3, #16]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	695a      	ldr	r2, [r3, #20]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68da      	ldr	r2, [r3, #12]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2220      	movs	r2, #32
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b08a      	sub	sp, #40	; 0x28
 8004f8a:	af02      	add	r7, sp, #8
 8004f8c:	60f8      	str	r0, [r7, #12]
 8004f8e:	60b9      	str	r1, [r7, #8]
 8004f90:	603b      	str	r3, [r7, #0]
 8004f92:	4613      	mov	r3, r2
 8004f94:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f96:	2300      	movs	r3, #0
 8004f98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b20      	cmp	r3, #32
 8004fa4:	d17c      	bne.n	80050a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d002      	beq.n	8004fb2 <HAL_UART_Transmit+0x2c>
 8004fac:	88fb      	ldrh	r3, [r7, #6]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e075      	b.n	80050a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d101      	bne.n	8004fc4 <HAL_UART_Transmit+0x3e>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	e06e      	b.n	80050a2 <HAL_UART_Transmit+0x11c>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2221      	movs	r2, #33	; 0x21
 8004fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fda:	f7fc fa97 	bl	800150c <HAL_GetTick>
 8004fde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	88fa      	ldrh	r2, [r7, #6]
 8004fe4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	88fa      	ldrh	r2, [r7, #6]
 8004fea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff4:	d108      	bne.n	8005008 <HAL_UART_Transmit+0x82>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d104      	bne.n	8005008 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	61bb      	str	r3, [r7, #24]
 8005006:	e003      	b.n	8005010 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800500c:	2300      	movs	r3, #0
 800500e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005018:	e02a      	b.n	8005070 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	2200      	movs	r2, #0
 8005022:	2180      	movs	r1, #128	; 0x80
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f000 faef 	bl	8005608 <UART_WaitOnFlagUntilTimeout>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d001      	beq.n	8005034 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e036      	b.n	80050a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10b      	bne.n	8005052 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	461a      	mov	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005048:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	3302      	adds	r3, #2
 800504e:	61bb      	str	r3, [r7, #24]
 8005050:	e007      	b.n	8005062 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	781a      	ldrb	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	3301      	adds	r3, #1
 8005060:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005066:	b29b      	uxth	r3, r3
 8005068:	3b01      	subs	r3, #1
 800506a:	b29a      	uxth	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005074:	b29b      	uxth	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1cf      	bne.n	800501a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	2200      	movs	r2, #0
 8005082:	2140      	movs	r1, #64	; 0x40
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 fabf 	bl	8005608 <UART_WaitOnFlagUntilTimeout>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e006      	b.n	80050a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2220      	movs	r2, #32
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800509c:	2300      	movs	r3, #0
 800509e:	e000      	b.n	80050a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80050a0:	2302      	movs	r3, #2
  }
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3720      	adds	r7, #32
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
	...

080050ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b0ba      	sub	sp, #232	; 0xe8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80050d8:	2300      	movs	r3, #0
 80050da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80050de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050e2:	f003 030f 	and.w	r3, r3, #15
 80050e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80050ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10f      	bne.n	8005112 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050f6:	f003 0320 	and.w	r3, r3, #32
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d009      	beq.n	8005112 <HAL_UART_IRQHandler+0x66>
 80050fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005102:	f003 0320 	and.w	r3, r3, #32
 8005106:	2b00      	cmp	r3, #0
 8005108:	d003      	beq.n	8005112 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fbc9 	bl	80058a2 <UART_Receive_IT>
      return;
 8005110:	e256      	b.n	80055c0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005112:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 80de 	beq.w	80052d8 <HAL_UART_IRQHandler+0x22c>
 800511c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	2b00      	cmp	r3, #0
 8005126:	d106      	bne.n	8005136 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800512c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 80d1 	beq.w	80052d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00b      	beq.n	800515a <HAL_UART_IRQHandler+0xae>
 8005142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800514a:	2b00      	cmp	r3, #0
 800514c:	d005      	beq.n	800515a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005152:	f043 0201 	orr.w	r2, r3, #1
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800515a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800515e:	f003 0304 	and.w	r3, r3, #4
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00b      	beq.n	800517e <HAL_UART_IRQHandler+0xd2>
 8005166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d005      	beq.n	800517e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	f043 0202 	orr.w	r2, r3, #2
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800517e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00b      	beq.n	80051a2 <HAL_UART_IRQHandler+0xf6>
 800518a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d005      	beq.n	80051a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	f043 0204 	orr.w	r2, r3, #4
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80051a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051a6:	f003 0308 	and.w	r3, r3, #8
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d011      	beq.n	80051d2 <HAL_UART_IRQHandler+0x126>
 80051ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051b2:	f003 0320 	and.w	r3, r3, #32
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d105      	bne.n	80051c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80051ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d005      	beq.n	80051d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	f043 0208 	orr.w	r2, r3, #8
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 81ed 	beq.w	80055b6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051e0:	f003 0320 	and.w	r3, r3, #32
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d008      	beq.n	80051fa <HAL_UART_IRQHandler+0x14e>
 80051e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051ec:	f003 0320 	and.w	r3, r3, #32
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 fb54 	bl	80058a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005204:	2b40      	cmp	r3, #64	; 0x40
 8005206:	bf0c      	ite	eq
 8005208:	2301      	moveq	r3, #1
 800520a:	2300      	movne	r3, #0
 800520c:	b2db      	uxtb	r3, r3
 800520e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	f003 0308 	and.w	r3, r3, #8
 800521a:	2b00      	cmp	r3, #0
 800521c:	d103      	bne.n	8005226 <HAL_UART_IRQHandler+0x17a>
 800521e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005222:	2b00      	cmp	r3, #0
 8005224:	d04f      	beq.n	80052c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fa5c 	bl	80056e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005236:	2b40      	cmp	r3, #64	; 0x40
 8005238:	d141      	bne.n	80052be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	3314      	adds	r3, #20
 8005240:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005244:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005248:	e853 3f00 	ldrex	r3, [r3]
 800524c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005250:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005258:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3314      	adds	r3, #20
 8005262:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005266:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800526a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005272:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005276:	e841 2300 	strex	r3, r2, [r1]
 800527a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800527e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1d9      	bne.n	800523a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528a:	2b00      	cmp	r3, #0
 800528c:	d013      	beq.n	80052b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005292:	4a7d      	ldr	r2, [pc, #500]	; (8005488 <HAL_UART_IRQHandler+0x3dc>)
 8005294:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529a:	4618      	mov	r0, r3
 800529c:	f7fc fab8 	bl	8001810 <HAL_DMA_Abort_IT>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d016      	beq.n	80052d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052b0:	4610      	mov	r0, r2
 80052b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b4:	e00e      	b.n	80052d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f990 	bl	80055dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052bc:	e00a      	b.n	80052d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f98c 	bl	80055dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052c4:	e006      	b.n	80052d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f988 	bl	80055dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80052d2:	e170      	b.n	80055b6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052d4:	bf00      	nop
    return;
 80052d6:	e16e      	b.n	80055b6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052dc:	2b01      	cmp	r3, #1
 80052de:	f040 814a 	bne.w	8005576 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80052e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052e6:	f003 0310 	and.w	r3, r3, #16
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 8143 	beq.w	8005576 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80052f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052f4:	f003 0310 	and.w	r3, r3, #16
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 813c 	beq.w	8005576 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052fe:	2300      	movs	r3, #0
 8005300:	60bb      	str	r3, [r7, #8]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	60bb      	str	r3, [r7, #8]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	60bb      	str	r3, [r7, #8]
 8005312:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531e:	2b40      	cmp	r3, #64	; 0x40
 8005320:	f040 80b4 	bne.w	800548c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005330:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 8140 	beq.w	80055ba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800533e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005342:	429a      	cmp	r2, r3
 8005344:	f080 8139 	bcs.w	80055ba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800534e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005354:	69db      	ldr	r3, [r3, #28]
 8005356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800535a:	f000 8088 	beq.w	800546e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	330c      	adds	r3, #12
 8005364:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005368:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800536c:	e853 3f00 	ldrex	r3, [r3]
 8005370:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005374:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800537c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	330c      	adds	r3, #12
 8005386:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800538a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800538e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005392:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005396:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800539a:	e841 2300 	strex	r3, r2, [r1]
 800539e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80053a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1d9      	bne.n	800535e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3314      	adds	r3, #20
 80053b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053b4:	e853 3f00 	ldrex	r3, [r3]
 80053b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80053ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053bc:	f023 0301 	bic.w	r3, r3, #1
 80053c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	3314      	adds	r3, #20
 80053ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80053ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80053d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80053d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80053da:	e841 2300 	strex	r3, r2, [r1]
 80053de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80053e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1e1      	bne.n	80053aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	3314      	adds	r3, #20
 80053ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053f0:	e853 3f00 	ldrex	r3, [r3]
 80053f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80053f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	3314      	adds	r3, #20
 8005406:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800540a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800540c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005410:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005412:	e841 2300 	strex	r3, r2, [r1]
 8005416:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005418:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1e3      	bne.n	80053e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2220      	movs	r2, #32
 8005422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	330c      	adds	r3, #12
 8005432:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005436:	e853 3f00 	ldrex	r3, [r3]
 800543a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800543c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800543e:	f023 0310 	bic.w	r3, r3, #16
 8005442:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	330c      	adds	r3, #12
 800544c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005450:	65ba      	str	r2, [r7, #88]	; 0x58
 8005452:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005454:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005456:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005458:	e841 2300 	strex	r3, r2, [r1]
 800545c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800545e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1e3      	bne.n	800542c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005468:	4618      	mov	r0, r3
 800546a:	f7fc f961 	bl	8001730 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005476:	b29b      	uxth	r3, r3
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	b29b      	uxth	r3, r3
 800547c:	4619      	mov	r1, r3
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f8b6 	bl	80055f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005484:	e099      	b.n	80055ba <HAL_UART_IRQHandler+0x50e>
 8005486:	bf00      	nop
 8005488:	080057ab 	.word	0x080057ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005494:	b29b      	uxth	r3, r3
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 808b 	beq.w	80055be <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80054a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 8086 	beq.w	80055be <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	330c      	adds	r3, #12
 80054b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054bc:	e853 3f00 	ldrex	r3, [r3]
 80054c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	330c      	adds	r3, #12
 80054d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80054d6:	647a      	str	r2, [r7, #68]	; 0x44
 80054d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054de:	e841 2300 	strex	r3, r2, [r1]
 80054e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1e3      	bne.n	80054b2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	3314      	adds	r3, #20
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	e853 3f00 	ldrex	r3, [r3]
 80054f8:	623b      	str	r3, [r7, #32]
   return(result);
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	f023 0301 	bic.w	r3, r3, #1
 8005500:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3314      	adds	r3, #20
 800550a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800550e:	633a      	str	r2, [r7, #48]	; 0x30
 8005510:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005512:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005516:	e841 2300 	strex	r3, r2, [r1]
 800551a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800551c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1e3      	bne.n	80054ea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2220      	movs	r2, #32
 8005526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	330c      	adds	r3, #12
 8005536:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	e853 3f00 	ldrex	r3, [r3]
 800553e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 0310 	bic.w	r3, r3, #16
 8005546:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	330c      	adds	r3, #12
 8005550:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005554:	61fa      	str	r2, [r7, #28]
 8005556:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005558:	69b9      	ldr	r1, [r7, #24]
 800555a:	69fa      	ldr	r2, [r7, #28]
 800555c:	e841 2300 	strex	r3, r2, [r1]
 8005560:	617b      	str	r3, [r7, #20]
   return(result);
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1e3      	bne.n	8005530 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005568:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800556c:	4619      	mov	r1, r3
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f83e 	bl	80055f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005574:	e023      	b.n	80055be <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800557a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800557e:	2b00      	cmp	r3, #0
 8005580:	d009      	beq.n	8005596 <HAL_UART_IRQHandler+0x4ea>
 8005582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f91f 	bl	80057d2 <UART_Transmit_IT>
    return;
 8005594:	e014      	b.n	80055c0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800559a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00e      	beq.n	80055c0 <HAL_UART_IRQHandler+0x514>
 80055a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d008      	beq.n	80055c0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f95f 	bl	8005872 <UART_EndTransmit_IT>
    return;
 80055b4:	e004      	b.n	80055c0 <HAL_UART_IRQHandler+0x514>
    return;
 80055b6:	bf00      	nop
 80055b8:	e002      	b.n	80055c0 <HAL_UART_IRQHandler+0x514>
      return;
 80055ba:	bf00      	nop
 80055bc:	e000      	b.n	80055c0 <HAL_UART_IRQHandler+0x514>
      return;
 80055be:	bf00      	nop
  }
}
 80055c0:	37e8      	adds	r7, #232	; 0xe8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop

080055c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	460b      	mov	r3, r1
 80055fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b090      	sub	sp, #64	; 0x40
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	603b      	str	r3, [r7, #0]
 8005614:	4613      	mov	r3, r2
 8005616:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005618:	e050      	b.n	80056bc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800561a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800561c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005620:	d04c      	beq.n	80056bc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005624:	2b00      	cmp	r3, #0
 8005626:	d007      	beq.n	8005638 <UART_WaitOnFlagUntilTimeout+0x30>
 8005628:	f7fb ff70 	bl	800150c <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005634:	429a      	cmp	r2, r3
 8005636:	d241      	bcs.n	80056bc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	330c      	adds	r3, #12
 800563e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005642:	e853 3f00 	ldrex	r3, [r3]
 8005646:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800564e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	330c      	adds	r3, #12
 8005656:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005658:	637a      	str	r2, [r7, #52]	; 0x34
 800565a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800565e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005660:	e841 2300 	strex	r3, r2, [r1]
 8005664:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1e5      	bne.n	8005638 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	3314      	adds	r3, #20
 8005672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	e853 3f00 	ldrex	r3, [r3]
 800567a:	613b      	str	r3, [r7, #16]
   return(result);
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f023 0301 	bic.w	r3, r3, #1
 8005682:	63bb      	str	r3, [r7, #56]	; 0x38
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	3314      	adds	r3, #20
 800568a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800568c:	623a      	str	r2, [r7, #32]
 800568e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005690:	69f9      	ldr	r1, [r7, #28]
 8005692:	6a3a      	ldr	r2, [r7, #32]
 8005694:	e841 2300 	strex	r3, r2, [r1]
 8005698:	61bb      	str	r3, [r7, #24]
   return(result);
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1e5      	bne.n	800566c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2220      	movs	r2, #32
 80056ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e00f      	b.n	80056dc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	4013      	ands	r3, r2
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	bf0c      	ite	eq
 80056cc:	2301      	moveq	r3, #1
 80056ce:	2300      	movne	r3, #0
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	461a      	mov	r2, r3
 80056d4:	79fb      	ldrb	r3, [r7, #7]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d09f      	beq.n	800561a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3740      	adds	r7, #64	; 0x40
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b095      	sub	sp, #84	; 0x54
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	330c      	adds	r3, #12
 80056f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f6:	e853 3f00 	ldrex	r3, [r3]
 80056fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	330c      	adds	r3, #12
 800570a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800570c:	643a      	str	r2, [r7, #64]	; 0x40
 800570e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005710:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005712:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005714:	e841 2300 	strex	r3, r2, [r1]
 8005718:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800571a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1e5      	bne.n	80056ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	3314      	adds	r3, #20
 8005726:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	e853 3f00 	ldrex	r3, [r3]
 800572e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	f023 0301 	bic.w	r3, r3, #1
 8005736:	64bb      	str	r3, [r7, #72]	; 0x48
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3314      	adds	r3, #20
 800573e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005740:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005742:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005744:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005748:	e841 2300 	strex	r3, r2, [r1]
 800574c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1e5      	bne.n	8005720 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005758:	2b01      	cmp	r3, #1
 800575a:	d119      	bne.n	8005790 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	330c      	adds	r3, #12
 8005762:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	e853 3f00 	ldrex	r3, [r3]
 800576a:	60bb      	str	r3, [r7, #8]
   return(result);
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f023 0310 	bic.w	r3, r3, #16
 8005772:	647b      	str	r3, [r7, #68]	; 0x44
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	330c      	adds	r3, #12
 800577a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800577c:	61ba      	str	r2, [r7, #24]
 800577e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005780:	6979      	ldr	r1, [r7, #20]
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	e841 2300 	strex	r3, r2, [r1]
 8005788:	613b      	str	r3, [r7, #16]
   return(result);
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1e5      	bne.n	800575c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2220      	movs	r2, #32
 8005794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800579e:	bf00      	nop
 80057a0:	3754      	adds	r7, #84	; 0x54
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b084      	sub	sp, #16
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f7ff ff09 	bl	80055dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057ca:	bf00      	nop
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b085      	sub	sp, #20
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b21      	cmp	r3, #33	; 0x21
 80057e4:	d13e      	bne.n	8005864 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ee:	d114      	bne.n	800581a <UART_Transmit_IT+0x48>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d110      	bne.n	800581a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	461a      	mov	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800580c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	1c9a      	adds	r2, r3, #2
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	621a      	str	r2, [r3, #32]
 8005818:	e008      	b.n	800582c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	1c59      	adds	r1, r3, #1
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6211      	str	r1, [r2, #32]
 8005824:	781a      	ldrb	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005830:	b29b      	uxth	r3, r3
 8005832:	3b01      	subs	r3, #1
 8005834:	b29b      	uxth	r3, r3
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	4619      	mov	r1, r3
 800583a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10f      	bne.n	8005860 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68da      	ldr	r2, [r3, #12]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800584e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800585e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005860:	2300      	movs	r3, #0
 8005862:	e000      	b.n	8005866 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005864:	2302      	movs	r3, #2
  }
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b082      	sub	sp, #8
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68da      	ldr	r2, [r3, #12]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005888:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2220      	movs	r2, #32
 800588e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7ff fe98 	bl	80055c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3708      	adds	r7, #8
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b08c      	sub	sp, #48	; 0x30
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b22      	cmp	r3, #34	; 0x22
 80058b4:	f040 80ab 	bne.w	8005a0e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c0:	d117      	bne.n	80058f2 <UART_Receive_IT+0x50>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d113      	bne.n	80058f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80058ca:	2300      	movs	r3, #0
 80058cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	b29b      	uxth	r3, r3
 80058dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ea:	1c9a      	adds	r2, r3, #2
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	629a      	str	r2, [r3, #40]	; 0x28
 80058f0:	e026      	b.n	8005940 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80058f8:	2300      	movs	r3, #0
 80058fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005904:	d007      	beq.n	8005916 <UART_Receive_IT+0x74>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10a      	bne.n	8005924 <UART_Receive_IT+0x82>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d106      	bne.n	8005924 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	b2da      	uxtb	r2, r3
 800591e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005920:	701a      	strb	r2, [r3, #0]
 8005922:	e008      	b.n	8005936 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	b2db      	uxtb	r3, r3
 800592c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005930:	b2da      	uxtb	r2, r3
 8005932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005934:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593a:	1c5a      	adds	r2, r3, #1
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005944:	b29b      	uxth	r3, r3
 8005946:	3b01      	subs	r3, #1
 8005948:	b29b      	uxth	r3, r3
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	4619      	mov	r1, r3
 800594e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005950:	2b00      	cmp	r3, #0
 8005952:	d15a      	bne.n	8005a0a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68da      	ldr	r2, [r3, #12]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 0220 	bic.w	r2, r2, #32
 8005962:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005972:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	695a      	ldr	r2, [r3, #20]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0201 	bic.w	r2, r2, #1
 8005982:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2220      	movs	r2, #32
 8005988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005990:	2b01      	cmp	r3, #1
 8005992:	d135      	bne.n	8005a00 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	330c      	adds	r3, #12
 80059a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	e853 3f00 	ldrex	r3, [r3]
 80059a8:	613b      	str	r3, [r7, #16]
   return(result);
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	f023 0310 	bic.w	r3, r3, #16
 80059b0:	627b      	str	r3, [r7, #36]	; 0x24
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	330c      	adds	r3, #12
 80059b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ba:	623a      	str	r2, [r7, #32]
 80059bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059be:	69f9      	ldr	r1, [r7, #28]
 80059c0:	6a3a      	ldr	r2, [r7, #32]
 80059c2:	e841 2300 	strex	r3, r2, [r1]
 80059c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1e5      	bne.n	800599a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0310 	and.w	r3, r3, #16
 80059d8:	2b10      	cmp	r3, #16
 80059da:	d10a      	bne.n	80059f2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059dc:	2300      	movs	r3, #0
 80059de:	60fb      	str	r3, [r7, #12]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059f6:	4619      	mov	r1, r3
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f7ff fdf9 	bl	80055f0 <HAL_UARTEx_RxEventCallback>
 80059fe:	e002      	b.n	8005a06 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f7fb f9c9 	bl	8000d98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	e002      	b.n	8005a10 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	e000      	b.n	8005a10 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005a0e:	2302      	movs	r3, #2
  }
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3730      	adds	r7, #48	; 0x30
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a1c:	b0c0      	sub	sp, #256	; 0x100
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a34:	68d9      	ldr	r1, [r3, #12]
 8005a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	ea40 0301 	orr.w	r3, r0, r1
 8005a40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	431a      	orrs	r2, r3
 8005a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a70:	f021 010c 	bic.w	r1, r1, #12
 8005a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a7e:	430b      	orrs	r3, r1
 8005a80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a92:	6999      	ldr	r1, [r3, #24]
 8005a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	ea40 0301 	orr.w	r3, r0, r1
 8005a9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	4b8f      	ldr	r3, [pc, #572]	; (8005ce4 <UART_SetConfig+0x2cc>)
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d005      	beq.n	8005ab8 <UART_SetConfig+0xa0>
 8005aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	4b8d      	ldr	r3, [pc, #564]	; (8005ce8 <UART_SetConfig+0x2d0>)
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d104      	bne.n	8005ac2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ab8:	f7fe fba8 	bl	800420c <HAL_RCC_GetPCLK2Freq>
 8005abc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005ac0:	e003      	b.n	8005aca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ac2:	f7fe fb8f 	bl	80041e4 <HAL_RCC_GetPCLK1Freq>
 8005ac6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ace:	69db      	ldr	r3, [r3, #28]
 8005ad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ad4:	f040 810c 	bne.w	8005cf0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ad8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005adc:	2200      	movs	r2, #0
 8005ade:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ae2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005ae6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005aea:	4622      	mov	r2, r4
 8005aec:	462b      	mov	r3, r5
 8005aee:	1891      	adds	r1, r2, r2
 8005af0:	65b9      	str	r1, [r7, #88]	; 0x58
 8005af2:	415b      	adcs	r3, r3
 8005af4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005af6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005afa:	4621      	mov	r1, r4
 8005afc:	eb12 0801 	adds.w	r8, r2, r1
 8005b00:	4629      	mov	r1, r5
 8005b02:	eb43 0901 	adc.w	r9, r3, r1
 8005b06:	f04f 0200 	mov.w	r2, #0
 8005b0a:	f04f 0300 	mov.w	r3, #0
 8005b0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b1a:	4690      	mov	r8, r2
 8005b1c:	4699      	mov	r9, r3
 8005b1e:	4623      	mov	r3, r4
 8005b20:	eb18 0303 	adds.w	r3, r8, r3
 8005b24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b28:	462b      	mov	r3, r5
 8005b2a:	eb49 0303 	adc.w	r3, r9, r3
 8005b2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005b42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005b46:	460b      	mov	r3, r1
 8005b48:	18db      	adds	r3, r3, r3
 8005b4a:	653b      	str	r3, [r7, #80]	; 0x50
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	eb42 0303 	adc.w	r3, r2, r3
 8005b52:	657b      	str	r3, [r7, #84]	; 0x54
 8005b54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005b58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005b5c:	f7fa fb88 	bl	8000270 <__aeabi_uldivmod>
 8005b60:	4602      	mov	r2, r0
 8005b62:	460b      	mov	r3, r1
 8005b64:	4b61      	ldr	r3, [pc, #388]	; (8005cec <UART_SetConfig+0x2d4>)
 8005b66:	fba3 2302 	umull	r2, r3, r3, r2
 8005b6a:	095b      	lsrs	r3, r3, #5
 8005b6c:	011c      	lsls	r4, r3, #4
 8005b6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b72:	2200      	movs	r2, #0
 8005b74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005b7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005b80:	4642      	mov	r2, r8
 8005b82:	464b      	mov	r3, r9
 8005b84:	1891      	adds	r1, r2, r2
 8005b86:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b88:	415b      	adcs	r3, r3
 8005b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b90:	4641      	mov	r1, r8
 8005b92:	eb12 0a01 	adds.w	sl, r2, r1
 8005b96:	4649      	mov	r1, r9
 8005b98:	eb43 0b01 	adc.w	fp, r3, r1
 8005b9c:	f04f 0200 	mov.w	r2, #0
 8005ba0:	f04f 0300 	mov.w	r3, #0
 8005ba4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ba8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005bac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bb0:	4692      	mov	sl, r2
 8005bb2:	469b      	mov	fp, r3
 8005bb4:	4643      	mov	r3, r8
 8005bb6:	eb1a 0303 	adds.w	r3, sl, r3
 8005bba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bbe:	464b      	mov	r3, r9
 8005bc0:	eb4b 0303 	adc.w	r3, fp, r3
 8005bc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bd4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005bd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	18db      	adds	r3, r3, r3
 8005be0:	643b      	str	r3, [r7, #64]	; 0x40
 8005be2:	4613      	mov	r3, r2
 8005be4:	eb42 0303 	adc.w	r3, r2, r3
 8005be8:	647b      	str	r3, [r7, #68]	; 0x44
 8005bea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005bee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005bf2:	f7fa fb3d 	bl	8000270 <__aeabi_uldivmod>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	4611      	mov	r1, r2
 8005bfc:	4b3b      	ldr	r3, [pc, #236]	; (8005cec <UART_SetConfig+0x2d4>)
 8005bfe:	fba3 2301 	umull	r2, r3, r3, r1
 8005c02:	095b      	lsrs	r3, r3, #5
 8005c04:	2264      	movs	r2, #100	; 0x64
 8005c06:	fb02 f303 	mul.w	r3, r2, r3
 8005c0a:	1acb      	subs	r3, r1, r3
 8005c0c:	00db      	lsls	r3, r3, #3
 8005c0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005c12:	4b36      	ldr	r3, [pc, #216]	; (8005cec <UART_SetConfig+0x2d4>)
 8005c14:	fba3 2302 	umull	r2, r3, r3, r2
 8005c18:	095b      	lsrs	r3, r3, #5
 8005c1a:	005b      	lsls	r3, r3, #1
 8005c1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c20:	441c      	add	r4, r3
 8005c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c26:	2200      	movs	r2, #0
 8005c28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005c30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005c34:	4642      	mov	r2, r8
 8005c36:	464b      	mov	r3, r9
 8005c38:	1891      	adds	r1, r2, r2
 8005c3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c3c:	415b      	adcs	r3, r3
 8005c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c44:	4641      	mov	r1, r8
 8005c46:	1851      	adds	r1, r2, r1
 8005c48:	6339      	str	r1, [r7, #48]	; 0x30
 8005c4a:	4649      	mov	r1, r9
 8005c4c:	414b      	adcs	r3, r1
 8005c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8005c50:	f04f 0200 	mov.w	r2, #0
 8005c54:	f04f 0300 	mov.w	r3, #0
 8005c58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005c5c:	4659      	mov	r1, fp
 8005c5e:	00cb      	lsls	r3, r1, #3
 8005c60:	4651      	mov	r1, sl
 8005c62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c66:	4651      	mov	r1, sl
 8005c68:	00ca      	lsls	r2, r1, #3
 8005c6a:	4610      	mov	r0, r2
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4603      	mov	r3, r0
 8005c70:	4642      	mov	r2, r8
 8005c72:	189b      	adds	r3, r3, r2
 8005c74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c78:	464b      	mov	r3, r9
 8005c7a:	460a      	mov	r2, r1
 8005c7c:	eb42 0303 	adc.w	r3, r2, r3
 8005c80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c98:	460b      	mov	r3, r1
 8005c9a:	18db      	adds	r3, r3, r3
 8005c9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	eb42 0303 	adc.w	r3, r2, r3
 8005ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ca6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005caa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005cae:	f7fa fadf 	bl	8000270 <__aeabi_uldivmod>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	4b0d      	ldr	r3, [pc, #52]	; (8005cec <UART_SetConfig+0x2d4>)
 8005cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8005cbc:	095b      	lsrs	r3, r3, #5
 8005cbe:	2164      	movs	r1, #100	; 0x64
 8005cc0:	fb01 f303 	mul.w	r3, r1, r3
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	3332      	adds	r3, #50	; 0x32
 8005cca:	4a08      	ldr	r2, [pc, #32]	; (8005cec <UART_SetConfig+0x2d4>)
 8005ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd0:	095b      	lsrs	r3, r3, #5
 8005cd2:	f003 0207 	and.w	r2, r3, #7
 8005cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4422      	add	r2, r4
 8005cde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ce0:	e105      	b.n	8005eee <UART_SetConfig+0x4d6>
 8005ce2:	bf00      	nop
 8005ce4:	40011000 	.word	0x40011000
 8005ce8:	40011400 	.word	0x40011400
 8005cec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005cfa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005cfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005d02:	4642      	mov	r2, r8
 8005d04:	464b      	mov	r3, r9
 8005d06:	1891      	adds	r1, r2, r2
 8005d08:	6239      	str	r1, [r7, #32]
 8005d0a:	415b      	adcs	r3, r3
 8005d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d12:	4641      	mov	r1, r8
 8005d14:	1854      	adds	r4, r2, r1
 8005d16:	4649      	mov	r1, r9
 8005d18:	eb43 0501 	adc.w	r5, r3, r1
 8005d1c:	f04f 0200 	mov.w	r2, #0
 8005d20:	f04f 0300 	mov.w	r3, #0
 8005d24:	00eb      	lsls	r3, r5, #3
 8005d26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d2a:	00e2      	lsls	r2, r4, #3
 8005d2c:	4614      	mov	r4, r2
 8005d2e:	461d      	mov	r5, r3
 8005d30:	4643      	mov	r3, r8
 8005d32:	18e3      	adds	r3, r4, r3
 8005d34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d38:	464b      	mov	r3, r9
 8005d3a:	eb45 0303 	adc.w	r3, r5, r3
 8005d3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d52:	f04f 0200 	mov.w	r2, #0
 8005d56:	f04f 0300 	mov.w	r3, #0
 8005d5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005d5e:	4629      	mov	r1, r5
 8005d60:	008b      	lsls	r3, r1, #2
 8005d62:	4621      	mov	r1, r4
 8005d64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d68:	4621      	mov	r1, r4
 8005d6a:	008a      	lsls	r2, r1, #2
 8005d6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d70:	f7fa fa7e 	bl	8000270 <__aeabi_uldivmod>
 8005d74:	4602      	mov	r2, r0
 8005d76:	460b      	mov	r3, r1
 8005d78:	4b60      	ldr	r3, [pc, #384]	; (8005efc <UART_SetConfig+0x4e4>)
 8005d7a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d7e:	095b      	lsrs	r3, r3, #5
 8005d80:	011c      	lsls	r4, r3, #4
 8005d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d86:	2200      	movs	r2, #0
 8005d88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d94:	4642      	mov	r2, r8
 8005d96:	464b      	mov	r3, r9
 8005d98:	1891      	adds	r1, r2, r2
 8005d9a:	61b9      	str	r1, [r7, #24]
 8005d9c:	415b      	adcs	r3, r3
 8005d9e:	61fb      	str	r3, [r7, #28]
 8005da0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005da4:	4641      	mov	r1, r8
 8005da6:	1851      	adds	r1, r2, r1
 8005da8:	6139      	str	r1, [r7, #16]
 8005daa:	4649      	mov	r1, r9
 8005dac:	414b      	adcs	r3, r1
 8005dae:	617b      	str	r3, [r7, #20]
 8005db0:	f04f 0200 	mov.w	r2, #0
 8005db4:	f04f 0300 	mov.w	r3, #0
 8005db8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005dbc:	4659      	mov	r1, fp
 8005dbe:	00cb      	lsls	r3, r1, #3
 8005dc0:	4651      	mov	r1, sl
 8005dc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dc6:	4651      	mov	r1, sl
 8005dc8:	00ca      	lsls	r2, r1, #3
 8005dca:	4610      	mov	r0, r2
 8005dcc:	4619      	mov	r1, r3
 8005dce:	4603      	mov	r3, r0
 8005dd0:	4642      	mov	r2, r8
 8005dd2:	189b      	adds	r3, r3, r2
 8005dd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005dd8:	464b      	mov	r3, r9
 8005dda:	460a      	mov	r2, r1
 8005ddc:	eb42 0303 	adc.w	r3, r2, r3
 8005de0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	67bb      	str	r3, [r7, #120]	; 0x78
 8005dee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005df0:	f04f 0200 	mov.w	r2, #0
 8005df4:	f04f 0300 	mov.w	r3, #0
 8005df8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005dfc:	4649      	mov	r1, r9
 8005dfe:	008b      	lsls	r3, r1, #2
 8005e00:	4641      	mov	r1, r8
 8005e02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e06:	4641      	mov	r1, r8
 8005e08:	008a      	lsls	r2, r1, #2
 8005e0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005e0e:	f7fa fa2f 	bl	8000270 <__aeabi_uldivmod>
 8005e12:	4602      	mov	r2, r0
 8005e14:	460b      	mov	r3, r1
 8005e16:	4b39      	ldr	r3, [pc, #228]	; (8005efc <UART_SetConfig+0x4e4>)
 8005e18:	fba3 1302 	umull	r1, r3, r3, r2
 8005e1c:	095b      	lsrs	r3, r3, #5
 8005e1e:	2164      	movs	r1, #100	; 0x64
 8005e20:	fb01 f303 	mul.w	r3, r1, r3
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	011b      	lsls	r3, r3, #4
 8005e28:	3332      	adds	r3, #50	; 0x32
 8005e2a:	4a34      	ldr	r2, [pc, #208]	; (8005efc <UART_SetConfig+0x4e4>)
 8005e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e30:	095b      	lsrs	r3, r3, #5
 8005e32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e36:	441c      	add	r4, r3
 8005e38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	673b      	str	r3, [r7, #112]	; 0x70
 8005e40:	677a      	str	r2, [r7, #116]	; 0x74
 8005e42:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005e46:	4642      	mov	r2, r8
 8005e48:	464b      	mov	r3, r9
 8005e4a:	1891      	adds	r1, r2, r2
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	415b      	adcs	r3, r3
 8005e50:	60fb      	str	r3, [r7, #12]
 8005e52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e56:	4641      	mov	r1, r8
 8005e58:	1851      	adds	r1, r2, r1
 8005e5a:	6039      	str	r1, [r7, #0]
 8005e5c:	4649      	mov	r1, r9
 8005e5e:	414b      	adcs	r3, r1
 8005e60:	607b      	str	r3, [r7, #4]
 8005e62:	f04f 0200 	mov.w	r2, #0
 8005e66:	f04f 0300 	mov.w	r3, #0
 8005e6a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e6e:	4659      	mov	r1, fp
 8005e70:	00cb      	lsls	r3, r1, #3
 8005e72:	4651      	mov	r1, sl
 8005e74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e78:	4651      	mov	r1, sl
 8005e7a:	00ca      	lsls	r2, r1, #3
 8005e7c:	4610      	mov	r0, r2
 8005e7e:	4619      	mov	r1, r3
 8005e80:	4603      	mov	r3, r0
 8005e82:	4642      	mov	r2, r8
 8005e84:	189b      	adds	r3, r3, r2
 8005e86:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e88:	464b      	mov	r3, r9
 8005e8a:	460a      	mov	r2, r1
 8005e8c:	eb42 0303 	adc.w	r3, r2, r3
 8005e90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	663b      	str	r3, [r7, #96]	; 0x60
 8005e9c:	667a      	str	r2, [r7, #100]	; 0x64
 8005e9e:	f04f 0200 	mov.w	r2, #0
 8005ea2:	f04f 0300 	mov.w	r3, #0
 8005ea6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005eaa:	4649      	mov	r1, r9
 8005eac:	008b      	lsls	r3, r1, #2
 8005eae:	4641      	mov	r1, r8
 8005eb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005eb4:	4641      	mov	r1, r8
 8005eb6:	008a      	lsls	r2, r1, #2
 8005eb8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005ebc:	f7fa f9d8 	bl	8000270 <__aeabi_uldivmod>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4b0d      	ldr	r3, [pc, #52]	; (8005efc <UART_SetConfig+0x4e4>)
 8005ec6:	fba3 1302 	umull	r1, r3, r3, r2
 8005eca:	095b      	lsrs	r3, r3, #5
 8005ecc:	2164      	movs	r1, #100	; 0x64
 8005ece:	fb01 f303 	mul.w	r3, r1, r3
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	011b      	lsls	r3, r3, #4
 8005ed6:	3332      	adds	r3, #50	; 0x32
 8005ed8:	4a08      	ldr	r2, [pc, #32]	; (8005efc <UART_SetConfig+0x4e4>)
 8005eda:	fba2 2303 	umull	r2, r3, r2, r3
 8005ede:	095b      	lsrs	r3, r3, #5
 8005ee0:	f003 020f 	and.w	r2, r3, #15
 8005ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4422      	add	r2, r4
 8005eec:	609a      	str	r2, [r3, #8]
}
 8005eee:	bf00      	nop
 8005ef0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005efa:	bf00      	nop
 8005efc:	51eb851f 	.word	0x51eb851f

08005f00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f00:	b084      	sub	sp, #16
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b084      	sub	sp, #16
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	f107 001c 	add.w	r0, r7, #28
 8005f0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d122      	bne.n	8005f5e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005f2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d105      	bne.n	8005f52 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f9c0 	bl	80062d8 <USB_CoreReset>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	73fb      	strb	r3, [r7, #15]
 8005f5c:	e01a      	b.n	8005f94 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f9b4 	bl	80062d8 <USB_CoreReset>
 8005f70:	4603      	mov	r3, r0
 8005f72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d106      	bne.n	8005f88 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	639a      	str	r2, [r3, #56]	; 0x38
 8005f86:	e005      	b.n	8005f94 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d10b      	bne.n	8005fb2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f043 0206 	orr.w	r2, r3, #6
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f043 0220 	orr.w	r2, r3, #32
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fbe:	b004      	add	sp, #16
 8005fc0:	4770      	bx	lr

08005fc2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f043 0201 	orr.w	r2, r3, #1
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f023 0201 	bic.w	r2, r3, #1
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b084      	sub	sp, #16
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	460b      	mov	r3, r1
 8006010:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006012:	2300      	movs	r3, #0
 8006014:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006022:	78fb      	ldrb	r3, [r7, #3]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d115      	bne.n	8006054 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006034:	2001      	movs	r0, #1
 8006036:	f7fb fa75 	bl	8001524 <HAL_Delay>
      ms++;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	3301      	adds	r3, #1
 800603e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f93a 	bl	80062ba <USB_GetMode>
 8006046:	4603      	mov	r3, r0
 8006048:	2b01      	cmp	r3, #1
 800604a:	d01e      	beq.n	800608a <USB_SetCurrentMode+0x84>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2b31      	cmp	r3, #49	; 0x31
 8006050:	d9f0      	bls.n	8006034 <USB_SetCurrentMode+0x2e>
 8006052:	e01a      	b.n	800608a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006054:	78fb      	ldrb	r3, [r7, #3]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d115      	bne.n	8006086 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006066:	2001      	movs	r0, #1
 8006068:	f7fb fa5c 	bl	8001524 <HAL_Delay>
      ms++;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	3301      	adds	r3, #1
 8006070:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f921 	bl	80062ba <USB_GetMode>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d005      	beq.n	800608a <USB_SetCurrentMode+0x84>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2b31      	cmp	r3, #49	; 0x31
 8006082:	d9f0      	bls.n	8006066 <USB_SetCurrentMode+0x60>
 8006084:	e001      	b.n	800608a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e005      	b.n	8006096 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2b32      	cmp	r3, #50	; 0x32
 800608e:	d101      	bne.n	8006094 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e000      	b.n	8006096 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
	...

080060a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	3301      	adds	r3, #1
 80060b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4a13      	ldr	r2, [pc, #76]	; (8006104 <USB_FlushTxFifo+0x64>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d901      	bls.n	80060c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e01b      	b.n	80060f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	daf2      	bge.n	80060ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80060c8:	2300      	movs	r3, #0
 80060ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	019b      	lsls	r3, r3, #6
 80060d0:	f043 0220 	orr.w	r2, r3, #32
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	3301      	adds	r3, #1
 80060dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	4a08      	ldr	r2, [pc, #32]	; (8006104 <USB_FlushTxFifo+0x64>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d901      	bls.n	80060ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e006      	b.n	80060f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	f003 0320 	and.w	r3, r3, #32
 80060f2:	2b20      	cmp	r3, #32
 80060f4:	d0f0      	beq.n	80060d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3714      	adds	r7, #20
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr
 8006104:	00030d40 	.word	0x00030d40

08006108 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	3301      	adds	r3, #1
 8006118:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	4a11      	ldr	r2, [pc, #68]	; (8006164 <USB_FlushRxFifo+0x5c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d901      	bls.n	8006126 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e018      	b.n	8006158 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	2b00      	cmp	r3, #0
 800612c:	daf2      	bge.n	8006114 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2210      	movs	r2, #16
 8006136:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	3301      	adds	r3, #1
 800613c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	4a08      	ldr	r2, [pc, #32]	; (8006164 <USB_FlushRxFifo+0x5c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d901      	bls.n	800614a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e006      	b.n	8006158 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	f003 0310 	and.w	r3, r3, #16
 8006152:	2b10      	cmp	r3, #16
 8006154:	d0f0      	beq.n	8006138 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	00030d40 	.word	0x00030d40

08006168 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006168:	b480      	push	{r7}
 800616a:	b089      	sub	sp, #36	; 0x24
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	4611      	mov	r1, r2
 8006174:	461a      	mov	r2, r3
 8006176:	460b      	mov	r3, r1
 8006178:	71fb      	strb	r3, [r7, #7]
 800617a:	4613      	mov	r3, r2
 800617c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006186:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800618a:	2b00      	cmp	r3, #0
 800618c:	d123      	bne.n	80061d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800618e:	88bb      	ldrh	r3, [r7, #4]
 8006190:	3303      	adds	r3, #3
 8006192:	089b      	lsrs	r3, r3, #2
 8006194:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006196:	2300      	movs	r3, #0
 8006198:	61bb      	str	r3, [r7, #24]
 800619a:	e018      	b.n	80061ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800619c:	79fb      	ldrb	r3, [r7, #7]
 800619e:	031a      	lsls	r2, r3, #12
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061a8:	461a      	mov	r2, r3
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	3301      	adds	r3, #1
 80061b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	3301      	adds	r3, #1
 80061ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	3301      	adds	r3, #1
 80061c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	3301      	adds	r3, #1
 80061c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	3301      	adds	r3, #1
 80061cc:	61bb      	str	r3, [r7, #24]
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d3e2      	bcc.n	800619c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3724      	adds	r7, #36	; 0x24
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b08b      	sub	sp, #44	; 0x2c
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	4613      	mov	r3, r2
 80061f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80061fa:	88fb      	ldrh	r3, [r7, #6]
 80061fc:	089b      	lsrs	r3, r3, #2
 80061fe:	b29b      	uxth	r3, r3
 8006200:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006202:	88fb      	ldrh	r3, [r7, #6]
 8006204:	f003 0303 	and.w	r3, r3, #3
 8006208:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800620a:	2300      	movs	r3, #0
 800620c:	623b      	str	r3, [r7, #32]
 800620e:	e014      	b.n	800623a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621a:	601a      	str	r2, [r3, #0]
    pDest++;
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	3301      	adds	r3, #1
 8006220:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	3301      	adds	r3, #1
 8006226:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	3301      	adds	r3, #1
 800622c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006230:	3301      	adds	r3, #1
 8006232:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	3301      	adds	r3, #1
 8006238:	623b      	str	r3, [r7, #32]
 800623a:	6a3a      	ldr	r2, [r7, #32]
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	429a      	cmp	r2, r3
 8006240:	d3e6      	bcc.n	8006210 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006242:	8bfb      	ldrh	r3, [r7, #30]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d01e      	beq.n	8006286 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006252:	461a      	mov	r2, r3
 8006254:	f107 0310 	add.w	r3, r7, #16
 8006258:	6812      	ldr	r2, [r2, #0]
 800625a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	b2db      	uxtb	r3, r3
 8006262:	00db      	lsls	r3, r3, #3
 8006264:	fa22 f303 	lsr.w	r3, r2, r3
 8006268:	b2da      	uxtb	r2, r3
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626c:	701a      	strb	r2, [r3, #0]
      i++;
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	3301      	adds	r3, #1
 8006272:	623b      	str	r3, [r7, #32]
      pDest++;
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	3301      	adds	r3, #1
 8006278:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800627a:	8bfb      	ldrh	r3, [r7, #30]
 800627c:	3b01      	subs	r3, #1
 800627e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006280:	8bfb      	ldrh	r3, [r7, #30]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1ea      	bne.n	800625c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006288:	4618      	mov	r0, r3
 800628a:	372c      	adds	r7, #44	; 0x2c
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	4013      	ands	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80062ac:	68fb      	ldr	r3, [r7, #12]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b083      	sub	sp, #12
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	f003 0301 	and.w	r3, r3, #1
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
	...

080062d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062e0:	2300      	movs	r3, #0
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	3301      	adds	r3, #1
 80062e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	4a13      	ldr	r2, [pc, #76]	; (800633c <USB_CoreReset+0x64>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d901      	bls.n	80062f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e01b      	b.n	800632e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	daf2      	bge.n	80062e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80062fe:	2300      	movs	r3, #0
 8006300:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f043 0201 	orr.w	r2, r3, #1
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3301      	adds	r3, #1
 8006312:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4a09      	ldr	r2, [pc, #36]	; (800633c <USB_CoreReset+0x64>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d901      	bls.n	8006320 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e006      	b.n	800632e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	2b01      	cmp	r3, #1
 800632a:	d0f0      	beq.n	800630e <USB_CoreReset+0x36>

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	00030d40 	.word	0x00030d40

08006340 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006340:	b084      	sub	sp, #16
 8006342:	b580      	push	{r7, lr}
 8006344:	b086      	sub	sp, #24
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800634e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006352:	2300      	movs	r3, #0
 8006354:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006360:	461a      	mov	r2, r3
 8006362:	2300      	movs	r3, #0
 8006364:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006376:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006382:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800638e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006392:	2b00      	cmp	r3, #0
 8006394:	d018      	beq.n	80063c8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006398:	2b01      	cmp	r3, #1
 800639a:	d10a      	bne.n	80063b2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063aa:	f043 0304 	orr.w	r3, r3, #4
 80063ae:	6013      	str	r3, [r2, #0]
 80063b0:	e014      	b.n	80063dc <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063c0:	f023 0304 	bic.w	r3, r3, #4
 80063c4:	6013      	str	r3, [r2, #0]
 80063c6:	e009      	b.n	80063dc <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063d6:	f023 0304 	bic.w	r3, r3, #4
 80063da:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80063dc:	2110      	movs	r1, #16
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7ff fe5e 	bl	80060a0 <USB_FlushTxFifo>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7ff fe8a 	bl	8006108 <USB_FlushRxFifo>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d001      	beq.n	80063fe <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80063fe:	2300      	movs	r3, #0
 8006400:	613b      	str	r3, [r7, #16]
 8006402:	e015      	b.n	8006430 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	4413      	add	r3, r2
 800640c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006410:	461a      	mov	r2, r3
 8006412:	f04f 33ff 	mov.w	r3, #4294967295
 8006416:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	4413      	add	r3, r2
 8006420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006424:	461a      	mov	r2, r3
 8006426:	2300      	movs	r3, #0
 8006428:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	3301      	adds	r3, #1
 800642e:	613b      	str	r3, [r7, #16]
 8006430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	429a      	cmp	r2, r3
 8006436:	d3e5      	bcc.n	8006404 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f04f 32ff 	mov.w	r2, #4294967295
 8006444:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800644a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00b      	beq.n	800646a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006458:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a13      	ldr	r2, [pc, #76]	; (80064ac <USB_HostInit+0x16c>)
 800645e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a13      	ldr	r2, [pc, #76]	; (80064b0 <USB_HostInit+0x170>)
 8006464:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006468:	e009      	b.n	800647e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2280      	movs	r2, #128	; 0x80
 800646e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a10      	ldr	r2, [pc, #64]	; (80064b4 <USB_HostInit+0x174>)
 8006474:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a0f      	ldr	r2, [pc, #60]	; (80064b8 <USB_HostInit+0x178>)
 800647a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800647e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006480:	2b00      	cmp	r3, #0
 8006482:	d105      	bne.n	8006490 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	f043 0210 	orr.w	r2, r3, #16
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	699a      	ldr	r2, [r3, #24]
 8006494:	4b09      	ldr	r3, [pc, #36]	; (80064bc <USB_HostInit+0x17c>)
 8006496:	4313      	orrs	r3, r2
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800649c:	7dfb      	ldrb	r3, [r7, #23]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3718      	adds	r7, #24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064a8:	b004      	add	sp, #16
 80064aa:	4770      	bx	lr
 80064ac:	01000200 	.word	0x01000200
 80064b0:	00e00300 	.word	0x00e00300
 80064b4:	00600080 	.word	0x00600080
 80064b8:	004000e0 	.word	0x004000e0
 80064bc:	a3200008 	.word	0xa3200008

080064c0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	460b      	mov	r3, r1
 80064ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064de:	f023 0303 	bic.w	r3, r3, #3
 80064e2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	78fb      	ldrb	r3, [r7, #3]
 80064ee:	f003 0303 	and.w	r3, r3, #3
 80064f2:	68f9      	ldr	r1, [r7, #12]
 80064f4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80064f8:	4313      	orrs	r3, r2
 80064fa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80064fc:	78fb      	ldrb	r3, [r7, #3]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d107      	bne.n	8006512 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006508:	461a      	mov	r2, r3
 800650a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800650e:	6053      	str	r3, [r2, #4]
 8006510:	e009      	b.n	8006526 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006512:	78fb      	ldrb	r3, [r7, #3]
 8006514:	2b02      	cmp	r3, #2
 8006516:	d106      	bne.n	8006526 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800651e:	461a      	mov	r2, r3
 8006520:	f241 7370 	movw	r3, #6000	; 0x1770
 8006524:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3714      	adds	r7, #20
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006540:	2300      	movs	r3, #0
 8006542:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006554:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800655e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006562:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006564:	2064      	movs	r0, #100	; 0x64
 8006566:	f7fa ffdd 	bl	8001524 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006572:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006576:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006578:	200a      	movs	r0, #10
 800657a:	f7fa ffd3 	bl	8001524 <HAL_Delay>

  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	460b      	mov	r3, r1
 8006592:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006598:	2300      	movs	r3, #0
 800659a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80065ac:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d109      	bne.n	80065cc <USB_DriveVbus+0x44>
 80065b8:	78fb      	ldrb	r3, [r7, #3]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d106      	bne.n	80065cc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80065c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80065ca:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d6:	d109      	bne.n	80065ec <USB_DriveVbus+0x64>
 80065d8:	78fb      	ldrb	r3, [r7, #3]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d106      	bne.n	80065ec <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80065e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065ea:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b085      	sub	sp, #20
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006606:	2300      	movs	r3, #0
 8006608:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	0c5b      	lsrs	r3, r3, #17
 8006618:	f003 0303 	and.w	r3, r3, #3
}
 800661c:	4618      	mov	r0, r3
 800661e:	3714      	adds	r7, #20
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	b29b      	uxth	r3, r3
}
 800663e:	4618      	mov	r0, r3
 8006640:	3714      	adds	r7, #20
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
	...

0800664c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b088      	sub	sp, #32
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	4608      	mov	r0, r1
 8006656:	4611      	mov	r1, r2
 8006658:	461a      	mov	r2, r3
 800665a:	4603      	mov	r3, r0
 800665c:	70fb      	strb	r3, [r7, #3]
 800665e:	460b      	mov	r3, r1
 8006660:	70bb      	strb	r3, [r7, #2]
 8006662:	4613      	mov	r3, r2
 8006664:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006666:	2300      	movs	r3, #0
 8006668:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800666e:	78fb      	ldrb	r3, [r7, #3]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	4413      	add	r3, r2
 8006676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667a:	461a      	mov	r2, r3
 800667c:	f04f 33ff 	mov.w	r3, #4294967295
 8006680:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006682:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006686:	2b03      	cmp	r3, #3
 8006688:	d87e      	bhi.n	8006788 <USB_HC_Init+0x13c>
 800668a:	a201      	add	r2, pc, #4	; (adr r2, 8006690 <USB_HC_Init+0x44>)
 800668c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006690:	080066a1 	.word	0x080066a1
 8006694:	0800674b 	.word	0x0800674b
 8006698:	080066a1 	.word	0x080066a1
 800669c:	0800670d 	.word	0x0800670d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80066a0:	78fb      	ldrb	r3, [r7, #3]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ac:	461a      	mov	r2, r3
 80066ae:	f240 439d 	movw	r3, #1181	; 0x49d
 80066b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80066b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	da10      	bge.n	80066de <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80066bc:	78fb      	ldrb	r3, [r7, #3]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	78fa      	ldrb	r2, [r7, #3]
 80066cc:	0151      	lsls	r1, r2, #5
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	440a      	add	r2, r1
 80066d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066da:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80066dc:	e057      	b.n	800678e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d051      	beq.n	800678e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80066ea:	78fb      	ldrb	r3, [r7, #3]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	78fa      	ldrb	r2, [r7, #3]
 80066fa:	0151      	lsls	r1, r2, #5
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	440a      	add	r2, r1
 8006700:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006704:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006708:	60d3      	str	r3, [r2, #12]
      break;
 800670a:	e040      	b.n	800678e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800670c:	78fb      	ldrb	r3, [r7, #3]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	4413      	add	r3, r2
 8006714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006718:	461a      	mov	r2, r3
 800671a:	f240 639d 	movw	r3, #1693	; 0x69d
 800671e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006720:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006724:	2b00      	cmp	r3, #0
 8006726:	da34      	bge.n	8006792 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006728:	78fb      	ldrb	r3, [r7, #3]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	4413      	add	r3, r2
 8006730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	78fa      	ldrb	r2, [r7, #3]
 8006738:	0151      	lsls	r1, r2, #5
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	440a      	add	r2, r1
 800673e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006746:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006748:	e023      	b.n	8006792 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800674a:	78fb      	ldrb	r3, [r7, #3]
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	4413      	add	r3, r2
 8006752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006756:	461a      	mov	r2, r3
 8006758:	f240 2325 	movw	r3, #549	; 0x225
 800675c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800675e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006762:	2b00      	cmp	r3, #0
 8006764:	da17      	bge.n	8006796 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006766:	78fb      	ldrb	r3, [r7, #3]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	4413      	add	r3, r2
 800676e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	78fa      	ldrb	r2, [r7, #3]
 8006776:	0151      	lsls	r1, r2, #5
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	440a      	add	r2, r1
 800677c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006780:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006784:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006786:	e006      	b.n	8006796 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	77fb      	strb	r3, [r7, #31]
      break;
 800678c:	e004      	b.n	8006798 <USB_HC_Init+0x14c>
      break;
 800678e:	bf00      	nop
 8006790:	e002      	b.n	8006798 <USB_HC_Init+0x14c>
      break;
 8006792:	bf00      	nop
 8006794:	e000      	b.n	8006798 <USB_HC_Init+0x14c>
      break;
 8006796:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006798:	78fb      	ldrb	r3, [r7, #3]
 800679a:	015a      	lsls	r2, r3, #5
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	4413      	add	r3, r2
 80067a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	78fa      	ldrb	r2, [r7, #3]
 80067a8:	0151      	lsls	r1, r2, #5
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	440a      	add	r2, r1
 80067ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067b2:	f043 0302 	orr.w	r3, r3, #2
 80067b6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067be:	699a      	ldr	r2, [r3, #24]
 80067c0:	78fb      	ldrb	r3, [r7, #3]
 80067c2:	f003 030f 	and.w	r3, r3, #15
 80067c6:	2101      	movs	r1, #1
 80067c8:	fa01 f303 	lsl.w	r3, r1, r3
 80067cc:	6939      	ldr	r1, [r7, #16]
 80067ce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80067d2:	4313      	orrs	r3, r2
 80067d4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80067e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	da03      	bge.n	80067f2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80067ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ee:	61bb      	str	r3, [r7, #24]
 80067f0:	e001      	b.n	80067f6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7ff feff 	bl	80065fa <USB_GetHostSpeed>
 80067fc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80067fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006802:	2b02      	cmp	r3, #2
 8006804:	d106      	bne.n	8006814 <USB_HC_Init+0x1c8>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2b02      	cmp	r3, #2
 800680a:	d003      	beq.n	8006814 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800680c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006810:	617b      	str	r3, [r7, #20]
 8006812:	e001      	b.n	8006818 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006814:	2300      	movs	r3, #0
 8006816:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006818:	787b      	ldrb	r3, [r7, #1]
 800681a:	059b      	lsls	r3, r3, #22
 800681c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006820:	78bb      	ldrb	r3, [r7, #2]
 8006822:	02db      	lsls	r3, r3, #11
 8006824:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006828:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800682a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800682e:	049b      	lsls	r3, r3, #18
 8006830:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006834:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006836:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006838:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800683c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006842:	78fb      	ldrb	r3, [r7, #3]
 8006844:	0159      	lsls	r1, r3, #5
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	440b      	add	r3, r1
 800684a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800684e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006854:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006856:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800685a:	2b03      	cmp	r3, #3
 800685c:	d003      	beq.n	8006866 <USB_HC_Init+0x21a>
 800685e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006862:	2b01      	cmp	r3, #1
 8006864:	d10f      	bne.n	8006886 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006866:	78fb      	ldrb	r3, [r7, #3]
 8006868:	015a      	lsls	r2, r3, #5
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	4413      	add	r3, r2
 800686e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	78fa      	ldrb	r2, [r7, #3]
 8006876:	0151      	lsls	r1, r2, #5
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	440a      	add	r2, r1
 800687c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006880:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006884:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006886:	7ffb      	ldrb	r3, [r7, #31]
}
 8006888:	4618      	mov	r0, r3
 800688a:	3720      	adds	r7, #32
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b08c      	sub	sp, #48	; 0x30
 8006894:	af02      	add	r7, sp, #8
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	4613      	mov	r3, r2
 800689c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	785b      	ldrb	r3, [r3, #1]
 80068a6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80068a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068ac:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d02d      	beq.n	8006916 <USB_HC_StartXfer+0x86>
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	791b      	ldrb	r3, [r3, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d129      	bne.n	8006916 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80068c2:	79fb      	ldrb	r3, [r7, #7]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d117      	bne.n	80068f8 <USB_HC_StartXfer+0x68>
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	79db      	ldrb	r3, [r3, #7]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d003      	beq.n	80068d8 <USB_HC_StartXfer+0x48>
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	79db      	ldrb	r3, [r3, #7]
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d10f      	bne.n	80068f8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	69fa      	ldr	r2, [r7, #28]
 80068e8:	0151      	lsls	r1, r2, #5
 80068ea:	6a3a      	ldr	r2, [r7, #32]
 80068ec:	440a      	add	r2, r1
 80068ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80068f8:	79fb      	ldrb	r3, [r7, #7]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10b      	bne.n	8006916 <USB_HC_StartXfer+0x86>
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	795b      	ldrb	r3, [r3, #5]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d107      	bne.n	8006916 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	785b      	ldrb	r3, [r3, #1]
 800690a:	4619      	mov	r1, r3
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f000 fa0f 	bl	8006d30 <USB_DoPing>
      return HAL_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	e0f8      	b.n	8006b08 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d018      	beq.n	8006950 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	8912      	ldrh	r2, [r2, #8]
 8006926:	4413      	add	r3, r2
 8006928:	3b01      	subs	r3, #1
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	8912      	ldrh	r2, [r2, #8]
 800692e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006932:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006934:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006936:	8b7b      	ldrh	r3, [r7, #26]
 8006938:	429a      	cmp	r2, r3
 800693a:	d90b      	bls.n	8006954 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800693c:	8b7b      	ldrh	r3, [r7, #26]
 800693e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006940:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	8912      	ldrh	r2, [r2, #8]
 8006946:	fb03 f202 	mul.w	r2, r3, r2
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	611a      	str	r2, [r3, #16]
 800694e:	e001      	b.n	8006954 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006950:	2301      	movs	r3, #1
 8006952:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	78db      	ldrb	r3, [r3, #3]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d007      	beq.n	800696c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800695c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	8912      	ldrh	r2, [r2, #8]
 8006962:	fb03 f202 	mul.w	r2, r3, r2
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	611a      	str	r2, [r3, #16]
 800696a:	e003      	b.n	8006974 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	695a      	ldr	r2, [r3, #20]
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800697c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800697e:	04d9      	lsls	r1, r3, #19
 8006980:	4b63      	ldr	r3, [pc, #396]	; (8006b10 <USB_HC_StartXfer+0x280>)
 8006982:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006984:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	7a9b      	ldrb	r3, [r3, #10]
 800698a:	075b      	lsls	r3, r3, #29
 800698c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006990:	69f9      	ldr	r1, [r7, #28]
 8006992:	0148      	lsls	r0, r1, #5
 8006994:	6a39      	ldr	r1, [r7, #32]
 8006996:	4401      	add	r1, r0
 8006998:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800699c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800699e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80069a0:	79fb      	ldrb	r3, [r7, #7]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d009      	beq.n	80069ba <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	68d9      	ldr	r1, [r3, #12]
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069b6:	460a      	mov	r2, r1
 80069b8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80069ba:	6a3b      	ldr	r3, [r7, #32]
 80069bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	bf0c      	ite	eq
 80069ca:	2301      	moveq	r3, #1
 80069cc:	2300      	movne	r3, #0
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	6a3b      	ldr	r3, [r7, #32]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	69fa      	ldr	r2, [r7, #28]
 80069e2:	0151      	lsls	r1, r2, #5
 80069e4:	6a3a      	ldr	r2, [r7, #32]
 80069e6:	440a      	add	r2, r1
 80069e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80069f0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	015a      	lsls	r2, r3, #5
 80069f6:	6a3b      	ldr	r3, [r7, #32]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	7e7b      	ldrb	r3, [r7, #25]
 8006a02:	075b      	lsls	r3, r3, #29
 8006a04:	69f9      	ldr	r1, [r7, #28]
 8006a06:	0148      	lsls	r0, r1, #5
 8006a08:	6a39      	ldr	r1, [r7, #32]
 8006a0a:	4401      	add	r1, r0
 8006a0c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006a10:	4313      	orrs	r3, r2
 8006a12:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	6a3b      	ldr	r3, [r7, #32]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a2a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	78db      	ldrb	r3, [r3, #3]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d004      	beq.n	8006a3e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a3a:	613b      	str	r3, [r7, #16]
 8006a3c:	e003      	b.n	8006a46 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a44:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a4c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	015a      	lsls	r2, r3, #5
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006a60:	79fb      	ldrb	r3, [r7, #7]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006a66:	2300      	movs	r3, #0
 8006a68:	e04e      	b.n	8006b08 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	78db      	ldrb	r3, [r3, #3]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d149      	bne.n	8006b06 <USB_HC_StartXfer+0x276>
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d045      	beq.n	8006b06 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	79db      	ldrb	r3, [r3, #7]
 8006a7e:	2b03      	cmp	r3, #3
 8006a80:	d830      	bhi.n	8006ae4 <USB_HC_StartXfer+0x254>
 8006a82:	a201      	add	r2, pc, #4	; (adr r2, 8006a88 <USB_HC_StartXfer+0x1f8>)
 8006a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a88:	08006a99 	.word	0x08006a99
 8006a8c:	08006abd 	.word	0x08006abd
 8006a90:	08006a99 	.word	0x08006a99
 8006a94:	08006abd 	.word	0x08006abd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	3303      	adds	r3, #3
 8006a9e:	089b      	lsrs	r3, r3, #2
 8006aa0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006aa2:	8afa      	ldrh	r2, [r7, #22]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d91c      	bls.n	8006ae8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	f043 0220 	orr.w	r2, r3, #32
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	619a      	str	r2, [r3, #24]
        }
        break;
 8006aba:	e015      	b.n	8006ae8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	3303      	adds	r3, #3
 8006ac2:	089b      	lsrs	r3, r3, #2
 8006ac4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006ac6:	8afa      	ldrh	r2, [r7, #22]
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d90a      	bls.n	8006aec <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	619a      	str	r2, [r3, #24]
        }
        break;
 8006ae2:	e003      	b.n	8006aec <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006ae4:	bf00      	nop
 8006ae6:	e002      	b.n	8006aee <USB_HC_StartXfer+0x25e>
        break;
 8006ae8:	bf00      	nop
 8006aea:	e000      	b.n	8006aee <USB_HC_StartXfer+0x25e>
        break;
 8006aec:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	68d9      	ldr	r1, [r3, #12]
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	785a      	ldrb	r2, [r3, #1]
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	2000      	movs	r0, #0
 8006afe:	9000      	str	r0, [sp, #0]
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f7ff fb31 	bl	8006168 <USB_WritePacket>
  }

  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3728      	adds	r7, #40	; 0x28
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	1ff80000 	.word	0x1ff80000

08006b14 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b26:	695b      	ldr	r3, [r3, #20]
 8006b28:	b29b      	uxth	r3, r3
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b089      	sub	sp, #36	; 0x24
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006b46:	78fb      	ldrb	r3, [r7, #3]
 8006b48:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	0c9b      	lsrs	r3, r3, #18
 8006b5e:	f003 0303 	and.w	r3, r3, #3
 8006b62:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	0fdb      	lsrs	r3, r3, #31
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f003 0320 	and.w	r3, r3, #32
 8006b82:	2b20      	cmp	r3, #32
 8006b84:	d104      	bne.n	8006b90 <USB_HC_Halt+0x5a>
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d101      	bne.n	8006b90 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	e0c8      	b.n	8006d22 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d002      	beq.n	8006b9c <USB_HC_Halt+0x66>
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d163      	bne.n	8006c64 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	015a      	lsls	r2, r3, #5
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	0151      	lsls	r1, r2, #5
 8006bae:	69fa      	ldr	r2, [r7, #28]
 8006bb0:	440a      	add	r2, r1
 8006bb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bba:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f003 0320 	and.w	r3, r3, #32
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f040 80ab 	bne.w	8006d20 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d133      	bne.n	8006c3e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	015a      	lsls	r2, r3, #5
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	69ba      	ldr	r2, [r7, #24]
 8006be6:	0151      	lsls	r1, r2, #5
 8006be8:	69fa      	ldr	r2, [r7, #28]
 8006bea:	440a      	add	r2, r1
 8006bec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bf4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	015a      	lsls	r2, r3, #5
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	69ba      	ldr	r2, [r7, #24]
 8006c06:	0151      	lsls	r1, r2, #5
 8006c08:	69fa      	ldr	r2, [r7, #28]
 8006c0a:	440a      	add	r2, r1
 8006c0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c14:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c22:	d81d      	bhi.n	8006c60 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	015a      	lsls	r2, r3, #5
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c3a:	d0ec      	beq.n	8006c16 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006c3c:	e070      	b.n	8006d20 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	0151      	lsls	r1, r2, #5
 8006c50:	69fa      	ldr	r2, [r7, #28]
 8006c52:	440a      	add	r2, r1
 8006c54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c5c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006c5e:	e05f      	b.n	8006d20 <USB_HC_Halt+0x1ea>
            break;
 8006c60:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006c62:	e05d      	b.n	8006d20 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	69ba      	ldr	r2, [r7, #24]
 8006c74:	0151      	lsls	r1, r2, #5
 8006c76:	69fa      	ldr	r2, [r7, #28]
 8006c78:	440a      	add	r2, r1
 8006c7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c82:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d133      	bne.n	8006cfc <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	69ba      	ldr	r2, [r7, #24]
 8006ca4:	0151      	lsls	r1, r2, #5
 8006ca6:	69fa      	ldr	r2, [r7, #28]
 8006ca8:	440a      	add	r2, r1
 8006caa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cb2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	69ba      	ldr	r2, [r7, #24]
 8006cc4:	0151      	lsls	r1, r2, #5
 8006cc6:	69fa      	ldr	r2, [r7, #28]
 8006cc8:	440a      	add	r2, r1
 8006cca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cd2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ce0:	d81d      	bhi.n	8006d1e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	015a      	lsls	r2, r3, #5
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	4413      	add	r3, r2
 8006cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cf8:	d0ec      	beq.n	8006cd4 <USB_HC_Halt+0x19e>
 8006cfa:	e011      	b.n	8006d20 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	69ba      	ldr	r2, [r7, #24]
 8006d0c:	0151      	lsls	r1, r2, #5
 8006d0e:	69fa      	ldr	r2, [r7, #28]
 8006d10:	440a      	add	r2, r1
 8006d12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	e000      	b.n	8006d20 <USB_HC_Halt+0x1ea>
          break;
 8006d1e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3724      	adds	r7, #36	; 0x24
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
	...

08006d30 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b087      	sub	sp, #28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	460b      	mov	r3, r1
 8006d3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006d40:	78fb      	ldrb	r3, [r7, #3]
 8006d42:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006d44:	2301      	movs	r3, #1
 8006d46:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	04da      	lsls	r2, r3, #19
 8006d4c:	4b15      	ldr	r3, [pc, #84]	; (8006da4 <USB_DoPing+0x74>)
 8006d4e:	4013      	ands	r3, r2
 8006d50:	693a      	ldr	r2, [r7, #16]
 8006d52:	0151      	lsls	r1, r2, #5
 8006d54:	697a      	ldr	r2, [r7, #20]
 8006d56:	440a      	add	r2, r1
 8006d58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d60:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	015a      	lsls	r2, r3, #5
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	4413      	add	r3, r2
 8006d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d78:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d80:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	015a      	lsls	r2, r3, #5
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	4413      	add	r3, r2
 8006d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d8e:	461a      	mov	r2, r3
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	371c      	adds	r7, #28
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	1ff80000 	.word	0x1ff80000

08006da8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b088      	sub	sp, #32
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006db0:	2300      	movs	r3, #0
 8006db2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006db8:	2300      	movs	r3, #0
 8006dba:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f7ff f911 	bl	8005fe4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006dc2:	2110      	movs	r1, #16
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7ff f96b 	bl	80060a0 <USB_FlushTxFifo>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d001      	beq.n	8006dd4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f7ff f997 	bl	8006108 <USB_FlushRxFifo>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d001      	beq.n	8006de4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006de4:	2300      	movs	r3, #0
 8006de6:	61bb      	str	r3, [r7, #24]
 8006de8:	e01f      	b.n	8006e2a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	015a      	lsls	r2, r3, #5
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	4413      	add	r3, r2
 8006df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e00:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e08:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e10:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	015a      	lsls	r2, r3, #5
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	4413      	add	r3, r2
 8006e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e1e:	461a      	mov	r2, r3
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	3301      	adds	r3, #1
 8006e28:	61bb      	str	r3, [r7, #24]
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	2b0f      	cmp	r3, #15
 8006e2e:	d9dc      	bls.n	8006dea <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006e30:	2300      	movs	r3, #0
 8006e32:	61bb      	str	r3, [r7, #24]
 8006e34:	e034      	b.n	8006ea0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	015a      	lsls	r2, r3, #5
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e4c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e54:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e5c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	015a      	lsls	r2, r3, #5
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	4413      	add	r3, r2
 8006e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	3301      	adds	r3, #1
 8006e74:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e7c:	d80c      	bhi.n	8006e98 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	015a      	lsls	r2, r3, #5
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	4413      	add	r3, r2
 8006e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e94:	d0ec      	beq.n	8006e70 <USB_StopHost+0xc8>
 8006e96:	e000      	b.n	8006e9a <USB_StopHost+0xf2>
        break;
 8006e98:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	61bb      	str	r3, [r7, #24]
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	2b0f      	cmp	r3, #15
 8006ea4:	d9c7      	bls.n	8006e36 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006eac:	461a      	mov	r2, r3
 8006eae:	f04f 33ff 	mov.w	r3, #4294967295
 8006eb2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eba:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f7ff f880 	bl	8005fc2 <USB_EnableGlobalInt>

  return ret;
 8006ec2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3720      	adds	r7, #32
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006ecc:	b590      	push	{r4, r7, lr}
 8006ece:	b089      	sub	sp, #36	; 0x24
 8006ed0:	af04      	add	r7, sp, #16
 8006ed2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	2102      	movs	r1, #2
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fd30 	bl	8007940 <USBH_FindInterface>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006ee4:	7bfb      	ldrb	r3, [r7, #15]
 8006ee6:	2bff      	cmp	r3, #255	; 0xff
 8006ee8:	d002      	beq.n	8006ef0 <USBH_CDC_InterfaceInit+0x24>
 8006eea:	7bfb      	ldrb	r3, [r7, #15]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d901      	bls.n	8006ef4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	e13d      	b.n	8007170 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006ef4:	7bfb      	ldrb	r3, [r7, #15]
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fd05 	bl	8007908 <USBH_SelectInterface>
 8006efe:	4603      	mov	r3, r0
 8006f00:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006f02:	7bbb      	ldrb	r3, [r7, #14]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d001      	beq.n	8006f0c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006f08:	2302      	movs	r3, #2
 8006f0a:	e131      	b.n	8007170 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006f12:	2050      	movs	r0, #80	; 0x50
 8006f14:	f005 f8a6 	bl	800c064 <malloc>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f22:	69db      	ldr	r3, [r3, #28]
 8006f24:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	e11f      	b.n	8007170 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006f30:	2250      	movs	r2, #80	; 0x50
 8006f32:	2100      	movs	r1, #0
 8006f34:	68b8      	ldr	r0, [r7, #8]
 8006f36:	f005 f8b3 	bl	800c0a0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006f3a:	7bfb      	ldrb	r3, [r7, #15]
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	211a      	movs	r1, #26
 8006f40:	fb01 f303 	mul.w	r3, r1, r3
 8006f44:	4413      	add	r3, r2
 8006f46:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	b25b      	sxtb	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	da15      	bge.n	8006f7e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006f52:	7bfb      	ldrb	r3, [r7, #15]
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	211a      	movs	r1, #26
 8006f58:	fb01 f303 	mul.w	r3, r1, r3
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006f62:	781a      	ldrb	r2, [r3, #0]
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	211a      	movs	r1, #26
 8006f6e:	fb01 f303 	mul.w	r3, r1, r3
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006f78:	881a      	ldrh	r2, [r3, #0]
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	785b      	ldrb	r3, [r3, #1]
 8006f82:	4619      	mov	r1, r3
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f002 fa00 	bl	800938a <USBH_AllocPipe>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	7819      	ldrb	r1, [r3, #0]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	7858      	ldrb	r0, [r3, #1]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	8952      	ldrh	r2, [r2, #10]
 8006faa:	9202      	str	r2, [sp, #8]
 8006fac:	2203      	movs	r2, #3
 8006fae:	9201      	str	r2, [sp, #4]
 8006fb0:	9300      	str	r3, [sp, #0]
 8006fb2:	4623      	mov	r3, r4
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f002 f9b8 	bl	800932c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f004 ff9d 	bl	800bf04 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006fca:	2300      	movs	r3, #0
 8006fcc:	2200      	movs	r2, #0
 8006fce:	210a      	movs	r1, #10
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fcb5 	bl	8007940 <USBH_FindInterface>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006fda:	7bfb      	ldrb	r3, [r7, #15]
 8006fdc:	2bff      	cmp	r3, #255	; 0xff
 8006fde:	d002      	beq.n	8006fe6 <USBH_CDC_InterfaceInit+0x11a>
 8006fe0:	7bfb      	ldrb	r3, [r7, #15]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d901      	bls.n	8006fea <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006fe6:	2302      	movs	r3, #2
 8006fe8:	e0c2      	b.n	8007170 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006fea:	7bfb      	ldrb	r3, [r7, #15]
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	211a      	movs	r1, #26
 8006ff0:	fb01 f303 	mul.w	r3, r1, r3
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	b25b      	sxtb	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	da16      	bge.n	8007030 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007002:	7bfb      	ldrb	r3, [r7, #15]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	211a      	movs	r1, #26
 8007008:	fb01 f303 	mul.w	r3, r1, r3
 800700c:	4413      	add	r3, r2
 800700e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007012:	781a      	ldrb	r2, [r3, #0]
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007018:	7bfb      	ldrb	r3, [r7, #15]
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	211a      	movs	r1, #26
 800701e:	fb01 f303 	mul.w	r3, r1, r3
 8007022:	4413      	add	r3, r2
 8007024:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007028:	881a      	ldrh	r2, [r3, #0]
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	835a      	strh	r2, [r3, #26]
 800702e:	e015      	b.n	800705c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007030:	7bfb      	ldrb	r3, [r7, #15]
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	211a      	movs	r1, #26
 8007036:	fb01 f303 	mul.w	r3, r1, r3
 800703a:	4413      	add	r3, r2
 800703c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007040:	781a      	ldrb	r2, [r3, #0]
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007046:	7bfb      	ldrb	r3, [r7, #15]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	211a      	movs	r1, #26
 800704c:	fb01 f303 	mul.w	r3, r1, r3
 8007050:	4413      	add	r3, r2
 8007052:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007056:	881a      	ldrh	r2, [r3, #0]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800705c:	7bfb      	ldrb	r3, [r7, #15]
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	211a      	movs	r1, #26
 8007062:	fb01 f303 	mul.w	r3, r1, r3
 8007066:	4413      	add	r3, r2
 8007068:	f203 3356 	addw	r3, r3, #854	; 0x356
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	b25b      	sxtb	r3, r3
 8007070:	2b00      	cmp	r3, #0
 8007072:	da16      	bge.n	80070a2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007074:	7bfb      	ldrb	r3, [r7, #15]
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	211a      	movs	r1, #26
 800707a:	fb01 f303 	mul.w	r3, r1, r3
 800707e:	4413      	add	r3, r2
 8007080:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007084:	781a      	ldrb	r2, [r3, #0]
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800708a:	7bfb      	ldrb	r3, [r7, #15]
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	211a      	movs	r1, #26
 8007090:	fb01 f303 	mul.w	r3, r1, r3
 8007094:	4413      	add	r3, r2
 8007096:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800709a:	881a      	ldrh	r2, [r3, #0]
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	835a      	strh	r2, [r3, #26]
 80070a0:	e015      	b.n	80070ce <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80070a2:	7bfb      	ldrb	r3, [r7, #15]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	211a      	movs	r1, #26
 80070a8:	fb01 f303 	mul.w	r3, r1, r3
 80070ac:	4413      	add	r3, r2
 80070ae:	f203 3356 	addw	r3, r3, #854	; 0x356
 80070b2:	781a      	ldrb	r2, [r3, #0]
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80070b8:	7bfb      	ldrb	r3, [r7, #15]
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	211a      	movs	r1, #26
 80070be:	fb01 f303 	mul.w	r3, r1, r3
 80070c2:	4413      	add	r3, r2
 80070c4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80070c8:	881a      	ldrh	r2, [r3, #0]
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	7b9b      	ldrb	r3, [r3, #14]
 80070d2:	4619      	mov	r1, r3
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f002 f958 	bl	800938a <USBH_AllocPipe>
 80070da:	4603      	mov	r3, r0
 80070dc:	461a      	mov	r2, r3
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	7bdb      	ldrb	r3, [r3, #15]
 80070e6:	4619      	mov	r1, r3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f002 f94e 	bl	800938a <USBH_AllocPipe>
 80070ee:	4603      	mov	r3, r0
 80070f0:	461a      	mov	r2, r3
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	7b59      	ldrb	r1, [r3, #13]
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	7b98      	ldrb	r0, [r3, #14]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	8b12      	ldrh	r2, [r2, #24]
 800710e:	9202      	str	r2, [sp, #8]
 8007110:	2202      	movs	r2, #2
 8007112:	9201      	str	r2, [sp, #4]
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	4623      	mov	r3, r4
 8007118:	4602      	mov	r2, r0
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f002 f906 	bl	800932c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	7b19      	ldrb	r1, [r3, #12]
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	7bd8      	ldrb	r0, [r3, #15]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	8b52      	ldrh	r2, [r2, #26]
 8007138:	9202      	str	r2, [sp, #8]
 800713a:	2202      	movs	r2, #2
 800713c:	9201      	str	r2, [sp, #4]
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	4623      	mov	r3, r4
 8007142:	4602      	mov	r2, r0
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f002 f8f1 	bl	800932c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	7b5b      	ldrb	r3, [r3, #13]
 8007156:	2200      	movs	r2, #0
 8007158:	4619      	mov	r1, r3
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f004 fed2 	bl	800bf04 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	7b1b      	ldrb	r3, [r3, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	4619      	mov	r1, r3
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f004 fecb 	bl	800bf04 <USBH_LL_SetToggle>

  return USBH_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3714      	adds	r7, #20
 8007174:	46bd      	mov	sp, r7
 8007176:	bd90      	pop	{r4, r7, pc}

08007178 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007186:	69db      	ldr	r3, [r3, #28]
 8007188:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00e      	beq.n	80071b0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	4619      	mov	r1, r3
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f002 f8e6 	bl	800936a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	4619      	mov	r1, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f002 f911 	bl	80093cc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	7b1b      	ldrb	r3, [r3, #12]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00e      	beq.n	80071d6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	7b1b      	ldrb	r3, [r3, #12]
 80071bc:	4619      	mov	r1, r3
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f002 f8d3 	bl	800936a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	7b1b      	ldrb	r3, [r3, #12]
 80071c8:	4619      	mov	r1, r3
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f002 f8fe 	bl	80093cc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	7b5b      	ldrb	r3, [r3, #13]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00e      	beq.n	80071fc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	7b5b      	ldrb	r3, [r3, #13]
 80071e2:	4619      	mov	r1, r3
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f002 f8c0 	bl	800936a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	7b5b      	ldrb	r3, [r3, #13]
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f002 f8eb 	bl	80093cc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007202:	69db      	ldr	r3, [r3, #28]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00b      	beq.n	8007220 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800720e:	69db      	ldr	r3, [r3, #28]
 8007210:	4618      	mov	r0, r3
 8007212:	f004 ff2f 	bl	800c074 <free>
    phost->pActiveClass->pData = 0U;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800721c:	2200      	movs	r2, #0
 800721e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b084      	sub	sp, #16
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007238:	69db      	ldr	r3, [r3, #28]
 800723a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	3340      	adds	r3, #64	; 0x40
 8007240:	4619      	mov	r1, r3
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f8da 	bl	80073fc <GetLineCoding>
 8007248:	4603      	mov	r3, r0
 800724a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800724c:	7afb      	ldrb	r3, [r7, #11]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d105      	bne.n	800725e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007258:	2102      	movs	r1, #2
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800725e:	7afb      	ldrb	r3, [r7, #11]
}
 8007260:	4618      	mov	r0, r3
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007270:	2301      	movs	r3, #1
 8007272:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007274:	2300      	movs	r3, #0
 8007276:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800727e:	69db      	ldr	r3, [r3, #28]
 8007280:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007288:	2b04      	cmp	r3, #4
 800728a:	d877      	bhi.n	800737c <USBH_CDC_Process+0x114>
 800728c:	a201      	add	r2, pc, #4	; (adr r2, 8007294 <USBH_CDC_Process+0x2c>)
 800728e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007292:	bf00      	nop
 8007294:	080072a9 	.word	0x080072a9
 8007298:	080072af 	.word	0x080072af
 800729c:	080072df 	.word	0x080072df
 80072a0:	08007353 	.word	0x08007353
 80072a4:	08007361 	.word	0x08007361
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80072a8:	2300      	movs	r3, #0
 80072aa:	73fb      	strb	r3, [r7, #15]
      break;
 80072ac:	e06d      	b.n	800738a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072b2:	4619      	mov	r1, r3
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f8c0 	bl	800743a <SetLineCoding>
 80072ba:	4603      	mov	r3, r0
 80072bc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80072be:	7bbb      	ldrb	r3, [r7, #14]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d104      	bne.n	80072ce <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	2202      	movs	r2, #2
 80072c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80072cc:	e058      	b.n	8007380 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80072ce:	7bbb      	ldrb	r3, [r7, #14]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d055      	beq.n	8007380 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	2204      	movs	r2, #4
 80072d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80072dc:	e050      	b.n	8007380 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	3340      	adds	r3, #64	; 0x40
 80072e2:	4619      	mov	r1, r3
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 f889 	bl	80073fc <GetLineCoding>
 80072ea:	4603      	mov	r3, r0
 80072ec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80072ee:	7bbb      	ldrb	r3, [r7, #14]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d126      	bne.n	8007342 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007306:	791b      	ldrb	r3, [r3, #4]
 8007308:	429a      	cmp	r2, r3
 800730a:	d13b      	bne.n	8007384 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007316:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007318:	429a      	cmp	r2, r3
 800731a:	d133      	bne.n	8007384 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007326:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007328:	429a      	cmp	r2, r3
 800732a:	d12b      	bne.n	8007384 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007334:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007336:	429a      	cmp	r2, r3
 8007338:	d124      	bne.n	8007384 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f9fa 	bl	8007734 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007340:	e020      	b.n	8007384 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007342:	7bbb      	ldrb	r3, [r7, #14]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d01d      	beq.n	8007384 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2204      	movs	r2, #4
 800734c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007350:	e018      	b.n	8007384 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f8f3 	bl	800753e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 f982 	bl	8007662 <CDC_ProcessReception>
      break;
 800735e:	e014      	b.n	800738a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007360:	2100      	movs	r1, #0
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f001 f9d3 	bl	800870e <USBH_ClrFeature>
 8007368:	4603      	mov	r3, r0
 800736a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800736c:	7bbb      	ldrb	r3, [r7, #14]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10a      	bne.n	8007388 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800737a:	e005      	b.n	8007388 <USBH_CDC_Process+0x120>

    default:
      break;
 800737c:	bf00      	nop
 800737e:	e004      	b.n	800738a <USBH_CDC_Process+0x122>
      break;
 8007380:	bf00      	nop
 8007382:	e002      	b.n	800738a <USBH_CDC_Process+0x122>
      break;
 8007384:	bf00      	nop
 8007386:	e000      	b.n	800738a <USBH_CDC_Process+0x122>
      break;
 8007388:	bf00      	nop

  }

  return status;
 800738a:	7bfb      	ldrb	r3, [r7, #15]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	370c      	adds	r7, #12
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <USBH_CDC_Stop>:
  *         Stop current CDC Transmission
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_CDC_Stop(USBH_HandleTypeDef *phost)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b084      	sub	sp, #16
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073b8:	69db      	ldr	r3, [r3, #28]
 80073ba:	60fb      	str	r3, [r7, #12]

  if (phost->gState == HOST_CLASS)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b0b      	cmp	r3, #11
 80073c4:	d115      	bne.n	80073f2 <USBH_CDC_Stop+0x48>
  {
    CDC_Handle->state = CDC_IDLE_STATE;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	4619      	mov	r1, r3
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f001 ffc8 	bl	800936a <USBH_ClosePipe>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	7b1b      	ldrb	r3, [r3, #12]
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f001 ffc2 	bl	800936a <USBH_ClosePipe>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	7b5b      	ldrb	r3, [r3, #13]
 80073ea:	4619      	mov	r1, r3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f001 ffbc 	bl	800936a <USBH_ClosePipe>
  }
  return USBH_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	22a1      	movs	r2, #161	; 0xa1
 800740a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2221      	movs	r2, #33	; 0x21
 8007410:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2207      	movs	r2, #7
 8007422:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	2207      	movs	r2, #7
 8007428:	4619      	mov	r1, r3
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f001 fc3c 	bl	8008ca8 <USBH_CtlReq>
 8007430:	4603      	mov	r3, r0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b082      	sub	sp, #8
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2221      	movs	r2, #33	; 0x21
 8007448:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2220      	movs	r2, #32
 800744e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2207      	movs	r2, #7
 8007460:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	2207      	movs	r2, #7
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f001 fc1d 	bl	8008ca8 <USBH_CtlReq>
 800746e:	4603      	mov	r3, r0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <USBH_CDC_SetLineCoding>:
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef USBH_CDC_SetLineCoding(USBH_HandleTypeDef *phost,
                                          CDC_LineCodingTypeDef *linecoding)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007488:	69db      	ldr	r3, [r3, #28]
 800748a:	60fb      	str	r3, [r7, #12]

  if (phost->gState == HOST_CLASS)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b0b      	cmp	r3, #11
 8007494:	d114      	bne.n	80074c0 <USBH_CDC_SetLineCoding+0x48>
  {
    CDC_Handle->state = CDC_SET_LINE_CODING_STATE;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->pUserLineCoding = linecoding;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	683a      	ldr	r2, [r7, #0]
 80074a2:	649a      	str	r2, [r3, #72]	; 0x48

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2204      	movs	r2, #4
 80074a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80074b8:	2200      	movs	r2, #0
 80074ba:	4619      	mov	r1, r3
 80074bc:	f002 f882 	bl	80095c4 <osMessagePut>
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }

  return USBH_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <USBH_CDC_Receive>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b086      	sub	sp, #24
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	60f8      	str	r0, [r7, #12]
 80074d2:	60b9      	str	r1, [r7, #8]
 80074d4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80074d6:	2301      	movs	r3, #1
 80074d8:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074e0:	69db      	ldr	r3, [r3, #28]
 80074e2:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d004      	beq.n	80074f8 <USBH_CDC_Receive+0x2e>
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80074f4:	2b03      	cmp	r3, #3
 80074f6:	d11d      	bne.n	8007534 <USBH_CDC_Receive+0x6a>
  {
    CDC_Handle->pRxData = pbuff;
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	68ba      	ldr	r2, [r7, #8]
 80074fc:	621a      	str	r2, [r3, #32]
    CDC_Handle->RxDataLength = length;
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	629a      	str	r2, [r3, #40]	; 0x28
    CDC_Handle->state = CDC_TRANSFER_DATA;
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	2203      	movs	r2, #3
 8007508:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	2203      	movs	r2, #3
 8007510:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    Status = USBH_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2204      	movs	r2, #4
 800751c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800752c:	2200      	movs	r2, #0
 800752e:	4619      	mov	r1, r3
 8007530:	f002 f848 	bl	80095c4 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }
  return Status;
 8007534:	7dfb      	ldrb	r3, [r7, #23]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3718      	adds	r7, #24
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b086      	sub	sp, #24
 8007542:	af02      	add	r7, sp, #8
 8007544:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800754c:	69db      	ldr	r3, [r3, #28]
 800754e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007550:	2300      	movs	r3, #0
 8007552:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800755a:	2b01      	cmp	r3, #1
 800755c:	d002      	beq.n	8007564 <CDC_ProcessTransmission+0x26>
 800755e:	2b02      	cmp	r3, #2
 8007560:	d023      	beq.n	80075aa <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007562:	e07a      	b.n	800765a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	8b12      	ldrh	r2, [r2, #24]
 800756c:	4293      	cmp	r3, r2
 800756e:	d90b      	bls.n	8007588 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	69d9      	ldr	r1, [r3, #28]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	8b1a      	ldrh	r2, [r3, #24]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	7b5b      	ldrb	r3, [r3, #13]
 800757c:	2001      	movs	r0, #1
 800757e:	9000      	str	r0, [sp, #0]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f001 fe90 	bl	80092a6 <USBH_BulkSendData>
 8007586:	e00b      	b.n	80075a0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007590:	b29a      	uxth	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	7b5b      	ldrb	r3, [r3, #13]
 8007596:	2001      	movs	r0, #1
 8007598:	9000      	str	r0, [sp, #0]
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f001 fe83 	bl	80092a6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2202      	movs	r2, #2
 80075a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80075a8:	e057      	b.n	800765a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	7b5b      	ldrb	r3, [r3, #13]
 80075ae:	4619      	mov	r1, r3
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f004 fc7d 	bl	800beb0 <USBH_LL_GetURBState>
 80075b6:	4603      	mov	r3, r0
 80075b8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80075ba:	7afb      	ldrb	r3, [r7, #11]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d136      	bne.n	800762e <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	8b12      	ldrh	r2, [r2, #24]
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d90e      	bls.n	80075ea <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	8b12      	ldrh	r2, [r2, #24]
 80075d4:	1a9a      	subs	r2, r3, r2
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	8b12      	ldrh	r2, [r2, #24]
 80075e2:	441a      	add	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	61da      	str	r2, [r3, #28]
 80075e8:	e002      	b.n	80075f0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d004      	beq.n	8007602 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8007600:	e006      	b.n	8007610 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f004 f9e2 	bl	800b9d4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2204      	movs	r2, #4
 8007614:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007624:	2200      	movs	r2, #0
 8007626:	4619      	mov	r1, r3
 8007628:	f001 ffcc 	bl	80095c4 <osMessagePut>
      break;
 800762c:	e014      	b.n	8007658 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800762e:	7afb      	ldrb	r3, [r7, #11]
 8007630:	2b02      	cmp	r3, #2
 8007632:	d111      	bne.n	8007658 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2204      	movs	r2, #4
 8007640:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007650:	2200      	movs	r2, #0
 8007652:	4619      	mov	r1, r3
 8007654:	f001 ffb6 	bl	80095c4 <osMessagePut>
      break;
 8007658:	bf00      	nop
  }
}
 800765a:	bf00      	nop
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b086      	sub	sp, #24
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007670:	69db      	ldr	r3, [r3, #28]
 8007672:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007674:	2300      	movs	r3, #0
 8007676:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800767e:	2b03      	cmp	r3, #3
 8007680:	d002      	beq.n	8007688 <CDC_ProcessReception+0x26>
 8007682:	2b04      	cmp	r3, #4
 8007684:	d00e      	beq.n	80076a4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007686:	e051      	b.n	800772c <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	6a19      	ldr	r1, [r3, #32]
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	8b5a      	ldrh	r2, [r3, #26]
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	7b1b      	ldrb	r3, [r3, #12]
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f001 fe2b 	bl	80092f0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	2204      	movs	r2, #4
 800769e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80076a2:	e043      	b.n	800772c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	7b1b      	ldrb	r3, [r3, #12]
 80076a8:	4619      	mov	r1, r3
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f004 fc00 	bl	800beb0 <USBH_LL_GetURBState>
 80076b0:	4603      	mov	r3, r0
 80076b2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80076b4:	7cfb      	ldrb	r3, [r7, #19]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d137      	bne.n	800772a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	7b1b      	ldrb	r3, [r3, #12]
 80076be:	4619      	mov	r1, r3
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f004 fb63 	bl	800bd8c <USBH_LL_GetLastXferSize>
 80076c6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d016      	beq.n	8007700 <CDC_ProcessReception+0x9e>
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	8b5b      	ldrh	r3, [r3, #26]
 80076d6:	461a      	mov	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	4293      	cmp	r3, r2
 80076dc:	d910      	bls.n	8007700 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	1ad2      	subs	r2, r2, r3
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	6a1a      	ldr	r2, [r3, #32]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	441a      	add	r2, r3
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	2203      	movs	r2, #3
 80076fa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80076fe:	e006      	b.n	800770e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	2200      	movs	r2, #0
 8007704:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f004 f96d 	bl	800b9e8 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2204      	movs	r2, #4
 8007712:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007722:	2200      	movs	r2, #0
 8007724:	4619      	mov	r1, r3
 8007726:	f001 ff4d 	bl	80095c4 <osMessagePut>
      break;
 800772a:	bf00      	nop
  }
}
 800772c:	bf00      	nop
 800772e:	3718      	adds	r7, #24
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007748:	b5b0      	push	{r4, r5, r7, lr}
 800774a:	b090      	sub	sp, #64	; 0x40
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	4613      	mov	r3, r2
 8007754:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d101      	bne.n	8007760 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800775c:	2302      	movs	r3, #2
 800775e:	e04d      	b.n	80077fc <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	79fa      	ldrb	r2, [r7, #7]
 8007764:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f000 f847 	bl	800780c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d003      	beq.n	80077ac <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	68ba      	ldr	r2, [r7, #8]
 80077a8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 80077ac:	4b15      	ldr	r3, [pc, #84]	; (8007804 <USBH_Init+0xbc>)
 80077ae:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80077b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80077b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 80077b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077bc:	2100      	movs	r1, #0
 80077be:	4618      	mov	r0, r3
 80077c0:	f001 fed7 	bl	8009572 <osMessageCreate>
 80077c4:	4602      	mov	r2, r0
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 80077cc:	4b0e      	ldr	r3, [pc, #56]	; (8007808 <USBH_Init+0xc0>)
 80077ce:	f107 0414 	add.w	r4, r7, #20
 80077d2:	461d      	mov	r5, r3
 80077d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80077d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80077dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 80077e0:	f107 0314 	add.w	r3, r7, #20
 80077e4:	68f9      	ldr	r1, [r7, #12]
 80077e6:	4618      	mov	r0, r3
 80077e8:	f001 fe63 	bl	80094b2 <osThreadCreate>
 80077ec:	4602      	mov	r2, r0
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f004 fa15 	bl	800bc24 <USBH_LL_Init>

  return USBH_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3740      	adds	r7, #64	; 0x40
 8007800:	46bd      	mov	sp, r7
 8007802:	bdb0      	pop	{r4, r5, r7, pc}
 8007804:	0800cb38 	.word	0x0800cb38
 8007808:	0800cb48 	.word	0x0800cb48

0800780c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007814:	2300      	movs	r3, #0
 8007816:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007818:	2300      	movs	r3, #0
 800781a:	60fb      	str	r3, [r7, #12]
 800781c:	e009      	b.n	8007832 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	33e0      	adds	r3, #224	; 0xe0
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4413      	add	r3, r2
 8007828:	2200      	movs	r2, #0
 800782a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	3301      	adds	r3, #1
 8007830:	60fb      	str	r3, [r7, #12]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2b0f      	cmp	r3, #15
 8007836:	d9f2      	bls.n	800781e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007838:	2300      	movs	r3, #0
 800783a:	60fb      	str	r3, [r7, #12]
 800783c:	e009      	b.n	8007852 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	4413      	add	r3, r2
 8007844:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007848:	2200      	movs	r2, #0
 800784a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	3301      	adds	r3, #1
 8007850:	60fb      	str	r3, [r7, #12]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007858:	d3f1      	bcc.n	800783e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2201      	movs	r2, #1
 800786a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2240      	movs	r2, #64	; 0x40
 800787e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3714      	adds	r7, #20
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80078be:	2300      	movs	r3, #0
 80078c0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d016      	beq.n	80078f6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10e      	bne.n	80078f0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80078d8:	1c59      	adds	r1, r3, #1
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	33de      	adds	r3, #222	; 0xde
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80078ea:	2300      	movs	r3, #0
 80078ec:	73fb      	strb	r3, [r7, #15]
 80078ee:	e004      	b.n	80078fa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80078f0:	2302      	movs	r3, #2
 80078f2:	73fb      	strb	r3, [r7, #15]
 80078f4:	e001      	b.n	80078fa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80078f6:	2302      	movs	r3, #2
 80078f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80078fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	460b      	mov	r3, r1
 8007912:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007914:	2300      	movs	r3, #0
 8007916:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800791e:	78fa      	ldrb	r2, [r7, #3]
 8007920:	429a      	cmp	r2, r3
 8007922:	d204      	bcs.n	800792e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	78fa      	ldrb	r2, [r7, #3]
 8007928:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800792c:	e001      	b.n	8007932 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800792e:	2302      	movs	r3, #2
 8007930:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007932:	7bfb      	ldrb	r3, [r7, #15]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3714      	adds	r7, #20
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007940:	b480      	push	{r7}
 8007942:	b087      	sub	sp, #28
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	4608      	mov	r0, r1
 800794a:	4611      	mov	r1, r2
 800794c:	461a      	mov	r2, r3
 800794e:	4603      	mov	r3, r0
 8007950:	70fb      	strb	r3, [r7, #3]
 8007952:	460b      	mov	r3, r1
 8007954:	70bb      	strb	r3, [r7, #2]
 8007956:	4613      	mov	r3, r2
 8007958:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800795a:	2300      	movs	r3, #0
 800795c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800795e:	2300      	movs	r3, #0
 8007960:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007968:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800796a:	e025      	b.n	80079b8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800796c:	7dfb      	ldrb	r3, [r7, #23]
 800796e:	221a      	movs	r2, #26
 8007970:	fb02 f303 	mul.w	r3, r2, r3
 8007974:	3308      	adds	r3, #8
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	4413      	add	r3, r2
 800797a:	3302      	adds	r3, #2
 800797c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	795b      	ldrb	r3, [r3, #5]
 8007982:	78fa      	ldrb	r2, [r7, #3]
 8007984:	429a      	cmp	r2, r3
 8007986:	d002      	beq.n	800798e <USBH_FindInterface+0x4e>
 8007988:	78fb      	ldrb	r3, [r7, #3]
 800798a:	2bff      	cmp	r3, #255	; 0xff
 800798c:	d111      	bne.n	80079b2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007992:	78ba      	ldrb	r2, [r7, #2]
 8007994:	429a      	cmp	r2, r3
 8007996:	d002      	beq.n	800799e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007998:	78bb      	ldrb	r3, [r7, #2]
 800799a:	2bff      	cmp	r3, #255	; 0xff
 800799c:	d109      	bne.n	80079b2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80079a2:	787a      	ldrb	r2, [r7, #1]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d002      	beq.n	80079ae <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80079a8:	787b      	ldrb	r3, [r7, #1]
 80079aa:	2bff      	cmp	r3, #255	; 0xff
 80079ac:	d101      	bne.n	80079b2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80079ae:	7dfb      	ldrb	r3, [r7, #23]
 80079b0:	e006      	b.n	80079c0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80079b2:	7dfb      	ldrb	r3, [r7, #23]
 80079b4:	3301      	adds	r3, #1
 80079b6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80079b8:	7dfb      	ldrb	r3, [r7, #23]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d9d6      	bls.n	800796c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80079be:	23ff      	movs	r3, #255	; 0xff
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	371c      	adds	r7, #28
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f004 f961 	bl	800bc9c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80079da:	2101      	movs	r1, #1
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f004 fa7a 	bl	800bed6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b088      	sub	sp, #32
 80079f0:	af04      	add	r7, sp, #16
 80079f2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80079f4:	2302      	movs	r3, #2
 80079f6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80079f8:	2300      	movs	r3, #0
 80079fa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d102      	bne.n	8007a0e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2203      	movs	r2, #3
 8007a0c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b0b      	cmp	r3, #11
 8007a16:	f200 8247 	bhi.w	8007ea8 <USBH_Process+0x4bc>
 8007a1a:	a201      	add	r2, pc, #4	; (adr r2, 8007a20 <USBH_Process+0x34>)
 8007a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a20:	08007a51 	.word	0x08007a51
 8007a24:	08007a9f 	.word	0x08007a9f
 8007a28:	08007b23 	.word	0x08007b23
 8007a2c:	08007e27 	.word	0x08007e27
 8007a30:	08007ea9 	.word	0x08007ea9
 8007a34:	08007be3 	.word	0x08007be3
 8007a38:	08007db1 	.word	0x08007db1
 8007a3c:	08007c35 	.word	0x08007c35
 8007a40:	08007c71 	.word	0x08007c71
 8007a44:	08007cab 	.word	0x08007cab
 8007a48:	08007d09 	.word	0x08007d09
 8007a4c:	08007e0f 	.word	0x08007e0f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f000 8227 	beq.w	8007eac <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007a64:	20c8      	movs	r0, #200	; 0xc8
 8007a66:	f004 fa7d 	bl	800bf64 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f004 f973 	bl	800bd56 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007a94:	2200      	movs	r2, #0
 8007a96:	4619      	mov	r1, r3
 8007a98:	f001 fd94 	bl	80095c4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007a9c:	e206      	b.n	8007eac <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d107      	bne.n	8007ab8 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	701a      	strb	r2, [r3, #0]
 8007ab6:	e025      	b.n	8007b04 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007abe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ac2:	d914      	bls.n	8007aee <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007aca:	3301      	adds	r3, #1
 8007acc:	b2da      	uxtb	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007ada:	2b03      	cmp	r3, #3
 8007adc:	d903      	bls.n	8007ae6 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	220d      	movs	r2, #13
 8007ae2:	701a      	strb	r2, [r3, #0]
 8007ae4:	e00e      	b.n	8007b04 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	701a      	strb	r2, [r3, #0]
 8007aec:	e00a      	b.n	8007b04 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007af4:	f103 020a 	add.w	r2, r3, #10
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007afe:	200a      	movs	r0, #10
 8007b00:	f004 fa30 	bl	800bf64 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007b18:	2200      	movs	r2, #0
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	f001 fd52 	bl	80095c4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007b20:	e1cb      	b.n	8007eba <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d005      	beq.n	8007b38 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b32:	2104      	movs	r1, #4
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007b38:	2064      	movs	r0, #100	; 0x64
 8007b3a:	f004 fa13 	bl	800bf64 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f004 f8e2 	bl	800bd08 <USBH_LL_GetSpeed>
 8007b44:	4603      	mov	r3, r0
 8007b46:	461a      	mov	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2205      	movs	r2, #5
 8007b52:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007b54:	2100      	movs	r1, #0
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f001 fc17 	bl	800938a <USBH_AllocPipe>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	461a      	mov	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007b64:	2180      	movs	r1, #128	; 0x80
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f001 fc0f 	bl	800938a <USBH_AllocPipe>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	461a      	mov	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	7919      	ldrb	r1, [r3, #4]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007b88:	b292      	uxth	r2, r2
 8007b8a:	9202      	str	r2, [sp, #8]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	9201      	str	r2, [sp, #4]
 8007b90:	9300      	str	r3, [sp, #0]
 8007b92:	4603      	mov	r3, r0
 8007b94:	2280      	movs	r2, #128	; 0x80
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f001 fbc8 	bl	800932c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	7959      	ldrb	r1, [r3, #5]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007bb0:	b292      	uxth	r2, r2
 8007bb2:	9202      	str	r2, [sp, #8]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	9201      	str	r2, [sp, #4]
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f001 fbb4 	bl	800932c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007bd8:	2200      	movs	r2, #0
 8007bda:	4619      	mov	r1, r3
 8007bdc:	f001 fcf2 	bl	80095c4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007be0:	e16b      	b.n	8007eba <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f96e 	bl	8007ec4 <USBH_HandleEnum>
 8007be8:	4603      	mov	r3, r0
 8007bea:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007bec:	7bbb      	ldrb	r3, [r7, #14]
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f040 815d 	bne.w	8007eb0 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d103      	bne.n	8007c10 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2208      	movs	r2, #8
 8007c0c:	701a      	strb	r2, [r3, #0]
 8007c0e:	e002      	b.n	8007c16 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2207      	movs	r2, #7
 8007c14:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2205      	movs	r2, #5
 8007c1a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	f001 fcc9 	bl	80095c4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007c32:	e13d      	b.n	8007eb0 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	f000 813a 	beq.w	8007eb4 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c46:	2101      	movs	r1, #1
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2208      	movs	r2, #8
 8007c50:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2205      	movs	r2, #5
 8007c56:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007c66:	2200      	movs	r2, #0
 8007c68:	4619      	mov	r1, r3
 8007c6a:	f001 fcab 	bl	80095c4 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007c6e:	e121      	b.n	8007eb4 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	4619      	mov	r1, r3
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fd00 	bl	8008680 <USBH_SetCfg>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d102      	bne.n	8007c8c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2209      	movs	r2, #9
 8007c8a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	f001 fc8e 	bl	80095c4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007ca8:	e107      	b.n	8007eba <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007cb0:	f003 0320 	and.w	r3, r3, #32
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d015      	beq.n	8007ce4 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007cb8:	2101      	movs	r1, #1
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fd03 	bl	80086c6 <USBH_SetFeature>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007cc4:	7bbb      	ldrb	r3, [r7, #14]
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d103      	bne.n	8007cd4 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	220a      	movs	r2, #10
 8007cd0:	701a      	strb	r2, [r3, #0]
 8007cd2:	e00a      	b.n	8007cea <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8007cd4:	7bbb      	ldrb	r3, [r7, #14]
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	2b03      	cmp	r3, #3
 8007cda:	d106      	bne.n	8007cea <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	220a      	movs	r2, #10
 8007ce0:	701a      	strb	r2, [r3, #0]
 8007ce2:	e002      	b.n	8007cea <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	220a      	movs	r2, #10
 8007ce8:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007cfe:	2200      	movs	r2, #0
 8007d00:	4619      	mov	r1, r3
 8007d02:	f001 fc5f 	bl	80095c4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d06:	e0d8      	b.n	8007eba <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d03f      	beq.n	8007d92 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	73fb      	strb	r3, [r7, #15]
 8007d1e:	e016      	b.n	8007d4e <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007d20:	7bfa      	ldrb	r2, [r7, #15]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	32de      	adds	r2, #222	; 0xde
 8007d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d2a:	791a      	ldrb	r2, [r3, #4]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d108      	bne.n	8007d48 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007d36:	7bfa      	ldrb	r2, [r7, #15]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	32de      	adds	r2, #222	; 0xde
 8007d3c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007d46:	e005      	b.n	8007d54 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007d48:	7bfb      	ldrb	r3, [r7, #15]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	73fb      	strb	r3, [r7, #15]
 8007d4e:	7bfb      	ldrb	r3, [r7, #15]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d0e5      	beq.n	8007d20 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d016      	beq.n	8007d8c <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	4798      	blx	r3
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d109      	bne.n	8007d84 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2206      	movs	r2, #6
 8007d74:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d7c:	2103      	movs	r1, #3
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	4798      	blx	r3
 8007d82:	e006      	b.n	8007d92 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	220d      	movs	r2, #13
 8007d88:	701a      	strb	r2, [r3, #0]
 8007d8a:	e002      	b.n	8007d92 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	220d      	movs	r2, #13
 8007d90:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2205      	movs	r2, #5
 8007d96:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007da6:	2200      	movs	r2, #0
 8007da8:	4619      	mov	r1, r3
 8007daa:	f001 fc0b 	bl	80095c4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007dae:	e084      	b.n	8007eba <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d017      	beq.n	8007dea <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	4798      	blx	r3
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007dca:	7bbb      	ldrb	r3, [r7, #14]
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d103      	bne.n	8007dda <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	220b      	movs	r2, #11
 8007dd6:	701a      	strb	r2, [r3, #0]
 8007dd8:	e00a      	b.n	8007df0 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 8007dda:	7bbb      	ldrb	r3, [r7, #14]
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d106      	bne.n	8007df0 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	220d      	movs	r2, #13
 8007de6:	701a      	strb	r2, [r3, #0]
 8007de8:	e002      	b.n	8007df0 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	220d      	movs	r2, #13
 8007dee:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2205      	movs	r2, #5
 8007df4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007e04:	2200      	movs	r2, #0
 8007e06:	4619      	mov	r1, r3
 8007e08:	f001 fbdc 	bl	80095c4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e0c:	e055      	b.n	8007eba <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d04f      	beq.n	8007eb8 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e1e:	695b      	ldr	r3, [r3, #20]
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	4798      	blx	r3
      }
      break;
 8007e24:	e048      	b.n	8007eb8 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7ff fcec 	bl	800780c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d009      	beq.n	8007e52 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d005      	beq.n	8007e68 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e62:	2105      	movs	r1, #5
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d107      	bne.n	8007e84 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f7ff fda5 	bl	80079cc <USBH_Start>
 8007e82:	e002      	b.n	8007e8a <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f003 ff09 	bl	800bc9c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	f001 fb8f 	bl	80095c4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007ea6:	e008      	b.n	8007eba <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8007ea8:	bf00      	nop
 8007eaa:	e006      	b.n	8007eba <USBH_Process+0x4ce>
      break;
 8007eac:	bf00      	nop
 8007eae:	e004      	b.n	8007eba <USBH_Process+0x4ce>
      break;
 8007eb0:	bf00      	nop
 8007eb2:	e002      	b.n	8007eba <USBH_Process+0x4ce>
    break;
 8007eb4:	bf00      	nop
 8007eb6:	e000      	b.n	8007eba <USBH_Process+0x4ce>
      break;
 8007eb8:	bf00      	nop
  }
  return USBH_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b088      	sub	sp, #32
 8007ec8:	af04      	add	r7, sp, #16
 8007eca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	785b      	ldrb	r3, [r3, #1]
 8007ed8:	2b07      	cmp	r3, #7
 8007eda:	f200 8208 	bhi.w	80082ee <USBH_HandleEnum+0x42a>
 8007ede:	a201      	add	r2, pc, #4	; (adr r2, 8007ee4 <USBH_HandleEnum+0x20>)
 8007ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee4:	08007f05 	.word	0x08007f05
 8007ee8:	08007fc3 	.word	0x08007fc3
 8007eec:	0800802d 	.word	0x0800802d
 8007ef0:	080080bb 	.word	0x080080bb
 8007ef4:	08008125 	.word	0x08008125
 8007ef8:	08008195 	.word	0x08008195
 8007efc:	08008231 	.word	0x08008231
 8007f00:	080082af 	.word	0x080082af
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007f04:	2108      	movs	r1, #8
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 faea 	bl	80084e0 <USBH_Get_DevDesc>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f10:	7bbb      	ldrb	r3, [r7, #14]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d130      	bne.n	8007f78 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	7919      	ldrb	r1, [r3, #4]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007f3a:	b292      	uxth	r2, r2
 8007f3c:	9202      	str	r2, [sp, #8]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	9201      	str	r2, [sp, #4]
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	4603      	mov	r3, r0
 8007f46:	2280      	movs	r2, #128	; 0x80
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f001 f9ef 	bl	800932c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	7959      	ldrb	r1, [r3, #5]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007f62:	b292      	uxth	r2, r2
 8007f64:	9202      	str	r2, [sp, #8]
 8007f66:	2200      	movs	r2, #0
 8007f68:	9201      	str	r2, [sp, #4]
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2200      	movs	r2, #0
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f001 f9db 	bl	800932c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007f76:	e1bc      	b.n	80082f2 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f78:	7bbb      	ldrb	r3, [r7, #14]
 8007f7a:	2b03      	cmp	r3, #3
 8007f7c:	f040 81b9 	bne.w	80082f2 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f86:	3301      	adds	r3, #1
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f96:	2b03      	cmp	r3, #3
 8007f98:	d903      	bls.n	8007fa2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	220d      	movs	r2, #13
 8007f9e:	701a      	strb	r2, [r3, #0]
      break;
 8007fa0:	e1a7      	b.n	80082f2 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	795b      	ldrb	r3, [r3, #5]
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f001 fa0f 	bl	80093cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	791b      	ldrb	r3, [r3, #4]
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f001 fa09 	bl	80093cc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	701a      	strb	r2, [r3, #0]
      break;
 8007fc0:	e197      	b.n	80082f2 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007fc2:	2112      	movs	r1, #18
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fa8b 	bl	80084e0 <USBH_Get_DevDesc>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007fce:	7bbb      	ldrb	r3, [r7, #14]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d103      	bne.n	8007fdc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2202      	movs	r2, #2
 8007fd8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007fda:	e18c      	b.n	80082f6 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007fdc:	7bbb      	ldrb	r3, [r7, #14]
 8007fde:	2b03      	cmp	r3, #3
 8007fe0:	f040 8189 	bne.w	80082f6 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007fea:	3301      	adds	r3, #1
 8007fec:	b2da      	uxtb	r2, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ffa:	2b03      	cmp	r3, #3
 8007ffc:	d903      	bls.n	8008006 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	220d      	movs	r2, #13
 8008002:	701a      	strb	r2, [r3, #0]
      break;
 8008004:	e177      	b.n	80082f6 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	795b      	ldrb	r3, [r3, #5]
 800800a:	4619      	mov	r1, r3
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f001 f9dd 	bl	80093cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	791b      	ldrb	r3, [r3, #4]
 8008016:	4619      	mov	r1, r3
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f001 f9d7 	bl	80093cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	701a      	strb	r2, [r3, #0]
      break;
 800802a:	e164      	b.n	80082f6 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800802c:	2101      	movs	r1, #1
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fb02 	bl	8008638 <USBH_SetAddress>
 8008034:	4603      	mov	r3, r0
 8008036:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008038:	7bbb      	ldrb	r3, [r7, #14]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d132      	bne.n	80080a4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800803e:	2002      	movs	r0, #2
 8008040:	f003 ff90 	bl	800bf64 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2203      	movs	r2, #3
 8008050:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	7919      	ldrb	r1, [r3, #4]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008066:	b292      	uxth	r2, r2
 8008068:	9202      	str	r2, [sp, #8]
 800806a:	2200      	movs	r2, #0
 800806c:	9201      	str	r2, [sp, #4]
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	4603      	mov	r3, r0
 8008072:	2280      	movs	r2, #128	; 0x80
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f001 f959 	bl	800932c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	7959      	ldrb	r1, [r3, #5]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800808e:	b292      	uxth	r2, r2
 8008090:	9202      	str	r2, [sp, #8]
 8008092:	2200      	movs	r2, #0
 8008094:	9201      	str	r2, [sp, #4]
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	4603      	mov	r3, r0
 800809a:	2200      	movs	r2, #0
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f001 f945 	bl	800932c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80080a2:	e12a      	b.n	80082fa <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080a4:	7bbb      	ldrb	r3, [r7, #14]
 80080a6:	2b03      	cmp	r3, #3
 80080a8:	f040 8127 	bne.w	80082fa <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	220d      	movs	r2, #13
 80080b0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	705a      	strb	r2, [r3, #1]
      break;
 80080b8:	e11f      	b.n	80082fa <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80080ba:	2109      	movs	r1, #9
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fa37 	bl	8008530 <USBH_Get_CfgDesc>
 80080c2:	4603      	mov	r3, r0
 80080c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80080c6:	7bbb      	ldrb	r3, [r7, #14]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d103      	bne.n	80080d4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2204      	movs	r2, #4
 80080d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80080d2:	e114      	b.n	80082fe <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080d4:	7bbb      	ldrb	r3, [r7, #14]
 80080d6:	2b03      	cmp	r3, #3
 80080d8:	f040 8111 	bne.w	80082fe <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80080e2:	3301      	adds	r3, #1
 80080e4:	b2da      	uxtb	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80080f2:	2b03      	cmp	r3, #3
 80080f4:	d903      	bls.n	80080fe <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	220d      	movs	r2, #13
 80080fa:	701a      	strb	r2, [r3, #0]
      break;
 80080fc:	e0ff      	b.n	80082fe <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	795b      	ldrb	r3, [r3, #5]
 8008102:	4619      	mov	r1, r3
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f001 f961 	bl	80093cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	791b      	ldrb	r3, [r3, #4]
 800810e:	4619      	mov	r1, r3
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f001 f95b 	bl	80093cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	701a      	strb	r2, [r3, #0]
      break;
 8008122:	e0ec      	b.n	80082fe <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800812a:	4619      	mov	r1, r3
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f9ff 	bl	8008530 <USBH_Get_CfgDesc>
 8008132:	4603      	mov	r3, r0
 8008134:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008136:	7bbb      	ldrb	r3, [r7, #14]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d103      	bne.n	8008144 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2205      	movs	r2, #5
 8008140:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008142:	e0de      	b.n	8008302 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008144:	7bbb      	ldrb	r3, [r7, #14]
 8008146:	2b03      	cmp	r3, #3
 8008148:	f040 80db 	bne.w	8008302 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008152:	3301      	adds	r3, #1
 8008154:	b2da      	uxtb	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008162:	2b03      	cmp	r3, #3
 8008164:	d903      	bls.n	800816e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	220d      	movs	r2, #13
 800816a:	701a      	strb	r2, [r3, #0]
      break;
 800816c:	e0c9      	b.n	8008302 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	795b      	ldrb	r3, [r3, #5]
 8008172:	4619      	mov	r1, r3
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f001 f929 	bl	80093cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	791b      	ldrb	r3, [r3, #4]
 800817e:	4619      	mov	r1, r3
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f001 f923 	bl	80093cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	701a      	strb	r2, [r3, #0]
      break;
 8008192:	e0b6      	b.n	8008302 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800819a:	2b00      	cmp	r3, #0
 800819c:	d036      	beq.n	800820c <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80081aa:	23ff      	movs	r3, #255	; 0xff
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 f9e3 	bl	8008578 <USBH_Get_StringDesc>
 80081b2:	4603      	mov	r3, r0
 80081b4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80081b6:	7bbb      	ldrb	r3, [r7, #14]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d111      	bne.n	80081e0 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2206      	movs	r2, #6
 80081c0:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2205      	movs	r2, #5
 80081c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80081d6:	2200      	movs	r2, #0
 80081d8:	4619      	mov	r1, r3
 80081da:	f001 f9f3 	bl	80095c4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80081de:	e092      	b.n	8008306 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081e0:	7bbb      	ldrb	r3, [r7, #14]
 80081e2:	2b03      	cmp	r3, #3
 80081e4:	f040 808f 	bne.w	8008306 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2206      	movs	r2, #6
 80081ec:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2205      	movs	r2, #5
 80081f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008202:	2200      	movs	r2, #0
 8008204:	4619      	mov	r1, r3
 8008206:	f001 f9dd 	bl	80095c4 <osMessagePut>
      break;
 800820a:	e07c      	b.n	8008306 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2206      	movs	r2, #6
 8008210:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2205      	movs	r2, #5
 8008216:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008226:	2200      	movs	r2, #0
 8008228:	4619      	mov	r1, r3
 800822a:	f001 f9cb 	bl	80095c4 <osMessagePut>
      break;
 800822e:	e06a      	b.n	8008306 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008236:	2b00      	cmp	r3, #0
 8008238:	d027      	beq.n	800828a <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008246:	23ff      	movs	r3, #255	; 0xff
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 f995 	bl	8008578 <USBH_Get_StringDesc>
 800824e:	4603      	mov	r3, r0
 8008250:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008252:	7bbb      	ldrb	r3, [r7, #14]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d103      	bne.n	8008260 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2207      	movs	r2, #7
 800825c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800825e:	e054      	b.n	800830a <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008260:	7bbb      	ldrb	r3, [r7, #14]
 8008262:	2b03      	cmp	r3, #3
 8008264:	d151      	bne.n	800830a <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2207      	movs	r2, #7
 800826a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2205      	movs	r2, #5
 8008270:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008280:	2200      	movs	r2, #0
 8008282:	4619      	mov	r1, r3
 8008284:	f001 f99e 	bl	80095c4 <osMessagePut>
      break;
 8008288:	e03f      	b.n	800830a <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2207      	movs	r2, #7
 800828e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2205      	movs	r2, #5
 8008294:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80082a4:	2200      	movs	r2, #0
 80082a6:	4619      	mov	r1, r3
 80082a8:	f001 f98c 	bl	80095c4 <osMessagePut>
      break;
 80082ac:	e02d      	b.n	800830a <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d017      	beq.n	80082e8 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80082c4:	23ff      	movs	r3, #255	; 0xff
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f956 	bl	8008578 <USBH_Get_StringDesc>
 80082cc:	4603      	mov	r3, r0
 80082ce:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80082d0:	7bbb      	ldrb	r3, [r7, #14]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d102      	bne.n	80082dc <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80082da:	e018      	b.n	800830e <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082dc:	7bbb      	ldrb	r3, [r7, #14]
 80082de:	2b03      	cmp	r3, #3
 80082e0:	d115      	bne.n	800830e <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	73fb      	strb	r3, [r7, #15]
      break;
 80082e6:	e012      	b.n	800830e <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 80082e8:	2300      	movs	r3, #0
 80082ea:	73fb      	strb	r3, [r7, #15]
      break;
 80082ec:	e00f      	b.n	800830e <USBH_HandleEnum+0x44a>

    default:
      break;
 80082ee:	bf00      	nop
 80082f0:	e00e      	b.n	8008310 <USBH_HandleEnum+0x44c>
      break;
 80082f2:	bf00      	nop
 80082f4:	e00c      	b.n	8008310 <USBH_HandleEnum+0x44c>
      break;
 80082f6:	bf00      	nop
 80082f8:	e00a      	b.n	8008310 <USBH_HandleEnum+0x44c>
      break;
 80082fa:	bf00      	nop
 80082fc:	e008      	b.n	8008310 <USBH_HandleEnum+0x44c>
      break;
 80082fe:	bf00      	nop
 8008300:	e006      	b.n	8008310 <USBH_HandleEnum+0x44c>
      break;
 8008302:	bf00      	nop
 8008304:	e004      	b.n	8008310 <USBH_HandleEnum+0x44c>
      break;
 8008306:	bf00      	nop
 8008308:	e002      	b.n	8008310 <USBH_HandleEnum+0x44c>
      break;
 800830a:	bf00      	nop
 800830c:	e000      	b.n	8008310 <USBH_HandleEnum+0x44c>
      break;
 800830e:	bf00      	nop
  }
  return Status;
 8008310:	7bfb      	ldrb	r3, [r7, #15]
}
 8008312:	4618      	mov	r0, r3
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop

0800831c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	683a      	ldr	r2, [r7, #0]
 800832a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800832e:	bf00      	nop
 8008330:	370c      	adds	r7, #12
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr

0800833a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b082      	sub	sp, #8
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008348:	1c5a      	adds	r2, r3, #1
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f804 	bl	800835e <USBH_HandleSof>
}
 8008356:	bf00      	nop
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b082      	sub	sp, #8
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	b2db      	uxtb	r3, r3
 800836c:	2b0b      	cmp	r3, #11
 800836e:	d10a      	bne.n	8008386 <USBH_HandleSof+0x28>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008376:	2b00      	cmp	r3, #0
 8008378:	d005      	beq.n	8008386 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008380:	699b      	ldr	r3, [r3, #24]
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	4798      	blx	r3
  }
}
 8008386:	bf00      	nop
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b082      	sub	sp, #8
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2201      	movs	r2, #1
 800839a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2201      	movs	r2, #1
 80083a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80083b2:	2200      	movs	r2, #0
 80083b4:	4619      	mov	r1, r3
 80083b6:	f001 f905 	bl	80095c4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80083ba:	bf00      	nop
}
 80083bc:	3708      	adds	r7, #8
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b083      	sub	sp, #12
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80083d2:	bf00      	nop
}
 80083d4:	370c      	adds	r7, #12
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr

080083de <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b082      	sub	sp, #8
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2201      	movs	r2, #1
 80083ea:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2201      	movs	r2, #1
 8008402:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008412:	2200      	movs	r2, #0
 8008414:	4619      	mov	r1, r3
 8008416:	f001 f8d5 	bl	80095c4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f003 fc44 	bl	800bcd2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	791b      	ldrb	r3, [r3, #4]
 800844e:	4619      	mov	r1, r3
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 ffbb 	bl	80093cc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	795b      	ldrb	r3, [r3, #5]
 800845a:	4619      	mov	r1, r3
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 ffb5 	bl	80093cc <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2201      	movs	r2, #1
 8008466:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008476:	2200      	movs	r2, #0
 8008478:	4619      	mov	r1, r3
 800847a:	f001 f8a3 	bl	80095c4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3708      	adds	r7, #8
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8008496:	f107 030c 	add.w	r3, r7, #12
 800849a:	f04f 32ff 	mov.w	r2, #4294967295
 800849e:	4618      	mov	r0, r3
 80084a0:	f001 f8d0 	bl	8009644 <osMessageGet>
    if (event.status == osEventMessage)
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2b10      	cmp	r3, #16
 80084a8:	d1f2      	bne.n	8008490 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7ff fa9e 	bl	80079ec <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80084b0:	e7ee      	b.n	8008490 <USBH_Process_OS+0x8>

080084b2 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b082      	sub	sp, #8
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2201      	movs	r2, #1
 80084be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80084ce:	2200      	movs	r2, #0
 80084d0:	4619      	mov	r1, r3
 80084d2:	f001 f877 	bl	80095c4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af02      	add	r7, sp, #8
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	460b      	mov	r3, r1
 80084ea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80084f2:	78fb      	ldrb	r3, [r7, #3]
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	9300      	str	r3, [sp, #0]
 80084f8:	4613      	mov	r3, r2
 80084fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084fe:	2100      	movs	r1, #0
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 f864 	bl	80085ce <USBH_GetDescriptor>
 8008506:	4603      	mov	r3, r0
 8008508:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800850a:	7bfb      	ldrb	r3, [r7, #15]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10a      	bne.n	8008526 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800851c:	78fa      	ldrb	r2, [r7, #3]
 800851e:	b292      	uxth	r2, r2
 8008520:	4619      	mov	r1, r3
 8008522:	f000 f918 	bl	8008756 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008526:	7bfb      	ldrb	r3, [r7, #15]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af02      	add	r7, sp, #8
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	331c      	adds	r3, #28
 8008540:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008542:	887b      	ldrh	r3, [r7, #2]
 8008544:	9300      	str	r3, [sp, #0]
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800854c:	2100      	movs	r1, #0
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 f83d 	bl	80085ce <USBH_GetDescriptor>
 8008554:	4603      	mov	r3, r0
 8008556:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008558:	7bfb      	ldrb	r3, [r7, #15]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d107      	bne.n	800856e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800855e:	887b      	ldrh	r3, [r7, #2]
 8008560:	461a      	mov	r2, r3
 8008562:	68b9      	ldr	r1, [r7, #8]
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 f987 	bl	8008878 <USBH_ParseCfgDesc>
 800856a:	4603      	mov	r3, r0
 800856c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800856e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008570:	4618      	mov	r0, r3
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b088      	sub	sp, #32
 800857c:	af02      	add	r7, sp, #8
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	607a      	str	r2, [r7, #4]
 8008582:	461a      	mov	r2, r3
 8008584:	460b      	mov	r3, r1
 8008586:	72fb      	strb	r3, [r7, #11]
 8008588:	4613      	mov	r3, r2
 800858a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800858c:	7afb      	ldrb	r3, [r7, #11]
 800858e:	b29b      	uxth	r3, r3
 8008590:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008594:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800859c:	893b      	ldrh	r3, [r7, #8]
 800859e:	9300      	str	r3, [sp, #0]
 80085a0:	460b      	mov	r3, r1
 80085a2:	2100      	movs	r1, #0
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f000 f812 	bl	80085ce <USBH_GetDescriptor>
 80085aa:	4603      	mov	r3, r0
 80085ac:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80085ae:	7dfb      	ldrb	r3, [r7, #23]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d107      	bne.n	80085c4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80085ba:	893a      	ldrh	r2, [r7, #8]
 80085bc:	6879      	ldr	r1, [r7, #4]
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 fb24 	bl	8008c0c <USBH_ParseStringDesc>
  }

  return status;
 80085c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3718      	adds	r7, #24
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b084      	sub	sp, #16
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	60f8      	str	r0, [r7, #12]
 80085d6:	607b      	str	r3, [r7, #4]
 80085d8:	460b      	mov	r3, r1
 80085da:	72fb      	strb	r3, [r7, #11]
 80085dc:	4613      	mov	r3, r2
 80085de:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	789b      	ldrb	r3, [r3, #2]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d11c      	bne.n	8008622 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80085e8:	7afb      	ldrb	r3, [r7, #11]
 80085ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80085ee:	b2da      	uxtb	r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2206      	movs	r2, #6
 80085f8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	893a      	ldrh	r2, [r7, #8]
 80085fe:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008600:	893b      	ldrh	r3, [r7, #8]
 8008602:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008606:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800860a:	d104      	bne.n	8008616 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f240 4209 	movw	r2, #1033	; 0x409
 8008612:	829a      	strh	r2, [r3, #20]
 8008614:	e002      	b.n	800861c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2200      	movs	r2, #0
 800861a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	8b3a      	ldrh	r2, [r7, #24]
 8008620:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008622:	8b3b      	ldrh	r3, [r7, #24]
 8008624:	461a      	mov	r2, r3
 8008626:	6879      	ldr	r1, [r7, #4]
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f000 fb3d 	bl	8008ca8 <USBH_CtlReq>
 800862e:	4603      	mov	r3, r0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	460b      	mov	r3, r1
 8008642:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	789b      	ldrb	r3, [r3, #2]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d10f      	bne.n	800866c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2205      	movs	r2, #5
 8008656:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008658:	78fb      	ldrb	r3, [r7, #3]
 800865a:	b29a      	uxth	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800866c:	2200      	movs	r2, #0
 800866e:	2100      	movs	r1, #0
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 fb19 	bl	8008ca8 <USBH_CtlReq>
 8008676:	4603      	mov	r3, r0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	460b      	mov	r3, r1
 800868a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	789b      	ldrb	r3, [r3, #2]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d10e      	bne.n	80086b2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2209      	movs	r2, #9
 800869e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	887a      	ldrh	r2, [r7, #2]
 80086a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80086b2:	2200      	movs	r2, #0
 80086b4:	2100      	movs	r1, #0
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 faf6 	bl	8008ca8 <USBH_CtlReq>
 80086bc:	4603      	mov	r3, r0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3708      	adds	r7, #8
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b082      	sub	sp, #8
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	460b      	mov	r3, r1
 80086d0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	789b      	ldrb	r3, [r3, #2]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d10f      	bne.n	80086fa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2203      	movs	r2, #3
 80086e4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80086e6:	78fb      	ldrb	r3, [r7, #3]
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80086fa:	2200      	movs	r2, #0
 80086fc:	2100      	movs	r1, #0
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 fad2 	bl	8008ca8 <USBH_CtlReq>
 8008704:	4603      	mov	r3, r0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b082      	sub	sp, #8
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	460b      	mov	r3, r1
 8008718:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	789b      	ldrb	r3, [r3, #2]
 800871e:	2b01      	cmp	r3, #1
 8008720:	d10f      	bne.n	8008742 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2202      	movs	r2, #2
 8008726:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008734:	78fb      	ldrb	r3, [r7, #3]
 8008736:	b29a      	uxth	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008742:	2200      	movs	r2, #0
 8008744:	2100      	movs	r1, #0
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 faae 	bl	8008ca8 <USBH_CtlReq>
 800874c:	4603      	mov	r3, r0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008756:	b480      	push	{r7}
 8008758:	b085      	sub	sp, #20
 800875a:	af00      	add	r7, sp, #0
 800875c:	60f8      	str	r0, [r7, #12]
 800875e:	60b9      	str	r1, [r7, #8]
 8008760:	4613      	mov	r3, r2
 8008762:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	781a      	ldrb	r2, [r3, #0]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	785a      	ldrb	r2, [r3, #1]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	3302      	adds	r3, #2
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	b29a      	uxth	r2, r3
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	3303      	adds	r3, #3
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	b29b      	uxth	r3, r3
 8008784:	021b      	lsls	r3, r3, #8
 8008786:	b29b      	uxth	r3, r3
 8008788:	4313      	orrs	r3, r2
 800878a:	b29a      	uxth	r2, r3
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	791a      	ldrb	r2, [r3, #4]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	795a      	ldrb	r2, [r3, #5]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	799a      	ldrb	r2, [r3, #6]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	79da      	ldrb	r2, [r3, #7]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	79db      	ldrb	r3, [r3, #7]
 80087b4:	2b20      	cmp	r3, #32
 80087b6:	dc11      	bgt.n	80087dc <USBH_ParseDevDesc+0x86>
 80087b8:	2b08      	cmp	r3, #8
 80087ba:	db16      	blt.n	80087ea <USBH_ParseDevDesc+0x94>
 80087bc:	3b08      	subs	r3, #8
 80087be:	2201      	movs	r2, #1
 80087c0:	fa02 f303 	lsl.w	r3, r2, r3
 80087c4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80087c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	bf14      	ite	ne
 80087d0:	2301      	movne	r3, #1
 80087d2:	2300      	moveq	r3, #0
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d102      	bne.n	80087e0 <USBH_ParseDevDesc+0x8a>
 80087da:	e006      	b.n	80087ea <USBH_ParseDevDesc+0x94>
 80087dc:	2b40      	cmp	r3, #64	; 0x40
 80087de:	d104      	bne.n	80087ea <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	79da      	ldrb	r2, [r3, #7]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	71da      	strb	r2, [r3, #7]
      break;
 80087e8:	e003      	b.n	80087f2 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2240      	movs	r2, #64	; 0x40
 80087ee:	71da      	strb	r2, [r3, #7]
      break;
 80087f0:	bf00      	nop
  }

  if (length > 8U)
 80087f2:	88fb      	ldrh	r3, [r7, #6]
 80087f4:	2b08      	cmp	r3, #8
 80087f6:	d939      	bls.n	800886c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	3308      	adds	r3, #8
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	b29a      	uxth	r2, r3
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	3309      	adds	r3, #9
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	b29b      	uxth	r3, r3
 8008808:	021b      	lsls	r3, r3, #8
 800880a:	b29b      	uxth	r3, r3
 800880c:	4313      	orrs	r3, r2
 800880e:	b29a      	uxth	r2, r3
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	330a      	adds	r3, #10
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	b29a      	uxth	r2, r3
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	330b      	adds	r3, #11
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	b29b      	uxth	r3, r3
 8008824:	021b      	lsls	r3, r3, #8
 8008826:	b29b      	uxth	r3, r3
 8008828:	4313      	orrs	r3, r2
 800882a:	b29a      	uxth	r2, r3
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	330c      	adds	r3, #12
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	b29a      	uxth	r2, r3
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	330d      	adds	r3, #13
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	b29b      	uxth	r3, r3
 8008840:	021b      	lsls	r3, r3, #8
 8008842:	b29b      	uxth	r3, r3
 8008844:	4313      	orrs	r3, r2
 8008846:	b29a      	uxth	r2, r3
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	7b9a      	ldrb	r2, [r3, #14]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	7bda      	ldrb	r2, [r3, #15]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	7c1a      	ldrb	r2, [r3, #16]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	7c5a      	ldrb	r2, [r3, #17]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	745a      	strb	r2, [r3, #17]
  }
}
 800886c:	bf00      	nop
 800886e:	3714      	adds	r7, #20
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b08c      	sub	sp, #48	; 0x30
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	4613      	mov	r3, r2
 8008884:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800888c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800888e:	2300      	movs	r3, #0
 8008890:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008898:	2300      	movs	r3, #0
 800889a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800889e:	2300      	movs	r3, #0
 80088a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	781a      	ldrb	r2, [r3, #0]
 80088ac:	6a3b      	ldr	r3, [r7, #32]
 80088ae:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	785a      	ldrb	r2, [r3, #1]
 80088b4:	6a3b      	ldr	r3, [r7, #32]
 80088b6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	3302      	adds	r3, #2
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	b29a      	uxth	r2, r3
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	3303      	adds	r3, #3
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	021b      	lsls	r3, r3, #8
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	4313      	orrs	r3, r2
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088d4:	bf28      	it	cs
 80088d6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80088da:	b29a      	uxth	r2, r3
 80088dc:	6a3b      	ldr	r3, [r7, #32]
 80088de:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	791a      	ldrb	r2, [r3, #4]
 80088e4:	6a3b      	ldr	r3, [r7, #32]
 80088e6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	795a      	ldrb	r2, [r3, #5]
 80088ec:	6a3b      	ldr	r3, [r7, #32]
 80088ee:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	799a      	ldrb	r2, [r3, #6]
 80088f4:	6a3b      	ldr	r3, [r7, #32]
 80088f6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	79da      	ldrb	r2, [r3, #7]
 80088fc:	6a3b      	ldr	r3, [r7, #32]
 80088fe:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	7a1a      	ldrb	r2, [r3, #8]
 8008904:	6a3b      	ldr	r3, [r7, #32]
 8008906:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008908:	6a3b      	ldr	r3, [r7, #32]
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	2b09      	cmp	r3, #9
 800890e:	d002      	beq.n	8008916 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008910:	6a3b      	ldr	r3, [r7, #32]
 8008912:	2209      	movs	r2, #9
 8008914:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008916:	88fb      	ldrh	r3, [r7, #6]
 8008918:	2b09      	cmp	r3, #9
 800891a:	f240 809d 	bls.w	8008a58 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800891e:	2309      	movs	r3, #9
 8008920:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008922:	2300      	movs	r3, #0
 8008924:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008926:	e081      	b.n	8008a2c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008928:	f107 0316 	add.w	r3, r7, #22
 800892c:	4619      	mov	r1, r3
 800892e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008930:	f000 f99f 	bl	8008c72 <USBH_GetNextDesc>
 8008934:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008938:	785b      	ldrb	r3, [r3, #1]
 800893a:	2b04      	cmp	r3, #4
 800893c:	d176      	bne.n	8008a2c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800893e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	2b09      	cmp	r3, #9
 8008944:	d002      	beq.n	800894c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008948:	2209      	movs	r2, #9
 800894a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800894c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008950:	221a      	movs	r2, #26
 8008952:	fb02 f303 	mul.w	r3, r2, r3
 8008956:	3308      	adds	r3, #8
 8008958:	6a3a      	ldr	r2, [r7, #32]
 800895a:	4413      	add	r3, r2
 800895c:	3302      	adds	r3, #2
 800895e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008960:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008962:	69f8      	ldr	r0, [r7, #28]
 8008964:	f000 f87e 	bl	8008a64 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008968:	2300      	movs	r3, #0
 800896a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800896e:	2300      	movs	r3, #0
 8008970:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008972:	e043      	b.n	80089fc <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008974:	f107 0316 	add.w	r3, r7, #22
 8008978:	4619      	mov	r1, r3
 800897a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800897c:	f000 f979 	bl	8008c72 <USBH_GetNextDesc>
 8008980:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008984:	785b      	ldrb	r3, [r3, #1]
 8008986:	2b05      	cmp	r3, #5
 8008988:	d138      	bne.n	80089fc <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	795b      	ldrb	r3, [r3, #5]
 800898e:	2b01      	cmp	r3, #1
 8008990:	d10f      	bne.n	80089b2 <USBH_ParseCfgDesc+0x13a>
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	799b      	ldrb	r3, [r3, #6]
 8008996:	2b02      	cmp	r3, #2
 8008998:	d10b      	bne.n	80089b2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	79db      	ldrb	r3, [r3, #7]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d10f      	bne.n	80089c2 <USBH_ParseCfgDesc+0x14a>
 80089a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	2b09      	cmp	r3, #9
 80089a8:	d00b      	beq.n	80089c2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80089aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ac:	2209      	movs	r2, #9
 80089ae:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80089b0:	e007      	b.n	80089c2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80089b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	2b07      	cmp	r3, #7
 80089b8:	d004      	beq.n	80089c4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80089ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089bc:	2207      	movs	r2, #7
 80089be:	701a      	strb	r2, [r3, #0]
 80089c0:	e000      	b.n	80089c4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80089c2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80089c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089c8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80089cc:	3201      	adds	r2, #1
 80089ce:	00d2      	lsls	r2, r2, #3
 80089d0:	211a      	movs	r1, #26
 80089d2:	fb01 f303 	mul.w	r3, r1, r3
 80089d6:	4413      	add	r3, r2
 80089d8:	3308      	adds	r3, #8
 80089da:	6a3a      	ldr	r2, [r7, #32]
 80089dc:	4413      	add	r3, r2
 80089de:	3304      	adds	r3, #4
 80089e0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80089e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089e4:	69b9      	ldr	r1, [r7, #24]
 80089e6:	68f8      	ldr	r0, [r7, #12]
 80089e8:	f000 f86b 	bl	8008ac2 <USBH_ParseEPDesc>
 80089ec:	4603      	mov	r3, r0
 80089ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80089f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80089f6:	3301      	adds	r3, #1
 80089f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	791b      	ldrb	r3, [r3, #4]
 8008a00:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d204      	bcs.n	8008a12 <USBH_ParseCfgDesc+0x19a>
 8008a08:	6a3b      	ldr	r3, [r7, #32]
 8008a0a:	885a      	ldrh	r2, [r3, #2]
 8008a0c:	8afb      	ldrh	r3, [r7, #22]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d8b0      	bhi.n	8008974 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	791b      	ldrb	r3, [r3, #4]
 8008a16:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d201      	bcs.n	8008a22 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	e01c      	b.n	8008a5c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008a22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a26:	3301      	adds	r3, #1
 8008a28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d805      	bhi.n	8008a40 <USBH_ParseCfgDesc+0x1c8>
 8008a34:	6a3b      	ldr	r3, [r7, #32]
 8008a36:	885a      	ldrh	r2, [r3, #2]
 8008a38:	8afb      	ldrh	r3, [r7, #22]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	f63f af74 	bhi.w	8008928 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008a40:	6a3b      	ldr	r3, [r7, #32]
 8008a42:	791b      	ldrb	r3, [r3, #4]
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	bf28      	it	cs
 8008a48:	2302      	movcs	r3, #2
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d201      	bcs.n	8008a58 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008a54:	2303      	movs	r3, #3
 8008a56:	e001      	b.n	8008a5c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008a58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3730      	adds	r7, #48	; 0x30
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	781a      	ldrb	r2, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	785a      	ldrb	r2, [r3, #1]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	789a      	ldrb	r2, [r3, #2]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	78da      	ldrb	r2, [r3, #3]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	791a      	ldrb	r2, [r3, #4]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	795a      	ldrb	r2, [r3, #5]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	799a      	ldrb	r2, [r3, #6]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	79da      	ldrb	r2, [r3, #7]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	7a1a      	ldrb	r2, [r3, #8]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	721a      	strb	r2, [r3, #8]
}
 8008ab6:	bf00      	nop
 8008ab8:	370c      	adds	r7, #12
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr

08008ac2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008ac2:	b480      	push	{r7}
 8008ac4:	b087      	sub	sp, #28
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	60f8      	str	r0, [r7, #12]
 8008aca:	60b9      	str	r1, [r7, #8]
 8008acc:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	781a      	ldrb	r2, [r3, #0]
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	785a      	ldrb	r2, [r3, #1]
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	789a      	ldrb	r2, [r3, #2]
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	78da      	ldrb	r2, [r3, #3]
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	3304      	adds	r3, #4
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	b29a      	uxth	r2, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	3305      	adds	r3, #5
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	021b      	lsls	r3, r3, #8
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	4313      	orrs	r3, r2
 8008b08:	b29a      	uxth	r2, r3
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	799a      	ldrb	r2, [r3, #6]
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	889b      	ldrh	r3, [r3, #4]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d102      	bne.n	8008b24 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008b1e:	2303      	movs	r3, #3
 8008b20:	75fb      	strb	r3, [r7, #23]
 8008b22:	e033      	b.n	8008b8c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	889b      	ldrh	r3, [r3, #4]
 8008b28:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008b2c:	f023 0307 	bic.w	r3, r3, #7
 8008b30:	b29a      	uxth	r2, r3
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	889b      	ldrh	r3, [r3, #4]
 8008b3a:	b21a      	sxth	r2, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	3304      	adds	r3, #4
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	b299      	uxth	r1, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	3305      	adds	r3, #5
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	021b      	lsls	r3, r3, #8
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	430b      	orrs	r3, r1
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d110      	bne.n	8008b7e <USBH_ParseEPDesc+0xbc>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	3304      	adds	r3, #4
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	b299      	uxth	r1, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	3305      	adds	r3, #5
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	021b      	lsls	r3, r3, #8
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	430b      	orrs	r3, r1
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	b21b      	sxth	r3, r3
 8008b76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b7a:	b21b      	sxth	r3, r3
 8008b7c:	e001      	b.n	8008b82 <USBH_ParseEPDesc+0xc0>
 8008b7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b82:	4313      	orrs	r3, r2
 8008b84:	b21b      	sxth	r3, r3
 8008b86:	b29a      	uxth	r2, r3
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d116      	bne.n	8008bc4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	78db      	ldrb	r3, [r3, #3]
 8008b9a:	f003 0303 	and.w	r3, r3, #3
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d005      	beq.n	8008bae <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	78db      	ldrb	r3, [r3, #3]
 8008ba6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008baa:	2b03      	cmp	r3, #3
 8008bac:	d127      	bne.n	8008bfe <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	799b      	ldrb	r3, [r3, #6]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d003      	beq.n	8008bbe <USBH_ParseEPDesc+0xfc>
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	799b      	ldrb	r3, [r3, #6]
 8008bba:	2b10      	cmp	r3, #16
 8008bbc:	d91f      	bls.n	8008bfe <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	75fb      	strb	r3, [r7, #23]
 8008bc2:	e01c      	b.n	8008bfe <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	78db      	ldrb	r3, [r3, #3]
 8008bc8:	f003 0303 	and.w	r3, r3, #3
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d10a      	bne.n	8008be6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	799b      	ldrb	r3, [r3, #6]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d003      	beq.n	8008be0 <USBH_ParseEPDesc+0x11e>
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	799b      	ldrb	r3, [r3, #6]
 8008bdc:	2b10      	cmp	r3, #16
 8008bde:	d90e      	bls.n	8008bfe <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008be0:	2303      	movs	r3, #3
 8008be2:	75fb      	strb	r3, [r7, #23]
 8008be4:	e00b      	b.n	8008bfe <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	78db      	ldrb	r3, [r3, #3]
 8008bea:	f003 0303 	and.w	r3, r3, #3
 8008bee:	2b03      	cmp	r3, #3
 8008bf0:	d105      	bne.n	8008bfe <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	799b      	ldrb	r3, [r3, #6]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d101      	bne.n	8008bfe <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	371c      	adds	r7, #28
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b087      	sub	sp, #28
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	4613      	mov	r3, r2
 8008c18:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	2b03      	cmp	r3, #3
 8008c22:	d120      	bne.n	8008c66 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	1e9a      	subs	r2, r3, #2
 8008c2a:	88fb      	ldrh	r3, [r7, #6]
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	bf28      	it	cs
 8008c30:	4613      	movcs	r3, r2
 8008c32:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	3302      	adds	r3, #2
 8008c38:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	82fb      	strh	r3, [r7, #22]
 8008c3e:	e00b      	b.n	8008c58 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008c40:	8afb      	ldrh	r3, [r7, #22]
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	4413      	add	r3, r2
 8008c46:	781a      	ldrb	r2, [r3, #0]
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008c52:	8afb      	ldrh	r3, [r7, #22]
 8008c54:	3302      	adds	r3, #2
 8008c56:	82fb      	strh	r3, [r7, #22]
 8008c58:	8afa      	ldrh	r2, [r7, #22]
 8008c5a:	8abb      	ldrh	r3, [r7, #20]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d3ef      	bcc.n	8008c40 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	2200      	movs	r2, #0
 8008c64:	701a      	strb	r2, [r3, #0]
  }
}
 8008c66:	bf00      	nop
 8008c68:	371c      	adds	r7, #28
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr

08008c72 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008c72:	b480      	push	{r7}
 8008c74:	b085      	sub	sp, #20
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
 8008c7a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	881a      	ldrh	r2, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	4413      	add	r3, r2
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4413      	add	r3, r2
 8008c98:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3714      	adds	r7, #20
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b086      	sub	sp, #24
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	789b      	ldrb	r3, [r3, #2]
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d002      	beq.n	8008cc8 <USBH_CtlReq+0x20>
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d01d      	beq.n	8008d02 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8008cc6:	e043      	b.n	8008d50 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	68ba      	ldr	r2, [r7, #8]
 8008ccc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	88fa      	ldrh	r2, [r7, #6]
 8008cd2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2202      	movs	r2, #2
 8008cde:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2203      	movs	r2, #3
 8008ce8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	f000 fc62 	bl	80095c4 <osMessagePut>
      break;
 8008d00:	e026      	b.n	8008d50 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	f000 f82a 	bl	8008d5c <USBH_HandleControl>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008d0c:	7dfb      	ldrb	r3, [r7, #23]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d002      	beq.n	8008d18 <USBH_CtlReq+0x70>
 8008d12:	7dfb      	ldrb	r3, [r7, #23]
 8008d14:	2b03      	cmp	r3, #3
 8008d16:	d106      	bne.n	8008d26 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2200      	movs	r2, #0
 8008d22:	761a      	strb	r2, [r3, #24]
 8008d24:	e005      	b.n	8008d32 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8008d26:	7dfb      	ldrb	r3, [r7, #23]
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d102      	bne.n	8008d32 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2203      	movs	r2, #3
 8008d36:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008d46:	2200      	movs	r2, #0
 8008d48:	4619      	mov	r1, r3
 8008d4a:	f000 fc3b 	bl	80095c4 <osMessagePut>
      break;
 8008d4e:	bf00      	nop
  }
  return status;
 8008d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3718      	adds	r7, #24
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
	...

08008d5c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b086      	sub	sp, #24
 8008d60:	af02      	add	r7, sp, #8
 8008d62:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008d64:	2301      	movs	r3, #1
 8008d66:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	7e1b      	ldrb	r3, [r3, #24]
 8008d70:	3b01      	subs	r3, #1
 8008d72:	2b0a      	cmp	r3, #10
 8008d74:	f200 8229 	bhi.w	80091ca <USBH_HandleControl+0x46e>
 8008d78:	a201      	add	r2, pc, #4	; (adr r2, 8008d80 <USBH_HandleControl+0x24>)
 8008d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7e:	bf00      	nop
 8008d80:	08008dad 	.word	0x08008dad
 8008d84:	08008dc7 	.word	0x08008dc7
 8008d88:	08008e69 	.word	0x08008e69
 8008d8c:	08008e8f 	.word	0x08008e8f
 8008d90:	08008f1b 	.word	0x08008f1b
 8008d94:	08008f45 	.word	0x08008f45
 8008d98:	08009007 	.word	0x08009007
 8008d9c:	08009029 	.word	0x08009029
 8008da0:	080090bb 	.word	0x080090bb
 8008da4:	080090e1 	.word	0x080090e1
 8008da8:	08009173 	.word	0x08009173
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f103 0110 	add.w	r1, r3, #16
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	795b      	ldrb	r3, [r3, #5]
 8008db6:	461a      	mov	r2, r3
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 fa17 	bl	80091ec <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2202      	movs	r2, #2
 8008dc2:	761a      	strb	r2, [r3, #24]
      break;
 8008dc4:	e20c      	b.n	80091e0 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	795b      	ldrb	r3, [r3, #5]
 8008dca:	4619      	mov	r1, r3
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f003 f86f 	bl	800beb0 <USBH_LL_GetURBState>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008dd6:	7bbb      	ldrb	r3, [r7, #14]
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d12c      	bne.n	8008e36 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	7c1b      	ldrb	r3, [r3, #16]
 8008de0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008de4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	8adb      	ldrh	r3, [r3, #22]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d00a      	beq.n	8008e04 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008dee:	7b7b      	ldrb	r3, [r7, #13]
 8008df0:	2b80      	cmp	r3, #128	; 0x80
 8008df2:	d103      	bne.n	8008dfc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2203      	movs	r2, #3
 8008df8:	761a      	strb	r2, [r3, #24]
 8008dfa:	e00d      	b.n	8008e18 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2205      	movs	r2, #5
 8008e00:	761a      	strb	r2, [r3, #24]
 8008e02:	e009      	b.n	8008e18 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8008e04:	7b7b      	ldrb	r3, [r7, #13]
 8008e06:	2b80      	cmp	r3, #128	; 0x80
 8008e08:	d103      	bne.n	8008e12 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2209      	movs	r2, #9
 8008e0e:	761a      	strb	r2, [r3, #24]
 8008e10:	e002      	b.n	8008e18 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2207      	movs	r2, #7
 8008e16:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2203      	movs	r2, #3
 8008e1c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	4619      	mov	r1, r3
 8008e30:	f000 fbc8 	bl	80095c4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008e34:	e1cb      	b.n	80091ce <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008e36:	7bbb      	ldrb	r3, [r7, #14]
 8008e38:	2b04      	cmp	r3, #4
 8008e3a:	d003      	beq.n	8008e44 <USBH_HandleControl+0xe8>
 8008e3c:	7bbb      	ldrb	r3, [r7, #14]
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	f040 81c5 	bne.w	80091ce <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	220b      	movs	r2, #11
 8008e48:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2203      	movs	r2, #3
 8008e4e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008e5e:	2200      	movs	r2, #0
 8008e60:	4619      	mov	r1, r3
 8008e62:	f000 fbaf 	bl	80095c4 <osMessagePut>
      break;
 8008e66:	e1b2      	b.n	80091ce <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6899      	ldr	r1, [r3, #8]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	899a      	ldrh	r2, [r3, #12]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	791b      	ldrb	r3, [r3, #4]
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 f9f2 	bl	800926a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2204      	movs	r2, #4
 8008e8a:	761a      	strb	r2, [r3, #24]
      break;
 8008e8c:	e1a8      	b.n	80091e0 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	791b      	ldrb	r3, [r3, #4]
 8008e92:	4619      	mov	r1, r3
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f003 f80b 	bl	800beb0 <USBH_LL_GetURBState>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008e9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d110      	bne.n	8008ec6 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2209      	movs	r2, #9
 8008ea8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2203      	movs	r2, #3
 8008eae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	f000 fb7f 	bl	80095c4 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008ec6:	7bbb      	ldrb	r3, [r7, #14]
 8008ec8:	2b05      	cmp	r3, #5
 8008eca:	d110      	bne.n	8008eee <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2203      	movs	r2, #3
 8008ed4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	f000 fb6c 	bl	80095c4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008eec:	e171      	b.n	80091d2 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8008eee:	7bbb      	ldrb	r3, [r7, #14]
 8008ef0:	2b04      	cmp	r3, #4
 8008ef2:	f040 816e 	bne.w	80091d2 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	220b      	movs	r2, #11
 8008efa:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2203      	movs	r2, #3
 8008f00:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008f10:	2200      	movs	r2, #0
 8008f12:	4619      	mov	r1, r3
 8008f14:	f000 fb56 	bl	80095c4 <osMessagePut>
      break;
 8008f18:	e15b      	b.n	80091d2 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6899      	ldr	r1, [r3, #8]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	899a      	ldrh	r2, [r3, #12]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	795b      	ldrb	r3, [r3, #5]
 8008f26:	2001      	movs	r0, #1
 8008f28:	9000      	str	r0, [sp, #0]
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 f978 	bl	8009220 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2206      	movs	r2, #6
 8008f40:	761a      	strb	r2, [r3, #24]
      break;
 8008f42:	e14d      	b.n	80091e0 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	795b      	ldrb	r3, [r3, #5]
 8008f48:	4619      	mov	r1, r3
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f002 ffb0 	bl	800beb0 <USBH_LL_GetURBState>
 8008f50:	4603      	mov	r3, r0
 8008f52:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008f54:	7bbb      	ldrb	r3, [r7, #14]
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d111      	bne.n	8008f7e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2207      	movs	r2, #7
 8008f5e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2203      	movs	r2, #3
 8008f64:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008f74:	2200      	movs	r2, #0
 8008f76:	4619      	mov	r1, r3
 8008f78:	f000 fb24 	bl	80095c4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008f7c:	e12b      	b.n	80091d6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8008f7e:	7bbb      	ldrb	r3, [r7, #14]
 8008f80:	2b05      	cmp	r3, #5
 8008f82:	d113      	bne.n	8008fac <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	220c      	movs	r2, #12
 8008f88:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008f8a:	2303      	movs	r3, #3
 8008f8c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2203      	movs	r2, #3
 8008f92:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	f000 fb0d 	bl	80095c4 <osMessagePut>
      break;
 8008faa:	e114      	b.n	80091d6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008fac:	7bbb      	ldrb	r3, [r7, #14]
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d111      	bne.n	8008fd6 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2205      	movs	r2, #5
 8008fb6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2203      	movs	r2, #3
 8008fbc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008fcc:	2200      	movs	r2, #0
 8008fce:	4619      	mov	r1, r3
 8008fd0:	f000 faf8 	bl	80095c4 <osMessagePut>
      break;
 8008fd4:	e0ff      	b.n	80091d6 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8008fd6:	7bbb      	ldrb	r3, [r7, #14]
 8008fd8:	2b04      	cmp	r3, #4
 8008fda:	f040 80fc 	bne.w	80091d6 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	220b      	movs	r2, #11
 8008fe2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2203      	movs	r2, #3
 8008fec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	4619      	mov	r1, r3
 8009000:	f000 fae0 	bl	80095c4 <osMessagePut>
      break;
 8009004:	e0e7      	b.n	80091d6 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	791b      	ldrb	r3, [r3, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	2100      	movs	r1, #0
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 f92b 	bl	800926a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800901a:	b29a      	uxth	r2, r3
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2208      	movs	r2, #8
 8009024:	761a      	strb	r2, [r3, #24]

      break;
 8009026:	e0db      	b.n	80091e0 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	791b      	ldrb	r3, [r3, #4]
 800902c:	4619      	mov	r1, r3
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f002 ff3e 	bl	800beb0 <USBH_LL_GetURBState>
 8009034:	4603      	mov	r3, r0
 8009036:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009038:	7bbb      	ldrb	r3, [r7, #14]
 800903a:	2b01      	cmp	r3, #1
 800903c:	d113      	bne.n	8009066 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	220d      	movs	r2, #13
 8009042:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009044:	2300      	movs	r3, #0
 8009046:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2203      	movs	r2, #3
 800904c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800905c:	2200      	movs	r2, #0
 800905e:	4619      	mov	r1, r3
 8009060:	f000 fab0 	bl	80095c4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009064:	e0b9      	b.n	80091da <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8009066:	7bbb      	ldrb	r3, [r7, #14]
 8009068:	2b04      	cmp	r3, #4
 800906a:	d111      	bne.n	8009090 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	220b      	movs	r2, #11
 8009070:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2203      	movs	r2, #3
 8009076:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009086:	2200      	movs	r2, #0
 8009088:	4619      	mov	r1, r3
 800908a:	f000 fa9b 	bl	80095c4 <osMessagePut>
      break;
 800908e:	e0a4      	b.n	80091da <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8009090:	7bbb      	ldrb	r3, [r7, #14]
 8009092:	2b05      	cmp	r3, #5
 8009094:	f040 80a1 	bne.w	80091da <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8009098:	2303      	movs	r3, #3
 800909a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2203      	movs	r2, #3
 80090a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80090b0:	2200      	movs	r2, #0
 80090b2:	4619      	mov	r1, r3
 80090b4:	f000 fa86 	bl	80095c4 <osMessagePut>
      break;
 80090b8:	e08f      	b.n	80091da <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	795b      	ldrb	r3, [r3, #5]
 80090be:	2201      	movs	r2, #1
 80090c0:	9200      	str	r2, [sp, #0]
 80090c2:	2200      	movs	r2, #0
 80090c4:	2100      	movs	r1, #0
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 f8aa 	bl	8009220 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80090d2:	b29a      	uxth	r2, r3
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	220a      	movs	r2, #10
 80090dc:	761a      	strb	r2, [r3, #24]
      break;
 80090de:	e07f      	b.n	80091e0 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	795b      	ldrb	r3, [r3, #5]
 80090e4:	4619      	mov	r1, r3
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f002 fee2 	bl	800beb0 <USBH_LL_GetURBState>
 80090ec:	4603      	mov	r3, r0
 80090ee:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80090f0:	7bbb      	ldrb	r3, [r7, #14]
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d113      	bne.n	800911e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 80090f6:	2300      	movs	r3, #0
 80090f8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	220d      	movs	r2, #13
 80090fe:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2203      	movs	r2, #3
 8009104:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009114:	2200      	movs	r2, #0
 8009116:	4619      	mov	r1, r3
 8009118:	f000 fa54 	bl	80095c4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800911c:	e05f      	b.n	80091de <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800911e:	7bbb      	ldrb	r3, [r7, #14]
 8009120:	2b02      	cmp	r3, #2
 8009122:	d111      	bne.n	8009148 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2209      	movs	r2, #9
 8009128:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2203      	movs	r2, #3
 800912e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800913e:	2200      	movs	r2, #0
 8009140:	4619      	mov	r1, r3
 8009142:	f000 fa3f 	bl	80095c4 <osMessagePut>
      break;
 8009146:	e04a      	b.n	80091de <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8009148:	7bbb      	ldrb	r3, [r7, #14]
 800914a:	2b04      	cmp	r3, #4
 800914c:	d147      	bne.n	80091de <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	220b      	movs	r2, #11
 8009152:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2203      	movs	r2, #3
 8009158:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009168:	2200      	movs	r2, #0
 800916a:	4619      	mov	r1, r3
 800916c:	f000 fa2a 	bl	80095c4 <osMessagePut>
      break;
 8009170:	e035      	b.n	80091de <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	7e5b      	ldrb	r3, [r3, #25]
 8009176:	3301      	adds	r3, #1
 8009178:	b2da      	uxtb	r2, r3
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	765a      	strb	r2, [r3, #25]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	7e5b      	ldrb	r3, [r3, #25]
 8009182:	2b02      	cmp	r3, #2
 8009184:	d806      	bhi.n	8009194 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2201      	movs	r2, #1
 800918a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009192:	e025      	b.n	80091e0 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800919a:	2106      	movs	r1, #6
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	795b      	ldrb	r3, [r3, #5]
 80091aa:	4619      	mov	r1, r3
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 f90d 	bl	80093cc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	791b      	ldrb	r3, [r3, #4]
 80091b6:	4619      	mov	r1, r3
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 f907 	bl	80093cc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80091c4:	2302      	movs	r3, #2
 80091c6:	73fb      	strb	r3, [r7, #15]
      break;
 80091c8:	e00a      	b.n	80091e0 <USBH_HandleControl+0x484>

    default:
      break;
 80091ca:	bf00      	nop
 80091cc:	e008      	b.n	80091e0 <USBH_HandleControl+0x484>
      break;
 80091ce:	bf00      	nop
 80091d0:	e006      	b.n	80091e0 <USBH_HandleControl+0x484>
      break;
 80091d2:	bf00      	nop
 80091d4:	e004      	b.n	80091e0 <USBH_HandleControl+0x484>
      break;
 80091d6:	bf00      	nop
 80091d8:	e002      	b.n	80091e0 <USBH_HandleControl+0x484>
      break;
 80091da:	bf00      	nop
 80091dc:	e000      	b.n	80091e0 <USBH_HandleControl+0x484>
      break;
 80091de:	bf00      	nop
  }

  return status;
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop

080091ec <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b088      	sub	sp, #32
 80091f0:	af04      	add	r7, sp, #16
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	4613      	mov	r3, r2
 80091f8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80091fa:	79f9      	ldrb	r1, [r7, #7]
 80091fc:	2300      	movs	r3, #0
 80091fe:	9303      	str	r3, [sp, #12]
 8009200:	2308      	movs	r3, #8
 8009202:	9302      	str	r3, [sp, #8]
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	9301      	str	r3, [sp, #4]
 8009208:	2300      	movs	r3, #0
 800920a:	9300      	str	r3, [sp, #0]
 800920c:	2300      	movs	r3, #0
 800920e:	2200      	movs	r2, #0
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f002 fe1c 	bl	800be4e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b088      	sub	sp, #32
 8009224:	af04      	add	r7, sp, #16
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	4611      	mov	r1, r2
 800922c:	461a      	mov	r2, r3
 800922e:	460b      	mov	r3, r1
 8009230:	80fb      	strh	r3, [r7, #6]
 8009232:	4613      	mov	r3, r2
 8009234:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800923c:	2b00      	cmp	r3, #0
 800923e:	d001      	beq.n	8009244 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009240:	2300      	movs	r3, #0
 8009242:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009244:	7979      	ldrb	r1, [r7, #5]
 8009246:	7e3b      	ldrb	r3, [r7, #24]
 8009248:	9303      	str	r3, [sp, #12]
 800924a:	88fb      	ldrh	r3, [r7, #6]
 800924c:	9302      	str	r3, [sp, #8]
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	9301      	str	r3, [sp, #4]
 8009252:	2301      	movs	r3, #1
 8009254:	9300      	str	r3, [sp, #0]
 8009256:	2300      	movs	r3, #0
 8009258:	2200      	movs	r2, #0
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f002 fdf7 	bl	800be4e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3710      	adds	r7, #16
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b088      	sub	sp, #32
 800926e:	af04      	add	r7, sp, #16
 8009270:	60f8      	str	r0, [r7, #12]
 8009272:	60b9      	str	r1, [r7, #8]
 8009274:	4611      	mov	r1, r2
 8009276:	461a      	mov	r2, r3
 8009278:	460b      	mov	r3, r1
 800927a:	80fb      	strh	r3, [r7, #6]
 800927c:	4613      	mov	r3, r2
 800927e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009280:	7979      	ldrb	r1, [r7, #5]
 8009282:	2300      	movs	r3, #0
 8009284:	9303      	str	r3, [sp, #12]
 8009286:	88fb      	ldrh	r3, [r7, #6]
 8009288:	9302      	str	r3, [sp, #8]
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	9301      	str	r3, [sp, #4]
 800928e:	2301      	movs	r3, #1
 8009290:	9300      	str	r3, [sp, #0]
 8009292:	2300      	movs	r3, #0
 8009294:	2201      	movs	r2, #1
 8009296:	68f8      	ldr	r0, [r7, #12]
 8009298:	f002 fdd9 	bl	800be4e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800929c:	2300      	movs	r3, #0

}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b088      	sub	sp, #32
 80092aa:	af04      	add	r7, sp, #16
 80092ac:	60f8      	str	r0, [r7, #12]
 80092ae:	60b9      	str	r1, [r7, #8]
 80092b0:	4611      	mov	r1, r2
 80092b2:	461a      	mov	r2, r3
 80092b4:	460b      	mov	r3, r1
 80092b6:	80fb      	strh	r3, [r7, #6]
 80092b8:	4613      	mov	r3, r2
 80092ba:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d001      	beq.n	80092ca <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80092c6:	2300      	movs	r3, #0
 80092c8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80092ca:	7979      	ldrb	r1, [r7, #5]
 80092cc:	7e3b      	ldrb	r3, [r7, #24]
 80092ce:	9303      	str	r3, [sp, #12]
 80092d0:	88fb      	ldrh	r3, [r7, #6]
 80092d2:	9302      	str	r3, [sp, #8]
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	9301      	str	r3, [sp, #4]
 80092d8:	2301      	movs	r3, #1
 80092da:	9300      	str	r3, [sp, #0]
 80092dc:	2302      	movs	r3, #2
 80092de:	2200      	movs	r2, #0
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f002 fdb4 	bl	800be4e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b088      	sub	sp, #32
 80092f4:	af04      	add	r7, sp, #16
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	4611      	mov	r1, r2
 80092fc:	461a      	mov	r2, r3
 80092fe:	460b      	mov	r3, r1
 8009300:	80fb      	strh	r3, [r7, #6]
 8009302:	4613      	mov	r3, r2
 8009304:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009306:	7979      	ldrb	r1, [r7, #5]
 8009308:	2300      	movs	r3, #0
 800930a:	9303      	str	r3, [sp, #12]
 800930c:	88fb      	ldrh	r3, [r7, #6]
 800930e:	9302      	str	r3, [sp, #8]
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	9301      	str	r3, [sp, #4]
 8009314:	2301      	movs	r3, #1
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	2302      	movs	r3, #2
 800931a:	2201      	movs	r2, #1
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f002 fd96 	bl	800be4e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3710      	adds	r7, #16
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b086      	sub	sp, #24
 8009330:	af04      	add	r7, sp, #16
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	4608      	mov	r0, r1
 8009336:	4611      	mov	r1, r2
 8009338:	461a      	mov	r2, r3
 800933a:	4603      	mov	r3, r0
 800933c:	70fb      	strb	r3, [r7, #3]
 800933e:	460b      	mov	r3, r1
 8009340:	70bb      	strb	r3, [r7, #2]
 8009342:	4613      	mov	r3, r2
 8009344:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009346:	7878      	ldrb	r0, [r7, #1]
 8009348:	78ba      	ldrb	r2, [r7, #2]
 800934a:	78f9      	ldrb	r1, [r7, #3]
 800934c:	8b3b      	ldrh	r3, [r7, #24]
 800934e:	9302      	str	r3, [sp, #8]
 8009350:	7d3b      	ldrb	r3, [r7, #20]
 8009352:	9301      	str	r3, [sp, #4]
 8009354:	7c3b      	ldrb	r3, [r7, #16]
 8009356:	9300      	str	r3, [sp, #0]
 8009358:	4603      	mov	r3, r0
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f002 fd29 	bl	800bdb2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3708      	adds	r7, #8
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b082      	sub	sp, #8
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
 8009372:	460b      	mov	r3, r1
 8009374:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009376:	78fb      	ldrb	r3, [r7, #3]
 8009378:	4619      	mov	r1, r3
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f002 fd48 	bl	800be10 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	3708      	adds	r7, #8
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b084      	sub	sp, #16
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
 8009392:	460b      	mov	r3, r1
 8009394:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f836 	bl	8009408 <USBH_GetFreePipe>
 800939c:	4603      	mov	r3, r0
 800939e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80093a0:	89fb      	ldrh	r3, [r7, #14]
 80093a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d00a      	beq.n	80093c0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80093aa:	78fa      	ldrb	r2, [r7, #3]
 80093ac:	89fb      	ldrh	r3, [r7, #14]
 80093ae:	f003 030f 	and.w	r3, r3, #15
 80093b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093b6:	6879      	ldr	r1, [r7, #4]
 80093b8:	33e0      	adds	r3, #224	; 0xe0
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	440b      	add	r3, r1
 80093be:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80093c0:	89fb      	ldrh	r3, [r7, #14]
 80093c2:	b2db      	uxtb	r3, r3
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	460b      	mov	r3, r1
 80093d6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80093d8:	78fb      	ldrb	r3, [r7, #3]
 80093da:	2b0f      	cmp	r3, #15
 80093dc:	d80d      	bhi.n	80093fa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80093de:	78fb      	ldrb	r3, [r7, #3]
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	33e0      	adds	r3, #224	; 0xe0
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4413      	add	r3, r2
 80093e8:	685a      	ldr	r2, [r3, #4]
 80093ea:	78fb      	ldrb	r3, [r7, #3]
 80093ec:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80093f0:	6879      	ldr	r1, [r7, #4]
 80093f2:	33e0      	adds	r3, #224	; 0xe0
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	440b      	add	r3, r1
 80093f8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009410:	2300      	movs	r3, #0
 8009412:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009414:	2300      	movs	r3, #0
 8009416:	73fb      	strb	r3, [r7, #15]
 8009418:	e00f      	b.n	800943a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800941a:	7bfb      	ldrb	r3, [r7, #15]
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	33e0      	adds	r3, #224	; 0xe0
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4413      	add	r3, r2
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800942a:	2b00      	cmp	r3, #0
 800942c:	d102      	bne.n	8009434 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800942e:	7bfb      	ldrb	r3, [r7, #15]
 8009430:	b29b      	uxth	r3, r3
 8009432:	e007      	b.n	8009444 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009434:	7bfb      	ldrb	r3, [r7, #15]
 8009436:	3301      	adds	r3, #1
 8009438:	73fb      	strb	r3, [r7, #15]
 800943a:	7bfb      	ldrb	r3, [r7, #15]
 800943c:	2b0f      	cmp	r3, #15
 800943e:	d9ec      	bls.n	800941a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009440:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009444:	4618      	mov	r0, r3
 8009446:	3714      	adds	r7, #20
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	4603      	mov	r3, r0
 8009458:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800945a:	2300      	movs	r3, #0
 800945c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800945e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009462:	2b84      	cmp	r3, #132	; 0x84
 8009464:	d005      	beq.n	8009472 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009466:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	4413      	add	r3, r2
 800946e:	3303      	adds	r3, #3
 8009470:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009472:	68fb      	ldr	r3, [r7, #12]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3714      	adds	r7, #20
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009486:	f3ef 8305 	mrs	r3, IPSR
 800948a:	607b      	str	r3, [r7, #4]
  return(result);
 800948c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800948e:	2b00      	cmp	r3, #0
 8009490:	bf14      	ite	ne
 8009492:	2301      	movne	r3, #1
 8009494:	2300      	moveq	r3, #0
 8009496:	b2db      	uxtb	r3, r3
}
 8009498:	4618      	mov	r0, r3
 800949a:	370c      	adds	r7, #12
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80094a8:	f001 f916 	bl	800a6d8 <vTaskStartScheduler>
  
  return osOK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80094b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094b4:	b089      	sub	sp, #36	; 0x24
 80094b6:	af04      	add	r7, sp, #16
 80094b8:	6078      	str	r0, [r7, #4]
 80094ba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	695b      	ldr	r3, [r3, #20]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d020      	beq.n	8009506 <osThreadCreate+0x54>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	699b      	ldr	r3, [r3, #24]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d01c      	beq.n	8009506 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	685c      	ldr	r4, [r3, #4]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681d      	ldr	r5, [r3, #0]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	691e      	ldr	r6, [r3, #16]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80094de:	4618      	mov	r0, r3
 80094e0:	f7ff ffb6 	bl	8009450 <makeFreeRtosPriority>
 80094e4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	695b      	ldr	r3, [r3, #20]
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80094ee:	9202      	str	r2, [sp, #8]
 80094f0:	9301      	str	r3, [sp, #4]
 80094f2:	9100      	str	r1, [sp, #0]
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	4632      	mov	r2, r6
 80094f8:	4629      	mov	r1, r5
 80094fa:	4620      	mov	r0, r4
 80094fc:	f000 ff0e 	bl	800a31c <xTaskCreateStatic>
 8009500:	4603      	mov	r3, r0
 8009502:	60fb      	str	r3, [r7, #12]
 8009504:	e01c      	b.n	8009540 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	685c      	ldr	r4, [r3, #4]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009512:	b29e      	uxth	r6, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800951a:	4618      	mov	r0, r3
 800951c:	f7ff ff98 	bl	8009450 <makeFreeRtosPriority>
 8009520:	4602      	mov	r2, r0
 8009522:	f107 030c 	add.w	r3, r7, #12
 8009526:	9301      	str	r3, [sp, #4]
 8009528:	9200      	str	r2, [sp, #0]
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	4632      	mov	r2, r6
 800952e:	4629      	mov	r1, r5
 8009530:	4620      	mov	r0, r4
 8009532:	f000 ff50 	bl	800a3d6 <xTaskCreate>
 8009536:	4603      	mov	r3, r0
 8009538:	2b01      	cmp	r3, #1
 800953a:	d001      	beq.n	8009540 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800953c:	2300      	movs	r3, #0
 800953e:	e000      	b.n	8009542 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009540:	68fb      	ldr	r3, [r7, #12]
}
 8009542:	4618      	mov	r0, r3
 8009544:	3714      	adds	r7, #20
 8009546:	46bd      	mov	sp, r7
 8009548:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800954a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b084      	sub	sp, #16
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d001      	beq.n	8009560 <osDelay+0x16>
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	e000      	b.n	8009562 <osDelay+0x18>
 8009560:	2301      	movs	r3, #1
 8009562:	4618      	mov	r0, r3
 8009564:	f001 f884 	bl	800a670 <vTaskDelay>
  
  return osOK;
 8009568:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800956a:	4618      	mov	r0, r3
 800956c:	3710      	adds	r7, #16
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009572:	b590      	push	{r4, r7, lr}
 8009574:	b085      	sub	sp, #20
 8009576:	af02      	add	r7, sp, #8
 8009578:	6078      	str	r0, [r7, #4]
 800957a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d011      	beq.n	80095a8 <osMessageCreate+0x36>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	68db      	ldr	r3, [r3, #12]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00d      	beq.n	80095a8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6818      	ldr	r0, [r3, #0]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6859      	ldr	r1, [r3, #4]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	689a      	ldr	r2, [r3, #8]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	2400      	movs	r4, #0
 800959e:	9400      	str	r4, [sp, #0]
 80095a0:	f000 f9e0 	bl	8009964 <xQueueGenericCreateStatic>
 80095a4:	4603      	mov	r3, r0
 80095a6:	e008      	b.n	80095ba <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6818      	ldr	r0, [r3, #0]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	4619      	mov	r1, r3
 80095b4:	f000 fa4e 	bl	8009a54 <xQueueGenericCreate>
 80095b8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	370c      	adds	r7, #12
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd90      	pop	{r4, r7, pc}
	...

080095c4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b086      	sub	sp, #24
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80095d0:	2300      	movs	r3, #0
 80095d2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d101      	bne.n	80095e2 <osMessagePut+0x1e>
    ticks = 1;
 80095de:	2301      	movs	r3, #1
 80095e0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80095e2:	f7ff ff4d 	bl	8009480 <inHandlerMode>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d018      	beq.n	800961e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80095ec:	f107 0210 	add.w	r2, r7, #16
 80095f0:	f107 0108 	add.w	r1, r7, #8
 80095f4:	2300      	movs	r3, #0
 80095f6:	68f8      	ldr	r0, [r7, #12]
 80095f8:	f000 fb84 	bl	8009d04 <xQueueGenericSendFromISR>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d001      	beq.n	8009606 <osMessagePut+0x42>
      return osErrorOS;
 8009602:	23ff      	movs	r3, #255	; 0xff
 8009604:	e018      	b.n	8009638 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d014      	beq.n	8009636 <osMessagePut+0x72>
 800960c:	4b0c      	ldr	r3, [pc, #48]	; (8009640 <osMessagePut+0x7c>)
 800960e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009612:	601a      	str	r2, [r3, #0]
 8009614:	f3bf 8f4f 	dsb	sy
 8009618:	f3bf 8f6f 	isb	sy
 800961c:	e00b      	b.n	8009636 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800961e:	f107 0108 	add.w	r1, r7, #8
 8009622:	2300      	movs	r3, #0
 8009624:	697a      	ldr	r2, [r7, #20]
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	f000 fa6e 	bl	8009b08 <xQueueGenericSend>
 800962c:	4603      	mov	r3, r0
 800962e:	2b01      	cmp	r3, #1
 8009630:	d001      	beq.n	8009636 <osMessagePut+0x72>
      return osErrorOS;
 8009632:	23ff      	movs	r3, #255	; 0xff
 8009634:	e000      	b.n	8009638 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3718      	adds	r7, #24
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	e000ed04 	.word	0xe000ed04

08009644 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009644:	b590      	push	{r4, r7, lr}
 8009646:	b08b      	sub	sp, #44	; 0x2c
 8009648:	af00      	add	r7, sp, #0
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	60b9      	str	r1, [r7, #8]
 800964e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009654:	2300      	movs	r3, #0
 8009656:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d10a      	bne.n	8009674 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800965e:	2380      	movs	r3, #128	; 0x80
 8009660:	617b      	str	r3, [r7, #20]
    return event;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	461c      	mov	r4, r3
 8009666:	f107 0314 	add.w	r3, r7, #20
 800966a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800966e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009672:	e054      	b.n	800971e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009674:	2300      	movs	r3, #0
 8009676:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009678:	2300      	movs	r3, #0
 800967a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009682:	d103      	bne.n	800968c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009684:	f04f 33ff 	mov.w	r3, #4294967295
 8009688:	627b      	str	r3, [r7, #36]	; 0x24
 800968a:	e009      	b.n	80096a0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d006      	beq.n	80096a0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8009696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009698:	2b00      	cmp	r3, #0
 800969a:	d101      	bne.n	80096a0 <osMessageGet+0x5c>
      ticks = 1;
 800969c:	2301      	movs	r3, #1
 800969e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80096a0:	f7ff feee 	bl	8009480 <inHandlerMode>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d01c      	beq.n	80096e4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80096aa:	f107 0220 	add.w	r2, r7, #32
 80096ae:	f107 0314 	add.w	r3, r7, #20
 80096b2:	3304      	adds	r3, #4
 80096b4:	4619      	mov	r1, r3
 80096b6:	68b8      	ldr	r0, [r7, #8]
 80096b8:	f000 fca0 	bl	8009ffc <xQueueReceiveFromISR>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d102      	bne.n	80096c8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80096c2:	2310      	movs	r3, #16
 80096c4:	617b      	str	r3, [r7, #20]
 80096c6:	e001      	b.n	80096cc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80096c8:	2300      	movs	r3, #0
 80096ca:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80096cc:	6a3b      	ldr	r3, [r7, #32]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d01d      	beq.n	800970e <osMessageGet+0xca>
 80096d2:	4b15      	ldr	r3, [pc, #84]	; (8009728 <osMessageGet+0xe4>)
 80096d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096d8:	601a      	str	r2, [r3, #0]
 80096da:	f3bf 8f4f 	dsb	sy
 80096de:	f3bf 8f6f 	isb	sy
 80096e2:	e014      	b.n	800970e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80096e4:	f107 0314 	add.w	r3, r7, #20
 80096e8:	3304      	adds	r3, #4
 80096ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ec:	4619      	mov	r1, r3
 80096ee:	68b8      	ldr	r0, [r7, #8]
 80096f0:	f000 fba4 	bl	8009e3c <xQueueReceive>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d102      	bne.n	8009700 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80096fa:	2310      	movs	r3, #16
 80096fc:	617b      	str	r3, [r7, #20]
 80096fe:	e006      	b.n	800970e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009702:	2b00      	cmp	r3, #0
 8009704:	d101      	bne.n	800970a <osMessageGet+0xc6>
 8009706:	2300      	movs	r3, #0
 8009708:	e000      	b.n	800970c <osMessageGet+0xc8>
 800970a:	2340      	movs	r3, #64	; 0x40
 800970c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	461c      	mov	r4, r3
 8009712:	f107 0314 	add.w	r3, r7, #20
 8009716:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800971a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	372c      	adds	r7, #44	; 0x2c
 8009722:	46bd      	mov	sp, r7
 8009724:	bd90      	pop	{r4, r7, pc}
 8009726:	bf00      	nop
 8009728:	e000ed04 	.word	0xe000ed04

0800972c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f103 0208 	add.w	r2, r3, #8
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f04f 32ff 	mov.w	r2, #4294967295
 8009744:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f103 0208 	add.w	r2, r3, #8
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f103 0208 	add.w	r2, r3, #8
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800977a:	bf00      	nop
 800977c:	370c      	adds	r7, #12
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr

08009786 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009786:	b480      	push	{r7}
 8009788:	b085      	sub	sp, #20
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
 800978e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	689a      	ldr	r2, [r3, #8]
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	683a      	ldr	r2, [r7, #0]
 80097aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	683a      	ldr	r2, [r7, #0]
 80097b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	1c5a      	adds	r2, r3, #1
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	601a      	str	r2, [r3, #0]
}
 80097c2:	bf00      	nop
 80097c4:	3714      	adds	r7, #20
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr

080097ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80097ce:	b480      	push	{r7}
 80097d0:	b085      	sub	sp, #20
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
 80097d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097e4:	d103      	bne.n	80097ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	60fb      	str	r3, [r7, #12]
 80097ec:	e00c      	b.n	8009808 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	3308      	adds	r3, #8
 80097f2:	60fb      	str	r3, [r7, #12]
 80097f4:	e002      	b.n	80097fc <vListInsert+0x2e>
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	60fb      	str	r3, [r7, #12]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	68ba      	ldr	r2, [r7, #8]
 8009804:	429a      	cmp	r2, r3
 8009806:	d2f6      	bcs.n	80097f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	685a      	ldr	r2, [r3, #4]
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	683a      	ldr	r2, [r7, #0]
 8009816:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	683a      	ldr	r2, [r7, #0]
 8009822:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	1c5a      	adds	r2, r3, #1
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	601a      	str	r2, [r3, #0]
}
 8009834:	bf00      	nop
 8009836:	3714      	adds	r7, #20
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	6892      	ldr	r2, [r2, #8]
 8009856:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	6852      	ldr	r2, [r2, #4]
 8009860:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	429a      	cmp	r2, r3
 800986a:	d103      	bne.n	8009874 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	689a      	ldr	r2, [r3, #8]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	1e5a      	subs	r2, r3, #1
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3714      	adds	r7, #20
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d10a      	bne.n	80098be <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80098a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ac:	f383 8811 	msr	BASEPRI, r3
 80098b0:	f3bf 8f6f 	isb	sy
 80098b4:	f3bf 8f4f 	dsb	sy
 80098b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80098ba:	bf00      	nop
 80098bc:	e7fe      	b.n	80098bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80098be:	f001 fd51 	bl	800b364 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ca:	68f9      	ldr	r1, [r7, #12]
 80098cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80098ce:	fb01 f303 	mul.w	r3, r1, r3
 80098d2:	441a      	add	r2, r3
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2200      	movs	r2, #0
 80098dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ee:	3b01      	subs	r3, #1
 80098f0:	68f9      	ldr	r1, [r7, #12]
 80098f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80098f4:	fb01 f303 	mul.w	r3, r1, r3
 80098f8:	441a      	add	r2, r3
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	22ff      	movs	r2, #255	; 0xff
 8009902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	22ff      	movs	r2, #255	; 0xff
 800990a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d114      	bne.n	800993e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	691b      	ldr	r3, [r3, #16]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d01a      	beq.n	8009952 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	3310      	adds	r3, #16
 8009920:	4618      	mov	r0, r3
 8009922:	f001 f92b 	bl	800ab7c <xTaskRemoveFromEventList>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d012      	beq.n	8009952 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800992c:	4b0c      	ldr	r3, [pc, #48]	; (8009960 <xQueueGenericReset+0xcc>)
 800992e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009932:	601a      	str	r2, [r3, #0]
 8009934:	f3bf 8f4f 	dsb	sy
 8009938:	f3bf 8f6f 	isb	sy
 800993c:	e009      	b.n	8009952 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	3310      	adds	r3, #16
 8009942:	4618      	mov	r0, r3
 8009944:	f7ff fef2 	bl	800972c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	3324      	adds	r3, #36	; 0x24
 800994c:	4618      	mov	r0, r3
 800994e:	f7ff feed 	bl	800972c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009952:	f001 fd37 	bl	800b3c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009956:	2301      	movs	r3, #1
}
 8009958:	4618      	mov	r0, r3
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	e000ed04 	.word	0xe000ed04

08009964 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009964:	b580      	push	{r7, lr}
 8009966:	b08e      	sub	sp, #56	; 0x38
 8009968:	af02      	add	r7, sp, #8
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]
 8009970:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d10a      	bne.n	800998e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997c:	f383 8811 	msr	BASEPRI, r3
 8009980:	f3bf 8f6f 	isb	sy
 8009984:	f3bf 8f4f 	dsb	sy
 8009988:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800998a:	bf00      	nop
 800998c:	e7fe      	b.n	800998c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10a      	bne.n	80099aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009998:	f383 8811 	msr	BASEPRI, r3
 800999c:	f3bf 8f6f 	isb	sy
 80099a0:	f3bf 8f4f 	dsb	sy
 80099a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80099a6:	bf00      	nop
 80099a8:	e7fe      	b.n	80099a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d002      	beq.n	80099b6 <xQueueGenericCreateStatic+0x52>
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d001      	beq.n	80099ba <xQueueGenericCreateStatic+0x56>
 80099b6:	2301      	movs	r3, #1
 80099b8:	e000      	b.n	80099bc <xQueueGenericCreateStatic+0x58>
 80099ba:	2300      	movs	r3, #0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d10a      	bne.n	80099d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80099c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	623b      	str	r3, [r7, #32]
}
 80099d2:	bf00      	nop
 80099d4:	e7fe      	b.n	80099d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d102      	bne.n	80099e2 <xQueueGenericCreateStatic+0x7e>
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d101      	bne.n	80099e6 <xQueueGenericCreateStatic+0x82>
 80099e2:	2301      	movs	r3, #1
 80099e4:	e000      	b.n	80099e8 <xQueueGenericCreateStatic+0x84>
 80099e6:	2300      	movs	r3, #0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d10a      	bne.n	8009a02 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80099ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f0:	f383 8811 	msr	BASEPRI, r3
 80099f4:	f3bf 8f6f 	isb	sy
 80099f8:	f3bf 8f4f 	dsb	sy
 80099fc:	61fb      	str	r3, [r7, #28]
}
 80099fe:	bf00      	nop
 8009a00:	e7fe      	b.n	8009a00 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009a02:	2348      	movs	r3, #72	; 0x48
 8009a04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	2b48      	cmp	r3, #72	; 0x48
 8009a0a:	d00a      	beq.n	8009a22 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a10:	f383 8811 	msr	BASEPRI, r3
 8009a14:	f3bf 8f6f 	isb	sy
 8009a18:	f3bf 8f4f 	dsb	sy
 8009a1c:	61bb      	str	r3, [r7, #24]
}
 8009a1e:	bf00      	nop
 8009a20:	e7fe      	b.n	8009a20 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009a22:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00d      	beq.n	8009a4a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a30:	2201      	movs	r2, #1
 8009a32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a36:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a3c:	9300      	str	r3, [sp, #0]
 8009a3e:	4613      	mov	r3, r2
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	68b9      	ldr	r1, [r7, #8]
 8009a44:	68f8      	ldr	r0, [r7, #12]
 8009a46:	f000 f83f 	bl	8009ac8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3730      	adds	r7, #48	; 0x30
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b08a      	sub	sp, #40	; 0x28
 8009a58:	af02      	add	r7, sp, #8
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	4613      	mov	r3, r2
 8009a60:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d10a      	bne.n	8009a7e <xQueueGenericCreate+0x2a>
	__asm volatile
 8009a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6c:	f383 8811 	msr	BASEPRI, r3
 8009a70:	f3bf 8f6f 	isb	sy
 8009a74:	f3bf 8f4f 	dsb	sy
 8009a78:	613b      	str	r3, [r7, #16]
}
 8009a7a:	bf00      	nop
 8009a7c:	e7fe      	b.n	8009a7c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	68ba      	ldr	r2, [r7, #8]
 8009a82:	fb02 f303 	mul.w	r3, r2, r3
 8009a86:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	3348      	adds	r3, #72	; 0x48
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f001 fd8b 	bl	800b5a8 <pvPortMalloc>
 8009a92:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d011      	beq.n	8009abe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	3348      	adds	r3, #72	; 0x48
 8009aa2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009aa4:	69bb      	ldr	r3, [r7, #24]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009aac:	79fa      	ldrb	r2, [r7, #7]
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	9300      	str	r3, [sp, #0]
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	697a      	ldr	r2, [r7, #20]
 8009ab6:	68b9      	ldr	r1, [r7, #8]
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f000 f805 	bl	8009ac8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009abe:	69bb      	ldr	r3, [r7, #24]
	}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3720      	adds	r7, #32
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	607a      	str	r2, [r7, #4]
 8009ad4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d103      	bne.n	8009ae4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	69ba      	ldr	r2, [r7, #24]
 8009ae0:	601a      	str	r2, [r3, #0]
 8009ae2:	e002      	b.n	8009aea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009ae4:	69bb      	ldr	r3, [r7, #24]
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	68fa      	ldr	r2, [r7, #12]
 8009aee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	68ba      	ldr	r2, [r7, #8]
 8009af4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009af6:	2101      	movs	r1, #1
 8009af8:	69b8      	ldr	r0, [r7, #24]
 8009afa:	f7ff fecb 	bl	8009894 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009afe:	bf00      	nop
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
	...

08009b08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b08e      	sub	sp, #56	; 0x38
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
 8009b14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009b16:	2300      	movs	r3, #0
 8009b18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d10a      	bne.n	8009b3a <xQueueGenericSend+0x32>
	__asm volatile
 8009b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b28:	f383 8811 	msr	BASEPRI, r3
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	f3bf 8f4f 	dsb	sy
 8009b34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009b36:	bf00      	nop
 8009b38:	e7fe      	b.n	8009b38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d103      	bne.n	8009b48 <xQueueGenericSend+0x40>
 8009b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d101      	bne.n	8009b4c <xQueueGenericSend+0x44>
 8009b48:	2301      	movs	r3, #1
 8009b4a:	e000      	b.n	8009b4e <xQueueGenericSend+0x46>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d10a      	bne.n	8009b68 <xQueueGenericSend+0x60>
	__asm volatile
 8009b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b56:	f383 8811 	msr	BASEPRI, r3
 8009b5a:	f3bf 8f6f 	isb	sy
 8009b5e:	f3bf 8f4f 	dsb	sy
 8009b62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009b64:	bf00      	nop
 8009b66:	e7fe      	b.n	8009b66 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	2b02      	cmp	r3, #2
 8009b6c:	d103      	bne.n	8009b76 <xQueueGenericSend+0x6e>
 8009b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d101      	bne.n	8009b7a <xQueueGenericSend+0x72>
 8009b76:	2301      	movs	r3, #1
 8009b78:	e000      	b.n	8009b7c <xQueueGenericSend+0x74>
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d10a      	bne.n	8009b96 <xQueueGenericSend+0x8e>
	__asm volatile
 8009b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b84:	f383 8811 	msr	BASEPRI, r3
 8009b88:	f3bf 8f6f 	isb	sy
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	623b      	str	r3, [r7, #32]
}
 8009b92:	bf00      	nop
 8009b94:	e7fe      	b.n	8009b94 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b96:	f001 f9b1 	bl	800aefc <xTaskGetSchedulerState>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d102      	bne.n	8009ba6 <xQueueGenericSend+0x9e>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d101      	bne.n	8009baa <xQueueGenericSend+0xa2>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e000      	b.n	8009bac <xQueueGenericSend+0xa4>
 8009baa:	2300      	movs	r3, #0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d10a      	bne.n	8009bc6 <xQueueGenericSend+0xbe>
	__asm volatile
 8009bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb4:	f383 8811 	msr	BASEPRI, r3
 8009bb8:	f3bf 8f6f 	isb	sy
 8009bbc:	f3bf 8f4f 	dsb	sy
 8009bc0:	61fb      	str	r3, [r7, #28]
}
 8009bc2:	bf00      	nop
 8009bc4:	e7fe      	b.n	8009bc4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009bc6:	f001 fbcd 	bl	800b364 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d302      	bcc.n	8009bdc <xQueueGenericSend+0xd4>
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	2b02      	cmp	r3, #2
 8009bda:	d129      	bne.n	8009c30 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009bdc:	683a      	ldr	r2, [r7, #0]
 8009bde:	68b9      	ldr	r1, [r7, #8]
 8009be0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009be2:	f000 fa8b 	bl	800a0fc <prvCopyDataToQueue>
 8009be6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d010      	beq.n	8009c12 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf2:	3324      	adds	r3, #36	; 0x24
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f000 ffc1 	bl	800ab7c <xTaskRemoveFromEventList>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d013      	beq.n	8009c28 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009c00:	4b3f      	ldr	r3, [pc, #252]	; (8009d00 <xQueueGenericSend+0x1f8>)
 8009c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c06:	601a      	str	r2, [r3, #0]
 8009c08:	f3bf 8f4f 	dsb	sy
 8009c0c:	f3bf 8f6f 	isb	sy
 8009c10:	e00a      	b.n	8009c28 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d007      	beq.n	8009c28 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009c18:	4b39      	ldr	r3, [pc, #228]	; (8009d00 <xQueueGenericSend+0x1f8>)
 8009c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c1e:	601a      	str	r2, [r3, #0]
 8009c20:	f3bf 8f4f 	dsb	sy
 8009c24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009c28:	f001 fbcc 	bl	800b3c4 <vPortExitCritical>
				return pdPASS;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e063      	b.n	8009cf8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d103      	bne.n	8009c3e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009c36:	f001 fbc5 	bl	800b3c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	e05c      	b.n	8009cf8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d106      	bne.n	8009c52 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c44:	f107 0314 	add.w	r3, r7, #20
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f000 fff9 	bl	800ac40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c52:	f001 fbb7 	bl	800b3c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c56:	f000 fda9 	bl	800a7ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c5a:	f001 fb83 	bl	800b364 <vPortEnterCritical>
 8009c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c64:	b25b      	sxtb	r3, r3
 8009c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c6a:	d103      	bne.n	8009c74 <xQueueGenericSend+0x16c>
 8009c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c7a:	b25b      	sxtb	r3, r3
 8009c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c80:	d103      	bne.n	8009c8a <xQueueGenericSend+0x182>
 8009c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c84:	2200      	movs	r2, #0
 8009c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c8a:	f001 fb9b 	bl	800b3c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c8e:	1d3a      	adds	r2, r7, #4
 8009c90:	f107 0314 	add.w	r3, r7, #20
 8009c94:	4611      	mov	r1, r2
 8009c96:	4618      	mov	r0, r3
 8009c98:	f000 ffe8 	bl	800ac6c <xTaskCheckForTimeOut>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d124      	bne.n	8009cec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009ca2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ca4:	f000 fb22 	bl	800a2ec <prvIsQueueFull>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d018      	beq.n	8009ce0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb0:	3310      	adds	r3, #16
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	4611      	mov	r1, r2
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f000 ff3c 	bl	800ab34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009cbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cbe:	f000 faad 	bl	800a21c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009cc2:	f000 fd81 	bl	800a7c8 <xTaskResumeAll>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f47f af7c 	bne.w	8009bc6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009cce:	4b0c      	ldr	r3, [pc, #48]	; (8009d00 <xQueueGenericSend+0x1f8>)
 8009cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cd4:	601a      	str	r2, [r3, #0]
 8009cd6:	f3bf 8f4f 	dsb	sy
 8009cda:	f3bf 8f6f 	isb	sy
 8009cde:	e772      	b.n	8009bc6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009ce0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ce2:	f000 fa9b 	bl	800a21c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ce6:	f000 fd6f 	bl	800a7c8 <xTaskResumeAll>
 8009cea:	e76c      	b.n	8009bc6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009cec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cee:	f000 fa95 	bl	800a21c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009cf2:	f000 fd69 	bl	800a7c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009cf6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3738      	adds	r7, #56	; 0x38
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	e000ed04 	.word	0xe000ed04

08009d04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b090      	sub	sp, #64	; 0x40
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
 8009d10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d10a      	bne.n	8009d32 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d20:	f383 8811 	msr	BASEPRI, r3
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d2e:	bf00      	nop
 8009d30:	e7fe      	b.n	8009d30 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d103      	bne.n	8009d40 <xQueueGenericSendFromISR+0x3c>
 8009d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d101      	bne.n	8009d44 <xQueueGenericSendFromISR+0x40>
 8009d40:	2301      	movs	r3, #1
 8009d42:	e000      	b.n	8009d46 <xQueueGenericSendFromISR+0x42>
 8009d44:	2300      	movs	r3, #0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d10a      	bne.n	8009d60 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4e:	f383 8811 	msr	BASEPRI, r3
 8009d52:	f3bf 8f6f 	isb	sy
 8009d56:	f3bf 8f4f 	dsb	sy
 8009d5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d5c:	bf00      	nop
 8009d5e:	e7fe      	b.n	8009d5e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	2b02      	cmp	r3, #2
 8009d64:	d103      	bne.n	8009d6e <xQueueGenericSendFromISR+0x6a>
 8009d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d101      	bne.n	8009d72 <xQueueGenericSendFromISR+0x6e>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e000      	b.n	8009d74 <xQueueGenericSendFromISR+0x70>
 8009d72:	2300      	movs	r3, #0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d10a      	bne.n	8009d8e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d7c:	f383 8811 	msr	BASEPRI, r3
 8009d80:	f3bf 8f6f 	isb	sy
 8009d84:	f3bf 8f4f 	dsb	sy
 8009d88:	623b      	str	r3, [r7, #32]
}
 8009d8a:	bf00      	nop
 8009d8c:	e7fe      	b.n	8009d8c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d8e:	f001 fbcb 	bl	800b528 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009d92:	f3ef 8211 	mrs	r2, BASEPRI
 8009d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9a:	f383 8811 	msr	BASEPRI, r3
 8009d9e:	f3bf 8f6f 	isb	sy
 8009da2:	f3bf 8f4f 	dsb	sy
 8009da6:	61fa      	str	r2, [r7, #28]
 8009da8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009daa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009dac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d302      	bcc.n	8009dc0 <xQueueGenericSendFromISR+0xbc>
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	2b02      	cmp	r3, #2
 8009dbe:	d12f      	bne.n	8009e20 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009dd0:	683a      	ldr	r2, [r7, #0]
 8009dd2:	68b9      	ldr	r1, [r7, #8]
 8009dd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009dd6:	f000 f991 	bl	800a0fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009dda:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de2:	d112      	bne.n	8009e0a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d016      	beq.n	8009e1a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dee:	3324      	adds	r3, #36	; 0x24
 8009df0:	4618      	mov	r0, r3
 8009df2:	f000 fec3 	bl	800ab7c <xTaskRemoveFromEventList>
 8009df6:	4603      	mov	r3, r0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00e      	beq.n	8009e1a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00b      	beq.n	8009e1a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2201      	movs	r2, #1
 8009e06:	601a      	str	r2, [r3, #0]
 8009e08:	e007      	b.n	8009e1a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009e0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009e0e:	3301      	adds	r3, #1
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	b25a      	sxtb	r2, r3
 8009e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009e1e:	e001      	b.n	8009e24 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009e20:	2300      	movs	r3, #0
 8009e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e26:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009e2e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3740      	adds	r7, #64	; 0x40
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
	...

08009e3c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b08c      	sub	sp, #48	; 0x30
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d10a      	bne.n	8009e6c <xQueueReceive+0x30>
	__asm volatile
 8009e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5a:	f383 8811 	msr	BASEPRI, r3
 8009e5e:	f3bf 8f6f 	isb	sy
 8009e62:	f3bf 8f4f 	dsb	sy
 8009e66:	623b      	str	r3, [r7, #32]
}
 8009e68:	bf00      	nop
 8009e6a:	e7fe      	b.n	8009e6a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d103      	bne.n	8009e7a <xQueueReceive+0x3e>
 8009e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d101      	bne.n	8009e7e <xQueueReceive+0x42>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e000      	b.n	8009e80 <xQueueReceive+0x44>
 8009e7e:	2300      	movs	r3, #0
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d10a      	bne.n	8009e9a <xQueueReceive+0x5e>
	__asm volatile
 8009e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e88:	f383 8811 	msr	BASEPRI, r3
 8009e8c:	f3bf 8f6f 	isb	sy
 8009e90:	f3bf 8f4f 	dsb	sy
 8009e94:	61fb      	str	r3, [r7, #28]
}
 8009e96:	bf00      	nop
 8009e98:	e7fe      	b.n	8009e98 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e9a:	f001 f82f 	bl	800aefc <xTaskGetSchedulerState>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d102      	bne.n	8009eaa <xQueueReceive+0x6e>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d101      	bne.n	8009eae <xQueueReceive+0x72>
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e000      	b.n	8009eb0 <xQueueReceive+0x74>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d10a      	bne.n	8009eca <xQueueReceive+0x8e>
	__asm volatile
 8009eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb8:	f383 8811 	msr	BASEPRI, r3
 8009ebc:	f3bf 8f6f 	isb	sy
 8009ec0:	f3bf 8f4f 	dsb	sy
 8009ec4:	61bb      	str	r3, [r7, #24]
}
 8009ec6:	bf00      	nop
 8009ec8:	e7fe      	b.n	8009ec8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009eca:	f001 fa4b 	bl	800b364 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d01f      	beq.n	8009f1a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009eda:	68b9      	ldr	r1, [r7, #8]
 8009edc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ede:	f000 f977 	bl	800a1d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee4:	1e5a      	subs	r2, r3, #1
 8009ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eec:	691b      	ldr	r3, [r3, #16]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d00f      	beq.n	8009f12 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef4:	3310      	adds	r3, #16
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f000 fe40 	bl	800ab7c <xTaskRemoveFromEventList>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d007      	beq.n	8009f12 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009f02:	4b3d      	ldr	r3, [pc, #244]	; (8009ff8 <xQueueReceive+0x1bc>)
 8009f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f08:	601a      	str	r2, [r3, #0]
 8009f0a:	f3bf 8f4f 	dsb	sy
 8009f0e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009f12:	f001 fa57 	bl	800b3c4 <vPortExitCritical>
				return pdPASS;
 8009f16:	2301      	movs	r3, #1
 8009f18:	e069      	b.n	8009fee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d103      	bne.n	8009f28 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f20:	f001 fa50 	bl	800b3c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009f24:	2300      	movs	r3, #0
 8009f26:	e062      	b.n	8009fee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d106      	bne.n	8009f3c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f2e:	f107 0310 	add.w	r3, r7, #16
 8009f32:	4618      	mov	r0, r3
 8009f34:	f000 fe84 	bl	800ac40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f3c:	f001 fa42 	bl	800b3c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f40:	f000 fc34 	bl	800a7ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f44:	f001 fa0e 	bl	800b364 <vPortEnterCritical>
 8009f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f4e:	b25b      	sxtb	r3, r3
 8009f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f54:	d103      	bne.n	8009f5e <xQueueReceive+0x122>
 8009f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f64:	b25b      	sxtb	r3, r3
 8009f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f6a:	d103      	bne.n	8009f74 <xQueueReceive+0x138>
 8009f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f74:	f001 fa26 	bl	800b3c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f78:	1d3a      	adds	r2, r7, #4
 8009f7a:	f107 0310 	add.w	r3, r7, #16
 8009f7e:	4611      	mov	r1, r2
 8009f80:	4618      	mov	r0, r3
 8009f82:	f000 fe73 	bl	800ac6c <xTaskCheckForTimeOut>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d123      	bne.n	8009fd4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f8e:	f000 f997 	bl	800a2c0 <prvIsQueueEmpty>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d017      	beq.n	8009fc8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9a:	3324      	adds	r3, #36	; 0x24
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	4611      	mov	r1, r2
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f000 fdc7 	bl	800ab34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009fa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fa8:	f000 f938 	bl	800a21c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009fac:	f000 fc0c 	bl	800a7c8 <xTaskResumeAll>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d189      	bne.n	8009eca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009fb6:	4b10      	ldr	r3, [pc, #64]	; (8009ff8 <xQueueReceive+0x1bc>)
 8009fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fbc:	601a      	str	r2, [r3, #0]
 8009fbe:	f3bf 8f4f 	dsb	sy
 8009fc2:	f3bf 8f6f 	isb	sy
 8009fc6:	e780      	b.n	8009eca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009fc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fca:	f000 f927 	bl	800a21c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009fce:	f000 fbfb 	bl	800a7c8 <xTaskResumeAll>
 8009fd2:	e77a      	b.n	8009eca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009fd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fd6:	f000 f921 	bl	800a21c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fda:	f000 fbf5 	bl	800a7c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009fde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fe0:	f000 f96e 	bl	800a2c0 <prvIsQueueEmpty>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	f43f af6f 	beq.w	8009eca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009fec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3730      	adds	r7, #48	; 0x30
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	e000ed04 	.word	0xe000ed04

08009ffc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b08e      	sub	sp, #56	; 0x38
 800a000:	af00      	add	r7, sp, #0
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	60b9      	str	r1, [r7, #8]
 800a006:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d10a      	bne.n	800a028 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a016:	f383 8811 	msr	BASEPRI, r3
 800a01a:	f3bf 8f6f 	isb	sy
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	623b      	str	r3, [r7, #32]
}
 800a024:	bf00      	nop
 800a026:	e7fe      	b.n	800a026 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d103      	bne.n	800a036 <xQueueReceiveFromISR+0x3a>
 800a02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a032:	2b00      	cmp	r3, #0
 800a034:	d101      	bne.n	800a03a <xQueueReceiveFromISR+0x3e>
 800a036:	2301      	movs	r3, #1
 800a038:	e000      	b.n	800a03c <xQueueReceiveFromISR+0x40>
 800a03a:	2300      	movs	r3, #0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d10a      	bne.n	800a056 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a044:	f383 8811 	msr	BASEPRI, r3
 800a048:	f3bf 8f6f 	isb	sy
 800a04c:	f3bf 8f4f 	dsb	sy
 800a050:	61fb      	str	r3, [r7, #28]
}
 800a052:	bf00      	nop
 800a054:	e7fe      	b.n	800a054 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a056:	f001 fa67 	bl	800b528 <vPortValidateInterruptPriority>
	__asm volatile
 800a05a:	f3ef 8211 	mrs	r2, BASEPRI
 800a05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a062:	f383 8811 	msr	BASEPRI, r3
 800a066:	f3bf 8f6f 	isb	sy
 800a06a:	f3bf 8f4f 	dsb	sy
 800a06e:	61ba      	str	r2, [r7, #24]
 800a070:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a072:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a074:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a07a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d02f      	beq.n	800a0e2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a084:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a08c:	68b9      	ldr	r1, [r7, #8]
 800a08e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a090:	f000 f89e 	bl	800a1d0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a096:	1e5a      	subs	r2, r3, #1
 800a098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a09c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a0a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0a4:	d112      	bne.n	800a0cc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d016      	beq.n	800a0dc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b0:	3310      	adds	r3, #16
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f000 fd62 	bl	800ab7c <xTaskRemoveFromEventList>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d00e      	beq.n	800a0dc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d00b      	beq.n	800a0dc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	601a      	str	r2, [r3, #0]
 800a0ca:	e007      	b.n	800a0dc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a0cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	b25a      	sxtb	r2, r3
 800a0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	637b      	str	r3, [r7, #52]	; 0x34
 800a0e0:	e001      	b.n	800a0e6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	637b      	str	r3, [r7, #52]	; 0x34
 800a0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	f383 8811 	msr	BASEPRI, r3
}
 800a0f0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a0f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3738      	adds	r7, #56	; 0x38
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b086      	sub	sp, #24
 800a100:	af00      	add	r7, sp, #0
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	60b9      	str	r1, [r7, #8]
 800a106:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a108:	2300      	movs	r3, #0
 800a10a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a110:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a116:	2b00      	cmp	r3, #0
 800a118:	d10d      	bne.n	800a136 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d14d      	bne.n	800a1be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	4618      	mov	r0, r3
 800a128:	f000 ff06 	bl	800af38 <xTaskPriorityDisinherit>
 800a12c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2200      	movs	r2, #0
 800a132:	609a      	str	r2, [r3, #8]
 800a134:	e043      	b.n	800a1be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d119      	bne.n	800a170 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	6858      	ldr	r0, [r3, #4]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a144:	461a      	mov	r2, r3
 800a146:	68b9      	ldr	r1, [r7, #8]
 800a148:	f001 ff9c 	bl	800c084 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	685a      	ldr	r2, [r3, #4]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a154:	441a      	add	r2, r3
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	685a      	ldr	r2, [r3, #4]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	429a      	cmp	r2, r3
 800a164:	d32b      	bcc.n	800a1be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	605a      	str	r2, [r3, #4]
 800a16e:	e026      	b.n	800a1be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	68d8      	ldr	r0, [r3, #12]
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a178:	461a      	mov	r2, r3
 800a17a:	68b9      	ldr	r1, [r7, #8]
 800a17c:	f001 ff82 	bl	800c084 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	68da      	ldr	r2, [r3, #12]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a188:	425b      	negs	r3, r3
 800a18a:	441a      	add	r2, r3
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	68da      	ldr	r2, [r3, #12]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d207      	bcs.n	800a1ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	689a      	ldr	r2, [r3, #8]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a4:	425b      	negs	r3, r3
 800a1a6:	441a      	add	r2, r3
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2b02      	cmp	r3, #2
 800a1b0:	d105      	bne.n	800a1be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d002      	beq.n	800a1be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	3b01      	subs	r3, #1
 800a1bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	1c5a      	adds	r2, r3, #1
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a1c6:	697b      	ldr	r3, [r7, #20]
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3718      	adds	r7, #24
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d018      	beq.n	800a214 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	68da      	ldr	r2, [r3, #12]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ea:	441a      	add	r2, r3
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	68da      	ldr	r2, [r3, #12]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d303      	bcc.n	800a204 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	68d9      	ldr	r1, [r3, #12]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a20c:	461a      	mov	r2, r3
 800a20e:	6838      	ldr	r0, [r7, #0]
 800a210:	f001 ff38 	bl	800c084 <memcpy>
	}
}
 800a214:	bf00      	nop
 800a216:	3708      	adds	r7, #8
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a224:	f001 f89e 	bl	800b364 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a22e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a230:	e011      	b.n	800a256 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a236:	2b00      	cmp	r3, #0
 800a238:	d012      	beq.n	800a260 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	3324      	adds	r3, #36	; 0x24
 800a23e:	4618      	mov	r0, r3
 800a240:	f000 fc9c 	bl	800ab7c <xTaskRemoveFromEventList>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d001      	beq.n	800a24e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a24a:	f000 fd71 	bl	800ad30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a24e:	7bfb      	ldrb	r3, [r7, #15]
 800a250:	3b01      	subs	r3, #1
 800a252:	b2db      	uxtb	r3, r3
 800a254:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	dce9      	bgt.n	800a232 <prvUnlockQueue+0x16>
 800a25e:	e000      	b.n	800a262 <prvUnlockQueue+0x46>
					break;
 800a260:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	22ff      	movs	r2, #255	; 0xff
 800a266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a26a:	f001 f8ab 	bl	800b3c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a26e:	f001 f879 	bl	800b364 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a278:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a27a:	e011      	b.n	800a2a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	691b      	ldr	r3, [r3, #16]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d012      	beq.n	800a2aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	3310      	adds	r3, #16
 800a288:	4618      	mov	r0, r3
 800a28a:	f000 fc77 	bl	800ab7c <xTaskRemoveFromEventList>
 800a28e:	4603      	mov	r3, r0
 800a290:	2b00      	cmp	r3, #0
 800a292:	d001      	beq.n	800a298 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a294:	f000 fd4c 	bl	800ad30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a298:	7bbb      	ldrb	r3, [r7, #14]
 800a29a:	3b01      	subs	r3, #1
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	dce9      	bgt.n	800a27c <prvUnlockQueue+0x60>
 800a2a8:	e000      	b.n	800a2ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a2aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	22ff      	movs	r2, #255	; 0xff
 800a2b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a2b4:	f001 f886 	bl	800b3c4 <vPortExitCritical>
}
 800a2b8:	bf00      	nop
 800a2ba:	3710      	adds	r7, #16
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b084      	sub	sp, #16
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a2c8:	f001 f84c 	bl	800b364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d102      	bne.n	800a2da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	60fb      	str	r3, [r7, #12]
 800a2d8:	e001      	b.n	800a2de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a2de:	f001 f871 	bl	800b3c4 <vPortExitCritical>

	return xReturn;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3710      	adds	r7, #16
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a2f4:	f001 f836 	bl	800b364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a300:	429a      	cmp	r2, r3
 800a302:	d102      	bne.n	800a30a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a304:	2301      	movs	r3, #1
 800a306:	60fb      	str	r3, [r7, #12]
 800a308:	e001      	b.n	800a30e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a30a:	2300      	movs	r3, #0
 800a30c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a30e:	f001 f859 	bl	800b3c4 <vPortExitCritical>

	return xReturn;
 800a312:	68fb      	ldr	r3, [r7, #12]
}
 800a314:	4618      	mov	r0, r3
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b08e      	sub	sp, #56	; 0x38
 800a320:	af04      	add	r7, sp, #16
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	607a      	str	r2, [r7, #4]
 800a328:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a32a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d10a      	bne.n	800a346 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	623b      	str	r3, [r7, #32]
}
 800a342:	bf00      	nop
 800a344:	e7fe      	b.n	800a344 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d10a      	bne.n	800a362 <xTaskCreateStatic+0x46>
	__asm volatile
 800a34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a350:	f383 8811 	msr	BASEPRI, r3
 800a354:	f3bf 8f6f 	isb	sy
 800a358:	f3bf 8f4f 	dsb	sy
 800a35c:	61fb      	str	r3, [r7, #28]
}
 800a35e:	bf00      	nop
 800a360:	e7fe      	b.n	800a360 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a362:	23b4      	movs	r3, #180	; 0xb4
 800a364:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	2bb4      	cmp	r3, #180	; 0xb4
 800a36a:	d00a      	beq.n	800a382 <xTaskCreateStatic+0x66>
	__asm volatile
 800a36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a370:	f383 8811 	msr	BASEPRI, r3
 800a374:	f3bf 8f6f 	isb	sy
 800a378:	f3bf 8f4f 	dsb	sy
 800a37c:	61bb      	str	r3, [r7, #24]
}
 800a37e:	bf00      	nop
 800a380:	e7fe      	b.n	800a380 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a382:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a386:	2b00      	cmp	r3, #0
 800a388:	d01e      	beq.n	800a3c8 <xTaskCreateStatic+0xac>
 800a38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d01b      	beq.n	800a3c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a392:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a398:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39c:	2202      	movs	r2, #2
 800a39e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	9303      	str	r3, [sp, #12]
 800a3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a8:	9302      	str	r3, [sp, #8]
 800a3aa:	f107 0314 	add.w	r3, r7, #20
 800a3ae:	9301      	str	r3, [sp, #4]
 800a3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b2:	9300      	str	r3, [sp, #0]
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	68b9      	ldr	r1, [r7, #8]
 800a3ba:	68f8      	ldr	r0, [r7, #12]
 800a3bc:	f000 f850 	bl	800a460 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a3c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a3c2:	f000 f8eb 	bl	800a59c <prvAddNewTaskToReadyList>
 800a3c6:	e001      	b.n	800a3cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a3cc:	697b      	ldr	r3, [r7, #20]
	}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3728      	adds	r7, #40	; 0x28
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}

0800a3d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a3d6:	b580      	push	{r7, lr}
 800a3d8:	b08c      	sub	sp, #48	; 0x30
 800a3da:	af04      	add	r7, sp, #16
 800a3dc:	60f8      	str	r0, [r7, #12]
 800a3de:	60b9      	str	r1, [r7, #8]
 800a3e0:	603b      	str	r3, [r7, #0]
 800a3e2:	4613      	mov	r3, r2
 800a3e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a3e6:	88fb      	ldrh	r3, [r7, #6]
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f001 f8dc 	bl	800b5a8 <pvPortMalloc>
 800a3f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d00e      	beq.n	800a416 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a3f8:	20b4      	movs	r0, #180	; 0xb4
 800a3fa:	f001 f8d5 	bl	800b5a8 <pvPortMalloc>
 800a3fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d003      	beq.n	800a40e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	697a      	ldr	r2, [r7, #20]
 800a40a:	631a      	str	r2, [r3, #48]	; 0x30
 800a40c:	e005      	b.n	800a41a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a40e:	6978      	ldr	r0, [r7, #20]
 800a410:	f001 f996 	bl	800b740 <vPortFree>
 800a414:	e001      	b.n	800a41a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a416:	2300      	movs	r3, #0
 800a418:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a41a:	69fb      	ldr	r3, [r7, #28]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d017      	beq.n	800a450 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a420:	69fb      	ldr	r3, [r7, #28]
 800a422:	2200      	movs	r2, #0
 800a424:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a428:	88fa      	ldrh	r2, [r7, #6]
 800a42a:	2300      	movs	r3, #0
 800a42c:	9303      	str	r3, [sp, #12]
 800a42e:	69fb      	ldr	r3, [r7, #28]
 800a430:	9302      	str	r3, [sp, #8]
 800a432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a434:	9301      	str	r3, [sp, #4]
 800a436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a438:	9300      	str	r3, [sp, #0]
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	68b9      	ldr	r1, [r7, #8]
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	f000 f80e 	bl	800a460 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a444:	69f8      	ldr	r0, [r7, #28]
 800a446:	f000 f8a9 	bl	800a59c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a44a:	2301      	movs	r3, #1
 800a44c:	61bb      	str	r3, [r7, #24]
 800a44e:	e002      	b.n	800a456 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a450:	f04f 33ff 	mov.w	r3, #4294967295
 800a454:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a456:	69bb      	ldr	r3, [r7, #24]
	}
 800a458:	4618      	mov	r0, r3
 800a45a:	3720      	adds	r7, #32
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b088      	sub	sp, #32
 800a464:	af00      	add	r7, sp, #0
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	607a      	str	r2, [r7, #4]
 800a46c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a478:	3b01      	subs	r3, #1
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	4413      	add	r3, r2
 800a47e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	f023 0307 	bic.w	r3, r3, #7
 800a486:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a488:	69bb      	ldr	r3, [r7, #24]
 800a48a:	f003 0307 	and.w	r3, r3, #7
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00a      	beq.n	800a4a8 <prvInitialiseNewTask+0x48>
	__asm volatile
 800a492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a496:	f383 8811 	msr	BASEPRI, r3
 800a49a:	f3bf 8f6f 	isb	sy
 800a49e:	f3bf 8f4f 	dsb	sy
 800a4a2:	617b      	str	r3, [r7, #20]
}
 800a4a4:	bf00      	nop
 800a4a6:	e7fe      	b.n	800a4a6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d01f      	beq.n	800a4ee <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	61fb      	str	r3, [r7, #28]
 800a4b2:	e012      	b.n	800a4da <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a4b4:	68ba      	ldr	r2, [r7, #8]
 800a4b6:	69fb      	ldr	r3, [r7, #28]
 800a4b8:	4413      	add	r3, r2
 800a4ba:	7819      	ldrb	r1, [r3, #0]
 800a4bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	4413      	add	r3, r2
 800a4c2:	3334      	adds	r3, #52	; 0x34
 800a4c4:	460a      	mov	r2, r1
 800a4c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a4c8:	68ba      	ldr	r2, [r7, #8]
 800a4ca:	69fb      	ldr	r3, [r7, #28]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d006      	beq.n	800a4e2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a4d4:	69fb      	ldr	r3, [r7, #28]
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	61fb      	str	r3, [r7, #28]
 800a4da:	69fb      	ldr	r3, [r7, #28]
 800a4dc:	2b0f      	cmp	r3, #15
 800a4de:	d9e9      	bls.n	800a4b4 <prvInitialiseNewTask+0x54>
 800a4e0:	e000      	b.n	800a4e4 <prvInitialiseNewTask+0x84>
			{
				break;
 800a4e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a4ec:	e003      	b.n	800a4f6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f8:	2b06      	cmp	r3, #6
 800a4fa:	d901      	bls.n	800a500 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a4fc:	2306      	movs	r3, #6
 800a4fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a502:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a504:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a50a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50e:	2200      	movs	r2, #0
 800a510:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a514:	3304      	adds	r3, #4
 800a516:	4618      	mov	r0, r3
 800a518:	f7ff f928 	bl	800976c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51e:	3318      	adds	r3, #24
 800a520:	4618      	mov	r0, r3
 800a522:	f7ff f923 	bl	800976c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a52a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52e:	f1c3 0207 	rsb	r2, r3, #7
 800a532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a534:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a53a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53e:	2200      	movs	r2, #0
 800a540:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a546:	2200      	movs	r2, #0
 800a548:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54e:	334c      	adds	r3, #76	; 0x4c
 800a550:	2260      	movs	r2, #96	; 0x60
 800a552:	2100      	movs	r1, #0
 800a554:	4618      	mov	r0, r3
 800a556:	f001 fda3 	bl	800c0a0 <memset>
 800a55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55c:	4a0c      	ldr	r2, [pc, #48]	; (800a590 <prvInitialiseNewTask+0x130>)
 800a55e:	651a      	str	r2, [r3, #80]	; 0x50
 800a560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a562:	4a0c      	ldr	r2, [pc, #48]	; (800a594 <prvInitialiseNewTask+0x134>)
 800a564:	655a      	str	r2, [r3, #84]	; 0x54
 800a566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a568:	4a0b      	ldr	r2, [pc, #44]	; (800a598 <prvInitialiseNewTask+0x138>)
 800a56a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a56c:	683a      	ldr	r2, [r7, #0]
 800a56e:	68f9      	ldr	r1, [r7, #12]
 800a570:	69b8      	ldr	r0, [r7, #24]
 800a572:	f000 fdcd 	bl	800b110 <pxPortInitialiseStack>
 800a576:	4602      	mov	r2, r0
 800a578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d002      	beq.n	800a588 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a586:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a588:	bf00      	nop
 800a58a:	3720      	adds	r7, #32
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	0800cba4 	.word	0x0800cba4
 800a594:	0800cbc4 	.word	0x0800cbc4
 800a598:	0800cb84 	.word	0x0800cb84

0800a59c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a5a4:	f000 fede 	bl	800b364 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a5a8:	4b2a      	ldr	r3, [pc, #168]	; (800a654 <prvAddNewTaskToReadyList+0xb8>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	4a29      	ldr	r2, [pc, #164]	; (800a654 <prvAddNewTaskToReadyList+0xb8>)
 800a5b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a5b2:	4b29      	ldr	r3, [pc, #164]	; (800a658 <prvAddNewTaskToReadyList+0xbc>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d109      	bne.n	800a5ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a5ba:	4a27      	ldr	r2, [pc, #156]	; (800a658 <prvAddNewTaskToReadyList+0xbc>)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a5c0:	4b24      	ldr	r3, [pc, #144]	; (800a654 <prvAddNewTaskToReadyList+0xb8>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d110      	bne.n	800a5ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a5c8:	f000 fbd6 	bl	800ad78 <prvInitialiseTaskLists>
 800a5cc:	e00d      	b.n	800a5ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a5ce:	4b23      	ldr	r3, [pc, #140]	; (800a65c <prvAddNewTaskToReadyList+0xc0>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d109      	bne.n	800a5ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a5d6:	4b20      	ldr	r3, [pc, #128]	; (800a658 <prvAddNewTaskToReadyList+0xbc>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d802      	bhi.n	800a5ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a5e4:	4a1c      	ldr	r2, [pc, #112]	; (800a658 <prvAddNewTaskToReadyList+0xbc>)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a5ea:	4b1d      	ldr	r3, [pc, #116]	; (800a660 <prvAddNewTaskToReadyList+0xc4>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	4a1b      	ldr	r2, [pc, #108]	; (800a660 <prvAddNewTaskToReadyList+0xc4>)
 800a5f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	409a      	lsls	r2, r3
 800a5fc:	4b19      	ldr	r3, [pc, #100]	; (800a664 <prvAddNewTaskToReadyList+0xc8>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4313      	orrs	r3, r2
 800a602:	4a18      	ldr	r2, [pc, #96]	; (800a664 <prvAddNewTaskToReadyList+0xc8>)
 800a604:	6013      	str	r3, [r2, #0]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a60a:	4613      	mov	r3, r2
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	4413      	add	r3, r2
 800a610:	009b      	lsls	r3, r3, #2
 800a612:	4a15      	ldr	r2, [pc, #84]	; (800a668 <prvAddNewTaskToReadyList+0xcc>)
 800a614:	441a      	add	r2, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	3304      	adds	r3, #4
 800a61a:	4619      	mov	r1, r3
 800a61c:	4610      	mov	r0, r2
 800a61e:	f7ff f8b2 	bl	8009786 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a622:	f000 fecf 	bl	800b3c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a626:	4b0d      	ldr	r3, [pc, #52]	; (800a65c <prvAddNewTaskToReadyList+0xc0>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d00e      	beq.n	800a64c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a62e:	4b0a      	ldr	r3, [pc, #40]	; (800a658 <prvAddNewTaskToReadyList+0xbc>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a638:	429a      	cmp	r2, r3
 800a63a:	d207      	bcs.n	800a64c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a63c:	4b0b      	ldr	r3, [pc, #44]	; (800a66c <prvAddNewTaskToReadyList+0xd0>)
 800a63e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a642:	601a      	str	r2, [r3, #0]
 800a644:	f3bf 8f4f 	dsb	sy
 800a648:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a64c:	bf00      	nop
 800a64e:	3708      	adds	r7, #8
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}
 800a654:	20000804 	.word	0x20000804
 800a658:	20000704 	.word	0x20000704
 800a65c:	20000810 	.word	0x20000810
 800a660:	20000820 	.word	0x20000820
 800a664:	2000080c 	.word	0x2000080c
 800a668:	20000708 	.word	0x20000708
 800a66c:	e000ed04 	.word	0xe000ed04

0800a670 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a678:	2300      	movs	r3, #0
 800a67a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d017      	beq.n	800a6b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a682:	4b13      	ldr	r3, [pc, #76]	; (800a6d0 <vTaskDelay+0x60>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00a      	beq.n	800a6a0 <vTaskDelay+0x30>
	__asm volatile
 800a68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68e:	f383 8811 	msr	BASEPRI, r3
 800a692:	f3bf 8f6f 	isb	sy
 800a696:	f3bf 8f4f 	dsb	sy
 800a69a:	60bb      	str	r3, [r7, #8]
}
 800a69c:	bf00      	nop
 800a69e:	e7fe      	b.n	800a69e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a6a0:	f000 f884 	bl	800a7ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 fccc 	bl	800b044 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a6ac:	f000 f88c 	bl	800a7c8 <xTaskResumeAll>
 800a6b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d107      	bne.n	800a6c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a6b8:	4b06      	ldr	r3, [pc, #24]	; (800a6d4 <vTaskDelay+0x64>)
 800a6ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6be:	601a      	str	r2, [r3, #0]
 800a6c0:	f3bf 8f4f 	dsb	sy
 800a6c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a6c8:	bf00      	nop
 800a6ca:	3710      	adds	r7, #16
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	2000082c 	.word	0x2000082c
 800a6d4:	e000ed04 	.word	0xe000ed04

0800a6d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b08a      	sub	sp, #40	; 0x28
 800a6dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a6e6:	463a      	mov	r2, r7
 800a6e8:	1d39      	adds	r1, r7, #4
 800a6ea:	f107 0308 	add.w	r3, r7, #8
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7f5 ff84 	bl	80005fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a6f4:	6839      	ldr	r1, [r7, #0]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	68ba      	ldr	r2, [r7, #8]
 800a6fa:	9202      	str	r2, [sp, #8]
 800a6fc:	9301      	str	r3, [sp, #4]
 800a6fe:	2300      	movs	r3, #0
 800a700:	9300      	str	r3, [sp, #0]
 800a702:	2300      	movs	r3, #0
 800a704:	460a      	mov	r2, r1
 800a706:	4921      	ldr	r1, [pc, #132]	; (800a78c <vTaskStartScheduler+0xb4>)
 800a708:	4821      	ldr	r0, [pc, #132]	; (800a790 <vTaskStartScheduler+0xb8>)
 800a70a:	f7ff fe07 	bl	800a31c <xTaskCreateStatic>
 800a70e:	4603      	mov	r3, r0
 800a710:	4a20      	ldr	r2, [pc, #128]	; (800a794 <vTaskStartScheduler+0xbc>)
 800a712:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a714:	4b1f      	ldr	r3, [pc, #124]	; (800a794 <vTaskStartScheduler+0xbc>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d002      	beq.n	800a722 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a71c:	2301      	movs	r3, #1
 800a71e:	617b      	str	r3, [r7, #20]
 800a720:	e001      	b.n	800a726 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a722:	2300      	movs	r3, #0
 800a724:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d11b      	bne.n	800a764 <vTaskStartScheduler+0x8c>
	__asm volatile
 800a72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a730:	f383 8811 	msr	BASEPRI, r3
 800a734:	f3bf 8f6f 	isb	sy
 800a738:	f3bf 8f4f 	dsb	sy
 800a73c:	613b      	str	r3, [r7, #16]
}
 800a73e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a740:	4b15      	ldr	r3, [pc, #84]	; (800a798 <vTaskStartScheduler+0xc0>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	334c      	adds	r3, #76	; 0x4c
 800a746:	4a15      	ldr	r2, [pc, #84]	; (800a79c <vTaskStartScheduler+0xc4>)
 800a748:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a74a:	4b15      	ldr	r3, [pc, #84]	; (800a7a0 <vTaskStartScheduler+0xc8>)
 800a74c:	f04f 32ff 	mov.w	r2, #4294967295
 800a750:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a752:	4b14      	ldr	r3, [pc, #80]	; (800a7a4 <vTaskStartScheduler+0xcc>)
 800a754:	2201      	movs	r2, #1
 800a756:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a758:	4b13      	ldr	r3, [pc, #76]	; (800a7a8 <vTaskStartScheduler+0xd0>)
 800a75a:	2200      	movs	r2, #0
 800a75c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a75e:	f000 fd5f 	bl	800b220 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a762:	e00e      	b.n	800a782 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a76a:	d10a      	bne.n	800a782 <vTaskStartScheduler+0xaa>
	__asm volatile
 800a76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a770:	f383 8811 	msr	BASEPRI, r3
 800a774:	f3bf 8f6f 	isb	sy
 800a778:	f3bf 8f4f 	dsb	sy
 800a77c:	60fb      	str	r3, [r7, #12]
}
 800a77e:	bf00      	nop
 800a780:	e7fe      	b.n	800a780 <vTaskStartScheduler+0xa8>
}
 800a782:	bf00      	nop
 800a784:	3718      	adds	r7, #24
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	0800cb64 	.word	0x0800cb64
 800a790:	0800ad49 	.word	0x0800ad49
 800a794:	20000828 	.word	0x20000828
 800a798:	20000704 	.word	0x20000704
 800a79c:	20000260 	.word	0x20000260
 800a7a0:	20000824 	.word	0x20000824
 800a7a4:	20000810 	.word	0x20000810
 800a7a8:	20000808 	.word	0x20000808

0800a7ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a7b0:	4b04      	ldr	r3, [pc, #16]	; (800a7c4 <vTaskSuspendAll+0x18>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	4a03      	ldr	r2, [pc, #12]	; (800a7c4 <vTaskSuspendAll+0x18>)
 800a7b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a7ba:	bf00      	nop
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr
 800a7c4:	2000082c 	.word	0x2000082c

0800a7c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a7d6:	4b41      	ldr	r3, [pc, #260]	; (800a8dc <xTaskResumeAll+0x114>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d10a      	bne.n	800a7f4 <xTaskResumeAll+0x2c>
	__asm volatile
 800a7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e2:	f383 8811 	msr	BASEPRI, r3
 800a7e6:	f3bf 8f6f 	isb	sy
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	603b      	str	r3, [r7, #0]
}
 800a7f0:	bf00      	nop
 800a7f2:	e7fe      	b.n	800a7f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a7f4:	f000 fdb6 	bl	800b364 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a7f8:	4b38      	ldr	r3, [pc, #224]	; (800a8dc <xTaskResumeAll+0x114>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	3b01      	subs	r3, #1
 800a7fe:	4a37      	ldr	r2, [pc, #220]	; (800a8dc <xTaskResumeAll+0x114>)
 800a800:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a802:	4b36      	ldr	r3, [pc, #216]	; (800a8dc <xTaskResumeAll+0x114>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d161      	bne.n	800a8ce <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a80a:	4b35      	ldr	r3, [pc, #212]	; (800a8e0 <xTaskResumeAll+0x118>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d05d      	beq.n	800a8ce <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a812:	e02e      	b.n	800a872 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a814:	4b33      	ldr	r3, [pc, #204]	; (800a8e4 <xTaskResumeAll+0x11c>)
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	3318      	adds	r3, #24
 800a820:	4618      	mov	r0, r3
 800a822:	f7ff f80d 	bl	8009840 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	3304      	adds	r3, #4
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7ff f808 	bl	8009840 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a834:	2201      	movs	r2, #1
 800a836:	409a      	lsls	r2, r3
 800a838:	4b2b      	ldr	r3, [pc, #172]	; (800a8e8 <xTaskResumeAll+0x120>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4313      	orrs	r3, r2
 800a83e:	4a2a      	ldr	r2, [pc, #168]	; (800a8e8 <xTaskResumeAll+0x120>)
 800a840:	6013      	str	r3, [r2, #0]
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a846:	4613      	mov	r3, r2
 800a848:	009b      	lsls	r3, r3, #2
 800a84a:	4413      	add	r3, r2
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	4a27      	ldr	r2, [pc, #156]	; (800a8ec <xTaskResumeAll+0x124>)
 800a850:	441a      	add	r2, r3
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	3304      	adds	r3, #4
 800a856:	4619      	mov	r1, r3
 800a858:	4610      	mov	r0, r2
 800a85a:	f7fe ff94 	bl	8009786 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a862:	4b23      	ldr	r3, [pc, #140]	; (800a8f0 <xTaskResumeAll+0x128>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a868:	429a      	cmp	r2, r3
 800a86a:	d302      	bcc.n	800a872 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a86c:	4b21      	ldr	r3, [pc, #132]	; (800a8f4 <xTaskResumeAll+0x12c>)
 800a86e:	2201      	movs	r2, #1
 800a870:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a872:	4b1c      	ldr	r3, [pc, #112]	; (800a8e4 <xTaskResumeAll+0x11c>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d1cc      	bne.n	800a814 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d001      	beq.n	800a884 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a880:	f000 fb1c 	bl	800aebc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a884:	4b1c      	ldr	r3, [pc, #112]	; (800a8f8 <xTaskResumeAll+0x130>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d010      	beq.n	800a8b2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a890:	f000 f836 	bl	800a900 <xTaskIncrementTick>
 800a894:	4603      	mov	r3, r0
 800a896:	2b00      	cmp	r3, #0
 800a898:	d002      	beq.n	800a8a0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a89a:	4b16      	ldr	r3, [pc, #88]	; (800a8f4 <xTaskResumeAll+0x12c>)
 800a89c:	2201      	movs	r2, #1
 800a89e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	3b01      	subs	r3, #1
 800a8a4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d1f1      	bne.n	800a890 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a8ac:	4b12      	ldr	r3, [pc, #72]	; (800a8f8 <xTaskResumeAll+0x130>)
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a8b2:	4b10      	ldr	r3, [pc, #64]	; (800a8f4 <xTaskResumeAll+0x12c>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d009      	beq.n	800a8ce <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a8be:	4b0f      	ldr	r3, [pc, #60]	; (800a8fc <xTaskResumeAll+0x134>)
 800a8c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8c4:	601a      	str	r2, [r3, #0]
 800a8c6:	f3bf 8f4f 	dsb	sy
 800a8ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a8ce:	f000 fd79 	bl	800b3c4 <vPortExitCritical>

	return xAlreadyYielded;
 800a8d2:	68bb      	ldr	r3, [r7, #8]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3710      	adds	r7, #16
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}
 800a8dc:	2000082c 	.word	0x2000082c
 800a8e0:	20000804 	.word	0x20000804
 800a8e4:	200007c4 	.word	0x200007c4
 800a8e8:	2000080c 	.word	0x2000080c
 800a8ec:	20000708 	.word	0x20000708
 800a8f0:	20000704 	.word	0x20000704
 800a8f4:	20000818 	.word	0x20000818
 800a8f8:	20000814 	.word	0x20000814
 800a8fc:	e000ed04 	.word	0xe000ed04

0800a900 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b086      	sub	sp, #24
 800a904:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a906:	2300      	movs	r3, #0
 800a908:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a90a:	4b4e      	ldr	r3, [pc, #312]	; (800aa44 <xTaskIncrementTick+0x144>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f040 808e 	bne.w	800aa30 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a914:	4b4c      	ldr	r3, [pc, #304]	; (800aa48 <xTaskIncrementTick+0x148>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	3301      	adds	r3, #1
 800a91a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a91c:	4a4a      	ldr	r2, [pc, #296]	; (800aa48 <xTaskIncrementTick+0x148>)
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d120      	bne.n	800a96a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a928:	4b48      	ldr	r3, [pc, #288]	; (800aa4c <xTaskIncrementTick+0x14c>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d00a      	beq.n	800a948 <xTaskIncrementTick+0x48>
	__asm volatile
 800a932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a936:	f383 8811 	msr	BASEPRI, r3
 800a93a:	f3bf 8f6f 	isb	sy
 800a93e:	f3bf 8f4f 	dsb	sy
 800a942:	603b      	str	r3, [r7, #0]
}
 800a944:	bf00      	nop
 800a946:	e7fe      	b.n	800a946 <xTaskIncrementTick+0x46>
 800a948:	4b40      	ldr	r3, [pc, #256]	; (800aa4c <xTaskIncrementTick+0x14c>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	60fb      	str	r3, [r7, #12]
 800a94e:	4b40      	ldr	r3, [pc, #256]	; (800aa50 <xTaskIncrementTick+0x150>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4a3e      	ldr	r2, [pc, #248]	; (800aa4c <xTaskIncrementTick+0x14c>)
 800a954:	6013      	str	r3, [r2, #0]
 800a956:	4a3e      	ldr	r2, [pc, #248]	; (800aa50 <xTaskIncrementTick+0x150>)
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	6013      	str	r3, [r2, #0]
 800a95c:	4b3d      	ldr	r3, [pc, #244]	; (800aa54 <xTaskIncrementTick+0x154>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	3301      	adds	r3, #1
 800a962:	4a3c      	ldr	r2, [pc, #240]	; (800aa54 <xTaskIncrementTick+0x154>)
 800a964:	6013      	str	r3, [r2, #0]
 800a966:	f000 faa9 	bl	800aebc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a96a:	4b3b      	ldr	r3, [pc, #236]	; (800aa58 <xTaskIncrementTick+0x158>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	693a      	ldr	r2, [r7, #16]
 800a970:	429a      	cmp	r2, r3
 800a972:	d348      	bcc.n	800aa06 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a974:	4b35      	ldr	r3, [pc, #212]	; (800aa4c <xTaskIncrementTick+0x14c>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d104      	bne.n	800a988 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a97e:	4b36      	ldr	r3, [pc, #216]	; (800aa58 <xTaskIncrementTick+0x158>)
 800a980:	f04f 32ff 	mov.w	r2, #4294967295
 800a984:	601a      	str	r2, [r3, #0]
					break;
 800a986:	e03e      	b.n	800aa06 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a988:	4b30      	ldr	r3, [pc, #192]	; (800aa4c <xTaskIncrementTick+0x14c>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	68db      	ldr	r3, [r3, #12]
 800a98e:	68db      	ldr	r3, [r3, #12]
 800a990:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	685b      	ldr	r3, [r3, #4]
 800a996:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a998:	693a      	ldr	r2, [r7, #16]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d203      	bcs.n	800a9a8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a9a0:	4a2d      	ldr	r2, [pc, #180]	; (800aa58 <xTaskIncrementTick+0x158>)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a9a6:	e02e      	b.n	800aa06 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	3304      	adds	r3, #4
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7fe ff47 	bl	8009840 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d004      	beq.n	800a9c4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	3318      	adds	r3, #24
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7fe ff3e 	bl	8009840 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	409a      	lsls	r2, r3
 800a9cc:	4b23      	ldr	r3, [pc, #140]	; (800aa5c <xTaskIncrementTick+0x15c>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	4a22      	ldr	r2, [pc, #136]	; (800aa5c <xTaskIncrementTick+0x15c>)
 800a9d4:	6013      	str	r3, [r2, #0]
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9da:	4613      	mov	r3, r2
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	4413      	add	r3, r2
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	4a1f      	ldr	r2, [pc, #124]	; (800aa60 <xTaskIncrementTick+0x160>)
 800a9e4:	441a      	add	r2, r3
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	3304      	adds	r3, #4
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	4610      	mov	r0, r2
 800a9ee:	f7fe feca 	bl	8009786 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9f6:	4b1b      	ldr	r3, [pc, #108]	; (800aa64 <xTaskIncrementTick+0x164>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d3b9      	bcc.n	800a974 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800aa00:	2301      	movs	r3, #1
 800aa02:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa04:	e7b6      	b.n	800a974 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aa06:	4b17      	ldr	r3, [pc, #92]	; (800aa64 <xTaskIncrementTick+0x164>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa0c:	4914      	ldr	r1, [pc, #80]	; (800aa60 <xTaskIncrementTick+0x160>)
 800aa0e:	4613      	mov	r3, r2
 800aa10:	009b      	lsls	r3, r3, #2
 800aa12:	4413      	add	r3, r2
 800aa14:	009b      	lsls	r3, r3, #2
 800aa16:	440b      	add	r3, r1
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d901      	bls.n	800aa22 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800aa22:	4b11      	ldr	r3, [pc, #68]	; (800aa68 <xTaskIncrementTick+0x168>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d007      	beq.n	800aa3a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	617b      	str	r3, [r7, #20]
 800aa2e:	e004      	b.n	800aa3a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800aa30:	4b0e      	ldr	r3, [pc, #56]	; (800aa6c <xTaskIncrementTick+0x16c>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	3301      	adds	r3, #1
 800aa36:	4a0d      	ldr	r2, [pc, #52]	; (800aa6c <xTaskIncrementTick+0x16c>)
 800aa38:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800aa3a:	697b      	ldr	r3, [r7, #20]
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3718      	adds	r7, #24
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	2000082c 	.word	0x2000082c
 800aa48:	20000808 	.word	0x20000808
 800aa4c:	200007bc 	.word	0x200007bc
 800aa50:	200007c0 	.word	0x200007c0
 800aa54:	2000081c 	.word	0x2000081c
 800aa58:	20000824 	.word	0x20000824
 800aa5c:	2000080c 	.word	0x2000080c
 800aa60:	20000708 	.word	0x20000708
 800aa64:	20000704 	.word	0x20000704
 800aa68:	20000818 	.word	0x20000818
 800aa6c:	20000814 	.word	0x20000814

0800aa70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aa70:	b480      	push	{r7}
 800aa72:	b087      	sub	sp, #28
 800aa74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aa76:	4b29      	ldr	r3, [pc, #164]	; (800ab1c <vTaskSwitchContext+0xac>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d003      	beq.n	800aa86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aa7e:	4b28      	ldr	r3, [pc, #160]	; (800ab20 <vTaskSwitchContext+0xb0>)
 800aa80:	2201      	movs	r2, #1
 800aa82:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aa84:	e044      	b.n	800ab10 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800aa86:	4b26      	ldr	r3, [pc, #152]	; (800ab20 <vTaskSwitchContext+0xb0>)
 800aa88:	2200      	movs	r2, #0
 800aa8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa8c:	4b25      	ldr	r3, [pc, #148]	; (800ab24 <vTaskSwitchContext+0xb4>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	fab3 f383 	clz	r3, r3
 800aa98:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800aa9a:	7afb      	ldrb	r3, [r7, #11]
 800aa9c:	f1c3 031f 	rsb	r3, r3, #31
 800aaa0:	617b      	str	r3, [r7, #20]
 800aaa2:	4921      	ldr	r1, [pc, #132]	; (800ab28 <vTaskSwitchContext+0xb8>)
 800aaa4:	697a      	ldr	r2, [r7, #20]
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	4413      	add	r3, r2
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	440b      	add	r3, r1
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d10a      	bne.n	800aacc <vTaskSwitchContext+0x5c>
	__asm volatile
 800aab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaba:	f383 8811 	msr	BASEPRI, r3
 800aabe:	f3bf 8f6f 	isb	sy
 800aac2:	f3bf 8f4f 	dsb	sy
 800aac6:	607b      	str	r3, [r7, #4]
}
 800aac8:	bf00      	nop
 800aaca:	e7fe      	b.n	800aaca <vTaskSwitchContext+0x5a>
 800aacc:	697a      	ldr	r2, [r7, #20]
 800aace:	4613      	mov	r3, r2
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	4413      	add	r3, r2
 800aad4:	009b      	lsls	r3, r3, #2
 800aad6:	4a14      	ldr	r2, [pc, #80]	; (800ab28 <vTaskSwitchContext+0xb8>)
 800aad8:	4413      	add	r3, r2
 800aada:	613b      	str	r3, [r7, #16]
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	685a      	ldr	r2, [r3, #4]
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	605a      	str	r2, [r3, #4]
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	685a      	ldr	r2, [r3, #4]
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	3308      	adds	r3, #8
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d104      	bne.n	800aafc <vTaskSwitchContext+0x8c>
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	685a      	ldr	r2, [r3, #4]
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	605a      	str	r2, [r3, #4]
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	68db      	ldr	r3, [r3, #12]
 800ab02:	4a0a      	ldr	r2, [pc, #40]	; (800ab2c <vTaskSwitchContext+0xbc>)
 800ab04:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ab06:	4b09      	ldr	r3, [pc, #36]	; (800ab2c <vTaskSwitchContext+0xbc>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	334c      	adds	r3, #76	; 0x4c
 800ab0c:	4a08      	ldr	r2, [pc, #32]	; (800ab30 <vTaskSwitchContext+0xc0>)
 800ab0e:	6013      	str	r3, [r2, #0]
}
 800ab10:	bf00      	nop
 800ab12:	371c      	adds	r7, #28
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr
 800ab1c:	2000082c 	.word	0x2000082c
 800ab20:	20000818 	.word	0x20000818
 800ab24:	2000080c 	.word	0x2000080c
 800ab28:	20000708 	.word	0x20000708
 800ab2c:	20000704 	.word	0x20000704
 800ab30:	20000260 	.word	0x20000260

0800ab34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b084      	sub	sp, #16
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d10a      	bne.n	800ab5a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ab44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab48:	f383 8811 	msr	BASEPRI, r3
 800ab4c:	f3bf 8f6f 	isb	sy
 800ab50:	f3bf 8f4f 	dsb	sy
 800ab54:	60fb      	str	r3, [r7, #12]
}
 800ab56:	bf00      	nop
 800ab58:	e7fe      	b.n	800ab58 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab5a:	4b07      	ldr	r3, [pc, #28]	; (800ab78 <vTaskPlaceOnEventList+0x44>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	3318      	adds	r3, #24
 800ab60:	4619      	mov	r1, r3
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f7fe fe33 	bl	80097ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ab68:	2101      	movs	r1, #1
 800ab6a:	6838      	ldr	r0, [r7, #0]
 800ab6c:	f000 fa6a 	bl	800b044 <prvAddCurrentTaskToDelayedList>
}
 800ab70:	bf00      	nop
 800ab72:	3710      	adds	r7, #16
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}
 800ab78:	20000704 	.word	0x20000704

0800ab7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b086      	sub	sp, #24
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	68db      	ldr	r3, [r3, #12]
 800ab8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d10a      	bne.n	800aba8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ab92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab96:	f383 8811 	msr	BASEPRI, r3
 800ab9a:	f3bf 8f6f 	isb	sy
 800ab9e:	f3bf 8f4f 	dsb	sy
 800aba2:	60fb      	str	r3, [r7, #12]
}
 800aba4:	bf00      	nop
 800aba6:	e7fe      	b.n	800aba6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	3318      	adds	r3, #24
 800abac:	4618      	mov	r0, r3
 800abae:	f7fe fe47 	bl	8009840 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abb2:	4b1d      	ldr	r3, [pc, #116]	; (800ac28 <xTaskRemoveFromEventList+0xac>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d11c      	bne.n	800abf4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	3304      	adds	r3, #4
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7fe fe3e 	bl	8009840 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc8:	2201      	movs	r2, #1
 800abca:	409a      	lsls	r2, r3
 800abcc:	4b17      	ldr	r3, [pc, #92]	; (800ac2c <xTaskRemoveFromEventList+0xb0>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4313      	orrs	r3, r2
 800abd2:	4a16      	ldr	r2, [pc, #88]	; (800ac2c <xTaskRemoveFromEventList+0xb0>)
 800abd4:	6013      	str	r3, [r2, #0]
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abda:	4613      	mov	r3, r2
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	4413      	add	r3, r2
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	4a13      	ldr	r2, [pc, #76]	; (800ac30 <xTaskRemoveFromEventList+0xb4>)
 800abe4:	441a      	add	r2, r3
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	3304      	adds	r3, #4
 800abea:	4619      	mov	r1, r3
 800abec:	4610      	mov	r0, r2
 800abee:	f7fe fdca 	bl	8009786 <vListInsertEnd>
 800abf2:	e005      	b.n	800ac00 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	3318      	adds	r3, #24
 800abf8:	4619      	mov	r1, r3
 800abfa:	480e      	ldr	r0, [pc, #56]	; (800ac34 <xTaskRemoveFromEventList+0xb8>)
 800abfc:	f7fe fdc3 	bl	8009786 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac04:	4b0c      	ldr	r3, [pc, #48]	; (800ac38 <xTaskRemoveFromEventList+0xbc>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d905      	bls.n	800ac1a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ac12:	4b0a      	ldr	r3, [pc, #40]	; (800ac3c <xTaskRemoveFromEventList+0xc0>)
 800ac14:	2201      	movs	r2, #1
 800ac16:	601a      	str	r2, [r3, #0]
 800ac18:	e001      	b.n	800ac1e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ac1e:	697b      	ldr	r3, [r7, #20]
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3718      	adds	r7, #24
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	2000082c 	.word	0x2000082c
 800ac2c:	2000080c 	.word	0x2000080c
 800ac30:	20000708 	.word	0x20000708
 800ac34:	200007c4 	.word	0x200007c4
 800ac38:	20000704 	.word	0x20000704
 800ac3c:	20000818 	.word	0x20000818

0800ac40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ac48:	4b06      	ldr	r3, [pc, #24]	; (800ac64 <vTaskInternalSetTimeOutState+0x24>)
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ac50:	4b05      	ldr	r3, [pc, #20]	; (800ac68 <vTaskInternalSetTimeOutState+0x28>)
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	605a      	str	r2, [r3, #4]
}
 800ac58:	bf00      	nop
 800ac5a:	370c      	adds	r7, #12
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr
 800ac64:	2000081c 	.word	0x2000081c
 800ac68:	20000808 	.word	0x20000808

0800ac6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b088      	sub	sp, #32
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d10a      	bne.n	800ac92 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ac7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac80:	f383 8811 	msr	BASEPRI, r3
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	f3bf 8f4f 	dsb	sy
 800ac8c:	613b      	str	r3, [r7, #16]
}
 800ac8e:	bf00      	nop
 800ac90:	e7fe      	b.n	800ac90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d10a      	bne.n	800acae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ac98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9c:	f383 8811 	msr	BASEPRI, r3
 800aca0:	f3bf 8f6f 	isb	sy
 800aca4:	f3bf 8f4f 	dsb	sy
 800aca8:	60fb      	str	r3, [r7, #12]
}
 800acaa:	bf00      	nop
 800acac:	e7fe      	b.n	800acac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800acae:	f000 fb59 	bl	800b364 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800acb2:	4b1d      	ldr	r3, [pc, #116]	; (800ad28 <xTaskCheckForTimeOut+0xbc>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	69ba      	ldr	r2, [r7, #24]
 800acbe:	1ad3      	subs	r3, r2, r3
 800acc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acca:	d102      	bne.n	800acd2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800accc:	2300      	movs	r3, #0
 800acce:	61fb      	str	r3, [r7, #28]
 800acd0:	e023      	b.n	800ad1a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	4b15      	ldr	r3, [pc, #84]	; (800ad2c <xTaskCheckForTimeOut+0xc0>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d007      	beq.n	800acee <xTaskCheckForTimeOut+0x82>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	69ba      	ldr	r2, [r7, #24]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d302      	bcc.n	800acee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ace8:	2301      	movs	r3, #1
 800acea:	61fb      	str	r3, [r7, #28]
 800acec:	e015      	b.n	800ad1a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	697a      	ldr	r2, [r7, #20]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d20b      	bcs.n	800ad10 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	681a      	ldr	r2, [r3, #0]
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	1ad2      	subs	r2, r2, r3
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f7ff ff9b 	bl	800ac40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	61fb      	str	r3, [r7, #28]
 800ad0e:	e004      	b.n	800ad1a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	2200      	movs	r2, #0
 800ad14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ad16:	2301      	movs	r3, #1
 800ad18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ad1a:	f000 fb53 	bl	800b3c4 <vPortExitCritical>

	return xReturn;
 800ad1e:	69fb      	ldr	r3, [r7, #28]
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3720      	adds	r7, #32
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	20000808 	.word	0x20000808
 800ad2c:	2000081c 	.word	0x2000081c

0800ad30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ad30:	b480      	push	{r7}
 800ad32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ad34:	4b03      	ldr	r3, [pc, #12]	; (800ad44 <vTaskMissedYield+0x14>)
 800ad36:	2201      	movs	r2, #1
 800ad38:	601a      	str	r2, [r3, #0]
}
 800ad3a:	bf00      	nop
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr
 800ad44:	20000818 	.word	0x20000818

0800ad48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ad50:	f000 f852 	bl	800adf8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ad54:	4b06      	ldr	r3, [pc, #24]	; (800ad70 <prvIdleTask+0x28>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d9f9      	bls.n	800ad50 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ad5c:	4b05      	ldr	r3, [pc, #20]	; (800ad74 <prvIdleTask+0x2c>)
 800ad5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad62:	601a      	str	r2, [r3, #0]
 800ad64:	f3bf 8f4f 	dsb	sy
 800ad68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ad6c:	e7f0      	b.n	800ad50 <prvIdleTask+0x8>
 800ad6e:	bf00      	nop
 800ad70:	20000708 	.word	0x20000708
 800ad74:	e000ed04 	.word	0xe000ed04

0800ad78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad7e:	2300      	movs	r3, #0
 800ad80:	607b      	str	r3, [r7, #4]
 800ad82:	e00c      	b.n	800ad9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	4613      	mov	r3, r2
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	4413      	add	r3, r2
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	4a12      	ldr	r2, [pc, #72]	; (800add8 <prvInitialiseTaskLists+0x60>)
 800ad90:	4413      	add	r3, r2
 800ad92:	4618      	mov	r0, r3
 800ad94:	f7fe fcca 	bl	800972c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	607b      	str	r3, [r7, #4]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2b06      	cmp	r3, #6
 800ada2:	d9ef      	bls.n	800ad84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ada4:	480d      	ldr	r0, [pc, #52]	; (800addc <prvInitialiseTaskLists+0x64>)
 800ada6:	f7fe fcc1 	bl	800972c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800adaa:	480d      	ldr	r0, [pc, #52]	; (800ade0 <prvInitialiseTaskLists+0x68>)
 800adac:	f7fe fcbe 	bl	800972c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800adb0:	480c      	ldr	r0, [pc, #48]	; (800ade4 <prvInitialiseTaskLists+0x6c>)
 800adb2:	f7fe fcbb 	bl	800972c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800adb6:	480c      	ldr	r0, [pc, #48]	; (800ade8 <prvInitialiseTaskLists+0x70>)
 800adb8:	f7fe fcb8 	bl	800972c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800adbc:	480b      	ldr	r0, [pc, #44]	; (800adec <prvInitialiseTaskLists+0x74>)
 800adbe:	f7fe fcb5 	bl	800972c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800adc2:	4b0b      	ldr	r3, [pc, #44]	; (800adf0 <prvInitialiseTaskLists+0x78>)
 800adc4:	4a05      	ldr	r2, [pc, #20]	; (800addc <prvInitialiseTaskLists+0x64>)
 800adc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800adc8:	4b0a      	ldr	r3, [pc, #40]	; (800adf4 <prvInitialiseTaskLists+0x7c>)
 800adca:	4a05      	ldr	r2, [pc, #20]	; (800ade0 <prvInitialiseTaskLists+0x68>)
 800adcc:	601a      	str	r2, [r3, #0]
}
 800adce:	bf00      	nop
 800add0:	3708      	adds	r7, #8
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	20000708 	.word	0x20000708
 800addc:	20000794 	.word	0x20000794
 800ade0:	200007a8 	.word	0x200007a8
 800ade4:	200007c4 	.word	0x200007c4
 800ade8:	200007d8 	.word	0x200007d8
 800adec:	200007f0 	.word	0x200007f0
 800adf0:	200007bc 	.word	0x200007bc
 800adf4:	200007c0 	.word	0x200007c0

0800adf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800adfe:	e019      	b.n	800ae34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ae00:	f000 fab0 	bl	800b364 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae04:	4b10      	ldr	r3, [pc, #64]	; (800ae48 <prvCheckTasksWaitingTermination+0x50>)
 800ae06:	68db      	ldr	r3, [r3, #12]
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	3304      	adds	r3, #4
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7fe fd15 	bl	8009840 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ae16:	4b0d      	ldr	r3, [pc, #52]	; (800ae4c <prvCheckTasksWaitingTermination+0x54>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	3b01      	subs	r3, #1
 800ae1c:	4a0b      	ldr	r2, [pc, #44]	; (800ae4c <prvCheckTasksWaitingTermination+0x54>)
 800ae1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ae20:	4b0b      	ldr	r3, [pc, #44]	; (800ae50 <prvCheckTasksWaitingTermination+0x58>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	3b01      	subs	r3, #1
 800ae26:	4a0a      	ldr	r2, [pc, #40]	; (800ae50 <prvCheckTasksWaitingTermination+0x58>)
 800ae28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ae2a:	f000 facb 	bl	800b3c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 f810 	bl	800ae54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae34:	4b06      	ldr	r3, [pc, #24]	; (800ae50 <prvCheckTasksWaitingTermination+0x58>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d1e1      	bne.n	800ae00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ae3c:	bf00      	nop
 800ae3e:	bf00      	nop
 800ae40:	3708      	adds	r7, #8
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	200007d8 	.word	0x200007d8
 800ae4c:	20000804 	.word	0x20000804
 800ae50:	200007ec 	.word	0x200007ec

0800ae54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	334c      	adds	r3, #76	; 0x4c
 800ae60:	4618      	mov	r0, r3
 800ae62:	f001 fa13 	bl	800c28c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d108      	bne.n	800ae82 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae74:	4618      	mov	r0, r3
 800ae76:	f000 fc63 	bl	800b740 <vPortFree>
				vPortFree( pxTCB );
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 fc60 	bl	800b740 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ae80:	e018      	b.n	800aeb4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	d103      	bne.n	800ae94 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f000 fc57 	bl	800b740 <vPortFree>
	}
 800ae92:	e00f      	b.n	800aeb4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ae9a:	2b02      	cmp	r3, #2
 800ae9c:	d00a      	beq.n	800aeb4 <prvDeleteTCB+0x60>
	__asm volatile
 800ae9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea2:	f383 8811 	msr	BASEPRI, r3
 800aea6:	f3bf 8f6f 	isb	sy
 800aeaa:	f3bf 8f4f 	dsb	sy
 800aeae:	60fb      	str	r3, [r7, #12]
}
 800aeb0:	bf00      	nop
 800aeb2:	e7fe      	b.n	800aeb2 <prvDeleteTCB+0x5e>
	}
 800aeb4:	bf00      	nop
 800aeb6:	3710      	adds	r7, #16
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aebc:	b480      	push	{r7}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aec2:	4b0c      	ldr	r3, [pc, #48]	; (800aef4 <prvResetNextTaskUnblockTime+0x38>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d104      	bne.n	800aed6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aecc:	4b0a      	ldr	r3, [pc, #40]	; (800aef8 <prvResetNextTaskUnblockTime+0x3c>)
 800aece:	f04f 32ff 	mov.w	r2, #4294967295
 800aed2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aed4:	e008      	b.n	800aee8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aed6:	4b07      	ldr	r3, [pc, #28]	; (800aef4 <prvResetNextTaskUnblockTime+0x38>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	68db      	ldr	r3, [r3, #12]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	4a04      	ldr	r2, [pc, #16]	; (800aef8 <prvResetNextTaskUnblockTime+0x3c>)
 800aee6:	6013      	str	r3, [r2, #0]
}
 800aee8:	bf00      	nop
 800aeea:	370c      	adds	r7, #12
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr
 800aef4:	200007bc 	.word	0x200007bc
 800aef8:	20000824 	.word	0x20000824

0800aefc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aefc:	b480      	push	{r7}
 800aefe:	b083      	sub	sp, #12
 800af00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800af02:	4b0b      	ldr	r3, [pc, #44]	; (800af30 <xTaskGetSchedulerState+0x34>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d102      	bne.n	800af10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800af0a:	2301      	movs	r3, #1
 800af0c:	607b      	str	r3, [r7, #4]
 800af0e:	e008      	b.n	800af22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af10:	4b08      	ldr	r3, [pc, #32]	; (800af34 <xTaskGetSchedulerState+0x38>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d102      	bne.n	800af1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800af18:	2302      	movs	r3, #2
 800af1a:	607b      	str	r3, [r7, #4]
 800af1c:	e001      	b.n	800af22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800af1e:	2300      	movs	r3, #0
 800af20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800af22:	687b      	ldr	r3, [r7, #4]
	}
 800af24:	4618      	mov	r0, r3
 800af26:	370c      	adds	r7, #12
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr
 800af30:	20000810 	.word	0x20000810
 800af34:	2000082c 	.word	0x2000082c

0800af38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b086      	sub	sp, #24
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800af44:	2300      	movs	r3, #0
 800af46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d06e      	beq.n	800b02c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800af4e:	4b3a      	ldr	r3, [pc, #232]	; (800b038 <xTaskPriorityDisinherit+0x100>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	693a      	ldr	r2, [r7, #16]
 800af54:	429a      	cmp	r2, r3
 800af56:	d00a      	beq.n	800af6e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800af58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af5c:	f383 8811 	msr	BASEPRI, r3
 800af60:	f3bf 8f6f 	isb	sy
 800af64:	f3bf 8f4f 	dsb	sy
 800af68:	60fb      	str	r3, [r7, #12]
}
 800af6a:	bf00      	nop
 800af6c:	e7fe      	b.n	800af6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af72:	2b00      	cmp	r3, #0
 800af74:	d10a      	bne.n	800af8c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800af76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7a:	f383 8811 	msr	BASEPRI, r3
 800af7e:	f3bf 8f6f 	isb	sy
 800af82:	f3bf 8f4f 	dsb	sy
 800af86:	60bb      	str	r3, [r7, #8]
}
 800af88:	bf00      	nop
 800af8a:	e7fe      	b.n	800af8a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af90:	1e5a      	subs	r2, r3, #1
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d044      	beq.n	800b02c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d140      	bne.n	800b02c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	3304      	adds	r3, #4
 800afae:	4618      	mov	r0, r3
 800afb0:	f7fe fc46 	bl	8009840 <uxListRemove>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d115      	bne.n	800afe6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afbe:	491f      	ldr	r1, [pc, #124]	; (800b03c <xTaskPriorityDisinherit+0x104>)
 800afc0:	4613      	mov	r3, r2
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	4413      	add	r3, r2
 800afc6:	009b      	lsls	r3, r3, #2
 800afc8:	440b      	add	r3, r1
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d10a      	bne.n	800afe6 <xTaskPriorityDisinherit+0xae>
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd4:	2201      	movs	r2, #1
 800afd6:	fa02 f303 	lsl.w	r3, r2, r3
 800afda:	43da      	mvns	r2, r3
 800afdc:	4b18      	ldr	r3, [pc, #96]	; (800b040 <xTaskPriorityDisinherit+0x108>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4013      	ands	r3, r2
 800afe2:	4a17      	ldr	r2, [pc, #92]	; (800b040 <xTaskPriorityDisinherit+0x108>)
 800afe4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff2:	f1c3 0207 	rsb	r2, r3, #7
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800affe:	2201      	movs	r2, #1
 800b000:	409a      	lsls	r2, r3
 800b002:	4b0f      	ldr	r3, [pc, #60]	; (800b040 <xTaskPriorityDisinherit+0x108>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4313      	orrs	r3, r2
 800b008:	4a0d      	ldr	r2, [pc, #52]	; (800b040 <xTaskPriorityDisinherit+0x108>)
 800b00a:	6013      	str	r3, [r2, #0]
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b010:	4613      	mov	r3, r2
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	4413      	add	r3, r2
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	4a08      	ldr	r2, [pc, #32]	; (800b03c <xTaskPriorityDisinherit+0x104>)
 800b01a:	441a      	add	r2, r3
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	3304      	adds	r3, #4
 800b020:	4619      	mov	r1, r3
 800b022:	4610      	mov	r0, r2
 800b024:	f7fe fbaf 	bl	8009786 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b028:	2301      	movs	r3, #1
 800b02a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b02c:	697b      	ldr	r3, [r7, #20]
	}
 800b02e:	4618      	mov	r0, r3
 800b030:	3718      	adds	r7, #24
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	20000704 	.word	0x20000704
 800b03c:	20000708 	.word	0x20000708
 800b040:	2000080c 	.word	0x2000080c

0800b044 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b084      	sub	sp, #16
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b04e:	4b29      	ldr	r3, [pc, #164]	; (800b0f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b054:	4b28      	ldr	r3, [pc, #160]	; (800b0f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	3304      	adds	r3, #4
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7fe fbf0 	bl	8009840 <uxListRemove>
 800b060:	4603      	mov	r3, r0
 800b062:	2b00      	cmp	r3, #0
 800b064:	d10b      	bne.n	800b07e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b066:	4b24      	ldr	r3, [pc, #144]	; (800b0f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b06c:	2201      	movs	r2, #1
 800b06e:	fa02 f303 	lsl.w	r3, r2, r3
 800b072:	43da      	mvns	r2, r3
 800b074:	4b21      	ldr	r3, [pc, #132]	; (800b0fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4013      	ands	r3, r2
 800b07a:	4a20      	ldr	r2, [pc, #128]	; (800b0fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800b07c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b084:	d10a      	bne.n	800b09c <prvAddCurrentTaskToDelayedList+0x58>
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d007      	beq.n	800b09c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b08c:	4b1a      	ldr	r3, [pc, #104]	; (800b0f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	3304      	adds	r3, #4
 800b092:	4619      	mov	r1, r3
 800b094:	481a      	ldr	r0, [pc, #104]	; (800b100 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b096:	f7fe fb76 	bl	8009786 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b09a:	e026      	b.n	800b0ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b09c:	68fa      	ldr	r2, [r7, #12]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	4413      	add	r3, r2
 800b0a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b0a4:	4b14      	ldr	r3, [pc, #80]	; (800b0f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	68ba      	ldr	r2, [r7, #8]
 800b0aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b0ac:	68ba      	ldr	r2, [r7, #8]
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d209      	bcs.n	800b0c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0b4:	4b13      	ldr	r3, [pc, #76]	; (800b104 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b0b6:	681a      	ldr	r2, [r3, #0]
 800b0b8:	4b0f      	ldr	r3, [pc, #60]	; (800b0f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	3304      	adds	r3, #4
 800b0be:	4619      	mov	r1, r3
 800b0c0:	4610      	mov	r0, r2
 800b0c2:	f7fe fb84 	bl	80097ce <vListInsert>
}
 800b0c6:	e010      	b.n	800b0ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0c8:	4b0f      	ldr	r3, [pc, #60]	; (800b108 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	4b0a      	ldr	r3, [pc, #40]	; (800b0f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	3304      	adds	r3, #4
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	4610      	mov	r0, r2
 800b0d6:	f7fe fb7a 	bl	80097ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b0da:	4b0c      	ldr	r3, [pc, #48]	; (800b10c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	68ba      	ldr	r2, [r7, #8]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d202      	bcs.n	800b0ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b0e4:	4a09      	ldr	r2, [pc, #36]	; (800b10c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	6013      	str	r3, [r2, #0]
}
 800b0ea:	bf00      	nop
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	20000808 	.word	0x20000808
 800b0f8:	20000704 	.word	0x20000704
 800b0fc:	2000080c 	.word	0x2000080c
 800b100:	200007f0 	.word	0x200007f0
 800b104:	200007c0 	.word	0x200007c0
 800b108:	200007bc 	.word	0x200007bc
 800b10c:	20000824 	.word	0x20000824

0800b110 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b110:	b480      	push	{r7}
 800b112:	b085      	sub	sp, #20
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	3b04      	subs	r3, #4
 800b120:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b128:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	3b04      	subs	r3, #4
 800b12e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	f023 0201 	bic.w	r2, r3, #1
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	3b04      	subs	r3, #4
 800b13e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b140:	4a0c      	ldr	r2, [pc, #48]	; (800b174 <pxPortInitialiseStack+0x64>)
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	3b14      	subs	r3, #20
 800b14a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	3b04      	subs	r3, #4
 800b156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f06f 0202 	mvn.w	r2, #2
 800b15e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	3b20      	subs	r3, #32
 800b164:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b166:	68fb      	ldr	r3, [r7, #12]
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3714      	adds	r7, #20
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr
 800b174:	0800b179 	.word	0x0800b179

0800b178 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b178:	b480      	push	{r7}
 800b17a:	b085      	sub	sp, #20
 800b17c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b17e:	2300      	movs	r3, #0
 800b180:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b182:	4b12      	ldr	r3, [pc, #72]	; (800b1cc <prvTaskExitError+0x54>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b18a:	d00a      	beq.n	800b1a2 <prvTaskExitError+0x2a>
	__asm volatile
 800b18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b190:	f383 8811 	msr	BASEPRI, r3
 800b194:	f3bf 8f6f 	isb	sy
 800b198:	f3bf 8f4f 	dsb	sy
 800b19c:	60fb      	str	r3, [r7, #12]
}
 800b19e:	bf00      	nop
 800b1a0:	e7fe      	b.n	800b1a0 <prvTaskExitError+0x28>
	__asm volatile
 800b1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a6:	f383 8811 	msr	BASEPRI, r3
 800b1aa:	f3bf 8f6f 	isb	sy
 800b1ae:	f3bf 8f4f 	dsb	sy
 800b1b2:	60bb      	str	r3, [r7, #8]
}
 800b1b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b1b6:	bf00      	nop
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d0fc      	beq.n	800b1b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b1be:	bf00      	nop
 800b1c0:	bf00      	nop
 800b1c2:	3714      	adds	r7, #20
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr
 800b1cc:	2000025c 	.word	0x2000025c

0800b1d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b1d0:	4b07      	ldr	r3, [pc, #28]	; (800b1f0 <pxCurrentTCBConst2>)
 800b1d2:	6819      	ldr	r1, [r3, #0]
 800b1d4:	6808      	ldr	r0, [r1, #0]
 800b1d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1da:	f380 8809 	msr	PSP, r0
 800b1de:	f3bf 8f6f 	isb	sy
 800b1e2:	f04f 0000 	mov.w	r0, #0
 800b1e6:	f380 8811 	msr	BASEPRI, r0
 800b1ea:	4770      	bx	lr
 800b1ec:	f3af 8000 	nop.w

0800b1f0 <pxCurrentTCBConst2>:
 800b1f0:	20000704 	.word	0x20000704
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b1f4:	bf00      	nop
 800b1f6:	bf00      	nop

0800b1f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b1f8:	4808      	ldr	r0, [pc, #32]	; (800b21c <prvPortStartFirstTask+0x24>)
 800b1fa:	6800      	ldr	r0, [r0, #0]
 800b1fc:	6800      	ldr	r0, [r0, #0]
 800b1fe:	f380 8808 	msr	MSP, r0
 800b202:	f04f 0000 	mov.w	r0, #0
 800b206:	f380 8814 	msr	CONTROL, r0
 800b20a:	b662      	cpsie	i
 800b20c:	b661      	cpsie	f
 800b20e:	f3bf 8f4f 	dsb	sy
 800b212:	f3bf 8f6f 	isb	sy
 800b216:	df00      	svc	0
 800b218:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b21a:	bf00      	nop
 800b21c:	e000ed08 	.word	0xe000ed08

0800b220 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b086      	sub	sp, #24
 800b224:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b226:	4b46      	ldr	r3, [pc, #280]	; (800b340 <xPortStartScheduler+0x120>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4a46      	ldr	r2, [pc, #280]	; (800b344 <xPortStartScheduler+0x124>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d10a      	bne.n	800b246 <xPortStartScheduler+0x26>
	__asm volatile
 800b230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b234:	f383 8811 	msr	BASEPRI, r3
 800b238:	f3bf 8f6f 	isb	sy
 800b23c:	f3bf 8f4f 	dsb	sy
 800b240:	613b      	str	r3, [r7, #16]
}
 800b242:	bf00      	nop
 800b244:	e7fe      	b.n	800b244 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b246:	4b3e      	ldr	r3, [pc, #248]	; (800b340 <xPortStartScheduler+0x120>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a3f      	ldr	r2, [pc, #252]	; (800b348 <xPortStartScheduler+0x128>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d10a      	bne.n	800b266 <xPortStartScheduler+0x46>
	__asm volatile
 800b250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b254:	f383 8811 	msr	BASEPRI, r3
 800b258:	f3bf 8f6f 	isb	sy
 800b25c:	f3bf 8f4f 	dsb	sy
 800b260:	60fb      	str	r3, [r7, #12]
}
 800b262:	bf00      	nop
 800b264:	e7fe      	b.n	800b264 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b266:	4b39      	ldr	r3, [pc, #228]	; (800b34c <xPortStartScheduler+0x12c>)
 800b268:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	22ff      	movs	r2, #255	; 0xff
 800b276:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b280:	78fb      	ldrb	r3, [r7, #3]
 800b282:	b2db      	uxtb	r3, r3
 800b284:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b288:	b2da      	uxtb	r2, r3
 800b28a:	4b31      	ldr	r3, [pc, #196]	; (800b350 <xPortStartScheduler+0x130>)
 800b28c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b28e:	4b31      	ldr	r3, [pc, #196]	; (800b354 <xPortStartScheduler+0x134>)
 800b290:	2207      	movs	r2, #7
 800b292:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b294:	e009      	b.n	800b2aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b296:	4b2f      	ldr	r3, [pc, #188]	; (800b354 <xPortStartScheduler+0x134>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	3b01      	subs	r3, #1
 800b29c:	4a2d      	ldr	r2, [pc, #180]	; (800b354 <xPortStartScheduler+0x134>)
 800b29e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b2a0:	78fb      	ldrb	r3, [r7, #3]
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	005b      	lsls	r3, r3, #1
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2aa:	78fb      	ldrb	r3, [r7, #3]
 800b2ac:	b2db      	uxtb	r3, r3
 800b2ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2b2:	2b80      	cmp	r3, #128	; 0x80
 800b2b4:	d0ef      	beq.n	800b296 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b2b6:	4b27      	ldr	r3, [pc, #156]	; (800b354 <xPortStartScheduler+0x134>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f1c3 0307 	rsb	r3, r3, #7
 800b2be:	2b04      	cmp	r3, #4
 800b2c0:	d00a      	beq.n	800b2d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c6:	f383 8811 	msr	BASEPRI, r3
 800b2ca:	f3bf 8f6f 	isb	sy
 800b2ce:	f3bf 8f4f 	dsb	sy
 800b2d2:	60bb      	str	r3, [r7, #8]
}
 800b2d4:	bf00      	nop
 800b2d6:	e7fe      	b.n	800b2d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b2d8:	4b1e      	ldr	r3, [pc, #120]	; (800b354 <xPortStartScheduler+0x134>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	021b      	lsls	r3, r3, #8
 800b2de:	4a1d      	ldr	r2, [pc, #116]	; (800b354 <xPortStartScheduler+0x134>)
 800b2e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b2e2:	4b1c      	ldr	r3, [pc, #112]	; (800b354 <xPortStartScheduler+0x134>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b2ea:	4a1a      	ldr	r2, [pc, #104]	; (800b354 <xPortStartScheduler+0x134>)
 800b2ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	b2da      	uxtb	r2, r3
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b2f6:	4b18      	ldr	r3, [pc, #96]	; (800b358 <xPortStartScheduler+0x138>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a17      	ldr	r2, [pc, #92]	; (800b358 <xPortStartScheduler+0x138>)
 800b2fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b300:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b302:	4b15      	ldr	r3, [pc, #84]	; (800b358 <xPortStartScheduler+0x138>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4a14      	ldr	r2, [pc, #80]	; (800b358 <xPortStartScheduler+0x138>)
 800b308:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b30c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b30e:	f000 f8dd 	bl	800b4cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b312:	4b12      	ldr	r3, [pc, #72]	; (800b35c <xPortStartScheduler+0x13c>)
 800b314:	2200      	movs	r2, #0
 800b316:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b318:	f000 f8fc 	bl	800b514 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b31c:	4b10      	ldr	r3, [pc, #64]	; (800b360 <xPortStartScheduler+0x140>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4a0f      	ldr	r2, [pc, #60]	; (800b360 <xPortStartScheduler+0x140>)
 800b322:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b326:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b328:	f7ff ff66 	bl	800b1f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b32c:	f7ff fba0 	bl	800aa70 <vTaskSwitchContext>
	prvTaskExitError();
 800b330:	f7ff ff22 	bl	800b178 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b334:	2300      	movs	r3, #0
}
 800b336:	4618      	mov	r0, r3
 800b338:	3718      	adds	r7, #24
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	e000ed00 	.word	0xe000ed00
 800b344:	410fc271 	.word	0x410fc271
 800b348:	410fc270 	.word	0x410fc270
 800b34c:	e000e400 	.word	0xe000e400
 800b350:	20000830 	.word	0x20000830
 800b354:	20000834 	.word	0x20000834
 800b358:	e000ed20 	.word	0xe000ed20
 800b35c:	2000025c 	.word	0x2000025c
 800b360:	e000ef34 	.word	0xe000ef34

0800b364 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
	__asm volatile
 800b36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36e:	f383 8811 	msr	BASEPRI, r3
 800b372:	f3bf 8f6f 	isb	sy
 800b376:	f3bf 8f4f 	dsb	sy
 800b37a:	607b      	str	r3, [r7, #4]
}
 800b37c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b37e:	4b0f      	ldr	r3, [pc, #60]	; (800b3bc <vPortEnterCritical+0x58>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	3301      	adds	r3, #1
 800b384:	4a0d      	ldr	r2, [pc, #52]	; (800b3bc <vPortEnterCritical+0x58>)
 800b386:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b388:	4b0c      	ldr	r3, [pc, #48]	; (800b3bc <vPortEnterCritical+0x58>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d10f      	bne.n	800b3b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b390:	4b0b      	ldr	r3, [pc, #44]	; (800b3c0 <vPortEnterCritical+0x5c>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	b2db      	uxtb	r3, r3
 800b396:	2b00      	cmp	r3, #0
 800b398:	d00a      	beq.n	800b3b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39e:	f383 8811 	msr	BASEPRI, r3
 800b3a2:	f3bf 8f6f 	isb	sy
 800b3a6:	f3bf 8f4f 	dsb	sy
 800b3aa:	603b      	str	r3, [r7, #0]
}
 800b3ac:	bf00      	nop
 800b3ae:	e7fe      	b.n	800b3ae <vPortEnterCritical+0x4a>
	}
}
 800b3b0:	bf00      	nop
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr
 800b3bc:	2000025c 	.word	0x2000025c
 800b3c0:	e000ed04 	.word	0xe000ed04

0800b3c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b3ca:	4b12      	ldr	r3, [pc, #72]	; (800b414 <vPortExitCritical+0x50>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d10a      	bne.n	800b3e8 <vPortExitCritical+0x24>
	__asm volatile
 800b3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d6:	f383 8811 	msr	BASEPRI, r3
 800b3da:	f3bf 8f6f 	isb	sy
 800b3de:	f3bf 8f4f 	dsb	sy
 800b3e2:	607b      	str	r3, [r7, #4]
}
 800b3e4:	bf00      	nop
 800b3e6:	e7fe      	b.n	800b3e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b3e8:	4b0a      	ldr	r3, [pc, #40]	; (800b414 <vPortExitCritical+0x50>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	3b01      	subs	r3, #1
 800b3ee:	4a09      	ldr	r2, [pc, #36]	; (800b414 <vPortExitCritical+0x50>)
 800b3f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b3f2:	4b08      	ldr	r3, [pc, #32]	; (800b414 <vPortExitCritical+0x50>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d105      	bne.n	800b406 <vPortExitCritical+0x42>
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	f383 8811 	msr	BASEPRI, r3
}
 800b404:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b406:	bf00      	nop
 800b408:	370c      	adds	r7, #12
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr
 800b412:	bf00      	nop
 800b414:	2000025c 	.word	0x2000025c
	...

0800b420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b420:	f3ef 8009 	mrs	r0, PSP
 800b424:	f3bf 8f6f 	isb	sy
 800b428:	4b15      	ldr	r3, [pc, #84]	; (800b480 <pxCurrentTCBConst>)
 800b42a:	681a      	ldr	r2, [r3, #0]
 800b42c:	f01e 0f10 	tst.w	lr, #16
 800b430:	bf08      	it	eq
 800b432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b43a:	6010      	str	r0, [r2, #0]
 800b43c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b440:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b444:	f380 8811 	msr	BASEPRI, r0
 800b448:	f3bf 8f4f 	dsb	sy
 800b44c:	f3bf 8f6f 	isb	sy
 800b450:	f7ff fb0e 	bl	800aa70 <vTaskSwitchContext>
 800b454:	f04f 0000 	mov.w	r0, #0
 800b458:	f380 8811 	msr	BASEPRI, r0
 800b45c:	bc09      	pop	{r0, r3}
 800b45e:	6819      	ldr	r1, [r3, #0]
 800b460:	6808      	ldr	r0, [r1, #0]
 800b462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b466:	f01e 0f10 	tst.w	lr, #16
 800b46a:	bf08      	it	eq
 800b46c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b470:	f380 8809 	msr	PSP, r0
 800b474:	f3bf 8f6f 	isb	sy
 800b478:	4770      	bx	lr
 800b47a:	bf00      	nop
 800b47c:	f3af 8000 	nop.w

0800b480 <pxCurrentTCBConst>:
 800b480:	20000704 	.word	0x20000704
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b484:	bf00      	nop
 800b486:	bf00      	nop

0800b488 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
	__asm volatile
 800b48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b492:	f383 8811 	msr	BASEPRI, r3
 800b496:	f3bf 8f6f 	isb	sy
 800b49a:	f3bf 8f4f 	dsb	sy
 800b49e:	607b      	str	r3, [r7, #4]
}
 800b4a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b4a2:	f7ff fa2d 	bl	800a900 <xTaskIncrementTick>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d003      	beq.n	800b4b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b4ac:	4b06      	ldr	r3, [pc, #24]	; (800b4c8 <SysTick_Handler+0x40>)
 800b4ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4b2:	601a      	str	r2, [r3, #0]
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	f383 8811 	msr	BASEPRI, r3
}
 800b4be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b4c0:	bf00      	nop
 800b4c2:	3708      	adds	r7, #8
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	e000ed04 	.word	0xe000ed04

0800b4cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b4d0:	4b0b      	ldr	r3, [pc, #44]	; (800b500 <vPortSetupTimerInterrupt+0x34>)
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b4d6:	4b0b      	ldr	r3, [pc, #44]	; (800b504 <vPortSetupTimerInterrupt+0x38>)
 800b4d8:	2200      	movs	r2, #0
 800b4da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b4dc:	4b0a      	ldr	r3, [pc, #40]	; (800b508 <vPortSetupTimerInterrupt+0x3c>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a0a      	ldr	r2, [pc, #40]	; (800b50c <vPortSetupTimerInterrupt+0x40>)
 800b4e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b4e6:	099b      	lsrs	r3, r3, #6
 800b4e8:	4a09      	ldr	r2, [pc, #36]	; (800b510 <vPortSetupTimerInterrupt+0x44>)
 800b4ea:	3b01      	subs	r3, #1
 800b4ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b4ee:	4b04      	ldr	r3, [pc, #16]	; (800b500 <vPortSetupTimerInterrupt+0x34>)
 800b4f0:	2207      	movs	r2, #7
 800b4f2:	601a      	str	r2, [r3, #0]
}
 800b4f4:	bf00      	nop
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop
 800b500:	e000e010 	.word	0xe000e010
 800b504:	e000e018 	.word	0xe000e018
 800b508:	20000230 	.word	0x20000230
 800b50c:	10624dd3 	.word	0x10624dd3
 800b510:	e000e014 	.word	0xe000e014

0800b514 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b514:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b524 <vPortEnableVFP+0x10>
 800b518:	6801      	ldr	r1, [r0, #0]
 800b51a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b51e:	6001      	str	r1, [r0, #0]
 800b520:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b522:	bf00      	nop
 800b524:	e000ed88 	.word	0xe000ed88

0800b528 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b528:	b480      	push	{r7}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b52e:	f3ef 8305 	mrs	r3, IPSR
 800b532:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2b0f      	cmp	r3, #15
 800b538:	d914      	bls.n	800b564 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b53a:	4a17      	ldr	r2, [pc, #92]	; (800b598 <vPortValidateInterruptPriority+0x70>)
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	4413      	add	r3, r2
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b544:	4b15      	ldr	r3, [pc, #84]	; (800b59c <vPortValidateInterruptPriority+0x74>)
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	7afa      	ldrb	r2, [r7, #11]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d20a      	bcs.n	800b564 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b552:	f383 8811 	msr	BASEPRI, r3
 800b556:	f3bf 8f6f 	isb	sy
 800b55a:	f3bf 8f4f 	dsb	sy
 800b55e:	607b      	str	r3, [r7, #4]
}
 800b560:	bf00      	nop
 800b562:	e7fe      	b.n	800b562 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b564:	4b0e      	ldr	r3, [pc, #56]	; (800b5a0 <vPortValidateInterruptPriority+0x78>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b56c:	4b0d      	ldr	r3, [pc, #52]	; (800b5a4 <vPortValidateInterruptPriority+0x7c>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	429a      	cmp	r2, r3
 800b572:	d90a      	bls.n	800b58a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b578:	f383 8811 	msr	BASEPRI, r3
 800b57c:	f3bf 8f6f 	isb	sy
 800b580:	f3bf 8f4f 	dsb	sy
 800b584:	603b      	str	r3, [r7, #0]
}
 800b586:	bf00      	nop
 800b588:	e7fe      	b.n	800b588 <vPortValidateInterruptPriority+0x60>
	}
 800b58a:	bf00      	nop
 800b58c:	3714      	adds	r7, #20
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr
 800b596:	bf00      	nop
 800b598:	e000e3f0 	.word	0xe000e3f0
 800b59c:	20000830 	.word	0x20000830
 800b5a0:	e000ed0c 	.word	0xe000ed0c
 800b5a4:	20000834 	.word	0x20000834

0800b5a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b08a      	sub	sp, #40	; 0x28
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b5b4:	f7ff f8fa 	bl	800a7ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b5b8:	4b5b      	ldr	r3, [pc, #364]	; (800b728 <pvPortMalloc+0x180>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d101      	bne.n	800b5c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b5c0:	f000 f920 	bl	800b804 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b5c4:	4b59      	ldr	r3, [pc, #356]	; (800b72c <pvPortMalloc+0x184>)
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	4013      	ands	r3, r2
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	f040 8093 	bne.w	800b6f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d01d      	beq.n	800b614 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b5d8:	2208      	movs	r2, #8
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	4413      	add	r3, r2
 800b5de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f003 0307 	and.w	r3, r3, #7
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d014      	beq.n	800b614 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f023 0307 	bic.w	r3, r3, #7
 800b5f0:	3308      	adds	r3, #8
 800b5f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f003 0307 	and.w	r3, r3, #7
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d00a      	beq.n	800b614 <pvPortMalloc+0x6c>
	__asm volatile
 800b5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b602:	f383 8811 	msr	BASEPRI, r3
 800b606:	f3bf 8f6f 	isb	sy
 800b60a:	f3bf 8f4f 	dsb	sy
 800b60e:	617b      	str	r3, [r7, #20]
}
 800b610:	bf00      	nop
 800b612:	e7fe      	b.n	800b612 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d06e      	beq.n	800b6f8 <pvPortMalloc+0x150>
 800b61a:	4b45      	ldr	r3, [pc, #276]	; (800b730 <pvPortMalloc+0x188>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	687a      	ldr	r2, [r7, #4]
 800b620:	429a      	cmp	r2, r3
 800b622:	d869      	bhi.n	800b6f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b624:	4b43      	ldr	r3, [pc, #268]	; (800b734 <pvPortMalloc+0x18c>)
 800b626:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b628:	4b42      	ldr	r3, [pc, #264]	; (800b734 <pvPortMalloc+0x18c>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b62e:	e004      	b.n	800b63a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b632:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	429a      	cmp	r2, r3
 800b642:	d903      	bls.n	800b64c <pvPortMalloc+0xa4>
 800b644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d1f1      	bne.n	800b630 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b64c:	4b36      	ldr	r3, [pc, #216]	; (800b728 <pvPortMalloc+0x180>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b652:	429a      	cmp	r2, r3
 800b654:	d050      	beq.n	800b6f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b656:	6a3b      	ldr	r3, [r7, #32]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	2208      	movs	r2, #8
 800b65c:	4413      	add	r3, r2
 800b65e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b662:	681a      	ldr	r2, [r3, #0]
 800b664:	6a3b      	ldr	r3, [r7, #32]
 800b666:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66a:	685a      	ldr	r2, [r3, #4]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	1ad2      	subs	r2, r2, r3
 800b670:	2308      	movs	r3, #8
 800b672:	005b      	lsls	r3, r3, #1
 800b674:	429a      	cmp	r2, r3
 800b676:	d91f      	bls.n	800b6b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	4413      	add	r3, r2
 800b67e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b680:	69bb      	ldr	r3, [r7, #24]
 800b682:	f003 0307 	and.w	r3, r3, #7
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00a      	beq.n	800b6a0 <pvPortMalloc+0xf8>
	__asm volatile
 800b68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68e:	f383 8811 	msr	BASEPRI, r3
 800b692:	f3bf 8f6f 	isb	sy
 800b696:	f3bf 8f4f 	dsb	sy
 800b69a:	613b      	str	r3, [r7, #16]
}
 800b69c:	bf00      	nop
 800b69e:	e7fe      	b.n	800b69e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a2:	685a      	ldr	r2, [r3, #4]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	1ad2      	subs	r2, r2, r3
 800b6a8:	69bb      	ldr	r3, [r7, #24]
 800b6aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b6b2:	69b8      	ldr	r0, [r7, #24]
 800b6b4:	f000 f908 	bl	800b8c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b6b8:	4b1d      	ldr	r3, [pc, #116]	; (800b730 <pvPortMalloc+0x188>)
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	1ad3      	subs	r3, r2, r3
 800b6c2:	4a1b      	ldr	r2, [pc, #108]	; (800b730 <pvPortMalloc+0x188>)
 800b6c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b6c6:	4b1a      	ldr	r3, [pc, #104]	; (800b730 <pvPortMalloc+0x188>)
 800b6c8:	681a      	ldr	r2, [r3, #0]
 800b6ca:	4b1b      	ldr	r3, [pc, #108]	; (800b738 <pvPortMalloc+0x190>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	d203      	bcs.n	800b6da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b6d2:	4b17      	ldr	r3, [pc, #92]	; (800b730 <pvPortMalloc+0x188>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4a18      	ldr	r2, [pc, #96]	; (800b738 <pvPortMalloc+0x190>)
 800b6d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6dc:	685a      	ldr	r2, [r3, #4]
 800b6de:	4b13      	ldr	r3, [pc, #76]	; (800b72c <pvPortMalloc+0x184>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	431a      	orrs	r2, r3
 800b6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b6ee:	4b13      	ldr	r3, [pc, #76]	; (800b73c <pvPortMalloc+0x194>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	4a11      	ldr	r2, [pc, #68]	; (800b73c <pvPortMalloc+0x194>)
 800b6f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b6f8:	f7ff f866 	bl	800a7c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6fc:	69fb      	ldr	r3, [r7, #28]
 800b6fe:	f003 0307 	and.w	r3, r3, #7
 800b702:	2b00      	cmp	r3, #0
 800b704:	d00a      	beq.n	800b71c <pvPortMalloc+0x174>
	__asm volatile
 800b706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70a:	f383 8811 	msr	BASEPRI, r3
 800b70e:	f3bf 8f6f 	isb	sy
 800b712:	f3bf 8f4f 	dsb	sy
 800b716:	60fb      	str	r3, [r7, #12]
}
 800b718:	bf00      	nop
 800b71a:	e7fe      	b.n	800b71a <pvPortMalloc+0x172>
	return pvReturn;
 800b71c:	69fb      	ldr	r3, [r7, #28]
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3728      	adds	r7, #40	; 0x28
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	20004440 	.word	0x20004440
 800b72c:	20004454 	.word	0x20004454
 800b730:	20004444 	.word	0x20004444
 800b734:	20004438 	.word	0x20004438
 800b738:	20004448 	.word	0x20004448
 800b73c:	2000444c 	.word	0x2000444c

0800b740 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b086      	sub	sp, #24
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d04d      	beq.n	800b7ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b752:	2308      	movs	r3, #8
 800b754:	425b      	negs	r3, r3
 800b756:	697a      	ldr	r2, [r7, #20]
 800b758:	4413      	add	r3, r2
 800b75a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	685a      	ldr	r2, [r3, #4]
 800b764:	4b24      	ldr	r3, [pc, #144]	; (800b7f8 <vPortFree+0xb8>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	4013      	ands	r3, r2
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d10a      	bne.n	800b784 <vPortFree+0x44>
	__asm volatile
 800b76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b772:	f383 8811 	msr	BASEPRI, r3
 800b776:	f3bf 8f6f 	isb	sy
 800b77a:	f3bf 8f4f 	dsb	sy
 800b77e:	60fb      	str	r3, [r7, #12]
}
 800b780:	bf00      	nop
 800b782:	e7fe      	b.n	800b782 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d00a      	beq.n	800b7a2 <vPortFree+0x62>
	__asm volatile
 800b78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b790:	f383 8811 	msr	BASEPRI, r3
 800b794:	f3bf 8f6f 	isb	sy
 800b798:	f3bf 8f4f 	dsb	sy
 800b79c:	60bb      	str	r3, [r7, #8]
}
 800b79e:	bf00      	nop
 800b7a0:	e7fe      	b.n	800b7a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	685a      	ldr	r2, [r3, #4]
 800b7a6:	4b14      	ldr	r3, [pc, #80]	; (800b7f8 <vPortFree+0xb8>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4013      	ands	r3, r2
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d01e      	beq.n	800b7ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d11a      	bne.n	800b7ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	685a      	ldr	r2, [r3, #4]
 800b7bc:	4b0e      	ldr	r3, [pc, #56]	; (800b7f8 <vPortFree+0xb8>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	43db      	mvns	r3, r3
 800b7c2:	401a      	ands	r2, r3
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b7c8:	f7fe fff0 	bl	800a7ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	685a      	ldr	r2, [r3, #4]
 800b7d0:	4b0a      	ldr	r3, [pc, #40]	; (800b7fc <vPortFree+0xbc>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4413      	add	r3, r2
 800b7d6:	4a09      	ldr	r2, [pc, #36]	; (800b7fc <vPortFree+0xbc>)
 800b7d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b7da:	6938      	ldr	r0, [r7, #16]
 800b7dc:	f000 f874 	bl	800b8c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b7e0:	4b07      	ldr	r3, [pc, #28]	; (800b800 <vPortFree+0xc0>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	4a06      	ldr	r2, [pc, #24]	; (800b800 <vPortFree+0xc0>)
 800b7e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b7ea:	f7fe ffed 	bl	800a7c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b7ee:	bf00      	nop
 800b7f0:	3718      	adds	r7, #24
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	20004454 	.word	0x20004454
 800b7fc:	20004444 	.word	0x20004444
 800b800:	20004450 	.word	0x20004450

0800b804 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b804:	b480      	push	{r7}
 800b806:	b085      	sub	sp, #20
 800b808:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b80a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b80e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b810:	4b27      	ldr	r3, [pc, #156]	; (800b8b0 <prvHeapInit+0xac>)
 800b812:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f003 0307 	and.w	r3, r3, #7
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d00c      	beq.n	800b838 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	3307      	adds	r3, #7
 800b822:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f023 0307 	bic.w	r3, r3, #7
 800b82a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b82c:	68ba      	ldr	r2, [r7, #8]
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	1ad3      	subs	r3, r2, r3
 800b832:	4a1f      	ldr	r2, [pc, #124]	; (800b8b0 <prvHeapInit+0xac>)
 800b834:	4413      	add	r3, r2
 800b836:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b83c:	4a1d      	ldr	r2, [pc, #116]	; (800b8b4 <prvHeapInit+0xb0>)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b842:	4b1c      	ldr	r3, [pc, #112]	; (800b8b4 <prvHeapInit+0xb0>)
 800b844:	2200      	movs	r2, #0
 800b846:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	68ba      	ldr	r2, [r7, #8]
 800b84c:	4413      	add	r3, r2
 800b84e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b850:	2208      	movs	r2, #8
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	1a9b      	subs	r3, r3, r2
 800b856:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f023 0307 	bic.w	r3, r3, #7
 800b85e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	4a15      	ldr	r2, [pc, #84]	; (800b8b8 <prvHeapInit+0xb4>)
 800b864:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b866:	4b14      	ldr	r3, [pc, #80]	; (800b8b8 <prvHeapInit+0xb4>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	2200      	movs	r2, #0
 800b86c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b86e:	4b12      	ldr	r3, [pc, #72]	; (800b8b8 <prvHeapInit+0xb4>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	2200      	movs	r2, #0
 800b874:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	68fa      	ldr	r2, [r7, #12]
 800b87e:	1ad2      	subs	r2, r2, r3
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b884:	4b0c      	ldr	r3, [pc, #48]	; (800b8b8 <prvHeapInit+0xb4>)
 800b886:	681a      	ldr	r2, [r3, #0]
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	4a0a      	ldr	r2, [pc, #40]	; (800b8bc <prvHeapInit+0xb8>)
 800b892:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	4a09      	ldr	r2, [pc, #36]	; (800b8c0 <prvHeapInit+0xbc>)
 800b89a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b89c:	4b09      	ldr	r3, [pc, #36]	; (800b8c4 <prvHeapInit+0xc0>)
 800b89e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b8a2:	601a      	str	r2, [r3, #0]
}
 800b8a4:	bf00      	nop
 800b8a6:	3714      	adds	r7, #20
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr
 800b8b0:	20000838 	.word	0x20000838
 800b8b4:	20004438 	.word	0x20004438
 800b8b8:	20004440 	.word	0x20004440
 800b8bc:	20004448 	.word	0x20004448
 800b8c0:	20004444 	.word	0x20004444
 800b8c4:	20004454 	.word	0x20004454

0800b8c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b8d0:	4b28      	ldr	r3, [pc, #160]	; (800b974 <prvInsertBlockIntoFreeList+0xac>)
 800b8d2:	60fb      	str	r3, [r7, #12]
 800b8d4:	e002      	b.n	800b8dc <prvInsertBlockIntoFreeList+0x14>
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	60fb      	str	r3, [r7, #12]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d8f7      	bhi.n	800b8d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	68ba      	ldr	r2, [r7, #8]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d108      	bne.n	800b90a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	685a      	ldr	r2, [r3, #4]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	441a      	add	r2, r3
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	68ba      	ldr	r2, [r7, #8]
 800b914:	441a      	add	r2, r3
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d118      	bne.n	800b950 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681a      	ldr	r2, [r3, #0]
 800b922:	4b15      	ldr	r3, [pc, #84]	; (800b978 <prvInsertBlockIntoFreeList+0xb0>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	429a      	cmp	r2, r3
 800b928:	d00d      	beq.n	800b946 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	685a      	ldr	r2, [r3, #4]
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	441a      	add	r2, r3
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	681a      	ldr	r2, [r3, #0]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	601a      	str	r2, [r3, #0]
 800b944:	e008      	b.n	800b958 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b946:	4b0c      	ldr	r3, [pc, #48]	; (800b978 <prvInsertBlockIntoFreeList+0xb0>)
 800b948:	681a      	ldr	r2, [r3, #0]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	601a      	str	r2, [r3, #0]
 800b94e:	e003      	b.n	800b958 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b958:	68fa      	ldr	r2, [r7, #12]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d002      	beq.n	800b966 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	687a      	ldr	r2, [r7, #4]
 800b964:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b966:	bf00      	nop
 800b968:	3714      	adds	r7, #20
 800b96a:	46bd      	mov	sp, r7
 800b96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b970:	4770      	bx	lr
 800b972:	bf00      	nop
 800b974:	20004438 	.word	0x20004438
 800b978:	20004440 	.word	0x20004440

0800b97c <receive_function>:
}

void stop_function(){
  USBH_CDC_Stop(&hUsbHostFS);
}
void receive_function(){
 800b97c:	b580      	push	{r7, lr}
 800b97e:	af00      	add	r7, sp, #0
  USBH_CDC_Stop(&hUsbHostFS);
 800b980:	4805      	ldr	r0, [pc, #20]	; (800b998 <receive_function+0x1c>)
 800b982:	f7fb fd12 	bl	80073aa <USBH_CDC_Stop>
  USBH_CDC_Receive(&hUsbHostFS,usb_rx_buff,USB_RX_BUFF_SIZE);
 800b986:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800b98a:	4904      	ldr	r1, [pc, #16]	; (800b99c <receive_function+0x20>)
 800b98c:	4802      	ldr	r0, [pc, #8]	; (800b998 <receive_function+0x1c>)
 800b98e:	f7fb fd9c 	bl	80074ca <USBH_CDC_Receive>
}
 800b992:	bf00      	nop
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	20005400 	.word	0x20005400
 800b99c:	20004460 	.word	0x20004460

0800b9a0 <set_line_coding>:
uint32_t read_bytes(USBH_HandleTypeDef *phost){
	return USBH_CDC_GetLastReceivedDataSize(phost);
}

void set_line_coding(){
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	af00      	add	r7, sp, #0
	FrameFormat.b.dwDTERate = 1250000;
 800b9a4:	4b08      	ldr	r3, [pc, #32]	; (800b9c8 <set_line_coding+0x28>)
 800b9a6:	4a09      	ldr	r2, [pc, #36]	; (800b9cc <set_line_coding+0x2c>)
 800b9a8:	601a      	str	r2, [r3, #0]
	FrameFormat.b.bCharFormat = 0;
 800b9aa:	4b07      	ldr	r3, [pc, #28]	; (800b9c8 <set_line_coding+0x28>)
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	711a      	strb	r2, [r3, #4]
	FrameFormat.b.bDataBits = 8;
 800b9b0:	4b05      	ldr	r3, [pc, #20]	; (800b9c8 <set_line_coding+0x28>)
 800b9b2:	2208      	movs	r2, #8
 800b9b4:	719a      	strb	r2, [r3, #6]
	FrameFormat.b.bParityType = 0;
 800b9b6:	4b04      	ldr	r3, [pc, #16]	; (800b9c8 <set_line_coding+0x28>)
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	715a      	strb	r2, [r3, #5]

	USBH_CDC_SetLineCoding(&hUsbHostFS, &FrameFormat);
 800b9bc:	4902      	ldr	r1, [pc, #8]	; (800b9c8 <set_line_coding+0x28>)
 800b9be:	4804      	ldr	r0, [pc, #16]	; (800b9d0 <set_line_coding+0x30>)
 800b9c0:	f7fb fd5a 	bl	8007478 <USBH_CDC_SetLineCoding>
}
 800b9c4:	bf00      	nop
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	20004458 	.word	0x20004458
 800b9cc:	001312d0 	.word	0x001312d0
 800b9d0:	20005400 	.word	0x20005400

0800b9d4 <USBH_CDC_TransmitCallback>:
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */

void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  receive_function();
 800b9dc:	f7ff ffce 	bl	800b97c <receive_function>
}
 800b9e0:	bf00      	nop
 800b9e2:	3708      	adds	r7, #8
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <USBH_CDC_ReceiveCallback>:


void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b083      	sub	sp, #12
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
}
 800b9f0:	bf00      	nop
 800b9f2:	370c      	adds	r7, #12
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr

0800b9fc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	af00      	add	r7, sp, #0


  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ba00:	2201      	movs	r2, #1
 800ba02:	490e      	ldr	r1, [pc, #56]	; (800ba3c <MX_USB_HOST_Init+0x40>)
 800ba04:	480e      	ldr	r0, [pc, #56]	; (800ba40 <MX_USB_HOST_Init+0x44>)
 800ba06:	f7fb fe9f 	bl	8007748 <USBH_Init>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d001      	beq.n	800ba14 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ba10:	f7f5 fa66 	bl	8000ee0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ba14:	490b      	ldr	r1, [pc, #44]	; (800ba44 <MX_USB_HOST_Init+0x48>)
 800ba16:	480a      	ldr	r0, [pc, #40]	; (800ba40 <MX_USB_HOST_Init+0x44>)
 800ba18:	f7fb ff4c 	bl	80078b4 <USBH_RegisterClass>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d001      	beq.n	800ba26 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ba22:	f7f5 fa5d 	bl	8000ee0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ba26:	4806      	ldr	r0, [pc, #24]	; (800ba40 <MX_USB_HOST_Init+0x44>)
 800ba28:	f7fb ffd0 	bl	80079cc <USBH_Start>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d001      	beq.n	800ba36 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ba32:	f7f5 fa55 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ba36:	bf00      	nop
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop
 800ba3c:	0800ba49 	.word	0x0800ba49
 800ba40:	20005400 	.word	0x20005400
 800ba44:	2000023c 	.word	0x2000023c

0800ba48 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b082      	sub	sp, #8
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	460b      	mov	r3, r1
 800ba52:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ba54:	78fb      	ldrb	r3, [r7, #3]
 800ba56:	3b01      	subs	r3, #1
 800ba58:	2b04      	cmp	r3, #4
 800ba5a:	d82e      	bhi.n	800baba <USBH_UserProcess+0x72>
 800ba5c:	a201      	add	r2, pc, #4	; (adr r2, 800ba64 <USBH_UserProcess+0x1c>)
 800ba5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba62:	bf00      	nop
 800ba64:	0800babb 	.word	0x0800babb
 800ba68:	0800ba8f 	.word	0x0800ba8f
 800ba6c:	0800babb 	.word	0x0800babb
 800ba70:	0800baa5 	.word	0x0800baa5
 800ba74:	0800ba79 	.word	0x0800ba79
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ba78:	4b12      	ldr	r3, [pc, #72]	; (800bac4 <USBH_UserProcess+0x7c>)
 800ba7a:	2203      	movs	r2, #3
 800ba7c:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_DISCONNECT, 0);
 800ba7e:	4b12      	ldr	r3, [pc, #72]	; (800bac8 <USBH_UserProcess+0x80>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	2200      	movs	r2, #0
 800ba84:	2103      	movs	r1, #3
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7fd fd9c 	bl	80095c4 <osMessagePut>
  break;
 800ba8c:	e016      	b.n	800babc <USBH_UserProcess+0x74>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ba8e:	4b0d      	ldr	r3, [pc, #52]	; (800bac4 <USBH_UserProcess+0x7c>)
 800ba90:	2202      	movs	r2, #2
 800ba92:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_READY, 0);
 800ba94:	4b0c      	ldr	r3, [pc, #48]	; (800bac8 <USBH_UserProcess+0x80>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	2102      	movs	r1, #2
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f7fd fd91 	bl	80095c4 <osMessagePut>
  break;
 800baa2:	e00b      	b.n	800babc <USBH_UserProcess+0x74>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800baa4:	4b07      	ldr	r3, [pc, #28]	; (800bac4 <USBH_UserProcess+0x7c>)
 800baa6:	2201      	movs	r2, #1
 800baa8:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_START, 0);
 800baaa:	4b07      	ldr	r3, [pc, #28]	; (800bac8 <USBH_UserProcess+0x80>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2200      	movs	r2, #0
 800bab0:	2101      	movs	r1, #1
 800bab2:	4618      	mov	r0, r3
 800bab4:	f7fd fd86 	bl	80095c4 <osMessagePut>
  break;
 800bab8:	e000      	b.n	800babc <USBH_UserProcess+0x74>

  default:
  break;
 800baba:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800babc:	bf00      	nop
 800babe:	3708      	adds	r7, #8
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	200057e4 	.word	0x200057e4
 800bac8:	20000688 	.word	0x20000688

0800bacc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b08a      	sub	sp, #40	; 0x28
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bad4:	f107 0314 	add.w	r3, r7, #20
 800bad8:	2200      	movs	r2, #0
 800bada:	601a      	str	r2, [r3, #0]
 800badc:	605a      	str	r2, [r3, #4]
 800bade:	609a      	str	r2, [r3, #8]
 800bae0:	60da      	str	r2, [r3, #12]
 800bae2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800baec:	d13a      	bne.n	800bb64 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800baee:	2300      	movs	r3, #0
 800baf0:	613b      	str	r3, [r7, #16]
 800baf2:	4b1e      	ldr	r3, [pc, #120]	; (800bb6c <HAL_HCD_MspInit+0xa0>)
 800baf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baf6:	4a1d      	ldr	r2, [pc, #116]	; (800bb6c <HAL_HCD_MspInit+0xa0>)
 800baf8:	f043 0301 	orr.w	r3, r3, #1
 800bafc:	6313      	str	r3, [r2, #48]	; 0x30
 800bafe:	4b1b      	ldr	r3, [pc, #108]	; (800bb6c <HAL_HCD_MspInit+0xa0>)
 800bb00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb02:	f003 0301 	and.w	r3, r3, #1
 800bb06:	613b      	str	r3, [r7, #16]
 800bb08:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bb0a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bb0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb10:	2302      	movs	r3, #2
 800bb12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb14:	2300      	movs	r3, #0
 800bb16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bb18:	2303      	movs	r3, #3
 800bb1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bb1c:	230a      	movs	r3, #10
 800bb1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb20:	f107 0314 	add.w	r3, r7, #20
 800bb24:	4619      	mov	r1, r3
 800bb26:	4812      	ldr	r0, [pc, #72]	; (800bb70 <HAL_HCD_MspInit+0xa4>)
 800bb28:	f7f6 f96c 	bl	8001e04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bb2c:	4b0f      	ldr	r3, [pc, #60]	; (800bb6c <HAL_HCD_MspInit+0xa0>)
 800bb2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb30:	4a0e      	ldr	r2, [pc, #56]	; (800bb6c <HAL_HCD_MspInit+0xa0>)
 800bb32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb36:	6353      	str	r3, [r2, #52]	; 0x34
 800bb38:	2300      	movs	r3, #0
 800bb3a:	60fb      	str	r3, [r7, #12]
 800bb3c:	4b0b      	ldr	r3, [pc, #44]	; (800bb6c <HAL_HCD_MspInit+0xa0>)
 800bb3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb40:	4a0a      	ldr	r2, [pc, #40]	; (800bb6c <HAL_HCD_MspInit+0xa0>)
 800bb42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bb46:	6453      	str	r3, [r2, #68]	; 0x44
 800bb48:	4b08      	ldr	r3, [pc, #32]	; (800bb6c <HAL_HCD_MspInit+0xa0>)
 800bb4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb50:	60fb      	str	r3, [r7, #12]
 800bb52:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800bb54:	2200      	movs	r2, #0
 800bb56:	2105      	movs	r1, #5
 800bb58:	2043      	movs	r0, #67	; 0x43
 800bb5a:	f7f5 fdbf 	bl	80016dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bb5e:	2043      	movs	r0, #67	; 0x43
 800bb60:	f7f5 fdd8 	bl	8001714 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bb64:	bf00      	nop
 800bb66:	3728      	adds	r7, #40	; 0x28
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}
 800bb6c:	40023800 	.word	0x40023800
 800bb70:	40020000 	.word	0x40020000

0800bb74 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b082      	sub	sp, #8
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bb82:	4618      	mov	r0, r3
 800bb84:	f7fc fbd9 	bl	800833a <USBH_LL_IncTimer>
}
 800bb88:	bf00      	nop
 800bb8a:	3708      	adds	r7, #8
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7fc fc1d 	bl	80083de <USBH_LL_Connect>
}
 800bba4:	bf00      	nop
 800bba6:	3708      	adds	r7, #8
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b082      	sub	sp, #8
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7fc fc32 	bl	8008424 <USBH_LL_Disconnect>
}
 800bbc0:	bf00      	nop
 800bbc2:	3708      	adds	r7, #8
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	70fb      	strb	r3, [r7, #3]
 800bbd4:	4613      	mov	r3, r2
 800bbd6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7fc fc67 	bl	80084b2 <USBH_LL_NotifyURBChange>
#endif
}
 800bbe4:	bf00      	nop
 800bbe6:	3708      	adds	r7, #8
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b082      	sub	sp, #8
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7fc fbc7 	bl	800838e <USBH_LL_PortEnabled>
}
 800bc00:	bf00      	nop
 800bc02:	3708      	adds	r7, #8
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7fc fbd3 	bl	80083c2 <USBH_LL_PortDisabled>
}
 800bc1c:	bf00      	nop
 800bc1e:	3708      	adds	r7, #8
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b082      	sub	sp, #8
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d12a      	bne.n	800bc8c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800bc36:	4a18      	ldr	r2, [pc, #96]	; (800bc98 <USBH_LL_Init+0x74>)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	4a15      	ldr	r2, [pc, #84]	; (800bc98 <USBH_LL_Init+0x74>)
 800bc42:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bc46:	4b14      	ldr	r3, [pc, #80]	; (800bc98 <USBH_LL_Init+0x74>)
 800bc48:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bc4c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800bc4e:	4b12      	ldr	r3, [pc, #72]	; (800bc98 <USBH_LL_Init+0x74>)
 800bc50:	2208      	movs	r2, #8
 800bc52:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800bc54:	4b10      	ldr	r3, [pc, #64]	; (800bc98 <USBH_LL_Init+0x74>)
 800bc56:	2201      	movs	r2, #1
 800bc58:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bc5a:	4b0f      	ldr	r3, [pc, #60]	; (800bc98 <USBH_LL_Init+0x74>)
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800bc60:	4b0d      	ldr	r3, [pc, #52]	; (800bc98 <USBH_LL_Init+0x74>)
 800bc62:	2202      	movs	r2, #2
 800bc64:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bc66:	4b0c      	ldr	r3, [pc, #48]	; (800bc98 <USBH_LL_Init+0x74>)
 800bc68:	2200      	movs	r2, #0
 800bc6a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800bc6c:	480a      	ldr	r0, [pc, #40]	; (800bc98 <USBH_LL_Init+0x74>)
 800bc6e:	f7f6 fa7e 	bl	800216e <HAL_HCD_Init>
 800bc72:	4603      	mov	r3, r0
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d001      	beq.n	800bc7c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800bc78:	f7f5 f932 	bl	8000ee0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800bc7c:	4806      	ldr	r0, [pc, #24]	; (800bc98 <USBH_LL_Init+0x74>)
 800bc7e:	f7f6 fe62 	bl	8002946 <HAL_HCD_GetCurrentFrame>
 800bc82:	4603      	mov	r3, r0
 800bc84:	4619      	mov	r1, r3
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f7fc fb48 	bl	800831c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800bc8c:	2300      	movs	r3, #0
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3708      	adds	r7, #8
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	200057e8 	.word	0x200057e8

0800bc9c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b084      	sub	sp, #16
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bca4:	2300      	movs	r3, #0
 800bca6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f7f6 fdd1 	bl	800285a <HAL_HCD_Start>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bcbc:	7bfb      	ldrb	r3, [r7, #15]
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f000 f95c 	bl	800bf7c <USBH_Get_USB_Status>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3710      	adds	r7, #16
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}

0800bcd2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b084      	sub	sp, #16
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bcde:	2300      	movs	r3, #0
 800bce0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7f6 fdd9 	bl	80028a0 <HAL_HCD_Stop>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bcf2:	7bfb      	ldrb	r3, [r7, #15]
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f000 f941 	bl	800bf7c <USBH_Get_USB_Status>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcfe:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3710      	adds	r7, #16
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800bd10:	2301      	movs	r3, #1
 800bd12:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7f6 fe21 	bl	8002962 <HAL_HCD_GetCurrentSpeed>
 800bd20:	4603      	mov	r3, r0
 800bd22:	2b02      	cmp	r3, #2
 800bd24:	d00c      	beq.n	800bd40 <USBH_LL_GetSpeed+0x38>
 800bd26:	2b02      	cmp	r3, #2
 800bd28:	d80d      	bhi.n	800bd46 <USBH_LL_GetSpeed+0x3e>
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d002      	beq.n	800bd34 <USBH_LL_GetSpeed+0x2c>
 800bd2e:	2b01      	cmp	r3, #1
 800bd30:	d003      	beq.n	800bd3a <USBH_LL_GetSpeed+0x32>
 800bd32:	e008      	b.n	800bd46 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800bd34:	2300      	movs	r3, #0
 800bd36:	73fb      	strb	r3, [r7, #15]
    break;
 800bd38:	e008      	b.n	800bd4c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	73fb      	strb	r3, [r7, #15]
    break;
 800bd3e:	e005      	b.n	800bd4c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800bd40:	2302      	movs	r3, #2
 800bd42:	73fb      	strb	r3, [r7, #15]
    break;
 800bd44:	e002      	b.n	800bd4c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800bd46:	2301      	movs	r3, #1
 800bd48:	73fb      	strb	r3, [r7, #15]
    break;
 800bd4a:	bf00      	nop
  }
  return  speed;
 800bd4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3710      	adds	r7, #16
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}

0800bd56 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800bd56:	b580      	push	{r7, lr}
 800bd58:	b084      	sub	sp, #16
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd62:	2300      	movs	r3, #0
 800bd64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f7f6 fdb4 	bl	80028da <HAL_HCD_ResetPort>
 800bd72:	4603      	mov	r3, r0
 800bd74:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bd76:	7bfb      	ldrb	r3, [r7, #15]
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f000 f8ff 	bl	800bf7c <USBH_Get_USB_Status>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd82:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3710      	adds	r7, #16
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	460b      	mov	r3, r1
 800bd96:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bd9e:	78fa      	ldrb	r2, [r7, #3]
 800bda0:	4611      	mov	r1, r2
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7f6 fdbb 	bl	800291e <HAL_HCD_HC_GetXferCount>
 800bda8:	4603      	mov	r3, r0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3708      	adds	r7, #8
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}

0800bdb2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bdb2:	b590      	push	{r4, r7, lr}
 800bdb4:	b089      	sub	sp, #36	; 0x24
 800bdb6:	af04      	add	r7, sp, #16
 800bdb8:	6078      	str	r0, [r7, #4]
 800bdba:	4608      	mov	r0, r1
 800bdbc:	4611      	mov	r1, r2
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	70fb      	strb	r3, [r7, #3]
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	70bb      	strb	r3, [r7, #2]
 800bdc8:	4613      	mov	r3, r2
 800bdca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bdda:	787c      	ldrb	r4, [r7, #1]
 800bddc:	78ba      	ldrb	r2, [r7, #2]
 800bdde:	78f9      	ldrb	r1, [r7, #3]
 800bde0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bde2:	9302      	str	r3, [sp, #8]
 800bde4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bde8:	9301      	str	r3, [sp, #4]
 800bdea:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bdee:	9300      	str	r3, [sp, #0]
 800bdf0:	4623      	mov	r3, r4
 800bdf2:	f7f6 fa1e 	bl	8002232 <HAL_HCD_HC_Init>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bdfa:	7bfb      	ldrb	r3, [r7, #15]
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f000 f8bd 	bl	800bf7c <USBH_Get_USB_Status>
 800be02:	4603      	mov	r3, r0
 800be04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be06:	7bbb      	ldrb	r3, [r7, #14]
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3714      	adds	r7, #20
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd90      	pop	{r4, r7, pc}

0800be10 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b084      	sub	sp, #16
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	460b      	mov	r3, r1
 800be1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be1c:	2300      	movs	r3, #0
 800be1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be20:	2300      	movs	r3, #0
 800be22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800be2a:	78fa      	ldrb	r2, [r7, #3]
 800be2c:	4611      	mov	r1, r2
 800be2e:	4618      	mov	r0, r3
 800be30:	f7f6 fa8e 	bl	8002350 <HAL_HCD_HC_Halt>
 800be34:	4603      	mov	r3, r0
 800be36:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800be38:	7bfb      	ldrb	r3, [r7, #15]
 800be3a:	4618      	mov	r0, r3
 800be3c:	f000 f89e 	bl	800bf7c <USBH_Get_USB_Status>
 800be40:	4603      	mov	r3, r0
 800be42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be44:	7bbb      	ldrb	r3, [r7, #14]
}
 800be46:	4618      	mov	r0, r3
 800be48:	3710      	adds	r7, #16
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}

0800be4e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800be4e:	b590      	push	{r4, r7, lr}
 800be50:	b089      	sub	sp, #36	; 0x24
 800be52:	af04      	add	r7, sp, #16
 800be54:	6078      	str	r0, [r7, #4]
 800be56:	4608      	mov	r0, r1
 800be58:	4611      	mov	r1, r2
 800be5a:	461a      	mov	r2, r3
 800be5c:	4603      	mov	r3, r0
 800be5e:	70fb      	strb	r3, [r7, #3]
 800be60:	460b      	mov	r3, r1
 800be62:	70bb      	strb	r3, [r7, #2]
 800be64:	4613      	mov	r3, r2
 800be66:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be68:	2300      	movs	r3, #0
 800be6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be6c:	2300      	movs	r3, #0
 800be6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800be76:	787c      	ldrb	r4, [r7, #1]
 800be78:	78ba      	ldrb	r2, [r7, #2]
 800be7a:	78f9      	ldrb	r1, [r7, #3]
 800be7c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800be80:	9303      	str	r3, [sp, #12]
 800be82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800be84:	9302      	str	r3, [sp, #8]
 800be86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be88:	9301      	str	r3, [sp, #4]
 800be8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be8e:	9300      	str	r3, [sp, #0]
 800be90:	4623      	mov	r3, r4
 800be92:	f7f6 fa81 	bl	8002398 <HAL_HCD_HC_SubmitRequest>
 800be96:	4603      	mov	r3, r0
 800be98:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800be9a:	7bfb      	ldrb	r3, [r7, #15]
 800be9c:	4618      	mov	r0, r3
 800be9e:	f000 f86d 	bl	800bf7c <USBH_Get_USB_Status>
 800bea2:	4603      	mov	r3, r0
 800bea4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bea6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3714      	adds	r7, #20
 800beac:	46bd      	mov	sp, r7
 800beae:	bd90      	pop	{r4, r7, pc}

0800beb0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b082      	sub	sp, #8
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	460b      	mov	r3, r1
 800beba:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bec2:	78fa      	ldrb	r2, [r7, #3]
 800bec4:	4611      	mov	r1, r2
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7f6 fd15 	bl	80028f6 <HAL_HCD_HC_GetURBState>
 800becc:	4603      	mov	r3, r0
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3708      	adds	r7, #8
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}

0800bed6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bed6:	b580      	push	{r7, lr}
 800bed8:	b082      	sub	sp, #8
 800beda:	af00      	add	r7, sp, #0
 800bedc:	6078      	str	r0, [r7, #4]
 800bede:	460b      	mov	r3, r1
 800bee0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d103      	bne.n	800bef4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800beec:	78fb      	ldrb	r3, [r7, #3]
 800beee:	4618      	mov	r0, r3
 800bef0:	f000 f870 	bl	800bfd4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800bef4:	20c8      	movs	r0, #200	; 0xc8
 800bef6:	f7f5 fb15 	bl	8001524 <HAL_Delay>
  return USBH_OK;
 800befa:	2300      	movs	r3, #0
}
 800befc:	4618      	mov	r0, r3
 800befe:	3708      	adds	r7, #8
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b085      	sub	sp, #20
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	70fb      	strb	r3, [r7, #3]
 800bf10:	4613      	mov	r3, r2
 800bf12:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bf1a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bf1c:	78fb      	ldrb	r3, [r7, #3]
 800bf1e:	68fa      	ldr	r2, [r7, #12]
 800bf20:	212c      	movs	r1, #44	; 0x2c
 800bf22:	fb01 f303 	mul.w	r3, r1, r3
 800bf26:	4413      	add	r3, r2
 800bf28:	333b      	adds	r3, #59	; 0x3b
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d009      	beq.n	800bf44 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bf30:	78fb      	ldrb	r3, [r7, #3]
 800bf32:	68fa      	ldr	r2, [r7, #12]
 800bf34:	212c      	movs	r1, #44	; 0x2c
 800bf36:	fb01 f303 	mul.w	r3, r1, r3
 800bf3a:	4413      	add	r3, r2
 800bf3c:	3354      	adds	r3, #84	; 0x54
 800bf3e:	78ba      	ldrb	r2, [r7, #2]
 800bf40:	701a      	strb	r2, [r3, #0]
 800bf42:	e008      	b.n	800bf56 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800bf44:	78fb      	ldrb	r3, [r7, #3]
 800bf46:	68fa      	ldr	r2, [r7, #12]
 800bf48:	212c      	movs	r1, #44	; 0x2c
 800bf4a:	fb01 f303 	mul.w	r3, r1, r3
 800bf4e:	4413      	add	r3, r2
 800bf50:	3355      	adds	r3, #85	; 0x55
 800bf52:	78ba      	ldrb	r2, [r7, #2]
 800bf54:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bf56:	2300      	movs	r3, #0
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3714      	adds	r7, #20
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf62:	4770      	bx	lr

0800bf64 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b082      	sub	sp, #8
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f7f5 fad9 	bl	8001524 <HAL_Delay>
}
 800bf72:	bf00      	nop
 800bf74:	3708      	adds	r7, #8
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
	...

0800bf7c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b085      	sub	sp, #20
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	4603      	mov	r3, r0
 800bf84:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf86:	2300      	movs	r3, #0
 800bf88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bf8a:	79fb      	ldrb	r3, [r7, #7]
 800bf8c:	2b03      	cmp	r3, #3
 800bf8e:	d817      	bhi.n	800bfc0 <USBH_Get_USB_Status+0x44>
 800bf90:	a201      	add	r2, pc, #4	; (adr r2, 800bf98 <USBH_Get_USB_Status+0x1c>)
 800bf92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf96:	bf00      	nop
 800bf98:	0800bfa9 	.word	0x0800bfa9
 800bf9c:	0800bfaf 	.word	0x0800bfaf
 800bfa0:	0800bfb5 	.word	0x0800bfb5
 800bfa4:	0800bfbb 	.word	0x0800bfbb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	73fb      	strb	r3, [r7, #15]
    break;
 800bfac:	e00b      	b.n	800bfc6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bfae:	2302      	movs	r3, #2
 800bfb0:	73fb      	strb	r3, [r7, #15]
    break;
 800bfb2:	e008      	b.n	800bfc6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	73fb      	strb	r3, [r7, #15]
    break;
 800bfb8:	e005      	b.n	800bfc6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bfba:	2302      	movs	r3, #2
 800bfbc:	73fb      	strb	r3, [r7, #15]
    break;
 800bfbe:	e002      	b.n	800bfc6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bfc0:	2302      	movs	r3, #2
 800bfc2:	73fb      	strb	r3, [r7, #15]
    break;
 800bfc4:	bf00      	nop
  }
  return usb_status;
 800bfc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3714      	adds	r7, #20
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr

0800bfd4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b084      	sub	sp, #16
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	4603      	mov	r3, r0
 800bfdc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800bfde:	79fb      	ldrb	r3, [r7, #7]
 800bfe0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800bfe2:	79fb      	ldrb	r3, [r7, #7]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d102      	bne.n	800bfee <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800bfe8:	2301      	movs	r3, #1
 800bfea:	73fb      	strb	r3, [r7, #15]
 800bfec:	e001      	b.n	800bff2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800bfee:	2300      	movs	r3, #0
 800bff0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,(GPIO_PinState)data);
 800bff2:	7bfb      	ldrb	r3, [r7, #15]
 800bff4:	461a      	mov	r2, r3
 800bff6:	2101      	movs	r1, #1
 800bff8:	4803      	ldr	r0, [pc, #12]	; (800c008 <MX_DriverVbusFS+0x34>)
 800bffa:	f7f6 f89f 	bl	800213c <HAL_GPIO_WritePin>
}
 800bffe:	bf00      	nop
 800c000:	3710      	adds	r7, #16
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	40020400 	.word	0x40020400

0800c00c <__errno>:
 800c00c:	4b01      	ldr	r3, [pc, #4]	; (800c014 <__errno+0x8>)
 800c00e:	6818      	ldr	r0, [r3, #0]
 800c010:	4770      	bx	lr
 800c012:	bf00      	nop
 800c014:	20000260 	.word	0x20000260

0800c018 <__libc_init_array>:
 800c018:	b570      	push	{r4, r5, r6, lr}
 800c01a:	4d0d      	ldr	r5, [pc, #52]	; (800c050 <__libc_init_array+0x38>)
 800c01c:	4c0d      	ldr	r4, [pc, #52]	; (800c054 <__libc_init_array+0x3c>)
 800c01e:	1b64      	subs	r4, r4, r5
 800c020:	10a4      	asrs	r4, r4, #2
 800c022:	2600      	movs	r6, #0
 800c024:	42a6      	cmp	r6, r4
 800c026:	d109      	bne.n	800c03c <__libc_init_array+0x24>
 800c028:	4d0b      	ldr	r5, [pc, #44]	; (800c058 <__libc_init_array+0x40>)
 800c02a:	4c0c      	ldr	r4, [pc, #48]	; (800c05c <__libc_init_array+0x44>)
 800c02c:	f000 fd08 	bl	800ca40 <_init>
 800c030:	1b64      	subs	r4, r4, r5
 800c032:	10a4      	asrs	r4, r4, #2
 800c034:	2600      	movs	r6, #0
 800c036:	42a6      	cmp	r6, r4
 800c038:	d105      	bne.n	800c046 <__libc_init_array+0x2e>
 800c03a:	bd70      	pop	{r4, r5, r6, pc}
 800c03c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c040:	4798      	blx	r3
 800c042:	3601      	adds	r6, #1
 800c044:	e7ee      	b.n	800c024 <__libc_init_array+0xc>
 800c046:	f855 3b04 	ldr.w	r3, [r5], #4
 800c04a:	4798      	blx	r3
 800c04c:	3601      	adds	r6, #1
 800c04e:	e7f2      	b.n	800c036 <__libc_init_array+0x1e>
 800c050:	0800cc20 	.word	0x0800cc20
 800c054:	0800cc20 	.word	0x0800cc20
 800c058:	0800cc20 	.word	0x0800cc20
 800c05c:	0800cc24 	.word	0x0800cc24

0800c060 <__retarget_lock_acquire_recursive>:
 800c060:	4770      	bx	lr

0800c062 <__retarget_lock_release_recursive>:
 800c062:	4770      	bx	lr

0800c064 <malloc>:
 800c064:	4b02      	ldr	r3, [pc, #8]	; (800c070 <malloc+0xc>)
 800c066:	4601      	mov	r1, r0
 800c068:	6818      	ldr	r0, [r3, #0]
 800c06a:	f000 b88d 	b.w	800c188 <_malloc_r>
 800c06e:	bf00      	nop
 800c070:	20000260 	.word	0x20000260

0800c074 <free>:
 800c074:	4b02      	ldr	r3, [pc, #8]	; (800c080 <free+0xc>)
 800c076:	4601      	mov	r1, r0
 800c078:	6818      	ldr	r0, [r3, #0]
 800c07a:	f000 b819 	b.w	800c0b0 <_free_r>
 800c07e:	bf00      	nop
 800c080:	20000260 	.word	0x20000260

0800c084 <memcpy>:
 800c084:	440a      	add	r2, r1
 800c086:	4291      	cmp	r1, r2
 800c088:	f100 33ff 	add.w	r3, r0, #4294967295
 800c08c:	d100      	bne.n	800c090 <memcpy+0xc>
 800c08e:	4770      	bx	lr
 800c090:	b510      	push	{r4, lr}
 800c092:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c096:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c09a:	4291      	cmp	r1, r2
 800c09c:	d1f9      	bne.n	800c092 <memcpy+0xe>
 800c09e:	bd10      	pop	{r4, pc}

0800c0a0 <memset>:
 800c0a0:	4402      	add	r2, r0
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d100      	bne.n	800c0aa <memset+0xa>
 800c0a8:	4770      	bx	lr
 800c0aa:	f803 1b01 	strb.w	r1, [r3], #1
 800c0ae:	e7f9      	b.n	800c0a4 <memset+0x4>

0800c0b0 <_free_r>:
 800c0b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c0b2:	2900      	cmp	r1, #0
 800c0b4:	d044      	beq.n	800c140 <_free_r+0x90>
 800c0b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0ba:	9001      	str	r0, [sp, #4]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	f1a1 0404 	sub.w	r4, r1, #4
 800c0c2:	bfb8      	it	lt
 800c0c4:	18e4      	addlt	r4, r4, r3
 800c0c6:	f000 f96d 	bl	800c3a4 <__malloc_lock>
 800c0ca:	4a1e      	ldr	r2, [pc, #120]	; (800c144 <_free_r+0x94>)
 800c0cc:	9801      	ldr	r0, [sp, #4]
 800c0ce:	6813      	ldr	r3, [r2, #0]
 800c0d0:	b933      	cbnz	r3, 800c0e0 <_free_r+0x30>
 800c0d2:	6063      	str	r3, [r4, #4]
 800c0d4:	6014      	str	r4, [r2, #0]
 800c0d6:	b003      	add	sp, #12
 800c0d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c0dc:	f000 b968 	b.w	800c3b0 <__malloc_unlock>
 800c0e0:	42a3      	cmp	r3, r4
 800c0e2:	d908      	bls.n	800c0f6 <_free_r+0x46>
 800c0e4:	6825      	ldr	r5, [r4, #0]
 800c0e6:	1961      	adds	r1, r4, r5
 800c0e8:	428b      	cmp	r3, r1
 800c0ea:	bf01      	itttt	eq
 800c0ec:	6819      	ldreq	r1, [r3, #0]
 800c0ee:	685b      	ldreq	r3, [r3, #4]
 800c0f0:	1949      	addeq	r1, r1, r5
 800c0f2:	6021      	streq	r1, [r4, #0]
 800c0f4:	e7ed      	b.n	800c0d2 <_free_r+0x22>
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	b10b      	cbz	r3, 800c100 <_free_r+0x50>
 800c0fc:	42a3      	cmp	r3, r4
 800c0fe:	d9fa      	bls.n	800c0f6 <_free_r+0x46>
 800c100:	6811      	ldr	r1, [r2, #0]
 800c102:	1855      	adds	r5, r2, r1
 800c104:	42a5      	cmp	r5, r4
 800c106:	d10b      	bne.n	800c120 <_free_r+0x70>
 800c108:	6824      	ldr	r4, [r4, #0]
 800c10a:	4421      	add	r1, r4
 800c10c:	1854      	adds	r4, r2, r1
 800c10e:	42a3      	cmp	r3, r4
 800c110:	6011      	str	r1, [r2, #0]
 800c112:	d1e0      	bne.n	800c0d6 <_free_r+0x26>
 800c114:	681c      	ldr	r4, [r3, #0]
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	6053      	str	r3, [r2, #4]
 800c11a:	4421      	add	r1, r4
 800c11c:	6011      	str	r1, [r2, #0]
 800c11e:	e7da      	b.n	800c0d6 <_free_r+0x26>
 800c120:	d902      	bls.n	800c128 <_free_r+0x78>
 800c122:	230c      	movs	r3, #12
 800c124:	6003      	str	r3, [r0, #0]
 800c126:	e7d6      	b.n	800c0d6 <_free_r+0x26>
 800c128:	6825      	ldr	r5, [r4, #0]
 800c12a:	1961      	adds	r1, r4, r5
 800c12c:	428b      	cmp	r3, r1
 800c12e:	bf04      	itt	eq
 800c130:	6819      	ldreq	r1, [r3, #0]
 800c132:	685b      	ldreq	r3, [r3, #4]
 800c134:	6063      	str	r3, [r4, #4]
 800c136:	bf04      	itt	eq
 800c138:	1949      	addeq	r1, r1, r5
 800c13a:	6021      	streq	r1, [r4, #0]
 800c13c:	6054      	str	r4, [r2, #4]
 800c13e:	e7ca      	b.n	800c0d6 <_free_r+0x26>
 800c140:	b003      	add	sp, #12
 800c142:	bd30      	pop	{r4, r5, pc}
 800c144:	20005af0 	.word	0x20005af0

0800c148 <sbrk_aligned>:
 800c148:	b570      	push	{r4, r5, r6, lr}
 800c14a:	4e0e      	ldr	r6, [pc, #56]	; (800c184 <sbrk_aligned+0x3c>)
 800c14c:	460c      	mov	r4, r1
 800c14e:	6831      	ldr	r1, [r6, #0]
 800c150:	4605      	mov	r5, r0
 800c152:	b911      	cbnz	r1, 800c15a <sbrk_aligned+0x12>
 800c154:	f000 f8f6 	bl	800c344 <_sbrk_r>
 800c158:	6030      	str	r0, [r6, #0]
 800c15a:	4621      	mov	r1, r4
 800c15c:	4628      	mov	r0, r5
 800c15e:	f000 f8f1 	bl	800c344 <_sbrk_r>
 800c162:	1c43      	adds	r3, r0, #1
 800c164:	d00a      	beq.n	800c17c <sbrk_aligned+0x34>
 800c166:	1cc4      	adds	r4, r0, #3
 800c168:	f024 0403 	bic.w	r4, r4, #3
 800c16c:	42a0      	cmp	r0, r4
 800c16e:	d007      	beq.n	800c180 <sbrk_aligned+0x38>
 800c170:	1a21      	subs	r1, r4, r0
 800c172:	4628      	mov	r0, r5
 800c174:	f000 f8e6 	bl	800c344 <_sbrk_r>
 800c178:	3001      	adds	r0, #1
 800c17a:	d101      	bne.n	800c180 <sbrk_aligned+0x38>
 800c17c:	f04f 34ff 	mov.w	r4, #4294967295
 800c180:	4620      	mov	r0, r4
 800c182:	bd70      	pop	{r4, r5, r6, pc}
 800c184:	20005af4 	.word	0x20005af4

0800c188 <_malloc_r>:
 800c188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c18c:	1ccd      	adds	r5, r1, #3
 800c18e:	f025 0503 	bic.w	r5, r5, #3
 800c192:	3508      	adds	r5, #8
 800c194:	2d0c      	cmp	r5, #12
 800c196:	bf38      	it	cc
 800c198:	250c      	movcc	r5, #12
 800c19a:	2d00      	cmp	r5, #0
 800c19c:	4607      	mov	r7, r0
 800c19e:	db01      	blt.n	800c1a4 <_malloc_r+0x1c>
 800c1a0:	42a9      	cmp	r1, r5
 800c1a2:	d905      	bls.n	800c1b0 <_malloc_r+0x28>
 800c1a4:	230c      	movs	r3, #12
 800c1a6:	603b      	str	r3, [r7, #0]
 800c1a8:	2600      	movs	r6, #0
 800c1aa:	4630      	mov	r0, r6
 800c1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1b0:	4e2e      	ldr	r6, [pc, #184]	; (800c26c <_malloc_r+0xe4>)
 800c1b2:	f000 f8f7 	bl	800c3a4 <__malloc_lock>
 800c1b6:	6833      	ldr	r3, [r6, #0]
 800c1b8:	461c      	mov	r4, r3
 800c1ba:	bb34      	cbnz	r4, 800c20a <_malloc_r+0x82>
 800c1bc:	4629      	mov	r1, r5
 800c1be:	4638      	mov	r0, r7
 800c1c0:	f7ff ffc2 	bl	800c148 <sbrk_aligned>
 800c1c4:	1c43      	adds	r3, r0, #1
 800c1c6:	4604      	mov	r4, r0
 800c1c8:	d14d      	bne.n	800c266 <_malloc_r+0xde>
 800c1ca:	6834      	ldr	r4, [r6, #0]
 800c1cc:	4626      	mov	r6, r4
 800c1ce:	2e00      	cmp	r6, #0
 800c1d0:	d140      	bne.n	800c254 <_malloc_r+0xcc>
 800c1d2:	6823      	ldr	r3, [r4, #0]
 800c1d4:	4631      	mov	r1, r6
 800c1d6:	4638      	mov	r0, r7
 800c1d8:	eb04 0803 	add.w	r8, r4, r3
 800c1dc:	f000 f8b2 	bl	800c344 <_sbrk_r>
 800c1e0:	4580      	cmp	r8, r0
 800c1e2:	d13a      	bne.n	800c25a <_malloc_r+0xd2>
 800c1e4:	6821      	ldr	r1, [r4, #0]
 800c1e6:	3503      	adds	r5, #3
 800c1e8:	1a6d      	subs	r5, r5, r1
 800c1ea:	f025 0503 	bic.w	r5, r5, #3
 800c1ee:	3508      	adds	r5, #8
 800c1f0:	2d0c      	cmp	r5, #12
 800c1f2:	bf38      	it	cc
 800c1f4:	250c      	movcc	r5, #12
 800c1f6:	4629      	mov	r1, r5
 800c1f8:	4638      	mov	r0, r7
 800c1fa:	f7ff ffa5 	bl	800c148 <sbrk_aligned>
 800c1fe:	3001      	adds	r0, #1
 800c200:	d02b      	beq.n	800c25a <_malloc_r+0xd2>
 800c202:	6823      	ldr	r3, [r4, #0]
 800c204:	442b      	add	r3, r5
 800c206:	6023      	str	r3, [r4, #0]
 800c208:	e00e      	b.n	800c228 <_malloc_r+0xa0>
 800c20a:	6822      	ldr	r2, [r4, #0]
 800c20c:	1b52      	subs	r2, r2, r5
 800c20e:	d41e      	bmi.n	800c24e <_malloc_r+0xc6>
 800c210:	2a0b      	cmp	r2, #11
 800c212:	d916      	bls.n	800c242 <_malloc_r+0xba>
 800c214:	1961      	adds	r1, r4, r5
 800c216:	42a3      	cmp	r3, r4
 800c218:	6025      	str	r5, [r4, #0]
 800c21a:	bf18      	it	ne
 800c21c:	6059      	strne	r1, [r3, #4]
 800c21e:	6863      	ldr	r3, [r4, #4]
 800c220:	bf08      	it	eq
 800c222:	6031      	streq	r1, [r6, #0]
 800c224:	5162      	str	r2, [r4, r5]
 800c226:	604b      	str	r3, [r1, #4]
 800c228:	4638      	mov	r0, r7
 800c22a:	f104 060b 	add.w	r6, r4, #11
 800c22e:	f000 f8bf 	bl	800c3b0 <__malloc_unlock>
 800c232:	f026 0607 	bic.w	r6, r6, #7
 800c236:	1d23      	adds	r3, r4, #4
 800c238:	1af2      	subs	r2, r6, r3
 800c23a:	d0b6      	beq.n	800c1aa <_malloc_r+0x22>
 800c23c:	1b9b      	subs	r3, r3, r6
 800c23e:	50a3      	str	r3, [r4, r2]
 800c240:	e7b3      	b.n	800c1aa <_malloc_r+0x22>
 800c242:	6862      	ldr	r2, [r4, #4]
 800c244:	42a3      	cmp	r3, r4
 800c246:	bf0c      	ite	eq
 800c248:	6032      	streq	r2, [r6, #0]
 800c24a:	605a      	strne	r2, [r3, #4]
 800c24c:	e7ec      	b.n	800c228 <_malloc_r+0xa0>
 800c24e:	4623      	mov	r3, r4
 800c250:	6864      	ldr	r4, [r4, #4]
 800c252:	e7b2      	b.n	800c1ba <_malloc_r+0x32>
 800c254:	4634      	mov	r4, r6
 800c256:	6876      	ldr	r6, [r6, #4]
 800c258:	e7b9      	b.n	800c1ce <_malloc_r+0x46>
 800c25a:	230c      	movs	r3, #12
 800c25c:	603b      	str	r3, [r7, #0]
 800c25e:	4638      	mov	r0, r7
 800c260:	f000 f8a6 	bl	800c3b0 <__malloc_unlock>
 800c264:	e7a1      	b.n	800c1aa <_malloc_r+0x22>
 800c266:	6025      	str	r5, [r4, #0]
 800c268:	e7de      	b.n	800c228 <_malloc_r+0xa0>
 800c26a:	bf00      	nop
 800c26c:	20005af0 	.word	0x20005af0

0800c270 <cleanup_glue>:
 800c270:	b538      	push	{r3, r4, r5, lr}
 800c272:	460c      	mov	r4, r1
 800c274:	6809      	ldr	r1, [r1, #0]
 800c276:	4605      	mov	r5, r0
 800c278:	b109      	cbz	r1, 800c27e <cleanup_glue+0xe>
 800c27a:	f7ff fff9 	bl	800c270 <cleanup_glue>
 800c27e:	4621      	mov	r1, r4
 800c280:	4628      	mov	r0, r5
 800c282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c286:	f7ff bf13 	b.w	800c0b0 <_free_r>
	...

0800c28c <_reclaim_reent>:
 800c28c:	4b2c      	ldr	r3, [pc, #176]	; (800c340 <_reclaim_reent+0xb4>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4283      	cmp	r3, r0
 800c292:	b570      	push	{r4, r5, r6, lr}
 800c294:	4604      	mov	r4, r0
 800c296:	d051      	beq.n	800c33c <_reclaim_reent+0xb0>
 800c298:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c29a:	b143      	cbz	r3, 800c2ae <_reclaim_reent+0x22>
 800c29c:	68db      	ldr	r3, [r3, #12]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d14a      	bne.n	800c338 <_reclaim_reent+0xac>
 800c2a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2a4:	6819      	ldr	r1, [r3, #0]
 800c2a6:	b111      	cbz	r1, 800c2ae <_reclaim_reent+0x22>
 800c2a8:	4620      	mov	r0, r4
 800c2aa:	f7ff ff01 	bl	800c0b0 <_free_r>
 800c2ae:	6961      	ldr	r1, [r4, #20]
 800c2b0:	b111      	cbz	r1, 800c2b8 <_reclaim_reent+0x2c>
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	f7ff fefc 	bl	800c0b0 <_free_r>
 800c2b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c2ba:	b111      	cbz	r1, 800c2c2 <_reclaim_reent+0x36>
 800c2bc:	4620      	mov	r0, r4
 800c2be:	f7ff fef7 	bl	800c0b0 <_free_r>
 800c2c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c2c4:	b111      	cbz	r1, 800c2cc <_reclaim_reent+0x40>
 800c2c6:	4620      	mov	r0, r4
 800c2c8:	f7ff fef2 	bl	800c0b0 <_free_r>
 800c2cc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c2ce:	b111      	cbz	r1, 800c2d6 <_reclaim_reent+0x4a>
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	f7ff feed 	bl	800c0b0 <_free_r>
 800c2d6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c2d8:	b111      	cbz	r1, 800c2e0 <_reclaim_reent+0x54>
 800c2da:	4620      	mov	r0, r4
 800c2dc:	f7ff fee8 	bl	800c0b0 <_free_r>
 800c2e0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c2e2:	b111      	cbz	r1, 800c2ea <_reclaim_reent+0x5e>
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	f7ff fee3 	bl	800c0b0 <_free_r>
 800c2ea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c2ec:	b111      	cbz	r1, 800c2f4 <_reclaim_reent+0x68>
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	f7ff fede 	bl	800c0b0 <_free_r>
 800c2f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2f6:	b111      	cbz	r1, 800c2fe <_reclaim_reent+0x72>
 800c2f8:	4620      	mov	r0, r4
 800c2fa:	f7ff fed9 	bl	800c0b0 <_free_r>
 800c2fe:	69a3      	ldr	r3, [r4, #24]
 800c300:	b1e3      	cbz	r3, 800c33c <_reclaim_reent+0xb0>
 800c302:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c304:	4620      	mov	r0, r4
 800c306:	4798      	blx	r3
 800c308:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c30a:	b1b9      	cbz	r1, 800c33c <_reclaim_reent+0xb0>
 800c30c:	4620      	mov	r0, r4
 800c30e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c312:	f7ff bfad 	b.w	800c270 <cleanup_glue>
 800c316:	5949      	ldr	r1, [r1, r5]
 800c318:	b941      	cbnz	r1, 800c32c <_reclaim_reent+0xa0>
 800c31a:	3504      	adds	r5, #4
 800c31c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c31e:	2d80      	cmp	r5, #128	; 0x80
 800c320:	68d9      	ldr	r1, [r3, #12]
 800c322:	d1f8      	bne.n	800c316 <_reclaim_reent+0x8a>
 800c324:	4620      	mov	r0, r4
 800c326:	f7ff fec3 	bl	800c0b0 <_free_r>
 800c32a:	e7ba      	b.n	800c2a2 <_reclaim_reent+0x16>
 800c32c:	680e      	ldr	r6, [r1, #0]
 800c32e:	4620      	mov	r0, r4
 800c330:	f7ff febe 	bl	800c0b0 <_free_r>
 800c334:	4631      	mov	r1, r6
 800c336:	e7ef      	b.n	800c318 <_reclaim_reent+0x8c>
 800c338:	2500      	movs	r5, #0
 800c33a:	e7ef      	b.n	800c31c <_reclaim_reent+0x90>
 800c33c:	bd70      	pop	{r4, r5, r6, pc}
 800c33e:	bf00      	nop
 800c340:	20000260 	.word	0x20000260

0800c344 <_sbrk_r>:
 800c344:	b538      	push	{r3, r4, r5, lr}
 800c346:	4d06      	ldr	r5, [pc, #24]	; (800c360 <_sbrk_r+0x1c>)
 800c348:	2300      	movs	r3, #0
 800c34a:	4604      	mov	r4, r0
 800c34c:	4608      	mov	r0, r1
 800c34e:	602b      	str	r3, [r5, #0]
 800c350:	f7f5 f834 	bl	80013bc <_sbrk>
 800c354:	1c43      	adds	r3, r0, #1
 800c356:	d102      	bne.n	800c35e <_sbrk_r+0x1a>
 800c358:	682b      	ldr	r3, [r5, #0]
 800c35a:	b103      	cbz	r3, 800c35e <_sbrk_r+0x1a>
 800c35c:	6023      	str	r3, [r4, #0]
 800c35e:	bd38      	pop	{r3, r4, r5, pc}
 800c360:	20005af8 	.word	0x20005af8

0800c364 <siprintf>:
 800c364:	b40e      	push	{r1, r2, r3}
 800c366:	b500      	push	{lr}
 800c368:	b09c      	sub	sp, #112	; 0x70
 800c36a:	ab1d      	add	r3, sp, #116	; 0x74
 800c36c:	9002      	str	r0, [sp, #8]
 800c36e:	9006      	str	r0, [sp, #24]
 800c370:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c374:	4809      	ldr	r0, [pc, #36]	; (800c39c <siprintf+0x38>)
 800c376:	9107      	str	r1, [sp, #28]
 800c378:	9104      	str	r1, [sp, #16]
 800c37a:	4909      	ldr	r1, [pc, #36]	; (800c3a0 <siprintf+0x3c>)
 800c37c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c380:	9105      	str	r1, [sp, #20]
 800c382:	6800      	ldr	r0, [r0, #0]
 800c384:	9301      	str	r3, [sp, #4]
 800c386:	a902      	add	r1, sp, #8
 800c388:	f000 f874 	bl	800c474 <_svfiprintf_r>
 800c38c:	9b02      	ldr	r3, [sp, #8]
 800c38e:	2200      	movs	r2, #0
 800c390:	701a      	strb	r2, [r3, #0]
 800c392:	b01c      	add	sp, #112	; 0x70
 800c394:	f85d eb04 	ldr.w	lr, [sp], #4
 800c398:	b003      	add	sp, #12
 800c39a:	4770      	bx	lr
 800c39c:	20000260 	.word	0x20000260
 800c3a0:	ffff0208 	.word	0xffff0208

0800c3a4 <__malloc_lock>:
 800c3a4:	4801      	ldr	r0, [pc, #4]	; (800c3ac <__malloc_lock+0x8>)
 800c3a6:	f7ff be5b 	b.w	800c060 <__retarget_lock_acquire_recursive>
 800c3aa:	bf00      	nop
 800c3ac:	20005aec 	.word	0x20005aec

0800c3b0 <__malloc_unlock>:
 800c3b0:	4801      	ldr	r0, [pc, #4]	; (800c3b8 <__malloc_unlock+0x8>)
 800c3b2:	f7ff be56 	b.w	800c062 <__retarget_lock_release_recursive>
 800c3b6:	bf00      	nop
 800c3b8:	20005aec 	.word	0x20005aec

0800c3bc <__ssputs_r>:
 800c3bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3c0:	688e      	ldr	r6, [r1, #8]
 800c3c2:	429e      	cmp	r6, r3
 800c3c4:	4682      	mov	sl, r0
 800c3c6:	460c      	mov	r4, r1
 800c3c8:	4690      	mov	r8, r2
 800c3ca:	461f      	mov	r7, r3
 800c3cc:	d838      	bhi.n	800c440 <__ssputs_r+0x84>
 800c3ce:	898a      	ldrh	r2, [r1, #12]
 800c3d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c3d4:	d032      	beq.n	800c43c <__ssputs_r+0x80>
 800c3d6:	6825      	ldr	r5, [r4, #0]
 800c3d8:	6909      	ldr	r1, [r1, #16]
 800c3da:	eba5 0901 	sub.w	r9, r5, r1
 800c3de:	6965      	ldr	r5, [r4, #20]
 800c3e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c3e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	444b      	add	r3, r9
 800c3ec:	106d      	asrs	r5, r5, #1
 800c3ee:	429d      	cmp	r5, r3
 800c3f0:	bf38      	it	cc
 800c3f2:	461d      	movcc	r5, r3
 800c3f4:	0553      	lsls	r3, r2, #21
 800c3f6:	d531      	bpl.n	800c45c <__ssputs_r+0xa0>
 800c3f8:	4629      	mov	r1, r5
 800c3fa:	f7ff fec5 	bl	800c188 <_malloc_r>
 800c3fe:	4606      	mov	r6, r0
 800c400:	b950      	cbnz	r0, 800c418 <__ssputs_r+0x5c>
 800c402:	230c      	movs	r3, #12
 800c404:	f8ca 3000 	str.w	r3, [sl]
 800c408:	89a3      	ldrh	r3, [r4, #12]
 800c40a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c40e:	81a3      	strh	r3, [r4, #12]
 800c410:	f04f 30ff 	mov.w	r0, #4294967295
 800c414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c418:	6921      	ldr	r1, [r4, #16]
 800c41a:	464a      	mov	r2, r9
 800c41c:	f7ff fe32 	bl	800c084 <memcpy>
 800c420:	89a3      	ldrh	r3, [r4, #12]
 800c422:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c42a:	81a3      	strh	r3, [r4, #12]
 800c42c:	6126      	str	r6, [r4, #16]
 800c42e:	6165      	str	r5, [r4, #20]
 800c430:	444e      	add	r6, r9
 800c432:	eba5 0509 	sub.w	r5, r5, r9
 800c436:	6026      	str	r6, [r4, #0]
 800c438:	60a5      	str	r5, [r4, #8]
 800c43a:	463e      	mov	r6, r7
 800c43c:	42be      	cmp	r6, r7
 800c43e:	d900      	bls.n	800c442 <__ssputs_r+0x86>
 800c440:	463e      	mov	r6, r7
 800c442:	6820      	ldr	r0, [r4, #0]
 800c444:	4632      	mov	r2, r6
 800c446:	4641      	mov	r1, r8
 800c448:	f000 faa8 	bl	800c99c <memmove>
 800c44c:	68a3      	ldr	r3, [r4, #8]
 800c44e:	1b9b      	subs	r3, r3, r6
 800c450:	60a3      	str	r3, [r4, #8]
 800c452:	6823      	ldr	r3, [r4, #0]
 800c454:	4433      	add	r3, r6
 800c456:	6023      	str	r3, [r4, #0]
 800c458:	2000      	movs	r0, #0
 800c45a:	e7db      	b.n	800c414 <__ssputs_r+0x58>
 800c45c:	462a      	mov	r2, r5
 800c45e:	f000 fab7 	bl	800c9d0 <_realloc_r>
 800c462:	4606      	mov	r6, r0
 800c464:	2800      	cmp	r0, #0
 800c466:	d1e1      	bne.n	800c42c <__ssputs_r+0x70>
 800c468:	6921      	ldr	r1, [r4, #16]
 800c46a:	4650      	mov	r0, sl
 800c46c:	f7ff fe20 	bl	800c0b0 <_free_r>
 800c470:	e7c7      	b.n	800c402 <__ssputs_r+0x46>
	...

0800c474 <_svfiprintf_r>:
 800c474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c478:	4698      	mov	r8, r3
 800c47a:	898b      	ldrh	r3, [r1, #12]
 800c47c:	061b      	lsls	r3, r3, #24
 800c47e:	b09d      	sub	sp, #116	; 0x74
 800c480:	4607      	mov	r7, r0
 800c482:	460d      	mov	r5, r1
 800c484:	4614      	mov	r4, r2
 800c486:	d50e      	bpl.n	800c4a6 <_svfiprintf_r+0x32>
 800c488:	690b      	ldr	r3, [r1, #16]
 800c48a:	b963      	cbnz	r3, 800c4a6 <_svfiprintf_r+0x32>
 800c48c:	2140      	movs	r1, #64	; 0x40
 800c48e:	f7ff fe7b 	bl	800c188 <_malloc_r>
 800c492:	6028      	str	r0, [r5, #0]
 800c494:	6128      	str	r0, [r5, #16]
 800c496:	b920      	cbnz	r0, 800c4a2 <_svfiprintf_r+0x2e>
 800c498:	230c      	movs	r3, #12
 800c49a:	603b      	str	r3, [r7, #0]
 800c49c:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a0:	e0d1      	b.n	800c646 <_svfiprintf_r+0x1d2>
 800c4a2:	2340      	movs	r3, #64	; 0x40
 800c4a4:	616b      	str	r3, [r5, #20]
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	9309      	str	r3, [sp, #36]	; 0x24
 800c4aa:	2320      	movs	r3, #32
 800c4ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4b4:	2330      	movs	r3, #48	; 0x30
 800c4b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c660 <_svfiprintf_r+0x1ec>
 800c4ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4be:	f04f 0901 	mov.w	r9, #1
 800c4c2:	4623      	mov	r3, r4
 800c4c4:	469a      	mov	sl, r3
 800c4c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4ca:	b10a      	cbz	r2, 800c4d0 <_svfiprintf_r+0x5c>
 800c4cc:	2a25      	cmp	r2, #37	; 0x25
 800c4ce:	d1f9      	bne.n	800c4c4 <_svfiprintf_r+0x50>
 800c4d0:	ebba 0b04 	subs.w	fp, sl, r4
 800c4d4:	d00b      	beq.n	800c4ee <_svfiprintf_r+0x7a>
 800c4d6:	465b      	mov	r3, fp
 800c4d8:	4622      	mov	r2, r4
 800c4da:	4629      	mov	r1, r5
 800c4dc:	4638      	mov	r0, r7
 800c4de:	f7ff ff6d 	bl	800c3bc <__ssputs_r>
 800c4e2:	3001      	adds	r0, #1
 800c4e4:	f000 80aa 	beq.w	800c63c <_svfiprintf_r+0x1c8>
 800c4e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4ea:	445a      	add	r2, fp
 800c4ec:	9209      	str	r2, [sp, #36]	; 0x24
 800c4ee:	f89a 3000 	ldrb.w	r3, [sl]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	f000 80a2 	beq.w	800c63c <_svfiprintf_r+0x1c8>
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	f04f 32ff 	mov.w	r2, #4294967295
 800c4fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c502:	f10a 0a01 	add.w	sl, sl, #1
 800c506:	9304      	str	r3, [sp, #16]
 800c508:	9307      	str	r3, [sp, #28]
 800c50a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c50e:	931a      	str	r3, [sp, #104]	; 0x68
 800c510:	4654      	mov	r4, sl
 800c512:	2205      	movs	r2, #5
 800c514:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c518:	4851      	ldr	r0, [pc, #324]	; (800c660 <_svfiprintf_r+0x1ec>)
 800c51a:	f7f3 fe59 	bl	80001d0 <memchr>
 800c51e:	9a04      	ldr	r2, [sp, #16]
 800c520:	b9d8      	cbnz	r0, 800c55a <_svfiprintf_r+0xe6>
 800c522:	06d0      	lsls	r0, r2, #27
 800c524:	bf44      	itt	mi
 800c526:	2320      	movmi	r3, #32
 800c528:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c52c:	0711      	lsls	r1, r2, #28
 800c52e:	bf44      	itt	mi
 800c530:	232b      	movmi	r3, #43	; 0x2b
 800c532:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c536:	f89a 3000 	ldrb.w	r3, [sl]
 800c53a:	2b2a      	cmp	r3, #42	; 0x2a
 800c53c:	d015      	beq.n	800c56a <_svfiprintf_r+0xf6>
 800c53e:	9a07      	ldr	r2, [sp, #28]
 800c540:	4654      	mov	r4, sl
 800c542:	2000      	movs	r0, #0
 800c544:	f04f 0c0a 	mov.w	ip, #10
 800c548:	4621      	mov	r1, r4
 800c54a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c54e:	3b30      	subs	r3, #48	; 0x30
 800c550:	2b09      	cmp	r3, #9
 800c552:	d94e      	bls.n	800c5f2 <_svfiprintf_r+0x17e>
 800c554:	b1b0      	cbz	r0, 800c584 <_svfiprintf_r+0x110>
 800c556:	9207      	str	r2, [sp, #28]
 800c558:	e014      	b.n	800c584 <_svfiprintf_r+0x110>
 800c55a:	eba0 0308 	sub.w	r3, r0, r8
 800c55e:	fa09 f303 	lsl.w	r3, r9, r3
 800c562:	4313      	orrs	r3, r2
 800c564:	9304      	str	r3, [sp, #16]
 800c566:	46a2      	mov	sl, r4
 800c568:	e7d2      	b.n	800c510 <_svfiprintf_r+0x9c>
 800c56a:	9b03      	ldr	r3, [sp, #12]
 800c56c:	1d19      	adds	r1, r3, #4
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	9103      	str	r1, [sp, #12]
 800c572:	2b00      	cmp	r3, #0
 800c574:	bfbb      	ittet	lt
 800c576:	425b      	neglt	r3, r3
 800c578:	f042 0202 	orrlt.w	r2, r2, #2
 800c57c:	9307      	strge	r3, [sp, #28]
 800c57e:	9307      	strlt	r3, [sp, #28]
 800c580:	bfb8      	it	lt
 800c582:	9204      	strlt	r2, [sp, #16]
 800c584:	7823      	ldrb	r3, [r4, #0]
 800c586:	2b2e      	cmp	r3, #46	; 0x2e
 800c588:	d10c      	bne.n	800c5a4 <_svfiprintf_r+0x130>
 800c58a:	7863      	ldrb	r3, [r4, #1]
 800c58c:	2b2a      	cmp	r3, #42	; 0x2a
 800c58e:	d135      	bne.n	800c5fc <_svfiprintf_r+0x188>
 800c590:	9b03      	ldr	r3, [sp, #12]
 800c592:	1d1a      	adds	r2, r3, #4
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	9203      	str	r2, [sp, #12]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	bfb8      	it	lt
 800c59c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5a0:	3402      	adds	r4, #2
 800c5a2:	9305      	str	r3, [sp, #20]
 800c5a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c670 <_svfiprintf_r+0x1fc>
 800c5a8:	7821      	ldrb	r1, [r4, #0]
 800c5aa:	2203      	movs	r2, #3
 800c5ac:	4650      	mov	r0, sl
 800c5ae:	f7f3 fe0f 	bl	80001d0 <memchr>
 800c5b2:	b140      	cbz	r0, 800c5c6 <_svfiprintf_r+0x152>
 800c5b4:	2340      	movs	r3, #64	; 0x40
 800c5b6:	eba0 000a 	sub.w	r0, r0, sl
 800c5ba:	fa03 f000 	lsl.w	r0, r3, r0
 800c5be:	9b04      	ldr	r3, [sp, #16]
 800c5c0:	4303      	orrs	r3, r0
 800c5c2:	3401      	adds	r4, #1
 800c5c4:	9304      	str	r3, [sp, #16]
 800c5c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5ca:	4826      	ldr	r0, [pc, #152]	; (800c664 <_svfiprintf_r+0x1f0>)
 800c5cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5d0:	2206      	movs	r2, #6
 800c5d2:	f7f3 fdfd 	bl	80001d0 <memchr>
 800c5d6:	2800      	cmp	r0, #0
 800c5d8:	d038      	beq.n	800c64c <_svfiprintf_r+0x1d8>
 800c5da:	4b23      	ldr	r3, [pc, #140]	; (800c668 <_svfiprintf_r+0x1f4>)
 800c5dc:	bb1b      	cbnz	r3, 800c626 <_svfiprintf_r+0x1b2>
 800c5de:	9b03      	ldr	r3, [sp, #12]
 800c5e0:	3307      	adds	r3, #7
 800c5e2:	f023 0307 	bic.w	r3, r3, #7
 800c5e6:	3308      	adds	r3, #8
 800c5e8:	9303      	str	r3, [sp, #12]
 800c5ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5ec:	4433      	add	r3, r6
 800c5ee:	9309      	str	r3, [sp, #36]	; 0x24
 800c5f0:	e767      	b.n	800c4c2 <_svfiprintf_r+0x4e>
 800c5f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5f6:	460c      	mov	r4, r1
 800c5f8:	2001      	movs	r0, #1
 800c5fa:	e7a5      	b.n	800c548 <_svfiprintf_r+0xd4>
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	3401      	adds	r4, #1
 800c600:	9305      	str	r3, [sp, #20]
 800c602:	4619      	mov	r1, r3
 800c604:	f04f 0c0a 	mov.w	ip, #10
 800c608:	4620      	mov	r0, r4
 800c60a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c60e:	3a30      	subs	r2, #48	; 0x30
 800c610:	2a09      	cmp	r2, #9
 800c612:	d903      	bls.n	800c61c <_svfiprintf_r+0x1a8>
 800c614:	2b00      	cmp	r3, #0
 800c616:	d0c5      	beq.n	800c5a4 <_svfiprintf_r+0x130>
 800c618:	9105      	str	r1, [sp, #20]
 800c61a:	e7c3      	b.n	800c5a4 <_svfiprintf_r+0x130>
 800c61c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c620:	4604      	mov	r4, r0
 800c622:	2301      	movs	r3, #1
 800c624:	e7f0      	b.n	800c608 <_svfiprintf_r+0x194>
 800c626:	ab03      	add	r3, sp, #12
 800c628:	9300      	str	r3, [sp, #0]
 800c62a:	462a      	mov	r2, r5
 800c62c:	4b0f      	ldr	r3, [pc, #60]	; (800c66c <_svfiprintf_r+0x1f8>)
 800c62e:	a904      	add	r1, sp, #16
 800c630:	4638      	mov	r0, r7
 800c632:	f3af 8000 	nop.w
 800c636:	1c42      	adds	r2, r0, #1
 800c638:	4606      	mov	r6, r0
 800c63a:	d1d6      	bne.n	800c5ea <_svfiprintf_r+0x176>
 800c63c:	89ab      	ldrh	r3, [r5, #12]
 800c63e:	065b      	lsls	r3, r3, #25
 800c640:	f53f af2c 	bmi.w	800c49c <_svfiprintf_r+0x28>
 800c644:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c646:	b01d      	add	sp, #116	; 0x74
 800c648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c64c:	ab03      	add	r3, sp, #12
 800c64e:	9300      	str	r3, [sp, #0]
 800c650:	462a      	mov	r2, r5
 800c652:	4b06      	ldr	r3, [pc, #24]	; (800c66c <_svfiprintf_r+0x1f8>)
 800c654:	a904      	add	r1, sp, #16
 800c656:	4638      	mov	r0, r7
 800c658:	f000 f87a 	bl	800c750 <_printf_i>
 800c65c:	e7eb      	b.n	800c636 <_svfiprintf_r+0x1c2>
 800c65e:	bf00      	nop
 800c660:	0800cbe4 	.word	0x0800cbe4
 800c664:	0800cbee 	.word	0x0800cbee
 800c668:	00000000 	.word	0x00000000
 800c66c:	0800c3bd 	.word	0x0800c3bd
 800c670:	0800cbea 	.word	0x0800cbea

0800c674 <_printf_common>:
 800c674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c678:	4616      	mov	r6, r2
 800c67a:	4699      	mov	r9, r3
 800c67c:	688a      	ldr	r2, [r1, #8]
 800c67e:	690b      	ldr	r3, [r1, #16]
 800c680:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c684:	4293      	cmp	r3, r2
 800c686:	bfb8      	it	lt
 800c688:	4613      	movlt	r3, r2
 800c68a:	6033      	str	r3, [r6, #0]
 800c68c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c690:	4607      	mov	r7, r0
 800c692:	460c      	mov	r4, r1
 800c694:	b10a      	cbz	r2, 800c69a <_printf_common+0x26>
 800c696:	3301      	adds	r3, #1
 800c698:	6033      	str	r3, [r6, #0]
 800c69a:	6823      	ldr	r3, [r4, #0]
 800c69c:	0699      	lsls	r1, r3, #26
 800c69e:	bf42      	ittt	mi
 800c6a0:	6833      	ldrmi	r3, [r6, #0]
 800c6a2:	3302      	addmi	r3, #2
 800c6a4:	6033      	strmi	r3, [r6, #0]
 800c6a6:	6825      	ldr	r5, [r4, #0]
 800c6a8:	f015 0506 	ands.w	r5, r5, #6
 800c6ac:	d106      	bne.n	800c6bc <_printf_common+0x48>
 800c6ae:	f104 0a19 	add.w	sl, r4, #25
 800c6b2:	68e3      	ldr	r3, [r4, #12]
 800c6b4:	6832      	ldr	r2, [r6, #0]
 800c6b6:	1a9b      	subs	r3, r3, r2
 800c6b8:	42ab      	cmp	r3, r5
 800c6ba:	dc26      	bgt.n	800c70a <_printf_common+0x96>
 800c6bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c6c0:	1e13      	subs	r3, r2, #0
 800c6c2:	6822      	ldr	r2, [r4, #0]
 800c6c4:	bf18      	it	ne
 800c6c6:	2301      	movne	r3, #1
 800c6c8:	0692      	lsls	r2, r2, #26
 800c6ca:	d42b      	bmi.n	800c724 <_printf_common+0xb0>
 800c6cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c6d0:	4649      	mov	r1, r9
 800c6d2:	4638      	mov	r0, r7
 800c6d4:	47c0      	blx	r8
 800c6d6:	3001      	adds	r0, #1
 800c6d8:	d01e      	beq.n	800c718 <_printf_common+0xa4>
 800c6da:	6823      	ldr	r3, [r4, #0]
 800c6dc:	68e5      	ldr	r5, [r4, #12]
 800c6de:	6832      	ldr	r2, [r6, #0]
 800c6e0:	f003 0306 	and.w	r3, r3, #6
 800c6e4:	2b04      	cmp	r3, #4
 800c6e6:	bf08      	it	eq
 800c6e8:	1aad      	subeq	r5, r5, r2
 800c6ea:	68a3      	ldr	r3, [r4, #8]
 800c6ec:	6922      	ldr	r2, [r4, #16]
 800c6ee:	bf0c      	ite	eq
 800c6f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c6f4:	2500      	movne	r5, #0
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	bfc4      	itt	gt
 800c6fa:	1a9b      	subgt	r3, r3, r2
 800c6fc:	18ed      	addgt	r5, r5, r3
 800c6fe:	2600      	movs	r6, #0
 800c700:	341a      	adds	r4, #26
 800c702:	42b5      	cmp	r5, r6
 800c704:	d11a      	bne.n	800c73c <_printf_common+0xc8>
 800c706:	2000      	movs	r0, #0
 800c708:	e008      	b.n	800c71c <_printf_common+0xa8>
 800c70a:	2301      	movs	r3, #1
 800c70c:	4652      	mov	r2, sl
 800c70e:	4649      	mov	r1, r9
 800c710:	4638      	mov	r0, r7
 800c712:	47c0      	blx	r8
 800c714:	3001      	adds	r0, #1
 800c716:	d103      	bne.n	800c720 <_printf_common+0xac>
 800c718:	f04f 30ff 	mov.w	r0, #4294967295
 800c71c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c720:	3501      	adds	r5, #1
 800c722:	e7c6      	b.n	800c6b2 <_printf_common+0x3e>
 800c724:	18e1      	adds	r1, r4, r3
 800c726:	1c5a      	adds	r2, r3, #1
 800c728:	2030      	movs	r0, #48	; 0x30
 800c72a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c72e:	4422      	add	r2, r4
 800c730:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c734:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c738:	3302      	adds	r3, #2
 800c73a:	e7c7      	b.n	800c6cc <_printf_common+0x58>
 800c73c:	2301      	movs	r3, #1
 800c73e:	4622      	mov	r2, r4
 800c740:	4649      	mov	r1, r9
 800c742:	4638      	mov	r0, r7
 800c744:	47c0      	blx	r8
 800c746:	3001      	adds	r0, #1
 800c748:	d0e6      	beq.n	800c718 <_printf_common+0xa4>
 800c74a:	3601      	adds	r6, #1
 800c74c:	e7d9      	b.n	800c702 <_printf_common+0x8e>
	...

0800c750 <_printf_i>:
 800c750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c754:	7e0f      	ldrb	r7, [r1, #24]
 800c756:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c758:	2f78      	cmp	r7, #120	; 0x78
 800c75a:	4691      	mov	r9, r2
 800c75c:	4680      	mov	r8, r0
 800c75e:	460c      	mov	r4, r1
 800c760:	469a      	mov	sl, r3
 800c762:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c766:	d807      	bhi.n	800c778 <_printf_i+0x28>
 800c768:	2f62      	cmp	r7, #98	; 0x62
 800c76a:	d80a      	bhi.n	800c782 <_printf_i+0x32>
 800c76c:	2f00      	cmp	r7, #0
 800c76e:	f000 80d8 	beq.w	800c922 <_printf_i+0x1d2>
 800c772:	2f58      	cmp	r7, #88	; 0x58
 800c774:	f000 80a3 	beq.w	800c8be <_printf_i+0x16e>
 800c778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c77c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c780:	e03a      	b.n	800c7f8 <_printf_i+0xa8>
 800c782:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c786:	2b15      	cmp	r3, #21
 800c788:	d8f6      	bhi.n	800c778 <_printf_i+0x28>
 800c78a:	a101      	add	r1, pc, #4	; (adr r1, 800c790 <_printf_i+0x40>)
 800c78c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c790:	0800c7e9 	.word	0x0800c7e9
 800c794:	0800c7fd 	.word	0x0800c7fd
 800c798:	0800c779 	.word	0x0800c779
 800c79c:	0800c779 	.word	0x0800c779
 800c7a0:	0800c779 	.word	0x0800c779
 800c7a4:	0800c779 	.word	0x0800c779
 800c7a8:	0800c7fd 	.word	0x0800c7fd
 800c7ac:	0800c779 	.word	0x0800c779
 800c7b0:	0800c779 	.word	0x0800c779
 800c7b4:	0800c779 	.word	0x0800c779
 800c7b8:	0800c779 	.word	0x0800c779
 800c7bc:	0800c909 	.word	0x0800c909
 800c7c0:	0800c82d 	.word	0x0800c82d
 800c7c4:	0800c8eb 	.word	0x0800c8eb
 800c7c8:	0800c779 	.word	0x0800c779
 800c7cc:	0800c779 	.word	0x0800c779
 800c7d0:	0800c92b 	.word	0x0800c92b
 800c7d4:	0800c779 	.word	0x0800c779
 800c7d8:	0800c82d 	.word	0x0800c82d
 800c7dc:	0800c779 	.word	0x0800c779
 800c7e0:	0800c779 	.word	0x0800c779
 800c7e4:	0800c8f3 	.word	0x0800c8f3
 800c7e8:	682b      	ldr	r3, [r5, #0]
 800c7ea:	1d1a      	adds	r2, r3, #4
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	602a      	str	r2, [r5, #0]
 800c7f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c7f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	e0a3      	b.n	800c944 <_printf_i+0x1f4>
 800c7fc:	6820      	ldr	r0, [r4, #0]
 800c7fe:	6829      	ldr	r1, [r5, #0]
 800c800:	0606      	lsls	r6, r0, #24
 800c802:	f101 0304 	add.w	r3, r1, #4
 800c806:	d50a      	bpl.n	800c81e <_printf_i+0xce>
 800c808:	680e      	ldr	r6, [r1, #0]
 800c80a:	602b      	str	r3, [r5, #0]
 800c80c:	2e00      	cmp	r6, #0
 800c80e:	da03      	bge.n	800c818 <_printf_i+0xc8>
 800c810:	232d      	movs	r3, #45	; 0x2d
 800c812:	4276      	negs	r6, r6
 800c814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c818:	485e      	ldr	r0, [pc, #376]	; (800c994 <_printf_i+0x244>)
 800c81a:	230a      	movs	r3, #10
 800c81c:	e019      	b.n	800c852 <_printf_i+0x102>
 800c81e:	680e      	ldr	r6, [r1, #0]
 800c820:	602b      	str	r3, [r5, #0]
 800c822:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c826:	bf18      	it	ne
 800c828:	b236      	sxthne	r6, r6
 800c82a:	e7ef      	b.n	800c80c <_printf_i+0xbc>
 800c82c:	682b      	ldr	r3, [r5, #0]
 800c82e:	6820      	ldr	r0, [r4, #0]
 800c830:	1d19      	adds	r1, r3, #4
 800c832:	6029      	str	r1, [r5, #0]
 800c834:	0601      	lsls	r1, r0, #24
 800c836:	d501      	bpl.n	800c83c <_printf_i+0xec>
 800c838:	681e      	ldr	r6, [r3, #0]
 800c83a:	e002      	b.n	800c842 <_printf_i+0xf2>
 800c83c:	0646      	lsls	r6, r0, #25
 800c83e:	d5fb      	bpl.n	800c838 <_printf_i+0xe8>
 800c840:	881e      	ldrh	r6, [r3, #0]
 800c842:	4854      	ldr	r0, [pc, #336]	; (800c994 <_printf_i+0x244>)
 800c844:	2f6f      	cmp	r7, #111	; 0x6f
 800c846:	bf0c      	ite	eq
 800c848:	2308      	moveq	r3, #8
 800c84a:	230a      	movne	r3, #10
 800c84c:	2100      	movs	r1, #0
 800c84e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c852:	6865      	ldr	r5, [r4, #4]
 800c854:	60a5      	str	r5, [r4, #8]
 800c856:	2d00      	cmp	r5, #0
 800c858:	bfa2      	ittt	ge
 800c85a:	6821      	ldrge	r1, [r4, #0]
 800c85c:	f021 0104 	bicge.w	r1, r1, #4
 800c860:	6021      	strge	r1, [r4, #0]
 800c862:	b90e      	cbnz	r6, 800c868 <_printf_i+0x118>
 800c864:	2d00      	cmp	r5, #0
 800c866:	d04d      	beq.n	800c904 <_printf_i+0x1b4>
 800c868:	4615      	mov	r5, r2
 800c86a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c86e:	fb03 6711 	mls	r7, r3, r1, r6
 800c872:	5dc7      	ldrb	r7, [r0, r7]
 800c874:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c878:	4637      	mov	r7, r6
 800c87a:	42bb      	cmp	r3, r7
 800c87c:	460e      	mov	r6, r1
 800c87e:	d9f4      	bls.n	800c86a <_printf_i+0x11a>
 800c880:	2b08      	cmp	r3, #8
 800c882:	d10b      	bne.n	800c89c <_printf_i+0x14c>
 800c884:	6823      	ldr	r3, [r4, #0]
 800c886:	07de      	lsls	r6, r3, #31
 800c888:	d508      	bpl.n	800c89c <_printf_i+0x14c>
 800c88a:	6923      	ldr	r3, [r4, #16]
 800c88c:	6861      	ldr	r1, [r4, #4]
 800c88e:	4299      	cmp	r1, r3
 800c890:	bfde      	ittt	le
 800c892:	2330      	movle	r3, #48	; 0x30
 800c894:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c898:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c89c:	1b52      	subs	r2, r2, r5
 800c89e:	6122      	str	r2, [r4, #16]
 800c8a0:	f8cd a000 	str.w	sl, [sp]
 800c8a4:	464b      	mov	r3, r9
 800c8a6:	aa03      	add	r2, sp, #12
 800c8a8:	4621      	mov	r1, r4
 800c8aa:	4640      	mov	r0, r8
 800c8ac:	f7ff fee2 	bl	800c674 <_printf_common>
 800c8b0:	3001      	adds	r0, #1
 800c8b2:	d14c      	bne.n	800c94e <_printf_i+0x1fe>
 800c8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8b8:	b004      	add	sp, #16
 800c8ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8be:	4835      	ldr	r0, [pc, #212]	; (800c994 <_printf_i+0x244>)
 800c8c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c8c4:	6829      	ldr	r1, [r5, #0]
 800c8c6:	6823      	ldr	r3, [r4, #0]
 800c8c8:	f851 6b04 	ldr.w	r6, [r1], #4
 800c8cc:	6029      	str	r1, [r5, #0]
 800c8ce:	061d      	lsls	r5, r3, #24
 800c8d0:	d514      	bpl.n	800c8fc <_printf_i+0x1ac>
 800c8d2:	07df      	lsls	r7, r3, #31
 800c8d4:	bf44      	itt	mi
 800c8d6:	f043 0320 	orrmi.w	r3, r3, #32
 800c8da:	6023      	strmi	r3, [r4, #0]
 800c8dc:	b91e      	cbnz	r6, 800c8e6 <_printf_i+0x196>
 800c8de:	6823      	ldr	r3, [r4, #0]
 800c8e0:	f023 0320 	bic.w	r3, r3, #32
 800c8e4:	6023      	str	r3, [r4, #0]
 800c8e6:	2310      	movs	r3, #16
 800c8e8:	e7b0      	b.n	800c84c <_printf_i+0xfc>
 800c8ea:	6823      	ldr	r3, [r4, #0]
 800c8ec:	f043 0320 	orr.w	r3, r3, #32
 800c8f0:	6023      	str	r3, [r4, #0]
 800c8f2:	2378      	movs	r3, #120	; 0x78
 800c8f4:	4828      	ldr	r0, [pc, #160]	; (800c998 <_printf_i+0x248>)
 800c8f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c8fa:	e7e3      	b.n	800c8c4 <_printf_i+0x174>
 800c8fc:	0659      	lsls	r1, r3, #25
 800c8fe:	bf48      	it	mi
 800c900:	b2b6      	uxthmi	r6, r6
 800c902:	e7e6      	b.n	800c8d2 <_printf_i+0x182>
 800c904:	4615      	mov	r5, r2
 800c906:	e7bb      	b.n	800c880 <_printf_i+0x130>
 800c908:	682b      	ldr	r3, [r5, #0]
 800c90a:	6826      	ldr	r6, [r4, #0]
 800c90c:	6961      	ldr	r1, [r4, #20]
 800c90e:	1d18      	adds	r0, r3, #4
 800c910:	6028      	str	r0, [r5, #0]
 800c912:	0635      	lsls	r5, r6, #24
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	d501      	bpl.n	800c91c <_printf_i+0x1cc>
 800c918:	6019      	str	r1, [r3, #0]
 800c91a:	e002      	b.n	800c922 <_printf_i+0x1d2>
 800c91c:	0670      	lsls	r0, r6, #25
 800c91e:	d5fb      	bpl.n	800c918 <_printf_i+0x1c8>
 800c920:	8019      	strh	r1, [r3, #0]
 800c922:	2300      	movs	r3, #0
 800c924:	6123      	str	r3, [r4, #16]
 800c926:	4615      	mov	r5, r2
 800c928:	e7ba      	b.n	800c8a0 <_printf_i+0x150>
 800c92a:	682b      	ldr	r3, [r5, #0]
 800c92c:	1d1a      	adds	r2, r3, #4
 800c92e:	602a      	str	r2, [r5, #0]
 800c930:	681d      	ldr	r5, [r3, #0]
 800c932:	6862      	ldr	r2, [r4, #4]
 800c934:	2100      	movs	r1, #0
 800c936:	4628      	mov	r0, r5
 800c938:	f7f3 fc4a 	bl	80001d0 <memchr>
 800c93c:	b108      	cbz	r0, 800c942 <_printf_i+0x1f2>
 800c93e:	1b40      	subs	r0, r0, r5
 800c940:	6060      	str	r0, [r4, #4]
 800c942:	6863      	ldr	r3, [r4, #4]
 800c944:	6123      	str	r3, [r4, #16]
 800c946:	2300      	movs	r3, #0
 800c948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c94c:	e7a8      	b.n	800c8a0 <_printf_i+0x150>
 800c94e:	6923      	ldr	r3, [r4, #16]
 800c950:	462a      	mov	r2, r5
 800c952:	4649      	mov	r1, r9
 800c954:	4640      	mov	r0, r8
 800c956:	47d0      	blx	sl
 800c958:	3001      	adds	r0, #1
 800c95a:	d0ab      	beq.n	800c8b4 <_printf_i+0x164>
 800c95c:	6823      	ldr	r3, [r4, #0]
 800c95e:	079b      	lsls	r3, r3, #30
 800c960:	d413      	bmi.n	800c98a <_printf_i+0x23a>
 800c962:	68e0      	ldr	r0, [r4, #12]
 800c964:	9b03      	ldr	r3, [sp, #12]
 800c966:	4298      	cmp	r0, r3
 800c968:	bfb8      	it	lt
 800c96a:	4618      	movlt	r0, r3
 800c96c:	e7a4      	b.n	800c8b8 <_printf_i+0x168>
 800c96e:	2301      	movs	r3, #1
 800c970:	4632      	mov	r2, r6
 800c972:	4649      	mov	r1, r9
 800c974:	4640      	mov	r0, r8
 800c976:	47d0      	blx	sl
 800c978:	3001      	adds	r0, #1
 800c97a:	d09b      	beq.n	800c8b4 <_printf_i+0x164>
 800c97c:	3501      	adds	r5, #1
 800c97e:	68e3      	ldr	r3, [r4, #12]
 800c980:	9903      	ldr	r1, [sp, #12]
 800c982:	1a5b      	subs	r3, r3, r1
 800c984:	42ab      	cmp	r3, r5
 800c986:	dcf2      	bgt.n	800c96e <_printf_i+0x21e>
 800c988:	e7eb      	b.n	800c962 <_printf_i+0x212>
 800c98a:	2500      	movs	r5, #0
 800c98c:	f104 0619 	add.w	r6, r4, #25
 800c990:	e7f5      	b.n	800c97e <_printf_i+0x22e>
 800c992:	bf00      	nop
 800c994:	0800cbf5 	.word	0x0800cbf5
 800c998:	0800cc06 	.word	0x0800cc06

0800c99c <memmove>:
 800c99c:	4288      	cmp	r0, r1
 800c99e:	b510      	push	{r4, lr}
 800c9a0:	eb01 0402 	add.w	r4, r1, r2
 800c9a4:	d902      	bls.n	800c9ac <memmove+0x10>
 800c9a6:	4284      	cmp	r4, r0
 800c9a8:	4623      	mov	r3, r4
 800c9aa:	d807      	bhi.n	800c9bc <memmove+0x20>
 800c9ac:	1e43      	subs	r3, r0, #1
 800c9ae:	42a1      	cmp	r1, r4
 800c9b0:	d008      	beq.n	800c9c4 <memmove+0x28>
 800c9b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c9ba:	e7f8      	b.n	800c9ae <memmove+0x12>
 800c9bc:	4402      	add	r2, r0
 800c9be:	4601      	mov	r1, r0
 800c9c0:	428a      	cmp	r2, r1
 800c9c2:	d100      	bne.n	800c9c6 <memmove+0x2a>
 800c9c4:	bd10      	pop	{r4, pc}
 800c9c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c9ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c9ce:	e7f7      	b.n	800c9c0 <memmove+0x24>

0800c9d0 <_realloc_r>:
 800c9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9d4:	4680      	mov	r8, r0
 800c9d6:	4614      	mov	r4, r2
 800c9d8:	460e      	mov	r6, r1
 800c9da:	b921      	cbnz	r1, 800c9e6 <_realloc_r+0x16>
 800c9dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9e0:	4611      	mov	r1, r2
 800c9e2:	f7ff bbd1 	b.w	800c188 <_malloc_r>
 800c9e6:	b92a      	cbnz	r2, 800c9f4 <_realloc_r+0x24>
 800c9e8:	f7ff fb62 	bl	800c0b0 <_free_r>
 800c9ec:	4625      	mov	r5, r4
 800c9ee:	4628      	mov	r0, r5
 800c9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9f4:	f000 f81b 	bl	800ca2e <_malloc_usable_size_r>
 800c9f8:	4284      	cmp	r4, r0
 800c9fa:	4607      	mov	r7, r0
 800c9fc:	d802      	bhi.n	800ca04 <_realloc_r+0x34>
 800c9fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ca02:	d812      	bhi.n	800ca2a <_realloc_r+0x5a>
 800ca04:	4621      	mov	r1, r4
 800ca06:	4640      	mov	r0, r8
 800ca08:	f7ff fbbe 	bl	800c188 <_malloc_r>
 800ca0c:	4605      	mov	r5, r0
 800ca0e:	2800      	cmp	r0, #0
 800ca10:	d0ed      	beq.n	800c9ee <_realloc_r+0x1e>
 800ca12:	42bc      	cmp	r4, r7
 800ca14:	4622      	mov	r2, r4
 800ca16:	4631      	mov	r1, r6
 800ca18:	bf28      	it	cs
 800ca1a:	463a      	movcs	r2, r7
 800ca1c:	f7ff fb32 	bl	800c084 <memcpy>
 800ca20:	4631      	mov	r1, r6
 800ca22:	4640      	mov	r0, r8
 800ca24:	f7ff fb44 	bl	800c0b0 <_free_r>
 800ca28:	e7e1      	b.n	800c9ee <_realloc_r+0x1e>
 800ca2a:	4635      	mov	r5, r6
 800ca2c:	e7df      	b.n	800c9ee <_realloc_r+0x1e>

0800ca2e <_malloc_usable_size_r>:
 800ca2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca32:	1f18      	subs	r0, r3, #4
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	bfbc      	itt	lt
 800ca38:	580b      	ldrlt	r3, [r1, r0]
 800ca3a:	18c0      	addlt	r0, r0, r3
 800ca3c:	4770      	bx	lr
	...

0800ca40 <_init>:
 800ca40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca42:	bf00      	nop
 800ca44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca46:	bc08      	pop	{r3}
 800ca48:	469e      	mov	lr, r3
 800ca4a:	4770      	bx	lr

0800ca4c <_fini>:
 800ca4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca4e:	bf00      	nop
 800ca50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca52:	bc08      	pop	{r3}
 800ca54:	469e      	mov	lr, r3
 800ca56:	4770      	bx	lr
