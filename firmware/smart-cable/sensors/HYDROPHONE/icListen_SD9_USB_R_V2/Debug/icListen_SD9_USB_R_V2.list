
icListen_SD9_USB_R_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017100  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c28  08017290  08017290  00027290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017eb8  08017eb8  00030378  2**0
                  CONTENTS
  4 .ARM          00000008  08017eb8  08017eb8  00027eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017ec0  08017ec0  00030378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017ec0  08017ec0  00027ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017ec4  08017ec4  00027ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000378  20000000  08017ec8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030378  2**0
                  CONTENTS
 10 .bss          0000e588  20000378  20000378  00030378  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2000e900  2000e900  00030378  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030378  2**0
                  CONTENTS, READONLY
 13 .debug_info   00032c45  00000000  00000000  000303a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000074f1  00000000  00000000  00062fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024e0  00000000  00000000  0006a4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002208  00000000  00000000  0006c9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b04c  00000000  00000000  0006ebc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033e4f  00000000  00000000  00099c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dadef  00000000  00000000  000cda63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a8852  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a92c  00000000  00000000  001a88a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000378 	.word	0x20000378
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017278 	.word	0x08017278

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000037c 	.word	0x2000037c
 80001cc:	08017278 	.word	0x08017278

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <UI_init>:
char temp_array[400];
const char* UI_commands_strings[]={"help here\r"};


void UI_init(UI_typedef* UI_obj)
{
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b096      	sub	sp, #88	; 0x58
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	UI_messages_init(UI_obj);
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f000 f967 	bl	8000880 <UI_messages_init>


	osMessageQDef(UI_events_q, 20, uint8_t);
 80005b2:	4b20      	ldr	r3, [pc, #128]	; (8000634 <UI_init+0x90>)
 80005b4:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80005b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_obj->events_q= osMessageCreate(osMessageQ(UI_events_q), NULL);
 80005be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005c2:	2100      	movs	r1, #0
 80005c4:	4618      	mov	r0, r3
 80005c6:	f011 fbfc 	bl	8011dc2 <osMessageCreate>
 80005ca:	4602      	mov	r2, r0
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	609a      	str	r2, [r3, #8]

	osMessageQDef(UI_media_rx_q, 20, uint16_t);
 80005d0:	4b19      	ldr	r3, [pc, #100]	; (8000638 <UI_init+0x94>)
 80005d2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_obj->media_rx_messages_q= osMessageCreate(osMessageQ(UI_media_rx_q), NULL);
 80005dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f011 fbed 	bl	8011dc2 <osMessageCreate>
 80005e8:	4602      	mov	r2, r0
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	601a      	str	r2, [r3, #0]

	osMessageQDef(UI_media_tx_q, 200, uint8_t);
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <UI_init+0x98>)
 80005f0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80005f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_obj->media_tx_q = osMessageCreate(osMessageQ(UI_media_tx_q), NULL);
 80005fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f011 fbde 	bl	8011dc2 <osMessageCreate>
 8000606:	4602      	mov	r2, r0
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	605a      	str	r2, [r3, #4]

	osThreadDef(UI_task, UI_loop, osPriorityNormal, 0, 256);
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <UI_init+0x9c>)
 800060e:	f107 040c 	add.w	r4, r7, #12
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(UI_task), UI_obj);
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	6879      	ldr	r1, [r7, #4]
 8000626:	4618      	mov	r0, r3
 8000628:	f011 fb6b 	bl	8011d02 <osThreadCreate>
}
 800062c:	bf00      	nop
 800062e:	3758      	adds	r7, #88	; 0x58
 8000630:	46bd      	mov	sp, r7
 8000632:	bdb0      	pop	{r4, r5, r7, pc}
 8000634:	080172a4 	.word	0x080172a4
 8000638:	080172b4 	.word	0x080172b4
 800063c:	080172c4 	.word	0x080172c4
 8000640:	080172d4 	.word	0x080172d4

08000644 <UI_loop>:


void UI_loop(UI_typedef* UI_obj)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	 uint16_t msg_indx;
	 for(;;)
	 {
		if(xQueueReceive(UI_obj->media_rx_messages_q,&msg_indx,osWaitForever))
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f107 010a 	add.w	r1, r7, #10
 8000654:	f04f 32ff 	mov.w	r2, #4294967295
 8000658:	4618      	mov	r0, r3
 800065a:	f012 f817 	bl	801268c <xQueueReceive>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0f3      	beq.n	800064c <UI_loop+0x8>
		{   uint8_t* msg=UI_obj->rx_buffer+msg_indx;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	330e      	adds	r3, #14
 8000668:	897a      	ldrh	r2, [r7, #10]
 800066a:	4413      	add	r3, r2
 800066c:	60fb      	str	r3, [r7, #12]
			UI_parse_message(UI_obj,msg);
 800066e:	68f9      	ldr	r1, [r7, #12]
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f000 f8c7 	bl	8000804 <UI_parse_message>
		if(xQueueReceive(UI_obj->media_rx_messages_q,&msg_indx,osWaitForever))
 8000676:	e7e9      	b.n	800064c <UI_loop+0x8>

08000678 <UI_media_process_byte>:

}


void UI_media_process_byte(UI_typedef* UI_obj,uint8_t rx_byte)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	if(UI_obj->media_status==UI_MEDIA_READY && rx_byte!=0x00)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	7b5b      	ldrb	r3, [r3, #13]
 8000688:	2b0a      	cmp	r3, #10
 800068a:	d160      	bne.n	800074e <UI_media_process_byte+0xd6>
 800068c:	78fb      	ldrb	r3, [r7, #3]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d05d      	beq.n	800074e <UI_media_process_byte+0xd6>
	{
		UI_obj->rx_buffer[UI_obj->rx_buffer_indx]=rx_byte;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000698:	b29b      	uxth	r3, r3
 800069a:	461a      	mov	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4413      	add	r3, r2
 80006a0:	78fa      	ldrb	r2, [r7, #3]
 80006a2:	739a      	strb	r2, [r3, #14]
		if(rx_byte=='\r')
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	2b0d      	cmp	r3, #13
 80006a8:	d132      	bne.n	8000710 <UI_media_process_byte+0x98>
		{
			UI_obj->rx_buffer[UI_obj->rx_buffer_indx]=0x00;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	461a      	mov	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4413      	add	r3, r2
 80006b8:	2200      	movs	r2, #0
 80006ba:	739a      	strb	r2, [r3, #14]
			osMessagePut(UI_obj->media_rx_messages_q,UI_obj->rx_buffer_new_string_indx,0);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	6818      	ldr	r0, [r3, #0]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	2200      	movs	r2, #0
 80006ca:	4619      	mov	r1, r3
 80006cc:	f011 fba2 	bl	8011e14 <osMessagePut>
			if(UI_obj->rx_buffer_indx>UI_RX_BUFFER_THR) UI_obj->rx_buffer_indx=0;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80006dc:	d907      	bls.n	80006ee <UI_media_process_byte+0x76>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 80006e6:	2200      	movs	r2, #0
 80006e8:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
 80006ec:	e008      	b.n	8000700 <UI_media_process_byte+0x88>
			else  UI_obj->rx_buffer_indx++;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	3301      	adds	r3, #1
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
			UI_obj->rx_buffer_new_string_indx=UI_obj->rx_buffer_indx;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000706:	b29a      	uxth	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
 800070e:	e008      	b.n	8000722 <UI_media_process_byte+0xaa>
		}
		else UI_obj->rx_buffer_indx++;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000716:	b29b      	uxth	r3, r3
 8000718:	3301      	adds	r3, #1
 800071a:	b29a      	uxth	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
		if(UI_obj->rx_buffer_indx==UI_RX_BUFFER_SIZE)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000728:	b29b      	uxth	r3, r3
 800072a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800072e:	d11d      	bne.n	800076c <UI_media_process_byte+0xf4>
		{
			UI_obj->rx_buffer_indx=0;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2200      	movs	r2, #0
 8000734:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 8000738:	2200      	movs	r2, #0
 800073a:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
			UI_obj->rx_buffer_new_string_indx=UI_obj->rx_buffer_indx;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000744:	b29a      	uxth	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
		if(UI_obj->rx_buffer_indx==UI_RX_BUFFER_SIZE)
 800074c:	e00e      	b.n	800076c <UI_media_process_byte+0xf4>
		}
	}
	else
	{
		UI_obj->rx_buffer_indx=0;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 8000756:	2200      	movs	r2, #0
 8000758:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
		UI_obj->rx_buffer_new_string_indx=UI_obj->rx_buffer_indx;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000762:	b29a      	uxth	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
	}
}
 800076a:	bf00      	nop
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <UI_media_get_byte>:

uint8_t UI_media_get_byte(UI_typedef* UI_obj,uint8_t* tx_byte)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
	osEvent res=osMessageGet(UI_obj->media_tx_q,0);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6859      	ldr	r1, [r3, #4]
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2200      	movs	r2, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f011 fb83 	bl	8011e94 <osMessageGet>
	if(res.status==osEventMessage)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	2b10      	cmp	r3, #16
 8000792:	d105      	bne.n	80007a0 <UI_media_get_byte+0x2c>
    {
		*tx_byte=res.value.v;
 8000794:	693b      	ldr	r3, [r7, #16]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	701a      	strb	r2, [r3, #0]
		return UI_F_OK;
 800079c:	2300      	movs	r3, #0
 800079e:	e000      	b.n	80007a2 <UI_media_get_byte+0x2e>
    }
  return UI_F_ERR;
 80007a0:	2301      	movs	r3, #1
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <UI_send_msg>:


void UI_send_msg(UI_typedef* UI_obj,uint8_t cmd_id,void* arg)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	60f8      	str	r0, [r7, #12]
 80007b2:	460b      	mov	r3, r1
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	72fb      	strb	r3, [r7, #11]
 memory_region_pointer*  ptr=arg;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	613b      	str	r3, [r7, #16]

 switch(cmd_id)
 80007bc:	7afb      	ldrb	r3, [r7, #11]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d01a      	beq.n	80007f8 <UI_send_msg+0x4e>
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d000      	beq.n	80007c8 <UI_send_msg+0x1e>
		   osMessagePut(UI_obj->media_tx_q,*((uint8_t*)(ptr->start_addr)+i),osWaitForever);
	   }
     break;
 }

}
 80007c6:	e018      	b.n	80007fa <UI_send_msg+0x50>
       for(int i=0;i<ptr->size;i++)
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	e00e      	b.n	80007ec <UI_send_msg+0x42>
		   osMessagePut(UI_obj->media_tx_q,*((uint8_t*)(ptr->start_addr)+i),osWaitForever);
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	6858      	ldr	r0, [r3, #4]
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	4413      	add	r3, r2
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	f04f 32ff 	mov.w	r2, #4294967295
 80007e0:	4619      	mov	r1, r3
 80007e2:	f011 fb17 	bl	8011e14 <osMessagePut>
       for(int i=0;i<ptr->size;i++)
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	3301      	adds	r3, #1
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	685a      	ldr	r2, [r3, #4]
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d8eb      	bhi.n	80007ce <UI_send_msg+0x24>
     break;
 80007f6:	e000      	b.n	80007fa <UI_send_msg+0x50>
	 break;
 80007f8:	bf00      	nop
}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <UI_parse_message>:
	return UI_F_ERR;
}


int UI_parse_message(UI_typedef* UI_obj,uint8_t* msg)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
 char* pch;
 pch=strtok(msg," ");
 800080e:	4919      	ldr	r1, [pc, #100]	; (8000874 <UI_parse_message+0x70>)
 8000810:	6838      	ldr	r0, [r7, #0]
 8000812:	f014 fdd3 	bl	80153bc <strtok>
 8000816:	60b8      	str	r0, [r7, #8]
 for(int i=0;i<UI_MSG_NUM_OF_FUNCTIONS;i++)
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	e022      	b.n	8000864 <UI_parse_message+0x60>
 {
	  if(strcmp(pch,UI_messages_strings[i])==0)
 800081e:	4a16      	ldr	r2, [pc, #88]	; (8000878 <UI_parse_message+0x74>)
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000826:	4619      	mov	r1, r3
 8000828:	68b8      	ldr	r0, [r7, #8]
 800082a:	f7ff fcd1 	bl	80001d0 <strcmp>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d114      	bne.n	800085e <UI_parse_message+0x5a>
		{
			if(UI_functions[i](UI_obj,pch+strlen(pch)+1)==UI_F_OK) return UI_F_OK;
 8000834:	4a11      	ldr	r2, [pc, #68]	; (800087c <UI_parse_message+0x78>)
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800083c:	68b8      	ldr	r0, [r7, #8]
 800083e:	f7ff fcd1 	bl	80001e4 <strlen>
 8000842:	4603      	mov	r3, r0
 8000844:	3301      	adds	r3, #1
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	4413      	add	r3, r2
 800084a:	4619      	mov	r1, r3
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	47a0      	blx	r4
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d101      	bne.n	800085a <UI_parse_message+0x56>
 8000856:	2300      	movs	r3, #0
 8000858:	e008      	b.n	800086c <UI_parse_message+0x68>
      else return UI_F_ERR;
 800085a:	2301      	movs	r3, #1
 800085c:	e006      	b.n	800086c <UI_parse_message+0x68>
 for(int i=0;i<UI_MSG_NUM_OF_FUNCTIONS;i++)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	3301      	adds	r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2b03      	cmp	r3, #3
 8000868:	ddd9      	ble.n	800081e <UI_parse_message+0x1a>
		}

 }
 return UI_F_ERR;
 800086a:	2301      	movs	r3, #1
}
 800086c:	4618      	mov	r0, r3
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	bd90      	pop	{r4, r7, pc}
 8000874:	080172f0 	.word	0x080172f0
 8000878:	200003a4 	.word	0x200003a4
 800087c:	20000394 	.word	0x20000394

08000880 <UI_messages_init>:

void UI_messages_init(UI_typedef* UI_obj)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	UI_functions[UI_MSG_SET] = UI_MSG_SET_f;
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <UI_messages_init+0x44>)
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <UI_messages_init+0x48>)
 800088c:	601a      	str	r2, [r3, #0]
	UI_functions[UI_MSG_SHOW] = UI_MSG_SHOW_f;
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <UI_messages_init+0x44>)
 8000890:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <UI_messages_init+0x4c>)
 8000892:	605a      	str	r2, [r3, #4]
	UI_functions[UI_MSG_RESET] = UI_MSG_RESET_f;
 8000894:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <UI_messages_init+0x44>)
 8000896:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <UI_messages_init+0x50>)
 8000898:	609a      	str	r2, [r3, #8]
	UI_functions[UI_MSG_HELP] = UI_MSG_HELP_f;
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <UI_messages_init+0x44>)
 800089c:	4a0d      	ldr	r2, [pc, #52]	; (80008d4 <UI_messages_init+0x54>)
 800089e:	60da      	str	r2, [r3, #12]

	UI_messages_strings[UI_MSG_SET] = "set";
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <UI_messages_init+0x58>)
 80008a2:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <UI_messages_init+0x5c>)
 80008a4:	601a      	str	r2, [r3, #0]
	UI_messages_strings[UI_MSG_SHOW] = "show";
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <UI_messages_init+0x58>)
 80008a8:	4a0d      	ldr	r2, [pc, #52]	; (80008e0 <UI_messages_init+0x60>)
 80008aa:	605a      	str	r2, [r3, #4]
	UI_messages_strings[UI_MSG_RESET] = "reset";
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <UI_messages_init+0x58>)
 80008ae:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <UI_messages_init+0x64>)
 80008b0:	609a      	str	r2, [r3, #8]
	UI_messages_strings[UI_MSG_HELP] = "help";
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <UI_messages_init+0x58>)
 80008b4:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <UI_messages_init+0x68>)
 80008b6:	60da      	str	r2, [r3, #12]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	20000394 	.word	0x20000394
 80008c8:	08000c85 	.word	0x08000c85
 80008cc:	08000a3d 	.word	0x08000a3d
 80008d0:	0800091d 	.word	0x0800091d
 80008d4:	080008ed 	.word	0x080008ed
 80008d8:	200003a4 	.word	0x200003a4
 80008dc:	080172f4 	.word	0x080172f4
 80008e0:	080172f8 	.word	0x080172f8
 80008e4:	08017300 	.word	0x08017300
 80008e8:	08017308 	.word	0x08017308

080008ec <UI_MSG_HELP_f>:

int UI_MSG_HELP_f(UI_typedef* UI_obj,uint8_t* msg)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
	char * pch;
	memory_region_pointer ptr;

	pch = strtok (NULL," ");//subcomand
 80008f6:	4908      	ldr	r1, [pc, #32]	; (8000918 <UI_MSG_HELP_f+0x2c>)
 80008f8:	2000      	movs	r0, #0
 80008fa:	f014 fd5f 	bl	80153bc <strtok>
 80008fe:	6178      	str	r0, [r7, #20]
	osMessagePut(UI_obj->events_q,UI_EVNT_HELP,1);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	2201      	movs	r2, #1
 8000906:	2103      	movs	r1, #3
 8000908:	4618      	mov	r0, r3
 800090a:	f011 fa83 	bl	8011e14 <osMessagePut>
	return UI_F_OK;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	080172f0 	.word	0x080172f0

0800091c <UI_MSG_RESET_f>:

int UI_MSG_RESET_f(UI_typedef* UI_obj,uint8_t* msg)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
	char * pch;
	memory_region_pointer ptr;

	pch = strtok (NULL," ");//subcomand
 8000926:	493c      	ldr	r1, [pc, #240]	; (8000a18 <UI_MSG_RESET_f+0xfc>)
 8000928:	2000      	movs	r0, #0
 800092a:	f014 fd47 	bl	80153bc <strtok>
 800092e:	6178      	str	r0, [r7, #20]
	if(strcmp(pch,"settings")==0){
 8000930:	493a      	ldr	r1, [pc, #232]	; (8000a1c <UI_MSG_RESET_f+0x100>)
 8000932:	6978      	ldr	r0, [r7, #20]
 8000934:	f7ff fc4c 	bl	80001d0 <strcmp>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d135      	bne.n	80009aa <UI_MSG_RESET_f+0x8e>
		icListen.settings->wav_sample_rate=ICLISTEN_DEFAULT_WAV_SAMPLE_RATE;
 800093e:	4b38      	ldr	r3, [pc, #224]	; (8000a20 <UI_MSG_RESET_f+0x104>)
 8000940:	6a1b      	ldr	r3, [r3, #32]
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
 8000946:	2200      	movs	r2, #0
 8000948:	f042 027d 	orr.w	r2, r2, #125	; 0x7d
 800094c:	705a      	strb	r2, [r3, #1]
 800094e:	2200      	movs	r2, #0
 8000950:	709a      	strb	r2, [r3, #2]
 8000952:	2200      	movs	r2, #0
 8000954:	70da      	strb	r2, [r3, #3]
		icListen.settings->wav_sample_bit_depth=ICLISTEN_DEFAULT_WAV_SAMPLE_BIT_DEPTH;
 8000956:	4b32      	ldr	r3, [pc, #200]	; (8000a20 <UI_MSG_RESET_f+0x104>)
 8000958:	6a1b      	ldr	r3, [r3, #32]
 800095a:	2200      	movs	r2, #0
 800095c:	f042 0218 	orr.w	r2, r2, #24
 8000960:	711a      	strb	r2, [r3, #4]
 8000962:	2200      	movs	r2, #0
 8000964:	715a      	strb	r2, [r3, #5]
 8000966:	2200      	movs	r2, #0
 8000968:	719a      	strb	r2, [r3, #6]
 800096a:	2200      	movs	r2, #0
 800096c:	71da      	strb	r2, [r3, #7]
		icListen.settings->file_duration=ICLISTEN_DEFAULT_FILE_DURATION;
 800096e:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <UI_MSG_RESET_f+0x104>)
 8000970:	6a1b      	ldr	r3, [r3, #32]
 8000972:	2200      	movs	r2, #0
 8000974:	f042 0278 	orr.w	r2, r2, #120	; 0x78
 8000978:	721a      	strb	r2, [r3, #8]
 800097a:	2200      	movs	r2, #0
 800097c:	725a      	strb	r2, [r3, #9]
 800097e:	2200      	movs	r2, #0
 8000980:	729a      	strb	r2, [r3, #10]
 8000982:	2200      	movs	r2, #0
 8000984:	72da      	strb	r2, [r3, #11]
		icListen.settings->file_index=0;
 8000986:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <UI_MSG_RESET_f+0x104>)
 8000988:	6a1b      	ldr	r3, [r3, #32]
 800098a:	2200      	movs	r2, #0
 800098c:	731a      	strb	r2, [r3, #12]
 800098e:	2200      	movs	r2, #0
 8000990:	735a      	strb	r2, [r3, #13]
 8000992:	2200      	movs	r2, #0
 8000994:	739a      	strb	r2, [r3, #14]
 8000996:	2200      	movs	r2, #0
 8000998:	73da      	strb	r2, [r3, #15]
		mcu_flash_save(&mcu_flash);
 800099a:	4822      	ldr	r0, [pc, #136]	; (8000a24 <UI_MSG_RESET_f+0x108>)
 800099c:	f001 fe64 	bl	8002668 <mcu_flash_save>
		sprintf(temp_array,"ok\r");
 80009a0:	4921      	ldr	r1, [pc, #132]	; (8000a28 <UI_MSG_RESET_f+0x10c>)
 80009a2:	4822      	ldr	r0, [pc, #136]	; (8000a2c <UI_MSG_RESET_f+0x110>)
 80009a4:	f014 fca4 	bl	80152f0 <siprintf>
 80009a8:	e01c      	b.n	80009e4 <UI_MSG_RESET_f+0xc8>
	}
	else if(strcmp(pch,"file_index")==0){
 80009aa:	4921      	ldr	r1, [pc, #132]	; (8000a30 <UI_MSG_RESET_f+0x114>)
 80009ac:	6978      	ldr	r0, [r7, #20]
 80009ae:	f7ff fc0f 	bl	80001d0 <strcmp>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d111      	bne.n	80009dc <UI_MSG_RESET_f+0xc0>
		icListen.settings->file_index=0;
 80009b8:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <UI_MSG_RESET_f+0x104>)
 80009ba:	6a1b      	ldr	r3, [r3, #32]
 80009bc:	2200      	movs	r2, #0
 80009be:	731a      	strb	r2, [r3, #12]
 80009c0:	2200      	movs	r2, #0
 80009c2:	735a      	strb	r2, [r3, #13]
 80009c4:	2200      	movs	r2, #0
 80009c6:	739a      	strb	r2, [r3, #14]
 80009c8:	2200      	movs	r2, #0
 80009ca:	73da      	strb	r2, [r3, #15]
		mcu_flash_save(&mcu_flash);
 80009cc:	4815      	ldr	r0, [pc, #84]	; (8000a24 <UI_MSG_RESET_f+0x108>)
 80009ce:	f001 fe4b 	bl	8002668 <mcu_flash_save>
		sprintf(temp_array,"ok\r");
 80009d2:	4915      	ldr	r1, [pc, #84]	; (8000a28 <UI_MSG_RESET_f+0x10c>)
 80009d4:	4815      	ldr	r0, [pc, #84]	; (8000a2c <UI_MSG_RESET_f+0x110>)
 80009d6:	f014 fc8b 	bl	80152f0 <siprintf>
 80009da:	e003      	b.n	80009e4 <UI_MSG_RESET_f+0xc8>
	}
	else{
		sprintf(temp_array,"settings\rfile_index\r");
 80009dc:	4915      	ldr	r1, [pc, #84]	; (8000a34 <UI_MSG_RESET_f+0x118>)
 80009de:	4813      	ldr	r0, [pc, #76]	; (8000a2c <UI_MSG_RESET_f+0x110>)
 80009e0:	f014 fc86 	bl	80152f0 <siprintf>
	}
	temp_ptr.start_addr=temp_array;
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <UI_MSG_RESET_f+0x11c>)
 80009e6:	4a11      	ldr	r2, [pc, #68]	; (8000a2c <UI_MSG_RESET_f+0x110>)
 80009e8:	601a      	str	r2, [r3, #0]
	temp_ptr.size=strlen(temp_array);
 80009ea:	4810      	ldr	r0, [pc, #64]	; (8000a2c <UI_MSG_RESET_f+0x110>)
 80009ec:	f7ff fbfa 	bl	80001e4 <strlen>
 80009f0:	4603      	mov	r3, r0
 80009f2:	4a11      	ldr	r2, [pc, #68]	; (8000a38 <UI_MSG_RESET_f+0x11c>)
 80009f4:	6053      	str	r3, [r2, #4]
	UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 80009f6:	4a10      	ldr	r2, [pc, #64]	; (8000a38 <UI_MSG_RESET_f+0x11c>)
 80009f8:	2101      	movs	r1, #1
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff fed5 	bl	80007aa <UI_send_msg>
	osMessagePut(UI_obj->events_q,UI_EVNT_RESET,1);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	2201      	movs	r2, #1
 8000a06:	2102      	movs	r1, #2
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f011 fa03 	bl	8011e14 <osMessagePut>
	return UI_F_OK;
 8000a0e:	2300      	movs	r3, #0
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	080172f0 	.word	0x080172f0
 8000a1c:	08017310 	.word	0x08017310
 8000a20:	20000800 	.word	0x20000800
 8000a24:	20000e78 	.word	0x20000e78
 8000a28:	0801731c 	.word	0x0801731c
 8000a2c:	200003bc 	.word	0x200003bc
 8000a30:	08017320 	.word	0x08017320
 8000a34:	0801732c 	.word	0x0801732c
 8000a38:	200003b4 	.word	0x200003b4

08000a3c <UI_MSG_SHOW_f>:

int UI_MSG_SHOW_f(UI_typedef* UI_obj,uint8_t* msg)
{
 8000a3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a40:	b095      	sub	sp, #84	; 0x54
 8000a42:	af0c      	add	r7, sp, #48	; 0x30
 8000a44:	6178      	str	r0, [r7, #20]
 8000a46:	6139      	str	r1, [r7, #16]
	char * pch;
	pch = strtok (NULL," ");//subcomand
 8000a48:	496d      	ldr	r1, [pc, #436]	; (8000c00 <UI_MSG_SHOW_f+0x1c4>)
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f014 fcb6 	bl	80153bc <strtok>
 8000a50:	61b8      	str	r0, [r7, #24]

	if(strcmp(pch,"sensor")==0){
 8000a52:	496c      	ldr	r1, [pc, #432]	; (8000c04 <UI_MSG_SHOW_f+0x1c8>)
 8000a54:	69b8      	ldr	r0, [r7, #24]
 8000a56:	f7ff fbbb 	bl	80001d0 <strcmp>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d146      	bne.n	8000aee <UI_MSG_SHOW_f+0xb2>
                           "Seq err:%d\r"
				           "Misconfig err:%d\r"
				           "Last msg num:%d\r"
				           "File index:%d\r"
				           "Disc free:%d\r"
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.wav_misconfig_err,icListen.last_collect_msg_num,icListen.settings->file_index,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 8000a60:	4b69      	ldr	r3, [pc, #420]	; (8000c08 <UI_MSG_SHOW_f+0x1cc>)
 8000a62:	7f1b      	ldrb	r3, [r3, #28]
		sprintf(temp_array,"Device type: %d\r"
 8000a64:	4698      	mov	r8, r3
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.wav_misconfig_err,icListen.last_collect_msg_num,icListen.settings->file_index,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 8000a66:	4b68      	ldr	r3, [pc, #416]	; (8000c08 <UI_MSG_SHOW_f+0x1cc>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
		sprintf(temp_array,"Device type: %d\r"
 8000a6a:	4699      	mov	r9, r3
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.wav_misconfig_err,icListen.last_collect_msg_num,icListen.settings->file_index,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 8000a6c:	4b66      	ldr	r3, [pc, #408]	; (8000c08 <UI_MSG_SHOW_f+0x1cc>)
 8000a6e:	7f5b      	ldrb	r3, [r3, #29]
		sprintf(temp_array,"Device type: %d\r"
 8000a70:	60fb      	str	r3, [r7, #12]
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.wav_misconfig_err,icListen.last_collect_msg_num,icListen.settings->file_index,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 8000a72:	4b65      	ldr	r3, [pc, #404]	; (8000c08 <UI_MSG_SHOW_f+0x1cc>)
 8000a74:	6a1b      	ldr	r3, [r3, #32]
		sprintf(temp_array,"Device type: %d\r"
 8000a76:	689b      	ldr	r3, [r3, #8]
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.wav_misconfig_err,icListen.last_collect_msg_num,icListen.settings->file_index,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 8000a78:	4a63      	ldr	r2, [pc, #396]	; (8000c08 <UI_MSG_SHOW_f+0x1cc>)
 8000a7a:	6a12      	ldr	r2, [r2, #32]
		sprintf(temp_array,"Device type: %d\r"
 8000a7c:	6852      	ldr	r2, [r2, #4]
 8000a7e:	60ba      	str	r2, [r7, #8]
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.wav_misconfig_err,icListen.last_collect_msg_num,icListen.settings->file_index,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 8000a80:	4961      	ldr	r1, [pc, #388]	; (8000c08 <UI_MSG_SHOW_f+0x1cc>)
 8000a82:	6a09      	ldr	r1, [r1, #32]
		sprintf(temp_array,"Device type: %d\r"
 8000a84:	6809      	ldr	r1, [r1, #0]
 8000a86:	4860      	ldr	r0, [pc, #384]	; (8000c08 <UI_MSG_SHOW_f+0x1cc>)
 8000a88:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8000a8a:	4c5f      	ldr	r4, [pc, #380]	; (8000c08 <UI_MSG_SHOW_f+0x1cc>)
 8000a8c:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8000a8e:	4d5e      	ldr	r5, [pc, #376]	; (8000c08 <UI_MSG_SHOW_f+0x1cc>)
 8000a90:	6a6d      	ldr	r5, [r5, #36]	; 0x24
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.wav_misconfig_err,icListen.last_collect_msg_num,icListen.settings->file_index,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 8000a92:	4e5d      	ldr	r6, [pc, #372]	; (8000c08 <UI_MSG_SHOW_f+0x1cc>)
 8000a94:	6a36      	ldr	r6, [r6, #32]
		sprintf(temp_array,"Device type: %d\r"
 8000a96:	68f6      	ldr	r6, [r6, #12]
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.wav_misconfig_err,icListen.last_collect_msg_num,icListen.settings->file_index,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 8000a98:	4a5c      	ldr	r2, [pc, #368]	; (8000c0c <UI_MSG_SHOW_f+0x1d0>)
 8000a9a:	f892 c910 	ldrb.w	ip, [r2, #2320]	; 0x910
 8000a9e:	46e6      	mov	lr, ip
		sprintf(temp_array,"Device type: %d\r"
 8000aa0:	4a5a      	ldr	r2, [pc, #360]	; (8000c0c <UI_MSG_SHOW_f+0x1d0>)
 8000aa2:	f44f 7c11 	mov.w	ip, #580	; 0x244
 8000aa6:	fb0c fc0e 	mul.w	ip, ip, lr
 8000aaa:	4494      	add	ip, r2
 8000aac:	f50c 7c10 	add.w	ip, ip, #576	; 0x240
 8000ab0:	f8dc 2000 	ldr.w	r2, [ip]
 8000ab4:	607a      	str	r2, [r7, #4]
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.wav_misconfig_err,icListen.last_collect_msg_num,icListen.settings->file_index,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 8000ab6:	4a55      	ldr	r2, [pc, #340]	; (8000c0c <UI_MSG_SHOW_f+0x1d0>)
 8000ab8:	f892 c910 	ldrb.w	ip, [r2, #2320]	; 0x910
		sprintf(temp_array,"Device type: %d\r"
 8000abc:	4662      	mov	r2, ip
 8000abe:	920b      	str	r2, [sp, #44]	; 0x2c
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	920a      	str	r2, [sp, #40]	; 0x28
 8000ac4:	9609      	str	r6, [sp, #36]	; 0x24
 8000ac6:	9508      	str	r5, [sp, #32]
 8000ac8:	9407      	str	r4, [sp, #28]
 8000aca:	9006      	str	r0, [sp, #24]
 8000acc:	9105      	str	r1, [sp, #20]
 8000ace:	68ba      	ldr	r2, [r7, #8]
 8000ad0:	9204      	str	r2, [sp, #16]
 8000ad2:	9303      	str	r3, [sp, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	9302      	str	r3, [sp, #8]
 8000ad8:	4b4d      	ldr	r3, [pc, #308]	; (8000c10 <UI_MSG_SHOW_f+0x1d4>)
 8000ada:	9301      	str	r3, [sp, #4]
 8000adc:	4b4d      	ldr	r3, [pc, #308]	; (8000c14 <UI_MSG_SHOW_f+0x1d8>)
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	464b      	mov	r3, r9
 8000ae2:	4642      	mov	r2, r8
 8000ae4:	494c      	ldr	r1, [pc, #304]	; (8000c18 <UI_MSG_SHOW_f+0x1dc>)
 8000ae6:	484d      	ldr	r0, [pc, #308]	; (8000c1c <UI_MSG_SHOW_f+0x1e0>)
 8000ae8:	f014 fc02 	bl	80152f0 <siprintf>
 8000aec:	e06c      	b.n	8000bc8 <UI_MSG_SHOW_f+0x18c>
	}
	else if(strcmp(pch,"storage")==0){
 8000aee:	494c      	ldr	r1, [pc, #304]	; (8000c20 <UI_MSG_SHOW_f+0x1e4>)
 8000af0:	69b8      	ldr	r0, [r7, #24]
 8000af2:	f7ff fb6d 	bl	80001d0 <strcmp>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d138      	bne.n	8000b6e <UI_MSG_SHOW_f+0x132>
		temp_array[0]=0x00;
 8000afc:	4b47      	ldr	r3, [pc, #284]	; (8000c1c <UI_MSG_SHOW_f+0x1e0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
 8000b06:	e02e      	b.n	8000b66 <UI_MSG_SHOW_f+0x12a>
		{
		 sprintf(temp_array+strlen(temp_array),"Disk: %d\rStatus: %d\rSize: %d KB\rFree space: %d KB\r",i,microsd_storage.disks[i].status,microsd_storage.disks[i].size,microsd_storage.disks[i].free_space);
 8000b08:	4844      	ldr	r0, [pc, #272]	; (8000c1c <UI_MSG_SHOW_f+0x1e0>)
 8000b0a:	f7ff fb6b 	bl	80001e4 <strlen>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	4a42      	ldr	r2, [pc, #264]	; (8000c1c <UI_MSG_SHOW_f+0x1e0>)
 8000b12:	1898      	adds	r0, r3, r2
 8000b14:	4a3d      	ldr	r2, [pc, #244]	; (8000c0c <UI_MSG_SHOW_f+0x1d0>)
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000b1c:	fb01 f303 	mul.w	r3, r1, r3
 8000b20:	4413      	add	r3, r2
 8000b22:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	461d      	mov	r5, r3
 8000b2a:	4a38      	ldr	r2, [pc, #224]	; (8000c0c <UI_MSG_SHOW_f+0x1d0>)
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000b32:	fb01 f303 	mul.w	r3, r1, r3
 8000b36:	4413      	add	r3, r2
 8000b38:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4933      	ldr	r1, [pc, #204]	; (8000c0c <UI_MSG_SHOW_f+0x1d0>)
 8000b40:	69fa      	ldr	r2, [r7, #28]
 8000b42:	f44f 7411 	mov.w	r4, #580	; 0x244
 8000b46:	fb04 f202 	mul.w	r2, r4, r2
 8000b4a:	440a      	add	r2, r1
 8000b4c:	f502 7210 	add.w	r2, r2, #576	; 0x240
 8000b50:	6812      	ldr	r2, [r2, #0]
 8000b52:	9201      	str	r2, [sp, #4]
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	462b      	mov	r3, r5
 8000b58:	69fa      	ldr	r2, [r7, #28]
 8000b5a:	4932      	ldr	r1, [pc, #200]	; (8000c24 <UI_MSG_SHOW_f+0x1e8>)
 8000b5c:	f014 fbc8 	bl	80152f0 <siprintf>
		for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	3301      	adds	r3, #1
 8000b64:	61fb      	str	r3, [r7, #28]
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	2b03      	cmp	r3, #3
 8000b6a:	ddcd      	ble.n	8000b08 <UI_MSG_SHOW_f+0xcc>
 8000b6c:	e02c      	b.n	8000bc8 <UI_MSG_SHOW_f+0x18c>
		}
	}
	else if(strcmp(pch,"clock")==0){
 8000b6e:	492e      	ldr	r1, [pc, #184]	; (8000c28 <UI_MSG_SHOW_f+0x1ec>)
 8000b70:	69b8      	ldr	r0, [r7, #24]
 8000b72:	f7ff fb2d 	bl	80001d0 <strcmp>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d121      	bne.n	8000bc0 <UI_MSG_SHOW_f+0x184>
		temp_array[0]=0x00;
 8000b7c:	4b27      	ldr	r3, [pc, #156]	; (8000c1c <UI_MSG_SHOW_f+0x1e0>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	701a      	strb	r2, [r3, #0]
		read_time(&rtc);
 8000b82:	482a      	ldr	r0, [pc, #168]	; (8000c2c <UI_MSG_SHOW_f+0x1f0>)
 8000b84:	f001 fdd2 	bl	800272c <read_time>
        sprintf(temp_array,"Clock: %02d:%02d:%02d %02d/%02d/%02d\r",rtc.time.Hours,rtc.time.Minutes,rtc.time.Seconds,rtc.date.Date,rtc.date.Month,rtc.date.Year);
 8000b88:	4b28      	ldr	r3, [pc, #160]	; (8000c2c <UI_MSG_SHOW_f+0x1f0>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	461c      	mov	r4, r3
 8000b8e:	4b27      	ldr	r3, [pc, #156]	; (8000c2c <UI_MSG_SHOW_f+0x1f0>)
 8000b90:	785b      	ldrb	r3, [r3, #1]
 8000b92:	461d      	mov	r5, r3
 8000b94:	4b25      	ldr	r3, [pc, #148]	; (8000c2c <UI_MSG_SHOW_f+0x1f0>)
 8000b96:	789b      	ldrb	r3, [r3, #2]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b24      	ldr	r3, [pc, #144]	; (8000c2c <UI_MSG_SHOW_f+0x1f0>)
 8000b9c:	7d9b      	ldrb	r3, [r3, #22]
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4b22      	ldr	r3, [pc, #136]	; (8000c2c <UI_MSG_SHOW_f+0x1f0>)
 8000ba2:	7d5b      	ldrb	r3, [r3, #21]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <UI_MSG_SHOW_f+0x1f0>)
 8000ba8:	7ddb      	ldrb	r3, [r3, #23]
 8000baa:	9303      	str	r3, [sp, #12]
 8000bac:	9002      	str	r0, [sp, #8]
 8000bae:	9101      	str	r1, [sp, #4]
 8000bb0:	9200      	str	r2, [sp, #0]
 8000bb2:	462b      	mov	r3, r5
 8000bb4:	4622      	mov	r2, r4
 8000bb6:	491e      	ldr	r1, [pc, #120]	; (8000c30 <UI_MSG_SHOW_f+0x1f4>)
 8000bb8:	4818      	ldr	r0, [pc, #96]	; (8000c1c <UI_MSG_SHOW_f+0x1e0>)
 8000bba:	f014 fb99 	bl	80152f0 <siprintf>
 8000bbe:	e003      	b.n	8000bc8 <UI_MSG_SHOW_f+0x18c>
	}
	else{
		sprintf(temp_array,"sensor\rstorage\rclock\r");
 8000bc0:	491c      	ldr	r1, [pc, #112]	; (8000c34 <UI_MSG_SHOW_f+0x1f8>)
 8000bc2:	4816      	ldr	r0, [pc, #88]	; (8000c1c <UI_MSG_SHOW_f+0x1e0>)
 8000bc4:	f014 fb94 	bl	80152f0 <siprintf>
	}

	temp_ptr.start_addr=temp_array;
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	; (8000c38 <UI_MSG_SHOW_f+0x1fc>)
 8000bca:	4a14      	ldr	r2, [pc, #80]	; (8000c1c <UI_MSG_SHOW_f+0x1e0>)
 8000bcc:	601a      	str	r2, [r3, #0]
	temp_ptr.size=strlen(temp_array);
 8000bce:	4813      	ldr	r0, [pc, #76]	; (8000c1c <UI_MSG_SHOW_f+0x1e0>)
 8000bd0:	f7ff fb08 	bl	80001e4 <strlen>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	4a18      	ldr	r2, [pc, #96]	; (8000c38 <UI_MSG_SHOW_f+0x1fc>)
 8000bd8:	6053      	str	r3, [r2, #4]
	UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000bda:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <UI_MSG_SHOW_f+0x1fc>)
 8000bdc:	2101      	movs	r1, #1
 8000bde:	6978      	ldr	r0, [r7, #20]
 8000be0:	f7ff fde3 	bl	80007aa <UI_send_msg>
	osMessagePut(UI_obj->events_q,UI_EVNT_SHOW,1);
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	2201      	movs	r2, #1
 8000bea:	2101      	movs	r1, #1
 8000bec:	4618      	mov	r0, r3
 8000bee:	f011 f911 	bl	8011e14 <osMessagePut>
	return UI_F_OK;
 8000bf2:	2300      	movs	r3, #0
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3724      	adds	r7, #36	; 0x24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000bfe:	bf00      	nop
 8000c00:	080172f0 	.word	0x080172f0
 8000c04:	08017344 	.word	0x08017344
 8000c08:	20000800 	.word	0x20000800
 8000c0c:	20000e9c 	.word	0x20000e9c
 8000c10:	2000080a 	.word	0x2000080a
 8000c14:	20000802 	.word	0x20000802
 8000c18:	0801734c 	.word	0x0801734c
 8000c1c:	200003bc 	.word	0x200003bc
 8000c20:	08017424 	.word	0x08017424
 8000c24:	0801742c 	.word	0x0801742c
 8000c28:	08017460 	.word	0x08017460
 8000c2c:	20001b88 	.word	0x20001b88
 8000c30:	08017468 	.word	0x08017468
 8000c34:	08017490 	.word	0x08017490
 8000c38:	200003b4 	.word	0x200003b4

08000c3c <IsNotNumber>:

uint8_t IsNotNumber(char* msg)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 for(int i=0;i<strlen(msg);i++){
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	e010      	b.n	8000c6c <IsNotNumber+0x30>
	 if(msg[i]<0x30||msg[i]>0x39) return 1;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	4413      	add	r3, r2
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b2f      	cmp	r3, #47	; 0x2f
 8000c54:	d905      	bls.n	8000c62 <IsNotNumber+0x26>
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b39      	cmp	r3, #57	; 0x39
 8000c60:	d901      	bls.n	8000c66 <IsNotNumber+0x2a>
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00a      	b.n	8000c7c <IsNotNumber+0x40>
 for(int i=0;i<strlen(msg);i++){
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f7ff fab9 	bl	80001e4 <strlen>
 8000c72:	4602      	mov	r2, r0
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d8e7      	bhi.n	8000c4a <IsNotNumber+0xe>
 }
 return 0;
 8000c7a:	2300      	movs	r3, #0
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <UI_MSG_SET_f>:


int UI_MSG_SET_f(UI_typedef* UI_obj,uint8_t* msg)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08c      	sub	sp, #48	; 0x30
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
	char *             pch=0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t   sample_rate;
	uint32_t      duration;
	char*            tmpHr=0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
	char*           tmpMin=0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
	char*           tmpSec=0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	623b      	str	r3, [r7, #32]
	char*           tmpDay=0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
	char*           tmpMon=0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61bb      	str	r3, [r7, #24]
	char*          tmpYear=0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
	uint32_t             tmp;

	pch = strtok (NULL," ");//subcomand
 8000caa:	4997      	ldr	r1, [pc, #604]	; (8000f08 <UI_MSG_SET_f+0x284>)
 8000cac:	2000      	movs	r0, #0
 8000cae:	f014 fb85 	bl	80153bc <strtok>
 8000cb2:	62f8      	str	r0, [r7, #44]	; 0x2c
	if(strcmp(pch,"clock")==0){
 8000cb4:	4995      	ldr	r1, [pc, #596]	; (8000f0c <UI_MSG_SET_f+0x288>)
 8000cb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000cb8:	f7ff fa8a 	bl	80001d0 <strcmp>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f040 80cf 	bne.w	8000e62 <UI_MSG_SET_f+0x1de>

	   tmpHr = strtok (NULL,":");//hours
 8000cc4:	4992      	ldr	r1, [pc, #584]	; (8000f10 <UI_MSG_SET_f+0x28c>)
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f014 fb78 	bl	80153bc <strtok>
 8000ccc:	62b8      	str	r0, [r7, #40]	; 0x28
       tmpMin = strtok (NULL,":");//minutes
 8000cce:	4990      	ldr	r1, [pc, #576]	; (8000f10 <UI_MSG_SET_f+0x28c>)
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f014 fb73 	bl	80153bc <strtok>
 8000cd6:	6278      	str	r0, [r7, #36]	; 0x24
       tmpSec = strtok (NULL," ");//seconds
 8000cd8:	498b      	ldr	r1, [pc, #556]	; (8000f08 <UI_MSG_SET_f+0x284>)
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f014 fb6e 	bl	80153bc <strtok>
 8000ce0:	6238      	str	r0, [r7, #32]
	   tmpDay = strtok (NULL,"/");//day
 8000ce2:	498c      	ldr	r1, [pc, #560]	; (8000f14 <UI_MSG_SET_f+0x290>)
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f014 fb69 	bl	80153bc <strtok>
 8000cea:	61f8      	str	r0, [r7, #28]
	   tmpMon = strtok (NULL,"/");//month
 8000cec:	4989      	ldr	r1, [pc, #548]	; (8000f14 <UI_MSG_SET_f+0x290>)
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f014 fb64 	bl	80153bc <strtok>
 8000cf4:	61b8      	str	r0, [r7, #24]
	   tmpYear = strtok (NULL," ");//year
 8000cf6:	4984      	ldr	r1, [pc, #528]	; (8000f08 <UI_MSG_SET_f+0x284>)
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f014 fb5f 	bl	80153bc <strtok>
 8000cfe:	6178      	str	r0, [r7, #20]

	   if(tmpHr==0||tmpMin==0||tmpSec==0||tmpDay==0||tmpMon==0||tmpYear==0) sprintf(temp_array,"syntax error\r");
 8000d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d00e      	beq.n	8000d24 <UI_MSG_SET_f+0xa0>
 8000d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d00b      	beq.n	8000d24 <UI_MSG_SET_f+0xa0>
 8000d0c:	6a3b      	ldr	r3, [r7, #32]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d008      	beq.n	8000d24 <UI_MSG_SET_f+0xa0>
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d005      	beq.n	8000d24 <UI_MSG_SET_f+0xa0>
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d002      	beq.n	8000d24 <UI_MSG_SET_f+0xa0>
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d104      	bne.n	8000d2e <UI_MSG_SET_f+0xaa>
 8000d24:	497c      	ldr	r1, [pc, #496]	; (8000f18 <UI_MSG_SET_f+0x294>)
 8000d26:	487d      	ldr	r0, [pc, #500]	; (8000f1c <UI_MSG_SET_f+0x298>)
 8000d28:	f014 fae2 	bl	80152f0 <siprintf>
 8000d2c:	e14b      	b.n	8000fc6 <UI_MSG_SET_f+0x342>
	   else{
		   if(IsNotNumber(tmpHr)||IsNotNumber(tmpMin)||IsNotNumber(tmpSec)||IsNotNumber(tmpDay)||IsNotNumber(tmpMon)||IsNotNumber(tmpYear)) sprintf(temp_array,"syntax error\r");
 8000d2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d30:	f7ff ff84 	bl	8000c3c <IsNotNumber>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d11d      	bne.n	8000d76 <UI_MSG_SET_f+0xf2>
 8000d3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d3c:	f7ff ff7e 	bl	8000c3c <IsNotNumber>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d117      	bne.n	8000d76 <UI_MSG_SET_f+0xf2>
 8000d46:	6a38      	ldr	r0, [r7, #32]
 8000d48:	f7ff ff78 	bl	8000c3c <IsNotNumber>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d111      	bne.n	8000d76 <UI_MSG_SET_f+0xf2>
 8000d52:	69f8      	ldr	r0, [r7, #28]
 8000d54:	f7ff ff72 	bl	8000c3c <IsNotNumber>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d10b      	bne.n	8000d76 <UI_MSG_SET_f+0xf2>
 8000d5e:	69b8      	ldr	r0, [r7, #24]
 8000d60:	f7ff ff6c 	bl	8000c3c <IsNotNumber>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d105      	bne.n	8000d76 <UI_MSG_SET_f+0xf2>
 8000d6a:	6978      	ldr	r0, [r7, #20]
 8000d6c:	f7ff ff66 	bl	8000c3c <IsNotNumber>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d004      	beq.n	8000d80 <UI_MSG_SET_f+0xfc>
 8000d76:	4968      	ldr	r1, [pc, #416]	; (8000f18 <UI_MSG_SET_f+0x294>)
 8000d78:	4868      	ldr	r0, [pc, #416]	; (8000f1c <UI_MSG_SET_f+0x298>)
 8000d7a:	f014 fab9 	bl	80152f0 <siprintf>
 8000d7e:	e122      	b.n	8000fc6 <UI_MSG_SET_f+0x342>
		   else{
            tmp=atol(tmpHr);
 8000d80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d82:	f013 fd99 	bl	80148b8 <atol>
 8000d86:	4603      	mov	r3, r0
 8000d88:	60bb      	str	r3, [r7, #8]
            if(tmp>23) sprintf(temp_array,"syntax error\r");
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	2b17      	cmp	r3, #23
 8000d8e:	d904      	bls.n	8000d9a <UI_MSG_SET_f+0x116>
 8000d90:	4961      	ldr	r1, [pc, #388]	; (8000f18 <UI_MSG_SET_f+0x294>)
 8000d92:	4862      	ldr	r0, [pc, #392]	; (8000f1c <UI_MSG_SET_f+0x298>)
 8000d94:	f014 faac 	bl	80152f0 <siprintf>
 8000d98:	e115      	b.n	8000fc6 <UI_MSG_SET_f+0x342>
            else{
              rtc.time.Hours=tmp;
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4b60      	ldr	r3, [pc, #384]	; (8000f20 <UI_MSG_SET_f+0x29c>)
 8000da0:	701a      	strb	r2, [r3, #0]
              tmp=atol(tmpMin);
 8000da2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000da4:	f013 fd88 	bl	80148b8 <atol>
 8000da8:	4603      	mov	r3, r0
 8000daa:	60bb      	str	r3, [r7, #8]
              if(tmp>59) sprintf(temp_array,"syntax error\r");
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	2b3b      	cmp	r3, #59	; 0x3b
 8000db0:	d904      	bls.n	8000dbc <UI_MSG_SET_f+0x138>
 8000db2:	4959      	ldr	r1, [pc, #356]	; (8000f18 <UI_MSG_SET_f+0x294>)
 8000db4:	4859      	ldr	r0, [pc, #356]	; (8000f1c <UI_MSG_SET_f+0x298>)
 8000db6:	f014 fa9b 	bl	80152f0 <siprintf>
 8000dba:	e104      	b.n	8000fc6 <UI_MSG_SET_f+0x342>
              else{
  			    rtc.time.Minutes=tmp;
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	4b57      	ldr	r3, [pc, #348]	; (8000f20 <UI_MSG_SET_f+0x29c>)
 8000dc2:	705a      	strb	r2, [r3, #1]
  			    tmp=atol(tmpSec);
 8000dc4:	6a38      	ldr	r0, [r7, #32]
 8000dc6:	f013 fd77 	bl	80148b8 <atol>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	60bb      	str	r3, [r7, #8]
                if(tmp>59) sprintf(temp_array,"syntax error\r");
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	2b3b      	cmp	r3, #59	; 0x3b
 8000dd2:	d904      	bls.n	8000dde <UI_MSG_SET_f+0x15a>
 8000dd4:	4950      	ldr	r1, [pc, #320]	; (8000f18 <UI_MSG_SET_f+0x294>)
 8000dd6:	4851      	ldr	r0, [pc, #324]	; (8000f1c <UI_MSG_SET_f+0x298>)
 8000dd8:	f014 fa8a 	bl	80152f0 <siprintf>
 8000ddc:	e0f3      	b.n	8000fc6 <UI_MSG_SET_f+0x342>
                else{
  			       rtc.time.Seconds=tmp;
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4b4f      	ldr	r3, [pc, #316]	; (8000f20 <UI_MSG_SET_f+0x29c>)
 8000de4:	709a      	strb	r2, [r3, #2]
  			       tmp=atol(tmpDay);
 8000de6:	69f8      	ldr	r0, [r7, #28]
 8000de8:	f013 fd66 	bl	80148b8 <atol>
 8000dec:	4603      	mov	r3, r0
 8000dee:	60bb      	str	r3, [r7, #8]
  	               if(tmp>31) sprintf(temp_array,"syntax error\r");
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	2b1f      	cmp	r3, #31
 8000df4:	d904      	bls.n	8000e00 <UI_MSG_SET_f+0x17c>
 8000df6:	4948      	ldr	r1, [pc, #288]	; (8000f18 <UI_MSG_SET_f+0x294>)
 8000df8:	4848      	ldr	r0, [pc, #288]	; (8000f1c <UI_MSG_SET_f+0x298>)
 8000dfa:	f014 fa79 	bl	80152f0 <siprintf>
 8000dfe:	e0e2      	b.n	8000fc6 <UI_MSG_SET_f+0x342>
  	               else{
  			         rtc.date.Date=tmp;
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	4b46      	ldr	r3, [pc, #280]	; (8000f20 <UI_MSG_SET_f+0x29c>)
 8000e06:	759a      	strb	r2, [r3, #22]
  			         tmp=atol(tmpMon);
 8000e08:	69b8      	ldr	r0, [r7, #24]
 8000e0a:	f013 fd55 	bl	80148b8 <atol>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	60bb      	str	r3, [r7, #8]
  	                 if(tmp>12) sprintf(temp_array,"syntax error\r");
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	2b0c      	cmp	r3, #12
 8000e16:	d904      	bls.n	8000e22 <UI_MSG_SET_f+0x19e>
 8000e18:	493f      	ldr	r1, [pc, #252]	; (8000f18 <UI_MSG_SET_f+0x294>)
 8000e1a:	4840      	ldr	r0, [pc, #256]	; (8000f1c <UI_MSG_SET_f+0x298>)
 8000e1c:	f014 fa68 	bl	80152f0 <siprintf>
 8000e20:	e0d1      	b.n	8000fc6 <UI_MSG_SET_f+0x342>
  	                 else{
  			           rtc.date.Month=tmp;
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4b3e      	ldr	r3, [pc, #248]	; (8000f20 <UI_MSG_SET_f+0x29c>)
 8000e28:	755a      	strb	r2, [r3, #21]
    			       tmp=atol(tmpYear);
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f013 fd44 	bl	80148b8 <atol>
 8000e30:	4603      	mov	r3, r0
 8000e32:	60bb      	str	r3, [r7, #8]
    	               if(tmp>99) sprintf(temp_array,"syntax error\r");
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	2b63      	cmp	r3, #99	; 0x63
 8000e38:	d904      	bls.n	8000e44 <UI_MSG_SET_f+0x1c0>
 8000e3a:	4937      	ldr	r1, [pc, #220]	; (8000f18 <UI_MSG_SET_f+0x294>)
 8000e3c:	4837      	ldr	r0, [pc, #220]	; (8000f1c <UI_MSG_SET_f+0x298>)
 8000e3e:	f014 fa57 	bl	80152f0 <siprintf>
 8000e42:	e0c0      	b.n	8000fc6 <UI_MSG_SET_f+0x342>
    	               else{
  			             rtc.date.Year=tmp;
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	4b35      	ldr	r3, [pc, #212]	; (8000f20 <UI_MSG_SET_f+0x29c>)
 8000e4a:	75da      	strb	r2, [r3, #23]

  			             rtc.date.WeekDay=RTC_WEEKDAY_MONDAY;
 8000e4c:	4b34      	ldr	r3, [pc, #208]	; (8000f20 <UI_MSG_SET_f+0x29c>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	751a      	strb	r2, [r3, #20]
  			             set_time(&rtc);
 8000e52:	4833      	ldr	r0, [pc, #204]	; (8000f20 <UI_MSG_SET_f+0x29c>)
 8000e54:	f001 fca4 	bl	80027a0 <set_time>
  			             sprintf(temp_array,"ok\r");
 8000e58:	4932      	ldr	r1, [pc, #200]	; (8000f24 <UI_MSG_SET_f+0x2a0>)
 8000e5a:	4830      	ldr	r0, [pc, #192]	; (8000f1c <UI_MSG_SET_f+0x298>)
 8000e5c:	f014 fa48 	bl	80152f0 <siprintf>
 8000e60:	e0b1      	b.n	8000fc6 <UI_MSG_SET_f+0x342>
              }
            }
		   }
	   }
	}
	else if(strcmp(pch,"rate")==0){
 8000e62:	4931      	ldr	r1, [pc, #196]	; (8000f28 <UI_MSG_SET_f+0x2a4>)
 8000e64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e66:	f7ff f9b3 	bl	80001d0 <strcmp>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d169      	bne.n	8000f44 <UI_MSG_SET_f+0x2c0>
		pch = strtok (NULL," ");//rate
 8000e70:	4925      	ldr	r1, [pc, #148]	; (8000f08 <UI_MSG_SET_f+0x284>)
 8000e72:	2000      	movs	r0, #0
 8000e74:	f014 faa2 	bl	80153bc <strtok>
 8000e78:	62f8      	str	r0, [r7, #44]	; 0x2c
		sample_rate=atol(pch);
 8000e7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e7c:	f013 fd1c 	bl	80148b8 <atol>
 8000e80:	4603      	mov	r3, r0
 8000e82:	60fb      	str	r3, [r7, #12]
		if(IsNotNumber(sample_rate)) sprintf(temp_array,"syntax error\r");
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fed8 	bl	8000c3c <IsNotNumber>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d004      	beq.n	8000e9c <UI_MSG_SET_f+0x218>
 8000e92:	4921      	ldr	r1, [pc, #132]	; (8000f18 <UI_MSG_SET_f+0x294>)
 8000e94:	4821      	ldr	r0, [pc, #132]	; (8000f1c <UI_MSG_SET_f+0x298>)
 8000e96:	f014 fa2b 	bl	80152f0 <siprintf>
 8000e9a:	e094      	b.n	8000fc6 <UI_MSG_SET_f+0x342>
		else{
		  if(sample_rate==4000 || sample_rate==8000 || sample_rate==16000 || sample_rate==32000 || sample_rate==48000 || sample_rate==96000 || sample_rate==120000 || sample_rate==240000 || sample_rate==480000){
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000ea2:	d020      	beq.n	8000ee6 <UI_MSG_SET_f+0x262>
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000eaa:	d01c      	beq.n	8000ee6 <UI_MSG_SET_f+0x262>
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000eb2:	d018      	beq.n	8000ee6 <UI_MSG_SET_f+0x262>
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000eba:	d014      	beq.n	8000ee6 <UI_MSG_SET_f+0x262>
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d00f      	beq.n	8000ee6 <UI_MSG_SET_f+0x262>
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	4a18      	ldr	r2, [pc, #96]	; (8000f2c <UI_MSG_SET_f+0x2a8>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d00b      	beq.n	8000ee6 <UI_MSG_SET_f+0x262>
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	4a17      	ldr	r2, [pc, #92]	; (8000f30 <UI_MSG_SET_f+0x2ac>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d007      	beq.n	8000ee6 <UI_MSG_SET_f+0x262>
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	4a16      	ldr	r2, [pc, #88]	; (8000f34 <UI_MSG_SET_f+0x2b0>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d003      	beq.n	8000ee6 <UI_MSG_SET_f+0x262>
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	4a15      	ldr	r2, [pc, #84]	; (8000f38 <UI_MSG_SET_f+0x2b4>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d10b      	bne.n	8000efe <UI_MSG_SET_f+0x27a>
           icListen.settings->wav_sample_rate=sample_rate;
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <UI_MSG_SET_f+0x2b8>)
 8000ee8:	6a1b      	ldr	r3, [r3, #32]
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	601a      	str	r2, [r3, #0]
           mcu_flash_save(&mcu_flash);
 8000eee:	4814      	ldr	r0, [pc, #80]	; (8000f40 <UI_MSG_SET_f+0x2bc>)
 8000ef0:	f001 fbba 	bl	8002668 <mcu_flash_save>
           sprintf(temp_array,"ok\r");
 8000ef4:	490b      	ldr	r1, [pc, #44]	; (8000f24 <UI_MSG_SET_f+0x2a0>)
 8000ef6:	4809      	ldr	r0, [pc, #36]	; (8000f1c <UI_MSG_SET_f+0x298>)
 8000ef8:	f014 f9fa 	bl	80152f0 <siprintf>
 8000efc:	e063      	b.n	8000fc6 <UI_MSG_SET_f+0x342>
		  }
		  else sprintf(temp_array,"syntax error\r");
 8000efe:	4906      	ldr	r1, [pc, #24]	; (8000f18 <UI_MSG_SET_f+0x294>)
 8000f00:	4806      	ldr	r0, [pc, #24]	; (8000f1c <UI_MSG_SET_f+0x298>)
 8000f02:	f014 f9f5 	bl	80152f0 <siprintf>
 8000f06:	e05e      	b.n	8000fc6 <UI_MSG_SET_f+0x342>
 8000f08:	080172f0 	.word	0x080172f0
 8000f0c:	08017460 	.word	0x08017460
 8000f10:	080174a8 	.word	0x080174a8
 8000f14:	080174ac 	.word	0x080174ac
 8000f18:	080174b0 	.word	0x080174b0
 8000f1c:	200003bc 	.word	0x200003bc
 8000f20:	20001b88 	.word	0x20001b88
 8000f24:	0801731c 	.word	0x0801731c
 8000f28:	080174c0 	.word	0x080174c0
 8000f2c:	00017700 	.word	0x00017700
 8000f30:	0001d4c0 	.word	0x0001d4c0
 8000f34:	0003a980 	.word	0x0003a980
 8000f38:	00075300 	.word	0x00075300
 8000f3c:	20000800 	.word	0x20000800
 8000f40:	20000e78 	.word	0x20000e78
		}
	}
	else if(strcmp(pch,"duration")==0){
 8000f44:	492d      	ldr	r1, [pc, #180]	; (8000ffc <UI_MSG_SET_f+0x378>)
 8000f46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000f48:	f7ff f942 	bl	80001d0 <strcmp>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d135      	bne.n	8000fbe <UI_MSG_SET_f+0x33a>
		pch = strtok (NULL," ");//duration
 8000f52:	492b      	ldr	r1, [pc, #172]	; (8001000 <UI_MSG_SET_f+0x37c>)
 8000f54:	2000      	movs	r0, #0
 8000f56:	f014 fa31 	bl	80153bc <strtok>
 8000f5a:	62f8      	str	r0, [r7, #44]	; 0x2c
		duration=atol(pch);
 8000f5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000f5e:	f013 fcab 	bl	80148b8 <atol>
 8000f62:	4603      	mov	r3, r0
 8000f64:	613b      	str	r3, [r7, #16]
		if(IsNotNumber(duration)) sprintf(temp_array,"syntax error\r");
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fe67 	bl	8000c3c <IsNotNumber>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d004      	beq.n	8000f7e <UI_MSG_SET_f+0x2fa>
 8000f74:	4923      	ldr	r1, [pc, #140]	; (8001004 <UI_MSG_SET_f+0x380>)
 8000f76:	4824      	ldr	r0, [pc, #144]	; (8001008 <UI_MSG_SET_f+0x384>)
 8000f78:	f014 f9ba 	bl	80152f0 <siprintf>
 8000f7c:	e023      	b.n	8000fc6 <UI_MSG_SET_f+0x342>
		else{
		  if((icListen.settings->wav_sample_bit_depth/8)*icListen.settings->wav_sample_rate*duration<4294967200){
 8000f7e:	4b23      	ldr	r3, [pc, #140]	; (800100c <UI_MSG_SET_f+0x388>)
 8000f80:	6a1b      	ldr	r3, [r3, #32]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	08db      	lsrs	r3, r3, #3
 8000f86:	4a21      	ldr	r2, [pc, #132]	; (800100c <UI_MSG_SET_f+0x388>)
 8000f88:	6a12      	ldr	r2, [r2, #32]
 8000f8a:	6812      	ldr	r2, [r2, #0]
 8000f8c:	fb02 f303 	mul.w	r3, r2, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	fb02 f303 	mul.w	r3, r2, r3
 8000f96:	f113 0f61 	cmn.w	r3, #97	; 0x61
 8000f9a:	d80b      	bhi.n	8000fb4 <UI_MSG_SET_f+0x330>
           icListen.settings->file_duration=duration;
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	; (800100c <UI_MSG_SET_f+0x388>)
 8000f9e:	6a1b      	ldr	r3, [r3, #32]
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	609a      	str	r2, [r3, #8]
           mcu_flash_save(&mcu_flash);
 8000fa4:	481a      	ldr	r0, [pc, #104]	; (8001010 <UI_MSG_SET_f+0x38c>)
 8000fa6:	f001 fb5f 	bl	8002668 <mcu_flash_save>
           sprintf(temp_array,"ok\r");
 8000faa:	491a      	ldr	r1, [pc, #104]	; (8001014 <UI_MSG_SET_f+0x390>)
 8000fac:	4816      	ldr	r0, [pc, #88]	; (8001008 <UI_MSG_SET_f+0x384>)
 8000fae:	f014 f99f 	bl	80152f0 <siprintf>
 8000fb2:	e008      	b.n	8000fc6 <UI_MSG_SET_f+0x342>
		  }
		  else sprintf(temp_array,"syntax error\r");
 8000fb4:	4913      	ldr	r1, [pc, #76]	; (8001004 <UI_MSG_SET_f+0x380>)
 8000fb6:	4814      	ldr	r0, [pc, #80]	; (8001008 <UI_MSG_SET_f+0x384>)
 8000fb8:	f014 f99a 	bl	80152f0 <siprintf>
 8000fbc:	e003      	b.n	8000fc6 <UI_MSG_SET_f+0x342>
		}
	}
	else{
		sprintf(temp_array,"sensor\rstorage\rclock\r");
 8000fbe:	4916      	ldr	r1, [pc, #88]	; (8001018 <UI_MSG_SET_f+0x394>)
 8000fc0:	4811      	ldr	r0, [pc, #68]	; (8001008 <UI_MSG_SET_f+0x384>)
 8000fc2:	f014 f995 	bl	80152f0 <siprintf>
	}

	temp_ptr.start_addr=temp_array;
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <UI_MSG_SET_f+0x398>)
 8000fc8:	4a0f      	ldr	r2, [pc, #60]	; (8001008 <UI_MSG_SET_f+0x384>)
 8000fca:	601a      	str	r2, [r3, #0]
	temp_ptr.size=strlen(temp_array);
 8000fcc:	480e      	ldr	r0, [pc, #56]	; (8001008 <UI_MSG_SET_f+0x384>)
 8000fce:	f7ff f909 	bl	80001e4 <strlen>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	4a11      	ldr	r2, [pc, #68]	; (800101c <UI_MSG_SET_f+0x398>)
 8000fd6:	6053      	str	r3, [r2, #4]
	UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000fd8:	4a10      	ldr	r2, [pc, #64]	; (800101c <UI_MSG_SET_f+0x398>)
 8000fda:	2101      	movs	r1, #1
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff fbe4 	bl	80007aa <UI_send_msg>
	osMessagePut(UI_obj->events_q,UI_EVNT_SET,1);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f010 ff12 	bl	8011e14 <osMessagePut>
	return UI_F_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3730      	adds	r7, #48	; 0x30
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	080174c8 	.word	0x080174c8
 8001000:	080172f0 	.word	0x080172f0
 8001004:	080174b0 	.word	0x080174b0
 8001008:	200003bc 	.word	0x200003bc
 800100c:	20000800 	.word	0x20000800
 8001010:	20000e78 	.word	0x20000e78
 8001014:	0801731c 	.word	0x0801731c
 8001018:	08017490 	.word	0x08017490
 800101c:	200003b4 	.word	0x200003b4

08001020 <crc16_arc_update>:
};



uint16_t crc16_arc_update( char data, uint16_t accum )
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	460a      	mov	r2, r1
 800102a:	71fb      	strb	r3, [r7, #7]
 800102c:	4613      	mov	r3, r2
 800102e:	80bb      	strh	r3, [r7, #4]
  unsigned char comb_value;
  comb_value = ( accum&0x00ff ) ^ (unsigned char)data;
 8001030:	88bb      	ldrh	r3, [r7, #4]
 8001032:	b25a      	sxtb	r2, r3
 8001034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001038:	4053      	eors	r3, r2
 800103a:	b25b      	sxtb	r3, r3
 800103c:	73fb      	strb	r3, [r7, #15]
  accum = ( accum >> 8 ) ^ crc16_arc_table[ comb_value ];
 800103e:	88bb      	ldrh	r3, [r7, #4]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	b29a      	uxth	r2, r3
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	4906      	ldr	r1, [pc, #24]	; (8001060 <crc16_arc_update+0x40>)
 8001048:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800104c:	4053      	eors	r3, r2
 800104e:	80bb      	strh	r3, [r7, #4]
  return ( accum );
 8001050:	88bb      	ldrh	r3, [r7, #4]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000000 	.word	0x20000000

08001064 <get_crc16_arc>:

uint16_t get_crc16_arc( uint8_t* data,uint16_t length )
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	807b      	strh	r3, [r7, #2]
  uint16_t accm=0;
 8001070:	2300      	movs	r3, #0
 8001072:	81fb      	strh	r3, [r7, #14]

  for(int i=0;i<length;i++)
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	e00d      	b.n	8001096 <get_crc16_arc+0x32>
  {
    accm=crc16_arc_update(data[i], accm);
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	4413      	add	r3, r2
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	89fa      	ldrh	r2, [r7, #14]
 8001084:	4611      	mov	r1, r2
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ffca 	bl	8001020 <crc16_arc_update>
 800108c:	4603      	mov	r3, r0
 800108e:	81fb      	strh	r3, [r7, #14]
  for(int i=0;i<length;i++)
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	3301      	adds	r3, #1
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	887b      	ldrh	r3, [r7, #2]
 8001098:	68ba      	ldr	r2, [r7, #8]
 800109a:	429a      	cmp	r2, r3
 800109c:	dbed      	blt.n	800107a <get_crc16_arc+0x16>
  }

  return accm;
 800109e:	89fb      	ldrh	r3, [r7, #14]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <sd_storage_disk_init>:

extern ss_pp sd_cards_ss[4];
extern UART_HandleTypeDef huart1;

F_RES sd_storage_disk_init(FATFS* fs,char* path)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
	if(f_mount(fs,path,1)==FR_OK) return F_OK;
 80010b2:	2201      	movs	r2, #1
 80010b4:	6839      	ldr	r1, [r7, #0]
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f00f f9fe 	bl	80104b8 <f_mount>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <sd_storage_disk_init+0x1e>
 80010c2:	2300      	movs	r3, #0
 80010c4:	e000      	b.n	80010c8 <sd_storage_disk_init+0x20>
	else return F_ERR;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <sd_storage_init>:
F_RES sd_storage_init(sd_storage_t* self_object)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08c      	sub	sp, #48	; 0x30
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  char tt[10];
  FRESULT res;
  DWORD fre_clust, fre_sect, tot_sect;
  FATFS*  fs;
  self_object->active_disk_indx=0;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
  self_object->num_of_discs=0;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2918 	strb.w	r2, [r3, #2328]	; 0x918
  self_object->status=STORAGE_NOT_INITTIALIZED;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2201      	movs	r2, #1
 80010ec:	f883 2919 	strb.w	r2, [r3, #2329]	; 0x919

  MX_FATFS_Init();
 80010f0:	f009 f8d8 	bl	800a2a4 <MX_FATFS_Init>

  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 80010f4:	2300      	movs	r3, #0
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010f8:	e080      	b.n	80011fc <sd_storage_init+0x12c>
  {
   sprintf(tt,"%d:",i);
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001100:	4953      	ldr	r1, [pc, #332]	; (8001250 <sd_storage_init+0x180>)
 8001102:	4618      	mov	r0, r3
 8001104:	f014 f8f4 	bl	80152f0 <siprintf>
   if(sd_storage_disk_init(&self_object->disks[i].fs,tt)==F_OK){
 8001108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110a:	f44f 7211 	mov.w	r2, #580	; 0x244
 800110e:	fb02 f303 	mul.w	r3, r2, r3
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	f107 0214 	add.w	r2, r7, #20
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ffc3 	bl	80010a8 <sd_storage_disk_init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d15b      	bne.n	80011e0 <sd_storage_init+0x110>
		  self_object->disks[i].status=DISK_PRESENT;
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800112c:	f44f 7111 	mov.w	r1, #580	; 0x244
 8001130:	fb01 f303 	mul.w	r3, r1, r3
 8001134:	4413      	add	r3, r2
 8001136:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
		  self_object->num_of_discs++;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 3918 	ldrb.w	r3, [r3, #2328]	; 0x918
 8001144:	3301      	adds	r3, #1
 8001146:	b2da      	uxtb	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f883 2918 	strb.w	r2, [r3, #2328]	; 0x918
  		  if(f_getfree(tt, &fre_clust, &fs)==FR_OK){
 800114e:	f107 020c 	add.w	r2, r7, #12
 8001152:	f107 0110 	add.w	r1, r7, #16
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4618      	mov	r0, r3
 800115c:	f010 fb7b 	bl	8011856 <f_getfree>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d147      	bne.n	80011f6 <sd_storage_init+0x126>
		    tot_sect = (self_object->disks[i].fs.n_fatent - 2) * self_object->disks[i].fs.csize;
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116a:	f44f 7111 	mov.w	r1, #580	; 0x244
 800116e:	fb01 f303 	mul.w	r3, r1, r3
 8001172:	4413      	add	r3, r2
 8001174:	331c      	adds	r3, #28
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	3b02      	subs	r3, #2
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800117e:	f44f 7011 	mov.w	r0, #580	; 0x244
 8001182:	fb00 f202 	mul.w	r2, r0, r2
 8001186:	440a      	add	r2, r1
 8001188:	320a      	adds	r2, #10
 800118a:	8812      	ldrh	r2, [r2, #0]
 800118c:	fb02 f303 	mul.w	r3, r2, r3
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
			fre_sect = fre_clust * self_object->disks[i].fs.csize;
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001196:	f44f 7111 	mov.w	r1, #580	; 0x244
 800119a:	fb01 f303 	mul.w	r3, r1, r3
 800119e:	4413      	add	r3, r2
 80011a0:	330a      	adds	r3, #10
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	fb02 f303 	mul.w	r3, r2, r3
 80011ac:	623b      	str	r3, [r7, #32]
			self_object->disks[i].size=tot_sect/2;
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	085a      	lsrs	r2, r3, #1
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b6:	f44f 7011 	mov.w	r0, #580	; 0x244
 80011ba:	fb00 f303 	mul.w	r3, r0, r3
 80011be:	440b      	add	r3, r1
 80011c0:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 80011c4:	601a      	str	r2, [r3, #0]
			self_object->disks[i].free_space=fre_sect/2;
 80011c6:	6a3b      	ldr	r3, [r7, #32]
 80011c8:	085a      	lsrs	r2, r3, #1
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ce:	f44f 7011 	mov.w	r0, #580	; 0x244
 80011d2:	fb00 f303 	mul.w	r3, r0, r3
 80011d6:	440b      	add	r3, r1
 80011d8:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	e00a      	b.n	80011f6 <sd_storage_init+0x126>
		  }
   }
   else{
		 self_object->disks[i].status=DISK_ABSENT;
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e4:	f44f 7111 	mov.w	r1, #580	; 0x244
 80011e8:	fb01 f303 	mul.w	r3, r1, r3
 80011ec:	4413      	add	r3, r2
 80011ee:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80011f2:	2201      	movs	r2, #1
 80011f4:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 80011f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f8:	3301      	adds	r3, #1
 80011fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011fe:	2b03      	cmp	r3, #3
 8001200:	f77f af7b 	ble.w	80010fa <sd_storage_init+0x2a>
   }
  }

  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8001204:	2300      	movs	r3, #0
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
 8001208:	e019      	b.n	800123e <sd_storage_init+0x16e>
  {
   if(self_object->disks[i].status==DISK_PRESENT){
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800120e:	f44f 7111 	mov.w	r1, #580	; 0x244
 8001212:	fb01 f303 	mul.w	r3, r1, r3
 8001216:	4413      	add	r3, r2
 8001218:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d10a      	bne.n	8001238 <sd_storage_init+0x168>
	   self_object->active_disk_indx=i;
 8001222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001224:	b2da      	uxtb	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
	   self_object->status=STORAGE_INITTIALIZED;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2919 	strb.w	r2, [r3, #2329]	; 0x919
	   return F_OK;
 8001234:	2300      	movs	r3, #0
 8001236:	e006      	b.n	8001246 <sd_storage_init+0x176>
  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8001238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123a:	3301      	adds	r3, #1
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
 800123e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001240:	2b03      	cmp	r3, #3
 8001242:	dde2      	ble.n	800120a <sd_storage_init+0x13a>
   }
  }
  return F_ERR;
 8001244:	2301      	movs	r3, #1
}
 8001246:	4618      	mov	r0, r3
 8001248:	3730      	adds	r7, #48	; 0x30
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	080174d4 	.word	0x080174d4

08001254 <sd_storage_link_ss>:

F_RES sd_storage_link_ss(sd_storage_t* self_object,uint8_t disk_num, uint16_t sd_ss_pin,GPIO_TypeDef* sd_ss_port)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	460b      	mov	r3, r1
 8001260:	72fb      	strb	r3, [r7, #11]
 8001262:	4613      	mov	r3, r2
 8001264:	813b      	strh	r3, [r7, #8]
	  sd_cards_ss[disk_num].sd_ss_pin=sd_ss_pin;
 8001266:	7afb      	ldrb	r3, [r7, #11]
 8001268:	4908      	ldr	r1, [pc, #32]	; (800128c <sd_storage_link_ss+0x38>)
 800126a:	893a      	ldrh	r2, [r7, #8]
 800126c:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
	  sd_cards_ss[disk_num].sd_ss_port=sd_ss_port;
 8001270:	7afb      	ldrb	r3, [r7, #11]
 8001272:	4a06      	ldr	r2, [pc, #24]	; (800128c <sd_storage_link_ss+0x38>)
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	4413      	add	r3, r2
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	605a      	str	r2, [r3, #4]
	  return F_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20001bb0 	.word	0x20001bb0

08001290 <sd_storage_set_next_disk>:
F_RES sd_storage_read(sd_storage_t* self_object)
{

}
F_RES sd_storage_set_next_disk(sd_storage_t* self_object)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 int i=self_object->active_disk_indx+1;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 3910 	ldrb.w	r3, [r3, #2320]	; 0x910
 800129e:	3301      	adds	r3, #1
 80012a0:	60fb      	str	r3, [r7, #12]
 for(;i<SD_STORAGE_NUM_DISKS;i++)
 80012a2:	e015      	b.n	80012d0 <sd_storage_set_next_disk+0x40>
 {
   if(self_object->disks[i].status==DISK_PRESENT){
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f44f 7111 	mov.w	r1, #580	; 0x244
 80012ac:	fb01 f303 	mul.w	r3, r1, r3
 80012b0:	4413      	add	r3, r2
 80012b2:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d106      	bne.n	80012ca <sd_storage_set_next_disk+0x3a>
	 self_object->active_disk_indx=i;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
	 return F_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	e006      	b.n	80012d8 <sd_storage_set_next_disk+0x48>
 for(;i<SD_STORAGE_NUM_DISKS;i++)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3301      	adds	r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	dde6      	ble.n	80012a4 <sd_storage_set_next_disk+0x14>
   }
 }
 return F_ERR;
 80012d6:	2301      	movs	r3, #1
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4a07      	ldr	r2, [pc, #28]	; (8001310 <vApplicationGetIdleTaskMemory+0x2c>)
 80012f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	4a06      	ldr	r2, [pc, #24]	; (8001314 <vApplicationGetIdleTaskMemory+0x30>)
 80012fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2280      	movs	r2, #128	; 0x80
 8001300:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001302:	bf00      	nop
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	2000054c 	.word	0x2000054c
 8001314:	20000600 	.word	0x20000600

08001318 <icListen_init_sensor_status>:

icListen_object_typedef icListen;


void icListen_init_sensor_status(icListen_object_typedef* self_object)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	self_object->status=ICLISTEN_DISCONNECTED;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	775a      	strb	r2, [r3, #29]
	memset(self_object->build_date,0x00,18);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	330a      	adds	r3, #10
 800132a:	2212      	movs	r2, #18
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f013 fc0a 	bl	8014b48 <memset>
	memset(self_object->firmware_version,0x00,8);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3302      	adds	r3, #2
 8001338:	2208      	movs	r2, #8
 800133a:	2100      	movs	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f013 fc03 	bl	8014b48 <memset>
	self_object->serial_number=0;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	801a      	strh	r2, [r3, #0]
	self_object->device_type=0;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	771a      	strb	r2, [r3, #28]
	self_object->last_collect_msg_num=0;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	625a      	str	r2, [r3, #36]	; 0x24
	self_object->collect_seq_num_err=0;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	629a      	str	r2, [r3, #40]	; 0x28
	self_object->wav_misconfig_err=0;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	62da      	str	r2, [r3, #44]	; 0x2c

}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <icListen_prepare_setup_msg>:

void icListen_prepare_setup_msg(icListen_setup_full_msg* msg,uint32_t wav_sample_rate,uint32_t wav_sample_bit_depth)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
	msg->basic_hdr.sync=MSG_SYNC;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	222a      	movs	r2, #42	; 0x2a
 8001378:	701a      	strb	r2, [r3, #0]
	msg->basic_hdr.type=MSG_TYPE_JOB_SETUP;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2244      	movs	r2, #68	; 0x44
 800137e:	705a      	strb	r2, [r3, #1]
	msg->setup_type=MSG_JOB_SETUP_WAVEFORM_HF;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2200      	movs	r2, #0
 8001384:	f042 0214 	orr.w	r2, r2, #20
 8001388:	711a      	strb	r2, [r3, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	715a      	strb	r2, [r3, #5]
	msg->num_of_tags=11;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2200      	movs	r2, #0
 8001392:	f042 020b 	orr.w	r2, r2, #11
 8001396:	719a      	strb	r2, [r3, #6]
 8001398:	2200      	movs	r2, #0
 800139a:	71da      	strb	r2, [r3, #7]

	msg->t01_log_start_time.tag=MSG_JOB_SETUP_TAG_LOG_START_TIME;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2200      	movs	r2, #0
 80013a0:	f042 0201 	orr.w	r2, r2, #1
 80013a4:	721a      	strb	r2, [r3, #8]
 80013a6:	2200      	movs	r2, #0
 80013a8:	725a      	strb	r2, [r3, #9]
	msg->t01_log_start_time.tag_value=4294967295;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295
 80013b0:	731a      	strb	r2, [r3, #12]
 80013b2:	f04f 32ff 	mov.w	r2, #4294967295
 80013b6:	735a      	strb	r2, [r3, #13]
 80013b8:	f04f 32ff 	mov.w	r2, #4294967295
 80013bc:	739a      	strb	r2, [r3, #14]
 80013be:	f04f 32ff 	mov.w	r2, #4294967295
 80013c2:	73da      	strb	r2, [r3, #15]
	msg->t01_log_start_time.tag_value_len=4;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f042 0204 	orr.w	r2, r2, #4
 80013cc:	729a      	strb	r2, [r3, #10]
 80013ce:	2200      	movs	r2, #0
 80013d0:	72da      	strb	r2, [r3, #11]

	msg->t02_spectrum_sample_rate.tag=MSG_JOB_SETUP_TAG_SPECT_SAMPLE_RATE;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f042 0202 	orr.w	r2, r2, #2
 80013da:	741a      	strb	r2, [r3, #16]
 80013dc:	2200      	movs	r2, #0
 80013de:	745a      	strb	r2, [r3, #17]
	msg->t02_spectrum_sample_rate.tag_value=0;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2200      	movs	r2, #0
 80013e4:	751a      	strb	r2, [r3, #20]
 80013e6:	2200      	movs	r2, #0
 80013e8:	755a      	strb	r2, [r3, #21]
 80013ea:	2200      	movs	r2, #0
 80013ec:	759a      	strb	r2, [r3, #22]
 80013ee:	2200      	movs	r2, #0
 80013f0:	75da      	strb	r2, [r3, #23]
	msg->t02_spectrum_sample_rate.tag_value_len=4;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f042 0204 	orr.w	r2, r2, #4
 80013fa:	749a      	strb	r2, [r3, #18]
 80013fc:	2200      	movs	r2, #0
 80013fe:	74da      	strb	r2, [r3, #19]

	msg->t06_fft_processing_type.tag=MSG_JOB_SETUP_TAG_FFT_PROCESSING_TYPE;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2200      	movs	r2, #0
 8001404:	f042 0206 	orr.w	r2, r2, #6
 8001408:	761a      	strb	r2, [r3, #24]
 800140a:	2200      	movs	r2, #0
 800140c:	765a      	strb	r2, [r3, #25]
	msg->t06_fft_processing_type.tag_value=0;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2200      	movs	r2, #0
 8001412:	771a      	strb	r2, [r3, #28]
 8001414:	2200      	movs	r2, #0
 8001416:	775a      	strb	r2, [r3, #29]
 8001418:	2200      	movs	r2, #0
 800141a:	779a      	strb	r2, [r3, #30]
 800141c:	2200      	movs	r2, #0
 800141e:	77da      	strb	r2, [r3, #31]
	msg->t06_fft_processing_type.tag_value_len=4;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2200      	movs	r2, #0
 8001424:	f042 0204 	orr.w	r2, r2, #4
 8001428:	769a      	strb	r2, [r3, #26]
 800142a:	2200      	movs	r2, #0
 800142c:	76da      	strb	r2, [r3, #27]

	msg->t07_fft_accumulates.tag=MSG_JOB_SETUP_TAG_FFT_ACCUMULATED;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2200      	movs	r2, #0
 8001432:	f042 0207 	orr.w	r2, r2, #7
 8001436:	f883 2020 	strb.w	r2, [r3, #32]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	msg->t07_fft_accumulates.tag_value=0;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	msg->t07_fft_accumulates.tag_value_len=4;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2200      	movs	r2, #0
 800145e:	f042 0204 	orr.w	r2, r2, #4
 8001462:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	msg->t09_spectrum_logging_mode.tag=MSG_JOB_SETUP_TAG_SPECT_LOGGING_MODE;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2200      	movs	r2, #0
 8001470:	f042 0209 	orr.w	r2, r2, #9
 8001474:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	msg->t09_spectrum_logging_mode.tag_value=0;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8001486:	2200      	movs	r2, #0
 8001488:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800148c:	2200      	movs	r2, #0
 800148e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8001492:	2200      	movs	r2, #0
 8001494:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	msg->t09_spectrum_logging_mode.tag_value_len=4;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2200      	movs	r2, #0
 800149c:	f042 0204 	orr.w	r2, r2, #4
 80014a0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	msg->t0A_spectrum_log_file_length.tag=MSG_JOB_SETUP_TAG_SPECT_LOG_FILE_LEN;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f042 020a 	orr.w	r2, r2, #10
 80014b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	msg->t0A_spectrum_log_file_length.tag_value=1;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2200      	movs	r2, #0
 80014c0:	f042 0201 	orr.w	r2, r2, #1
 80014c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	msg->t0A_spectrum_log_file_length.tag_value_len=4;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	f042 0204 	orr.w	r2, r2, #4
 80014e2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	msg->t0E_waveform_sample_rate.tag=MSG_JOB_SETUP_TAG_WAVEFORM_SAMPLE_RATE;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f042 020e 	orr.w	r2, r2, #14
 80014f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	msg->t0E_waveform_sample_rate.tag_value=wav_sample_rate;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	63da      	str	r2, [r3, #60]	; 0x3c
	msg->t0E_waveform_sample_rate.tag_value_len=4;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2200      	movs	r2, #0
 8001508:	f042 0204 	orr.w	r2, r2, #4
 800150c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001510:	2200      	movs	r2, #0
 8001512:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	msg->t0F_waveform_data_bit_depth.tag=MSG_JOB_SETUP_TAG_WAVEFORM_DATA_BITS_DEPTH;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	f042 020f 	orr.w	r2, r2, #15
 800151e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	msg->t0F_waveform_data_bit_depth.tag_value=wav_sample_bit_depth;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	645a      	str	r2, [r3, #68]	; 0x44
	msg->t0F_waveform_data_bit_depth.tag_value_len=4;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2200      	movs	r2, #0
 8001532:	f042 0204 	orr.w	r2, r2, #4
 8001536:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800153a:	2200      	movs	r2, #0
 800153c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	msg->t12_waveform_logging_mode.tag=MSG_JOB_SETUP_TAG_WAVEFROM_DATA_LOGGING_MODE;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2200      	movs	r2, #0
 8001544:	f042 0212 	orr.w	r2, r2, #18
 8001548:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	msg->t12_waveform_logging_mode.tag_value=0;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800155a:	2200      	movs	r2, #0
 800155c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001560:	2200      	movs	r2, #0
 8001562:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8001566:	2200      	movs	r2, #0
 8001568:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	msg->t12_waveform_logging_mode.tag_value_len=4;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2200      	movs	r2, #0
 8001570:	f042 0204 	orr.w	r2, r2, #4
 8001574:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8001578:	2200      	movs	r2, #0
 800157a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	msg->t13_waveform_log_file_length.tag=MSG_JOB_SETUP_TAG_WAVEFORM_LOG_FILE_LENGTH;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2200      	movs	r2, #0
 8001582:	f042 0213 	orr.w	r2, r2, #19
 8001586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	msg->t13_waveform_log_file_length.tag_value=1;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2200      	movs	r2, #0
 8001594:	f042 0201 	orr.w	r2, r2, #1
 8001598:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	msg->t13_waveform_log_file_length.tag_value_len=4;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f042 0204 	orr.w	r2, r2, #4
 80015b6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	msg->t14_aux_pin_messages.tag=MSG_JOB_SETUP_TAG_AUX_PIN_MESSAGE;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f042 0214 	orr.w	r2, r2, #20
 80015c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	msg->t14_aux_pin_messages.tag_value=1;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f042 0201 	orr.w	r2, r2, #1
 80015da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	msg->t14_aux_pin_messages.tag_value_len=4;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f042 0204 	orr.w	r2, r2, #4
 80015f8:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b


	msg->basic_hdr.length=sizeof(icListen_setup_full_msg)-4-2;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2200      	movs	r2, #0
 8001606:	f042 025c 	orr.w	r2, r2, #92	; 0x5c
 800160a:	709a      	strb	r2, [r3, #2]
 800160c:	2200      	movs	r2, #0
 800160e:	70da      	strb	r2, [r3, #3]
	msg->crc=get_crc16_arc((uint8_t*)msg,sizeof(icListen_setup_full_msg)-2);
 8001610:	2160      	movs	r1, #96	; 0x60
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f7ff fd26 	bl	8001064 <get_crc16_arc>
 8001618:	4603      	mov	r3, r0
 800161a:	461a      	mov	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
}
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <icListen_prepare_collect_msg>:

void icListen_prepare_collect_msg(icListen_collect_short_mask_msg* msg,uint8_t mask)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	460b      	mov	r3, r1
 8001634:	70fb      	strb	r3, [r7, #3]
	msg->basic_hdr.sync=MSG_SYNC;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	222a      	movs	r2, #42	; 0x2a
 800163a:	701a      	strb	r2, [r3, #0]
    msg->basic_hdr.type=MSG_TYPE_COLLECT_DATA;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2243      	movs	r2, #67	; 0x43
 8001640:	705a      	strb	r2, [r3, #1]
    msg->mask_hdr.mask=mask;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	78fa      	ldrb	r2, [r7, #3]
 8001646:	711a      	strb	r2, [r3, #4]
    msg->basic_hdr.length=1;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f042 0201 	orr.w	r2, r2, #1
 8001650:	709a      	strb	r2, [r3, #2]
 8001652:	2200      	movs	r2, #0
 8001654:	70da      	strb	r2, [r3, #3]
	msg->crc=get_crc16_arc((uint8_t*)msg,sizeof(icListen_collect_short_mask_msg)-2);
 8001656:	2105      	movs	r1, #5
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff fd03 	bl	8001064 <get_crc16_arc>
 800165e:	4603      	mov	r3, r0
 8001660:	461a      	mov	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f8a3 2005 	strh.w	r2, [r3, #5]
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <icListen_prepare_enquire_device_msg>:

void icListen_prepare_enquire_device_msg(icListen_enquire_device_msg* msg)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	msg->basic_hdr.sync=MSG_SYNC;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	222a      	movs	r2, #42	; 0x2a
 800167c:	701a      	strb	r2, [r3, #0]
    msg->basic_hdr.type=MSG_TYPE_ENQUIRE_DEVICE;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2245      	movs	r2, #69	; 0x45
 8001682:	705a      	strb	r2, [r3, #1]
    msg->basic_hdr.length=0;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	709a      	strb	r2, [r3, #2]
 800168a:	2200      	movs	r2, #0
 800168c:	70da      	strb	r2, [r3, #3]
	msg->crc=get_crc16_arc((uint8_t*)msg,sizeof(icListen_enquire_device_msg)-2);
 800168e:	2104      	movs	r1, #4
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fce7 	bl	8001064 <get_crc16_arc>
 8001696:	4603      	mov	r3, r0
 8001698:	461a      	mov	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	809a      	strh	r2, [r3, #4]

}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <icListen_parse_msg>:

F_RES icListen_parse_msg(uint8_t* msg,icListen_object_typedef* self_object,uint8_t* msg_type,memory_region_pointer* parsed_data_ptr)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b088      	sub	sp, #32
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	603b      	str	r3, [r7, #0]

	icListen_basic_header* basic_header=(icListen_basic_header*)msg;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	61fb      	str	r3, [r7, #28]
	icListen_status_basic_msg* status_msg=(icListen_status_basic_msg*)msg;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	61bb      	str	r3, [r7, #24]
	icListen_wav_full_header* collected_wav_header=(icListen_wav_full_header*)msg;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	617b      	str	r3, [r7, #20]

	uint16_t crc_msg=*(uint16_t*)(msg+basic_header->length+4);
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	885b      	ldrh	r3, [r3, #2]
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	3304      	adds	r3, #4
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	4413      	add	r3, r2
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	827b      	strh	r3, [r7, #18]

	if(basic_header->sync==MSG_SYNC){
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b2a      	cmp	r3, #42	; 0x2a
 80016d6:	f040 8089 	bne.w	80017ec <icListen_parse_msg+0x146>
	*msg_type=basic_header->type;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	785a      	ldrb	r2, [r3, #1]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	701a      	strb	r2, [r3, #0]
	switch(basic_header->type){
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	785b      	ldrb	r3, [r3, #1]
 80016e6:	2b43      	cmp	r3, #67	; 0x43
 80016e8:	d033      	beq.n	8001752 <icListen_parse_msg+0xac>
 80016ea:	2b45      	cmp	r3, #69	; 0x45
 80016ec:	d17c      	bne.n	80017e8 <icListen_parse_msg+0x142>
	     case MSG_TYPE_ENQUIRE_DEVICE:
	    	 if(crc_msg==get_crc16_arc(msg,(uint16_t)basic_header->length+4)){
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	885b      	ldrh	r3, [r3, #2]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	3304      	adds	r3, #4
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	4619      	mov	r1, r3
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	f7ff fcb2 	bl	8001064 <get_crc16_arc>
 8001700:	4603      	mov	r3, r0
 8001702:	461a      	mov	r2, r3
 8001704:	8a7b      	ldrh	r3, [r7, #18]
 8001706:	4293      	cmp	r3, r2
 8001708:	d121      	bne.n	800174e <icListen_parse_msg+0xa8>
		    	  self_object->status=status_msg->status;
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	775a      	strb	r2, [r3, #29]
		    	  memcpy(self_object->build_date,status_msg->build_date,18);
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	f103 000a 	add.w	r0, r3, #10
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	330e      	adds	r3, #14
 800171e:	2212      	movs	r2, #18
 8001720:	4619      	mov	r1, r3
 8001722:	f013 fa03 	bl	8014b2c <memcpy>
		    	  memcpy(self_object->firmware_version,status_msg->firmware_version,8);
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	1c98      	adds	r0, r3, #2
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	3306      	adds	r3, #6
 800172e:	2208      	movs	r2, #8
 8001730:	4619      	mov	r1, r3
 8001732:	f013 f9fb 	bl	8014b2c <memcpy>
		    	  self_object->serial_number=status_msg->serial_number;
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	889b      	ldrh	r3, [r3, #4]
 800173a:	b29a      	uxth	r2, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	801a      	strh	r2, [r3, #0]
		    	  self_object->device_type=status_msg->device_type;
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	771a      	strb	r2, [r3, #28]
		    	  return F_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	e04f      	b.n	80017ee <icListen_parse_msg+0x148>
	    	  }
	    	 else return F_ERR;
 800174e:	2301      	movs	r3, #1
 8001750:	e04d      	b.n	80017ee <icListen_parse_msg+0x148>
	     break;
		 case MSG_TYPE_COLLECT_DATA:
			 if(collected_wav_header->basic_hdr.length>1){
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	885b      	ldrh	r3, [r3, #2]
 8001756:	b29b      	uxth	r3, r3
 8001758:	2b01      	cmp	r3, #1
 800175a:	d93a      	bls.n	80017d2 <icListen_parse_msg+0x12c>
			      if((self_object->last_collect_msg_num+1)!=collected_wav_header->wav_hdr.seq_num && self_object->last_collect_msg_num !=0){
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	3301      	adds	r3, #1
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	f8b2 2005 	ldrh.w	r2, [r2, #5]
 8001768:	b292      	uxth	r2, r2
 800176a:	4293      	cmp	r3, r2
 800176c:	d008      	beq.n	8001780 <icListen_parse_msg+0xda>
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	2b00      	cmp	r3, #0
 8001774:	d004      	beq.n	8001780 <icListen_parse_msg+0xda>
			    	  self_object->collect_seq_num_err++;
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	629a      	str	r2, [r3, #40]	; 0x28
			      }
			      self_object->last_collect_msg_num=collected_wav_header->wav_hdr.seq_num;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8001786:	b29b      	uxth	r3, r3
 8001788:	461a      	mov	r2, r3
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	625a      	str	r2, [r3, #36]	; 0x24
			      if(collected_wav_header->wav_hdr.sample_rate!=self_object->settings->wav_sample_rate || collected_wav_header->wav_hdr.bit_depth!=self_object->settings->wav_sample_bit_depth ){
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f8d3 200b 	ldr.w	r2, [r3, #11]
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d107      	bne.n	80017ae <icListen_parse_msg+0x108>
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	79db      	ldrb	r3, [r3, #7]
 80017a2:	461a      	mov	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d004      	beq.n	80017b8 <icListen_parse_msg+0x112>
			        self_object->wav_misconfig_err++;
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	62da      	str	r2, [r3, #44]	; 0x2c
			      }
		    	  parsed_data_ptr->start_addr=msg+sizeof(icListen_wav_full_header);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f103 0213 	add.w	r2, r3, #19
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	601a      	str	r2, [r3, #0]
		    	  parsed_data_ptr->size=collected_wav_header->wav_hdr.num_of_bytes;
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	891b      	ldrh	r3, [r3, #8]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	461a      	mov	r2, r3
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	605a      	str	r2, [r3, #4]
			    //parsed_data_ptr->start_addr=msg;
				//parsed_data_ptr->size=collected_wav_header->basic_hdr.length+4;
				  return F_OK;
 80017ce:	2300      	movs	r3, #0
 80017d0:	e00d      	b.n	80017ee <icListen_parse_msg+0x148>
			 }
			 parsed_data_ptr->size=0;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	2200      	movs	r2, #0
 80017d6:	711a      	strb	r2, [r3, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	715a      	strb	r2, [r3, #5]
 80017dc:	2200      	movs	r2, #0
 80017de:	719a      	strb	r2, [r3, #6]
 80017e0:	2200      	movs	r2, #0
 80017e2:	71da      	strb	r2, [r3, #7]
		     return F_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	e002      	b.n	80017ee <icListen_parse_msg+0x148>
		 break;
		 default:
			 return F_ERR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e000      	b.n	80017ee <icListen_parse_msg+0x148>
	     break;
	 };
	}
	else{
		return F_ERR;
 80017ec:	2301      	movs	r3, #1
	}
	return F_ERR;
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3720      	adds	r7, #32
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017f8:	b5b0      	push	{r4, r5, r7, lr}
 80017fa:	b0ac      	sub	sp, #176	; 0xb0
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017fe:	f001 fe5d 	bl	80034bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001802:	f000 f8cd 	bl	80019a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001806:	f000 fa5d 	bl	8001cc4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800180a:	f000 f98f 	bl	8001b2c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800180e:	f000 fa0f 	bl	8001c30 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8001812:	f000 fa37 	bl	8001c84 <MX_DMA_Init>
  MX_TIM2_Init();
 8001816:	f000 f9bf 	bl	8001b98 <MX_TIM2_Init>
  MX_RTC_Init();
 800181a:	f000 f92d 	bl	8001a78 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  UI_init(&user_interface);
 800181e:	484c      	ldr	r0, [pc, #304]	; (8001950 <main+0x158>)
 8001820:	f7fe fec0 	bl	80005a4 <UI_init>
  HAL_UART_Receive_IT(&UI_UART,&(user_interface.media_rx_byte),1);
 8001824:	2201      	movs	r2, #1
 8001826:	494b      	ldr	r1, [pc, #300]	; (8001954 <main+0x15c>)
 8001828:	484b      	ldr	r0, [pc, #300]	; (8001958 <main+0x160>)
 800182a:	f006 fdc7 	bl	80083bc <HAL_UART_Receive_IT>
  mcu_flash_init(&mcu_flash,FLASH_SECTOR_11);
 800182e:	210b      	movs	r1, #11
 8001830:	484a      	ldr	r0, [pc, #296]	; (800195c <main+0x164>)
 8001832:	f000 fea7 	bl	8002584 <mcu_flash_init>

  system_status=SYSTEM_STARTED;
 8001836:	4b4a      	ldr	r3, [pc, #296]	; (8001960 <main+0x168>)
 8001838:	220b      	movs	r2, #11
 800183a:	701a      	strb	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of AppliEvent */
  osMessageQDef(AppliEvent, 16, uint16_t);
 800183c:	4b49      	ldr	r3, [pc, #292]	; (8001964 <main+0x16c>)
 800183e:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8001842:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001844:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  AppliEventHandle = osMessageCreate(osMessageQ(AppliEvent), NULL);
 8001848:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f010 fab7 	bl	8011dc2 <osMessageCreate>
 8001854:	4603      	mov	r3, r0
 8001856:	4a44      	ldr	r2, [pc, #272]	; (8001968 <main+0x170>)
 8001858:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_rx */
  osMessageQDef(USB_rx, 10, uint32_t);
 800185a:	4b44      	ldr	r3, [pc, #272]	; (800196c <main+0x174>)
 800185c:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001860:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001862:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  USB_rxHandle = osMessageCreate(osMessageQ(USB_rx), NULL);
 8001866:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800186a:	2100      	movs	r1, #0
 800186c:	4618      	mov	r0, r3
 800186e:	f010 faa8 	bl	8011dc2 <osMessageCreate>
 8001872:	4603      	mov	r3, r0
 8001874:	4a3e      	ldr	r2, [pc, #248]	; (8001970 <main+0x178>)
 8001876:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_tx */
  osMessageQDef(USB_tx, 10, uint32_t);
 8001878:	4b3c      	ldr	r3, [pc, #240]	; (800196c <main+0x174>)
 800187a:	f107 0480 	add.w	r4, r7, #128	; 0x80
 800187e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001880:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  USB_txHandle = osMessageCreate(osMessageQ(USB_tx), NULL);
 8001884:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001888:	2100      	movs	r1, #0
 800188a:	4618      	mov	r0, r3
 800188c:	f010 fa99 	bl	8011dc2 <osMessageCreate>
 8001890:	4603      	mov	r3, r0
 8001892:	4a38      	ldr	r2, [pc, #224]	; (8001974 <main+0x17c>)
 8001894:	6013      	str	r3, [r2, #0]

  /* definition and creation of storage_w */
  osMessageQDef(storage_w, 5, uint32_t);
 8001896:	4b38      	ldr	r3, [pc, #224]	; (8001978 <main+0x180>)
 8001898:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800189c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800189e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  storage_wHandle = osMessageCreate(osMessageQ(storage_w), NULL);
 80018a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018a6:	2100      	movs	r1, #0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f010 fa8a 	bl	8011dc2 <osMessageCreate>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4a32      	ldr	r2, [pc, #200]	; (800197c <main+0x184>)
 80018b2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80018b4:	4b32      	ldr	r3, [pc, #200]	; (8001980 <main+0x188>)
 80018b6:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80018ba:	461d      	mov	r5, r3
 80018bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80018c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018cc:	2100      	movs	r1, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f010 fa17 	bl	8011d02 <osThreadCreate>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4a2b      	ldr	r2, [pc, #172]	; (8001984 <main+0x18c>)
 80018d8:	6013      	str	r3, [r2, #0]

  /* definition and creation of storage_t */
  osThreadDef(storage_t, storage_f, osPriorityNormal, 0, 512);
 80018da:	4b2b      	ldr	r3, [pc, #172]	; (8001988 <main+0x190>)
 80018dc:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80018e0:	461d      	mov	r5, r3
 80018e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  storage_tHandle = osThreadCreate(osThread(storage_t), NULL);
 80018ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018f2:	2100      	movs	r1, #0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f010 fa04 	bl	8011d02 <osThreadCreate>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4a23      	ldr	r2, [pc, #140]	; (800198c <main+0x194>)
 80018fe:	6013      	str	r3, [r2, #0]

  /* definition and creation of icListen_t */
  osThreadDef(icListen_t, icListen_f, osPriorityNormal, 0, 512);
 8001900:	4b23      	ldr	r3, [pc, #140]	; (8001990 <main+0x198>)
 8001902:	f107 041c 	add.w	r4, r7, #28
 8001906:	461d      	mov	r5, r3
 8001908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800190a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800190c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001910:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  icListen_tHandle = osThreadCreate(osThread(icListen_t), NULL);
 8001914:	f107 031c 	add.w	r3, r7, #28
 8001918:	2100      	movs	r1, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f010 f9f1 	bl	8011d02 <osThreadCreate>
 8001920:	4603      	mov	r3, r0
 8001922:	4a1c      	ldr	r2, [pc, #112]	; (8001994 <main+0x19c>)
 8001924:	6013      	str	r3, [r2, #0]

  /* definition and creation of uart_t */
  osThreadDef(uart_t, uart_f, osPriorityNormal, 0, 256);
 8001926:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <main+0x1a0>)
 8001928:	463c      	mov	r4, r7
 800192a:	461d      	mov	r5, r3
 800192c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800192e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001930:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001934:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart_tHandle = osThreadCreate(osThread(uart_t), NULL);
 8001938:	463b      	mov	r3, r7
 800193a:	2100      	movs	r1, #0
 800193c:	4618      	mov	r0, r3
 800193e:	f010 f9e0 	bl	8011d02 <osThreadCreate>
 8001942:	4603      	mov	r3, r0
 8001944:	4a15      	ldr	r2, [pc, #84]	; (800199c <main+0x1a4>)
 8001946:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001948:	f010 f9d4 	bl	8011cf4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800194c:	e7fe      	b.n	800194c <main+0x154>
 800194e:	bf00      	nop
 8001950:	20000a64 	.word	0x20000a64
 8001954:	20000a70 	.word	0x20000a70
 8001958:	20000954 	.word	0x20000954
 800195c:	20000e78 	.word	0x20000e78
 8001960:	20001b70 	.word	0x20001b70
 8001964:	08017504 	.word	0x08017504
 8001968:	200009a8 	.word	0x200009a8
 800196c:	08017514 	.word	0x08017514
 8001970:	200009ac 	.word	0x200009ac
 8001974:	200009b0 	.word	0x200009b0
 8001978:	08017524 	.word	0x08017524
 800197c:	200009b4 	.word	0x200009b4
 8001980:	08017534 	.word	0x08017534
 8001984:	20000998 	.word	0x20000998
 8001988:	08017550 	.word	0x08017550
 800198c:	2000099c 	.word	0x2000099c
 8001990:	0801756c 	.word	0x0801756c
 8001994:	200009a0 	.word	0x200009a0
 8001998:	08017588 	.word	0x08017588
 800199c:	200009a4 	.word	0x200009a4

080019a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b094      	sub	sp, #80	; 0x50
 80019a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019a6:	f107 0320 	add.w	r3, r7, #32
 80019aa:	2230      	movs	r2, #48	; 0x30
 80019ac:	2100      	movs	r1, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f013 f8ca 	bl	8014b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b4:	f107 030c 	add.w	r3, r7, #12
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c4:	2300      	movs	r3, #0
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	4b29      	ldr	r3, [pc, #164]	; (8001a70 <SystemClock_Config+0xd0>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	4a28      	ldr	r2, [pc, #160]	; (8001a70 <SystemClock_Config+0xd0>)
 80019ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d2:	6413      	str	r3, [r2, #64]	; 0x40
 80019d4:	4b26      	ldr	r3, [pc, #152]	; (8001a70 <SystemClock_Config+0xd0>)
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019e0:	2300      	movs	r3, #0
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <SystemClock_Config+0xd4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a22      	ldr	r2, [pc, #136]	; (8001a74 <SystemClock_Config+0xd4>)
 80019ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <SystemClock_Config+0xd4>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80019fc:	2305      	movs	r3, #5
 80019fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a06:	2301      	movs	r3, #1
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001a14:	230f      	movs	r3, #15
 8001a16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001a18:	2390      	movs	r3, #144	; 0x90
 8001a1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001a20:	2305      	movs	r3, #5
 8001a22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a24:	f107 0320 	add.w	r3, r7, #32
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f004 faa3 	bl	8005f74 <HAL_RCC_OscConfig>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a34:	f000 fda0 	bl	8002578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a38:	230f      	movs	r3, #15
 8001a3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a44:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a50:	f107 030c 	add.w	r3, r7, #12
 8001a54:	2103      	movs	r1, #3
 8001a56:	4618      	mov	r0, r3
 8001a58:	f004 fd04 	bl	8006464 <HAL_RCC_ClockConfig>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001a62:	f000 fd89 	bl	8002578 <Error_Handler>
  }
}
 8001a66:	bf00      	nop
 8001a68:	3750      	adds	r7, #80	; 0x50
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40007000 	.word	0x40007000

08001a78 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001a7e:	1d3b      	adds	r3, r7, #4
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a90:	4b24      	ldr	r3, [pc, #144]	; (8001b24 <MX_RTC_Init+0xac>)
 8001a92:	4a25      	ldr	r2, [pc, #148]	; (8001b28 <MX_RTC_Init+0xb0>)
 8001a94:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a96:	4b23      	ldr	r3, [pc, #140]	; (8001b24 <MX_RTC_Init+0xac>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a9c:	4b21      	ldr	r3, [pc, #132]	; (8001b24 <MX_RTC_Init+0xac>)
 8001a9e:	227f      	movs	r2, #127	; 0x7f
 8001aa0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001aa2:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <MX_RTC_Init+0xac>)
 8001aa4:	22ff      	movs	r2, #255	; 0xff
 8001aa6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001aa8:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <MX_RTC_Init+0xac>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001aae:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <MX_RTC_Init+0xac>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ab4:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <MX_RTC_Init+0xac>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001aba:	481a      	ldr	r0, [pc, #104]	; (8001b24 <MX_RTC_Init+0xac>)
 8001abc:	f004 ffc6 	bl	8006a4c <HAL_RTC_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001ac6:	f000 fd57 	bl	8002578 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	480f      	ldr	r0, [pc, #60]	; (8001b24 <MX_RTC_Init+0xac>)
 8001ae6:	f005 f827 	bl	8006b38 <HAL_RTC_SetTime>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001af0:	f000 fd42 	bl	8002578 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001af4:	2301      	movs	r3, #1
 8001af6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001af8:	2301      	movs	r3, #1
 8001afa:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001afc:	2301      	movs	r3, #1
 8001afe:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001b04:	463b      	mov	r3, r7
 8001b06:	2200      	movs	r2, #0
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4806      	ldr	r0, [pc, #24]	; (8001b24 <MX_RTC_Init+0xac>)
 8001b0c:	f005 f90c 	bl	8006d28 <HAL_RTC_SetDate>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001b16:	f000 fd2f 	bl	8002578 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b1a:	bf00      	nop
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000834 	.word	0x20000834
 8001b28:	40002800 	.word	0x40002800

08001b2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b30:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <MX_SPI1_Init+0x64>)
 8001b32:	4a18      	ldr	r2, [pc, #96]	; (8001b94 <MX_SPI1_Init+0x68>)
 8001b34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b36:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <MX_SPI1_Init+0x64>)
 8001b38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b3e:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <MX_SPI1_Init+0x64>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <MX_SPI1_Init+0x64>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <MX_SPI1_Init+0x64>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <MX_SPI1_Init+0x64>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <MX_SPI1_Init+0x64>)
 8001b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b5c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <MX_SPI1_Init+0x64>)
 8001b60:	2208      	movs	r2, #8
 8001b62:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b64:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <MX_SPI1_Init+0x64>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <MX_SPI1_Init+0x64>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b70:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <MX_SPI1_Init+0x64>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <MX_SPI1_Init+0x64>)
 8001b78:	220a      	movs	r2, #10
 8001b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b7c:	4804      	ldr	r0, [pc, #16]	; (8001b90 <MX_SPI1_Init+0x64>)
 8001b7e:	f005 fa63 	bl	8007048 <HAL_SPI_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b88:	f000 fcf6 	bl	8002578 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000854 	.word	0x20000854
 8001b94:	40013000 	.word	0x40013000

08001b98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b9e:	f107 0308 	add.w	r3, r7, #8
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
 8001baa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bac:	463b      	mov	r3, r7
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bb4:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <MX_TIM2_Init+0x94>)
 8001bb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <MX_TIM2_Init+0x94>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc2:	4b1a      	ldr	r3, [pc, #104]	; (8001c2c <MX_TIM2_Init+0x94>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001bc8:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <MX_TIM2_Init+0x94>)
 8001bca:	f04f 32ff 	mov.w	r2, #4294967295
 8001bce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd0:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <MX_TIM2_Init+0x94>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <MX_TIM2_Init+0x94>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bdc:	4813      	ldr	r0, [pc, #76]	; (8001c2c <MX_TIM2_Init+0x94>)
 8001bde:	f005 fe47 	bl	8007870 <HAL_TIM_Base_Init>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001be8:	f000 fcc6 	bl	8002578 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bf2:	f107 0308 	add.w	r3, r7, #8
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	480c      	ldr	r0, [pc, #48]	; (8001c2c <MX_TIM2_Init+0x94>)
 8001bfa:	f006 f801 	bl	8007c00 <HAL_TIM_ConfigClockSource>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c04:	f000 fcb8 	bl	8002578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c10:	463b      	mov	r3, r7
 8001c12:	4619      	mov	r1, r3
 8001c14:	4805      	ldr	r0, [pc, #20]	; (8001c2c <MX_TIM2_Init+0x94>)
 8001c16:	f006 fa1d 	bl	8008054 <HAL_TIMEx_MasterConfigSynchronization>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c20:	f000 fcaa 	bl	8002578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c24:	bf00      	nop
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	2000090c 	.word	0x2000090c

08001c30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <MX_USART1_UART_Init+0x4c>)
 8001c36:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <MX_USART1_UART_Init+0x50>)
 8001c38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <MX_USART1_UART_Init+0x4c>)
 8001c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <MX_USART1_UART_Init+0x4c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <MX_USART1_UART_Init+0x4c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <MX_USART1_UART_Init+0x4c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c54:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <MX_USART1_UART_Init+0x4c>)
 8001c56:	220c      	movs	r2, #12
 8001c58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <MX_USART1_UART_Init+0x4c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <MX_USART1_UART_Init+0x4c>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c66:	4805      	ldr	r0, [pc, #20]	; (8001c7c <MX_USART1_UART_Init+0x4c>)
 8001c68:	f006 fa84 	bl	8008174 <HAL_UART_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c72:	f000 fc81 	bl	8002578 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000954 	.word	0x20000954
 8001c80:	40011000 	.word	0x40011000

08001c84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <MX_DMA_Init+0x3c>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a0b      	ldr	r2, [pc, #44]	; (8001cc0 <MX_DMA_Init+0x3c>)
 8001c94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <MX_DMA_Init+0x3c>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2105      	movs	r1, #5
 8001caa:	203b      	movs	r0, #59	; 0x3b
 8001cac:	f001 fd24 	bl	80036f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001cb0:	203b      	movs	r0, #59	; 0x3b
 8001cb2:	f001 fd3d 	bl	8003730 <HAL_NVIC_EnableIRQ>

}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800

08001cc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	; 0x28
 8001cc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]
 8001cd4:	609a      	str	r2, [r3, #8]
 8001cd6:	60da      	str	r2, [r3, #12]
 8001cd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	4b39      	ldr	r3, [pc, #228]	; (8001dc4 <MX_GPIO_Init+0x100>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a38      	ldr	r2, [pc, #224]	; (8001dc4 <MX_GPIO_Init+0x100>)
 8001ce4:	f043 0304 	orr.w	r3, r3, #4
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b36      	ldr	r3, [pc, #216]	; (8001dc4 <MX_GPIO_Init+0x100>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	4b32      	ldr	r3, [pc, #200]	; (8001dc4 <MX_GPIO_Init+0x100>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a31      	ldr	r2, [pc, #196]	; (8001dc4 <MX_GPIO_Init+0x100>)
 8001d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b2f      	ldr	r3, [pc, #188]	; (8001dc4 <MX_GPIO_Init+0x100>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <MX_GPIO_Init+0x100>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a2a      	ldr	r2, [pc, #168]	; (8001dc4 <MX_GPIO_Init+0x100>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <MX_GPIO_Init+0x100>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	4b24      	ldr	r3, [pc, #144]	; (8001dc4 <MX_GPIO_Init+0x100>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a23      	ldr	r2, [pc, #140]	; (8001dc4 <MX_GPIO_Init+0x100>)
 8001d38:	f043 0302 	orr.w	r3, r3, #2
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b21      	ldr	r3, [pc, #132]	; (8001dc4 <MX_GPIO_Init+0x100>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_SD3_GPIO_Port, SS_SD3_Pin, GPIO_PIN_SET);
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	2102      	movs	r1, #2
 8001d4e:	481e      	ldr	r0, [pc, #120]	; (8001dc8 <MX_GPIO_Init+0x104>)
 8001d50:	f002 fcec 	bl	800472c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin, GPIO_PIN_SET);
 8001d54:	2201      	movs	r2, #1
 8001d56:	2186      	movs	r1, #134	; 0x86
 8001d58:	481c      	ldr	r0, [pc, #112]	; (8001dcc <MX_GPIO_Init+0x108>)
 8001d5a:	f002 fce7 	bl	800472c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_VBUS_GPIO_Port, USB_VBUS_Pin, GPIO_PIN_SET);
 8001d5e:	2201      	movs	r2, #1
 8001d60:	2101      	movs	r1, #1
 8001d62:	481b      	ldr	r0, [pc, #108]	; (8001dd0 <MX_GPIO_Init+0x10c>)
 8001d64:	f002 fce2 	bl	800472c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SS_SD3_Pin */
  GPIO_InitStruct.Pin = SS_SD3_Pin;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d70:	2301      	movs	r3, #1
 8001d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d74:	2302      	movs	r3, #2
 8001d76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SS_SD3_GPIO_Port, &GPIO_InitStruct);
 8001d78:	f107 0314 	add.w	r3, r7, #20
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4812      	ldr	r0, [pc, #72]	; (8001dc8 <MX_GPIO_Init+0x104>)
 8001d80:	f002 fb38 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS_SD1_Pin SS_SD2_Pin SS_SD4_Pin */
  GPIO_InitStruct.Pin = SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin;
 8001d84:	2386      	movs	r3, #134	; 0x86
 8001d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d90:	2302      	movs	r3, #2
 8001d92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	4619      	mov	r1, r3
 8001d9a:	480c      	ldr	r0, [pc, #48]	; (8001dcc <MX_GPIO_Init+0x108>)
 8001d9c:	f002 fb2a 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001da0:	2301      	movs	r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da4:	2301      	movs	r3, #1
 8001da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	4619      	mov	r1, r3
 8001db6:	4806      	ldr	r0, [pc, #24]	; (8001dd0 <MX_GPIO_Init+0x10c>)
 8001db8:	f002 fb1c 	bl	80043f4 <HAL_GPIO_Init>

}
 8001dbc:	bf00      	nop
 8001dbe:	3728      	adds	r7, #40	; 0x28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40020800 	.word	0x40020800
 8001dcc:	40020000 	.word	0x40020000
 8001dd0:	40020400 	.word	0x40020400

08001dd4 <HAL_UART_RxCpltCallback>:

uint8_t tmp1;
uint8_t tmp2;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 if(huart==&UI_UART && system_status==SYSTEM_READY)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a0b      	ldr	r2, [pc, #44]	; (8001e0c <HAL_UART_RxCpltCallback+0x38>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d10e      	bne.n	8001e02 <HAL_UART_RxCpltCallback+0x2e>
 8001de4:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <HAL_UART_RxCpltCallback+0x3c>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b0a      	cmp	r3, #10
 8001dea:	d10a      	bne.n	8001e02 <HAL_UART_RxCpltCallback+0x2e>
 {
	 UI_media_process_byte(&user_interface,user_interface.media_rx_byte);
 8001dec:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <HAL_UART_RxCpltCallback+0x40>)
 8001dee:	7b1b      	ldrb	r3, [r3, #12]
 8001df0:	4619      	mov	r1, r3
 8001df2:	4808      	ldr	r0, [pc, #32]	; (8001e14 <HAL_UART_RxCpltCallback+0x40>)
 8001df4:	f7fe fc40 	bl	8000678 <UI_media_process_byte>
	 HAL_UART_Receive_IT(&UI_UART,&(user_interface.media_rx_byte),1);
 8001df8:	2201      	movs	r2, #1
 8001dfa:	4907      	ldr	r1, [pc, #28]	; (8001e18 <HAL_UART_RxCpltCallback+0x44>)
 8001dfc:	4803      	ldr	r0, [pc, #12]	; (8001e0c <HAL_UART_RxCpltCallback+0x38>)
 8001dfe:	f006 fadd 	bl	80083bc <HAL_UART_Receive_IT>
 }
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000954 	.word	0x20000954
 8001e10:	20001b70 	.word	0x20001b70
 8001e14:	20000a64 	.word	0x20000a64
 8001e18:	20000a70 	.word	0x20000a70

08001e1c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]

 if(huart==&UI_UART)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a09      	ldr	r2, [pc, #36]	; (8001e4c <HAL_UART_TxCpltCallback+0x30>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d10b      	bne.n	8001e44 <HAL_UART_TxCpltCallback+0x28>
 {
  if(UI_media_get_byte(&user_interface,&tmp2)==UI_F_OK)
 8001e2c:	4908      	ldr	r1, [pc, #32]	; (8001e50 <HAL_UART_TxCpltCallback+0x34>)
 8001e2e:	4809      	ldr	r0, [pc, #36]	; (8001e54 <HAL_UART_TxCpltCallback+0x38>)
 8001e30:	f7fe fca0 	bl	8000774 <UI_media_get_byte>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d104      	bne.n	8001e44 <HAL_UART_TxCpltCallback+0x28>
  {
	    HAL_UART_Transmit_IT(&UI_UART,&tmp2,1);
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	4904      	ldr	r1, [pc, #16]	; (8001e50 <HAL_UART_TxCpltCallback+0x34>)
 8001e3e:	4803      	ldr	r0, [pc, #12]	; (8001e4c <HAL_UART_TxCpltCallback+0x30>)
 8001e40:	f006 fa77 	bl	8008332 <HAL_UART_Transmit_IT>
  }
 }
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000954 	.word	0x20000954
 8001e50:	20001b84 	.word	0x20001b84
 8001e54:	20000a64 	.word	0x20000a64

08001e58 <icListen_prepare_messages>:

void icListen_prepare_messages(icListen_object_typedef* self_object)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  collect_msg_ptr.start_addr=(uint8_t*)&collect_msg;
 8001e60:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <icListen_prepare_messages+0x58>)
 8001e62:	4a14      	ldr	r2, [pc, #80]	; (8001eb4 <icListen_prepare_messages+0x5c>)
 8001e64:	601a      	str	r2, [r3, #0]
  collect_msg_ptr.size=sizeof(icListen_collect_short_mask_msg);
 8001e66:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <icListen_prepare_messages+0x58>)
 8001e68:	2207      	movs	r2, #7
 8001e6a:	605a      	str	r2, [r3, #4]

  status_msg_ptr.start_addr=(uint8_t*)&status_msg;
 8001e6c:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <icListen_prepare_messages+0x60>)
 8001e6e:	4a13      	ldr	r2, [pc, #76]	; (8001ebc <icListen_prepare_messages+0x64>)
 8001e70:	601a      	str	r2, [r3, #0]
  status_msg_ptr.size=sizeof(icListen_enquire_device_msg);
 8001e72:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <icListen_prepare_messages+0x60>)
 8001e74:	2206      	movs	r2, #6
 8001e76:	605a      	str	r2, [r3, #4]

  setup_msg_ptr.start_addr=(uint8_t*)&setup_msg;
 8001e78:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <icListen_prepare_messages+0x68>)
 8001e7a:	4a12      	ldr	r2, [pc, #72]	; (8001ec4 <icListen_prepare_messages+0x6c>)
 8001e7c:	601a      	str	r2, [r3, #0]
  setup_msg_ptr.size=sizeof(icListen_setup_full_msg);
 8001e7e:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <icListen_prepare_messages+0x68>)
 8001e80:	2262      	movs	r2, #98	; 0x62
 8001e82:	605a      	str	r2, [r3, #4]

  icListen_prepare_collect_msg(&collect_msg,0x20);
 8001e84:	2120      	movs	r1, #32
 8001e86:	480b      	ldr	r0, [pc, #44]	; (8001eb4 <icListen_prepare_messages+0x5c>)
 8001e88:	f7ff fbcf 	bl	800162a <icListen_prepare_collect_msg>
  icListen_prepare_enquire_device_msg(&status_msg);
 8001e8c:	480b      	ldr	r0, [pc, #44]	; (8001ebc <icListen_prepare_messages+0x64>)
 8001e8e:	f7ff fbef 	bl	8001670 <icListen_prepare_enquire_device_msg>
  icListen_prepare_setup_msg(&setup_msg,self_object->settings->wav_sample_rate,self_object->settings->wav_sample_bit_depth);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	6819      	ldr	r1, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4808      	ldr	r0, [pc, #32]	; (8001ec4 <icListen_prepare_messages+0x6c>)
 8001ea2:	f7ff fa61 	bl	8001368 <icListen_prepare_setup_msg>
  //HAL_UART_Transmit(&huart1,(uint8_t*)&setup_msg,98,100);
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	200009e8 	.word	0x200009e8
 8001eb4:	200009f0 	.word	0x200009f0
 8001eb8:	200009b8 	.word	0x200009b8
 8001ebc:	200009c0 	.word	0x200009c0
 8001ec0:	200009f8 	.word	0x200009f8
 8001ec4:	20000a00 	.word	0x20000a00

08001ec8 <open_new_wav_file>:

F_RES open_new_wav_file()
{
 8001ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eca:	b091      	sub	sp, #68	; 0x44
 8001ecc:	af06      	add	r7, sp, #24
	char file_name[30];
	file_bytes_left=((icListen.settings->wav_sample_bit_depth/8)*icListen.settings->wav_sample_rate*icListen.settings->file_duration)-44;
 8001ece:	4b33      	ldr	r3, [pc, #204]	; (8001f9c <open_new_wav_file+0xd4>)
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	08db      	lsrs	r3, r3, #3
 8001ed6:	4a31      	ldr	r2, [pc, #196]	; (8001f9c <open_new_wav_file+0xd4>)
 8001ed8:	6a12      	ldr	r2, [r2, #32]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	fb02 f303 	mul.w	r3, r2, r3
 8001ee0:	4a2e      	ldr	r2, [pc, #184]	; (8001f9c <open_new_wav_file+0xd4>)
 8001ee2:	6a12      	ldr	r2, [r2, #32]
 8001ee4:	6892      	ldr	r2, [r2, #8]
 8001ee6:	fb02 f303 	mul.w	r3, r2, r3
 8001eea:	3b2c      	subs	r3, #44	; 0x2c
 8001eec:	4a2c      	ldr	r2, [pc, #176]	; (8001fa0 <open_new_wav_file+0xd8>)
 8001eee:	6013      	str	r3, [r2, #0]
	read_time(&rtc);
 8001ef0:	482c      	ldr	r0, [pc, #176]	; (8001fa4 <open_new_wav_file+0xdc>)
 8001ef2:	f000 fc1b 	bl	800272c <read_time>
	sprintf(file_name,"%d:%d_%02d%02d%02d_%02d%02d%02d.wav",microsd_storage.active_disk_indx,icListen.settings->file_index,rtc.time.Hours,rtc.time.Minutes,rtc.time.Seconds,rtc.date.Date,rtc.date.Month,rtc.date.Year);
 8001ef6:	4b2c      	ldr	r3, [pc, #176]	; (8001fa8 <open_new_wav_file+0xe0>)
 8001ef8:	f893 3910 	ldrb.w	r3, [r3, #2320]	; 0x910
 8001efc:	469c      	mov	ip, r3
 8001efe:	4b27      	ldr	r3, [pc, #156]	; (8001f9c <open_new_wav_file+0xd4>)
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	4a27      	ldr	r2, [pc, #156]	; (8001fa4 <open_new_wav_file+0xdc>)
 8001f06:	7812      	ldrb	r2, [r2, #0]
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4a26      	ldr	r2, [pc, #152]	; (8001fa4 <open_new_wav_file+0xdc>)
 8001f0c:	7852      	ldrb	r2, [r2, #1]
 8001f0e:	4614      	mov	r4, r2
 8001f10:	4a24      	ldr	r2, [pc, #144]	; (8001fa4 <open_new_wav_file+0xdc>)
 8001f12:	7892      	ldrb	r2, [r2, #2]
 8001f14:	4615      	mov	r5, r2
 8001f16:	4a23      	ldr	r2, [pc, #140]	; (8001fa4 <open_new_wav_file+0xdc>)
 8001f18:	7d92      	ldrb	r2, [r2, #22]
 8001f1a:	4616      	mov	r6, r2
 8001f1c:	4a21      	ldr	r2, [pc, #132]	; (8001fa4 <open_new_wav_file+0xdc>)
 8001f1e:	7d52      	ldrb	r2, [r2, #21]
 8001f20:	607a      	str	r2, [r7, #4]
 8001f22:	4a20      	ldr	r2, [pc, #128]	; (8001fa4 <open_new_wav_file+0xdc>)
 8001f24:	7dd2      	ldrb	r2, [r2, #23]
 8001f26:	f107 0008 	add.w	r0, r7, #8
 8001f2a:	9205      	str	r2, [sp, #20]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	9204      	str	r2, [sp, #16]
 8001f30:	9603      	str	r6, [sp, #12]
 8001f32:	9502      	str	r5, [sp, #8]
 8001f34:	9401      	str	r4, [sp, #4]
 8001f36:	9100      	str	r1, [sp, #0]
 8001f38:	4662      	mov	r2, ip
 8001f3a:	491c      	ldr	r1, [pc, #112]	; (8001fac <open_new_wav_file+0xe4>)
 8001f3c:	f013 f9d8 	bl	80152f0 <siprintf>
	if(disk_kbytes_left>(file_bytes_left/1024)){
 8001f40:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <open_new_wav_file+0xd8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	0a9a      	lsrs	r2, r3, #10
 8001f46:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <open_new_wav_file+0xe8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d221      	bcs.n	8001f92 <open_new_wav_file+0xca>
	 if(wav_file_open(&wav_file,file_name,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,1)==F_OK){
 8001f4e:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <open_new_wav_file+0xd4>)
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <open_new_wav_file+0xd4>)
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f107 0108 	add.w	r1, r7, #8
 8001f5e:	2001      	movs	r0, #1
 8001f60:	9000      	str	r0, [sp, #0]
 8001f62:	4814      	ldr	r0, [pc, #80]	; (8001fb4 <open_new_wav_file+0xec>)
 8001f64:	f001 f9a8 	bl	80032b8 <wav_file_open>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d111      	bne.n	8001f92 <open_new_wav_file+0xca>
		disk_kbytes_left-=(file_bytes_left/1024);
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <open_new_wav_file+0xe8>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <open_new_wav_file+0xd8>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	0a9b      	lsrs	r3, r3, #10
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	4a0d      	ldr	r2, [pc, #52]	; (8001fb0 <open_new_wav_file+0xe8>)
 8001f7c:	6013      	str	r3, [r2, #0]
		icListen.settings->file_index++;
 8001f7e:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <open_new_wav_file+0xd4>)
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	68da      	ldr	r2, [r3, #12]
 8001f84:	3201      	adds	r2, #1
 8001f86:	60da      	str	r2, [r3, #12]
		mcu_flash_save(&mcu_flash);
 8001f88:	480b      	ldr	r0, [pc, #44]	; (8001fb8 <open_new_wav_file+0xf0>)
 8001f8a:	f000 fb6d 	bl	8002668 <mcu_flash_save>
		return F_OK;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	e000      	b.n	8001f94 <open_new_wav_file+0xcc>
	 }
	}
    return F_ERR;
 8001f92:	2301      	movs	r3, #1
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	372c      	adds	r7, #44	; 0x2c
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f9c:	20000800 	.word	0x20000800
 8001fa0:	20001b74 	.word	0x20001b74
 8001fa4:	20001b88 	.word	0x20001b88
 8001fa8:	20000e9c 	.word	0x20000e9c
 8001fac:	080175a4 	.word	0x080175a4
 8001fb0:	20001b78 	.word	0x20001b78
 8001fb4:	200017b8 	.word	0x200017b8
 8001fb8:	20000e78 	.word	0x20000e78

08001fbc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001fc4:	f012 f970 	bl	80142a8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
   osEvent event;

  if(mcu_flash_read(&mcu_flash)!=F_OK){
 8001fc8:	483c      	ldr	r0, [pc, #240]	; (80020bc <StartDefaultTask+0x100>)
 8001fca:	f000 fb2d 	bl	8002628 <mcu_flash_read>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d02a      	beq.n	800202a <StartDefaultTask+0x6e>
  		icListen.settings->wav_sample_rate=ICLISTEN_DEFAULT_WAV_SAMPLE_RATE;
 8001fd4:	4b3a      	ldr	r3, [pc, #232]	; (80020c0 <StartDefaultTask+0x104>)
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f042 027d 	orr.w	r2, r2, #125	; 0x7d
 8001fe2:	705a      	strb	r2, [r3, #1]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	709a      	strb	r2, [r3, #2]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	70da      	strb	r2, [r3, #3]
  		icListen.settings->wav_sample_bit_depth=ICLISTEN_DEFAULT_WAV_SAMPLE_BIT_DEPTH;
 8001fec:	4b34      	ldr	r3, [pc, #208]	; (80020c0 <StartDefaultTask+0x104>)
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f042 0218 	orr.w	r2, r2, #24
 8001ff6:	711a      	strb	r2, [r3, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	715a      	strb	r2, [r3, #5]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	719a      	strb	r2, [r3, #6]
 8002000:	2200      	movs	r2, #0
 8002002:	71da      	strb	r2, [r3, #7]
  		icListen.settings->file_duration=ICLISTEN_DEFAULT_FILE_DURATION;
 8002004:	4b2e      	ldr	r3, [pc, #184]	; (80020c0 <StartDefaultTask+0x104>)
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	2200      	movs	r2, #0
 800200a:	f042 0278 	orr.w	r2, r2, #120	; 0x78
 800200e:	721a      	strb	r2, [r3, #8]
 8002010:	2200      	movs	r2, #0
 8002012:	725a      	strb	r2, [r3, #9]
 8002014:	2200      	movs	r2, #0
 8002016:	729a      	strb	r2, [r3, #10]
 8002018:	2200      	movs	r2, #0
 800201a:	72da      	strb	r2, [r3, #11]
  		mcu_flash_save(&mcu_flash);
 800201c:	4827      	ldr	r0, [pc, #156]	; (80020bc <StartDefaultTask+0x100>)
 800201e:	f000 fb23 	bl	8002668 <mcu_flash_save>
  }
  while(microsd_storage.status!=STORAGE_NOT_INITTIALIZED) {osDelay(1);}
 8002022:	e002      	b.n	800202a <StartDefaultTask+0x6e>
 8002024:	2001      	movs	r0, #1
 8002026:	f00f feb8 	bl	8011d9a <osDelay>
 800202a:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <StartDefaultTask+0x108>)
 800202c:	f893 3919 	ldrb.w	r3, [r3, #2329]	; 0x919
 8002030:	2b01      	cmp	r3, #1
 8002032:	d1f7      	bne.n	8002024 <StartDefaultTask+0x68>
  system_status=SYSTEM_READY;
 8002034:	4b24      	ldr	r3, [pc, #144]	; (80020c8 <StartDefaultTask+0x10c>)
 8002036:	220a      	movs	r2, #10
 8002038:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  for(;;)
  {
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 800203a:	4b24      	ldr	r3, [pc, #144]	; (80020cc <StartDefaultTask+0x110>)
 800203c:	6819      	ldr	r1, [r3, #0]
 800203e:	f107 030c 	add.w	r3, r7, #12
 8002042:	f04f 32ff 	mov.w	r2, #4294967295
 8002046:	4618      	mov	r0, r3
 8002048:	f00f ff24 	bl	8011e94 <osMessageGet>

	  if(event.status == osEventMessage)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2b10      	cmp	r3, #16
 8002050:	d130      	bne.n	80020b4 <StartDefaultTask+0xf8>
	  {
		switch(event.value.v)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	2b03      	cmp	r3, #3
 8002056:	d006      	beq.n	8002066 <StartDefaultTask+0xaa>
 8002058:	2b03      	cmp	r3, #3
 800205a:	d82d      	bhi.n	80020b8 <StartDefaultTask+0xfc>
 800205c:	2b01      	cmp	r3, #1
 800205e:	d026      	beq.n	80020ae <StartDefaultTask+0xf2>
 8002060:	2b02      	cmp	r3, #2
 8002062:	d004      	beq.n	800206e <StartDefaultTask+0xb2>
		 case APPLICATION_START:
		   USB_set_line_coding();
		 break;

		 default:
		 break;
 8002064:	e028      	b.n	80020b8 <StartDefaultTask+0xfc>
			 icListen_init_sensor_status(&icListen);
 8002066:	4816      	ldr	r0, [pc, #88]	; (80020c0 <StartDefaultTask+0x104>)
 8002068:	f7ff f956 	bl	8001318 <icListen_init_sensor_status>
		 break;
 800206c:	e025      	b.n	80020ba <StartDefaultTask+0xfe>
			 osDelay(5000);
 800206e:	f241 3088 	movw	r0, #5000	; 0x1388
 8002072:	f00f fe92 	bl	8011d9a <osDelay>
			 icListen_init_sensor_status(&icListen);
 8002076:	4812      	ldr	r0, [pc, #72]	; (80020c0 <StartDefaultTask+0x104>)
 8002078:	f7ff f94e 	bl	8001318 <icListen_init_sensor_status>
			 icListen.status=ICLISTEN_CONNECTED;
 800207c:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <StartDefaultTask+0x104>)
 800207e:	2200      	movs	r2, #0
 8002080:	775a      	strb	r2, [r3, #29]
			 osMessagePut(USB_txHandle,(uint32_t)&status_msg_ptr, 0);
 8002082:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <StartDefaultTask+0x114>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4913      	ldr	r1, [pc, #76]	; (80020d4 <StartDefaultTask+0x118>)
 8002088:	2200      	movs	r2, #0
 800208a:	4618      	mov	r0, r3
 800208c:	f00f fec2 	bl	8011e14 <osMessagePut>
			 osMessagePut(USB_txHandle,(uint32_t)&setup_msg_ptr, 0);
 8002090:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <StartDefaultTask+0x114>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4910      	ldr	r1, [pc, #64]	; (80020d8 <StartDefaultTask+0x11c>)
 8002096:	2200      	movs	r2, #0
 8002098:	4618      	mov	r0, r3
 800209a:	f00f febb 	bl	8011e14 <osMessagePut>
			 osMessagePut(USB_txHandle,(uint32_t)&collect_msg_ptr, 0);
 800209e:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <StartDefaultTask+0x114>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	490e      	ldr	r1, [pc, #56]	; (80020dc <StartDefaultTask+0x120>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f00f feb4 	bl	8011e14 <osMessagePut>
		 break;
 80020ac:	e005      	b.n	80020ba <StartDefaultTask+0xfe>
		   USB_set_line_coding();
 80020ae:	f012 f8cd 	bl	801424c <USB_set_line_coding>
		 break;
 80020b2:	e002      	b.n	80020ba <StartDefaultTask+0xfe>
		 }
	   }
 80020b4:	bf00      	nop
 80020b6:	e7c0      	b.n	800203a <StartDefaultTask+0x7e>
		 break;
 80020b8:	bf00      	nop
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 80020ba:	e7be      	b.n	800203a <StartDefaultTask+0x7e>
 80020bc:	20000e78 	.word	0x20000e78
 80020c0:	20000800 	.word	0x20000800
 80020c4:	20000e9c 	.word	0x20000e9c
 80020c8:	20001b70 	.word	0x20001b70
 80020cc:	200009a8 	.word	0x200009a8
 80020d0:	200009b0 	.word	0x200009b0
 80020d4:	200009b8 	.word	0x200009b8
 80020d8:	200009f8 	.word	0x200009f8
 80020dc:	200009e8 	.word	0x200009e8

080020e0 <storage_f>:
* @retval None
*/

/* USER CODE END Header_storage_f */
void storage_f(void const * argument)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b0a0      	sub	sp, #128	; 0x80
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN storage_f */
  osDelay(500);
 80020e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020ec:	f00f fe55 	bl	8011d9a <osDelay>
  char info_msg[100];

  memory_region_pointer* data_ptr;
  osEvent storage_w_event;

  sprintf(info_msg,"Wait for storage init....");
 80020f0:	f107 0318 	add.w	r3, r7, #24
 80020f4:	499b      	ldr	r1, [pc, #620]	; (8002364 <storage_f+0x284>)
 80020f6:	4618      	mov	r0, r3
 80020f8:	f013 f8fa 	bl	80152f0 <siprintf>
  HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 80020fc:	f107 0318 	add.w	r3, r7, #24
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe f86f 	bl	80001e4 <strlen>
 8002106:	4603      	mov	r3, r0
 8002108:	b29a      	uxth	r2, r3
 800210a:	f107 0118 	add.w	r1, r7, #24
 800210e:	2364      	movs	r3, #100	; 0x64
 8002110:	4895      	ldr	r0, [pc, #596]	; (8002368 <storage_f+0x288>)
 8002112:	f006 f87c 	bl	800820e <HAL_UART_Transmit>

  sd_storage_link_ss(&microsd_storage,0,SS_SD1_Pin,GPIOA);
 8002116:	4b95      	ldr	r3, [pc, #596]	; (800236c <storage_f+0x28c>)
 8002118:	2202      	movs	r2, #2
 800211a:	2100      	movs	r1, #0
 800211c:	4894      	ldr	r0, [pc, #592]	; (8002370 <storage_f+0x290>)
 800211e:	f7ff f899 	bl	8001254 <sd_storage_link_ss>
  sd_storage_link_ss(&microsd_storage,1,SS_SD2_Pin,GPIOA);
 8002122:	4b92      	ldr	r3, [pc, #584]	; (800236c <storage_f+0x28c>)
 8002124:	2204      	movs	r2, #4
 8002126:	2101      	movs	r1, #1
 8002128:	4891      	ldr	r0, [pc, #580]	; (8002370 <storage_f+0x290>)
 800212a:	f7ff f893 	bl	8001254 <sd_storage_link_ss>
  sd_storage_link_ss(&microsd_storage,2,SS_SD3_Pin,SS_SD3_GPIO_Port);
 800212e:	4b91      	ldr	r3, [pc, #580]	; (8002374 <storage_f+0x294>)
 8002130:	2202      	movs	r2, #2
 8002132:	2102      	movs	r1, #2
 8002134:	488e      	ldr	r0, [pc, #568]	; (8002370 <storage_f+0x290>)
 8002136:	f7ff f88d 	bl	8001254 <sd_storage_link_ss>
  sd_storage_link_ss(&microsd_storage,3,SS_SD4_Pin,GPIOA);
 800213a:	4b8c      	ldr	r3, [pc, #560]	; (800236c <storage_f+0x28c>)
 800213c:	2280      	movs	r2, #128	; 0x80
 800213e:	2103      	movs	r1, #3
 8002140:	488b      	ldr	r0, [pc, #556]	; (8002370 <storage_f+0x290>)
 8002142:	f7ff f887 	bl	8001254 <sd_storage_link_ss>
  while(sd_storage_init(&microsd_storage)!=F_OK) osDelay(1000);
 8002146:	e003      	b.n	8002150 <storage_f+0x70>
 8002148:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800214c:	f00f fe25 	bl	8011d9a <osDelay>
 8002150:	4887      	ldr	r0, [pc, #540]	; (8002370 <storage_f+0x290>)
 8002152:	f7fe ffbd 	bl	80010d0 <sd_storage_init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1f5      	bne.n	8002148 <storage_f+0x68>

  sprintf(info_msg,"detected %d cards.\r",microsd_storage.num_of_discs);
 800215c:	4b84      	ldr	r3, [pc, #528]	; (8002370 <storage_f+0x290>)
 800215e:	f893 3918 	ldrb.w	r3, [r3, #2328]	; 0x918
 8002162:	461a      	mov	r2, r3
 8002164:	f107 0318 	add.w	r3, r7, #24
 8002168:	4983      	ldr	r1, [pc, #524]	; (8002378 <storage_f+0x298>)
 800216a:	4618      	mov	r0, r3
 800216c:	f013 f8c0 	bl	80152f0 <siprintf>
  HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 8002170:	f107 0318 	add.w	r3, r7, #24
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe f835 	bl	80001e4 <strlen>
 800217a:	4603      	mov	r3, r0
 800217c:	b29a      	uxth	r2, r3
 800217e:	f107 0118 	add.w	r1, r7, #24
 8002182:	2364      	movs	r3, #100	; 0x64
 8002184:	4878      	ldr	r0, [pc, #480]	; (8002368 <storage_f+0x288>)
 8002186:	f006 f842 	bl	800820e <HAL_UART_Transmit>



  disk_kbytes_left=microsd_storage.disks[microsd_storage.active_disk_indx].free_space;
 800218a:	4b79      	ldr	r3, [pc, #484]	; (8002370 <storage_f+0x290>)
 800218c:	f893 3910 	ldrb.w	r3, [r3, #2320]	; 0x910
 8002190:	4619      	mov	r1, r3
 8002192:	4a77      	ldr	r2, [pc, #476]	; (8002370 <storage_f+0x290>)
 8002194:	f44f 7311 	mov.w	r3, #580	; 0x244
 8002198:	fb01 f303 	mul.w	r3, r1, r3
 800219c:	4413      	add	r3, r2
 800219e:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a75      	ldr	r2, [pc, #468]	; (800237c <storage_f+0x29c>)
 80021a6:	6013      	str	r3, [r2, #0]
  if(open_new_wav_file()!=F_OK){
 80021a8:	f7ff fe8e 	bl	8001ec8 <open_new_wav_file>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d030      	beq.n	8002214 <storage_f+0x134>
  do{
     if(sd_storage_set_next_disk(&microsd_storage)!=F_OK){
 80021b2:	486f      	ldr	r0, [pc, #444]	; (8002370 <storage_f+0x290>)
 80021b4:	f7ff f86c 	bl	8001290 <sd_storage_set_next_disk>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d016      	beq.n	80021ec <storage_f+0x10c>
    	sprintf(info_msg,"End of storage reached.\r");
 80021be:	f107 0318 	add.w	r3, r7, #24
 80021c2:	496f      	ldr	r1, [pc, #444]	; (8002380 <storage_f+0x2a0>)
 80021c4:	4618      	mov	r0, r3
 80021c6:	f013 f893 	bl	80152f0 <siprintf>
  	    HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 80021ca:	f107 0318 	add.w	r3, r7, #24
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe f808 	bl	80001e4 <strlen>
 80021d4:	4603      	mov	r3, r0
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	f107 0118 	add.w	r1, r7, #24
 80021dc:	2364      	movs	r3, #100	; 0x64
 80021de:	4862      	ldr	r0, [pc, #392]	; (8002368 <storage_f+0x288>)
 80021e0:	f006 f815 	bl	800820e <HAL_UART_Transmit>
      	while(1){osDelay(1);}
 80021e4:	2001      	movs	r0, #1
 80021e6:	f00f fdd8 	bl	8011d9a <osDelay>
 80021ea:	e7fb      	b.n	80021e4 <storage_f+0x104>
     }
  	 disk_kbytes_left=microsd_storage.disks[microsd_storage.active_disk_indx].free_space;
 80021ec:	4b60      	ldr	r3, [pc, #384]	; (8002370 <storage_f+0x290>)
 80021ee:	f893 3910 	ldrb.w	r3, [r3, #2320]	; 0x910
 80021f2:	4619      	mov	r1, r3
 80021f4:	4a5e      	ldr	r2, [pc, #376]	; (8002370 <storage_f+0x290>)
 80021f6:	f44f 7311 	mov.w	r3, #580	; 0x244
 80021fa:	fb01 f303 	mul.w	r3, r1, r3
 80021fe:	4413      	add	r3, r2
 8002200:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a5d      	ldr	r2, [pc, #372]	; (800237c <storage_f+0x29c>)
 8002208:	6013      	str	r3, [r2, #0]
   }while(open_new_wav_file()!=F_OK);
 800220a:	f7ff fe5d 	bl	8001ec8 <open_new_wav_file>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1ce      	bne.n	80021b2 <storage_f+0xd2>

  /* Infinite loop */
  for(;;)
  {

   storage_w_event = osMessageGet(storage_wHandle, osWaitForever);
 8002214:	4b5b      	ldr	r3, [pc, #364]	; (8002384 <storage_f+0x2a4>)
 8002216:	6819      	ldr	r1, [r3, #0]
 8002218:	f107 030c 	add.w	r3, r7, #12
 800221c:	f04f 32ff 	mov.w	r2, #4294967295
 8002220:	4618      	mov	r0, r3
 8002222:	f00f fe37 	bl	8011e94 <osMessageGet>
   if(storage_w_event.status == osEventMessage){
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2b10      	cmp	r3, #16
 800222a:	d1f3      	bne.n	8002214 <storage_f+0x134>
	 data_ptr=(memory_region_pointer*)storage_w_event.value.v;
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	67fb      	str	r3, [r7, #124]	; 0x7c


	 if(file_bytes_left>data_ptr->size){
 8002230:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	4b54      	ldr	r3, [pc, #336]	; (8002388 <storage_f+0x2a8>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d22c      	bcs.n	8002296 <storage_f+0x1b6>
	   if(wav_file_write(&wav_file,data_ptr->start_addr,data_ptr->size)==F_OK){
 800223c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800223e:	6819      	ldr	r1, [r3, #0]
 8002240:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	461a      	mov	r2, r3
 8002246:	4851      	ldr	r0, [pc, #324]	; (800238c <storage_f+0x2ac>)
 8002248:	f001 f8eb 	bl	8003422 <wav_file_write>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d107      	bne.n	8002262 <storage_f+0x182>
	      file_bytes_left-=data_ptr->size;
 8002252:	4b4d      	ldr	r3, [pc, #308]	; (8002388 <storage_f+0x2a8>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	4a4a      	ldr	r2, [pc, #296]	; (8002388 <storage_f+0x2a8>)
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	e7d8      	b.n	8002214 <storage_f+0x134>
	   }
	   else{
	      wav_file_close(&wav_file);
 8002262:	484a      	ldr	r0, [pc, #296]	; (800238c <storage_f+0x2ac>)
 8002264:	f001 f8ac 	bl	80033c0 <wav_file_close>
	      sprintf(info_msg,"Write error.\r");
 8002268:	f107 0318 	add.w	r3, r7, #24
 800226c:	4948      	ldr	r1, [pc, #288]	; (8002390 <storage_f+0x2b0>)
 800226e:	4618      	mov	r0, r3
 8002270:	f013 f83e 	bl	80152f0 <siprintf>
	      HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 8002274:	f107 0318 	add.w	r3, r7, #24
 8002278:	4618      	mov	r0, r3
 800227a:	f7fd ffb3 	bl	80001e4 <strlen>
 800227e:	4603      	mov	r3, r0
 8002280:	b29a      	uxth	r2, r3
 8002282:	f107 0118 	add.w	r1, r7, #24
 8002286:	2364      	movs	r3, #100	; 0x64
 8002288:	4837      	ldr	r0, [pc, #220]	; (8002368 <storage_f+0x288>)
 800228a:	f005 ffc0 	bl	800820e <HAL_UART_Transmit>
	      while(1){osDelay(1);}
 800228e:	2001      	movs	r0, #1
 8002290:	f00f fd83 	bl	8011d9a <osDelay>
 8002294:	e7fb      	b.n	800228e <storage_f+0x1ae>
	   }
	 }
	 else{
		wav_file_close(&wav_file);
 8002296:	483d      	ldr	r0, [pc, #244]	; (800238c <storage_f+0x2ac>)
 8002298:	f001 f892 	bl	80033c0 <wav_file_close>
		if(open_new_wav_file()!=F_OK){
 800229c:	f7ff fe14 	bl	8001ec8 <open_new_wav_file>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d030      	beq.n	8002308 <storage_f+0x228>
		  do{
				if(sd_storage_set_next_disk(&microsd_storage)!=F_OK){
 80022a6:	4832      	ldr	r0, [pc, #200]	; (8002370 <storage_f+0x290>)
 80022a8:	f7fe fff2 	bl	8001290 <sd_storage_set_next_disk>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d016      	beq.n	80022e0 <storage_f+0x200>
	        		sprintf(info_msg,"End of storage reached.\r");
 80022b2:	f107 0318 	add.w	r3, r7, #24
 80022b6:	4932      	ldr	r1, [pc, #200]	; (8002380 <storage_f+0x2a0>)
 80022b8:	4618      	mov	r0, r3
 80022ba:	f013 f819 	bl	80152f0 <siprintf>
		        	HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 80022be:	f107 0318 	add.w	r3, r7, #24
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fd ff8e 	bl	80001e4 <strlen>
 80022c8:	4603      	mov	r3, r0
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	f107 0118 	add.w	r1, r7, #24
 80022d0:	2364      	movs	r3, #100	; 0x64
 80022d2:	4825      	ldr	r0, [pc, #148]	; (8002368 <storage_f+0x288>)
 80022d4:	f005 ff9b 	bl	800820e <HAL_UART_Transmit>
		        	while(1){osDelay(1);}
 80022d8:	2001      	movs	r0, #1
 80022da:	f00f fd5e 	bl	8011d9a <osDelay>
 80022de:	e7fb      	b.n	80022d8 <storage_f+0x1f8>
				}
				disk_kbytes_left=microsd_storage.disks[microsd_storage.active_disk_indx].free_space;
 80022e0:	4b23      	ldr	r3, [pc, #140]	; (8002370 <storage_f+0x290>)
 80022e2:	f893 3910 	ldrb.w	r3, [r3, #2320]	; 0x910
 80022e6:	4619      	mov	r1, r3
 80022e8:	4a21      	ldr	r2, [pc, #132]	; (8002370 <storage_f+0x290>)
 80022ea:	f44f 7311 	mov.w	r3, #580	; 0x244
 80022ee:	fb01 f303 	mul.w	r3, r1, r3
 80022f2:	4413      	add	r3, r2
 80022f4:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a20      	ldr	r2, [pc, #128]	; (800237c <storage_f+0x29c>)
 80022fc:	6013      	str	r3, [r2, #0]
		   }while(open_new_wav_file()!=F_OK);
 80022fe:	f7ff fde3 	bl	8001ec8 <open_new_wav_file>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1ce      	bne.n	80022a6 <storage_f+0x1c6>
	   	 }
		 if(wav_file_write(&wav_file,data_ptr->start_addr,data_ptr->size)==F_OK){
 8002308:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800230a:	6819      	ldr	r1, [r3, #0]
 800230c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	461a      	mov	r2, r3
 8002312:	481e      	ldr	r0, [pc, #120]	; (800238c <storage_f+0x2ac>)
 8002314:	f001 f885 	bl	8003422 <wav_file_write>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d107      	bne.n	800232e <storage_f+0x24e>
			 file_bytes_left-=data_ptr->size;
 800231e:	4b1a      	ldr	r3, [pc, #104]	; (8002388 <storage_f+0x2a8>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	4a17      	ldr	r2, [pc, #92]	; (8002388 <storage_f+0x2a8>)
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	e772      	b.n	8002214 <storage_f+0x134>

	     }
		 else{
			 wav_file_close(&wav_file);
 800232e:	4817      	ldr	r0, [pc, #92]	; (800238c <storage_f+0x2ac>)
 8002330:	f001 f846 	bl	80033c0 <wav_file_close>
		     sprintf(info_msg,"Write error.\r");
 8002334:	f107 0318 	add.w	r3, r7, #24
 8002338:	4915      	ldr	r1, [pc, #84]	; (8002390 <storage_f+0x2b0>)
 800233a:	4618      	mov	r0, r3
 800233c:	f012 ffd8 	bl	80152f0 <siprintf>
		     HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 8002340:	f107 0318 	add.w	r3, r7, #24
 8002344:	4618      	mov	r0, r3
 8002346:	f7fd ff4d 	bl	80001e4 <strlen>
 800234a:	4603      	mov	r3, r0
 800234c:	b29a      	uxth	r2, r3
 800234e:	f107 0118 	add.w	r1, r7, #24
 8002352:	2364      	movs	r3, #100	; 0x64
 8002354:	4804      	ldr	r0, [pc, #16]	; (8002368 <storage_f+0x288>)
 8002356:	f005 ff5a 	bl	800820e <HAL_UART_Transmit>
		     while(1){osDelay(1);}
 800235a:	2001      	movs	r0, #1
 800235c:	f00f fd1d 	bl	8011d9a <osDelay>
 8002360:	e7fb      	b.n	800235a <storage_f+0x27a>
 8002362:	bf00      	nop
 8002364:	080175c8 	.word	0x080175c8
 8002368:	20000954 	.word	0x20000954
 800236c:	40020000 	.word	0x40020000
 8002370:	20000e9c 	.word	0x20000e9c
 8002374:	40020800 	.word	0x40020800
 8002378:	080175e4 	.word	0x080175e4
 800237c:	20001b78 	.word	0x20001b78
 8002380:	080175f8 	.word	0x080175f8
 8002384:	200009b4 	.word	0x200009b4
 8002388:	20001b74 	.word	0x20001b74
 800238c:	200017b8 	.word	0x200017b8
 8002390:	08017614 	.word	0x08017614

08002394 <icListen_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_icListen_f */
void icListen_f(void const * argument)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b0a0      	sub	sp, #128	; 0x80
 8002398:	af00      	add	r7, sp, #0
 800239a:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN icListen_f */
  /* Infinite loop */
  uint8_t msg_type;
  memory_region_pointer* usb_tx_msg_ptr;
  memory_region_pointer  parsed_data_ptr[10];
  uint8_t                parsed_data_ptr_index=0;
 800239c:	2300      	movs	r3, #0
 800239e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  osEvent event;

  while(system_status!=SYSTEM_READY) {osDelay(1);}
 80023a2:	e002      	b.n	80023aa <icListen_f+0x16>
 80023a4:	2001      	movs	r0, #1
 80023a6:	f00f fcf8 	bl	8011d9a <osDelay>
 80023aa:	4b49      	ldr	r3, [pc, #292]	; (80024d0 <icListen_f+0x13c>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b0a      	cmp	r3, #10
 80023b0:	d1f8      	bne.n	80023a4 <icListen_f+0x10>
  icListen_init_sensor_status(&icListen);
 80023b2:	4848      	ldr	r0, [pc, #288]	; (80024d4 <icListen_f+0x140>)
 80023b4:	f7fe ffb0 	bl	8001318 <icListen_init_sensor_status>
  icListen.settings=(icListen_settings_typedef*)mcu_flash.data.raw_data;
 80023b8:	4b46      	ldr	r3, [pc, #280]	; (80024d4 <icListen_f+0x140>)
 80023ba:	4a47      	ldr	r2, [pc, #284]	; (80024d8 <icListen_f+0x144>)
 80023bc:	621a      	str	r2, [r3, #32]
  icListen_prepare_messages(&icListen);
 80023be:	4845      	ldr	r0, [pc, #276]	; (80024d4 <icListen_f+0x140>)
 80023c0:	f7ff fd4a 	bl	8001e58 <icListen_prepare_messages>
  icListen.delay_time=((3000*1000)/((icListen.settings->wav_sample_bit_depth/8)*icListen.settings->wav_sample_rate))/3;
 80023c4:	4b43      	ldr	r3, [pc, #268]	; (80024d4 <icListen_f+0x140>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	08db      	lsrs	r3, r3, #3
 80023cc:	4a41      	ldr	r2, [pc, #260]	; (80024d4 <icListen_f+0x140>)
 80023ce:	6a12      	ldr	r2, [r2, #32]
 80023d0:	6812      	ldr	r2, [r2, #0]
 80023d2:	fb02 f303 	mul.w	r3, r2, r3
 80023d6:	4a41      	ldr	r2, [pc, #260]	; (80024dc <icListen_f+0x148>)
 80023d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023dc:	b29a      	uxth	r2, r3
 80023de:	4b3d      	ldr	r3, [pc, #244]	; (80024d4 <icListen_f+0x140>)
 80023e0:	861a      	strh	r2, [r3, #48]	; 0x30


  /* Infinite loop */
  for(;;)
  {
	   event = osMessageGet(USB_txHandle, osWaitForever);
 80023e2:	4b3f      	ldr	r3, [pc, #252]	; (80024e0 <icListen_f+0x14c>)
 80023e4:	6819      	ldr	r1, [r3, #0]
 80023e6:	f107 0318 	add.w	r3, r7, #24
 80023ea:	f04f 32ff 	mov.w	r2, #4294967295
 80023ee:	4618      	mov	r0, r3
 80023f0:	f00f fd50 	bl	8011e94 <osMessageGet>
	   if(icListen.status==ICLISTEN_CONNECTED){
 80023f4:	4b37      	ldr	r3, [pc, #220]	; (80024d4 <icListen_f+0x140>)
 80023f6:	7f5b      	ldrb	r3, [r3, #29]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f2      	bne.n	80023e2 <icListen_f+0x4e>
		if(event.status == osEventMessage){
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	2b10      	cmp	r3, #16
 8002400:	d109      	bne.n	8002416 <icListen_f+0x82>
		   usb_tx_msg_ptr=(memory_region_pointer*)event.value.v;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	67bb      	str	r3, [r7, #120]	; 0x78
		   USB_transmit_msg(usb_tx_msg_ptr->start_addr,usb_tx_msg_ptr->size);
 8002406:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	4619      	mov	r1, r3
 8002410:	4610      	mov	r0, r2
 8002412:	f011 feeb 	bl	80141ec <USB_transmit_msg>
		}

		event = osMessageGet(USB_rxHandle, 20);
 8002416:	4b33      	ldr	r3, [pc, #204]	; (80024e4 <icListen_f+0x150>)
 8002418:	6819      	ldr	r1, [r3, #0]
 800241a:	463b      	mov	r3, r7
 800241c:	2214      	movs	r2, #20
 800241e:	4618      	mov	r0, r3
 8002420:	f00f fd38 	bl	8011e94 <osMessageGet>
 8002424:	f107 0318 	add.w	r3, r7, #24
 8002428:	463a      	mov	r2, r7
 800242a:	ca07      	ldmia	r2, {r0, r1, r2}
 800242c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		if(event.status == osEventMessage){
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2b10      	cmp	r3, #16
 8002434:	d1d5      	bne.n	80023e2 <icListen_f+0x4e>

		   if(icListen_parse_msg((uint8_t*)event.value.v,&icListen,&msg_type,&parsed_data_ptr[parsed_data_ptr_index])==F_OK)
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	4618      	mov	r0, r3
 800243a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800243e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	f107 0277 	add.w	r2, r7, #119	; 0x77
 800244a:	4922      	ldr	r1, [pc, #136]	; (80024d4 <icListen_f+0x140>)
 800244c:	f7ff f92b 	bl	80016a6 <icListen_parse_msg>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1c5      	bne.n	80023e2 <icListen_f+0x4e>
		   {
			   if(msg_type==MSG_TYPE_COLLECT_DATA){
 8002456:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800245a:	2b43      	cmp	r3, #67	; 0x43
 800245c:	d1c1      	bne.n	80023e2 <icListen_f+0x4e>
			     if(parsed_data_ptr[parsed_data_ptr_index].size>7){
 800245e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	3380      	adds	r3, #128	; 0x80
 8002466:	443b      	add	r3, r7
 8002468:	f853 3c58 	ldr.w	r3, [r3, #-88]
 800246c:	2b07      	cmp	r3, #7
 800246e:	d91d      	bls.n	80024ac <icListen_f+0x118>
				  osMessagePut(storage_wHandle,(uint32_t)&parsed_data_ptr[parsed_data_ptr_index],0);
 8002470:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <icListen_f+0x154>)
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002478:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	4413      	add	r3, r2
 8002480:	2200      	movs	r2, #0
 8002482:	4619      	mov	r1, r3
 8002484:	f00f fcc6 	bl	8011e14 <osMessagePut>
				  parsed_data_ptr_index++;
 8002488:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800248c:	3301      	adds	r3, #1
 800248e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				  parsed_data_ptr_index%=10;
 8002492:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8002496:	4b15      	ldr	r3, [pc, #84]	; (80024ec <icListen_f+0x158>)
 8002498:	fba3 1302 	umull	r1, r3, r3, r2
 800249c:	08d9      	lsrs	r1, r3, #3
 800249e:	460b      	mov	r3, r1
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			     }
			     if(icListen.delay_time>0) osDelay(icListen.delay_time);
 80024ac:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <icListen_f+0x140>)
 80024ae:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d004      	beq.n	80024be <icListen_f+0x12a>
 80024b4:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <icListen_f+0x140>)
 80024b6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80024b8:	4618      	mov	r0, r3
 80024ba:	f00f fc6e 	bl	8011d9a <osDelay>
				 osMessagePut(USB_txHandle,(uint32_t)&collect_msg_ptr, 0);
 80024be:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <icListen_f+0x14c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	490b      	ldr	r1, [pc, #44]	; (80024f0 <icListen_f+0x15c>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	4618      	mov	r0, r3
 80024c8:	f00f fca4 	bl	8011e14 <osMessagePut>
	   event = osMessageGet(USB_txHandle, osWaitForever);
 80024cc:	e789      	b.n	80023e2 <icListen_f+0x4e>
 80024ce:	bf00      	nop
 80024d0:	20001b70 	.word	0x20001b70
 80024d4:	20000800 	.word	0x20000800
 80024d8:	20000e84 	.word	0x20000e84
 80024dc:	000f4240 	.word	0x000f4240
 80024e0:	200009b0 	.word	0x200009b0
 80024e4:	200009ac 	.word	0x200009ac
 80024e8:	200009b4 	.word	0x200009b4
 80024ec:	cccccccd 	.word	0xcccccccd
 80024f0:	200009e8 	.word	0x200009e8

080024f4 <uart_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_f */
void uart_f(void const * argument)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uart_f */
  uint8_t tmp;
  while(system_status!=SYSTEM_READY) {osDelay(1);}
 80024fc:	e002      	b.n	8002504 <uart_f+0x10>
 80024fe:	2001      	movs	r0, #1
 8002500:	f00f fc4b 	bl	8011d9a <osDelay>
 8002504:	4b10      	ldr	r3, [pc, #64]	; (8002548 <uart_f+0x54>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b0a      	cmp	r3, #10
 800250a:	d1f8      	bne.n	80024fe <uart_f+0xa>
  user_interface.media_status=UI_MEDIA_READY;
 800250c:	4b0f      	ldr	r3, [pc, #60]	; (800254c <uart_f+0x58>)
 800250e:	220a      	movs	r2, #10
 8002510:	735a      	strb	r2, [r3, #13]
  /* Infinite loop */

  for(;;)
  {
   if(UI_UART.gState!=HAL_UART_STATE_BUSY_TX)
 8002512:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <uart_f+0x5c>)
 8002514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b21      	cmp	r3, #33	; 0x21
 800251c:	d00f      	beq.n	800253e <uart_f+0x4a>
   {
 	if(UI_media_get_byte(&user_interface,&tmp)==UI_F_OK) HAL_UART_Transmit_IT(&UI_UART,&tmp,1);
 800251e:	f107 030f 	add.w	r3, r7, #15
 8002522:	4619      	mov	r1, r3
 8002524:	4809      	ldr	r0, [pc, #36]	; (800254c <uart_f+0x58>)
 8002526:	f7fe f925 	bl	8000774 <UI_media_get_byte>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d106      	bne.n	800253e <uart_f+0x4a>
 8002530:	f107 030f 	add.w	r3, r7, #15
 8002534:	2201      	movs	r2, #1
 8002536:	4619      	mov	r1, r3
 8002538:	4805      	ldr	r0, [pc, #20]	; (8002550 <uart_f+0x5c>)
 800253a:	f005 fefa 	bl	8008332 <HAL_UART_Transmit_IT>
   }
   osDelay(1);
 800253e:	2001      	movs	r0, #1
 8002540:	f00f fc2b 	bl	8011d9a <osDelay>
   if(UI_UART.gState!=HAL_UART_STATE_BUSY_TX)
 8002544:	e7e5      	b.n	8002512 <uart_f+0x1e>
 8002546:	bf00      	nop
 8002548:	20001b70 	.word	0x20001b70
 800254c:	20000a64 	.word	0x20000a64
 8002550:	20000954 	.word	0x20000954

08002554 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a04      	ldr	r2, [pc, #16]	; (8002574 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d101      	bne.n	800256a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002566:	f000 ffcb 	bl	8003500 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40010000 	.word	0x40010000

08002578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800257c:	b672      	cpsid	i
}
 800257e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002580:	e7fe      	b.n	8002580 <Error_Handler+0x8>
	...

08002584 <mcu_flash_init>:
#if defined(STM32F205xx)  //KB
uint32_t  flash_block_size[]={16,16,16,16,64,128,128,128,128,128,128,128};
#endif

void mcu_flash_init(mcu_flash_typedef* mcu_flash_obj,uint32_t first_block)
{
 8002584:	b480      	push	{r7}
 8002586:	b087      	sub	sp, #28
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
	uint32_t temp=0;
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]
	int32_t temp2=0;
 8002592:	2300      	movs	r3, #0
 8002594:	613b      	str	r3, [r7, #16]
	if(first_block<FLASH_NUM_OF_BLOCKS){
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	2b0b      	cmp	r3, #11
 800259a:	d83d      	bhi.n	8002618 <mcu_flash_init+0x94>
      mcu_flash_obj->first_block_num=first_block;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	605a      	str	r2, [r3, #4]
      for(int i=0;i<first_block;i++) temp+=flash_block_size[i];
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	e009      	b.n	80025bc <mcu_flash_init+0x38>
 80025a8:	4a1e      	ldr	r2, [pc, #120]	; (8002624 <mcu_flash_init+0xa0>)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	4413      	add	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	3301      	adds	r3, #1
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d8f1      	bhi.n	80025a8 <mcu_flash_init+0x24>
	  mcu_flash_obj->first_block_addr=FLASH_BASE+(temp*1024);
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80025ca:	029a      	lsls	r2, r3, #10
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	601a      	str	r2, [r3, #0]

	  temp2=FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE;
 80025d0:	2316      	movs	r3, #22
 80025d2:	613b      	str	r3, [r7, #16]
	  mcu_flash_obj->num_of_blocks=0;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	721a      	strb	r2, [r3, #8]
 80025da:	2200      	movs	r2, #0
 80025dc:	725a      	strb	r2, [r3, #9]
 80025de:	2200      	movs	r2, #0
 80025e0:	729a      	strb	r2, [r3, #10]
 80025e2:	2200      	movs	r2, #0
 80025e4:	72da      	strb	r2, [r3, #11]
	  for(int i=mcu_flash_obj->first_block_num;i<FLASH_NUM_OF_BLOCKS&&temp2>0;i++) {
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	60bb      	str	r3, [r7, #8]
 80025ec:	e00e      	b.n	800260c <mcu_flash_init+0x88>
		  temp2-=flash_block_size[i];
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	490c      	ldr	r1, [pc, #48]	; (8002624 <mcu_flash_init+0xa0>)
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	613b      	str	r3, [r7, #16]
		  mcu_flash_obj->num_of_blocks++;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	609a      	str	r2, [r3, #8]
	  for(int i=mcu_flash_obj->first_block_num;i<FLASH_NUM_OF_BLOCKS&&temp2>0;i++) {
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	3301      	adds	r3, #1
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2b0b      	cmp	r3, #11
 8002610:	dc02      	bgt.n	8002618 <mcu_flash_init+0x94>
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	2b00      	cmp	r3, #0
 8002616:	dcea      	bgt.n	80025ee <mcu_flash_init+0x6a>
	  }
	}
}
 8002618:	bf00      	nop
 800261a:	371c      	adds	r7, #28
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	20000200 	.word	0x20000200

08002628 <mcu_flash_read>:

F_RES mcu_flash_read(mcu_flash_typedef* mcu_flash_obj)
{
 8002628:	b590      	push	{r4, r7, lr}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
	 memcpy((uint8_t*)&(mcu_flash_obj->data),(uint8_t*)mcu_flash_obj->first_block_addr,FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f103 000c 	add.w	r0, r3, #12
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2216      	movs	r2, #22
 800263c:	4619      	mov	r1, r3
 800263e:	f012 fa75 	bl	8014b2c <memcpy>
	 if(mcu_flash_obj->data.crc==get_crc16_arc(mcu_flash_obj->data.raw_data,FLASH_DATA_SIZE)){
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	8c1b      	ldrh	r3, [r3, #32]
 8002646:	b29c      	uxth	r4, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	330c      	adds	r3, #12
 800264c:	2114      	movs	r1, #20
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fd08 	bl	8001064 <get_crc16_arc>
 8002654:	4603      	mov	r3, r0
 8002656:	429c      	cmp	r4, r3
 8002658:	d101      	bne.n	800265e <mcu_flash_read+0x36>
		 return F_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	e000      	b.n	8002660 <mcu_flash_read+0x38>
	 }
	 else{
		 return F_ERR;
 800265e:	2301      	movs	r3, #1
	 }

}
 8002660:	4618      	mov	r0, r3
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	bd90      	pop	{r4, r7, pc}

08002668 <mcu_flash_save>:
void mcu_flash_save(mcu_flash_typedef* mcu_flash_obj)
{
 8002668:	b5b0      	push	{r4, r5, r7, lr}
 800266a:	b08c      	sub	sp, #48	; 0x30
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	uint32_t i=0;
 8002670:	2300      	movs	r3, #0
 8002672:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t tmp;
	uint32_t pgerr = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	623b      	str	r3, [r7, #32]
	uint8_t* data=(uint8_t*)&mcu_flash_obj->data;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	330c      	adds	r3, #12
 800267c:	627b      	str	r3, [r7, #36]	; 0x24

	mcu_flash_obj->data.crc=get_crc16_arc(mcu_flash_obj->data.raw_data,FLASH_DATA_SIZE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	330c      	adds	r3, #12
 8002682:	2114      	movs	r1, #20
 8002684:	4618      	mov	r0, r3
 8002686:	f7fe fced 	bl	8001064 <get_crc16_arc>
 800268a:	4603      	mov	r3, r0
 800268c:	461a      	mov	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	841a      	strh	r2, [r3, #32]

    HAL_FLASH_Unlock();
 8002692:	f001 fc2b 	bl	8003eec <HAL_FLASH_Unlock>
    #if defined(STM32F405xx)
	FLASH_EraseInitTypeDef erase_info = {
 8002696:	f107 030c 	add.w	r3, r7, #12
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	609a      	str	r2, [r3, #8]
 80026a2:	60da      	str	r2, [r3, #12]
 80026a4:	611a      	str	r2, [r3, #16]
		.TypeErase = FLASH_TYPEERASE_SECTORS,
		.Sector = mcu_flash_obj->first_block_num,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
	FLASH_EraseInitTypeDef erase_info = {
 80026aa:	617b      	str	r3, [r7, #20]
		.NbSectors = mcu_flash_obj->num_of_blocks,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
	FLASH_EraseInitTypeDef erase_info = {
 80026b0:	61bb      	str	r3, [r7, #24]
	.NbPages = mcu_flash_obj->num_of_blocks,
    };
    #endif


	HAL_FLASHEx_Erase(&erase_info, &pgerr);
 80026b2:	f107 0220 	add.w	r2, r7, #32
 80026b6:	f107 030c 	add.w	r3, r7, #12
 80026ba:	4611      	mov	r1, r2
 80026bc:	4618      	mov	r0, r3
 80026be:	f001 fd77 	bl	80041b0 <HAL_FLASHEx_Erase>

	if(pgerr != 0xFFFFFFFFul)
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c8:	d027      	beq.n	800271a <mcu_flash_save+0xb2>
	{
		HAL_FLASH_Lock();
 80026ca:	f001 fc31 	bl	8003f30 <HAL_FLASH_Lock>
 80026ce:	e029      	b.n	8002724 <mcu_flash_save+0xbc>
		return ;
	}

	while(i<(FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE))
	{
        tmp=(tmp&0x0000)|(data[i]&0x00FF);
 80026d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d4:	4413      	add	r3, r2
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	857b      	strh	r3, [r7, #42]	; 0x2a
		if((i+1)<(FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE)) tmp=tmp|(data[i+1]<<8&0xFF00);
 80026da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026dc:	3301      	adds	r3, #1
 80026de:	2b15      	cmp	r3, #21
 80026e0:	d80b      	bhi.n	80026fa <mcu_flash_save+0x92>
 80026e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e4:	3301      	adds	r3, #1
 80026e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e8:	4413      	add	r3, r2
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	021b      	lsls	r3, r3, #8
 80026ee:	b21a      	sxth	r2, r3
 80026f0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80026f4:	4313      	orrs	r3, r2
 80026f6:	b21b      	sxth	r3, r3
 80026f8:	857b      	strh	r3, [r7, #42]	; 0x2a
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,mcu_flash_obj->first_block_addr+i,tmp);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002700:	18d1      	adds	r1, r2, r3
 8002702:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002704:	2200      	movs	r2, #0
 8002706:	461c      	mov	r4, r3
 8002708:	4615      	mov	r5, r2
 800270a:	4622      	mov	r2, r4
 800270c:	462b      	mov	r3, r5
 800270e:	2001      	movs	r0, #1
 8002710:	f001 fb98 	bl	8003e44 <HAL_FLASH_Program>
		i=i+2;
 8002714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002716:	3302      	adds	r3, #2
 8002718:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(i<(FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE))
 800271a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271c:	2b15      	cmp	r3, #21
 800271e:	d9d7      	bls.n	80026d0 <mcu_flash_save+0x68>
	}

	HAL_FLASH_Lock();
 8002720:	f001 fc06 	bl	8003f30 <HAL_FLASH_Lock>
}
 8002724:	3730      	adds	r7, #48	; 0x30
 8002726:	46bd      	mov	sp, r7
 8002728:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800272c <read_time>:

extern RTC_HandleTypeDef hrtc;
rtc_typedef rtc;

time_t read_time(rtc_typedef* self_object)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08c      	sub	sp, #48	; 0x30
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
	struct tm currTime;
	HAL_RTC_GetTime(&hrtc, &self_object->time, RTC_FORMAT_BIN);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	4619      	mov	r1, r3
 800273a:	4818      	ldr	r0, [pc, #96]	; (800279c <read_time+0x70>)
 800273c:	f004 fa96 	bl	8006c6c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &self_object->date, RTC_FORMAT_BIN);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3314      	adds	r3, #20
 8002744:	2200      	movs	r2, #0
 8002746:	4619      	mov	r1, r3
 8002748:	4814      	ldr	r0, [pc, #80]	; (800279c <read_time+0x70>)
 800274a:	f004 fb71 	bl	8006e30 <HAL_RTC_GetDate>
	currTime.tm_hour=self_object->time.Hours;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	617b      	str	r3, [r7, #20]
	currTime.tm_min=self_object->time.Minutes;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	785b      	ldrb	r3, [r3, #1]
 8002758:	613b      	str	r3, [r7, #16]
	currTime.tm_sec=self_object->time.Seconds;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	789b      	ldrb	r3, [r3, #2]
 800275e:	60fb      	str	r3, [r7, #12]
	currTime.tm_mday=self_object->date.Date;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	7d9b      	ldrb	r3, [r3, #22]
 8002764:	61bb      	str	r3, [r7, #24]
	currTime.tm_mon=self_object->date.Month-1;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	7d5b      	ldrb	r3, [r3, #21]
 800276a:	3b01      	subs	r3, #1
 800276c:	61fb      	str	r3, [r7, #28]
	currTime.tm_year=(2000+self_object->date.Year)-1900;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	7ddb      	ldrb	r3, [r3, #23]
 8002772:	3364      	adds	r3, #100	; 0x64
 8002774:	623b      	str	r3, [r7, #32]
	self_object->timestamp=mktime(&currTime);
 8002776:	f107 030c 	add.w	r3, r7, #12
 800277a:	4618      	mov	r0, r3
 800277c:	f012 fac4 	bl	8014d08 <mktime>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	e9c1 2306 	strd	r2, r3, [r1, #24]
	return self_object->timestamp;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
}
 8002790:	4610      	mov	r0, r2
 8002792:	4619      	mov	r1, r3
 8002794:	3730      	adds	r7, #48	; 0x30
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000834 	.word	0x20000834

080027a0 <set_time>:

time_t set_time(rtc_typedef* self_object)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetTime(&hrtc, &self_object->time, RTC_FORMAT_BIN);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	4619      	mov	r1, r3
 80027ae:	4808      	ldr	r0, [pc, #32]	; (80027d0 <set_time+0x30>)
 80027b0:	f004 f9c2 	bl	8006b38 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &self_object->date, RTC_FORMAT_BIN);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3314      	adds	r3, #20
 80027b8:	2200      	movs	r2, #0
 80027ba:	4619      	mov	r1, r3
 80027bc:	4804      	ldr	r0, [pc, #16]	; (80027d0 <set_time+0x30>)
 80027be:	f004 fab3 	bl	8006d28 <HAL_RTC_SetDate>
}
 80027c2:	bf00      	nop
 80027c4:	4610      	mov	r0, r2
 80027c6:	4619      	mov	r1, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000834 	.word	0x20000834

080027d4 <sd_ss_set_active>:
extern volatile uint16_t htim2;

uint8_t spi_rx_buffer[512];

void sd_ss_set_active(uint8_t drv)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	71fb      	strb	r3, [r7, #7]
  active_sd_ss_pin=sd_cards_ss[drv].sd_ss_pin;
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	4a08      	ldr	r2, [pc, #32]	; (8002804 <sd_ss_set_active+0x30>)
 80027e2:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 80027e6:	4b08      	ldr	r3, [pc, #32]	; (8002808 <sd_ss_set_active+0x34>)
 80027e8:	801a      	strh	r2, [r3, #0]
  active_sd_ss_port=sd_cards_ss[drv].sd_ss_port;
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	4a05      	ldr	r2, [pc, #20]	; (8002804 <sd_ss_set_active+0x30>)
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	4413      	add	r3, r2
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	4a05      	ldr	r2, [pc, #20]	; (800280c <sd_ss_set_active+0x38>)
 80027f6:	6013      	str	r3, [r2, #0]
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	20001bb0 	.word	0x20001bb0
 8002808:	20001baa 	.word	0x20001baa
 800280c:	20001bac 	.word	0x20001bac

08002810 <sd_ss_active_pin_down>:

void sd_ss_active_pin_down()
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(active_sd_ss_port, active_sd_ss_pin, GPIO_PIN_RESET);
 8002814:	4b04      	ldr	r3, [pc, #16]	; (8002828 <sd_ss_active_pin_down+0x18>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a04      	ldr	r2, [pc, #16]	; (800282c <sd_ss_active_pin_down+0x1c>)
 800281a:	8811      	ldrh	r1, [r2, #0]
 800281c:	2200      	movs	r2, #0
 800281e:	4618      	mov	r0, r3
 8002820:	f001 ff84 	bl	800472c <HAL_GPIO_WritePin>
}
 8002824:	bf00      	nop
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20001bac 	.word	0x20001bac
 800282c:	20001baa 	.word	0x20001baa

08002830 <sd_ss_active_pin_up>:
void sd_ss_active_pin_up()
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(active_sd_ss_port, active_sd_ss_pin, GPIO_PIN_SET);
 8002834:	4b04      	ldr	r3, [pc, #16]	; (8002848 <sd_ss_active_pin_up+0x18>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a04      	ldr	r2, [pc, #16]	; (800284c <sd_ss_active_pin_up+0x1c>)
 800283a:	8811      	ldrh	r1, [r2, #0]
 800283c:	2201      	movs	r2, #1
 800283e:	4618      	mov	r0, r3
 8002840:	f001 ff74 	bl	800472c <HAL_GPIO_WritePin>
}
 8002844:	bf00      	nop
 8002846:	bd80      	pop	{r7, pc}
 8002848:	20001bac 	.word	0x20001bac
 800284c:	20001baa 	.word	0x20001baa

08002850 <SD_cmd>:



//-----------------------------------------------
static uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	6039      	str	r1, [r7, #0]
 800285a:	71fb      	strb	r3, [r7, #7]
  uint8_t n, res;
  // ACMD<n> is the command sequense of CMD55-CMD<n>
  if (cmd & 0x80)
 800285c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002860:	2b00      	cmp	r3, #0
 8002862:	da0e      	bge.n	8002882 <SD_cmd+0x32>
  {
    cmd &= 0x7F;
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800286a:	71fb      	strb	r3, [r7, #7]
    res = SD_cmd(CMD55, 0);
 800286c:	2100      	movs	r1, #0
 800286e:	2077      	movs	r0, #119	; 0x77
 8002870:	f7ff ffee 	bl	8002850 <SD_cmd>
 8002874:	4603      	mov	r3, r0
 8002876:	73bb      	strb	r3, [r7, #14]
    if (res > 1) return res;
 8002878:	7bbb      	ldrb	r3, [r7, #14]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d901      	bls.n	8002882 <SD_cmd+0x32>
 800287e:	7bbb      	ldrb	r3, [r7, #14]
 8002880:	e043      	b.n	800290a <SD_cmd+0xba>
  }
  // Select the card
  SS_SD_DESELECT();
 8002882:	f7ff ffd5 	bl	8002830 <sd_ss_active_pin_up>
  SPI_ReceiveByte();
 8002886:	f000 f96a 	bl	8002b5e <SPI_ReceiveByte>

  SS_SD_SELECT();
 800288a:	f7ff ffc1 	bl	8002810 <sd_ss_active_pin_down>
  SPI_ReceiveByte();
 800288e:	f000 f966 	bl	8002b5e <SPI_ReceiveByte>
  // Send a command packet
  SPI_SendByte(cmd); // Start + Command index
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	4618      	mov	r0, r3
 8002896:	f000 f955 	bl	8002b44 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 24)); // Argument[31..24]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	0e1b      	lsrs	r3, r3, #24
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 f94f 	bl	8002b44 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 16)); // Argument[23..16]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	0c1b      	lsrs	r3, r3, #16
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 f949 	bl	8002b44 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 8)); // Argument[15..8]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	0a1b      	lsrs	r3, r3, #8
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 f943 	bl	8002b44 <SPI_SendByte>
  SPI_SendByte((uint8_t)arg); // Argument[7..0]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 f93e 	bl	8002b44 <SPI_SendByte>

  n = 0x01; // Dummy CRC + Stop
 80028c8:	2301      	movs	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0) {n = 0x95;} // Valid CRC for CMD0(0)
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	2b40      	cmp	r3, #64	; 0x40
 80028d0:	d101      	bne.n	80028d6 <SD_cmd+0x86>
 80028d2:	2395      	movs	r3, #149	; 0x95
 80028d4:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD8) {n = 0x87;} // Valid CRC for CMD8(0x1AA)
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	2b48      	cmp	r3, #72	; 0x48
 80028da:	d101      	bne.n	80028e0 <SD_cmd+0x90>
 80028dc:	2387      	movs	r3, #135	; 0x87
 80028de:	73fb      	strb	r3, [r7, #15]
  SPI_SendByte(n);
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 f92e 	bl	8002b44 <SPI_SendByte>
  // Receive a command response
  n = 10; // Wait for a valid response in timeout of 10 attempts
 80028e8:	230a      	movs	r3, #10
 80028ea:	73fb      	strb	r3, [r7, #15]
  do {
    res = SPI_ReceiveByte();
 80028ec:	f000 f937 	bl	8002b5e <SPI_ReceiveByte>
 80028f0:	4603      	mov	r3, r0
 80028f2:	73bb      	strb	r3, [r7, #14]
  } while ((res & 0x80) && --n);
 80028f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	da05      	bge.n	8002908 <SD_cmd+0xb8>
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	3b01      	subs	r3, #1
 8002900:	73fb      	strb	r3, [r7, #15]
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1f1      	bne.n	80028ec <SD_cmd+0x9c>
  return res;
 8002908:	7bbb      	ldrb	r3, [r7, #14]
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <sd_ini>:

uint8_t sd_ini(void)
{
 8002914:	b590      	push	{r4, r7, lr}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
	  uint8_t i, cmd;;
	  uint8_t ocr[4];
	  int16_t tmr;
	  uint32_t temp;
	  //LD_OFF;
	  sdinfo.type = 0;
 800291a:	4b57      	ldr	r3, [pc, #348]	; (8002a78 <sd_ini+0x164>)
 800291c:	2200      	movs	r2, #0
 800291e:	701a      	strb	r2, [r3, #0]

	  hspi1.Init.BaudRatePrescaler = temp;
	  HAL_SPI_Init(&hspi1);
	  */

	  SS_SD_SELECT();
 8002920:	f7ff ff76 	bl	8002810 <sd_ss_active_pin_down>
	  if (SD_cmd(CMD0, 0) == 1) // Enter Idle state
 8002924:	2100      	movs	r1, #0
 8002926:	2040      	movs	r0, #64	; 0x40
 8002928:	f7ff ff92 	bl	8002850 <SD_cmd>
 800292c:	4603      	mov	r3, r0
 800292e:	2b01      	cmp	r3, #1
 8002930:	f040 809a 	bne.w	8002a68 <sd_ini+0x154>
	  {
		  SPI_Release();
 8002934:	f000 f920 	bl	8002b78 <SPI_Release>
		  if (SD_cmd(CMD8, 0x1AA) == 1) // SDv2
 8002938:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800293c:	2048      	movs	r0, #72	; 0x48
 800293e:	f7ff ff87 	bl	8002850 <SD_cmd>
 8002942:	4603      	mov	r3, r0
 8002944:	2b01      	cmp	r3, #1
 8002946:	d157      	bne.n	80029f8 <sd_ini+0xe4>
		  {
			  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8002948:	2300      	movs	r3, #0
 800294a:	71fb      	strb	r3, [r7, #7]
 800294c:	e00c      	b.n	8002968 <sd_ini+0x54>
 800294e:	79fc      	ldrb	r4, [r7, #7]
 8002950:	f000 f905 	bl	8002b5e <SPI_ReceiveByte>
 8002954:	4603      	mov	r3, r0
 8002956:	461a      	mov	r2, r3
 8002958:	f104 0308 	add.w	r3, r4, #8
 800295c:	443b      	add	r3, r7
 800295e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	3301      	adds	r3, #1
 8002966:	71fb      	strb	r3, [r7, #7]
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	2b03      	cmp	r3, #3
 800296c:	d9ef      	bls.n	800294e <sd_ini+0x3a>

			    // Get trailing return value of R7 resp
			    if (ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 800296e:	78bb      	ldrb	r3, [r7, #2]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d17b      	bne.n	8002a6c <sd_ini+0x158>
 8002974:	78fb      	ldrb	r3, [r7, #3]
 8002976:	2baa      	cmp	r3, #170	; 0xaa
 8002978:	d178      	bne.n	8002a6c <sd_ini+0x158>
			    {
			    	for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--)
 800297a:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800297e:	80bb      	strh	r3, [r7, #4]
 8002980:	e005      	b.n	800298e <sd_ini+0x7a>
 8002982:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002986:	b29b      	uxth	r3, r3
 8002988:	3b01      	subs	r3, #1
 800298a:	b29b      	uxth	r3, r3
 800298c:	80bb      	strh	r3, [r7, #4]
 800298e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d007      	beq.n	80029a6 <sd_ini+0x92>
 8002996:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800299a:	20e9      	movs	r0, #233	; 0xe9
 800299c:	f7ff ff58 	bl	8002850 <SD_cmd>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1ed      	bne.n	8002982 <sd_ini+0x6e>
			    	    ; // Wait for leaving idle state (ACMD41 with HCS bit)
			    	if (tmr && SD_cmd(CMD58, 0) == 0)
 80029a6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d05e      	beq.n	8002a6c <sd_ini+0x158>
 80029ae:	2100      	movs	r1, #0
 80029b0:	207a      	movs	r0, #122	; 0x7a
 80029b2:	f7ff ff4d 	bl	8002850 <SD_cmd>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d157      	bne.n	8002a6c <sd_ini+0x158>
			    	 { // Check CCS bit in the OCR
			    	  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 80029bc:	2300      	movs	r3, #0
 80029be:	71fb      	strb	r3, [r7, #7]
 80029c0:	e00c      	b.n	80029dc <sd_ini+0xc8>
 80029c2:	79fc      	ldrb	r4, [r7, #7]
 80029c4:	f000 f8cb 	bl	8002b5e <SPI_ReceiveByte>
 80029c8:	4603      	mov	r3, r0
 80029ca:	461a      	mov	r2, r3
 80029cc:	f104 0308 	add.w	r3, r4, #8
 80029d0:	443b      	add	r3, r7
 80029d2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	3301      	adds	r3, #1
 80029da:	71fb      	strb	r3, [r7, #7]
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d9ef      	bls.n	80029c2 <sd_ini+0xae>
			     	   sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 80029e2:	783b      	ldrb	r3, [r7, #0]
 80029e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <sd_ini+0xdc>
 80029ec:	220c      	movs	r2, #12
 80029ee:	e000      	b.n	80029f2 <sd_ini+0xde>
 80029f0:	2204      	movs	r2, #4
 80029f2:	4b21      	ldr	r3, [pc, #132]	; (8002a78 <sd_ini+0x164>)
 80029f4:	701a      	strb	r2, [r3, #0]
 80029f6:	e039      	b.n	8002a6c <sd_ini+0x158>
			    	}
			    }
		  }
		  else //SDv1 or MMCv3
		  {
			  if (SD_cmd(ACMD41, 0) <= 1)
 80029f8:	2100      	movs	r1, #0
 80029fa:	20e9      	movs	r0, #233	; 0xe9
 80029fc:	f7ff ff28 	bl	8002850 <SD_cmd>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d805      	bhi.n	8002a12 <sd_ini+0xfe>
			    {
			      sdinfo.type = CT_SD1; cmd = ACMD41; // SDv1
 8002a06:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <sd_ini+0x164>)
 8002a08:	2202      	movs	r2, #2
 8002a0a:	701a      	strb	r2, [r3, #0]
 8002a0c:	23e9      	movs	r3, #233	; 0xe9
 8002a0e:	71bb      	strb	r3, [r7, #6]
 8002a10:	e004      	b.n	8002a1c <sd_ini+0x108>
			    }
			    else
			    {
			      sdinfo.type = CT_MMC; cmd = CMD1; // MMCv3
 8002a12:	4b19      	ldr	r3, [pc, #100]	; (8002a78 <sd_ini+0x164>)
 8002a14:	2201      	movs	r2, #1
 8002a16:	701a      	strb	r2, [r3, #0]
 8002a18:	2341      	movs	r3, #65	; 0x41
 8002a1a:	71bb      	strb	r3, [r7, #6]
			    }
			    for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; // Wait for leaving idle state
 8002a1c:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8002a20:	80bb      	strh	r3, [r7, #4]
 8002a22:	e005      	b.n	8002a30 <sd_ini+0x11c>
 8002a24:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	80bb      	strh	r3, [r7, #4]
 8002a30:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d007      	beq.n	8002a48 <sd_ini+0x134>
 8002a38:	79bb      	ldrb	r3, [r7, #6]
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff ff07 	bl	8002850 <SD_cmd>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1ed      	bne.n	8002a24 <sd_ini+0x110>
			    if (!tmr || SD_cmd(CMD16, 512) != 0) // Set R/W block length to 512
 8002a48:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d007      	beq.n	8002a60 <sd_ini+0x14c>
 8002a50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a54:	2050      	movs	r0, #80	; 0x50
 8002a56:	f7ff fefb 	bl	8002850 <SD_cmd>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <sd_ini+0x158>
			    sdinfo.type = 0;
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <sd_ini+0x164>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	701a      	strb	r2, [r3, #0]
 8002a66:	e001      	b.n	8002a6c <sd_ini+0x158>

	  }
	  else
	  {

	    return 1;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <sd_ini+0x15a>
	  }




  return 0;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd90      	pop	{r4, r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20001ba8 	.word	0x20001ba8

08002a7c <Error>:

static void Error (void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  //LD_ON;
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <SPI_wait_ready>:

uint8_t SPI_wait_ready(void)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b082      	sub	sp, #8
 8002a8e:	af00      	add	r7, sp, #0
  uint8_t res;
  uint16_t cnt;
  cnt=0;
 8002a90:	2300      	movs	r3, #0
 8002a92:	80fb      	strh	r3, [r7, #6]
  do {
    res=SPI_ReceiveByte();
 8002a94:	f000 f863 	bl	8002b5e <SPI_ReceiveByte>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	717b      	strb	r3, [r7, #5]
    cnt++;
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	80fb      	strh	r3, [r7, #6]
  } while ( (res!=0xFF)&&(cnt<0xFFFF) );
 8002aa2:	797b      	ldrb	r3, [r7, #5]
 8002aa4:	2bff      	cmp	r3, #255	; 0xff
 8002aa6:	d004      	beq.n	8002ab2 <SPI_wait_ready+0x28>
 8002aa8:	88fb      	ldrh	r3, [r7, #6]
 8002aaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d1f0      	bne.n	8002a94 <SPI_wait_ready+0xa>
  if (cnt>=0xFFFF) return 1;
 8002ab2:	88fb      	ldrh	r3, [r7, #6]
 8002ab4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d101      	bne.n	8002ac0 <SPI_wait_ready+0x36>
 8002abc:	2301      	movs	r3, #1
 8002abe:	e000      	b.n	8002ac2 <SPI_wait_ready+0x38>
  return res;
 8002ac0:	797b      	ldrb	r3, [r7, #5]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <SPIx_Write_Multi>:
{
	if(HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_READY) return F_OK;
	else return F_ERR;
}
F_RES SPIx_Write_Multi(uint8_t* tx_buf,uint32_t size)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af02      	add	r7, sp, #8
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
	if(HAL_SPI_TransmitReceive(&hspi1, tx_buf, spi_rx_buffer, size,HAL_MAX_DELAY)==HAL_OK) return F_OK;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	f04f 32ff 	mov.w	r2, #4294967295
 8002ade:	9200      	str	r2, [sp, #0]
 8002ae0:	4a07      	ldr	r2, [pc, #28]	; (8002b00 <SPIx_Write_Multi+0x34>)
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4807      	ldr	r0, [pc, #28]	; (8002b04 <SPIx_Write_Multi+0x38>)
 8002ae6:	f004 fb38 	bl	800715a <HAL_SPI_TransmitReceive>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <SPIx_Write_Multi+0x28>
 8002af0:	2300      	movs	r3, #0
 8002af2:	e000      	b.n	8002af6 <SPIx_Write_Multi+0x2a>
		else return F_ERR;
 8002af4:	2301      	movs	r3, #1
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20001bd0 	.word	0x20001bd0
 8002b04:	20000854 	.word	0x20000854

08002b08 <SPIx_WriteRead>:
	if(HAL_SPI_Transmit_DMA(&hspi1, tx_buf, size)==HAL_OK) return F_OK;
	else return F_ERR;
}

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af02      	add	r7, sp, #8
 8002b0e:	4603      	mov	r3, r0
 8002b10:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8002b12:	2300      	movs	r3, #0
 8002b14:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 8002b16:	f107 020f 	add.w	r2, r7, #15
 8002b1a:	1df9      	adds	r1, r7, #7
 8002b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	2301      	movs	r3, #1
 8002b24:	4806      	ldr	r0, [pc, #24]	; (8002b40 <SPIx_WriteRead+0x38>)
 8002b26:	f004 fb18 	bl	800715a <HAL_SPI_TransmitReceive>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <SPIx_WriteRead+0x2c>
  {
    Error();
 8002b30:	f7ff ffa4 	bl	8002a7c <Error>
  }
  return receivedbyte;
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000854 	.word	0x20000854

08002b44 <SPI_SendByte>:

void SPI_SendByte(uint8_t bt)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	71fb      	strb	r3, [r7, #7]
  SPIx_WriteRead(bt);
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff ffd9 	bl	8002b08 <SPIx_WriteRead>
}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <SPI_ReceiveByte>:

uint8_t SPI_ReceiveByte(void)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
  uint8_t bt = SPIx_WriteRead(0xFF);
 8002b64:	20ff      	movs	r0, #255	; 0xff
 8002b66:	f7ff ffcf 	bl	8002b08 <SPIx_WriteRead>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	71fb      	strb	r3, [r7, #7]
  return bt;
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <SPI_Release>:
void SPI_Release(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  SPIx_WriteRead(0xFF);
 8002b7c:	20ff      	movs	r0, #255	; 0xff
 8002b7e:	f7ff ffc3 	bl	8002b08 <SPIx_WriteRead>
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <SD_Read_Block>:

uint8_t SD_Read_Block (uint8_t *buff, uint32_t lba)
{
 8002b86:	b590      	push	{r4, r7, lr}
 8002b88:	b085      	sub	sp, #20
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	6039      	str	r1, [r7, #0]
  uint8_t result;
  uint16_t cnt;

  result=SD_cmd (CMD17, lba);
 8002b90:	6839      	ldr	r1, [r7, #0]
 8002b92:	2051      	movs	r0, #81	; 0x51
 8002b94:	f7ff fe5c 	bl	8002850 <SD_cmd>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	737b      	strb	r3, [r7, #13]
  if (result!=0x00){
 8002b9c:	7b7b      	ldrb	r3, [r7, #13]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <SD_Read_Block+0x20>
	  return 5;
 8002ba2:	2305      	movs	r3, #5
 8002ba4:	e02f      	b.n	8002c06 <SD_Read_Block+0x80>
  }

  SPI_Release();
 8002ba6:	f7ff ffe7 	bl	8002b78 <SPI_Release>
   cnt=0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	81fb      	strh	r3, [r7, #14]
   do{
     result=SPI_ReceiveByte();
 8002bae:	f7ff ffd6 	bl	8002b5e <SPI_ReceiveByte>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	737b      	strb	r3, [r7, #13]
     cnt++;
 8002bb6:	89fb      	ldrh	r3, [r7, #14]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	81fb      	strh	r3, [r7, #14]
   } while ( (result!=0xFE)&&(cnt<0xFFFF) );
 8002bbc:	7b7b      	ldrb	r3, [r7, #13]
 8002bbe:	2bfe      	cmp	r3, #254	; 0xfe
 8002bc0:	d004      	beq.n	8002bcc <SD_Read_Block+0x46>
 8002bc2:	89fb      	ldrh	r3, [r7, #14]
 8002bc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d1f0      	bne.n	8002bae <SD_Read_Block+0x28>
   if (cnt>=0xFFFF) {
 8002bcc:	89fb      	ldrh	r3, [r7, #14]
 8002bce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d101      	bne.n	8002bda <SD_Read_Block+0x54>
	   return 5;
 8002bd6:	2305      	movs	r3, #5
 8002bd8:	e015      	b.n	8002c06 <SD_Read_Block+0x80>
   }
   for (cnt=0;cnt<512;cnt++) buff[cnt]=SPI_ReceiveByte();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	81fb      	strh	r3, [r7, #14]
 8002bde:	e009      	b.n	8002bf4 <SD_Read_Block+0x6e>
 8002be0:	89fb      	ldrh	r3, [r7, #14]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	18d4      	adds	r4, r2, r3
 8002be6:	f7ff ffba 	bl	8002b5e <SPI_ReceiveByte>
 8002bea:	4603      	mov	r3, r0
 8002bec:	7023      	strb	r3, [r4, #0]
 8002bee:	89fb      	ldrh	r3, [r7, #14]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	81fb      	strh	r3, [r7, #14]
 8002bf4:	89fb      	ldrh	r3, [r7, #14]
 8002bf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bfa:	d3f1      	bcc.n	8002be0 <SD_Read_Block+0x5a>
   SPI_Release();
 8002bfc:	f7ff ffbc 	bl	8002b78 <SPI_Release>
   SPI_Release();
 8002c00:	f7ff ffba 	bl	8002b78 <SPI_Release>



  return 0;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd90      	pop	{r4, r7, pc}
	...

08002c10 <SD_Write_Blocks>:

uint8_t SD_Write_Blocks (uint8_t *buff, uint32_t lba,uint16_t count)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	80fb      	strh	r3, [r7, #6]
  tick1=xTaskGetTickCount();
 8002c1e:	f010 fa97 	bl	8013150 <xTaskGetTickCount>
 8002c22:	4603      	mov	r3, r0
 8002c24:	4a39      	ldr	r2, [pc, #228]	; (8002d0c <SD_Write_Blocks+0xfc>)
 8002c26:	6013      	str	r3, [r2, #0]
  uint8_t result;
  uint16_t cnt;


  result=SD_cmd(CMD25,lba);//CMD25
 8002c28:	68b9      	ldr	r1, [r7, #8]
 8002c2a:	2059      	movs	r0, #89	; 0x59
 8002c2c:	f7ff fe10 	bl	8002850 <SD_cmd>
 8002c30:	4603      	mov	r3, r0
 8002c32:	75fb      	strb	r3, [r7, #23]
  if (result!=0x00){
 8002c34:	7dfb      	ldrb	r3, [r7, #23]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <SD_Write_Blocks+0x2e>
	  return 6;
 8002c3a:	2306      	movs	r3, #6
 8002c3c:	e061      	b.n	8002d02 <SD_Write_Blocks+0xf2>
  }
  SPI_Release();  //1byte gap
 8002c3e:	f7ff ff9b 	bl	8002b78 <SPI_Release>

  for(int i=0;i<count;i++){
 8002c42:	2300      	movs	r3, #0
 8002c44:	61bb      	str	r3, [r7, #24]
 8002c46:	e035      	b.n	8002cb4 <SD_Write_Blocks+0xa4>
   SPI_SendByte (0xFC);//token CMD25
 8002c48:	20fc      	movs	r0, #252	; 0xfc
 8002c4a:	f7ff ff7b 	bl	8002b44 <SPI_SendByte>

   SPIx_Write_Multi(buff,512);
 8002c4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f7ff ff3a 	bl	8002acc <SPIx_Write_Multi>
   buff+=512;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002c5e:	60fb      	str	r3, [r7, #12]
   SPI_Release();   //CRC
 8002c60:	f7ff ff8a 	bl	8002b78 <SPI_Release>
   SPI_Release();   //CRC
 8002c64:	f7ff ff88 	bl	8002b78 <SPI_Release>


   result=SPI_ReceiveByte();
 8002c68:	f7ff ff79 	bl	8002b5e <SPI_ReceiveByte>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	75fb      	strb	r3, [r7, #23]
   if ((result&0x1F)!=0x05) {
 8002c70:	7dfb      	ldrb	r3, [r7, #23]
 8002c72:	f003 031f 	and.w	r3, r3, #31
 8002c76:	2b05      	cmp	r3, #5
 8002c78:	d001      	beq.n	8002c7e <SD_Write_Blocks+0x6e>
	  return 6;
 8002c7a:	2306      	movs	r3, #6
 8002c7c:	e041      	b.n	8002d02 <SD_Write_Blocks+0xf2>
   }
   cnt=0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	83fb      	strh	r3, [r7, #30]
   do {
    result=SPI_ReceiveByte();
 8002c82:	f7ff ff6c 	bl	8002b5e <SPI_ReceiveByte>
 8002c86:	4603      	mov	r3, r0
 8002c88:	75fb      	strb	r3, [r7, #23]
    cnt++;
 8002c8a:	8bfb      	ldrh	r3, [r7, #30]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	83fb      	strh	r3, [r7, #30]
   } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 8002c90:	7dfb      	ldrb	r3, [r7, #23]
 8002c92:	2bff      	cmp	r3, #255	; 0xff
 8002c94:	d004      	beq.n	8002ca0 <SD_Write_Blocks+0x90>
 8002c96:	8bfb      	ldrh	r3, [r7, #30]
 8002c98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d1f0      	bne.n	8002c82 <SD_Write_Blocks+0x72>
   if (cnt>=0xFFFF) {
 8002ca0:	8bfb      	ldrh	r3, [r7, #30]
 8002ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d101      	bne.n	8002cae <SD_Write_Blocks+0x9e>
	  return 6;
 8002caa:	2306      	movs	r3, #6
 8002cac:	e029      	b.n	8002d02 <SD_Write_Blocks+0xf2>
  for(int i=0;i<count;i++){
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	61bb      	str	r3, [r7, #24]
 8002cb4:	88fb      	ldrh	r3, [r7, #6]
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	dbc5      	blt.n	8002c48 <SD_Write_Blocks+0x38>
   }
  }

  SPI_SendByte (0xFD); //stop transaction token for CMD25
 8002cbc:	20fd      	movs	r0, #253	; 0xfd
 8002cbe:	f7ff ff41 	bl	8002b44 <SPI_SendByte>
  SPI_Release();       //1byte gap
 8002cc2:	f7ff ff59 	bl	8002b78 <SPI_Release>
  cnt=0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	83fb      	strh	r3, [r7, #30]
  do {
	result=SPI_ReceiveByte();
 8002cca:	f7ff ff48 	bl	8002b5e <SPI_ReceiveByte>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	75fb      	strb	r3, [r7, #23]
	cnt++;
 8002cd2:	8bfb      	ldrh	r3, [r7, #30]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	83fb      	strh	r3, [r7, #30]
  } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 8002cd8:	7dfb      	ldrb	r3, [r7, #23]
 8002cda:	2bff      	cmp	r3, #255	; 0xff
 8002cdc:	d004      	beq.n	8002ce8 <SD_Write_Blocks+0xd8>
 8002cde:	8bfb      	ldrh	r3, [r7, #30]
 8002ce0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d1f0      	bne.n	8002cca <SD_Write_Blocks+0xba>
  if (cnt>=0xFFFF) return 6;
 8002ce8:	8bfb      	ldrh	r3, [r7, #30]
 8002cea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d101      	bne.n	8002cf6 <SD_Write_Blocks+0xe6>
 8002cf2:	2306      	movs	r3, #6
 8002cf4:	e005      	b.n	8002d02 <SD_Write_Blocks+0xf2>
  tick2=xTaskGetTickCount();
 8002cf6:	f010 fa2b 	bl	8013150 <xTaskGetTickCount>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	4a04      	ldr	r2, [pc, #16]	; (8002d10 <SD_Write_Blocks+0x100>)
 8002cfe:	6013      	str	r3, [r2, #0]
  return 0;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3720      	adds	r7, #32
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20001b7c 	.word	0x20001b7c
 8002d10:	20001b80 	.word	0x20001b80

08002d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <HAL_MspInit+0x54>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d22:	4a11      	ldr	r2, [pc, #68]	; (8002d68 <HAL_MspInit+0x54>)
 8002d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d28:	6453      	str	r3, [r2, #68]	; 0x44
 8002d2a:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <HAL_MspInit+0x54>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d32:	607b      	str	r3, [r7, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	603b      	str	r3, [r7, #0]
 8002d3a:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <HAL_MspInit+0x54>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	4a0a      	ldr	r2, [pc, #40]	; (8002d68 <HAL_MspInit+0x54>)
 8002d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d44:	6413      	str	r3, [r2, #64]	; 0x40
 8002d46:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <HAL_MspInit+0x54>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d52:	2200      	movs	r2, #0
 8002d54:	210f      	movs	r1, #15
 8002d56:	f06f 0001 	mvn.w	r0, #1
 8002d5a:	f000 fccd 	bl	80036f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40023800 	.word	0x40023800

08002d6c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d74:	f107 0308 	add.w	r3, r7, #8
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a0c      	ldr	r2, [pc, #48]	; (8002db8 <HAL_RTC_MspInit+0x4c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d111      	bne.n	8002db0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002d90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d94:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d96:	f107 0308 	add.w	r3, r7, #8
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f003 fd74 	bl	8006888 <HAL_RCCEx_PeriphCLKConfig>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002da6:	f7ff fbe7 	bl	8002578 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002daa:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <HAL_RTC_MspInit+0x50>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002db0:	bf00      	nop
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40002800 	.word	0x40002800
 8002dbc:	42470e3c 	.word	0x42470e3c

08002dc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08a      	sub	sp, #40	; 0x28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc8:	f107 0314 	add.w	r3, r7, #20
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	605a      	str	r2, [r3, #4]
 8002dd2:	609a      	str	r2, [r3, #8]
 8002dd4:	60da      	str	r2, [r3, #12]
 8002dd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a34      	ldr	r2, [pc, #208]	; (8002eb0 <HAL_SPI_MspInit+0xf0>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d162      	bne.n	8002ea8 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002de2:	2300      	movs	r3, #0
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	4b33      	ldr	r3, [pc, #204]	; (8002eb4 <HAL_SPI_MspInit+0xf4>)
 8002de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dea:	4a32      	ldr	r2, [pc, #200]	; (8002eb4 <HAL_SPI_MspInit+0xf4>)
 8002dec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002df0:	6453      	str	r3, [r2, #68]	; 0x44
 8002df2:	4b30      	ldr	r3, [pc, #192]	; (8002eb4 <HAL_SPI_MspInit+0xf4>)
 8002df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	4b2c      	ldr	r3, [pc, #176]	; (8002eb4 <HAL_SPI_MspInit+0xf4>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	4a2b      	ldr	r2, [pc, #172]	; (8002eb4 <HAL_SPI_MspInit+0xf4>)
 8002e08:	f043 0302 	orr.w	r3, r3, #2
 8002e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0e:	4b29      	ldr	r3, [pc, #164]	; (8002eb4 <HAL_SPI_MspInit+0xf4>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002e1a:	2338      	movs	r3, #56	; 0x38
 8002e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e22:	2301      	movs	r3, #1
 8002e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e26:	2303      	movs	r3, #3
 8002e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e2a:	2305      	movs	r3, #5
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e2e:	f107 0314 	add.w	r3, r7, #20
 8002e32:	4619      	mov	r1, r3
 8002e34:	4820      	ldr	r0, [pc, #128]	; (8002eb8 <HAL_SPI_MspInit+0xf8>)
 8002e36:	f001 fadd 	bl	80043f4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002e3a:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <HAL_SPI_MspInit+0xfc>)
 8002e3c:	4a20      	ldr	r2, [pc, #128]	; (8002ec0 <HAL_SPI_MspInit+0x100>)
 8002e3e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002e40:	4b1e      	ldr	r3, [pc, #120]	; (8002ebc <HAL_SPI_MspInit+0xfc>)
 8002e42:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002e46:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e48:	4b1c      	ldr	r3, [pc, #112]	; (8002ebc <HAL_SPI_MspInit+0xfc>)
 8002e4a:	2240      	movs	r2, #64	; 0x40
 8002e4c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e4e:	4b1b      	ldr	r3, [pc, #108]	; (8002ebc <HAL_SPI_MspInit+0xfc>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e54:	4b19      	ldr	r3, [pc, #100]	; (8002ebc <HAL_SPI_MspInit+0xfc>)
 8002e56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e5a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e5c:	4b17      	ldr	r3, [pc, #92]	; (8002ebc <HAL_SPI_MspInit+0xfc>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e62:	4b16      	ldr	r3, [pc, #88]	; (8002ebc <HAL_SPI_MspInit+0xfc>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002e68:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <HAL_SPI_MspInit+0xfc>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002e6e:	4b13      	ldr	r3, [pc, #76]	; (8002ebc <HAL_SPI_MspInit+0xfc>)
 8002e70:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e74:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e76:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <HAL_SPI_MspInit+0xfc>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002e7c:	480f      	ldr	r0, [pc, #60]	; (8002ebc <HAL_SPI_MspInit+0xfc>)
 8002e7e:	f000 fc65 	bl	800374c <HAL_DMA_Init>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8002e88:	f7ff fb76 	bl	8002578 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a0b      	ldr	r2, [pc, #44]	; (8002ebc <HAL_SPI_MspInit+0xfc>)
 8002e90:	649a      	str	r2, [r3, #72]	; 0x48
 8002e92:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <HAL_SPI_MspInit+0xfc>)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2105      	movs	r1, #5
 8002e9c:	2023      	movs	r0, #35	; 0x23
 8002e9e:	f000 fc2b 	bl	80036f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002ea2:	2023      	movs	r0, #35	; 0x23
 8002ea4:	f000 fc44 	bl	8003730 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ea8:	bf00      	nop
 8002eaa:	3728      	adds	r7, #40	; 0x28
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40013000 	.word	0x40013000
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40020400 	.word	0x40020400
 8002ebc:	200008ac 	.word	0x200008ac
 8002ec0:	40026458 	.word	0x40026458

08002ec4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed4:	d115      	bne.n	8002f02 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <HAL_TIM_Base_MspInit+0x48>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	4a0b      	ldr	r2, [pc, #44]	; (8002f0c <HAL_TIM_Base_MspInit+0x48>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee6:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <HAL_TIM_Base_MspInit+0x48>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2105      	movs	r1, #5
 8002ef6:	201c      	movs	r0, #28
 8002ef8:	f000 fbfe 	bl	80036f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002efc:	201c      	movs	r0, #28
 8002efe:	f000 fc17 	bl	8003730 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002f02:	bf00      	nop
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40023800 	.word	0x40023800

08002f10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b08a      	sub	sp, #40	; 0x28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f18:	f107 0314 	add.w	r3, r7, #20
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	605a      	str	r2, [r3, #4]
 8002f22:	609a      	str	r2, [r3, #8]
 8002f24:	60da      	str	r2, [r3, #12]
 8002f26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a1d      	ldr	r2, [pc, #116]	; (8002fa4 <HAL_UART_MspInit+0x94>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d134      	bne.n	8002f9c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	4b1c      	ldr	r3, [pc, #112]	; (8002fa8 <HAL_UART_MspInit+0x98>)
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	4a1b      	ldr	r2, [pc, #108]	; (8002fa8 <HAL_UART_MspInit+0x98>)
 8002f3c:	f043 0310 	orr.w	r3, r3, #16
 8002f40:	6453      	str	r3, [r2, #68]	; 0x44
 8002f42:	4b19      	ldr	r3, [pc, #100]	; (8002fa8 <HAL_UART_MspInit+0x98>)
 8002f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f46:	f003 0310 	and.w	r3, r3, #16
 8002f4a:	613b      	str	r3, [r7, #16]
 8002f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <HAL_UART_MspInit+0x98>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	4a14      	ldr	r2, [pc, #80]	; (8002fa8 <HAL_UART_MspInit+0x98>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5e:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <HAL_UART_MspInit+0x98>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f70:	2302      	movs	r3, #2
 8002f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f7c:	2307      	movs	r3, #7
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f80:	f107 0314 	add.w	r3, r7, #20
 8002f84:	4619      	mov	r1, r3
 8002f86:	4809      	ldr	r0, [pc, #36]	; (8002fac <HAL_UART_MspInit+0x9c>)
 8002f88:	f001 fa34 	bl	80043f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2105      	movs	r1, #5
 8002f90:	2025      	movs	r0, #37	; 0x25
 8002f92:	f000 fbb1 	bl	80036f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f96:	2025      	movs	r0, #37	; 0x25
 8002f98:	f000 fbca 	bl	8003730 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002f9c:	bf00      	nop
 8002f9e:	3728      	adds	r7, #40	; 0x28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40011000 	.word	0x40011000
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	40020000 	.word	0x40020000

08002fb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08c      	sub	sp, #48	; 0x30
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	2019      	movs	r0, #25
 8002fc6:	f000 fb97 	bl	80036f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002fca:	2019      	movs	r0, #25
 8002fcc:	f000 fbb0 	bl	8003730 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	4b1f      	ldr	r3, [pc, #124]	; (8003054 <HAL_InitTick+0xa4>)
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd8:	4a1e      	ldr	r2, [pc, #120]	; (8003054 <HAL_InitTick+0xa4>)
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	6453      	str	r3, [r2, #68]	; 0x44
 8002fe0:	4b1c      	ldr	r3, [pc, #112]	; (8003054 <HAL_InitTick+0xa4>)
 8002fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fec:	f107 0210 	add.w	r2, r7, #16
 8002ff0:	f107 0314 	add.w	r3, r7, #20
 8002ff4:	4611      	mov	r1, r2
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f003 fc14 	bl	8006824 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002ffc:	f003 fbfe 	bl	80067fc <HAL_RCC_GetPCLK2Freq>
 8003000:	4603      	mov	r3, r0
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003008:	4a13      	ldr	r2, [pc, #76]	; (8003058 <HAL_InitTick+0xa8>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	0c9b      	lsrs	r3, r3, #18
 8003010:	3b01      	subs	r3, #1
 8003012:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003014:	4b11      	ldr	r3, [pc, #68]	; (800305c <HAL_InitTick+0xac>)
 8003016:	4a12      	ldr	r2, [pc, #72]	; (8003060 <HAL_InitTick+0xb0>)
 8003018:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800301a:	4b10      	ldr	r3, [pc, #64]	; (800305c <HAL_InitTick+0xac>)
 800301c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003020:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003022:	4a0e      	ldr	r2, [pc, #56]	; (800305c <HAL_InitTick+0xac>)
 8003024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003026:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <HAL_InitTick+0xac>)
 800302a:	2200      	movs	r2, #0
 800302c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800302e:	4b0b      	ldr	r3, [pc, #44]	; (800305c <HAL_InitTick+0xac>)
 8003030:	2200      	movs	r2, #0
 8003032:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003034:	4809      	ldr	r0, [pc, #36]	; (800305c <HAL_InitTick+0xac>)
 8003036:	f004 fc1b 	bl	8007870 <HAL_TIM_Base_Init>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d104      	bne.n	800304a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003040:	4806      	ldr	r0, [pc, #24]	; (800305c <HAL_InitTick+0xac>)
 8003042:	f004 fc65 	bl	8007910 <HAL_TIM_Base_Start_IT>
 8003046:	4603      	mov	r3, r0
 8003048:	e000      	b.n	800304c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
}
 800304c:	4618      	mov	r0, r3
 800304e:	3730      	adds	r7, #48	; 0x30
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40023800 	.word	0x40023800
 8003058:	431bde83 	.word	0x431bde83
 800305c:	20001dd0 	.word	0x20001dd0
 8003060:	40010000 	.word	0x40010000

08003064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003068:	e7fe      	b.n	8003068 <NMI_Handler+0x4>

0800306a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800306a:	b480      	push	{r7}
 800306c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800306e:	e7fe      	b.n	800306e <HardFault_Handler+0x4>

08003070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003074:	e7fe      	b.n	8003074 <MemManage_Handler+0x4>

08003076 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003076:	b480      	push	{r7}
 8003078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800307a:	e7fe      	b.n	800307a <BusFault_Handler+0x4>

0800307c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003080:	e7fe      	b.n	8003080 <UsageFault_Handler+0x4>

08003082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003082:	b480      	push	{r7}
 8003084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003086:	bf00      	nop
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003094:	4802      	ldr	r0, [pc, #8]	; (80030a0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003096:	f004 fcab 	bl	80079f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800309a:	bf00      	nop
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	20001dd0 	.word	0x20001dd0

080030a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80030a8:	4802      	ldr	r0, [pc, #8]	; (80030b4 <TIM2_IRQHandler+0x10>)
 80030aa:	f004 fca1 	bl	80079f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	2000090c 	.word	0x2000090c

080030b8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80030bc:	4802      	ldr	r0, [pc, #8]	; (80030c8 <SPI1_IRQHandler+0x10>)
 80030be:	f004 f9ef 	bl	80074a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000854 	.word	0x20000854

080030cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80030d0:	4802      	ldr	r0, [pc, #8]	; (80030dc <USART1_IRQHandler+0x10>)
 80030d2:	f005 f9a3 	bl	800841c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20000954 	.word	0x20000954

080030e0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80030e4:	4802      	ldr	r0, [pc, #8]	; (80030f0 <DMA2_Stream3_IRQHandler+0x10>)
 80030e6:	f000 fc71 	bl	80039cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	200008ac 	.word	0x200008ac

080030f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80030f8:	4802      	ldr	r0, [pc, #8]	; (8003104 <OTG_FS_IRQHandler+0x10>)
 80030fa:	f001 fd9b 	bl	8004c34 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	2000e5c4 	.word	0x2000e5c4

08003108 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
	return 1;
 800310c:	2301      	movs	r3, #1
}
 800310e:	4618      	mov	r0, r3
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <_kill>:

int _kill(int pid, int sig)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003122:	f011 fbcd 	bl	80148c0 <__errno>
 8003126:	4603      	mov	r3, r0
 8003128:	2216      	movs	r2, #22
 800312a:	601a      	str	r2, [r3, #0]
	return -1;
 800312c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003130:	4618      	mov	r0, r3
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <_exit>:

void _exit (int status)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003140:	f04f 31ff 	mov.w	r1, #4294967295
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff ffe7 	bl	8003118 <_kill>
	while (1) {}		/* Make sure we hang here */
 800314a:	e7fe      	b.n	800314a <_exit+0x12>

0800314c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003158:	2300      	movs	r3, #0
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	e00a      	b.n	8003174 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800315e:	f3af 8000 	nop.w
 8003162:	4601      	mov	r1, r0
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	60ba      	str	r2, [r7, #8]
 800316a:	b2ca      	uxtb	r2, r1
 800316c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	3301      	adds	r3, #1
 8003172:	617b      	str	r3, [r7, #20]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	429a      	cmp	r2, r3
 800317a:	dbf0      	blt.n	800315e <_read+0x12>
	}

return len;
 800317c:	687b      	ldr	r3, [r7, #4]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b086      	sub	sp, #24
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003192:	2300      	movs	r3, #0
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	e009      	b.n	80031ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	60ba      	str	r2, [r7, #8]
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	3301      	adds	r3, #1
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	dbf1      	blt.n	8003198 <_write+0x12>
	}
	return len;
 80031b4:	687b      	ldr	r3, [r7, #4]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <_close>:

int _close(int file)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
	return -1;
 80031c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031e6:	605a      	str	r2, [r3, #4]
	return 0;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <_isatty>:

int _isatty(int file)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
	return 1;
 80031fe:	2301      	movs	r3, #1
}
 8003200:	4618      	mov	r0, r3
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
	return 0;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
	...

08003228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003230:	4a14      	ldr	r2, [pc, #80]	; (8003284 <_sbrk+0x5c>)
 8003232:	4b15      	ldr	r3, [pc, #84]	; (8003288 <_sbrk+0x60>)
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800323c:	4b13      	ldr	r3, [pc, #76]	; (800328c <_sbrk+0x64>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d102      	bne.n	800324a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003244:	4b11      	ldr	r3, [pc, #68]	; (800328c <_sbrk+0x64>)
 8003246:	4a12      	ldr	r2, [pc, #72]	; (8003290 <_sbrk+0x68>)
 8003248:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800324a:	4b10      	ldr	r3, [pc, #64]	; (800328c <_sbrk+0x64>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4413      	add	r3, r2
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	429a      	cmp	r2, r3
 8003256:	d207      	bcs.n	8003268 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003258:	f011 fb32 	bl	80148c0 <__errno>
 800325c:	4603      	mov	r3, r0
 800325e:	220c      	movs	r2, #12
 8003260:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003262:	f04f 33ff 	mov.w	r3, #4294967295
 8003266:	e009      	b.n	800327c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003268:	4b08      	ldr	r3, [pc, #32]	; (800328c <_sbrk+0x64>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800326e:	4b07      	ldr	r3, [pc, #28]	; (800328c <_sbrk+0x64>)
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4413      	add	r3, r2
 8003276:	4a05      	ldr	r2, [pc, #20]	; (800328c <_sbrk+0x64>)
 8003278:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800327a:	68fb      	ldr	r3, [r7, #12]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3718      	adds	r7, #24
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	20020000 	.word	0x20020000
 8003288:	00000400 	.word	0x00000400
 800328c:	20001e1c 	.word	0x20001e1c
 8003290:	2000e900 	.word	0x2000e900

08003294 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003298:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <SystemInit+0x20>)
 800329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329e:	4a05      	ldr	r2, [pc, #20]	; (80032b4 <SystemInit+0x20>)
 80032a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032a8:	bf00      	nop
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	e000ed00 	.word	0xe000ed00

080032b8 <wav_file_open>:


extern UART_HandleTypeDef huart1;

F_RES wav_file_open(wav_file_typedef* self_object,char* filename,uint32_t sample_size,uint32_t sample_rate,uint8_t num_channels)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
 80032c4:	603b      	str	r3, [r7, #0]
  memcpy(self_object->header.chunk.prefix,"RIFF",4);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2204      	movs	r2, #4
 80032ca:	4939      	ldr	r1, [pc, #228]	; (80033b0 <wav_file_open+0xf8>)
 80032cc:	4618      	mov	r0, r3
 80032ce:	f011 fc2d 	bl	8014b2c <memcpy>
  memcpy(self_object->header.chunk.postfix,"WAVE",4);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	3308      	adds	r3, #8
 80032d6:	2204      	movs	r2, #4
 80032d8:	4936      	ldr	r1, [pc, #216]	; (80033b4 <wav_file_open+0xfc>)
 80032da:	4618      	mov	r0, r3
 80032dc:	f011 fc26 	bl	8014b2c <memcpy>
  memcpy(self_object->header.subchunk_fmt.prefix,"fmt ",4);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	330c      	adds	r3, #12
 80032e4:	2204      	movs	r2, #4
 80032e6:	4934      	ldr	r1, [pc, #208]	; (80033b8 <wav_file_open+0x100>)
 80032e8:	4618      	mov	r0, r3
 80032ea:	f011 fc1f 	bl	8014b2c <memcpy>
  self_object->header.subchunk_fmt.size=16;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f042 0210 	orr.w	r2, r2, #16
 80032f6:	741a      	strb	r2, [r3, #16]
 80032f8:	2200      	movs	r2, #0
 80032fa:	745a      	strb	r2, [r3, #17]
 80032fc:	2200      	movs	r2, #0
 80032fe:	749a      	strb	r2, [r3, #18]
 8003300:	2200      	movs	r2, #0
 8003302:	74da      	strb	r2, [r3, #19]
  self_object->header.subchunk_fmt.format=1;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f042 0201 	orr.w	r2, r2, #1
 800330c:	751a      	strb	r2, [r3, #20]
 800330e:	2200      	movs	r2, #0
 8003310:	755a      	strb	r2, [r3, #21]
  self_object->header.subchunk_fmt.numchannels=num_channels;
 8003312:	7e3b      	ldrb	r3, [r7, #24]
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	82da      	strh	r2, [r3, #22]
  self_object->header.subchunk_fmt.samplerate=sample_rate;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	619a      	str	r2, [r3, #24]
  self_object->header.subchunk_fmt.bps=sample_size;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	845a      	strh	r2, [r3, #34]	; 0x22
  self_object->header.subchunk_fmt.byterate=sample_rate*num_channels*(sample_size/8);
 8003328:	7e3b      	ldrb	r3, [r7, #24]
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	fb02 f303 	mul.w	r3, r2, r3
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	08d2      	lsrs	r2, r2, #3
 8003334:	fb03 f202 	mul.w	r2, r3, r2
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	61da      	str	r2, [r3, #28]
  self_object->header.subchunk_fmt.block_align=num_channels*(sample_size/8);
 800333c:	7e3b      	ldrb	r3, [r7, #24]
 800333e:	b29a      	uxth	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	08db      	lsrs	r3, r3, #3
 8003344:	b29b      	uxth	r3, r3
 8003346:	fb12 f303 	smulbb	r3, r2, r3
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	841a      	strh	r2, [r3, #32]
  memcpy(self_object->header.subchunk_data.prefix,"data",4);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	3324      	adds	r3, #36	; 0x24
 8003354:	2204      	movs	r2, #4
 8003356:	4919      	ldr	r1, [pc, #100]	; (80033bc <wav_file_open+0x104>)
 8003358:	4618      	mov	r0, r3
 800335a:	f011 fbe7 	bl	8014b2c <memcpy>
  self_object->data_counter=0;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8003366:	2200      	movs	r2, #0
 8003368:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800336c:	2200      	movs	r2, #0
 800336e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8003372:	2200      	movs	r2, #0
 8003374:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  if(f_open(&self_object->media.file,filename,FA_CREATE_ALWAYS|FA_WRITE)==FR_OK){
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	3330      	adds	r3, #48	; 0x30
 800337c:	220a      	movs	r2, #10
 800337e:	68b9      	ldr	r1, [r7, #8]
 8003380:	4618      	mov	r0, r3
 8003382:	f00d f8df 	bl	8010544 <f_open>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10b      	bne.n	80033a4 <wav_file_open+0xec>
   f_lseek(&self_object->media.file, sizeof(self_object->header));
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003392:	f04f 022c 	mov.w	r2, #44	; 0x2c
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	4608      	mov	r0, r1
 800339c:	f00d fe8f 	bl	80110be <f_lseek>
   return F_OK;
 80033a0:	2300      	movs	r3, #0
 80033a2:	e000      	b.n	80033a6 <wav_file_open+0xee>
  }
  return F_ERR;
 80033a4:	2301      	movs	r3, #1
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	08017624 	.word	0x08017624
 80033b4:	0801762c 	.word	0x0801762c
 80033b8:	08017634 	.word	0x08017634
 80033bc:	0801763c 	.word	0x0801763c

080033c0 <wav_file_close>:

F_RES wav_file_close(wav_file_typedef* self_object)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
	self_object->header.subchunk_data.size=self_object->data_counter;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	629a      	str	r2, [r3, #40]	; 0x28
	self_object->header.chunk.size=36+self_object->data_counter;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	605a      	str	r2, [r3, #4]
 	f_lseek(&self_object->media.file, 0);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	f04f 0300 	mov.w	r3, #0
 80033ea:	4608      	mov	r0, r1
 80033ec:	f00d fe67 	bl	80110be <f_lseek>
 	if(f_write(&self_object->media.file,(uint8_t*)&self_object->header,sizeof(self_object->header),(void*)&self_object->media.byteswritten)==FR_OK){
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 80033fe:	222c      	movs	r2, #44	; 0x2c
 8003400:	f00d fb61 	bl	8010ac6 <f_write>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d106      	bne.n	8003418 <wav_file_close+0x58>
 	  f_close(&self_object->media.file);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	3330      	adds	r3, #48	; 0x30
 800340e:	4618      	mov	r0, r3
 8003410:	f00d fe2b 	bl	801106a <f_close>
 	  return F_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	e000      	b.n	800341a <wav_file_close+0x5a>
 	}
 	return F_ERR;
 8003418:	2301      	movs	r3, #1
}
 800341a:	4618      	mov	r0, r3
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <wav_file_write>:

F_RES wav_file_write(wav_file_typedef* self_object,uint8_t* data,uint32_t length)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b086      	sub	sp, #24
 8003426:	af00      	add	r7, sp, #0
 8003428:	60f8      	str	r0, [r7, #12]
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	607a      	str	r2, [r7, #4]
	FRESULT res;
	self_object->data_counter+=length;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	441a      	add	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	62da      	str	r2, [r3, #44]	; 0x2c
	res=f_write(&self_object->media.file,data,length,(void*)&self_object->media.byteswritten);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	68b9      	ldr	r1, [r7, #8]
 800344a:	f00d fb3c 	bl	8010ac6 <f_write>
 800344e:	4603      	mov	r3, r0
 8003450:	75fb      	strb	r3, [r7, #23]
	if(res==FR_OK) return F_OK;
 8003452:	7dfb      	ldrb	r3, [r7, #23]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <wav_file_write+0x3a>
 8003458:	2300      	movs	r3, #0
 800345a:	e000      	b.n	800345e <wav_file_write+0x3c>
	return F_ERR;
 800345c:	2301      	movs	r3, #1
}
 800345e:	4618      	mov	r0, r3
 8003460:	3718      	adds	r7, #24
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003468:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800346c:	480d      	ldr	r0, [pc, #52]	; (80034a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800346e:	490e      	ldr	r1, [pc, #56]	; (80034a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003470:	4a0e      	ldr	r2, [pc, #56]	; (80034ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003474:	e002      	b.n	800347c <LoopCopyDataInit>

08003476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800347a:	3304      	adds	r3, #4

0800347c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800347c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800347e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003480:	d3f9      	bcc.n	8003476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003482:	4a0b      	ldr	r2, [pc, #44]	; (80034b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003484:	4c0b      	ldr	r4, [pc, #44]	; (80034b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003488:	e001      	b.n	800348e <LoopFillZerobss>

0800348a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800348a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800348c:	3204      	adds	r2, #4

0800348e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800348e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003490:	d3fb      	bcc.n	800348a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003492:	f7ff feff 	bl	8003294 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003496:	f011 fb0f 	bl	8014ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800349a:	f7fe f9ad 	bl	80017f8 <main>
  bx  lr    
 800349e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80034a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80034a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034a8:	20000378 	.word	0x20000378
  ldr r2, =_sidata
 80034ac:	08017ec8 	.word	0x08017ec8
  ldr r2, =_sbss
 80034b0:	20000378 	.word	0x20000378
  ldr r4, =_ebss
 80034b4:	2000e900 	.word	0x2000e900

080034b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034b8:	e7fe      	b.n	80034b8 <ADC_IRQHandler>
	...

080034bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034c0:	4b0e      	ldr	r3, [pc, #56]	; (80034fc <HAL_Init+0x40>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a0d      	ldr	r2, [pc, #52]	; (80034fc <HAL_Init+0x40>)
 80034c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_Init+0x40>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a0a      	ldr	r2, [pc, #40]	; (80034fc <HAL_Init+0x40>)
 80034d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034d8:	4b08      	ldr	r3, [pc, #32]	; (80034fc <HAL_Init+0x40>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a07      	ldr	r2, [pc, #28]	; (80034fc <HAL_Init+0x40>)
 80034de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034e4:	2003      	movs	r0, #3
 80034e6:	f000 f8fc 	bl	80036e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034ea:	200f      	movs	r0, #15
 80034ec:	f7ff fd60 	bl	8002fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034f0:	f7ff fc10 	bl	8002d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40023c00 	.word	0x40023c00

08003500 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003504:	4b06      	ldr	r3, [pc, #24]	; (8003520 <HAL_IncTick+0x20>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	461a      	mov	r2, r3
 800350a:	4b06      	ldr	r3, [pc, #24]	; (8003524 <HAL_IncTick+0x24>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4413      	add	r3, r2
 8003510:	4a04      	ldr	r2, [pc, #16]	; (8003524 <HAL_IncTick+0x24>)
 8003512:	6013      	str	r3, [r2, #0]
}
 8003514:	bf00      	nop
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	2000023c 	.word	0x2000023c
 8003524:	20001e20 	.word	0x20001e20

08003528 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  return uwTick;
 800352c:	4b03      	ldr	r3, [pc, #12]	; (800353c <HAL_GetTick+0x14>)
 800352e:	681b      	ldr	r3, [r3, #0]
}
 8003530:	4618      	mov	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	20001e20 	.word	0x20001e20

08003540 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003548:	f7ff ffee 	bl	8003528 <HAL_GetTick>
 800354c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003558:	d005      	beq.n	8003566 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800355a:	4b0a      	ldr	r3, [pc, #40]	; (8003584 <HAL_Delay+0x44>)
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4413      	add	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003566:	bf00      	nop
 8003568:	f7ff ffde 	bl	8003528 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	429a      	cmp	r2, r3
 8003576:	d8f7      	bhi.n	8003568 <HAL_Delay+0x28>
  {
  }
}
 8003578:	bf00      	nop
 800357a:	bf00      	nop
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	2000023c 	.word	0x2000023c

08003588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003598:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <__NVIC_SetPriorityGrouping+0x44>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035a4:	4013      	ands	r3, r2
 80035a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035ba:	4a04      	ldr	r2, [pc, #16]	; (80035cc <__NVIC_SetPriorityGrouping+0x44>)
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	60d3      	str	r3, [r2, #12]
}
 80035c0:	bf00      	nop
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	e000ed00 	.word	0xe000ed00

080035d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035d4:	4b04      	ldr	r3, [pc, #16]	; (80035e8 <__NVIC_GetPriorityGrouping+0x18>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	0a1b      	lsrs	r3, r3, #8
 80035da:	f003 0307 	and.w	r3, r3, #7
}
 80035de:	4618      	mov	r0, r3
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	e000ed00 	.word	0xe000ed00

080035ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	4603      	mov	r3, r0
 80035f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	db0b      	blt.n	8003616 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035fe:	79fb      	ldrb	r3, [r7, #7]
 8003600:	f003 021f 	and.w	r2, r3, #31
 8003604:	4907      	ldr	r1, [pc, #28]	; (8003624 <__NVIC_EnableIRQ+0x38>)
 8003606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360a:	095b      	lsrs	r3, r3, #5
 800360c:	2001      	movs	r0, #1
 800360e:	fa00 f202 	lsl.w	r2, r0, r2
 8003612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	e000e100 	.word	0xe000e100

08003628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	6039      	str	r1, [r7, #0]
 8003632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003638:	2b00      	cmp	r3, #0
 800363a:	db0a      	blt.n	8003652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	b2da      	uxtb	r2, r3
 8003640:	490c      	ldr	r1, [pc, #48]	; (8003674 <__NVIC_SetPriority+0x4c>)
 8003642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003646:	0112      	lsls	r2, r2, #4
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	440b      	add	r3, r1
 800364c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003650:	e00a      	b.n	8003668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	b2da      	uxtb	r2, r3
 8003656:	4908      	ldr	r1, [pc, #32]	; (8003678 <__NVIC_SetPriority+0x50>)
 8003658:	79fb      	ldrb	r3, [r7, #7]
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	3b04      	subs	r3, #4
 8003660:	0112      	lsls	r2, r2, #4
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	440b      	add	r3, r1
 8003666:	761a      	strb	r2, [r3, #24]
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	e000e100 	.word	0xe000e100
 8003678:	e000ed00 	.word	0xe000ed00

0800367c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800367c:	b480      	push	{r7}
 800367e:	b089      	sub	sp, #36	; 0x24
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f1c3 0307 	rsb	r3, r3, #7
 8003696:	2b04      	cmp	r3, #4
 8003698:	bf28      	it	cs
 800369a:	2304      	movcs	r3, #4
 800369c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	3304      	adds	r3, #4
 80036a2:	2b06      	cmp	r3, #6
 80036a4:	d902      	bls.n	80036ac <NVIC_EncodePriority+0x30>
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	3b03      	subs	r3, #3
 80036aa:	e000      	b.n	80036ae <NVIC_EncodePriority+0x32>
 80036ac:	2300      	movs	r3, #0
 80036ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036b0:	f04f 32ff 	mov.w	r2, #4294967295
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	43da      	mvns	r2, r3
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	401a      	ands	r2, r3
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036c4:	f04f 31ff 	mov.w	r1, #4294967295
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	fa01 f303 	lsl.w	r3, r1, r3
 80036ce:	43d9      	mvns	r1, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036d4:	4313      	orrs	r3, r2
         );
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3724      	adds	r7, #36	; 0x24
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff ff4c 	bl	8003588 <__NVIC_SetPriorityGrouping>
}
 80036f0:	bf00      	nop
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
 8003704:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003706:	2300      	movs	r3, #0
 8003708:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800370a:	f7ff ff61 	bl	80035d0 <__NVIC_GetPriorityGrouping>
 800370e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	68b9      	ldr	r1, [r7, #8]
 8003714:	6978      	ldr	r0, [r7, #20]
 8003716:	f7ff ffb1 	bl	800367c <NVIC_EncodePriority>
 800371a:	4602      	mov	r2, r0
 800371c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003720:	4611      	mov	r1, r2
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff ff80 	bl	8003628 <__NVIC_SetPriority>
}
 8003728:	bf00      	nop
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800373a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff ff54 	bl	80035ec <__NVIC_EnableIRQ>
}
 8003744:	bf00      	nop
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003758:	f7ff fee6 	bl	8003528 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e099      	b.n	800389c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0201 	bic.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003788:	e00f      	b.n	80037aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800378a:	f7ff fecd 	bl	8003528 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b05      	cmp	r3, #5
 8003796:	d908      	bls.n	80037aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2220      	movs	r2, #32
 800379c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2203      	movs	r2, #3
 80037a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e078      	b.n	800389c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e8      	bne.n	800378a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	4b38      	ldr	r3, [pc, #224]	; (80038a4 <HAL_DMA_Init+0x158>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	2b04      	cmp	r3, #4
 8003802:	d107      	bne.n	8003814 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380c:	4313      	orrs	r3, r2
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	4313      	orrs	r3, r2
 8003812:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f023 0307 	bic.w	r3, r3, #7
 800382a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	4313      	orrs	r3, r2
 8003834:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	2b04      	cmp	r3, #4
 800383c:	d117      	bne.n	800386e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	4313      	orrs	r3, r2
 8003846:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00e      	beq.n	800386e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 fa7b 	bl	8003d4c <DMA_CheckFifoParam>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d008      	beq.n	800386e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2240      	movs	r2, #64	; 0x40
 8003860:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800386a:	2301      	movs	r3, #1
 800386c:	e016      	b.n	800389c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fa32 	bl	8003ce0 <DMA_CalcBaseAndBitshift>
 800387c:	4603      	mov	r3, r0
 800387e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003884:	223f      	movs	r2, #63	; 0x3f
 8003886:	409a      	lsls	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	f010803f 	.word	0xf010803f

080038a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038b6:	f7ff fe37 	bl	8003528 <HAL_GetTick>
 80038ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d008      	beq.n	80038da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2280      	movs	r2, #128	; 0x80
 80038cc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e052      	b.n	8003980 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0216 	bic.w	r2, r2, #22
 80038e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695a      	ldr	r2, [r3, #20]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d103      	bne.n	800390a <HAL_DMA_Abort+0x62>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003906:	2b00      	cmp	r3, #0
 8003908:	d007      	beq.n	800391a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0208 	bic.w	r2, r2, #8
 8003918:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0201 	bic.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800392a:	e013      	b.n	8003954 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800392c:	f7ff fdfc 	bl	8003528 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b05      	cmp	r3, #5
 8003938:	d90c      	bls.n	8003954 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2220      	movs	r2, #32
 800393e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2203      	movs	r2, #3
 8003944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e015      	b.n	8003980 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1e4      	bne.n	800392c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003966:	223f      	movs	r2, #63	; 0x3f
 8003968:	409a      	lsls	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d004      	beq.n	80039a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2280      	movs	r2, #128	; 0x80
 80039a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e00c      	b.n	80039c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2205      	movs	r2, #5
 80039aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0201 	bic.w	r2, r2, #1
 80039bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039d8:	4b8e      	ldr	r3, [pc, #568]	; (8003c14 <HAL_DMA_IRQHandler+0x248>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a8e      	ldr	r2, [pc, #568]	; (8003c18 <HAL_DMA_IRQHandler+0x24c>)
 80039de:	fba2 2303 	umull	r2, r3, r2, r3
 80039e2:	0a9b      	lsrs	r3, r3, #10
 80039e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f6:	2208      	movs	r2, #8
 80039f8:	409a      	lsls	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4013      	ands	r3, r2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d01a      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d013      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0204 	bic.w	r2, r2, #4
 8003a1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a24:	2208      	movs	r2, #8
 8003a26:	409a      	lsls	r2, r3
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a30:	f043 0201 	orr.w	r2, r3, #1
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	409a      	lsls	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4013      	ands	r3, r2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d012      	beq.n	8003a6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00b      	beq.n	8003a6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	409a      	lsls	r2, r3
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a66:	f043 0202 	orr.w	r2, r3, #2
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a72:	2204      	movs	r2, #4
 8003a74:	409a      	lsls	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d012      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00b      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a90:	2204      	movs	r2, #4
 8003a92:	409a      	lsls	r2, r3
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9c:	f043 0204 	orr.w	r2, r3, #4
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa8:	2210      	movs	r2, #16
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d043      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d03c      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac6:	2210      	movs	r2, #16
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d018      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d108      	bne.n	8003afc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d024      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	4798      	blx	r3
 8003afa:	e01f      	b.n	8003b3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d01b      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	4798      	blx	r3
 8003b0c:	e016      	b.n	8003b3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d107      	bne.n	8003b2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0208 	bic.w	r2, r2, #8
 8003b2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b40:	2220      	movs	r2, #32
 8003b42:	409a      	lsls	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 808f 	beq.w	8003c6c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0310 	and.w	r3, r3, #16
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 8087 	beq.w	8003c6c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b62:	2220      	movs	r2, #32
 8003b64:	409a      	lsls	r2, r3
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b05      	cmp	r3, #5
 8003b74:	d136      	bne.n	8003be4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0216 	bic.w	r2, r2, #22
 8003b84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	695a      	ldr	r2, [r3, #20]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d103      	bne.n	8003ba6 <HAL_DMA_IRQHandler+0x1da>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d007      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0208 	bic.w	r2, r2, #8
 8003bb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bba:	223f      	movs	r2, #63	; 0x3f
 8003bbc:	409a      	lsls	r2, r3
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d07e      	beq.n	8003cd8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	4798      	blx	r3
        }
        return;
 8003be2:	e079      	b.n	8003cd8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d01d      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10d      	bne.n	8003c1c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d031      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	4798      	blx	r3
 8003c10:	e02c      	b.n	8003c6c <HAL_DMA_IRQHandler+0x2a0>
 8003c12:	bf00      	nop
 8003c14:	20000234 	.word	0x20000234
 8003c18:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d023      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	4798      	blx	r3
 8003c2c:	e01e      	b.n	8003c6c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10f      	bne.n	8003c5c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0210 	bic.w	r2, r2, #16
 8003c4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d032      	beq.n	8003cda <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d022      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2205      	movs	r2, #5
 8003c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0201 	bic.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	60bb      	str	r3, [r7, #8]
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d307      	bcc.n	8003cb4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f2      	bne.n	8003c98 <HAL_DMA_IRQHandler+0x2cc>
 8003cb2:	e000      	b.n	8003cb6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003cb4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d005      	beq.n	8003cda <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	4798      	blx	r3
 8003cd6:	e000      	b.n	8003cda <HAL_DMA_IRQHandler+0x30e>
        return;
 8003cd8:	bf00      	nop
    }
  }
}
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	3b10      	subs	r3, #16
 8003cf0:	4a14      	ldr	r2, [pc, #80]	; (8003d44 <DMA_CalcBaseAndBitshift+0x64>)
 8003cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf6:	091b      	lsrs	r3, r3, #4
 8003cf8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cfa:	4a13      	ldr	r2, [pc, #76]	; (8003d48 <DMA_CalcBaseAndBitshift+0x68>)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4413      	add	r3, r2
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	d909      	bls.n	8003d22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d16:	f023 0303 	bic.w	r3, r3, #3
 8003d1a:	1d1a      	adds	r2, r3, #4
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	659a      	str	r2, [r3, #88]	; 0x58
 8003d20:	e007      	b.n	8003d32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d2a:	f023 0303 	bic.w	r3, r3, #3
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	aaaaaaab 	.word	0xaaaaaaab
 8003d48:	0801770c 	.word	0x0801770c

08003d4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d11f      	bne.n	8003da6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d856      	bhi.n	8003e1a <DMA_CheckFifoParam+0xce>
 8003d6c:	a201      	add	r2, pc, #4	; (adr r2, 8003d74 <DMA_CheckFifoParam+0x28>)
 8003d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d72:	bf00      	nop
 8003d74:	08003d85 	.word	0x08003d85
 8003d78:	08003d97 	.word	0x08003d97
 8003d7c:	08003d85 	.word	0x08003d85
 8003d80:	08003e1b 	.word	0x08003e1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d046      	beq.n	8003e1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d94:	e043      	b.n	8003e1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d9e:	d140      	bne.n	8003e22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003da4:	e03d      	b.n	8003e22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dae:	d121      	bne.n	8003df4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d837      	bhi.n	8003e26 <DMA_CheckFifoParam+0xda>
 8003db6:	a201      	add	r2, pc, #4	; (adr r2, 8003dbc <DMA_CheckFifoParam+0x70>)
 8003db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbc:	08003dcd 	.word	0x08003dcd
 8003dc0:	08003dd3 	.word	0x08003dd3
 8003dc4:	08003dcd 	.word	0x08003dcd
 8003dc8:	08003de5 	.word	0x08003de5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd0:	e030      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d025      	beq.n	8003e2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003de2:	e022      	b.n	8003e2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dec:	d11f      	bne.n	8003e2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003df2:	e01c      	b.n	8003e2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d903      	bls.n	8003e02 <DMA_CheckFifoParam+0xb6>
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d003      	beq.n	8003e08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e00:	e018      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	73fb      	strb	r3, [r7, #15]
      break;
 8003e06:	e015      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00e      	beq.n	8003e32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	73fb      	strb	r3, [r7, #15]
      break;
 8003e18:	e00b      	b.n	8003e32 <DMA_CheckFifoParam+0xe6>
      break;
 8003e1a:	bf00      	nop
 8003e1c:	e00a      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;
 8003e1e:	bf00      	nop
 8003e20:	e008      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;
 8003e22:	bf00      	nop
 8003e24:	e006      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;
 8003e26:	bf00      	nop
 8003e28:	e004      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;
 8003e2a:	bf00      	nop
 8003e2c:	e002      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e2e:	bf00      	nop
 8003e30:	e000      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;
 8003e32:	bf00      	nop
    }
  } 
  
  return status; 
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop

08003e44 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003e56:	4b23      	ldr	r3, [pc, #140]	; (8003ee4 <HAL_FLASH_Program+0xa0>)
 8003e58:	7e1b      	ldrb	r3, [r3, #24]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d101      	bne.n	8003e62 <HAL_FLASH_Program+0x1e>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e03b      	b.n	8003eda <HAL_FLASH_Program+0x96>
 8003e62:	4b20      	ldr	r3, [pc, #128]	; (8003ee4 <HAL_FLASH_Program+0xa0>)
 8003e64:	2201      	movs	r2, #1
 8003e66:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e68:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e6c:	f000 f870 	bl	8003f50 <FLASH_WaitForLastOperation>
 8003e70:	4603      	mov	r3, r0
 8003e72:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003e74:	7dfb      	ldrb	r3, [r7, #23]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d12b      	bne.n	8003ed2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d105      	bne.n	8003e8c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003e80:	783b      	ldrb	r3, [r7, #0]
 8003e82:	4619      	mov	r1, r3
 8003e84:	68b8      	ldr	r0, [r7, #8]
 8003e86:	f000 f91b 	bl	80040c0 <FLASH_Program_Byte>
 8003e8a:	e016      	b.n	8003eba <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d105      	bne.n	8003e9e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003e92:	883b      	ldrh	r3, [r7, #0]
 8003e94:	4619      	mov	r1, r3
 8003e96:	68b8      	ldr	r0, [r7, #8]
 8003e98:	f000 f8ee 	bl	8004078 <FLASH_Program_HalfWord>
 8003e9c:	e00d      	b.n	8003eba <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d105      	bne.n	8003eb0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	68b8      	ldr	r0, [r7, #8]
 8003eaa:	f000 f8c3 	bl	8004034 <FLASH_Program_Word>
 8003eae:	e004      	b.n	8003eba <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003eb4:	68b8      	ldr	r0, [r7, #8]
 8003eb6:	f000 f88b 	bl	8003fd0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003eba:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ebe:	f000 f847 	bl	8003f50 <FLASH_WaitForLastOperation>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003ec6:	4b08      	ldr	r3, [pc, #32]	; (8003ee8 <HAL_FLASH_Program+0xa4>)
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	4a07      	ldr	r2, [pc, #28]	; (8003ee8 <HAL_FLASH_Program+0xa4>)
 8003ecc:	f023 0301 	bic.w	r3, r3, #1
 8003ed0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003ed2:	4b04      	ldr	r3, [pc, #16]	; (8003ee4 <HAL_FLASH_Program+0xa0>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20001e24 	.word	0x20001e24
 8003ee8:	40023c00 	.word	0x40023c00

08003eec <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003ef6:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <HAL_FLASH_Unlock+0x38>)
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	da0b      	bge.n	8003f16 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003efe:	4b09      	ldr	r3, [pc, #36]	; (8003f24 <HAL_FLASH_Unlock+0x38>)
 8003f00:	4a09      	ldr	r2, [pc, #36]	; (8003f28 <HAL_FLASH_Unlock+0x3c>)
 8003f02:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003f04:	4b07      	ldr	r3, [pc, #28]	; (8003f24 <HAL_FLASH_Unlock+0x38>)
 8003f06:	4a09      	ldr	r2, [pc, #36]	; (8003f2c <HAL_FLASH_Unlock+0x40>)
 8003f08:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003f0a:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <HAL_FLASH_Unlock+0x38>)
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	da01      	bge.n	8003f16 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003f16:	79fb      	ldrb	r3, [r7, #7]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	40023c00 	.word	0x40023c00
 8003f28:	45670123 	.word	0x45670123
 8003f2c:	cdef89ab 	.word	0xcdef89ab

08003f30 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003f34:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <HAL_FLASH_Lock+0x1c>)
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	4a04      	ldr	r2, [pc, #16]	; (8003f4c <HAL_FLASH_Lock+0x1c>)
 8003f3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f3e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	40023c00 	.word	0x40023c00

08003f50 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003f5c:	4b1a      	ldr	r3, [pc, #104]	; (8003fc8 <FLASH_WaitForLastOperation+0x78>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003f62:	f7ff fae1 	bl	8003528 <HAL_GetTick>
 8003f66:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003f68:	e010      	b.n	8003f8c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f70:	d00c      	beq.n	8003f8c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d007      	beq.n	8003f88 <FLASH_WaitForLastOperation+0x38>
 8003f78:	f7ff fad6 	bl	8003528 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d201      	bcs.n	8003f8c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e019      	b.n	8003fc0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003f8c:	4b0f      	ldr	r3, [pc, #60]	; (8003fcc <FLASH_WaitForLastOperation+0x7c>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e8      	bne.n	8003f6a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003f98:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <FLASH_WaitForLastOperation+0x7c>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d002      	beq.n	8003faa <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003fa4:	4b09      	ldr	r3, [pc, #36]	; (8003fcc <FLASH_WaitForLastOperation+0x7c>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003faa:	4b08      	ldr	r3, [pc, #32]	; (8003fcc <FLASH_WaitForLastOperation+0x7c>)
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003fb6:	f000 f8a5 	bl	8004104 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e000      	b.n	8003fc0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
  
}  
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	20001e24 	.word	0x20001e24
 8003fcc:	40023c00 	.word	0x40023c00

08003fd0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003fdc:	4b14      	ldr	r3, [pc, #80]	; (8004030 <FLASH_Program_DoubleWord+0x60>)
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	4a13      	ldr	r2, [pc, #76]	; (8004030 <FLASH_Program_DoubleWord+0x60>)
 8003fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003fe8:	4b11      	ldr	r3, [pc, #68]	; (8004030 <FLASH_Program_DoubleWord+0x60>)
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	4a10      	ldr	r2, [pc, #64]	; (8004030 <FLASH_Program_DoubleWord+0x60>)
 8003fee:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003ff2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003ff4:	4b0e      	ldr	r3, [pc, #56]	; (8004030 <FLASH_Program_DoubleWord+0x60>)
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	4a0d      	ldr	r2, [pc, #52]	; (8004030 <FLASH_Program_DoubleWord+0x60>)
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8004006:	f3bf 8f6f 	isb	sy
}
 800400a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800400c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	000a      	movs	r2, r1
 800401a:	2300      	movs	r3, #0
 800401c:	68f9      	ldr	r1, [r7, #12]
 800401e:	3104      	adds	r1, #4
 8004020:	4613      	mov	r3, r2
 8004022:	600b      	str	r3, [r1, #0]
}
 8004024:	bf00      	nop
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	40023c00 	.word	0x40023c00

08004034 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800403e:	4b0d      	ldr	r3, [pc, #52]	; (8004074 <FLASH_Program_Word+0x40>)
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	4a0c      	ldr	r2, [pc, #48]	; (8004074 <FLASH_Program_Word+0x40>)
 8004044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004048:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800404a:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <FLASH_Program_Word+0x40>)
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	4a09      	ldr	r2, [pc, #36]	; (8004074 <FLASH_Program_Word+0x40>)
 8004050:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004054:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004056:	4b07      	ldr	r3, [pc, #28]	; (8004074 <FLASH_Program_Word+0x40>)
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	4a06      	ldr	r2, [pc, #24]	; (8004074 <FLASH_Program_Word+0x40>)
 800405c:	f043 0301 	orr.w	r3, r3, #1
 8004060:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	601a      	str	r2, [r3, #0]
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	40023c00 	.word	0x40023c00

08004078 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004084:	4b0d      	ldr	r3, [pc, #52]	; (80040bc <FLASH_Program_HalfWord+0x44>)
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	4a0c      	ldr	r2, [pc, #48]	; (80040bc <FLASH_Program_HalfWord+0x44>)
 800408a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800408e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004090:	4b0a      	ldr	r3, [pc, #40]	; (80040bc <FLASH_Program_HalfWord+0x44>)
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	4a09      	ldr	r2, [pc, #36]	; (80040bc <FLASH_Program_HalfWord+0x44>)
 8004096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800409a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800409c:	4b07      	ldr	r3, [pc, #28]	; (80040bc <FLASH_Program_HalfWord+0x44>)
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	4a06      	ldr	r2, [pc, #24]	; (80040bc <FLASH_Program_HalfWord+0x44>)
 80040a2:	f043 0301 	orr.w	r3, r3, #1
 80040a6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	887a      	ldrh	r2, [r7, #2]
 80040ac:	801a      	strh	r2, [r3, #0]
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40023c00 	.word	0x40023c00

080040c0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	460b      	mov	r3, r1
 80040ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80040cc:	4b0c      	ldr	r3, [pc, #48]	; (8004100 <FLASH_Program_Byte+0x40>)
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	4a0b      	ldr	r2, [pc, #44]	; (8004100 <FLASH_Program_Byte+0x40>)
 80040d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80040d8:	4b09      	ldr	r3, [pc, #36]	; (8004100 <FLASH_Program_Byte+0x40>)
 80040da:	4a09      	ldr	r2, [pc, #36]	; (8004100 <FLASH_Program_Byte+0x40>)
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80040e0:	4b07      	ldr	r3, [pc, #28]	; (8004100 <FLASH_Program_Byte+0x40>)
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	4a06      	ldr	r2, [pc, #24]	; (8004100 <FLASH_Program_Byte+0x40>)
 80040e6:	f043 0301 	orr.w	r3, r3, #1
 80040ea:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	78fa      	ldrb	r2, [r7, #3]
 80040f0:	701a      	strb	r2, [r3, #0]
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40023c00 	.word	0x40023c00

08004104 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004108:	4b27      	ldr	r3, [pc, #156]	; (80041a8 <FLASH_SetErrorCode+0xa4>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f003 0310 	and.w	r3, r3, #16
 8004110:	2b00      	cmp	r3, #0
 8004112:	d008      	beq.n	8004126 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004114:	4b25      	ldr	r3, [pc, #148]	; (80041ac <FLASH_SetErrorCode+0xa8>)
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	f043 0310 	orr.w	r3, r3, #16
 800411c:	4a23      	ldr	r2, [pc, #140]	; (80041ac <FLASH_SetErrorCode+0xa8>)
 800411e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004120:	4b21      	ldr	r3, [pc, #132]	; (80041a8 <FLASH_SetErrorCode+0xa4>)
 8004122:	2210      	movs	r2, #16
 8004124:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004126:	4b20      	ldr	r3, [pc, #128]	; (80041a8 <FLASH_SetErrorCode+0xa4>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f003 0320 	and.w	r3, r3, #32
 800412e:	2b00      	cmp	r3, #0
 8004130:	d008      	beq.n	8004144 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004132:	4b1e      	ldr	r3, [pc, #120]	; (80041ac <FLASH_SetErrorCode+0xa8>)
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	f043 0308 	orr.w	r3, r3, #8
 800413a:	4a1c      	ldr	r2, [pc, #112]	; (80041ac <FLASH_SetErrorCode+0xa8>)
 800413c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800413e:	4b1a      	ldr	r3, [pc, #104]	; (80041a8 <FLASH_SetErrorCode+0xa4>)
 8004140:	2220      	movs	r2, #32
 8004142:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004144:	4b18      	ldr	r3, [pc, #96]	; (80041a8 <FLASH_SetErrorCode+0xa4>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414c:	2b00      	cmp	r3, #0
 800414e:	d008      	beq.n	8004162 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004150:	4b16      	ldr	r3, [pc, #88]	; (80041ac <FLASH_SetErrorCode+0xa8>)
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	f043 0304 	orr.w	r3, r3, #4
 8004158:	4a14      	ldr	r2, [pc, #80]	; (80041ac <FLASH_SetErrorCode+0xa8>)
 800415a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800415c:	4b12      	ldr	r3, [pc, #72]	; (80041a8 <FLASH_SetErrorCode+0xa4>)
 800415e:	2240      	movs	r2, #64	; 0x40
 8004160:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004162:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <FLASH_SetErrorCode+0xa4>)
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416a:	2b00      	cmp	r3, #0
 800416c:	d008      	beq.n	8004180 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800416e:	4b0f      	ldr	r3, [pc, #60]	; (80041ac <FLASH_SetErrorCode+0xa8>)
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f043 0302 	orr.w	r3, r3, #2
 8004176:	4a0d      	ldr	r2, [pc, #52]	; (80041ac <FLASH_SetErrorCode+0xa8>)
 8004178:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800417a:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <FLASH_SetErrorCode+0xa4>)
 800417c:	2280      	movs	r2, #128	; 0x80
 800417e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004180:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <FLASH_SetErrorCode+0xa4>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800418c:	4b07      	ldr	r3, [pc, #28]	; (80041ac <FLASH_SetErrorCode+0xa8>)
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	f043 0320 	orr.w	r3, r3, #32
 8004194:	4a05      	ldr	r2, [pc, #20]	; (80041ac <FLASH_SetErrorCode+0xa8>)
 8004196:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004198:	4b03      	ldr	r3, [pc, #12]	; (80041a8 <FLASH_SetErrorCode+0xa4>)
 800419a:	2202      	movs	r2, #2
 800419c:	60da      	str	r2, [r3, #12]
  }
}
 800419e:	bf00      	nop
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	40023c00 	.word	0x40023c00
 80041ac:	20001e24 	.word	0x20001e24

080041b0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80041be:	2300      	movs	r3, #0
 80041c0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80041c2:	4b31      	ldr	r3, [pc, #196]	; (8004288 <HAL_FLASHEx_Erase+0xd8>)
 80041c4:	7e1b      	ldrb	r3, [r3, #24]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d101      	bne.n	80041ce <HAL_FLASHEx_Erase+0x1e>
 80041ca:	2302      	movs	r3, #2
 80041cc:	e058      	b.n	8004280 <HAL_FLASHEx_Erase+0xd0>
 80041ce:	4b2e      	ldr	r3, [pc, #184]	; (8004288 <HAL_FLASHEx_Erase+0xd8>)
 80041d0:	2201      	movs	r2, #1
 80041d2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80041d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80041d8:	f7ff feba 	bl	8003f50 <FLASH_WaitForLastOperation>
 80041dc:	4603      	mov	r3, r0
 80041de:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d148      	bne.n	8004278 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	f04f 32ff 	mov.w	r2, #4294967295
 80041ec:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d115      	bne.n	8004222 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	4619      	mov	r1, r3
 8004202:	4610      	mov	r0, r2
 8004204:	f000 f844 	bl	8004290 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004208:	f24c 3050 	movw	r0, #50000	; 0xc350
 800420c:	f7ff fea0 	bl	8003f50 <FLASH_WaitForLastOperation>
 8004210:	4603      	mov	r3, r0
 8004212:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004214:	4b1d      	ldr	r3, [pc, #116]	; (800428c <HAL_FLASHEx_Erase+0xdc>)
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	4a1c      	ldr	r2, [pc, #112]	; (800428c <HAL_FLASHEx_Erase+0xdc>)
 800421a:	f023 0304 	bic.w	r3, r3, #4
 800421e:	6113      	str	r3, [r2, #16]
 8004220:	e028      	b.n	8004274 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	60bb      	str	r3, [r7, #8]
 8004228:	e01c      	b.n	8004264 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	4619      	mov	r1, r3
 8004232:	68b8      	ldr	r0, [r7, #8]
 8004234:	f000 f850 	bl	80042d8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004238:	f24c 3050 	movw	r0, #50000	; 0xc350
 800423c:	f7ff fe88 	bl	8003f50 <FLASH_WaitForLastOperation>
 8004240:	4603      	mov	r3, r0
 8004242:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004244:	4b11      	ldr	r3, [pc, #68]	; (800428c <HAL_FLASHEx_Erase+0xdc>)
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	4a10      	ldr	r2, [pc, #64]	; (800428c <HAL_FLASHEx_Erase+0xdc>)
 800424a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800424e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	601a      	str	r2, [r3, #0]
          break;
 800425c:	e00a      	b.n	8004274 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	3301      	adds	r3, #1
 8004262:	60bb      	str	r3, [r7, #8]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	4413      	add	r3, r2
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	429a      	cmp	r2, r3
 8004272:	d3da      	bcc.n	800422a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004274:	f000 f878 	bl	8004368 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004278:	4b03      	ldr	r3, [pc, #12]	; (8004288 <HAL_FLASHEx_Erase+0xd8>)
 800427a:	2200      	movs	r2, #0
 800427c:	761a      	strb	r2, [r3, #24]

  return status;
 800427e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	20001e24 	.word	0x20001e24
 800428c:	40023c00 	.word	0x40023c00

08004290 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	6039      	str	r1, [r7, #0]
 800429a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800429c:	4b0d      	ldr	r3, [pc, #52]	; (80042d4 <FLASH_MassErase+0x44>)
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	4a0c      	ldr	r2, [pc, #48]	; (80042d4 <FLASH_MassErase+0x44>)
 80042a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80042a8:	4b0a      	ldr	r3, [pc, #40]	; (80042d4 <FLASH_MassErase+0x44>)
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	4a09      	ldr	r2, [pc, #36]	; (80042d4 <FLASH_MassErase+0x44>)
 80042ae:	f043 0304 	orr.w	r3, r3, #4
 80042b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80042b4:	4b07      	ldr	r3, [pc, #28]	; (80042d4 <FLASH_MassErase+0x44>)
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	79fb      	ldrb	r3, [r7, #7]
 80042ba:	021b      	lsls	r3, r3, #8
 80042bc:	4313      	orrs	r3, r2
 80042be:	4a05      	ldr	r2, [pc, #20]	; (80042d4 <FLASH_MassErase+0x44>)
 80042c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c4:	6113      	str	r3, [r2, #16]
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40023c00 	.word	0x40023c00

080042d8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	460b      	mov	r3, r1
 80042e2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d102      	bne.n	80042f4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80042ee:	2300      	movs	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]
 80042f2:	e010      	b.n	8004316 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d103      	bne.n	8004302 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80042fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	e009      	b.n	8004316 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004302:	78fb      	ldrb	r3, [r7, #3]
 8004304:	2b02      	cmp	r3, #2
 8004306:	d103      	bne.n	8004310 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004308:	f44f 7300 	mov.w	r3, #512	; 0x200
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	e002      	b.n	8004316 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004310:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004314:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004316:	4b13      	ldr	r3, [pc, #76]	; (8004364 <FLASH_Erase_Sector+0x8c>)
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	4a12      	ldr	r2, [pc, #72]	; (8004364 <FLASH_Erase_Sector+0x8c>)
 800431c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004320:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004322:	4b10      	ldr	r3, [pc, #64]	; (8004364 <FLASH_Erase_Sector+0x8c>)
 8004324:	691a      	ldr	r2, [r3, #16]
 8004326:	490f      	ldr	r1, [pc, #60]	; (8004364 <FLASH_Erase_Sector+0x8c>)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4313      	orrs	r3, r2
 800432c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800432e:	4b0d      	ldr	r3, [pc, #52]	; (8004364 <FLASH_Erase_Sector+0x8c>)
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	4a0c      	ldr	r2, [pc, #48]	; (8004364 <FLASH_Erase_Sector+0x8c>)
 8004334:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004338:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800433a:	4b0a      	ldr	r3, [pc, #40]	; (8004364 <FLASH_Erase_Sector+0x8c>)
 800433c:	691a      	ldr	r2, [r3, #16]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	4313      	orrs	r3, r2
 8004344:	4a07      	ldr	r2, [pc, #28]	; (8004364 <FLASH_Erase_Sector+0x8c>)
 8004346:	f043 0302 	orr.w	r3, r3, #2
 800434a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800434c:	4b05      	ldr	r3, [pc, #20]	; (8004364 <FLASH_Erase_Sector+0x8c>)
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	4a04      	ldr	r2, [pc, #16]	; (8004364 <FLASH_Erase_Sector+0x8c>)
 8004352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004356:	6113      	str	r3, [r2, #16]
}
 8004358:	bf00      	nop
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	40023c00 	.word	0x40023c00

08004368 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800436c:	4b20      	ldr	r3, [pc, #128]	; (80043f0 <FLASH_FlushCaches+0x88>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004374:	2b00      	cmp	r3, #0
 8004376:	d017      	beq.n	80043a8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004378:	4b1d      	ldr	r3, [pc, #116]	; (80043f0 <FLASH_FlushCaches+0x88>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a1c      	ldr	r2, [pc, #112]	; (80043f0 <FLASH_FlushCaches+0x88>)
 800437e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004382:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004384:	4b1a      	ldr	r3, [pc, #104]	; (80043f0 <FLASH_FlushCaches+0x88>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a19      	ldr	r2, [pc, #100]	; (80043f0 <FLASH_FlushCaches+0x88>)
 800438a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800438e:	6013      	str	r3, [r2, #0]
 8004390:	4b17      	ldr	r3, [pc, #92]	; (80043f0 <FLASH_FlushCaches+0x88>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a16      	ldr	r2, [pc, #88]	; (80043f0 <FLASH_FlushCaches+0x88>)
 8004396:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800439a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800439c:	4b14      	ldr	r3, [pc, #80]	; (80043f0 <FLASH_FlushCaches+0x88>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a13      	ldr	r2, [pc, #76]	; (80043f0 <FLASH_FlushCaches+0x88>)
 80043a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043a6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80043a8:	4b11      	ldr	r3, [pc, #68]	; (80043f0 <FLASH_FlushCaches+0x88>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d017      	beq.n	80043e4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80043b4:	4b0e      	ldr	r3, [pc, #56]	; (80043f0 <FLASH_FlushCaches+0x88>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a0d      	ldr	r2, [pc, #52]	; (80043f0 <FLASH_FlushCaches+0x88>)
 80043ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043be:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80043c0:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <FLASH_FlushCaches+0x88>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a0a      	ldr	r2, [pc, #40]	; (80043f0 <FLASH_FlushCaches+0x88>)
 80043c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043ca:	6013      	str	r3, [r2, #0]
 80043cc:	4b08      	ldr	r3, [pc, #32]	; (80043f0 <FLASH_FlushCaches+0x88>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a07      	ldr	r2, [pc, #28]	; (80043f0 <FLASH_FlushCaches+0x88>)
 80043d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043d6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80043d8:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <FLASH_FlushCaches+0x88>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a04      	ldr	r2, [pc, #16]	; (80043f0 <FLASH_FlushCaches+0x88>)
 80043de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043e2:	6013      	str	r3, [r2, #0]
  }
}
 80043e4:	bf00      	nop
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	40023c00 	.word	0x40023c00

080043f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b089      	sub	sp, #36	; 0x24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004402:	2300      	movs	r3, #0
 8004404:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004406:	2300      	movs	r3, #0
 8004408:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800440a:	2300      	movs	r3, #0
 800440c:	61fb      	str	r3, [r7, #28]
 800440e:	e16b      	b.n	80046e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004410:	2201      	movs	r2, #1
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	fa02 f303 	lsl.w	r3, r2, r3
 8004418:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	4013      	ands	r3, r2
 8004422:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	429a      	cmp	r2, r3
 800442a:	f040 815a 	bne.w	80046e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	2b01      	cmp	r3, #1
 8004438:	d005      	beq.n	8004446 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004442:	2b02      	cmp	r3, #2
 8004444:	d130      	bne.n	80044a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	2203      	movs	r2, #3
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	43db      	mvns	r3, r3
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	4013      	ands	r3, r2
 800445c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	fa02 f303 	lsl.w	r3, r2, r3
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	4313      	orrs	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800447c:	2201      	movs	r2, #1
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	43db      	mvns	r3, r3
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	4013      	ands	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	091b      	lsrs	r3, r3, #4
 8004492:	f003 0201 	and.w	r2, r3, #1
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	4313      	orrs	r3, r2
 80044a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f003 0303 	and.w	r3, r3, #3
 80044b0:	2b03      	cmp	r3, #3
 80044b2:	d017      	beq.n	80044e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	2203      	movs	r2, #3
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	43db      	mvns	r3, r3
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	4013      	ands	r3, r2
 80044ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	fa02 f303 	lsl.w	r3, r2, r3
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	4313      	orrs	r3, r2
 80044dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f003 0303 	and.w	r3, r3, #3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d123      	bne.n	8004538 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	08da      	lsrs	r2, r3, #3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3208      	adds	r2, #8
 80044f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	220f      	movs	r2, #15
 8004508:	fa02 f303 	lsl.w	r3, r2, r3
 800450c:	43db      	mvns	r3, r3
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	4013      	ands	r3, r2
 8004512:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	4313      	orrs	r3, r2
 8004528:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	08da      	lsrs	r2, r3, #3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	3208      	adds	r2, #8
 8004532:	69b9      	ldr	r1, [r7, #24]
 8004534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	2203      	movs	r2, #3
 8004544:	fa02 f303 	lsl.w	r3, r2, r3
 8004548:	43db      	mvns	r3, r3
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	4013      	ands	r3, r2
 800454e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f003 0203 	and.w	r2, r3, #3
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	4313      	orrs	r3, r2
 8004564:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 80b4 	beq.w	80046e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800457a:	2300      	movs	r3, #0
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	4b60      	ldr	r3, [pc, #384]	; (8004700 <HAL_GPIO_Init+0x30c>)
 8004580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004582:	4a5f      	ldr	r2, [pc, #380]	; (8004700 <HAL_GPIO_Init+0x30c>)
 8004584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004588:	6453      	str	r3, [r2, #68]	; 0x44
 800458a:	4b5d      	ldr	r3, [pc, #372]	; (8004700 <HAL_GPIO_Init+0x30c>)
 800458c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004596:	4a5b      	ldr	r2, [pc, #364]	; (8004704 <HAL_GPIO_Init+0x310>)
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	089b      	lsrs	r3, r3, #2
 800459c:	3302      	adds	r3, #2
 800459e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	220f      	movs	r2, #15
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	43db      	mvns	r3, r3
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	4013      	ands	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a52      	ldr	r2, [pc, #328]	; (8004708 <HAL_GPIO_Init+0x314>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d02b      	beq.n	800461a <HAL_GPIO_Init+0x226>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a51      	ldr	r2, [pc, #324]	; (800470c <HAL_GPIO_Init+0x318>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d025      	beq.n	8004616 <HAL_GPIO_Init+0x222>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a50      	ldr	r2, [pc, #320]	; (8004710 <HAL_GPIO_Init+0x31c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d01f      	beq.n	8004612 <HAL_GPIO_Init+0x21e>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a4f      	ldr	r2, [pc, #316]	; (8004714 <HAL_GPIO_Init+0x320>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d019      	beq.n	800460e <HAL_GPIO_Init+0x21a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a4e      	ldr	r2, [pc, #312]	; (8004718 <HAL_GPIO_Init+0x324>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d013      	beq.n	800460a <HAL_GPIO_Init+0x216>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a4d      	ldr	r2, [pc, #308]	; (800471c <HAL_GPIO_Init+0x328>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d00d      	beq.n	8004606 <HAL_GPIO_Init+0x212>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a4c      	ldr	r2, [pc, #304]	; (8004720 <HAL_GPIO_Init+0x32c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d007      	beq.n	8004602 <HAL_GPIO_Init+0x20e>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a4b      	ldr	r2, [pc, #300]	; (8004724 <HAL_GPIO_Init+0x330>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d101      	bne.n	80045fe <HAL_GPIO_Init+0x20a>
 80045fa:	2307      	movs	r3, #7
 80045fc:	e00e      	b.n	800461c <HAL_GPIO_Init+0x228>
 80045fe:	2308      	movs	r3, #8
 8004600:	e00c      	b.n	800461c <HAL_GPIO_Init+0x228>
 8004602:	2306      	movs	r3, #6
 8004604:	e00a      	b.n	800461c <HAL_GPIO_Init+0x228>
 8004606:	2305      	movs	r3, #5
 8004608:	e008      	b.n	800461c <HAL_GPIO_Init+0x228>
 800460a:	2304      	movs	r3, #4
 800460c:	e006      	b.n	800461c <HAL_GPIO_Init+0x228>
 800460e:	2303      	movs	r3, #3
 8004610:	e004      	b.n	800461c <HAL_GPIO_Init+0x228>
 8004612:	2302      	movs	r3, #2
 8004614:	e002      	b.n	800461c <HAL_GPIO_Init+0x228>
 8004616:	2301      	movs	r3, #1
 8004618:	e000      	b.n	800461c <HAL_GPIO_Init+0x228>
 800461a:	2300      	movs	r3, #0
 800461c:	69fa      	ldr	r2, [r7, #28]
 800461e:	f002 0203 	and.w	r2, r2, #3
 8004622:	0092      	lsls	r2, r2, #2
 8004624:	4093      	lsls	r3, r2
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	4313      	orrs	r3, r2
 800462a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800462c:	4935      	ldr	r1, [pc, #212]	; (8004704 <HAL_GPIO_Init+0x310>)
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	089b      	lsrs	r3, r3, #2
 8004632:	3302      	adds	r3, #2
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800463a:	4b3b      	ldr	r3, [pc, #236]	; (8004728 <HAL_GPIO_Init+0x334>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	43db      	mvns	r3, r3
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	4013      	ands	r3, r2
 8004648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	4313      	orrs	r3, r2
 800465c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800465e:	4a32      	ldr	r2, [pc, #200]	; (8004728 <HAL_GPIO_Init+0x334>)
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004664:	4b30      	ldr	r3, [pc, #192]	; (8004728 <HAL_GPIO_Init+0x334>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	43db      	mvns	r3, r3
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	4013      	ands	r3, r2
 8004672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d003      	beq.n	8004688 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004688:	4a27      	ldr	r2, [pc, #156]	; (8004728 <HAL_GPIO_Init+0x334>)
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800468e:	4b26      	ldr	r3, [pc, #152]	; (8004728 <HAL_GPIO_Init+0x334>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	43db      	mvns	r3, r3
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	4013      	ands	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046b2:	4a1d      	ldr	r2, [pc, #116]	; (8004728 <HAL_GPIO_Init+0x334>)
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046b8:	4b1b      	ldr	r3, [pc, #108]	; (8004728 <HAL_GPIO_Init+0x334>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	43db      	mvns	r3, r3
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	4013      	ands	r3, r2
 80046c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	4313      	orrs	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046dc:	4a12      	ldr	r2, [pc, #72]	; (8004728 <HAL_GPIO_Init+0x334>)
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	3301      	adds	r3, #1
 80046e6:	61fb      	str	r3, [r7, #28]
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	2b0f      	cmp	r3, #15
 80046ec:	f67f ae90 	bls.w	8004410 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046f0:	bf00      	nop
 80046f2:	bf00      	nop
 80046f4:	3724      	adds	r7, #36	; 0x24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	40023800 	.word	0x40023800
 8004704:	40013800 	.word	0x40013800
 8004708:	40020000 	.word	0x40020000
 800470c:	40020400 	.word	0x40020400
 8004710:	40020800 	.word	0x40020800
 8004714:	40020c00 	.word	0x40020c00
 8004718:	40021000 	.word	0x40021000
 800471c:	40021400 	.word	0x40021400
 8004720:	40021800 	.word	0x40021800
 8004724:	40021c00 	.word	0x40021c00
 8004728:	40013c00 	.word	0x40013c00

0800472c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	460b      	mov	r3, r1
 8004736:	807b      	strh	r3, [r7, #2]
 8004738:	4613      	mov	r3, r2
 800473a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800473c:	787b      	ldrb	r3, [r7, #1]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004742:	887a      	ldrh	r2, [r7, #2]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004748:	e003      	b.n	8004752 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800474a:	887b      	ldrh	r3, [r7, #2]
 800474c:	041a      	lsls	r2, r3, #16
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	619a      	str	r2, [r3, #24]
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800475e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004760:	b08f      	sub	sp, #60	; 0x3c
 8004762:	af0a      	add	r7, sp, #40	; 0x28
 8004764:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e054      	b.n	800481a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d106      	bne.n	8004790 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f00f fdf4 	bl	8014378 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2203      	movs	r2, #3
 8004794:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d102      	bne.n	80047aa <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f004 fe04 	bl	80093bc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	603b      	str	r3, [r7, #0]
 80047ba:	687e      	ldr	r6, [r7, #4]
 80047bc:	466d      	mov	r5, sp
 80047be:	f106 0410 	add.w	r4, r6, #16
 80047c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80047d2:	1d33      	adds	r3, r6, #4
 80047d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047d6:	6838      	ldr	r0, [r7, #0]
 80047d8:	f004 fd7e 	bl	80092d8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2101      	movs	r1, #1
 80047e2:	4618      	mov	r0, r3
 80047e4:	f004 fdfb 	bl	80093de <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	603b      	str	r3, [r7, #0]
 80047ee:	687e      	ldr	r6, [r7, #4]
 80047f0:	466d      	mov	r5, sp
 80047f2:	f106 0410 	add.w	r4, r6, #16
 80047f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004802:	e885 0003 	stmia.w	r5, {r0, r1}
 8004806:	1d33      	adds	r3, r6, #4
 8004808:	cb0e      	ldmia	r3, {r1, r2, r3}
 800480a:	6838      	ldr	r0, [r7, #0]
 800480c:	f004 ff84 	bl	8009718 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004822 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004822:	b590      	push	{r4, r7, lr}
 8004824:	b089      	sub	sp, #36	; 0x24
 8004826:	af04      	add	r7, sp, #16
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	4608      	mov	r0, r1
 800482c:	4611      	mov	r1, r2
 800482e:	461a      	mov	r2, r3
 8004830:	4603      	mov	r3, r0
 8004832:	70fb      	strb	r3, [r7, #3]
 8004834:	460b      	mov	r3, r1
 8004836:	70bb      	strb	r3, [r7, #2]
 8004838:	4613      	mov	r3, r2
 800483a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004842:	2b01      	cmp	r3, #1
 8004844:	d101      	bne.n	800484a <HAL_HCD_HC_Init+0x28>
 8004846:	2302      	movs	r3, #2
 8004848:	e076      	b.n	8004938 <HAL_HCD_HC_Init+0x116>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004852:	78fb      	ldrb	r3, [r7, #3]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	212c      	movs	r1, #44	; 0x2c
 8004858:	fb01 f303 	mul.w	r3, r1, r3
 800485c:	4413      	add	r3, r2
 800485e:	333d      	adds	r3, #61	; 0x3d
 8004860:	2200      	movs	r2, #0
 8004862:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004864:	78fb      	ldrb	r3, [r7, #3]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	212c      	movs	r1, #44	; 0x2c
 800486a:	fb01 f303 	mul.w	r3, r1, r3
 800486e:	4413      	add	r3, r2
 8004870:	3338      	adds	r3, #56	; 0x38
 8004872:	787a      	ldrb	r2, [r7, #1]
 8004874:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004876:	78fb      	ldrb	r3, [r7, #3]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	212c      	movs	r1, #44	; 0x2c
 800487c:	fb01 f303 	mul.w	r3, r1, r3
 8004880:	4413      	add	r3, r2
 8004882:	3340      	adds	r3, #64	; 0x40
 8004884:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004886:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004888:	78fb      	ldrb	r3, [r7, #3]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	212c      	movs	r1, #44	; 0x2c
 800488e:	fb01 f303 	mul.w	r3, r1, r3
 8004892:	4413      	add	r3, r2
 8004894:	3339      	adds	r3, #57	; 0x39
 8004896:	78fa      	ldrb	r2, [r7, #3]
 8004898:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800489a:	78fb      	ldrb	r3, [r7, #3]
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	212c      	movs	r1, #44	; 0x2c
 80048a0:	fb01 f303 	mul.w	r3, r1, r3
 80048a4:	4413      	add	r3, r2
 80048a6:	333f      	adds	r3, #63	; 0x3f
 80048a8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80048ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80048ae:	78fb      	ldrb	r3, [r7, #3]
 80048b0:	78ba      	ldrb	r2, [r7, #2]
 80048b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048b6:	b2d0      	uxtb	r0, r2
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	212c      	movs	r1, #44	; 0x2c
 80048bc:	fb01 f303 	mul.w	r3, r1, r3
 80048c0:	4413      	add	r3, r2
 80048c2:	333a      	adds	r3, #58	; 0x3a
 80048c4:	4602      	mov	r2, r0
 80048c6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80048c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	da09      	bge.n	80048e4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80048d0:	78fb      	ldrb	r3, [r7, #3]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	212c      	movs	r1, #44	; 0x2c
 80048d6:	fb01 f303 	mul.w	r3, r1, r3
 80048da:	4413      	add	r3, r2
 80048dc:	333b      	adds	r3, #59	; 0x3b
 80048de:	2201      	movs	r2, #1
 80048e0:	701a      	strb	r2, [r3, #0]
 80048e2:	e008      	b.n	80048f6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80048e4:	78fb      	ldrb	r3, [r7, #3]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	212c      	movs	r1, #44	; 0x2c
 80048ea:	fb01 f303 	mul.w	r3, r1, r3
 80048ee:	4413      	add	r3, r2
 80048f0:	333b      	adds	r3, #59	; 0x3b
 80048f2:	2200      	movs	r2, #0
 80048f4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80048f6:	78fb      	ldrb	r3, [r7, #3]
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	212c      	movs	r1, #44	; 0x2c
 80048fc:	fb01 f303 	mul.w	r3, r1, r3
 8004900:	4413      	add	r3, r2
 8004902:	333c      	adds	r3, #60	; 0x3c
 8004904:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004908:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6818      	ldr	r0, [r3, #0]
 800490e:	787c      	ldrb	r4, [r7, #1]
 8004910:	78ba      	ldrb	r2, [r7, #2]
 8004912:	78f9      	ldrb	r1, [r7, #3]
 8004914:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004916:	9302      	str	r3, [sp, #8]
 8004918:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800491c:	9301      	str	r3, [sp, #4]
 800491e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	4623      	mov	r3, r4
 8004926:	f005 f87d 	bl	8009a24 <USB_HC_Init>
 800492a:	4603      	mov	r3, r0
 800492c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004936:	7bfb      	ldrb	r3, [r7, #15]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	bd90      	pop	{r4, r7, pc}

08004940 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800494c:	2300      	movs	r3, #0
 800494e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004956:	2b01      	cmp	r3, #1
 8004958:	d101      	bne.n	800495e <HAL_HCD_HC_Halt+0x1e>
 800495a:	2302      	movs	r3, #2
 800495c:	e00f      	b.n	800497e <HAL_HCD_HC_Halt+0x3e>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	78fa      	ldrb	r2, [r7, #3]
 800496c:	4611      	mov	r1, r2
 800496e:	4618      	mov	r0, r3
 8004970:	f005 facd 	bl	8009f0e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800497c:	7bfb      	ldrb	r3, [r7, #15]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	4608      	mov	r0, r1
 8004992:	4611      	mov	r1, r2
 8004994:	461a      	mov	r2, r3
 8004996:	4603      	mov	r3, r0
 8004998:	70fb      	strb	r3, [r7, #3]
 800499a:	460b      	mov	r3, r1
 800499c:	70bb      	strb	r3, [r7, #2]
 800499e:	4613      	mov	r3, r2
 80049a0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80049a2:	78fb      	ldrb	r3, [r7, #3]
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	212c      	movs	r1, #44	; 0x2c
 80049a8:	fb01 f303 	mul.w	r3, r1, r3
 80049ac:	4413      	add	r3, r2
 80049ae:	333b      	adds	r3, #59	; 0x3b
 80049b0:	78ba      	ldrb	r2, [r7, #2]
 80049b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80049b4:	78fb      	ldrb	r3, [r7, #3]
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	212c      	movs	r1, #44	; 0x2c
 80049ba:	fb01 f303 	mul.w	r3, r1, r3
 80049be:	4413      	add	r3, r2
 80049c0:	333f      	adds	r3, #63	; 0x3f
 80049c2:	787a      	ldrb	r2, [r7, #1]
 80049c4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80049c6:	7c3b      	ldrb	r3, [r7, #16]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d112      	bne.n	80049f2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80049cc:	78fb      	ldrb	r3, [r7, #3]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	212c      	movs	r1, #44	; 0x2c
 80049d2:	fb01 f303 	mul.w	r3, r1, r3
 80049d6:	4413      	add	r3, r2
 80049d8:	3342      	adds	r3, #66	; 0x42
 80049da:	2203      	movs	r2, #3
 80049dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80049de:	78fb      	ldrb	r3, [r7, #3]
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	212c      	movs	r1, #44	; 0x2c
 80049e4:	fb01 f303 	mul.w	r3, r1, r3
 80049e8:	4413      	add	r3, r2
 80049ea:	333d      	adds	r3, #61	; 0x3d
 80049ec:	7f3a      	ldrb	r2, [r7, #28]
 80049ee:	701a      	strb	r2, [r3, #0]
 80049f0:	e008      	b.n	8004a04 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80049f2:	78fb      	ldrb	r3, [r7, #3]
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	212c      	movs	r1, #44	; 0x2c
 80049f8:	fb01 f303 	mul.w	r3, r1, r3
 80049fc:	4413      	add	r3, r2
 80049fe:	3342      	adds	r3, #66	; 0x42
 8004a00:	2202      	movs	r2, #2
 8004a02:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004a04:	787b      	ldrb	r3, [r7, #1]
 8004a06:	2b03      	cmp	r3, #3
 8004a08:	f200 80c6 	bhi.w	8004b98 <HAL_HCD_HC_SubmitRequest+0x210>
 8004a0c:	a201      	add	r2, pc, #4	; (adr r2, 8004a14 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a12:	bf00      	nop
 8004a14:	08004a25 	.word	0x08004a25
 8004a18:	08004b85 	.word	0x08004b85
 8004a1c:	08004a89 	.word	0x08004a89
 8004a20:	08004b07 	.word	0x08004b07
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004a24:	7c3b      	ldrb	r3, [r7, #16]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	f040 80b8 	bne.w	8004b9c <HAL_HCD_HC_SubmitRequest+0x214>
 8004a2c:	78bb      	ldrb	r3, [r7, #2]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f040 80b4 	bne.w	8004b9c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004a34:	8b3b      	ldrh	r3, [r7, #24]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d108      	bne.n	8004a4c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	212c      	movs	r1, #44	; 0x2c
 8004a40:	fb01 f303 	mul.w	r3, r1, r3
 8004a44:	4413      	add	r3, r2
 8004a46:	3355      	adds	r3, #85	; 0x55
 8004a48:	2201      	movs	r2, #1
 8004a4a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004a4c:	78fb      	ldrb	r3, [r7, #3]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	212c      	movs	r1, #44	; 0x2c
 8004a52:	fb01 f303 	mul.w	r3, r1, r3
 8004a56:	4413      	add	r3, r2
 8004a58:	3355      	adds	r3, #85	; 0x55
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d109      	bne.n	8004a74 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004a60:	78fb      	ldrb	r3, [r7, #3]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	212c      	movs	r1, #44	; 0x2c
 8004a66:	fb01 f303 	mul.w	r3, r1, r3
 8004a6a:	4413      	add	r3, r2
 8004a6c:	3342      	adds	r3, #66	; 0x42
 8004a6e:	2200      	movs	r2, #0
 8004a70:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004a72:	e093      	b.n	8004b9c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	212c      	movs	r1, #44	; 0x2c
 8004a7a:	fb01 f303 	mul.w	r3, r1, r3
 8004a7e:	4413      	add	r3, r2
 8004a80:	3342      	adds	r3, #66	; 0x42
 8004a82:	2202      	movs	r2, #2
 8004a84:	701a      	strb	r2, [r3, #0]
      break;
 8004a86:	e089      	b.n	8004b9c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004a88:	78bb      	ldrb	r3, [r7, #2]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d11d      	bne.n	8004aca <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004a8e:	78fb      	ldrb	r3, [r7, #3]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	212c      	movs	r1, #44	; 0x2c
 8004a94:	fb01 f303 	mul.w	r3, r1, r3
 8004a98:	4413      	add	r3, r2
 8004a9a:	3355      	adds	r3, #85	; 0x55
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d109      	bne.n	8004ab6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004aa2:	78fb      	ldrb	r3, [r7, #3]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	212c      	movs	r1, #44	; 0x2c
 8004aa8:	fb01 f303 	mul.w	r3, r1, r3
 8004aac:	4413      	add	r3, r2
 8004aae:	3342      	adds	r3, #66	; 0x42
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004ab4:	e073      	b.n	8004b9e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ab6:	78fb      	ldrb	r3, [r7, #3]
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	212c      	movs	r1, #44	; 0x2c
 8004abc:	fb01 f303 	mul.w	r3, r1, r3
 8004ac0:	4413      	add	r3, r2
 8004ac2:	3342      	adds	r3, #66	; 0x42
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	701a      	strb	r2, [r3, #0]
      break;
 8004ac8:	e069      	b.n	8004b9e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004aca:	78fb      	ldrb	r3, [r7, #3]
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	212c      	movs	r1, #44	; 0x2c
 8004ad0:	fb01 f303 	mul.w	r3, r1, r3
 8004ad4:	4413      	add	r3, r2
 8004ad6:	3354      	adds	r3, #84	; 0x54
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d109      	bne.n	8004af2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ade:	78fb      	ldrb	r3, [r7, #3]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	212c      	movs	r1, #44	; 0x2c
 8004ae4:	fb01 f303 	mul.w	r3, r1, r3
 8004ae8:	4413      	add	r3, r2
 8004aea:	3342      	adds	r3, #66	; 0x42
 8004aec:	2200      	movs	r2, #0
 8004aee:	701a      	strb	r2, [r3, #0]
      break;
 8004af0:	e055      	b.n	8004b9e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004af2:	78fb      	ldrb	r3, [r7, #3]
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	212c      	movs	r1, #44	; 0x2c
 8004af8:	fb01 f303 	mul.w	r3, r1, r3
 8004afc:	4413      	add	r3, r2
 8004afe:	3342      	adds	r3, #66	; 0x42
 8004b00:	2202      	movs	r2, #2
 8004b02:	701a      	strb	r2, [r3, #0]
      break;
 8004b04:	e04b      	b.n	8004b9e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004b06:	78bb      	ldrb	r3, [r7, #2]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d11d      	bne.n	8004b48 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004b0c:	78fb      	ldrb	r3, [r7, #3]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	212c      	movs	r1, #44	; 0x2c
 8004b12:	fb01 f303 	mul.w	r3, r1, r3
 8004b16:	4413      	add	r3, r2
 8004b18:	3355      	adds	r3, #85	; 0x55
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d109      	bne.n	8004b34 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b20:	78fb      	ldrb	r3, [r7, #3]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	212c      	movs	r1, #44	; 0x2c
 8004b26:	fb01 f303 	mul.w	r3, r1, r3
 8004b2a:	4413      	add	r3, r2
 8004b2c:	3342      	adds	r3, #66	; 0x42
 8004b2e:	2200      	movs	r2, #0
 8004b30:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004b32:	e034      	b.n	8004b9e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b34:	78fb      	ldrb	r3, [r7, #3]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	212c      	movs	r1, #44	; 0x2c
 8004b3a:	fb01 f303 	mul.w	r3, r1, r3
 8004b3e:	4413      	add	r3, r2
 8004b40:	3342      	adds	r3, #66	; 0x42
 8004b42:	2202      	movs	r2, #2
 8004b44:	701a      	strb	r2, [r3, #0]
      break;
 8004b46:	e02a      	b.n	8004b9e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	212c      	movs	r1, #44	; 0x2c
 8004b4e:	fb01 f303 	mul.w	r3, r1, r3
 8004b52:	4413      	add	r3, r2
 8004b54:	3354      	adds	r3, #84	; 0x54
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d109      	bne.n	8004b70 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b5c:	78fb      	ldrb	r3, [r7, #3]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	212c      	movs	r1, #44	; 0x2c
 8004b62:	fb01 f303 	mul.w	r3, r1, r3
 8004b66:	4413      	add	r3, r2
 8004b68:	3342      	adds	r3, #66	; 0x42
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	701a      	strb	r2, [r3, #0]
      break;
 8004b6e:	e016      	b.n	8004b9e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b70:	78fb      	ldrb	r3, [r7, #3]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	212c      	movs	r1, #44	; 0x2c
 8004b76:	fb01 f303 	mul.w	r3, r1, r3
 8004b7a:	4413      	add	r3, r2
 8004b7c:	3342      	adds	r3, #66	; 0x42
 8004b7e:	2202      	movs	r2, #2
 8004b80:	701a      	strb	r2, [r3, #0]
      break;
 8004b82:	e00c      	b.n	8004b9e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b84:	78fb      	ldrb	r3, [r7, #3]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	212c      	movs	r1, #44	; 0x2c
 8004b8a:	fb01 f303 	mul.w	r3, r1, r3
 8004b8e:	4413      	add	r3, r2
 8004b90:	3342      	adds	r3, #66	; 0x42
 8004b92:	2200      	movs	r2, #0
 8004b94:	701a      	strb	r2, [r3, #0]
      break;
 8004b96:	e002      	b.n	8004b9e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004b98:	bf00      	nop
 8004b9a:	e000      	b.n	8004b9e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004b9c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004b9e:	78fb      	ldrb	r3, [r7, #3]
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	212c      	movs	r1, #44	; 0x2c
 8004ba4:	fb01 f303 	mul.w	r3, r1, r3
 8004ba8:	4413      	add	r3, r2
 8004baa:	3344      	adds	r3, #68	; 0x44
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004bb0:	78fb      	ldrb	r3, [r7, #3]
 8004bb2:	8b3a      	ldrh	r2, [r7, #24]
 8004bb4:	6879      	ldr	r1, [r7, #4]
 8004bb6:	202c      	movs	r0, #44	; 0x2c
 8004bb8:	fb00 f303 	mul.w	r3, r0, r3
 8004bbc:	440b      	add	r3, r1
 8004bbe:	334c      	adds	r3, #76	; 0x4c
 8004bc0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004bc2:	78fb      	ldrb	r3, [r7, #3]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	212c      	movs	r1, #44	; 0x2c
 8004bc8:	fb01 f303 	mul.w	r3, r1, r3
 8004bcc:	4413      	add	r3, r2
 8004bce:	3360      	adds	r3, #96	; 0x60
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004bd4:	78fb      	ldrb	r3, [r7, #3]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	212c      	movs	r1, #44	; 0x2c
 8004bda:	fb01 f303 	mul.w	r3, r1, r3
 8004bde:	4413      	add	r3, r2
 8004be0:	3350      	adds	r3, #80	; 0x50
 8004be2:	2200      	movs	r2, #0
 8004be4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004be6:	78fb      	ldrb	r3, [r7, #3]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	212c      	movs	r1, #44	; 0x2c
 8004bec:	fb01 f303 	mul.w	r3, r1, r3
 8004bf0:	4413      	add	r3, r2
 8004bf2:	3339      	adds	r3, #57	; 0x39
 8004bf4:	78fa      	ldrb	r2, [r7, #3]
 8004bf6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004bf8:	78fb      	ldrb	r3, [r7, #3]
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	212c      	movs	r1, #44	; 0x2c
 8004bfe:	fb01 f303 	mul.w	r3, r1, r3
 8004c02:	4413      	add	r3, r2
 8004c04:	3361      	adds	r3, #97	; 0x61
 8004c06:	2200      	movs	r2, #0
 8004c08:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6818      	ldr	r0, [r3, #0]
 8004c0e:	78fb      	ldrb	r3, [r7, #3]
 8004c10:	222c      	movs	r2, #44	; 0x2c
 8004c12:	fb02 f303 	mul.w	r3, r2, r3
 8004c16:	3338      	adds	r3, #56	; 0x38
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	18d1      	adds	r1, r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	461a      	mov	r2, r3
 8004c24:	f005 f820 	bl	8009c68 <USB_HC_StartXfer>
 8004c28:	4603      	mov	r3, r0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3708      	adds	r7, #8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop

08004c34 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f004 fd21 	bl	8009692 <USB_GetMode>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	f040 80f6 	bne.w	8004e44 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f004 fd05 	bl	800966c <USB_ReadInterrupts>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 80ec 	beq.w	8004e42 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f004 fcfc 	bl	800966c <USB_ReadInterrupts>
 8004c74:	4603      	mov	r3, r0
 8004c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c7e:	d104      	bne.n	8004c8a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004c88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f004 fcec 	bl	800966c <USB_ReadInterrupts>
 8004c94:	4603      	mov	r3, r0
 8004c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c9e:	d104      	bne.n	8004caa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ca8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f004 fcdc 	bl	800966c <USB_ReadInterrupts>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cbe:	d104      	bne.n	8004cca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004cc8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f004 fccc 	bl	800966c <USB_ReadInterrupts>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d103      	bne.n	8004ce6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f004 fcbe 	bl	800966c <USB_ReadInterrupts>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cfa:	d11c      	bne.n	8004d36 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004d04:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10f      	bne.n	8004d36 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004d16:	2110      	movs	r1, #16
 8004d18:	6938      	ldr	r0, [r7, #16]
 8004d1a:	f004 fbad 	bl	8009478 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004d1e:	6938      	ldr	r0, [r7, #16]
 8004d20:	f004 fbde 	bl	80094e0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2101      	movs	r1, #1
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f004 fdb4 	bl	8009898 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f00f fb91 	bl	8014458 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f004 fc96 	bl	800966c <USB_ReadInterrupts>
 8004d40:	4603      	mov	r3, r0
 8004d42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d4a:	d102      	bne.n	8004d52 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f001 f89e 	bl	8005e8e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f004 fc88 	bl	800966c <USB_ReadInterrupts>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	f003 0308 	and.w	r3, r3, #8
 8004d62:	2b08      	cmp	r3, #8
 8004d64:	d106      	bne.n	8004d74 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f00f fb5a 	bl	8014420 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2208      	movs	r2, #8
 8004d72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f004 fc77 	bl	800966c <USB_ReadInterrupts>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	f003 0310 	and.w	r3, r3, #16
 8004d84:	2b10      	cmp	r3, #16
 8004d86:	d101      	bne.n	8004d8c <HAL_HCD_IRQHandler+0x158>
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e000      	b.n	8004d8e <HAL_HCD_IRQHandler+0x15a>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d012      	beq.n	8004db8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	699a      	ldr	r2, [r3, #24]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0210 	bic.w	r2, r2, #16
 8004da0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 ffa1 	bl	8005cea <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699a      	ldr	r2, [r3, #24]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0210 	orr.w	r2, r2, #16
 8004db6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f004 fc55 	bl	800966c <USB_ReadInterrupts>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dcc:	d13a      	bne.n	8004e44 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f005 f88a 	bl	8009eec <USB_HC_ReadInterrupt>
 8004dd8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004dda:	2300      	movs	r3, #0
 8004ddc:	617b      	str	r3, [r7, #20]
 8004dde:	e025      	b.n	8004e2c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	fa22 f303 	lsr.w	r3, r2, r3
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d018      	beq.n	8004e26 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e0a:	d106      	bne.n	8004e1a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	4619      	mov	r1, r3
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f8ab 	bl	8004f6e <HCD_HC_IN_IRQHandler>
 8004e18:	e005      	b.n	8004e26 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	4619      	mov	r1, r3
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 fbf9 	bl	8005618 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d3d4      	bcc.n	8004de0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e3e:	615a      	str	r2, [r3, #20]
 8004e40:	e000      	b.n	8004e44 <HAL_HCD_IRQHandler+0x210>
      return;
 8004e42:	bf00      	nop
    }
  }
}
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b082      	sub	sp, #8
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d101      	bne.n	8004e60 <HAL_HCD_Start+0x16>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	e013      	b.n	8004e88 <HAL_HCD_Start+0x3e>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f004 fd76 	bl	8009960 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f004 fa8e 	bl	800939a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d101      	bne.n	8004ea6 <HAL_HCD_Stop+0x16>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e00d      	b.n	8004ec2 <HAL_HCD_Stop+0x32>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f005 f964 	bl	800a180 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b082      	sub	sp, #8
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f004 fd18 	bl	800990c <USB_ResetPort>
 8004edc:	4603      	mov	r3, r0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
 8004eee:	460b      	mov	r3, r1
 8004ef0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004ef2:	78fb      	ldrb	r3, [r7, #3]
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	212c      	movs	r1, #44	; 0x2c
 8004ef8:	fb01 f303 	mul.w	r3, r1, r3
 8004efc:	4413      	add	r3, r2
 8004efe:	3360      	adds	r3, #96	; 0x60
 8004f00:	781b      	ldrb	r3, [r3, #0]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
 8004f16:	460b      	mov	r3, r1
 8004f18:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004f1a:	78fb      	ldrb	r3, [r7, #3]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	212c      	movs	r1, #44	; 0x2c
 8004f20:	fb01 f303 	mul.w	r3, r1, r3
 8004f24:	4413      	add	r3, r2
 8004f26:	3350      	adds	r3, #80	; 0x50
 8004f28:	681b      	ldr	r3, [r3, #0]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b082      	sub	sp, #8
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f004 fd5c 	bl	8009a00 <USB_GetCurrentFrame>
 8004f48:	4603      	mov	r3, r0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b082      	sub	sp, #8
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f004 fd37 	bl	80099d2 <USB_GetHostSpeed>
 8004f64:	4603      	mov	r3, r0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b086      	sub	sp, #24
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	460b      	mov	r3, r1
 8004f78:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004f84:	78fb      	ldrb	r3, [r7, #3]
 8004f86:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 0304 	and.w	r3, r3, #4
 8004f9a:	2b04      	cmp	r3, #4
 8004f9c:	d11a      	bne.n	8004fd4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004faa:	461a      	mov	r2, r3
 8004fac:	2304      	movs	r3, #4
 8004fae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	212c      	movs	r1, #44	; 0x2c
 8004fb6:	fb01 f303 	mul.w	r3, r1, r3
 8004fba:	4413      	add	r3, r2
 8004fbc:	3361      	adds	r3, #97	; 0x61
 8004fbe:	2206      	movs	r2, #6
 8004fc0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	4611      	mov	r1, r2
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f004 ff9e 	bl	8009f0e <USB_HC_Halt>
 8004fd2:	e0af      	b.n	8005134 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fea:	d11b      	bne.n	8005024 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ffe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	212c      	movs	r1, #44	; 0x2c
 8005006:	fb01 f303 	mul.w	r3, r1, r3
 800500a:	4413      	add	r3, r2
 800500c:	3361      	adds	r3, #97	; 0x61
 800500e:	2207      	movs	r2, #7
 8005010:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	b2d2      	uxtb	r2, r2
 800501a:	4611      	mov	r1, r2
 800501c:	4618      	mov	r0, r3
 800501e:	f004 ff76 	bl	8009f0e <USB_HC_Halt>
 8005022:	e087      	b.n	8005134 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	4413      	add	r3, r2
 800502c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f003 0320 	and.w	r3, r3, #32
 8005036:	2b20      	cmp	r3, #32
 8005038:	d109      	bne.n	800504e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	4413      	add	r3, r2
 8005042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005046:	461a      	mov	r2, r3
 8005048:	2320      	movs	r3, #32
 800504a:	6093      	str	r3, [r2, #8]
 800504c:	e072      	b.n	8005134 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	4413      	add	r3, r2
 8005056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	2b08      	cmp	r3, #8
 8005062:	d11a      	bne.n	800509a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	4413      	add	r3, r2
 800506c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005070:	461a      	mov	r2, r3
 8005072:	2308      	movs	r3, #8
 8005074:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	212c      	movs	r1, #44	; 0x2c
 800507c:	fb01 f303 	mul.w	r3, r1, r3
 8005080:	4413      	add	r3, r2
 8005082:	3361      	adds	r3, #97	; 0x61
 8005084:	2205      	movs	r2, #5
 8005086:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	b2d2      	uxtb	r2, r2
 8005090:	4611      	mov	r1, r2
 8005092:	4618      	mov	r0, r3
 8005094:	f004 ff3b 	bl	8009f0e <USB_HC_Halt>
 8005098:	e04c      	b.n	8005134 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	015a      	lsls	r2, r3, #5
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	4413      	add	r3, r2
 80050a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b0:	d11b      	bne.n	80050ea <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050be:	461a      	mov	r2, r3
 80050c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	212c      	movs	r1, #44	; 0x2c
 80050cc:	fb01 f303 	mul.w	r3, r1, r3
 80050d0:	4413      	add	r3, r2
 80050d2:	3361      	adds	r3, #97	; 0x61
 80050d4:	2208      	movs	r2, #8
 80050d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	b2d2      	uxtb	r2, r2
 80050e0:	4611      	mov	r1, r2
 80050e2:	4618      	mov	r0, r3
 80050e4:	f004 ff13 	bl	8009f0e <USB_HC_Halt>
 80050e8:	e024      	b.n	8005134 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fc:	2b80      	cmp	r3, #128	; 0x80
 80050fe:	d119      	bne.n	8005134 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	4413      	add	r3, r2
 8005108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800510c:	461a      	mov	r2, r3
 800510e:	2380      	movs	r3, #128	; 0x80
 8005110:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	212c      	movs	r1, #44	; 0x2c
 8005118:	fb01 f303 	mul.w	r3, r1, r3
 800511c:	4413      	add	r3, r2
 800511e:	3361      	adds	r3, #97	; 0x61
 8005120:	2206      	movs	r2, #6
 8005122:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	4611      	mov	r1, r2
 800512e:	4618      	mov	r0, r3
 8005130:	f004 feed 	bl	8009f0e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	4413      	add	r3, r2
 800513c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800514a:	d112      	bne.n	8005172 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	b2d2      	uxtb	r2, r2
 8005154:	4611      	mov	r1, r2
 8005156:	4618      	mov	r0, r3
 8005158:	f004 fed9 	bl	8009f0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	4413      	add	r3, r2
 8005164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005168:	461a      	mov	r2, r3
 800516a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800516e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005170:	e24e      	b.n	8005610 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	4413      	add	r3, r2
 800517a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b01      	cmp	r3, #1
 8005186:	f040 80df 	bne.w	8005348 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d019      	beq.n	80051c6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	212c      	movs	r1, #44	; 0x2c
 8005198:	fb01 f303 	mul.w	r3, r1, r3
 800519c:	4413      	add	r3, r2
 800519e:	3348      	adds	r3, #72	; 0x48
 80051a0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	0159      	lsls	r1, r3, #5
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	440b      	add	r3, r1
 80051aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80051b4:	1ad2      	subs	r2, r2, r3
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	202c      	movs	r0, #44	; 0x2c
 80051bc:	fb00 f303 	mul.w	r3, r0, r3
 80051c0:	440b      	add	r3, r1
 80051c2:	3350      	adds	r3, #80	; 0x50
 80051c4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	212c      	movs	r1, #44	; 0x2c
 80051cc:	fb01 f303 	mul.w	r3, r1, r3
 80051d0:	4413      	add	r3, r2
 80051d2:	3361      	adds	r3, #97	; 0x61
 80051d4:	2201      	movs	r2, #1
 80051d6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	212c      	movs	r1, #44	; 0x2c
 80051de:	fb01 f303 	mul.w	r3, r1, r3
 80051e2:	4413      	add	r3, r2
 80051e4:	335c      	adds	r3, #92	; 0x5c
 80051e6:	2200      	movs	r2, #0
 80051e8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f6:	461a      	mov	r2, r3
 80051f8:	2301      	movs	r3, #1
 80051fa:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	212c      	movs	r1, #44	; 0x2c
 8005202:	fb01 f303 	mul.w	r3, r1, r3
 8005206:	4413      	add	r3, r2
 8005208:	333f      	adds	r3, #63	; 0x3f
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d009      	beq.n	8005224 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	212c      	movs	r1, #44	; 0x2c
 8005216:	fb01 f303 	mul.w	r3, r1, r3
 800521a:	4413      	add	r3, r2
 800521c:	333f      	adds	r3, #63	; 0x3f
 800521e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005220:	2b02      	cmp	r3, #2
 8005222:	d111      	bne.n	8005248 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	4611      	mov	r1, r2
 800522e:	4618      	mov	r0, r3
 8005230:	f004 fe6d 	bl	8009f0e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	4413      	add	r3, r2
 800523c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005240:	461a      	mov	r2, r3
 8005242:	2310      	movs	r3, #16
 8005244:	6093      	str	r3, [r2, #8]
 8005246:	e03a      	b.n	80052be <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	212c      	movs	r1, #44	; 0x2c
 800524e:	fb01 f303 	mul.w	r3, r1, r3
 8005252:	4413      	add	r3, r2
 8005254:	333f      	adds	r3, #63	; 0x3f
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	2b03      	cmp	r3, #3
 800525a:	d009      	beq.n	8005270 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	212c      	movs	r1, #44	; 0x2c
 8005262:	fb01 f303 	mul.w	r3, r1, r3
 8005266:	4413      	add	r3, r2
 8005268:	333f      	adds	r3, #63	; 0x3f
 800526a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800526c:	2b01      	cmp	r3, #1
 800526e:	d126      	bne.n	80052be <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	4413      	add	r3, r2
 8005278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	0151      	lsls	r1, r2, #5
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	440a      	add	r2, r1
 8005286:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800528a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800528e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	212c      	movs	r1, #44	; 0x2c
 8005296:	fb01 f303 	mul.w	r3, r1, r3
 800529a:	4413      	add	r3, r2
 800529c:	3360      	adds	r3, #96	; 0x60
 800529e:	2201      	movs	r2, #1
 80052a0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	b2d9      	uxtb	r1, r3
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	202c      	movs	r0, #44	; 0x2c
 80052ac:	fb00 f303 	mul.w	r3, r0, r3
 80052b0:	4413      	add	r3, r2
 80052b2:	3360      	adds	r3, #96	; 0x60
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f00f f8db 	bl	8014474 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d12b      	bne.n	800531e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	212c      	movs	r1, #44	; 0x2c
 80052cc:	fb01 f303 	mul.w	r3, r1, r3
 80052d0:	4413      	add	r3, r2
 80052d2:	3348      	adds	r3, #72	; 0x48
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6879      	ldr	r1, [r7, #4]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	202c      	movs	r0, #44	; 0x2c
 80052dc:	fb00 f202 	mul.w	r2, r0, r2
 80052e0:	440a      	add	r2, r1
 80052e2:	3240      	adds	r2, #64	; 0x40
 80052e4:	8812      	ldrh	r2, [r2, #0]
 80052e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 818e 	beq.w	8005610 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	212c      	movs	r1, #44	; 0x2c
 80052fa:	fb01 f303 	mul.w	r3, r1, r3
 80052fe:	4413      	add	r3, r2
 8005300:	3354      	adds	r3, #84	; 0x54
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	f083 0301 	eor.w	r3, r3, #1
 8005308:	b2d8      	uxtb	r0, r3
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	212c      	movs	r1, #44	; 0x2c
 8005310:	fb01 f303 	mul.w	r3, r1, r3
 8005314:	4413      	add	r3, r2
 8005316:	3354      	adds	r3, #84	; 0x54
 8005318:	4602      	mov	r2, r0
 800531a:	701a      	strb	r2, [r3, #0]
}
 800531c:	e178      	b.n	8005610 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	212c      	movs	r1, #44	; 0x2c
 8005324:	fb01 f303 	mul.w	r3, r1, r3
 8005328:	4413      	add	r3, r2
 800532a:	3354      	adds	r3, #84	; 0x54
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	f083 0301 	eor.w	r3, r3, #1
 8005332:	b2d8      	uxtb	r0, r3
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	212c      	movs	r1, #44	; 0x2c
 800533a:	fb01 f303 	mul.w	r3, r1, r3
 800533e:	4413      	add	r3, r2
 8005340:	3354      	adds	r3, #84	; 0x54
 8005342:	4602      	mov	r2, r0
 8005344:	701a      	strb	r2, [r3, #0]
}
 8005346:	e163      	b.n	8005610 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	4413      	add	r3, r2
 8005350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b02      	cmp	r3, #2
 800535c:	f040 80f6 	bne.w	800554c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	212c      	movs	r1, #44	; 0x2c
 8005366:	fb01 f303 	mul.w	r3, r1, r3
 800536a:	4413      	add	r3, r2
 800536c:	3361      	adds	r3, #97	; 0x61
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d109      	bne.n	8005388 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	212c      	movs	r1, #44	; 0x2c
 800537a:	fb01 f303 	mul.w	r3, r1, r3
 800537e:	4413      	add	r3, r2
 8005380:	3360      	adds	r3, #96	; 0x60
 8005382:	2201      	movs	r2, #1
 8005384:	701a      	strb	r2, [r3, #0]
 8005386:	e0c9      	b.n	800551c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	212c      	movs	r1, #44	; 0x2c
 800538e:	fb01 f303 	mul.w	r3, r1, r3
 8005392:	4413      	add	r3, r2
 8005394:	3361      	adds	r3, #97	; 0x61
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b05      	cmp	r3, #5
 800539a:	d109      	bne.n	80053b0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	212c      	movs	r1, #44	; 0x2c
 80053a2:	fb01 f303 	mul.w	r3, r1, r3
 80053a6:	4413      	add	r3, r2
 80053a8:	3360      	adds	r3, #96	; 0x60
 80053aa:	2205      	movs	r2, #5
 80053ac:	701a      	strb	r2, [r3, #0]
 80053ae:	e0b5      	b.n	800551c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	212c      	movs	r1, #44	; 0x2c
 80053b6:	fb01 f303 	mul.w	r3, r1, r3
 80053ba:	4413      	add	r3, r2
 80053bc:	3361      	adds	r3, #97	; 0x61
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2b06      	cmp	r3, #6
 80053c2:	d009      	beq.n	80053d8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	212c      	movs	r1, #44	; 0x2c
 80053ca:	fb01 f303 	mul.w	r3, r1, r3
 80053ce:	4413      	add	r3, r2
 80053d0:	3361      	adds	r3, #97	; 0x61
 80053d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80053d4:	2b08      	cmp	r3, #8
 80053d6:	d150      	bne.n	800547a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	212c      	movs	r1, #44	; 0x2c
 80053de:	fb01 f303 	mul.w	r3, r1, r3
 80053e2:	4413      	add	r3, r2
 80053e4:	335c      	adds	r3, #92	; 0x5c
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	202c      	movs	r0, #44	; 0x2c
 80053f0:	fb00 f303 	mul.w	r3, r0, r3
 80053f4:	440b      	add	r3, r1
 80053f6:	335c      	adds	r3, #92	; 0x5c
 80053f8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	212c      	movs	r1, #44	; 0x2c
 8005400:	fb01 f303 	mul.w	r3, r1, r3
 8005404:	4413      	add	r3, r2
 8005406:	335c      	adds	r3, #92	; 0x5c
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d912      	bls.n	8005434 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	212c      	movs	r1, #44	; 0x2c
 8005414:	fb01 f303 	mul.w	r3, r1, r3
 8005418:	4413      	add	r3, r2
 800541a:	335c      	adds	r3, #92	; 0x5c
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	212c      	movs	r1, #44	; 0x2c
 8005426:	fb01 f303 	mul.w	r3, r1, r3
 800542a:	4413      	add	r3, r2
 800542c:	3360      	adds	r3, #96	; 0x60
 800542e:	2204      	movs	r2, #4
 8005430:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005432:	e073      	b.n	800551c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	212c      	movs	r1, #44	; 0x2c
 800543a:	fb01 f303 	mul.w	r3, r1, r3
 800543e:	4413      	add	r3, r2
 8005440:	3360      	adds	r3, #96	; 0x60
 8005442:	2202      	movs	r2, #2
 8005444:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	4413      	add	r3, r2
 800544e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800545c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005464:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	4413      	add	r3, r2
 800546e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005472:	461a      	mov	r2, r3
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005478:	e050      	b.n	800551c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	212c      	movs	r1, #44	; 0x2c
 8005480:	fb01 f303 	mul.w	r3, r1, r3
 8005484:	4413      	add	r3, r2
 8005486:	3361      	adds	r3, #97	; 0x61
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	2b03      	cmp	r3, #3
 800548c:	d122      	bne.n	80054d4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	212c      	movs	r1, #44	; 0x2c
 8005494:	fb01 f303 	mul.w	r3, r1, r3
 8005498:	4413      	add	r3, r2
 800549a:	3360      	adds	r3, #96	; 0x60
 800549c:	2202      	movs	r2, #2
 800549e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054b6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054be:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054cc:	461a      	mov	r2, r3
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	6013      	str	r3, [r2, #0]
 80054d2:	e023      	b.n	800551c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	212c      	movs	r1, #44	; 0x2c
 80054da:	fb01 f303 	mul.w	r3, r1, r3
 80054de:	4413      	add	r3, r2
 80054e0:	3361      	adds	r3, #97	; 0x61
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	2b07      	cmp	r3, #7
 80054e6:	d119      	bne.n	800551c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	212c      	movs	r1, #44	; 0x2c
 80054ee:	fb01 f303 	mul.w	r3, r1, r3
 80054f2:	4413      	add	r3, r2
 80054f4:	335c      	adds	r3, #92	; 0x5c
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	6879      	ldr	r1, [r7, #4]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	202c      	movs	r0, #44	; 0x2c
 8005500:	fb00 f303 	mul.w	r3, r0, r3
 8005504:	440b      	add	r3, r1
 8005506:	335c      	adds	r3, #92	; 0x5c
 8005508:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	212c      	movs	r1, #44	; 0x2c
 8005510:	fb01 f303 	mul.w	r3, r1, r3
 8005514:	4413      	add	r3, r2
 8005516:	3360      	adds	r3, #96	; 0x60
 8005518:	2204      	movs	r2, #4
 800551a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	4413      	add	r3, r2
 8005524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005528:	461a      	mov	r2, r3
 800552a:	2302      	movs	r3, #2
 800552c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	b2d9      	uxtb	r1, r3
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	202c      	movs	r0, #44	; 0x2c
 8005538:	fb00 f303 	mul.w	r3, r0, r3
 800553c:	4413      	add	r3, r2
 800553e:	3360      	adds	r3, #96	; 0x60
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	461a      	mov	r2, r3
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f00e ff95 	bl	8014474 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800554a:	e061      	b.n	8005610 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	4413      	add	r3, r2
 8005554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f003 0310 	and.w	r3, r3, #16
 800555e:	2b10      	cmp	r3, #16
 8005560:	d156      	bne.n	8005610 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	212c      	movs	r1, #44	; 0x2c
 8005568:	fb01 f303 	mul.w	r3, r1, r3
 800556c:	4413      	add	r3, r2
 800556e:	333f      	adds	r3, #63	; 0x3f
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	2b03      	cmp	r3, #3
 8005574:	d111      	bne.n	800559a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	212c      	movs	r1, #44	; 0x2c
 800557c:	fb01 f303 	mul.w	r3, r1, r3
 8005580:	4413      	add	r3, r2
 8005582:	335c      	adds	r3, #92	; 0x5c
 8005584:	2200      	movs	r2, #0
 8005586:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	b2d2      	uxtb	r2, r2
 8005590:	4611      	mov	r1, r2
 8005592:	4618      	mov	r0, r3
 8005594:	f004 fcbb 	bl	8009f0e <USB_HC_Halt>
 8005598:	e031      	b.n	80055fe <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	212c      	movs	r1, #44	; 0x2c
 80055a0:	fb01 f303 	mul.w	r3, r1, r3
 80055a4:	4413      	add	r3, r2
 80055a6:	333f      	adds	r3, #63	; 0x3f
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d009      	beq.n	80055c2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	212c      	movs	r1, #44	; 0x2c
 80055b4:	fb01 f303 	mul.w	r3, r1, r3
 80055b8:	4413      	add	r3, r2
 80055ba:	333f      	adds	r3, #63	; 0x3f
 80055bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d11d      	bne.n	80055fe <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	212c      	movs	r1, #44	; 0x2c
 80055c8:	fb01 f303 	mul.w	r3, r1, r3
 80055cc:	4413      	add	r3, r2
 80055ce:	335c      	adds	r3, #92	; 0x5c
 80055d0:	2200      	movs	r2, #0
 80055d2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d110      	bne.n	80055fe <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	212c      	movs	r1, #44	; 0x2c
 80055e2:	fb01 f303 	mul.w	r3, r1, r3
 80055e6:	4413      	add	r3, r2
 80055e8:	3361      	adds	r3, #97	; 0x61
 80055ea:	2203      	movs	r2, #3
 80055ec:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	b2d2      	uxtb	r2, r2
 80055f6:	4611      	mov	r1, r2
 80055f8:	4618      	mov	r0, r3
 80055fa:	f004 fc88 	bl	8009f0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	4413      	add	r3, r2
 8005606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800560a:	461a      	mov	r2, r3
 800560c:	2310      	movs	r3, #16
 800560e:	6093      	str	r3, [r2, #8]
}
 8005610:	bf00      	nop
 8005612:	3718      	adds	r7, #24
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b088      	sub	sp, #32
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	460b      	mov	r3, r1
 8005622:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800562e:	78fb      	ldrb	r3, [r7, #3]
 8005630:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	4413      	add	r3, r2
 800563a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	2b04      	cmp	r3, #4
 8005646:	d11a      	bne.n	800567e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	4413      	add	r3, r2
 8005650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005654:	461a      	mov	r2, r3
 8005656:	2304      	movs	r3, #4
 8005658:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	212c      	movs	r1, #44	; 0x2c
 8005660:	fb01 f303 	mul.w	r3, r1, r3
 8005664:	4413      	add	r3, r2
 8005666:	3361      	adds	r3, #97	; 0x61
 8005668:	2206      	movs	r2, #6
 800566a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	4611      	mov	r1, r2
 8005676:	4618      	mov	r0, r3
 8005678:	f004 fc49 	bl	8009f0e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800567c:	e331      	b.n	8005ce2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	015a      	lsls	r2, r3, #5
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	4413      	add	r3, r2
 8005686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f003 0320 	and.w	r3, r3, #32
 8005690:	2b20      	cmp	r3, #32
 8005692:	d12e      	bne.n	80056f2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	4413      	add	r3, r2
 800569c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a0:	461a      	mov	r2, r3
 80056a2:	2320      	movs	r3, #32
 80056a4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	212c      	movs	r1, #44	; 0x2c
 80056ac:	fb01 f303 	mul.w	r3, r1, r3
 80056b0:	4413      	add	r3, r2
 80056b2:	333d      	adds	r3, #61	; 0x3d
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	f040 8313 	bne.w	8005ce2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	212c      	movs	r1, #44	; 0x2c
 80056c2:	fb01 f303 	mul.w	r3, r1, r3
 80056c6:	4413      	add	r3, r2
 80056c8:	333d      	adds	r3, #61	; 0x3d
 80056ca:	2200      	movs	r2, #0
 80056cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	212c      	movs	r1, #44	; 0x2c
 80056d4:	fb01 f303 	mul.w	r3, r1, r3
 80056d8:	4413      	add	r3, r2
 80056da:	3360      	adds	r3, #96	; 0x60
 80056dc:	2202      	movs	r2, #2
 80056de:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	4611      	mov	r1, r2
 80056ea:	4618      	mov	r0, r3
 80056ec:	f004 fc0f 	bl	8009f0e <USB_HC_Halt>
}
 80056f0:	e2f7      	b.n	8005ce2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005708:	d112      	bne.n	8005730 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	4413      	add	r3, r2
 8005712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005716:	461a      	mov	r2, r3
 8005718:	f44f 7300 	mov.w	r3, #512	; 0x200
 800571c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	4611      	mov	r1, r2
 8005728:	4618      	mov	r0, r3
 800572a:	f004 fbf0 	bl	8009f0e <USB_HC_Halt>
}
 800572e:	e2d8      	b.n	8005ce2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	4413      	add	r3, r2
 8005738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b01      	cmp	r3, #1
 8005744:	d140      	bne.n	80057c8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	212c      	movs	r1, #44	; 0x2c
 800574c:	fb01 f303 	mul.w	r3, r1, r3
 8005750:	4413      	add	r3, r2
 8005752:	335c      	adds	r3, #92	; 0x5c
 8005754:	2200      	movs	r2, #0
 8005756:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	4413      	add	r3, r2
 8005760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576a:	2b40      	cmp	r3, #64	; 0x40
 800576c:	d111      	bne.n	8005792 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	212c      	movs	r1, #44	; 0x2c
 8005774:	fb01 f303 	mul.w	r3, r1, r3
 8005778:	4413      	add	r3, r2
 800577a:	333d      	adds	r3, #61	; 0x3d
 800577c:	2201      	movs	r2, #1
 800577e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	4413      	add	r3, r2
 8005788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800578c:	461a      	mov	r2, r3
 800578e:	2340      	movs	r3, #64	; 0x40
 8005790:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	4413      	add	r3, r2
 800579a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800579e:	461a      	mov	r2, r3
 80057a0:	2301      	movs	r3, #1
 80057a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	212c      	movs	r1, #44	; 0x2c
 80057aa:	fb01 f303 	mul.w	r3, r1, r3
 80057ae:	4413      	add	r3, r2
 80057b0:	3361      	adds	r3, #97	; 0x61
 80057b2:	2201      	movs	r2, #1
 80057b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	4611      	mov	r1, r2
 80057c0:	4618      	mov	r0, r3
 80057c2:	f004 fba4 	bl	8009f0e <USB_HC_Halt>
}
 80057c6:	e28c      	b.n	8005ce2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057da:	2b40      	cmp	r3, #64	; 0x40
 80057dc:	d12c      	bne.n	8005838 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	212c      	movs	r1, #44	; 0x2c
 80057e4:	fb01 f303 	mul.w	r3, r1, r3
 80057e8:	4413      	add	r3, r2
 80057ea:	3361      	adds	r3, #97	; 0x61
 80057ec:	2204      	movs	r2, #4
 80057ee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	212c      	movs	r1, #44	; 0x2c
 80057f6:	fb01 f303 	mul.w	r3, r1, r3
 80057fa:	4413      	add	r3, r2
 80057fc:	333d      	adds	r3, #61	; 0x3d
 80057fe:	2201      	movs	r2, #1
 8005800:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	212c      	movs	r1, #44	; 0x2c
 8005808:	fb01 f303 	mul.w	r3, r1, r3
 800580c:	4413      	add	r3, r2
 800580e:	335c      	adds	r3, #92	; 0x5c
 8005810:	2200      	movs	r2, #0
 8005812:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	b2d2      	uxtb	r2, r2
 800581c:	4611      	mov	r1, r2
 800581e:	4618      	mov	r0, r3
 8005820:	f004 fb75 	bl	8009f0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	4413      	add	r3, r2
 800582c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005830:	461a      	mov	r2, r3
 8005832:	2340      	movs	r3, #64	; 0x40
 8005834:	6093      	str	r3, [r2, #8]
}
 8005836:	e254      	b.n	8005ce2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	4413      	add	r3, r2
 8005840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f003 0308 	and.w	r3, r3, #8
 800584a:	2b08      	cmp	r3, #8
 800584c:	d11a      	bne.n	8005884 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	4413      	add	r3, r2
 8005856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800585a:	461a      	mov	r2, r3
 800585c:	2308      	movs	r3, #8
 800585e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	212c      	movs	r1, #44	; 0x2c
 8005866:	fb01 f303 	mul.w	r3, r1, r3
 800586a:	4413      	add	r3, r2
 800586c:	3361      	adds	r3, #97	; 0x61
 800586e:	2205      	movs	r2, #5
 8005870:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	b2d2      	uxtb	r2, r2
 800587a:	4611      	mov	r1, r2
 800587c:	4618      	mov	r0, r3
 800587e:	f004 fb46 	bl	8009f0e <USB_HC_Halt>
}
 8005882:	e22e      	b.n	8005ce2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	4413      	add	r3, r2
 800588c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f003 0310 	and.w	r3, r3, #16
 8005896:	2b10      	cmp	r3, #16
 8005898:	d140      	bne.n	800591c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	212c      	movs	r1, #44	; 0x2c
 80058a0:	fb01 f303 	mul.w	r3, r1, r3
 80058a4:	4413      	add	r3, r2
 80058a6:	335c      	adds	r3, #92	; 0x5c
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	212c      	movs	r1, #44	; 0x2c
 80058b2:	fb01 f303 	mul.w	r3, r1, r3
 80058b6:	4413      	add	r3, r2
 80058b8:	3361      	adds	r3, #97	; 0x61
 80058ba:	2203      	movs	r2, #3
 80058bc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	212c      	movs	r1, #44	; 0x2c
 80058c4:	fb01 f303 	mul.w	r3, r1, r3
 80058c8:	4413      	add	r3, r2
 80058ca:	333d      	adds	r3, #61	; 0x3d
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d112      	bne.n	80058f8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	212c      	movs	r1, #44	; 0x2c
 80058d8:	fb01 f303 	mul.w	r3, r1, r3
 80058dc:	4413      	add	r3, r2
 80058de:	333c      	adds	r3, #60	; 0x3c
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d108      	bne.n	80058f8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	212c      	movs	r1, #44	; 0x2c
 80058ec:	fb01 f303 	mul.w	r3, r1, r3
 80058f0:	4413      	add	r3, r2
 80058f2:	333d      	adds	r3, #61	; 0x3d
 80058f4:	2201      	movs	r2, #1
 80058f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	b2d2      	uxtb	r2, r2
 8005900:	4611      	mov	r1, r2
 8005902:	4618      	mov	r0, r3
 8005904:	f004 fb03 	bl	8009f0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	015a      	lsls	r2, r3, #5
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	4413      	add	r3, r2
 8005910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005914:	461a      	mov	r2, r3
 8005916:	2310      	movs	r3, #16
 8005918:	6093      	str	r3, [r2, #8]
}
 800591a:	e1e2      	b.n	8005ce2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	015a      	lsls	r2, r3, #5
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	4413      	add	r3, r2
 8005924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592e:	2b80      	cmp	r3, #128	; 0x80
 8005930:	d164      	bne.n	80059fc <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d111      	bne.n	800595e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	212c      	movs	r1, #44	; 0x2c
 8005940:	fb01 f303 	mul.w	r3, r1, r3
 8005944:	4413      	add	r3, r2
 8005946:	3361      	adds	r3, #97	; 0x61
 8005948:	2206      	movs	r2, #6
 800594a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	b2d2      	uxtb	r2, r2
 8005954:	4611      	mov	r1, r2
 8005956:	4618      	mov	r0, r3
 8005958:	f004 fad9 	bl	8009f0e <USB_HC_Halt>
 800595c:	e044      	b.n	80059e8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	212c      	movs	r1, #44	; 0x2c
 8005964:	fb01 f303 	mul.w	r3, r1, r3
 8005968:	4413      	add	r3, r2
 800596a:	335c      	adds	r3, #92	; 0x5c
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	1c5a      	adds	r2, r3, #1
 8005970:	6879      	ldr	r1, [r7, #4]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	202c      	movs	r0, #44	; 0x2c
 8005976:	fb00 f303 	mul.w	r3, r0, r3
 800597a:	440b      	add	r3, r1
 800597c:	335c      	adds	r3, #92	; 0x5c
 800597e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	212c      	movs	r1, #44	; 0x2c
 8005986:	fb01 f303 	mul.w	r3, r1, r3
 800598a:	4413      	add	r3, r2
 800598c:	335c      	adds	r3, #92	; 0x5c
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b02      	cmp	r3, #2
 8005992:	d920      	bls.n	80059d6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	212c      	movs	r1, #44	; 0x2c
 800599a:	fb01 f303 	mul.w	r3, r1, r3
 800599e:	4413      	add	r3, r2
 80059a0:	335c      	adds	r3, #92	; 0x5c
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	212c      	movs	r1, #44	; 0x2c
 80059ac:	fb01 f303 	mul.w	r3, r1, r3
 80059b0:	4413      	add	r3, r2
 80059b2:	3360      	adds	r3, #96	; 0x60
 80059b4:	2204      	movs	r2, #4
 80059b6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	b2d9      	uxtb	r1, r3
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	202c      	movs	r0, #44	; 0x2c
 80059c2:	fb00 f303 	mul.w	r3, r0, r3
 80059c6:	4413      	add	r3, r2
 80059c8:	3360      	adds	r3, #96	; 0x60
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	461a      	mov	r2, r3
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f00e fd50 	bl	8014474 <HAL_HCD_HC_NotifyURBChange_Callback>
 80059d4:	e008      	b.n	80059e8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	212c      	movs	r1, #44	; 0x2c
 80059dc:	fb01 f303 	mul.w	r3, r1, r3
 80059e0:	4413      	add	r3, r2
 80059e2:	3360      	adds	r3, #96	; 0x60
 80059e4:	2202      	movs	r2, #2
 80059e6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059f4:	461a      	mov	r2, r3
 80059f6:	2380      	movs	r3, #128	; 0x80
 80059f8:	6093      	str	r3, [r2, #8]
}
 80059fa:	e172      	b.n	8005ce2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a12:	d11b      	bne.n	8005a4c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	212c      	movs	r1, #44	; 0x2c
 8005a1a:	fb01 f303 	mul.w	r3, r1, r3
 8005a1e:	4413      	add	r3, r2
 8005a20:	3361      	adds	r3, #97	; 0x61
 8005a22:	2208      	movs	r2, #8
 8005a24:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	b2d2      	uxtb	r2, r2
 8005a2e:	4611      	mov	r1, r2
 8005a30:	4618      	mov	r0, r3
 8005a32:	f004 fa6c 	bl	8009f0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a42:	461a      	mov	r2, r3
 8005a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a48:	6093      	str	r3, [r2, #8]
}
 8005a4a:	e14a      	b.n	8005ce2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	015a      	lsls	r2, r3, #5
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	4413      	add	r3, r2
 8005a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	f040 813f 	bne.w	8005ce2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	212c      	movs	r1, #44	; 0x2c
 8005a6a:	fb01 f303 	mul.w	r3, r1, r3
 8005a6e:	4413      	add	r3, r2
 8005a70:	3361      	adds	r3, #97	; 0x61
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d17d      	bne.n	8005b74 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	212c      	movs	r1, #44	; 0x2c
 8005a7e:	fb01 f303 	mul.w	r3, r1, r3
 8005a82:	4413      	add	r3, r2
 8005a84:	3360      	adds	r3, #96	; 0x60
 8005a86:	2201      	movs	r2, #1
 8005a88:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	212c      	movs	r1, #44	; 0x2c
 8005a90:	fb01 f303 	mul.w	r3, r1, r3
 8005a94:	4413      	add	r3, r2
 8005a96:	333f      	adds	r3, #63	; 0x3f
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d00a      	beq.n	8005ab4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	212c      	movs	r1, #44	; 0x2c
 8005aa4:	fb01 f303 	mul.w	r3, r1, r3
 8005aa8:	4413      	add	r3, r2
 8005aaa:	333f      	adds	r3, #63	; 0x3f
 8005aac:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005aae:	2b03      	cmp	r3, #3
 8005ab0:	f040 8100 	bne.w	8005cb4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d113      	bne.n	8005ae4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	212c      	movs	r1, #44	; 0x2c
 8005ac2:	fb01 f303 	mul.w	r3, r1, r3
 8005ac6:	4413      	add	r3, r2
 8005ac8:	3355      	adds	r3, #85	; 0x55
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	f083 0301 	eor.w	r3, r3, #1
 8005ad0:	b2d8      	uxtb	r0, r3
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	212c      	movs	r1, #44	; 0x2c
 8005ad8:	fb01 f303 	mul.w	r3, r1, r3
 8005adc:	4413      	add	r3, r2
 8005ade:	3355      	adds	r3, #85	; 0x55
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	f040 80e3 	bne.w	8005cb4 <HCD_HC_OUT_IRQHandler+0x69c>
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	212c      	movs	r1, #44	; 0x2c
 8005af4:	fb01 f303 	mul.w	r3, r1, r3
 8005af8:	4413      	add	r3, r2
 8005afa:	334c      	adds	r3, #76	; 0x4c
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 80d8 	beq.w	8005cb4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	212c      	movs	r1, #44	; 0x2c
 8005b0a:	fb01 f303 	mul.w	r3, r1, r3
 8005b0e:	4413      	add	r3, r2
 8005b10:	334c      	adds	r3, #76	; 0x4c
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	202c      	movs	r0, #44	; 0x2c
 8005b1a:	fb00 f202 	mul.w	r2, r0, r2
 8005b1e:	440a      	add	r2, r1
 8005b20:	3240      	adds	r2, #64	; 0x40
 8005b22:	8812      	ldrh	r2, [r2, #0]
 8005b24:	4413      	add	r3, r2
 8005b26:	3b01      	subs	r3, #1
 8005b28:	6879      	ldr	r1, [r7, #4]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	202c      	movs	r0, #44	; 0x2c
 8005b2e:	fb00 f202 	mul.w	r2, r0, r2
 8005b32:	440a      	add	r2, r1
 8005b34:	3240      	adds	r2, #64	; 0x40
 8005b36:	8812      	ldrh	r2, [r2, #0]
 8005b38:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f000 80b5 	beq.w	8005cb4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	212c      	movs	r1, #44	; 0x2c
 8005b50:	fb01 f303 	mul.w	r3, r1, r3
 8005b54:	4413      	add	r3, r2
 8005b56:	3355      	adds	r3, #85	; 0x55
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	f083 0301 	eor.w	r3, r3, #1
 8005b5e:	b2d8      	uxtb	r0, r3
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	212c      	movs	r1, #44	; 0x2c
 8005b66:	fb01 f303 	mul.w	r3, r1, r3
 8005b6a:	4413      	add	r3, r2
 8005b6c:	3355      	adds	r3, #85	; 0x55
 8005b6e:	4602      	mov	r2, r0
 8005b70:	701a      	strb	r2, [r3, #0]
 8005b72:	e09f      	b.n	8005cb4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	212c      	movs	r1, #44	; 0x2c
 8005b7a:	fb01 f303 	mul.w	r3, r1, r3
 8005b7e:	4413      	add	r3, r2
 8005b80:	3361      	adds	r3, #97	; 0x61
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	2b03      	cmp	r3, #3
 8005b86:	d109      	bne.n	8005b9c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	212c      	movs	r1, #44	; 0x2c
 8005b8e:	fb01 f303 	mul.w	r3, r1, r3
 8005b92:	4413      	add	r3, r2
 8005b94:	3360      	adds	r3, #96	; 0x60
 8005b96:	2202      	movs	r2, #2
 8005b98:	701a      	strb	r2, [r3, #0]
 8005b9a:	e08b      	b.n	8005cb4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	212c      	movs	r1, #44	; 0x2c
 8005ba2:	fb01 f303 	mul.w	r3, r1, r3
 8005ba6:	4413      	add	r3, r2
 8005ba8:	3361      	adds	r3, #97	; 0x61
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	2b04      	cmp	r3, #4
 8005bae:	d109      	bne.n	8005bc4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	212c      	movs	r1, #44	; 0x2c
 8005bb6:	fb01 f303 	mul.w	r3, r1, r3
 8005bba:	4413      	add	r3, r2
 8005bbc:	3360      	adds	r3, #96	; 0x60
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	701a      	strb	r2, [r3, #0]
 8005bc2:	e077      	b.n	8005cb4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	212c      	movs	r1, #44	; 0x2c
 8005bca:	fb01 f303 	mul.w	r3, r1, r3
 8005bce:	4413      	add	r3, r2
 8005bd0:	3361      	adds	r3, #97	; 0x61
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	2b05      	cmp	r3, #5
 8005bd6:	d109      	bne.n	8005bec <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	212c      	movs	r1, #44	; 0x2c
 8005bde:	fb01 f303 	mul.w	r3, r1, r3
 8005be2:	4413      	add	r3, r2
 8005be4:	3360      	adds	r3, #96	; 0x60
 8005be6:	2205      	movs	r2, #5
 8005be8:	701a      	strb	r2, [r3, #0]
 8005bea:	e063      	b.n	8005cb4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	212c      	movs	r1, #44	; 0x2c
 8005bf2:	fb01 f303 	mul.w	r3, r1, r3
 8005bf6:	4413      	add	r3, r2
 8005bf8:	3361      	adds	r3, #97	; 0x61
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	2b06      	cmp	r3, #6
 8005bfe:	d009      	beq.n	8005c14 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	212c      	movs	r1, #44	; 0x2c
 8005c06:	fb01 f303 	mul.w	r3, r1, r3
 8005c0a:	4413      	add	r3, r2
 8005c0c:	3361      	adds	r3, #97	; 0x61
 8005c0e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	d14f      	bne.n	8005cb4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	212c      	movs	r1, #44	; 0x2c
 8005c1a:	fb01 f303 	mul.w	r3, r1, r3
 8005c1e:	4413      	add	r3, r2
 8005c20:	335c      	adds	r3, #92	; 0x5c
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	1c5a      	adds	r2, r3, #1
 8005c26:	6879      	ldr	r1, [r7, #4]
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	202c      	movs	r0, #44	; 0x2c
 8005c2c:	fb00 f303 	mul.w	r3, r0, r3
 8005c30:	440b      	add	r3, r1
 8005c32:	335c      	adds	r3, #92	; 0x5c
 8005c34:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	212c      	movs	r1, #44	; 0x2c
 8005c3c:	fb01 f303 	mul.w	r3, r1, r3
 8005c40:	4413      	add	r3, r2
 8005c42:	335c      	adds	r3, #92	; 0x5c
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d912      	bls.n	8005c70 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	212c      	movs	r1, #44	; 0x2c
 8005c50:	fb01 f303 	mul.w	r3, r1, r3
 8005c54:	4413      	add	r3, r2
 8005c56:	335c      	adds	r3, #92	; 0x5c
 8005c58:	2200      	movs	r2, #0
 8005c5a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	212c      	movs	r1, #44	; 0x2c
 8005c62:	fb01 f303 	mul.w	r3, r1, r3
 8005c66:	4413      	add	r3, r2
 8005c68:	3360      	adds	r3, #96	; 0x60
 8005c6a:	2204      	movs	r2, #4
 8005c6c:	701a      	strb	r2, [r3, #0]
 8005c6e:	e021      	b.n	8005cb4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	212c      	movs	r1, #44	; 0x2c
 8005c76:	fb01 f303 	mul.w	r3, r1, r3
 8005c7a:	4413      	add	r3, r2
 8005c7c:	3360      	adds	r3, #96	; 0x60
 8005c7e:	2202      	movs	r2, #2
 8005c80:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c98:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ca0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cae:	461a      	mov	r2, r3
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	b2d9      	uxtb	r1, r3
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	202c      	movs	r0, #44	; 0x2c
 8005cd0:	fb00 f303 	mul.w	r3, r0, r3
 8005cd4:	4413      	add	r3, r2
 8005cd6:	3360      	adds	r3, #96	; 0x60
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f00e fbc9 	bl	8014474 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005ce2:	bf00      	nop
 8005ce4:	3720      	adds	r7, #32
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b08a      	sub	sp, #40	; 0x28
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	0c5b      	lsrs	r3, r3, #17
 8005d10:	f003 030f 	and.w	r3, r3, #15
 8005d14:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	091b      	lsrs	r3, r3, #4
 8005d1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d1e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d004      	beq.n	8005d30 <HCD_RXQLVL_IRQHandler+0x46>
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2b05      	cmp	r3, #5
 8005d2a:	f000 80a9 	beq.w	8005e80 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005d2e:	e0aa      	b.n	8005e86 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f000 80a6 	beq.w	8005e84 <HCD_RXQLVL_IRQHandler+0x19a>
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	212c      	movs	r1, #44	; 0x2c
 8005d3e:	fb01 f303 	mul.w	r3, r1, r3
 8005d42:	4413      	add	r3, r2
 8005d44:	3344      	adds	r3, #68	; 0x44
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 809b 	beq.w	8005e84 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	212c      	movs	r1, #44	; 0x2c
 8005d54:	fb01 f303 	mul.w	r3, r1, r3
 8005d58:	4413      	add	r3, r2
 8005d5a:	3350      	adds	r3, #80	; 0x50
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	441a      	add	r2, r3
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	202c      	movs	r0, #44	; 0x2c
 8005d68:	fb00 f303 	mul.w	r3, r0, r3
 8005d6c:	440b      	add	r3, r1
 8005d6e:	334c      	adds	r3, #76	; 0x4c
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d87a      	bhi.n	8005e6c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6818      	ldr	r0, [r3, #0]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	212c      	movs	r1, #44	; 0x2c
 8005d80:	fb01 f303 	mul.w	r3, r1, r3
 8005d84:	4413      	add	r3, r2
 8005d86:	3344      	adds	r3, #68	; 0x44
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	b292      	uxth	r2, r2
 8005d8e:	4619      	mov	r1, r3
 8005d90:	f003 fc14 	bl	80095bc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	212c      	movs	r1, #44	; 0x2c
 8005d9a:	fb01 f303 	mul.w	r3, r1, r3
 8005d9e:	4413      	add	r3, r2
 8005da0:	3344      	adds	r3, #68	; 0x44
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	441a      	add	r2, r3
 8005da8:	6879      	ldr	r1, [r7, #4]
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	202c      	movs	r0, #44	; 0x2c
 8005dae:	fb00 f303 	mul.w	r3, r0, r3
 8005db2:	440b      	add	r3, r1
 8005db4:	3344      	adds	r3, #68	; 0x44
 8005db6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	212c      	movs	r1, #44	; 0x2c
 8005dbe:	fb01 f303 	mul.w	r3, r1, r3
 8005dc2:	4413      	add	r3, r2
 8005dc4:	3350      	adds	r3, #80	; 0x50
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	441a      	add	r2, r3
 8005dcc:	6879      	ldr	r1, [r7, #4]
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	202c      	movs	r0, #44	; 0x2c
 8005dd2:	fb00 f303 	mul.w	r3, r0, r3
 8005dd6:	440b      	add	r3, r1
 8005dd8:	3350      	adds	r3, #80	; 0x50
 8005dda:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	0cdb      	lsrs	r3, r3, #19
 8005dec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005df0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	212c      	movs	r1, #44	; 0x2c
 8005df8:	fb01 f303 	mul.w	r3, r1, r3
 8005dfc:	4413      	add	r3, r2
 8005dfe:	3340      	adds	r3, #64	; 0x40
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	461a      	mov	r2, r3
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d13c      	bne.n	8005e84 <HCD_RXQLVL_IRQHandler+0x19a>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d039      	beq.n	8005e84 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	6a3b      	ldr	r3, [r7, #32]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e26:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e2e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	212c      	movs	r1, #44	; 0x2c
 8005e48:	fb01 f303 	mul.w	r3, r1, r3
 8005e4c:	4413      	add	r3, r2
 8005e4e:	3354      	adds	r3, #84	; 0x54
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	f083 0301 	eor.w	r3, r3, #1
 8005e56:	b2d8      	uxtb	r0, r3
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	212c      	movs	r1, #44	; 0x2c
 8005e5e:	fb01 f303 	mul.w	r3, r1, r3
 8005e62:	4413      	add	r3, r2
 8005e64:	3354      	adds	r3, #84	; 0x54
 8005e66:	4602      	mov	r2, r0
 8005e68:	701a      	strb	r2, [r3, #0]
      break;
 8005e6a:	e00b      	b.n	8005e84 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	212c      	movs	r1, #44	; 0x2c
 8005e72:	fb01 f303 	mul.w	r3, r1, r3
 8005e76:	4413      	add	r3, r2
 8005e78:	3360      	adds	r3, #96	; 0x60
 8005e7a:	2204      	movs	r2, #4
 8005e7c:	701a      	strb	r2, [r3, #0]
      break;
 8005e7e:	e001      	b.n	8005e84 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005e80:	bf00      	nop
 8005e82:	e000      	b.n	8005e86 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005e84:	bf00      	nop
  }
}
 8005e86:	bf00      	nop
 8005e88:	3728      	adds	r7, #40	; 0x28
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b086      	sub	sp, #24
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005eba:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d10b      	bne.n	8005ede <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d102      	bne.n	8005ed6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f00e fab3 	bl	801443c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f043 0302 	orr.w	r3, r3, #2
 8005edc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f003 0308 	and.w	r3, r3, #8
 8005ee4:	2b08      	cmp	r3, #8
 8005ee6:	d132      	bne.n	8005f4e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f043 0308 	orr.w	r3, r3, #8
 8005eee:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f003 0304 	and.w	r3, r3, #4
 8005ef6:	2b04      	cmp	r3, #4
 8005ef8:	d126      	bne.n	8005f48 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d113      	bne.n	8005f2a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005f08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f0c:	d106      	bne.n	8005f1c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2102      	movs	r1, #2
 8005f14:	4618      	mov	r0, r3
 8005f16:	f003 fcbf 	bl	8009898 <USB_InitFSLSPClkSel>
 8005f1a:	e011      	b.n	8005f40 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2101      	movs	r1, #1
 8005f22:	4618      	mov	r0, r3
 8005f24:	f003 fcb8 	bl	8009898 <USB_InitFSLSPClkSel>
 8005f28:	e00a      	b.n	8005f40 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d106      	bne.n	8005f40 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f38:	461a      	mov	r2, r3
 8005f3a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005f3e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f00e faa9 	bl	8014498 <HAL_HCD_PortEnabled_Callback>
 8005f46:	e002      	b.n	8005f4e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f00e fab3 	bl	80144b4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f003 0320 	and.w	r3, r3, #32
 8005f54:	2b20      	cmp	r3, #32
 8005f56:	d103      	bne.n	8005f60 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f043 0320 	orr.w	r3, r3, #32
 8005f5e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f66:	461a      	mov	r2, r3
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	6013      	str	r3, [r2, #0]
}
 8005f6c:	bf00      	nop
 8005f6e:	3718      	adds	r7, #24
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e267      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d075      	beq.n	800607e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f92:	4b88      	ldr	r3, [pc, #544]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f003 030c 	and.w	r3, r3, #12
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d00c      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f9e:	4b85      	ldr	r3, [pc, #532]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fa6:	2b08      	cmp	r3, #8
 8005fa8:	d112      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005faa:	4b82      	ldr	r3, [pc, #520]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fb6:	d10b      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fb8:	4b7e      	ldr	r3, [pc, #504]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d05b      	beq.n	800607c <HAL_RCC_OscConfig+0x108>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d157      	bne.n	800607c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e242      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fd8:	d106      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x74>
 8005fda:	4b76      	ldr	r3, [pc, #472]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a75      	ldr	r2, [pc, #468]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8005fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fe4:	6013      	str	r3, [r2, #0]
 8005fe6:	e01d      	b.n	8006024 <HAL_RCC_OscConfig+0xb0>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ff0:	d10c      	bne.n	800600c <HAL_RCC_OscConfig+0x98>
 8005ff2:	4b70      	ldr	r3, [pc, #448]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a6f      	ldr	r2, [pc, #444]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8005ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ffc:	6013      	str	r3, [r2, #0]
 8005ffe:	4b6d      	ldr	r3, [pc, #436]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a6c      	ldr	r2, [pc, #432]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8006004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006008:	6013      	str	r3, [r2, #0]
 800600a:	e00b      	b.n	8006024 <HAL_RCC_OscConfig+0xb0>
 800600c:	4b69      	ldr	r3, [pc, #420]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a68      	ldr	r2, [pc, #416]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8006012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006016:	6013      	str	r3, [r2, #0]
 8006018:	4b66      	ldr	r3, [pc, #408]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a65      	ldr	r2, [pc, #404]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 800601e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d013      	beq.n	8006054 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800602c:	f7fd fa7c 	bl	8003528 <HAL_GetTick>
 8006030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006032:	e008      	b.n	8006046 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006034:	f7fd fa78 	bl	8003528 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b64      	cmp	r3, #100	; 0x64
 8006040:	d901      	bls.n	8006046 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e207      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006046:	4b5b      	ldr	r3, [pc, #364]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d0f0      	beq.n	8006034 <HAL_RCC_OscConfig+0xc0>
 8006052:	e014      	b.n	800607e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006054:	f7fd fa68 	bl	8003528 <HAL_GetTick>
 8006058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800605a:	e008      	b.n	800606e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800605c:	f7fd fa64 	bl	8003528 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b64      	cmp	r3, #100	; 0x64
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e1f3      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800606e:	4b51      	ldr	r3, [pc, #324]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1f0      	bne.n	800605c <HAL_RCC_OscConfig+0xe8>
 800607a:	e000      	b.n	800607e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800607c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d063      	beq.n	8006152 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800608a:	4b4a      	ldr	r3, [pc, #296]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f003 030c 	and.w	r3, r3, #12
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00b      	beq.n	80060ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006096:	4b47      	ldr	r3, [pc, #284]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800609e:	2b08      	cmp	r3, #8
 80060a0:	d11c      	bne.n	80060dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060a2:	4b44      	ldr	r3, [pc, #272]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d116      	bne.n	80060dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060ae:	4b41      	ldr	r3, [pc, #260]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0302 	and.w	r3, r3, #2
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d005      	beq.n	80060c6 <HAL_RCC_OscConfig+0x152>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d001      	beq.n	80060c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e1c7      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060c6:	4b3b      	ldr	r3, [pc, #236]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	00db      	lsls	r3, r3, #3
 80060d4:	4937      	ldr	r1, [pc, #220]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060da:	e03a      	b.n	8006152 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d020      	beq.n	8006126 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060e4:	4b34      	ldr	r3, [pc, #208]	; (80061b8 <HAL_RCC_OscConfig+0x244>)
 80060e6:	2201      	movs	r2, #1
 80060e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ea:	f7fd fa1d 	bl	8003528 <HAL_GetTick>
 80060ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060f0:	e008      	b.n	8006104 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060f2:	f7fd fa19 	bl	8003528 <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d901      	bls.n	8006104 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e1a8      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006104:	4b2b      	ldr	r3, [pc, #172]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	2b00      	cmp	r3, #0
 800610e:	d0f0      	beq.n	80060f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006110:	4b28      	ldr	r3, [pc, #160]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	00db      	lsls	r3, r3, #3
 800611e:	4925      	ldr	r1, [pc, #148]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8006120:	4313      	orrs	r3, r2
 8006122:	600b      	str	r3, [r1, #0]
 8006124:	e015      	b.n	8006152 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006126:	4b24      	ldr	r3, [pc, #144]	; (80061b8 <HAL_RCC_OscConfig+0x244>)
 8006128:	2200      	movs	r2, #0
 800612a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800612c:	f7fd f9fc 	bl	8003528 <HAL_GetTick>
 8006130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006132:	e008      	b.n	8006146 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006134:	f7fd f9f8 	bl	8003528 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e187      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006146:	4b1b      	ldr	r3, [pc, #108]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1f0      	bne.n	8006134 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0308 	and.w	r3, r3, #8
 800615a:	2b00      	cmp	r3, #0
 800615c:	d036      	beq.n	80061cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d016      	beq.n	8006194 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006166:	4b15      	ldr	r3, [pc, #84]	; (80061bc <HAL_RCC_OscConfig+0x248>)
 8006168:	2201      	movs	r2, #1
 800616a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800616c:	f7fd f9dc 	bl	8003528 <HAL_GetTick>
 8006170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006172:	e008      	b.n	8006186 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006174:	f7fd f9d8 	bl	8003528 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	2b02      	cmp	r3, #2
 8006180:	d901      	bls.n	8006186 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e167      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006186:	4b0b      	ldr	r3, [pc, #44]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8006188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d0f0      	beq.n	8006174 <HAL_RCC_OscConfig+0x200>
 8006192:	e01b      	b.n	80061cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006194:	4b09      	ldr	r3, [pc, #36]	; (80061bc <HAL_RCC_OscConfig+0x248>)
 8006196:	2200      	movs	r2, #0
 8006198:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800619a:	f7fd f9c5 	bl	8003528 <HAL_GetTick>
 800619e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061a0:	e00e      	b.n	80061c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061a2:	f7fd f9c1 	bl	8003528 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d907      	bls.n	80061c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e150      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
 80061b4:	40023800 	.word	0x40023800
 80061b8:	42470000 	.word	0x42470000
 80061bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061c0:	4b88      	ldr	r3, [pc, #544]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 80061c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1ea      	bne.n	80061a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0304 	and.w	r3, r3, #4
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 8097 	beq.w	8006308 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061da:	2300      	movs	r3, #0
 80061dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061de:	4b81      	ldr	r3, [pc, #516]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10f      	bne.n	800620a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061ea:	2300      	movs	r3, #0
 80061ec:	60bb      	str	r3, [r7, #8]
 80061ee:	4b7d      	ldr	r3, [pc, #500]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	4a7c      	ldr	r2, [pc, #496]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 80061f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061f8:	6413      	str	r3, [r2, #64]	; 0x40
 80061fa:	4b7a      	ldr	r3, [pc, #488]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 80061fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006202:	60bb      	str	r3, [r7, #8]
 8006204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006206:	2301      	movs	r3, #1
 8006208:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800620a:	4b77      	ldr	r3, [pc, #476]	; (80063e8 <HAL_RCC_OscConfig+0x474>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006212:	2b00      	cmp	r3, #0
 8006214:	d118      	bne.n	8006248 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006216:	4b74      	ldr	r3, [pc, #464]	; (80063e8 <HAL_RCC_OscConfig+0x474>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a73      	ldr	r2, [pc, #460]	; (80063e8 <HAL_RCC_OscConfig+0x474>)
 800621c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006222:	f7fd f981 	bl	8003528 <HAL_GetTick>
 8006226:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006228:	e008      	b.n	800623c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800622a:	f7fd f97d 	bl	8003528 <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	2b02      	cmp	r3, #2
 8006236:	d901      	bls.n	800623c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e10c      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800623c:	4b6a      	ldr	r3, [pc, #424]	; (80063e8 <HAL_RCC_OscConfig+0x474>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0f0      	beq.n	800622a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d106      	bne.n	800625e <HAL_RCC_OscConfig+0x2ea>
 8006250:	4b64      	ldr	r3, [pc, #400]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 8006252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006254:	4a63      	ldr	r2, [pc, #396]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 8006256:	f043 0301 	orr.w	r3, r3, #1
 800625a:	6713      	str	r3, [r2, #112]	; 0x70
 800625c:	e01c      	b.n	8006298 <HAL_RCC_OscConfig+0x324>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	2b05      	cmp	r3, #5
 8006264:	d10c      	bne.n	8006280 <HAL_RCC_OscConfig+0x30c>
 8006266:	4b5f      	ldr	r3, [pc, #380]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 8006268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800626a:	4a5e      	ldr	r2, [pc, #376]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 800626c:	f043 0304 	orr.w	r3, r3, #4
 8006270:	6713      	str	r3, [r2, #112]	; 0x70
 8006272:	4b5c      	ldr	r3, [pc, #368]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 8006274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006276:	4a5b      	ldr	r2, [pc, #364]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 8006278:	f043 0301 	orr.w	r3, r3, #1
 800627c:	6713      	str	r3, [r2, #112]	; 0x70
 800627e:	e00b      	b.n	8006298 <HAL_RCC_OscConfig+0x324>
 8006280:	4b58      	ldr	r3, [pc, #352]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 8006282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006284:	4a57      	ldr	r2, [pc, #348]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 8006286:	f023 0301 	bic.w	r3, r3, #1
 800628a:	6713      	str	r3, [r2, #112]	; 0x70
 800628c:	4b55      	ldr	r3, [pc, #340]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 800628e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006290:	4a54      	ldr	r2, [pc, #336]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 8006292:	f023 0304 	bic.w	r3, r3, #4
 8006296:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d015      	beq.n	80062cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062a0:	f7fd f942 	bl	8003528 <HAL_GetTick>
 80062a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062a6:	e00a      	b.n	80062be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062a8:	f7fd f93e 	bl	8003528 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d901      	bls.n	80062be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e0cb      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062be:	4b49      	ldr	r3, [pc, #292]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 80062c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d0ee      	beq.n	80062a8 <HAL_RCC_OscConfig+0x334>
 80062ca:	e014      	b.n	80062f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062cc:	f7fd f92c 	bl	8003528 <HAL_GetTick>
 80062d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062d2:	e00a      	b.n	80062ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062d4:	f7fd f928 	bl	8003528 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d901      	bls.n	80062ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e0b5      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062ea:	4b3e      	ldr	r3, [pc, #248]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 80062ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1ee      	bne.n	80062d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062f6:	7dfb      	ldrb	r3, [r7, #23]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d105      	bne.n	8006308 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062fc:	4b39      	ldr	r3, [pc, #228]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 80062fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006300:	4a38      	ldr	r2, [pc, #224]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 8006302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006306:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 80a1 	beq.w	8006454 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006312:	4b34      	ldr	r3, [pc, #208]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f003 030c 	and.w	r3, r3, #12
 800631a:	2b08      	cmp	r3, #8
 800631c:	d05c      	beq.n	80063d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	2b02      	cmp	r3, #2
 8006324:	d141      	bne.n	80063aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006326:	4b31      	ldr	r3, [pc, #196]	; (80063ec <HAL_RCC_OscConfig+0x478>)
 8006328:	2200      	movs	r2, #0
 800632a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800632c:	f7fd f8fc 	bl	8003528 <HAL_GetTick>
 8006330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006332:	e008      	b.n	8006346 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006334:	f7fd f8f8 	bl	8003528 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d901      	bls.n	8006346 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e087      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006346:	4b27      	ldr	r3, [pc, #156]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1f0      	bne.n	8006334 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	69da      	ldr	r2, [r3, #28]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	431a      	orrs	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	019b      	lsls	r3, r3, #6
 8006362:	431a      	orrs	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006368:	085b      	lsrs	r3, r3, #1
 800636a:	3b01      	subs	r3, #1
 800636c:	041b      	lsls	r3, r3, #16
 800636e:	431a      	orrs	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006374:	061b      	lsls	r3, r3, #24
 8006376:	491b      	ldr	r1, [pc, #108]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 8006378:	4313      	orrs	r3, r2
 800637a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800637c:	4b1b      	ldr	r3, [pc, #108]	; (80063ec <HAL_RCC_OscConfig+0x478>)
 800637e:	2201      	movs	r2, #1
 8006380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006382:	f7fd f8d1 	bl	8003528 <HAL_GetTick>
 8006386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006388:	e008      	b.n	800639c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800638a:	f7fd f8cd 	bl	8003528 <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	2b02      	cmp	r3, #2
 8006396:	d901      	bls.n	800639c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e05c      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800639c:	4b11      	ldr	r3, [pc, #68]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d0f0      	beq.n	800638a <HAL_RCC_OscConfig+0x416>
 80063a8:	e054      	b.n	8006454 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063aa:	4b10      	ldr	r3, [pc, #64]	; (80063ec <HAL_RCC_OscConfig+0x478>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063b0:	f7fd f8ba 	bl	8003528 <HAL_GetTick>
 80063b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063b6:	e008      	b.n	80063ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063b8:	f7fd f8b6 	bl	8003528 <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d901      	bls.n	80063ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e045      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ca:	4b06      	ldr	r3, [pc, #24]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1f0      	bne.n	80063b8 <HAL_RCC_OscConfig+0x444>
 80063d6:	e03d      	b.n	8006454 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d107      	bne.n	80063f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e038      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
 80063e4:	40023800 	.word	0x40023800
 80063e8:	40007000 	.word	0x40007000
 80063ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063f0:	4b1b      	ldr	r3, [pc, #108]	; (8006460 <HAL_RCC_OscConfig+0x4ec>)
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d028      	beq.n	8006450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006408:	429a      	cmp	r2, r3
 800640a:	d121      	bne.n	8006450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006416:	429a      	cmp	r2, r3
 8006418:	d11a      	bne.n	8006450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006420:	4013      	ands	r3, r2
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006426:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006428:	4293      	cmp	r3, r2
 800642a:	d111      	bne.n	8006450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006436:	085b      	lsrs	r3, r3, #1
 8006438:	3b01      	subs	r3, #1
 800643a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800643c:	429a      	cmp	r2, r3
 800643e:	d107      	bne.n	8006450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800644c:	429a      	cmp	r2, r3
 800644e:	d001      	beq.n	8006454 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e000      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3718      	adds	r7, #24
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	40023800 	.word	0x40023800

08006464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e0cc      	b.n	8006612 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006478:	4b68      	ldr	r3, [pc, #416]	; (800661c <HAL_RCC_ClockConfig+0x1b8>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0307 	and.w	r3, r3, #7
 8006480:	683a      	ldr	r2, [r7, #0]
 8006482:	429a      	cmp	r2, r3
 8006484:	d90c      	bls.n	80064a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006486:	4b65      	ldr	r3, [pc, #404]	; (800661c <HAL_RCC_ClockConfig+0x1b8>)
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	b2d2      	uxtb	r2, r2
 800648c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800648e:	4b63      	ldr	r3, [pc, #396]	; (800661c <HAL_RCC_ClockConfig+0x1b8>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0307 	and.w	r3, r3, #7
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	429a      	cmp	r2, r3
 800649a:	d001      	beq.n	80064a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e0b8      	b.n	8006612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d020      	beq.n	80064ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0304 	and.w	r3, r3, #4
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d005      	beq.n	80064c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064b8:	4b59      	ldr	r3, [pc, #356]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	4a58      	ldr	r2, [pc, #352]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 80064be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0308 	and.w	r3, r3, #8
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d005      	beq.n	80064dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064d0:	4b53      	ldr	r3, [pc, #332]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	4a52      	ldr	r2, [pc, #328]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 80064d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064dc:	4b50      	ldr	r3, [pc, #320]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	494d      	ldr	r1, [pc, #308]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d044      	beq.n	8006584 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d107      	bne.n	8006512 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006502:	4b47      	ldr	r3, [pc, #284]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d119      	bne.n	8006542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e07f      	b.n	8006612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	2b02      	cmp	r3, #2
 8006518:	d003      	beq.n	8006522 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800651e:	2b03      	cmp	r3, #3
 8006520:	d107      	bne.n	8006532 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006522:	4b3f      	ldr	r3, [pc, #252]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d109      	bne.n	8006542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e06f      	b.n	8006612 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006532:	4b3b      	ldr	r3, [pc, #236]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b00      	cmp	r3, #0
 800653c:	d101      	bne.n	8006542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e067      	b.n	8006612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006542:	4b37      	ldr	r3, [pc, #220]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f023 0203 	bic.w	r2, r3, #3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	4934      	ldr	r1, [pc, #208]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 8006550:	4313      	orrs	r3, r2
 8006552:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006554:	f7fc ffe8 	bl	8003528 <HAL_GetTick>
 8006558:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800655a:	e00a      	b.n	8006572 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800655c:	f7fc ffe4 	bl	8003528 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	f241 3288 	movw	r2, #5000	; 0x1388
 800656a:	4293      	cmp	r3, r2
 800656c:	d901      	bls.n	8006572 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e04f      	b.n	8006612 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006572:	4b2b      	ldr	r3, [pc, #172]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f003 020c 	and.w	r2, r3, #12
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	429a      	cmp	r2, r3
 8006582:	d1eb      	bne.n	800655c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006584:	4b25      	ldr	r3, [pc, #148]	; (800661c <HAL_RCC_ClockConfig+0x1b8>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0307 	and.w	r3, r3, #7
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	429a      	cmp	r2, r3
 8006590:	d20c      	bcs.n	80065ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006592:	4b22      	ldr	r3, [pc, #136]	; (800661c <HAL_RCC_ClockConfig+0x1b8>)
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	b2d2      	uxtb	r2, r2
 8006598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800659a:	4b20      	ldr	r3, [pc, #128]	; (800661c <HAL_RCC_ClockConfig+0x1b8>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0307 	and.w	r3, r3, #7
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d001      	beq.n	80065ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e032      	b.n	8006612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0304 	and.w	r3, r3, #4
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d008      	beq.n	80065ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065b8:	4b19      	ldr	r3, [pc, #100]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	4916      	ldr	r1, [pc, #88]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0308 	and.w	r3, r3, #8
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d009      	beq.n	80065ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065d6:	4b12      	ldr	r3, [pc, #72]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	00db      	lsls	r3, r3, #3
 80065e4:	490e      	ldr	r1, [pc, #56]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065ea:	f000 f821 	bl	8006630 <HAL_RCC_GetSysClockFreq>
 80065ee:	4602      	mov	r2, r0
 80065f0:	4b0b      	ldr	r3, [pc, #44]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	091b      	lsrs	r3, r3, #4
 80065f6:	f003 030f 	and.w	r3, r3, #15
 80065fa:	490a      	ldr	r1, [pc, #40]	; (8006624 <HAL_RCC_ClockConfig+0x1c0>)
 80065fc:	5ccb      	ldrb	r3, [r1, r3]
 80065fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006602:	4a09      	ldr	r2, [pc, #36]	; (8006628 <HAL_RCC_ClockConfig+0x1c4>)
 8006604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006606:	4b09      	ldr	r3, [pc, #36]	; (800662c <HAL_RCC_ClockConfig+0x1c8>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4618      	mov	r0, r3
 800660c:	f7fc fcd0 	bl	8002fb0 <HAL_InitTick>

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	40023c00 	.word	0x40023c00
 8006620:	40023800 	.word	0x40023800
 8006624:	080176f4 	.word	0x080176f4
 8006628:	20000234 	.word	0x20000234
 800662c:	20000238 	.word	0x20000238

08006630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006634:	b090      	sub	sp, #64	; 0x40
 8006636:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006638:	2300      	movs	r3, #0
 800663a:	637b      	str	r3, [r7, #52]	; 0x34
 800663c:	2300      	movs	r3, #0
 800663e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006640:	2300      	movs	r3, #0
 8006642:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006648:	4b59      	ldr	r3, [pc, #356]	; (80067b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f003 030c 	and.w	r3, r3, #12
 8006650:	2b08      	cmp	r3, #8
 8006652:	d00d      	beq.n	8006670 <HAL_RCC_GetSysClockFreq+0x40>
 8006654:	2b08      	cmp	r3, #8
 8006656:	f200 80a1 	bhi.w	800679c <HAL_RCC_GetSysClockFreq+0x16c>
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <HAL_RCC_GetSysClockFreq+0x34>
 800665e:	2b04      	cmp	r3, #4
 8006660:	d003      	beq.n	800666a <HAL_RCC_GetSysClockFreq+0x3a>
 8006662:	e09b      	b.n	800679c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006664:	4b53      	ldr	r3, [pc, #332]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006666:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006668:	e09b      	b.n	80067a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800666a:	4b53      	ldr	r3, [pc, #332]	; (80067b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800666c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800666e:	e098      	b.n	80067a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006670:	4b4f      	ldr	r3, [pc, #316]	; (80067b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006678:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800667a:	4b4d      	ldr	r3, [pc, #308]	; (80067b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d028      	beq.n	80066d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006686:	4b4a      	ldr	r3, [pc, #296]	; (80067b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	099b      	lsrs	r3, r3, #6
 800668c:	2200      	movs	r2, #0
 800668e:	623b      	str	r3, [r7, #32]
 8006690:	627a      	str	r2, [r7, #36]	; 0x24
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006698:	2100      	movs	r1, #0
 800669a:	4b47      	ldr	r3, [pc, #284]	; (80067b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800669c:	fb03 f201 	mul.w	r2, r3, r1
 80066a0:	2300      	movs	r3, #0
 80066a2:	fb00 f303 	mul.w	r3, r0, r3
 80066a6:	4413      	add	r3, r2
 80066a8:	4a43      	ldr	r2, [pc, #268]	; (80067b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80066aa:	fba0 1202 	umull	r1, r2, r0, r2
 80066ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066b0:	460a      	mov	r2, r1
 80066b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80066b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066b6:	4413      	add	r3, r2
 80066b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066bc:	2200      	movs	r2, #0
 80066be:	61bb      	str	r3, [r7, #24]
 80066c0:	61fa      	str	r2, [r7, #28]
 80066c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80066ca:	f7f9 fde9 	bl	80002a0 <__aeabi_uldivmod>
 80066ce:	4602      	mov	r2, r0
 80066d0:	460b      	mov	r3, r1
 80066d2:	4613      	mov	r3, r2
 80066d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066d6:	e053      	b.n	8006780 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066d8:	4b35      	ldr	r3, [pc, #212]	; (80067b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	099b      	lsrs	r3, r3, #6
 80066de:	2200      	movs	r2, #0
 80066e0:	613b      	str	r3, [r7, #16]
 80066e2:	617a      	str	r2, [r7, #20]
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80066ea:	f04f 0b00 	mov.w	fp, #0
 80066ee:	4652      	mov	r2, sl
 80066f0:	465b      	mov	r3, fp
 80066f2:	f04f 0000 	mov.w	r0, #0
 80066f6:	f04f 0100 	mov.w	r1, #0
 80066fa:	0159      	lsls	r1, r3, #5
 80066fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006700:	0150      	lsls	r0, r2, #5
 8006702:	4602      	mov	r2, r0
 8006704:	460b      	mov	r3, r1
 8006706:	ebb2 080a 	subs.w	r8, r2, sl
 800670a:	eb63 090b 	sbc.w	r9, r3, fp
 800670e:	f04f 0200 	mov.w	r2, #0
 8006712:	f04f 0300 	mov.w	r3, #0
 8006716:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800671a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800671e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006722:	ebb2 0408 	subs.w	r4, r2, r8
 8006726:	eb63 0509 	sbc.w	r5, r3, r9
 800672a:	f04f 0200 	mov.w	r2, #0
 800672e:	f04f 0300 	mov.w	r3, #0
 8006732:	00eb      	lsls	r3, r5, #3
 8006734:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006738:	00e2      	lsls	r2, r4, #3
 800673a:	4614      	mov	r4, r2
 800673c:	461d      	mov	r5, r3
 800673e:	eb14 030a 	adds.w	r3, r4, sl
 8006742:	603b      	str	r3, [r7, #0]
 8006744:	eb45 030b 	adc.w	r3, r5, fp
 8006748:	607b      	str	r3, [r7, #4]
 800674a:	f04f 0200 	mov.w	r2, #0
 800674e:	f04f 0300 	mov.w	r3, #0
 8006752:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006756:	4629      	mov	r1, r5
 8006758:	028b      	lsls	r3, r1, #10
 800675a:	4621      	mov	r1, r4
 800675c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006760:	4621      	mov	r1, r4
 8006762:	028a      	lsls	r2, r1, #10
 8006764:	4610      	mov	r0, r2
 8006766:	4619      	mov	r1, r3
 8006768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800676a:	2200      	movs	r2, #0
 800676c:	60bb      	str	r3, [r7, #8]
 800676e:	60fa      	str	r2, [r7, #12]
 8006770:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006774:	f7f9 fd94 	bl	80002a0 <__aeabi_uldivmod>
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	4613      	mov	r3, r2
 800677e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006780:	4b0b      	ldr	r3, [pc, #44]	; (80067b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	0c1b      	lsrs	r3, r3, #16
 8006786:	f003 0303 	and.w	r3, r3, #3
 800678a:	3301      	adds	r3, #1
 800678c:	005b      	lsls	r3, r3, #1
 800678e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006790:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006794:	fbb2 f3f3 	udiv	r3, r2, r3
 8006798:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800679a:	e002      	b.n	80067a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800679c:	4b05      	ldr	r3, [pc, #20]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800679e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80067a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3740      	adds	r7, #64	; 0x40
 80067a8:	46bd      	mov	sp, r7
 80067aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067ae:	bf00      	nop
 80067b0:	40023800 	.word	0x40023800
 80067b4:	00f42400 	.word	0x00f42400
 80067b8:	017d7840 	.word	0x017d7840

080067bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067bc:	b480      	push	{r7}
 80067be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067c0:	4b03      	ldr	r3, [pc, #12]	; (80067d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80067c2:	681b      	ldr	r3, [r3, #0]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	20000234 	.word	0x20000234

080067d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80067d8:	f7ff fff0 	bl	80067bc <HAL_RCC_GetHCLKFreq>
 80067dc:	4602      	mov	r2, r0
 80067de:	4b05      	ldr	r3, [pc, #20]	; (80067f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	0a9b      	lsrs	r3, r3, #10
 80067e4:	f003 0307 	and.w	r3, r3, #7
 80067e8:	4903      	ldr	r1, [pc, #12]	; (80067f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067ea:	5ccb      	ldrb	r3, [r1, r3]
 80067ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	40023800 	.word	0x40023800
 80067f8:	08017704 	.word	0x08017704

080067fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006800:	f7ff ffdc 	bl	80067bc <HAL_RCC_GetHCLKFreq>
 8006804:	4602      	mov	r2, r0
 8006806:	4b05      	ldr	r3, [pc, #20]	; (800681c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	0b5b      	lsrs	r3, r3, #13
 800680c:	f003 0307 	and.w	r3, r3, #7
 8006810:	4903      	ldr	r1, [pc, #12]	; (8006820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006812:	5ccb      	ldrb	r3, [r1, r3]
 8006814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006818:	4618      	mov	r0, r3
 800681a:	bd80      	pop	{r7, pc}
 800681c:	40023800 	.word	0x40023800
 8006820:	08017704 	.word	0x08017704

08006824 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	220f      	movs	r2, #15
 8006832:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006834:	4b12      	ldr	r3, [pc, #72]	; (8006880 <HAL_RCC_GetClockConfig+0x5c>)
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f003 0203 	and.w	r2, r3, #3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006840:	4b0f      	ldr	r3, [pc, #60]	; (8006880 <HAL_RCC_GetClockConfig+0x5c>)
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800684c:	4b0c      	ldr	r3, [pc, #48]	; (8006880 <HAL_RCC_GetClockConfig+0x5c>)
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006858:	4b09      	ldr	r3, [pc, #36]	; (8006880 <HAL_RCC_GetClockConfig+0x5c>)
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	08db      	lsrs	r3, r3, #3
 800685e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006866:	4b07      	ldr	r3, [pc, #28]	; (8006884 <HAL_RCC_GetClockConfig+0x60>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0207 	and.w	r2, r3, #7
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	601a      	str	r2, [r3, #0]
}
 8006872:	bf00      	nop
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	40023800 	.word	0x40023800
 8006884:	40023c00 	.word	0x40023c00

08006888 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006890:	2300      	movs	r3, #0
 8006892:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006894:	2300      	movs	r3, #0
 8006896:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d105      	bne.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d035      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80068b0:	4b62      	ldr	r3, [pc, #392]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068b6:	f7fc fe37 	bl	8003528 <HAL_GetTick>
 80068ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068bc:	e008      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80068be:	f7fc fe33 	bl	8003528 <HAL_GetTick>
 80068c2:	4602      	mov	r2, r0
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d901      	bls.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e0b0      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068d0:	4b5b      	ldr	r3, [pc, #364]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1f0      	bne.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	019a      	lsls	r2, r3, #6
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	071b      	lsls	r3, r3, #28
 80068e8:	4955      	ldr	r1, [pc, #340]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80068f0:	4b52      	ldr	r3, [pc, #328]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80068f2:	2201      	movs	r2, #1
 80068f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068f6:	f7fc fe17 	bl	8003528 <HAL_GetTick>
 80068fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80068fc:	e008      	b.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80068fe:	f7fc fe13 	bl	8003528 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	2b02      	cmp	r3, #2
 800690a:	d901      	bls.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e090      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006910:	4b4b      	ldr	r3, [pc, #300]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d0f0      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0302 	and.w	r3, r3, #2
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 8083 	beq.w	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800692a:	2300      	movs	r3, #0
 800692c:	60fb      	str	r3, [r7, #12]
 800692e:	4b44      	ldr	r3, [pc, #272]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006932:	4a43      	ldr	r2, [pc, #268]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006938:	6413      	str	r3, [r2, #64]	; 0x40
 800693a:	4b41      	ldr	r3, [pc, #260]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800693c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006946:	4b3f      	ldr	r3, [pc, #252]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a3e      	ldr	r2, [pc, #248]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800694c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006950:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006952:	f7fc fde9 	bl	8003528 <HAL_GetTick>
 8006956:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006958:	e008      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800695a:	f7fc fde5 	bl	8003528 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	2b02      	cmp	r3, #2
 8006966:	d901      	bls.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e062      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800696c:	4b35      	ldr	r3, [pc, #212]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006974:	2b00      	cmp	r3, #0
 8006976:	d0f0      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006978:	4b31      	ldr	r3, [pc, #196]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800697a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006980:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d02f      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	429a      	cmp	r2, r3
 8006994:	d028      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006996:	4b2a      	ldr	r3, [pc, #168]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800699e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80069a0:	4b29      	ldr	r3, [pc, #164]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80069a2:	2201      	movs	r2, #1
 80069a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069a6:	4b28      	ldr	r3, [pc, #160]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80069ac:	4a24      	ldr	r2, [pc, #144]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80069b2:	4b23      	ldr	r3, [pc, #140]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d114      	bne.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80069be:	f7fc fdb3 	bl	8003528 <HAL_GetTick>
 80069c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069c4:	e00a      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069c6:	f7fc fdaf 	bl	8003528 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d901      	bls.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e02a      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069dc:	4b18      	ldr	r3, [pc, #96]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e0:	f003 0302 	and.w	r3, r3, #2
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d0ee      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069f4:	d10d      	bne.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80069f6:	4b12      	ldr	r3, [pc, #72]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a0a:	490d      	ldr	r1, [pc, #52]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	608b      	str	r3, [r1, #8]
 8006a10:	e005      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006a12:	4b0b      	ldr	r3, [pc, #44]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	4a0a      	ldr	r2, [pc, #40]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a18:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006a1c:	6093      	str	r3, [r2, #8]
 8006a1e:	4b08      	ldr	r3, [pc, #32]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a2a:	4905      	ldr	r1, [pc, #20]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3718      	adds	r7, #24
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	42470068 	.word	0x42470068
 8006a40:	40023800 	.word	0x40023800
 8006a44:	40007000 	.word	0x40007000
 8006a48:	42470e40 	.word	0x42470e40

08006a4c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e066      	b.n	8006b30 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	7f5b      	ldrb	r3, [r3, #29]
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d105      	bne.n	8006a78 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7fc f97a 	bl	8002d6c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	22ca      	movs	r2, #202	; 0xca
 8006a84:	625a      	str	r2, [r3, #36]	; 0x24
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2253      	movs	r2, #83	; 0x53
 8006a8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fa45 	bl	8006f1e <RTC_EnterInitMode>
 8006a94:	4603      	mov	r3, r0
 8006a96:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006a98:	7bfb      	ldrb	r3, [r7, #15]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d12c      	bne.n	8006af8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	6812      	ldr	r2, [r2, #0]
 8006aa8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006aac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ab0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6899      	ldr	r1, [r3, #8]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	431a      	orrs	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	430a      	orrs	r2, r1
 8006ace:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	68d2      	ldr	r2, [r2, #12]
 8006ad8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6919      	ldr	r1, [r3, #16]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	041a      	lsls	r2, r3, #16
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	430a      	orrs	r2, r1
 8006aec:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fa4c 	bl	8006f8c <RTC_ExitInitMode>
 8006af4:	4603      	mov	r3, r0
 8006af6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d113      	bne.n	8006b26 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006b0c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	699a      	ldr	r2, [r3, #24]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	22ff      	movs	r2, #255	; 0xff
 8006b2c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8006b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006b38:	b590      	push	{r4, r7, lr}
 8006b3a:	b087      	sub	sp, #28
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006b44:	2300      	movs	r3, #0
 8006b46:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	7f1b      	ldrb	r3, [r3, #28]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d101      	bne.n	8006b54 <HAL_RTC_SetTime+0x1c>
 8006b50:	2302      	movs	r3, #2
 8006b52:	e087      	b.n	8006c64 <HAL_RTC_SetTime+0x12c>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2201      	movs	r2, #1
 8006b58:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d126      	bne.n	8006bb4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d102      	bne.n	8006b7a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	2200      	movs	r2, #0
 8006b78:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f000 fa29 	bl	8006fd6 <RTC_ByteToBcd2>
 8006b84:	4603      	mov	r3, r0
 8006b86:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	785b      	ldrb	r3, [r3, #1]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 fa22 	bl	8006fd6 <RTC_ByteToBcd2>
 8006b92:	4603      	mov	r3, r0
 8006b94:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006b96:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	789b      	ldrb	r3, [r3, #2]
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f000 fa1a 	bl	8006fd6 <RTC_ByteToBcd2>
 8006ba2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006ba4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	78db      	ldrb	r3, [r3, #3]
 8006bac:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	617b      	str	r3, [r7, #20]
 8006bb2:	e018      	b.n	8006be6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d102      	bne.n	8006bc8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	785b      	ldrb	r3, [r3, #1]
 8006bd2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006bd4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006bda:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	78db      	ldrb	r3, [r3, #3]
 8006be0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006be2:	4313      	orrs	r3, r2
 8006be4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	22ca      	movs	r2, #202	; 0xca
 8006bec:	625a      	str	r2, [r3, #36]	; 0x24
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2253      	movs	r2, #83	; 0x53
 8006bf4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f000 f991 	bl	8006f1e <RTC_EnterInitMode>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006c00:	7cfb      	ldrb	r3, [r7, #19]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d120      	bne.n	8006c48 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006c10:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006c14:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	689a      	ldr	r2, [r3, #8]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c24:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	6899      	ldr	r1, [r3, #8]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	68da      	ldr	r2, [r3, #12]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	431a      	orrs	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f000 f9a4 	bl	8006f8c <RTC_ExitInitMode>
 8006c44:	4603      	mov	r3, r0
 8006c46:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006c48:	7cfb      	ldrb	r3, [r7, #19]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d102      	bne.n	8006c54 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2201      	movs	r2, #1
 8006c52:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	22ff      	movs	r2, #255	; 0xff
 8006c5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	771a      	strb	r2, [r3, #28]

  return status;
 8006c62:	7cfb      	ldrb	r3, [r7, #19]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	371c      	adds	r7, #28
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd90      	pop	{r4, r7, pc}

08006c6c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b086      	sub	sp, #24
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006c9e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006ca2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	0c1b      	lsrs	r3, r3, #16
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cae:	b2da      	uxtb	r2, r3
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	0a1b      	lsrs	r3, r3, #8
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cbe:	b2da      	uxtb	r2, r3
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	0d9b      	lsrs	r3, r3, #22
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d11a      	bne.n	8006d1e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	4618      	mov	r0, r3
 8006cee:	f000 f98f 	bl	8007010 <RTC_Bcd2ToByte>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	785b      	ldrb	r3, [r3, #1]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 f986 	bl	8007010 <RTC_Bcd2ToByte>
 8006d04:	4603      	mov	r3, r0
 8006d06:	461a      	mov	r2, r3
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	789b      	ldrb	r3, [r3, #2]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f000 f97d 	bl	8007010 <RTC_Bcd2ToByte>
 8006d16:	4603      	mov	r3, r0
 8006d18:	461a      	mov	r2, r3
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3718      	adds	r7, #24
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006d28:	b590      	push	{r4, r7, lr}
 8006d2a:	b087      	sub	sp, #28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006d34:	2300      	movs	r3, #0
 8006d36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	7f1b      	ldrb	r3, [r3, #28]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d101      	bne.n	8006d44 <HAL_RTC_SetDate+0x1c>
 8006d40:	2302      	movs	r3, #2
 8006d42:	e071      	b.n	8006e28 <HAL_RTC_SetDate+0x100>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2201      	movs	r2, #1
 8006d48:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10e      	bne.n	8006d74 <HAL_RTC_SetDate+0x4c>
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	785b      	ldrb	r3, [r3, #1]
 8006d5a:	f003 0310 	and.w	r3, r3, #16
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d008      	beq.n	8006d74 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	785b      	ldrb	r3, [r3, #1]
 8006d66:	f023 0310 	bic.w	r3, r3, #16
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	330a      	adds	r3, #10
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d11c      	bne.n	8006db4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	78db      	ldrb	r3, [r3, #3]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 f929 	bl	8006fd6 <RTC_ByteToBcd2>
 8006d84:	4603      	mov	r3, r0
 8006d86:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	785b      	ldrb	r3, [r3, #1]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f000 f922 	bl	8006fd6 <RTC_ByteToBcd2>
 8006d92:	4603      	mov	r3, r0
 8006d94:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006d96:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	789b      	ldrb	r3, [r3, #2]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 f91a 	bl	8006fd6 <RTC_ByteToBcd2>
 8006da2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006da4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006dae:	4313      	orrs	r3, r2
 8006db0:	617b      	str	r3, [r7, #20]
 8006db2:	e00e      	b.n	8006dd2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	78db      	ldrb	r3, [r3, #3]
 8006db8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	785b      	ldrb	r3, [r3, #1]
 8006dbe:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006dc0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006dc6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	22ca      	movs	r2, #202	; 0xca
 8006dd8:	625a      	str	r2, [r3, #36]	; 0x24
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2253      	movs	r2, #83	; 0x53
 8006de0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f000 f89b 	bl	8006f1e <RTC_EnterInitMode>
 8006de8:	4603      	mov	r3, r0
 8006dea:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006dec:	7cfb      	ldrb	r3, [r7, #19]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10c      	bne.n	8006e0c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006dfc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006e00:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f000 f8c2 	bl	8006f8c <RTC_ExitInitMode>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006e0c:	7cfb      	ldrb	r3, [r7, #19]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d102      	bne.n	8006e18 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2201      	movs	r2, #1
 8006e16:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	22ff      	movs	r2, #255	; 0xff
 8006e1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	771a      	strb	r2, [r3, #28]

  return status;
 8006e26:	7cfb      	ldrb	r3, [r7, #19]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	371c      	adds	r7, #28
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd90      	pop	{r4, r7, pc}

08006e30 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e4a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006e4e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	0c1b      	lsrs	r3, r3, #16
 8006e54:	b2da      	uxtb	r2, r3
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	0a1b      	lsrs	r3, r3, #8
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	f003 031f 	and.w	r3, r3, #31
 8006e64:	b2da      	uxtb	r2, r3
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	0b5b      	lsrs	r3, r3, #13
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	f003 0307 	and.w	r3, r3, #7
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d11a      	bne.n	8006ec4 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	78db      	ldrb	r3, [r3, #3]
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 f8bc 	bl	8007010 <RTC_Bcd2ToByte>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	785b      	ldrb	r3, [r3, #1]
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f000 f8b3 	bl	8007010 <RTC_Bcd2ToByte>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	461a      	mov	r2, r3
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	789b      	ldrb	r3, [r3, #2]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f000 f8aa 	bl	8007010 <RTC_Bcd2ToByte>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3718      	adds	r7, #24
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b084      	sub	sp, #16
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68da      	ldr	r2, [r3, #12]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ee8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006eea:	f7fc fb1d 	bl	8003528 <HAL_GetTick>
 8006eee:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006ef0:	e009      	b.n	8006f06 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ef2:	f7fc fb19 	bl	8003528 <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f00:	d901      	bls.n	8006f06 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e007      	b.n	8006f16 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	f003 0320 	and.w	r3, r3, #32
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d0ee      	beq.n	8006ef2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b084      	sub	sp, #16
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f26:	2300      	movs	r3, #0
 8006f28:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d122      	bne.n	8006f82 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68da      	ldr	r2, [r3, #12]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006f4a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006f4c:	f7fc faec 	bl	8003528 <HAL_GetTick>
 8006f50:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006f52:	e00c      	b.n	8006f6e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006f54:	f7fc fae8 	bl	8003528 <HAL_GetTick>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f62:	d904      	bls.n	8006f6e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2204      	movs	r2, #4
 8006f68:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d102      	bne.n	8006f82 <RTC_EnterInitMode+0x64>
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d1e8      	bne.n	8006f54 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f94:	2300      	movs	r3, #0
 8006f96:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68da      	ldr	r2, [r3, #12]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fa6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f003 0320 	and.w	r3, r3, #32
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10a      	bne.n	8006fcc <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f7ff ff89 	bl	8006ece <HAL_RTC_WaitForSynchro>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d004      	beq.n	8006fcc <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2204      	movs	r2, #4
 8006fc6:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b085      	sub	sp, #20
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	4603      	mov	r3, r0
 8006fde:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006fe4:	e005      	b.n	8006ff2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006fe6:	7bfb      	ldrb	r3, [r7, #15]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006fec:	79fb      	ldrb	r3, [r7, #7]
 8006fee:	3b0a      	subs	r3, #10
 8006ff0:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006ff2:	79fb      	ldrb	r3, [r7, #7]
 8006ff4:	2b09      	cmp	r3, #9
 8006ff6:	d8f6      	bhi.n	8006fe6 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006ff8:	7bfb      	ldrb	r3, [r7, #15]
 8006ffa:	011b      	lsls	r3, r3, #4
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	79fb      	ldrb	r3, [r7, #7]
 8007000:	4313      	orrs	r3, r2
 8007002:	b2db      	uxtb	r3, r3
}
 8007004:	4618      	mov	r0, r3
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	4603      	mov	r3, r0
 8007018:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800701a:	2300      	movs	r3, #0
 800701c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800701e:	79fb      	ldrb	r3, [r7, #7]
 8007020:	091b      	lsrs	r3, r3, #4
 8007022:	b2db      	uxtb	r3, r3
 8007024:	461a      	mov	r2, r3
 8007026:	0092      	lsls	r2, r2, #2
 8007028:	4413      	add	r3, r2
 800702a:	005b      	lsls	r3, r3, #1
 800702c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800702e:	79fb      	ldrb	r3, [r7, #7]
 8007030:	f003 030f 	and.w	r3, r3, #15
 8007034:	b2da      	uxtb	r2, r3
 8007036:	7bfb      	ldrb	r3, [r7, #15]
 8007038:	4413      	add	r3, r2
 800703a:	b2db      	uxtb	r3, r3
}
 800703c:	4618      	mov	r0, r3
 800703e:	3714      	adds	r7, #20
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d101      	bne.n	800705a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e07b      	b.n	8007152 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705e:	2b00      	cmp	r3, #0
 8007060:	d108      	bne.n	8007074 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800706a:	d009      	beq.n	8007080 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	61da      	str	r2, [r3, #28]
 8007072:	e005      	b.n	8007080 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d106      	bne.n	80070a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f7fb fe90 	bl	8002dc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2202      	movs	r2, #2
 80070a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80070c8:	431a      	orrs	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070d2:	431a      	orrs	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	f003 0302 	and.w	r3, r3, #2
 80070dc:	431a      	orrs	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	695b      	ldr	r3, [r3, #20]
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	431a      	orrs	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070f0:	431a      	orrs	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070fa:	431a      	orrs	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a1b      	ldr	r3, [r3, #32]
 8007100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007104:	ea42 0103 	orr.w	r1, r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	430a      	orrs	r2, r1
 8007116:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	0c1b      	lsrs	r3, r3, #16
 800711e:	f003 0104 	and.w	r1, r3, #4
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007126:	f003 0210 	and.w	r2, r3, #16
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	430a      	orrs	r2, r1
 8007130:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	69da      	ldr	r2, [r3, #28]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007140:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b08c      	sub	sp, #48	; 0x30
 800715e:	af00      	add	r7, sp, #0
 8007160:	60f8      	str	r0, [r7, #12]
 8007162:	60b9      	str	r1, [r7, #8]
 8007164:	607a      	str	r2, [r7, #4]
 8007166:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007168:	2301      	movs	r3, #1
 800716a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800716c:	2300      	movs	r3, #0
 800716e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007178:	2b01      	cmp	r3, #1
 800717a:	d101      	bne.n	8007180 <HAL_SPI_TransmitReceive+0x26>
 800717c:	2302      	movs	r3, #2
 800717e:	e18a      	b.n	8007496 <HAL_SPI_TransmitReceive+0x33c>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007188:	f7fc f9ce 	bl	8003528 <HAL_GetTick>
 800718c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007194:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800719e:	887b      	ldrh	r3, [r7, #2]
 80071a0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80071a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d00f      	beq.n	80071ca <HAL_SPI_TransmitReceive+0x70>
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071b0:	d107      	bne.n	80071c2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d103      	bne.n	80071c2 <HAL_SPI_TransmitReceive+0x68>
 80071ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071be:	2b04      	cmp	r3, #4
 80071c0:	d003      	beq.n	80071ca <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80071c2:	2302      	movs	r3, #2
 80071c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80071c8:	e15b      	b.n	8007482 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d005      	beq.n	80071dc <HAL_SPI_TransmitReceive+0x82>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d002      	beq.n	80071dc <HAL_SPI_TransmitReceive+0x82>
 80071d6:	887b      	ldrh	r3, [r7, #2]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d103      	bne.n	80071e4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80071e2:	e14e      	b.n	8007482 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b04      	cmp	r3, #4
 80071ee:	d003      	beq.n	80071f8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2205      	movs	r2, #5
 80071f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	887a      	ldrh	r2, [r7, #2]
 8007208:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	887a      	ldrh	r2, [r7, #2]
 800720e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	68ba      	ldr	r2, [r7, #8]
 8007214:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	887a      	ldrh	r2, [r7, #2]
 800721a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	887a      	ldrh	r2, [r7, #2]
 8007220:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007238:	2b40      	cmp	r3, #64	; 0x40
 800723a:	d007      	beq.n	800724c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800724a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007254:	d178      	bne.n	8007348 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d002      	beq.n	8007264 <HAL_SPI_TransmitReceive+0x10a>
 800725e:	8b7b      	ldrh	r3, [r7, #26]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d166      	bne.n	8007332 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007268:	881a      	ldrh	r2, [r3, #0]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007274:	1c9a      	adds	r2, r3, #2
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800727e:	b29b      	uxth	r3, r3
 8007280:	3b01      	subs	r3, #1
 8007282:	b29a      	uxth	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007288:	e053      	b.n	8007332 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f003 0302 	and.w	r3, r3, #2
 8007294:	2b02      	cmp	r3, #2
 8007296:	d11b      	bne.n	80072d0 <HAL_SPI_TransmitReceive+0x176>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800729c:	b29b      	uxth	r3, r3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d016      	beq.n	80072d0 <HAL_SPI_TransmitReceive+0x176>
 80072a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d113      	bne.n	80072d0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ac:	881a      	ldrh	r2, [r3, #0]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b8:	1c9a      	adds	r2, r3, #2
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	3b01      	subs	r3, #1
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072cc:	2300      	movs	r3, #0
 80072ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f003 0301 	and.w	r3, r3, #1
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d119      	bne.n	8007312 <HAL_SPI_TransmitReceive+0x1b8>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d014      	beq.n	8007312 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68da      	ldr	r2, [r3, #12]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f2:	b292      	uxth	r2, r2
 80072f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fa:	1c9a      	adds	r2, r3, #2
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007304:	b29b      	uxth	r3, r3
 8007306:	3b01      	subs	r3, #1
 8007308:	b29a      	uxth	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800730e:	2301      	movs	r3, #1
 8007310:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007312:	f7fc f909 	bl	8003528 <HAL_GetTick>
 8007316:	4602      	mov	r2, r0
 8007318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800731e:	429a      	cmp	r2, r3
 8007320:	d807      	bhi.n	8007332 <HAL_SPI_TransmitReceive+0x1d8>
 8007322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007328:	d003      	beq.n	8007332 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800732a:	2303      	movs	r3, #3
 800732c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007330:	e0a7      	b.n	8007482 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007336:	b29b      	uxth	r3, r3
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1a6      	bne.n	800728a <HAL_SPI_TransmitReceive+0x130>
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007340:	b29b      	uxth	r3, r3
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1a1      	bne.n	800728a <HAL_SPI_TransmitReceive+0x130>
 8007346:	e07c      	b.n	8007442 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d002      	beq.n	8007356 <HAL_SPI_TransmitReceive+0x1fc>
 8007350:	8b7b      	ldrh	r3, [r7, #26]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d16b      	bne.n	800742e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	330c      	adds	r3, #12
 8007360:	7812      	ldrb	r2, [r2, #0]
 8007362:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007368:	1c5a      	adds	r2, r3, #1
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007372:	b29b      	uxth	r3, r3
 8007374:	3b01      	subs	r3, #1
 8007376:	b29a      	uxth	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800737c:	e057      	b.n	800742e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	f003 0302 	and.w	r3, r3, #2
 8007388:	2b02      	cmp	r3, #2
 800738a:	d11c      	bne.n	80073c6 <HAL_SPI_TransmitReceive+0x26c>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007390:	b29b      	uxth	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	d017      	beq.n	80073c6 <HAL_SPI_TransmitReceive+0x26c>
 8007396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007398:	2b01      	cmp	r3, #1
 800739a:	d114      	bne.n	80073c6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	330c      	adds	r3, #12
 80073a6:	7812      	ldrb	r2, [r2, #0]
 80073a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ae:	1c5a      	adds	r2, r3, #1
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	3b01      	subs	r3, #1
 80073bc:	b29a      	uxth	r2, r3
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073c2:	2300      	movs	r3, #0
 80073c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d119      	bne.n	8007408 <HAL_SPI_TransmitReceive+0x2ae>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073d8:	b29b      	uxth	r3, r3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d014      	beq.n	8007408 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68da      	ldr	r2, [r3, #12]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e8:	b2d2      	uxtb	r2, r2
 80073ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f0:	1c5a      	adds	r2, r3, #1
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	3b01      	subs	r3, #1
 80073fe:	b29a      	uxth	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007404:	2301      	movs	r3, #1
 8007406:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007408:	f7fc f88e 	bl	8003528 <HAL_GetTick>
 800740c:	4602      	mov	r2, r0
 800740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007414:	429a      	cmp	r2, r3
 8007416:	d803      	bhi.n	8007420 <HAL_SPI_TransmitReceive+0x2c6>
 8007418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741e:	d102      	bne.n	8007426 <HAL_SPI_TransmitReceive+0x2cc>
 8007420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007422:	2b00      	cmp	r3, #0
 8007424:	d103      	bne.n	800742e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800742c:	e029      	b.n	8007482 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007432:	b29b      	uxth	r3, r3
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1a2      	bne.n	800737e <HAL_SPI_TransmitReceive+0x224>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800743c:	b29b      	uxth	r3, r3
 800743e:	2b00      	cmp	r3, #0
 8007440:	d19d      	bne.n	800737e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007444:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f000 f9d0 	bl	80077ec <SPI_EndRxTxTransaction>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d006      	beq.n	8007460 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2220      	movs	r2, #32
 800745c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800745e:	e010      	b.n	8007482 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10b      	bne.n	8007480 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007468:	2300      	movs	r3, #0
 800746a:	617b      	str	r3, [r7, #20]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	617b      	str	r3, [r7, #20]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	617b      	str	r3, [r7, #20]
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	e000      	b.n	8007482 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007480:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007492:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007496:	4618      	mov	r0, r3
 8007498:	3730      	adds	r7, #48	; 0x30
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
	...

080074a0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b088      	sub	sp, #32
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	099b      	lsrs	r3, r3, #6
 80074bc:	f003 0301 	and.w	r3, r3, #1
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10f      	bne.n	80074e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00a      	beq.n	80074e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	099b      	lsrs	r3, r3, #6
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d004      	beq.n	80074e4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	4798      	blx	r3
    return;
 80074e2:	e0d7      	b.n	8007694 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	085b      	lsrs	r3, r3, #1
 80074e8:	f003 0301 	and.w	r3, r3, #1
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00a      	beq.n	8007506 <HAL_SPI_IRQHandler+0x66>
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	09db      	lsrs	r3, r3, #7
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d004      	beq.n	8007506 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	4798      	blx	r3
    return;
 8007504:	e0c6      	b.n	8007694 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	095b      	lsrs	r3, r3, #5
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10c      	bne.n	800752c <HAL_SPI_IRQHandler+0x8c>
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	099b      	lsrs	r3, r3, #6
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	2b00      	cmp	r3, #0
 800751c:	d106      	bne.n	800752c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	0a1b      	lsrs	r3, r3, #8
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	2b00      	cmp	r3, #0
 8007528:	f000 80b4 	beq.w	8007694 <HAL_SPI_IRQHandler+0x1f4>
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	095b      	lsrs	r3, r3, #5
 8007530:	f003 0301 	and.w	r3, r3, #1
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 80ad 	beq.w	8007694 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	099b      	lsrs	r3, r3, #6
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	2b00      	cmp	r3, #0
 8007544:	d023      	beq.n	800758e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b03      	cmp	r3, #3
 8007550:	d011      	beq.n	8007576 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007556:	f043 0204 	orr.w	r2, r3, #4
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800755e:	2300      	movs	r3, #0
 8007560:	617b      	str	r3, [r7, #20]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	617b      	str	r3, [r7, #20]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	617b      	str	r3, [r7, #20]
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	e00b      	b.n	800758e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007576:	2300      	movs	r3, #0
 8007578:	613b      	str	r3, [r7, #16]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	613b      	str	r3, [r7, #16]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	613b      	str	r3, [r7, #16]
 800758a:	693b      	ldr	r3, [r7, #16]
        return;
 800758c:	e082      	b.n	8007694 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	095b      	lsrs	r3, r3, #5
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b00      	cmp	r3, #0
 8007598:	d014      	beq.n	80075c4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800759e:	f043 0201 	orr.w	r2, r3, #1
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80075a6:	2300      	movs	r3, #0
 80075a8:	60fb      	str	r3, [r7, #12]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	60fb      	str	r3, [r7, #12]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075c0:	601a      	str	r2, [r3, #0]
 80075c2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	0a1b      	lsrs	r3, r3, #8
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00c      	beq.n	80075ea <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d4:	f043 0208 	orr.w	r2, r3, #8
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80075dc:	2300      	movs	r3, #0
 80075de:	60bb      	str	r3, [r7, #8]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	60bb      	str	r3, [r7, #8]
 80075e8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d04f      	beq.n	8007692 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	685a      	ldr	r2, [r3, #4]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007600:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	f003 0302 	and.w	r3, r3, #2
 8007610:	2b00      	cmp	r3, #0
 8007612:	d104      	bne.n	800761e <HAL_SPI_IRQHandler+0x17e>
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d034      	beq.n	8007688 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	685a      	ldr	r2, [r3, #4]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f022 0203 	bic.w	r2, r2, #3
 800762c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007632:	2b00      	cmp	r3, #0
 8007634:	d011      	beq.n	800765a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800763a:	4a18      	ldr	r2, [pc, #96]	; (800769c <HAL_SPI_IRQHandler+0x1fc>)
 800763c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007642:	4618      	mov	r0, r3
 8007644:	f7fc f9a0 	bl	8003988 <HAL_DMA_Abort_IT>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d005      	beq.n	800765a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007652:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800765e:	2b00      	cmp	r3, #0
 8007660:	d016      	beq.n	8007690 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007666:	4a0d      	ldr	r2, [pc, #52]	; (800769c <HAL_SPI_IRQHandler+0x1fc>)
 8007668:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800766e:	4618      	mov	r0, r3
 8007670:	f7fc f98a 	bl	8003988 <HAL_DMA_Abort_IT>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00a      	beq.n	8007690 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800767e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007686:	e003      	b.n	8007690 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f809 	bl	80076a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800768e:	e000      	b.n	8007692 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007690:	bf00      	nop
    return;
 8007692:	bf00      	nop
  }
}
 8007694:	3720      	adds	r7, #32
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	080076b5 	.word	0x080076b5

080076a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2200      	movs	r2, #0
 80076cc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f7ff ffe6 	bl	80076a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80076d4:	bf00      	nop
 80076d6:	3710      	adds	r7, #16
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b088      	sub	sp, #32
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	603b      	str	r3, [r7, #0]
 80076e8:	4613      	mov	r3, r2
 80076ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80076ec:	f7fb ff1c 	bl	8003528 <HAL_GetTick>
 80076f0:	4602      	mov	r2, r0
 80076f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f4:	1a9b      	subs	r3, r3, r2
 80076f6:	683a      	ldr	r2, [r7, #0]
 80076f8:	4413      	add	r3, r2
 80076fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80076fc:	f7fb ff14 	bl	8003528 <HAL_GetTick>
 8007700:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007702:	4b39      	ldr	r3, [pc, #228]	; (80077e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	015b      	lsls	r3, r3, #5
 8007708:	0d1b      	lsrs	r3, r3, #20
 800770a:	69fa      	ldr	r2, [r7, #28]
 800770c:	fb02 f303 	mul.w	r3, r2, r3
 8007710:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007712:	e054      	b.n	80077be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771a:	d050      	beq.n	80077be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800771c:	f7fb ff04 	bl	8003528 <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	69fa      	ldr	r2, [r7, #28]
 8007728:	429a      	cmp	r2, r3
 800772a:	d902      	bls.n	8007732 <SPI_WaitFlagStateUntilTimeout+0x56>
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d13d      	bne.n	80077ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	685a      	ldr	r2, [r3, #4]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007740:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800774a:	d111      	bne.n	8007770 <SPI_WaitFlagStateUntilTimeout+0x94>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007754:	d004      	beq.n	8007760 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800775e:	d107      	bne.n	8007770 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800776e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007778:	d10f      	bne.n	800779a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007788:	601a      	str	r2, [r3, #0]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007798:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e017      	b.n	80077de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d101      	bne.n	80077b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80077b4:	2300      	movs	r3, #0
 80077b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	3b01      	subs	r3, #1
 80077bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	689a      	ldr	r2, [r3, #8]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	4013      	ands	r3, r2
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	bf0c      	ite	eq
 80077ce:	2301      	moveq	r3, #1
 80077d0:	2300      	movne	r3, #0
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	461a      	mov	r2, r3
 80077d6:	79fb      	ldrb	r3, [r7, #7]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d19b      	bne.n	8007714 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3720      	adds	r7, #32
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	20000234 	.word	0x20000234

080077ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b088      	sub	sp, #32
 80077f0:	af02      	add	r7, sp, #8
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80077f8:	4b1b      	ldr	r3, [pc, #108]	; (8007868 <SPI_EndRxTxTransaction+0x7c>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a1b      	ldr	r2, [pc, #108]	; (800786c <SPI_EndRxTxTransaction+0x80>)
 80077fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007802:	0d5b      	lsrs	r3, r3, #21
 8007804:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007808:	fb02 f303 	mul.w	r3, r2, r3
 800780c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007816:	d112      	bne.n	800783e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	2200      	movs	r2, #0
 8007820:	2180      	movs	r1, #128	; 0x80
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f7ff ff5a 	bl	80076dc <SPI_WaitFlagStateUntilTimeout>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d016      	beq.n	800785c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007832:	f043 0220 	orr.w	r2, r3, #32
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800783a:	2303      	movs	r3, #3
 800783c:	e00f      	b.n	800785e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00a      	beq.n	800785a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	3b01      	subs	r3, #1
 8007848:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007854:	2b80      	cmp	r3, #128	; 0x80
 8007856:	d0f2      	beq.n	800783e <SPI_EndRxTxTransaction+0x52>
 8007858:	e000      	b.n	800785c <SPI_EndRxTxTransaction+0x70>
        break;
 800785a:	bf00      	nop
  }

  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3718      	adds	r7, #24
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	20000234 	.word	0x20000234
 800786c:	165e9f81 	.word	0x165e9f81

08007870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d101      	bne.n	8007882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e041      	b.n	8007906 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b00      	cmp	r3, #0
 800788c:	d106      	bne.n	800789c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f7fb fb14 	bl	8002ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2202      	movs	r2, #2
 80078a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	3304      	adds	r3, #4
 80078ac:	4619      	mov	r1, r3
 80078ae:	4610      	mov	r0, r2
 80078b0:	f000 fa96 	bl	8007de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
	...

08007910 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800791e:	b2db      	uxtb	r3, r3
 8007920:	2b01      	cmp	r3, #1
 8007922:	d001      	beq.n	8007928 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e04e      	b.n	80079c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2202      	movs	r2, #2
 800792c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	68da      	ldr	r2, [r3, #12]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f042 0201 	orr.w	r2, r2, #1
 800793e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a23      	ldr	r2, [pc, #140]	; (80079d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d022      	beq.n	8007990 <HAL_TIM_Base_Start_IT+0x80>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007952:	d01d      	beq.n	8007990 <HAL_TIM_Base_Start_IT+0x80>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a1f      	ldr	r2, [pc, #124]	; (80079d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d018      	beq.n	8007990 <HAL_TIM_Base_Start_IT+0x80>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a1e      	ldr	r2, [pc, #120]	; (80079dc <HAL_TIM_Base_Start_IT+0xcc>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d013      	beq.n	8007990 <HAL_TIM_Base_Start_IT+0x80>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a1c      	ldr	r2, [pc, #112]	; (80079e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d00e      	beq.n	8007990 <HAL_TIM_Base_Start_IT+0x80>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a1b      	ldr	r2, [pc, #108]	; (80079e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d009      	beq.n	8007990 <HAL_TIM_Base_Start_IT+0x80>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a19      	ldr	r2, [pc, #100]	; (80079e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d004      	beq.n	8007990 <HAL_TIM_Base_Start_IT+0x80>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a18      	ldr	r2, [pc, #96]	; (80079ec <HAL_TIM_Base_Start_IT+0xdc>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d111      	bne.n	80079b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f003 0307 	and.w	r3, r3, #7
 800799a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2b06      	cmp	r3, #6
 80079a0:	d010      	beq.n	80079c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f042 0201 	orr.w	r2, r2, #1
 80079b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079b2:	e007      	b.n	80079c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f042 0201 	orr.w	r2, r2, #1
 80079c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	40010000 	.word	0x40010000
 80079d8:	40000400 	.word	0x40000400
 80079dc:	40000800 	.word	0x40000800
 80079e0:	40000c00 	.word	0x40000c00
 80079e4:	40010400 	.word	0x40010400
 80079e8:	40014000 	.word	0x40014000
 80079ec:	40001800 	.word	0x40001800

080079f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d122      	bne.n	8007a4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	f003 0302 	and.w	r3, r3, #2
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d11b      	bne.n	8007a4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f06f 0202 	mvn.w	r2, #2
 8007a1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	f003 0303 	and.w	r3, r3, #3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d003      	beq.n	8007a3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f9b5 	bl	8007da2 <HAL_TIM_IC_CaptureCallback>
 8007a38:	e005      	b.n	8007a46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f9a7 	bl	8007d8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 f9b8 	bl	8007db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	f003 0304 	and.w	r3, r3, #4
 8007a56:	2b04      	cmp	r3, #4
 8007a58:	d122      	bne.n	8007aa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	f003 0304 	and.w	r3, r3, #4
 8007a64:	2b04      	cmp	r3, #4
 8007a66:	d11b      	bne.n	8007aa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f06f 0204 	mvn.w	r2, #4
 8007a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2202      	movs	r2, #2
 8007a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f98b 	bl	8007da2 <HAL_TIM_IC_CaptureCallback>
 8007a8c:	e005      	b.n	8007a9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f97d 	bl	8007d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 f98e 	bl	8007db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	f003 0308 	and.w	r3, r3, #8
 8007aaa:	2b08      	cmp	r3, #8
 8007aac:	d122      	bne.n	8007af4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	f003 0308 	and.w	r3, r3, #8
 8007ab8:	2b08      	cmp	r3, #8
 8007aba:	d11b      	bne.n	8007af4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f06f 0208 	mvn.w	r2, #8
 8007ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2204      	movs	r2, #4
 8007aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	f003 0303 	and.w	r3, r3, #3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f961 	bl	8007da2 <HAL_TIM_IC_CaptureCallback>
 8007ae0:	e005      	b.n	8007aee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f953 	bl	8007d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f964 	bl	8007db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	f003 0310 	and.w	r3, r3, #16
 8007afe:	2b10      	cmp	r3, #16
 8007b00:	d122      	bne.n	8007b48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	f003 0310 	and.w	r3, r3, #16
 8007b0c:	2b10      	cmp	r3, #16
 8007b0e:	d11b      	bne.n	8007b48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f06f 0210 	mvn.w	r2, #16
 8007b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2208      	movs	r2, #8
 8007b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	69db      	ldr	r3, [r3, #28]
 8007b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d003      	beq.n	8007b36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f937 	bl	8007da2 <HAL_TIM_IC_CaptureCallback>
 8007b34:	e005      	b.n	8007b42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f929 	bl	8007d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f93a 	bl	8007db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d10e      	bne.n	8007b74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	f003 0301 	and.w	r3, r3, #1
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d107      	bne.n	8007b74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f06f 0201 	mvn.w	r2, #1
 8007b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f7fa fcf0 	bl	8002554 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b7e:	2b80      	cmp	r3, #128	; 0x80
 8007b80:	d10e      	bne.n	8007ba0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b8c:	2b80      	cmp	r3, #128	; 0x80
 8007b8e:	d107      	bne.n	8007ba0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fae0 	bl	8008160 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007baa:	2b40      	cmp	r3, #64	; 0x40
 8007bac:	d10e      	bne.n	8007bcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb8:	2b40      	cmp	r3, #64	; 0x40
 8007bba:	d107      	bne.n	8007bcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f8ff 	bl	8007dca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	f003 0320 	and.w	r3, r3, #32
 8007bd6:	2b20      	cmp	r3, #32
 8007bd8:	d10e      	bne.n	8007bf8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	f003 0320 	and.w	r3, r3, #32
 8007be4:	2b20      	cmp	r3, #32
 8007be6:	d107      	bne.n	8007bf8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f06f 0220 	mvn.w	r2, #32
 8007bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 faaa 	bl	800814c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bf8:	bf00      	nop
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d101      	bne.n	8007c1c <HAL_TIM_ConfigClockSource+0x1c>
 8007c18:	2302      	movs	r3, #2
 8007c1a:	e0b4      	b.n	8007d86 <HAL_TIM_ConfigClockSource+0x186>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2202      	movs	r2, #2
 8007c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007c3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c54:	d03e      	beq.n	8007cd4 <HAL_TIM_ConfigClockSource+0xd4>
 8007c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c5a:	f200 8087 	bhi.w	8007d6c <HAL_TIM_ConfigClockSource+0x16c>
 8007c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c62:	f000 8086 	beq.w	8007d72 <HAL_TIM_ConfigClockSource+0x172>
 8007c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c6a:	d87f      	bhi.n	8007d6c <HAL_TIM_ConfigClockSource+0x16c>
 8007c6c:	2b70      	cmp	r3, #112	; 0x70
 8007c6e:	d01a      	beq.n	8007ca6 <HAL_TIM_ConfigClockSource+0xa6>
 8007c70:	2b70      	cmp	r3, #112	; 0x70
 8007c72:	d87b      	bhi.n	8007d6c <HAL_TIM_ConfigClockSource+0x16c>
 8007c74:	2b60      	cmp	r3, #96	; 0x60
 8007c76:	d050      	beq.n	8007d1a <HAL_TIM_ConfigClockSource+0x11a>
 8007c78:	2b60      	cmp	r3, #96	; 0x60
 8007c7a:	d877      	bhi.n	8007d6c <HAL_TIM_ConfigClockSource+0x16c>
 8007c7c:	2b50      	cmp	r3, #80	; 0x50
 8007c7e:	d03c      	beq.n	8007cfa <HAL_TIM_ConfigClockSource+0xfa>
 8007c80:	2b50      	cmp	r3, #80	; 0x50
 8007c82:	d873      	bhi.n	8007d6c <HAL_TIM_ConfigClockSource+0x16c>
 8007c84:	2b40      	cmp	r3, #64	; 0x40
 8007c86:	d058      	beq.n	8007d3a <HAL_TIM_ConfigClockSource+0x13a>
 8007c88:	2b40      	cmp	r3, #64	; 0x40
 8007c8a:	d86f      	bhi.n	8007d6c <HAL_TIM_ConfigClockSource+0x16c>
 8007c8c:	2b30      	cmp	r3, #48	; 0x30
 8007c8e:	d064      	beq.n	8007d5a <HAL_TIM_ConfigClockSource+0x15a>
 8007c90:	2b30      	cmp	r3, #48	; 0x30
 8007c92:	d86b      	bhi.n	8007d6c <HAL_TIM_ConfigClockSource+0x16c>
 8007c94:	2b20      	cmp	r3, #32
 8007c96:	d060      	beq.n	8007d5a <HAL_TIM_ConfigClockSource+0x15a>
 8007c98:	2b20      	cmp	r3, #32
 8007c9a:	d867      	bhi.n	8007d6c <HAL_TIM_ConfigClockSource+0x16c>
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d05c      	beq.n	8007d5a <HAL_TIM_ConfigClockSource+0x15a>
 8007ca0:	2b10      	cmp	r3, #16
 8007ca2:	d05a      	beq.n	8007d5a <HAL_TIM_ConfigClockSource+0x15a>
 8007ca4:	e062      	b.n	8007d6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6818      	ldr	r0, [r3, #0]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	6899      	ldr	r1, [r3, #8]
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	685a      	ldr	r2, [r3, #4]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	f000 f9ad 	bl	8008014 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007cc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	609a      	str	r2, [r3, #8]
      break;
 8007cd2:	e04f      	b.n	8007d74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6818      	ldr	r0, [r3, #0]
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	6899      	ldr	r1, [r3, #8]
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	f000 f996 	bl	8008014 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	689a      	ldr	r2, [r3, #8]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cf6:	609a      	str	r2, [r3, #8]
      break;
 8007cf8:	e03c      	b.n	8007d74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6818      	ldr	r0, [r3, #0]
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	6859      	ldr	r1, [r3, #4]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	461a      	mov	r2, r3
 8007d08:	f000 f90a 	bl	8007f20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2150      	movs	r1, #80	; 0x50
 8007d12:	4618      	mov	r0, r3
 8007d14:	f000 f963 	bl	8007fde <TIM_ITRx_SetConfig>
      break;
 8007d18:	e02c      	b.n	8007d74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6818      	ldr	r0, [r3, #0]
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	6859      	ldr	r1, [r3, #4]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	461a      	mov	r2, r3
 8007d28:	f000 f929 	bl	8007f7e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2160      	movs	r1, #96	; 0x60
 8007d32:	4618      	mov	r0, r3
 8007d34:	f000 f953 	bl	8007fde <TIM_ITRx_SetConfig>
      break;
 8007d38:	e01c      	b.n	8007d74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6818      	ldr	r0, [r3, #0]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	6859      	ldr	r1, [r3, #4]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	461a      	mov	r2, r3
 8007d48:	f000 f8ea 	bl	8007f20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2140      	movs	r1, #64	; 0x40
 8007d52:	4618      	mov	r0, r3
 8007d54:	f000 f943 	bl	8007fde <TIM_ITRx_SetConfig>
      break;
 8007d58:	e00c      	b.n	8007d74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4619      	mov	r1, r3
 8007d64:	4610      	mov	r0, r2
 8007d66:	f000 f93a 	bl	8007fde <TIM_ITRx_SetConfig>
      break;
 8007d6a:	e003      	b.n	8007d74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d70:	e000      	b.n	8007d74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007d72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b083      	sub	sp, #12
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d96:	bf00      	nop
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b083      	sub	sp, #12
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007daa:	bf00      	nop
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b083      	sub	sp, #12
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007dbe:	bf00      	nop
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b083      	sub	sp, #12
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007dd2:	bf00      	nop
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
	...

08007de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a40      	ldr	r2, [pc, #256]	; (8007ef4 <TIM_Base_SetConfig+0x114>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d013      	beq.n	8007e20 <TIM_Base_SetConfig+0x40>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dfe:	d00f      	beq.n	8007e20 <TIM_Base_SetConfig+0x40>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a3d      	ldr	r2, [pc, #244]	; (8007ef8 <TIM_Base_SetConfig+0x118>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d00b      	beq.n	8007e20 <TIM_Base_SetConfig+0x40>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a3c      	ldr	r2, [pc, #240]	; (8007efc <TIM_Base_SetConfig+0x11c>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d007      	beq.n	8007e20 <TIM_Base_SetConfig+0x40>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a3b      	ldr	r2, [pc, #236]	; (8007f00 <TIM_Base_SetConfig+0x120>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d003      	beq.n	8007e20 <TIM_Base_SetConfig+0x40>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a3a      	ldr	r2, [pc, #232]	; (8007f04 <TIM_Base_SetConfig+0x124>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d108      	bne.n	8007e32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a2f      	ldr	r2, [pc, #188]	; (8007ef4 <TIM_Base_SetConfig+0x114>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d02b      	beq.n	8007e92 <TIM_Base_SetConfig+0xb2>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e40:	d027      	beq.n	8007e92 <TIM_Base_SetConfig+0xb2>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a2c      	ldr	r2, [pc, #176]	; (8007ef8 <TIM_Base_SetConfig+0x118>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d023      	beq.n	8007e92 <TIM_Base_SetConfig+0xb2>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a2b      	ldr	r2, [pc, #172]	; (8007efc <TIM_Base_SetConfig+0x11c>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d01f      	beq.n	8007e92 <TIM_Base_SetConfig+0xb2>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a2a      	ldr	r2, [pc, #168]	; (8007f00 <TIM_Base_SetConfig+0x120>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d01b      	beq.n	8007e92 <TIM_Base_SetConfig+0xb2>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a29      	ldr	r2, [pc, #164]	; (8007f04 <TIM_Base_SetConfig+0x124>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d017      	beq.n	8007e92 <TIM_Base_SetConfig+0xb2>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a28      	ldr	r2, [pc, #160]	; (8007f08 <TIM_Base_SetConfig+0x128>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d013      	beq.n	8007e92 <TIM_Base_SetConfig+0xb2>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a27      	ldr	r2, [pc, #156]	; (8007f0c <TIM_Base_SetConfig+0x12c>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d00f      	beq.n	8007e92 <TIM_Base_SetConfig+0xb2>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a26      	ldr	r2, [pc, #152]	; (8007f10 <TIM_Base_SetConfig+0x130>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d00b      	beq.n	8007e92 <TIM_Base_SetConfig+0xb2>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a25      	ldr	r2, [pc, #148]	; (8007f14 <TIM_Base_SetConfig+0x134>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d007      	beq.n	8007e92 <TIM_Base_SetConfig+0xb2>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a24      	ldr	r2, [pc, #144]	; (8007f18 <TIM_Base_SetConfig+0x138>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d003      	beq.n	8007e92 <TIM_Base_SetConfig+0xb2>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a23      	ldr	r2, [pc, #140]	; (8007f1c <TIM_Base_SetConfig+0x13c>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d108      	bne.n	8007ea4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	689a      	ldr	r2, [r3, #8]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4a0a      	ldr	r2, [pc, #40]	; (8007ef4 <TIM_Base_SetConfig+0x114>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d003      	beq.n	8007ed8 <TIM_Base_SetConfig+0xf8>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a0c      	ldr	r2, [pc, #48]	; (8007f04 <TIM_Base_SetConfig+0x124>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d103      	bne.n	8007ee0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	691a      	ldr	r2, [r3, #16]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	615a      	str	r2, [r3, #20]
}
 8007ee6:	bf00      	nop
 8007ee8:	3714      	adds	r7, #20
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	40010000 	.word	0x40010000
 8007ef8:	40000400 	.word	0x40000400
 8007efc:	40000800 	.word	0x40000800
 8007f00:	40000c00 	.word	0x40000c00
 8007f04:	40010400 	.word	0x40010400
 8007f08:	40014000 	.word	0x40014000
 8007f0c:	40014400 	.word	0x40014400
 8007f10:	40014800 	.word	0x40014800
 8007f14:	40001800 	.word	0x40001800
 8007f18:	40001c00 	.word	0x40001c00
 8007f1c:	40002000 	.word	0x40002000

08007f20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b087      	sub	sp, #28
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6a1b      	ldr	r3, [r3, #32]
 8007f30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6a1b      	ldr	r3, [r3, #32]
 8007f36:	f023 0201 	bic.w	r2, r3, #1
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	011b      	lsls	r3, r3, #4
 8007f50:	693a      	ldr	r2, [r7, #16]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	f023 030a 	bic.w	r3, r3, #10
 8007f5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	621a      	str	r2, [r3, #32]
}
 8007f72:	bf00      	nop
 8007f74:	371c      	adds	r7, #28
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b087      	sub	sp, #28
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	60f8      	str	r0, [r7, #12]
 8007f86:	60b9      	str	r1, [r7, #8]
 8007f88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	f023 0210 	bic.w	r2, r3, #16
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6a1b      	ldr	r3, [r3, #32]
 8007fa0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fa8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	031b      	lsls	r3, r3, #12
 8007fae:	697a      	ldr	r2, [r7, #20]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007fba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	011b      	lsls	r3, r3, #4
 8007fc0:	693a      	ldr	r2, [r7, #16]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	697a      	ldr	r2, [r7, #20]
 8007fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	693a      	ldr	r2, [r7, #16]
 8007fd0:	621a      	str	r2, [r3, #32]
}
 8007fd2:	bf00      	nop
 8007fd4:	371c      	adds	r7, #28
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007fde:	b480      	push	{r7}
 8007fe0:	b085      	sub	sp, #20
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
 8007fe6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ff4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ff6:	683a      	ldr	r2, [r7, #0]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	f043 0307 	orr.w	r3, r3, #7
 8008000:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	609a      	str	r2, [r3, #8]
}
 8008008:	bf00      	nop
 800800a:	3714      	adds	r7, #20
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008014:	b480      	push	{r7}
 8008016:	b087      	sub	sp, #28
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	607a      	str	r2, [r7, #4]
 8008020:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800802e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	021a      	lsls	r2, r3, #8
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	431a      	orrs	r2, r3
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	4313      	orrs	r3, r2
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	4313      	orrs	r3, r2
 8008040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	697a      	ldr	r2, [r7, #20]
 8008046:	609a      	str	r2, [r3, #8]
}
 8008048:	bf00      	nop
 800804a:	371c      	adds	r7, #28
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008064:	2b01      	cmp	r3, #1
 8008066:	d101      	bne.n	800806c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008068:	2302      	movs	r3, #2
 800806a:	e05a      	b.n	8008122 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2202      	movs	r2, #2
 8008078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	4313      	orrs	r3, r2
 800809c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a21      	ldr	r2, [pc, #132]	; (8008130 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d022      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080b8:	d01d      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a1d      	ldr	r2, [pc, #116]	; (8008134 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d018      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a1b      	ldr	r2, [pc, #108]	; (8008138 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d013      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a1a      	ldr	r2, [pc, #104]	; (800813c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d00e      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a18      	ldr	r2, [pc, #96]	; (8008140 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d009      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a17      	ldr	r2, [pc, #92]	; (8008144 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d004      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a15      	ldr	r2, [pc, #84]	; (8008148 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d10c      	bne.n	8008110 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	4313      	orrs	r3, r2
 8008106:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	40010000 	.word	0x40010000
 8008134:	40000400 	.word	0x40000400
 8008138:	40000800 	.word	0x40000800
 800813c:	40000c00 	.word	0x40000c00
 8008140:	40010400 	.word	0x40010400
 8008144:	40014000 	.word	0x40014000
 8008148:	40001800 	.word	0x40001800

0800814c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008154:	bf00      	nop
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008168:	bf00      	nop
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d101      	bne.n	8008186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e03f      	b.n	8008206 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b00      	cmp	r3, #0
 8008190:	d106      	bne.n	80081a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f7fa feb8 	bl	8002f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2224      	movs	r2, #36	; 0x24
 80081a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	68da      	ldr	r2, [r3, #12]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 fe19 	bl	8008df0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	691a      	ldr	r2, [r3, #16]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	695a      	ldr	r2, [r3, #20]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68da      	ldr	r2, [r3, #12]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2220      	movs	r2, #32
 80081f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2220      	movs	r2, #32
 8008200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b08a      	sub	sp, #40	; 0x28
 8008212:	af02      	add	r7, sp, #8
 8008214:	60f8      	str	r0, [r7, #12]
 8008216:	60b9      	str	r1, [r7, #8]
 8008218:	603b      	str	r3, [r7, #0]
 800821a:	4613      	mov	r3, r2
 800821c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800821e:	2300      	movs	r3, #0
 8008220:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b20      	cmp	r3, #32
 800822c:	d17c      	bne.n	8008328 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d002      	beq.n	800823a <HAL_UART_Transmit+0x2c>
 8008234:	88fb      	ldrh	r3, [r7, #6]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d101      	bne.n	800823e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	e075      	b.n	800832a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008244:	2b01      	cmp	r3, #1
 8008246:	d101      	bne.n	800824c <HAL_UART_Transmit+0x3e>
 8008248:	2302      	movs	r3, #2
 800824a:	e06e      	b.n	800832a <HAL_UART_Transmit+0x11c>
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2221      	movs	r2, #33	; 0x21
 800825e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008262:	f7fb f961 	bl	8003528 <HAL_GetTick>
 8008266:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	88fa      	ldrh	r2, [r7, #6]
 800826c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	88fa      	ldrh	r2, [r7, #6]
 8008272:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800827c:	d108      	bne.n	8008290 <HAL_UART_Transmit+0x82>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d104      	bne.n	8008290 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008286:	2300      	movs	r3, #0
 8008288:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	61bb      	str	r3, [r7, #24]
 800828e:	e003      	b.n	8008298 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008294:	2300      	movs	r3, #0
 8008296:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80082a0:	e02a      	b.n	80082f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	2200      	movs	r2, #0
 80082aa:	2180      	movs	r1, #128	; 0x80
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f000 fb59 	bl	8008964 <UART_WaitOnFlagUntilTimeout>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d001      	beq.n	80082bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80082b8:	2303      	movs	r3, #3
 80082ba:	e036      	b.n	800832a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d10b      	bne.n	80082da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	881b      	ldrh	r3, [r3, #0]
 80082c6:	461a      	mov	r2, r3
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	3302      	adds	r3, #2
 80082d6:	61bb      	str	r3, [r7, #24]
 80082d8:	e007      	b.n	80082ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	781a      	ldrb	r2, [r3, #0]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	3301      	adds	r3, #1
 80082e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	3b01      	subs	r3, #1
 80082f2:	b29a      	uxth	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1cf      	bne.n	80082a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	9300      	str	r3, [sp, #0]
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	2200      	movs	r2, #0
 800830a:	2140      	movs	r1, #64	; 0x40
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f000 fb29 	bl	8008964 <UART_WaitOnFlagUntilTimeout>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d001      	beq.n	800831c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008318:	2303      	movs	r3, #3
 800831a:	e006      	b.n	800832a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2220      	movs	r2, #32
 8008320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008324:	2300      	movs	r3, #0
 8008326:	e000      	b.n	800832a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008328:	2302      	movs	r3, #2
  }
}
 800832a:	4618      	mov	r0, r3
 800832c:	3720      	adds	r7, #32
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008332:	b480      	push	{r7}
 8008334:	b085      	sub	sp, #20
 8008336:	af00      	add	r7, sp, #0
 8008338:	60f8      	str	r0, [r7, #12]
 800833a:	60b9      	str	r1, [r7, #8]
 800833c:	4613      	mov	r3, r2
 800833e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008346:	b2db      	uxtb	r3, r3
 8008348:	2b20      	cmp	r3, #32
 800834a:	d130      	bne.n	80083ae <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d002      	beq.n	8008358 <HAL_UART_Transmit_IT+0x26>
 8008352:	88fb      	ldrh	r3, [r7, #6]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d101      	bne.n	800835c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	e029      	b.n	80083b0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008362:	2b01      	cmp	r3, #1
 8008364:	d101      	bne.n	800836a <HAL_UART_Transmit_IT+0x38>
 8008366:	2302      	movs	r3, #2
 8008368:	e022      	b.n	80083b0 <HAL_UART_Transmit_IT+0x7e>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2201      	movs	r2, #1
 800836e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	68ba      	ldr	r2, [r7, #8]
 8008376:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	88fa      	ldrh	r2, [r7, #6]
 800837c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	88fa      	ldrh	r2, [r7, #6]
 8008382:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2200      	movs	r2, #0
 8008388:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2221      	movs	r2, #33	; 0x21
 800838e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2200      	movs	r2, #0
 8008396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68da      	ldr	r2, [r3, #12]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80083a8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80083aa:	2300      	movs	r3, #0
 80083ac:	e000      	b.n	80083b0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80083ae:	2302      	movs	r3, #2
  }
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3714      	adds	r7, #20
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	4613      	mov	r3, r2
 80083c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	2b20      	cmp	r3, #32
 80083d4:	d11d      	bne.n	8008412 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d002      	beq.n	80083e2 <HAL_UART_Receive_IT+0x26>
 80083dc:	88fb      	ldrh	r3, [r7, #6]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d101      	bne.n	80083e6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	e016      	b.n	8008414 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d101      	bne.n	80083f4 <HAL_UART_Receive_IT+0x38>
 80083f0:	2302      	movs	r3, #2
 80083f2:	e00f      	b.n	8008414 <HAL_UART_Receive_IT+0x58>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008402:	88fb      	ldrh	r3, [r7, #6]
 8008404:	461a      	mov	r2, r3
 8008406:	68b9      	ldr	r1, [r7, #8]
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f000 fb19 	bl	8008a40 <UART_Start_Receive_IT>
 800840e:	4603      	mov	r3, r0
 8008410:	e000      	b.n	8008414 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008412:	2302      	movs	r3, #2
  }
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b0ba      	sub	sp, #232	; 0xe8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	695b      	ldr	r3, [r3, #20]
 800843e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008442:	2300      	movs	r3, #0
 8008444:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008448:	2300      	movs	r3, #0
 800844a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800844e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008452:	f003 030f 	and.w	r3, r3, #15
 8008456:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800845a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800845e:	2b00      	cmp	r3, #0
 8008460:	d10f      	bne.n	8008482 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008466:	f003 0320 	and.w	r3, r3, #32
 800846a:	2b00      	cmp	r3, #0
 800846c:	d009      	beq.n	8008482 <HAL_UART_IRQHandler+0x66>
 800846e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008472:	f003 0320 	and.w	r3, r3, #32
 8008476:	2b00      	cmp	r3, #0
 8008478:	d003      	beq.n	8008482 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fbfd 	bl	8008c7a <UART_Receive_IT>
      return;
 8008480:	e256      	b.n	8008930 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008482:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008486:	2b00      	cmp	r3, #0
 8008488:	f000 80de 	beq.w	8008648 <HAL_UART_IRQHandler+0x22c>
 800848c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008490:	f003 0301 	and.w	r3, r3, #1
 8008494:	2b00      	cmp	r3, #0
 8008496:	d106      	bne.n	80084a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800849c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f000 80d1 	beq.w	8008648 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80084a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084aa:	f003 0301 	and.w	r3, r3, #1
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00b      	beq.n	80084ca <HAL_UART_IRQHandler+0xae>
 80084b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d005      	beq.n	80084ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c2:	f043 0201 	orr.w	r2, r3, #1
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80084ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ce:	f003 0304 	and.w	r3, r3, #4
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00b      	beq.n	80084ee <HAL_UART_IRQHandler+0xd2>
 80084d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084da:	f003 0301 	and.w	r3, r3, #1
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d005      	beq.n	80084ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e6:	f043 0202 	orr.w	r2, r3, #2
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80084ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084f2:	f003 0302 	and.w	r3, r3, #2
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00b      	beq.n	8008512 <HAL_UART_IRQHandler+0xf6>
 80084fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084fe:	f003 0301 	and.w	r3, r3, #1
 8008502:	2b00      	cmp	r3, #0
 8008504:	d005      	beq.n	8008512 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850a:	f043 0204 	orr.w	r2, r3, #4
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008516:	f003 0308 	and.w	r3, r3, #8
 800851a:	2b00      	cmp	r3, #0
 800851c:	d011      	beq.n	8008542 <HAL_UART_IRQHandler+0x126>
 800851e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008522:	f003 0320 	and.w	r3, r3, #32
 8008526:	2b00      	cmp	r3, #0
 8008528:	d105      	bne.n	8008536 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800852a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800852e:	f003 0301 	and.w	r3, r3, #1
 8008532:	2b00      	cmp	r3, #0
 8008534:	d005      	beq.n	8008542 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853a:	f043 0208 	orr.w	r2, r3, #8
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008546:	2b00      	cmp	r3, #0
 8008548:	f000 81ed 	beq.w	8008926 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800854c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008550:	f003 0320 	and.w	r3, r3, #32
 8008554:	2b00      	cmp	r3, #0
 8008556:	d008      	beq.n	800856a <HAL_UART_IRQHandler+0x14e>
 8008558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800855c:	f003 0320 	and.w	r3, r3, #32
 8008560:	2b00      	cmp	r3, #0
 8008562:	d002      	beq.n	800856a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fb88 	bl	8008c7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	695b      	ldr	r3, [r3, #20]
 8008570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008574:	2b40      	cmp	r3, #64	; 0x40
 8008576:	bf0c      	ite	eq
 8008578:	2301      	moveq	r3, #1
 800857a:	2300      	movne	r3, #0
 800857c:	b2db      	uxtb	r3, r3
 800857e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008586:	f003 0308 	and.w	r3, r3, #8
 800858a:	2b00      	cmp	r3, #0
 800858c:	d103      	bne.n	8008596 <HAL_UART_IRQHandler+0x17a>
 800858e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008592:	2b00      	cmp	r3, #0
 8008594:	d04f      	beq.n	8008636 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 fa90 	bl	8008abc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	695b      	ldr	r3, [r3, #20]
 80085a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085a6:	2b40      	cmp	r3, #64	; 0x40
 80085a8:	d141      	bne.n	800862e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3314      	adds	r3, #20
 80085b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80085b8:	e853 3f00 	ldrex	r3, [r3]
 80085bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80085c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	3314      	adds	r3, #20
 80085d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80085d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80085da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80085e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80085e6:	e841 2300 	strex	r3, r2, [r1]
 80085ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80085ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1d9      	bne.n	80085aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d013      	beq.n	8008626 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008602:	4a7d      	ldr	r2, [pc, #500]	; (80087f8 <HAL_UART_IRQHandler+0x3dc>)
 8008604:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860a:	4618      	mov	r0, r3
 800860c:	f7fb f9bc 	bl	8003988 <HAL_DMA_Abort_IT>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d016      	beq.n	8008644 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008620:	4610      	mov	r0, r2
 8008622:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008624:	e00e      	b.n	8008644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 f986 	bl	8008938 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800862c:	e00a      	b.n	8008644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 f982 	bl	8008938 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008634:	e006      	b.n	8008644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f97e 	bl	8008938 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008642:	e170      	b.n	8008926 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008644:	bf00      	nop
    return;
 8008646:	e16e      	b.n	8008926 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864c:	2b01      	cmp	r3, #1
 800864e:	f040 814a 	bne.w	80088e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008656:	f003 0310 	and.w	r3, r3, #16
 800865a:	2b00      	cmp	r3, #0
 800865c:	f000 8143 	beq.w	80088e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008664:	f003 0310 	and.w	r3, r3, #16
 8008668:	2b00      	cmp	r3, #0
 800866a:	f000 813c 	beq.w	80088e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800866e:	2300      	movs	r3, #0
 8008670:	60bb      	str	r3, [r7, #8]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	60bb      	str	r3, [r7, #8]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	60bb      	str	r3, [r7, #8]
 8008682:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	695b      	ldr	r3, [r3, #20]
 800868a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800868e:	2b40      	cmp	r3, #64	; 0x40
 8008690:	f040 80b4 	bne.w	80087fc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80086a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 8140 	beq.w	800892a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80086b2:	429a      	cmp	r2, r3
 80086b4:	f080 8139 	bcs.w	800892a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80086be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c4:	69db      	ldr	r3, [r3, #28]
 80086c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086ca:	f000 8088 	beq.w	80087de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	330c      	adds	r3, #12
 80086d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80086dc:	e853 3f00 	ldrex	r3, [r3]
 80086e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80086e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80086e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	330c      	adds	r3, #12
 80086f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80086fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80086fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008702:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008706:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800870a:	e841 2300 	strex	r3, r2, [r1]
 800870e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008712:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1d9      	bne.n	80086ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	3314      	adds	r3, #20
 8008720:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008722:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008724:	e853 3f00 	ldrex	r3, [r3]
 8008728:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800872a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800872c:	f023 0301 	bic.w	r3, r3, #1
 8008730:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	3314      	adds	r3, #20
 800873a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800873e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008742:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008744:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008746:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800874a:	e841 2300 	strex	r3, r2, [r1]
 800874e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008752:	2b00      	cmp	r3, #0
 8008754:	d1e1      	bne.n	800871a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	3314      	adds	r3, #20
 800875c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008760:	e853 3f00 	ldrex	r3, [r3]
 8008764:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800876c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	3314      	adds	r3, #20
 8008776:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800877a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800877c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008780:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008782:	e841 2300 	strex	r3, r2, [r1]
 8008786:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1e3      	bne.n	8008756 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2220      	movs	r2, #32
 8008792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	330c      	adds	r3, #12
 80087a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087a6:	e853 3f00 	ldrex	r3, [r3]
 80087aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80087ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087ae:	f023 0310 	bic.w	r3, r3, #16
 80087b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	330c      	adds	r3, #12
 80087bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80087c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80087c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80087c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087c8:	e841 2300 	strex	r3, r2, [r1]
 80087cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80087ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1e3      	bne.n	800879c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d8:	4618      	mov	r0, r3
 80087da:	f7fb f865 	bl	80038a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	1ad3      	subs	r3, r2, r3
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	4619      	mov	r1, r3
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 f8ac 	bl	800894c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80087f4:	e099      	b.n	800892a <HAL_UART_IRQHandler+0x50e>
 80087f6:	bf00      	nop
 80087f8:	08008b83 	.word	0x08008b83
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008804:	b29b      	uxth	r3, r3
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008810:	b29b      	uxth	r3, r3
 8008812:	2b00      	cmp	r3, #0
 8008814:	f000 808b 	beq.w	800892e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008818:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800881c:	2b00      	cmp	r3, #0
 800881e:	f000 8086 	beq.w	800892e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	330c      	adds	r3, #12
 8008828:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882c:	e853 3f00 	ldrex	r3, [r3]
 8008830:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008834:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008838:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	330c      	adds	r3, #12
 8008842:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008846:	647a      	str	r2, [r7, #68]	; 0x44
 8008848:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800884c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800884e:	e841 2300 	strex	r3, r2, [r1]
 8008852:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1e3      	bne.n	8008822 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	3314      	adds	r3, #20
 8008860:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008864:	e853 3f00 	ldrex	r3, [r3]
 8008868:	623b      	str	r3, [r7, #32]
   return(result);
 800886a:	6a3b      	ldr	r3, [r7, #32]
 800886c:	f023 0301 	bic.w	r3, r3, #1
 8008870:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	3314      	adds	r3, #20
 800887a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800887e:	633a      	str	r2, [r7, #48]	; 0x30
 8008880:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008882:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008886:	e841 2300 	strex	r3, r2, [r1]
 800888a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800888c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1e3      	bne.n	800885a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2220      	movs	r2, #32
 8008896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	330c      	adds	r3, #12
 80088a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	e853 3f00 	ldrex	r3, [r3]
 80088ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f023 0310 	bic.w	r3, r3, #16
 80088b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	330c      	adds	r3, #12
 80088c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80088c4:	61fa      	str	r2, [r7, #28]
 80088c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c8:	69b9      	ldr	r1, [r7, #24]
 80088ca:	69fa      	ldr	r2, [r7, #28]
 80088cc:	e841 2300 	strex	r3, r2, [r1]
 80088d0:	617b      	str	r3, [r7, #20]
   return(result);
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1e3      	bne.n	80088a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80088d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80088dc:	4619      	mov	r1, r3
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 f834 	bl	800894c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80088e4:	e023      	b.n	800892e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80088e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d009      	beq.n	8008906 <HAL_UART_IRQHandler+0x4ea>
 80088f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d003      	beq.n	8008906 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 f953 	bl	8008baa <UART_Transmit_IT>
    return;
 8008904:	e014      	b.n	8008930 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800890a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00e      	beq.n	8008930 <HAL_UART_IRQHandler+0x514>
 8008912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800891a:	2b00      	cmp	r3, #0
 800891c:	d008      	beq.n	8008930 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 f993 	bl	8008c4a <UART_EndTransmit_IT>
    return;
 8008924:	e004      	b.n	8008930 <HAL_UART_IRQHandler+0x514>
    return;
 8008926:	bf00      	nop
 8008928:	e002      	b.n	8008930 <HAL_UART_IRQHandler+0x514>
      return;
 800892a:	bf00      	nop
 800892c:	e000      	b.n	8008930 <HAL_UART_IRQHandler+0x514>
      return;
 800892e:	bf00      	nop
  }
}
 8008930:	37e8      	adds	r7, #232	; 0xe8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop

08008938 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	460b      	mov	r3, r1
 8008956:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008958:	bf00      	nop
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b090      	sub	sp, #64	; 0x40
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	603b      	str	r3, [r7, #0]
 8008970:	4613      	mov	r3, r2
 8008972:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008974:	e050      	b.n	8008a18 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800897c:	d04c      	beq.n	8008a18 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800897e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008980:	2b00      	cmp	r3, #0
 8008982:	d007      	beq.n	8008994 <UART_WaitOnFlagUntilTimeout+0x30>
 8008984:	f7fa fdd0 	bl	8003528 <HAL_GetTick>
 8008988:	4602      	mov	r2, r0
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008990:	429a      	cmp	r2, r3
 8008992:	d241      	bcs.n	8008a18 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	330c      	adds	r3, #12
 800899a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899e:	e853 3f00 	ldrex	r3, [r3]
 80089a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80089aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	330c      	adds	r3, #12
 80089b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80089b4:	637a      	str	r2, [r7, #52]	; 0x34
 80089b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80089ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089bc:	e841 2300 	strex	r3, r2, [r1]
 80089c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80089c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d1e5      	bne.n	8008994 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	3314      	adds	r3, #20
 80089ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	e853 3f00 	ldrex	r3, [r3]
 80089d6:	613b      	str	r3, [r7, #16]
   return(result);
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	f023 0301 	bic.w	r3, r3, #1
 80089de:	63bb      	str	r3, [r7, #56]	; 0x38
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	3314      	adds	r3, #20
 80089e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089e8:	623a      	str	r2, [r7, #32]
 80089ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ec:	69f9      	ldr	r1, [r7, #28]
 80089ee:	6a3a      	ldr	r2, [r7, #32]
 80089f0:	e841 2300 	strex	r3, r2, [r1]
 80089f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1e5      	bne.n	80089c8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2220      	movs	r2, #32
 8008a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2220      	movs	r2, #32
 8008a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008a14:	2303      	movs	r3, #3
 8008a16:	e00f      	b.n	8008a38 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	4013      	ands	r3, r2
 8008a22:	68ba      	ldr	r2, [r7, #8]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	bf0c      	ite	eq
 8008a28:	2301      	moveq	r3, #1
 8008a2a:	2300      	movne	r3, #0
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	461a      	mov	r2, r3
 8008a30:	79fb      	ldrb	r3, [r7, #7]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d09f      	beq.n	8008976 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3740      	adds	r7, #64	; 0x40
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	88fa      	ldrh	r2, [r7, #6]
 8008a58:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	88fa      	ldrh	r2, [r7, #6]
 8008a5e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2200      	movs	r2, #0
 8008a64:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2222      	movs	r2, #34	; 0x22
 8008a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d007      	beq.n	8008a8e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	68da      	ldr	r2, [r3, #12]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a8c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	695a      	ldr	r2, [r3, #20]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f042 0201 	orr.w	r2, r2, #1
 8008a9c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	68da      	ldr	r2, [r3, #12]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f042 0220 	orr.w	r2, r2, #32
 8008aac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3714      	adds	r7, #20
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b095      	sub	sp, #84	; 0x54
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	330c      	adds	r3, #12
 8008aca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ace:	e853 3f00 	ldrex	r3, [r3]
 8008ad2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	330c      	adds	r3, #12
 8008ae2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ae4:	643a      	str	r2, [r7, #64]	; 0x40
 8008ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008aea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008aec:	e841 2300 	strex	r3, r2, [r1]
 8008af0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d1e5      	bne.n	8008ac4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	3314      	adds	r3, #20
 8008afe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b00:	6a3b      	ldr	r3, [r7, #32]
 8008b02:	e853 3f00 	ldrex	r3, [r3]
 8008b06:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	f023 0301 	bic.w	r3, r3, #1
 8008b0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	3314      	adds	r3, #20
 8008b16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b20:	e841 2300 	strex	r3, r2, [r1]
 8008b24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1e5      	bne.n	8008af8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d119      	bne.n	8008b68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	330c      	adds	r3, #12
 8008b3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	e853 3f00 	ldrex	r3, [r3]
 8008b42:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	f023 0310 	bic.w	r3, r3, #16
 8008b4a:	647b      	str	r3, [r7, #68]	; 0x44
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	330c      	adds	r3, #12
 8008b52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b54:	61ba      	str	r2, [r7, #24]
 8008b56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b58:	6979      	ldr	r1, [r7, #20]
 8008b5a:	69ba      	ldr	r2, [r7, #24]
 8008b5c:	e841 2300 	strex	r3, r2, [r1]
 8008b60:	613b      	str	r3, [r7, #16]
   return(result);
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d1e5      	bne.n	8008b34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2220      	movs	r2, #32
 8008b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008b76:	bf00      	nop
 8008b78:	3754      	adds	r7, #84	; 0x54
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr

08008b82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b084      	sub	sp, #16
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f7ff fecb 	bl	8008938 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ba2:	bf00      	nop
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008baa:	b480      	push	{r7}
 8008bac:	b085      	sub	sp, #20
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b21      	cmp	r3, #33	; 0x21
 8008bbc:	d13e      	bne.n	8008c3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bc6:	d114      	bne.n	8008bf2 <UART_Transmit_IT+0x48>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d110      	bne.n	8008bf2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a1b      	ldr	r3, [r3, #32]
 8008bd4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	881b      	ldrh	r3, [r3, #0]
 8008bda:	461a      	mov	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008be4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a1b      	ldr	r3, [r3, #32]
 8008bea:	1c9a      	adds	r2, r3, #2
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	621a      	str	r2, [r3, #32]
 8008bf0:	e008      	b.n	8008c04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6a1b      	ldr	r3, [r3, #32]
 8008bf6:	1c59      	adds	r1, r3, #1
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	6211      	str	r1, [r2, #32]
 8008bfc:	781a      	ldrb	r2, [r3, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	4619      	mov	r1, r3
 8008c12:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10f      	bne.n	8008c38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	68da      	ldr	r2, [r3, #12]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68da      	ldr	r2, [r3, #12]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	e000      	b.n	8008c3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008c3c:	2302      	movs	r3, #2
  }
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b082      	sub	sp, #8
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68da      	ldr	r2, [r3, #12]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2220      	movs	r2, #32
 8008c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7f9 f8d6 	bl	8001e1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b08c      	sub	sp, #48	; 0x30
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	2b22      	cmp	r3, #34	; 0x22
 8008c8c:	f040 80ab 	bne.w	8008de6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c98:	d117      	bne.n	8008cca <UART_Receive_IT+0x50>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d113      	bne.n	8008cca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008caa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cbc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc2:	1c9a      	adds	r2, r3, #2
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	629a      	str	r2, [r3, #40]	; 0x28
 8008cc8:	e026      	b.n	8008d18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cdc:	d007      	beq.n	8008cee <UART_Receive_IT+0x74>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d10a      	bne.n	8008cfc <UART_Receive_IT+0x82>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d106      	bne.n	8008cfc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	b2da      	uxtb	r2, r3
 8008cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf8:	701a      	strb	r2, [r3, #0]
 8008cfa:	e008      	b.n	8008d0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d08:	b2da      	uxtb	r2, r3
 8008d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d12:	1c5a      	adds	r2, r3, #1
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	4619      	mov	r1, r3
 8008d26:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d15a      	bne.n	8008de2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	68da      	ldr	r2, [r3, #12]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f022 0220 	bic.w	r2, r2, #32
 8008d3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	68da      	ldr	r2, [r3, #12]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	695a      	ldr	r2, [r3, #20]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f022 0201 	bic.w	r2, r2, #1
 8008d5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2220      	movs	r2, #32
 8008d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d135      	bne.n	8008dd8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	330c      	adds	r3, #12
 8008d78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	e853 3f00 	ldrex	r3, [r3]
 8008d80:	613b      	str	r3, [r7, #16]
   return(result);
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	f023 0310 	bic.w	r3, r3, #16
 8008d88:	627b      	str	r3, [r7, #36]	; 0x24
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	330c      	adds	r3, #12
 8008d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d92:	623a      	str	r2, [r7, #32]
 8008d94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d96:	69f9      	ldr	r1, [r7, #28]
 8008d98:	6a3a      	ldr	r2, [r7, #32]
 8008d9a:	e841 2300 	strex	r3, r2, [r1]
 8008d9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d1e5      	bne.n	8008d72 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 0310 	and.w	r3, r3, #16
 8008db0:	2b10      	cmp	r3, #16
 8008db2:	d10a      	bne.n	8008dca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008db4:	2300      	movs	r3, #0
 8008db6:	60fb      	str	r3, [r7, #12]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	60fb      	str	r3, [r7, #12]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	60fb      	str	r3, [r7, #12]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008dce:	4619      	mov	r1, r3
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f7ff fdbb 	bl	800894c <HAL_UARTEx_RxEventCallback>
 8008dd6:	e002      	b.n	8008dde <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f7f8 fffb 	bl	8001dd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	e002      	b.n	8008de8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008de2:	2300      	movs	r3, #0
 8008de4:	e000      	b.n	8008de8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008de6:	2302      	movs	r3, #2
  }
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3730      	adds	r7, #48	; 0x30
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008df4:	b0c0      	sub	sp, #256	; 0x100
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e0c:	68d9      	ldr	r1, [r3, #12]
 8008e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	ea40 0301 	orr.w	r3, r0, r1
 8008e18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e1e:	689a      	ldr	r2, [r3, #8]
 8008e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	431a      	orrs	r2, r3
 8008e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e2c:	695b      	ldr	r3, [r3, #20]
 8008e2e:	431a      	orrs	r2, r3
 8008e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e34:	69db      	ldr	r3, [r3, #28]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008e48:	f021 010c 	bic.w	r1, r1, #12
 8008e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e56:	430b      	orrs	r3, r1
 8008e58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	695b      	ldr	r3, [r3, #20]
 8008e62:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e6a:	6999      	ldr	r1, [r3, #24]
 8008e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	ea40 0301 	orr.w	r3, r0, r1
 8008e76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	4b8f      	ldr	r3, [pc, #572]	; (80090bc <UART_SetConfig+0x2cc>)
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d005      	beq.n	8008e90 <UART_SetConfig+0xa0>
 8008e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	4b8d      	ldr	r3, [pc, #564]	; (80090c0 <UART_SetConfig+0x2d0>)
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d104      	bne.n	8008e9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e90:	f7fd fcb4 	bl	80067fc <HAL_RCC_GetPCLK2Freq>
 8008e94:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008e98:	e003      	b.n	8008ea2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e9a:	f7fd fc9b 	bl	80067d4 <HAL_RCC_GetPCLK1Freq>
 8008e9e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ea6:	69db      	ldr	r3, [r3, #28]
 8008ea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008eac:	f040 810c 	bne.w	80090c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008eb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008eba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008ebe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008ec2:	4622      	mov	r2, r4
 8008ec4:	462b      	mov	r3, r5
 8008ec6:	1891      	adds	r1, r2, r2
 8008ec8:	65b9      	str	r1, [r7, #88]	; 0x58
 8008eca:	415b      	adcs	r3, r3
 8008ecc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ece:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008ed2:	4621      	mov	r1, r4
 8008ed4:	eb12 0801 	adds.w	r8, r2, r1
 8008ed8:	4629      	mov	r1, r5
 8008eda:	eb43 0901 	adc.w	r9, r3, r1
 8008ede:	f04f 0200 	mov.w	r2, #0
 8008ee2:	f04f 0300 	mov.w	r3, #0
 8008ee6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008eea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008eee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008ef2:	4690      	mov	r8, r2
 8008ef4:	4699      	mov	r9, r3
 8008ef6:	4623      	mov	r3, r4
 8008ef8:	eb18 0303 	adds.w	r3, r8, r3
 8008efc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008f00:	462b      	mov	r3, r5
 8008f02:	eb49 0303 	adc.w	r3, r9, r3
 8008f06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008f16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008f1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008f1e:	460b      	mov	r3, r1
 8008f20:	18db      	adds	r3, r3, r3
 8008f22:	653b      	str	r3, [r7, #80]	; 0x50
 8008f24:	4613      	mov	r3, r2
 8008f26:	eb42 0303 	adc.w	r3, r2, r3
 8008f2a:	657b      	str	r3, [r7, #84]	; 0x54
 8008f2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008f30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008f34:	f7f7 f9b4 	bl	80002a0 <__aeabi_uldivmod>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	4b61      	ldr	r3, [pc, #388]	; (80090c4 <UART_SetConfig+0x2d4>)
 8008f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f42:	095b      	lsrs	r3, r3, #5
 8008f44:	011c      	lsls	r4, r3, #4
 8008f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008f54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008f58:	4642      	mov	r2, r8
 8008f5a:	464b      	mov	r3, r9
 8008f5c:	1891      	adds	r1, r2, r2
 8008f5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008f60:	415b      	adcs	r3, r3
 8008f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008f68:	4641      	mov	r1, r8
 8008f6a:	eb12 0a01 	adds.w	sl, r2, r1
 8008f6e:	4649      	mov	r1, r9
 8008f70:	eb43 0b01 	adc.w	fp, r3, r1
 8008f74:	f04f 0200 	mov.w	r2, #0
 8008f78:	f04f 0300 	mov.w	r3, #0
 8008f7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008f80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008f84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f88:	4692      	mov	sl, r2
 8008f8a:	469b      	mov	fp, r3
 8008f8c:	4643      	mov	r3, r8
 8008f8e:	eb1a 0303 	adds.w	r3, sl, r3
 8008f92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f96:	464b      	mov	r3, r9
 8008f98:	eb4b 0303 	adc.w	r3, fp, r3
 8008f9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008fac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008fb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	18db      	adds	r3, r3, r3
 8008fb8:	643b      	str	r3, [r7, #64]	; 0x40
 8008fba:	4613      	mov	r3, r2
 8008fbc:	eb42 0303 	adc.w	r3, r2, r3
 8008fc0:	647b      	str	r3, [r7, #68]	; 0x44
 8008fc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008fc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008fca:	f7f7 f969 	bl	80002a0 <__aeabi_uldivmod>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	4611      	mov	r1, r2
 8008fd4:	4b3b      	ldr	r3, [pc, #236]	; (80090c4 <UART_SetConfig+0x2d4>)
 8008fd6:	fba3 2301 	umull	r2, r3, r3, r1
 8008fda:	095b      	lsrs	r3, r3, #5
 8008fdc:	2264      	movs	r2, #100	; 0x64
 8008fde:	fb02 f303 	mul.w	r3, r2, r3
 8008fe2:	1acb      	subs	r3, r1, r3
 8008fe4:	00db      	lsls	r3, r3, #3
 8008fe6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008fea:	4b36      	ldr	r3, [pc, #216]	; (80090c4 <UART_SetConfig+0x2d4>)
 8008fec:	fba3 2302 	umull	r2, r3, r3, r2
 8008ff0:	095b      	lsrs	r3, r3, #5
 8008ff2:	005b      	lsls	r3, r3, #1
 8008ff4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008ff8:	441c      	add	r4, r3
 8008ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ffe:	2200      	movs	r2, #0
 8009000:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009004:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009008:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800900c:	4642      	mov	r2, r8
 800900e:	464b      	mov	r3, r9
 8009010:	1891      	adds	r1, r2, r2
 8009012:	63b9      	str	r1, [r7, #56]	; 0x38
 8009014:	415b      	adcs	r3, r3
 8009016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009018:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800901c:	4641      	mov	r1, r8
 800901e:	1851      	adds	r1, r2, r1
 8009020:	6339      	str	r1, [r7, #48]	; 0x30
 8009022:	4649      	mov	r1, r9
 8009024:	414b      	adcs	r3, r1
 8009026:	637b      	str	r3, [r7, #52]	; 0x34
 8009028:	f04f 0200 	mov.w	r2, #0
 800902c:	f04f 0300 	mov.w	r3, #0
 8009030:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009034:	4659      	mov	r1, fp
 8009036:	00cb      	lsls	r3, r1, #3
 8009038:	4651      	mov	r1, sl
 800903a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800903e:	4651      	mov	r1, sl
 8009040:	00ca      	lsls	r2, r1, #3
 8009042:	4610      	mov	r0, r2
 8009044:	4619      	mov	r1, r3
 8009046:	4603      	mov	r3, r0
 8009048:	4642      	mov	r2, r8
 800904a:	189b      	adds	r3, r3, r2
 800904c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009050:	464b      	mov	r3, r9
 8009052:	460a      	mov	r2, r1
 8009054:	eb42 0303 	adc.w	r3, r2, r3
 8009058:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800905c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009068:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800906c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009070:	460b      	mov	r3, r1
 8009072:	18db      	adds	r3, r3, r3
 8009074:	62bb      	str	r3, [r7, #40]	; 0x28
 8009076:	4613      	mov	r3, r2
 8009078:	eb42 0303 	adc.w	r3, r2, r3
 800907c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800907e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009082:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009086:	f7f7 f90b 	bl	80002a0 <__aeabi_uldivmod>
 800908a:	4602      	mov	r2, r0
 800908c:	460b      	mov	r3, r1
 800908e:	4b0d      	ldr	r3, [pc, #52]	; (80090c4 <UART_SetConfig+0x2d4>)
 8009090:	fba3 1302 	umull	r1, r3, r3, r2
 8009094:	095b      	lsrs	r3, r3, #5
 8009096:	2164      	movs	r1, #100	; 0x64
 8009098:	fb01 f303 	mul.w	r3, r1, r3
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	00db      	lsls	r3, r3, #3
 80090a0:	3332      	adds	r3, #50	; 0x32
 80090a2:	4a08      	ldr	r2, [pc, #32]	; (80090c4 <UART_SetConfig+0x2d4>)
 80090a4:	fba2 2303 	umull	r2, r3, r2, r3
 80090a8:	095b      	lsrs	r3, r3, #5
 80090aa:	f003 0207 	and.w	r2, r3, #7
 80090ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4422      	add	r2, r4
 80090b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80090b8:	e105      	b.n	80092c6 <UART_SetConfig+0x4d6>
 80090ba:	bf00      	nop
 80090bc:	40011000 	.word	0x40011000
 80090c0:	40011400 	.word	0x40011400
 80090c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80090c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090cc:	2200      	movs	r2, #0
 80090ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80090d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80090d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80090da:	4642      	mov	r2, r8
 80090dc:	464b      	mov	r3, r9
 80090de:	1891      	adds	r1, r2, r2
 80090e0:	6239      	str	r1, [r7, #32]
 80090e2:	415b      	adcs	r3, r3
 80090e4:	627b      	str	r3, [r7, #36]	; 0x24
 80090e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80090ea:	4641      	mov	r1, r8
 80090ec:	1854      	adds	r4, r2, r1
 80090ee:	4649      	mov	r1, r9
 80090f0:	eb43 0501 	adc.w	r5, r3, r1
 80090f4:	f04f 0200 	mov.w	r2, #0
 80090f8:	f04f 0300 	mov.w	r3, #0
 80090fc:	00eb      	lsls	r3, r5, #3
 80090fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009102:	00e2      	lsls	r2, r4, #3
 8009104:	4614      	mov	r4, r2
 8009106:	461d      	mov	r5, r3
 8009108:	4643      	mov	r3, r8
 800910a:	18e3      	adds	r3, r4, r3
 800910c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009110:	464b      	mov	r3, r9
 8009112:	eb45 0303 	adc.w	r3, r5, r3
 8009116:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800911a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009126:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800912a:	f04f 0200 	mov.w	r2, #0
 800912e:	f04f 0300 	mov.w	r3, #0
 8009132:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009136:	4629      	mov	r1, r5
 8009138:	008b      	lsls	r3, r1, #2
 800913a:	4621      	mov	r1, r4
 800913c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009140:	4621      	mov	r1, r4
 8009142:	008a      	lsls	r2, r1, #2
 8009144:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009148:	f7f7 f8aa 	bl	80002a0 <__aeabi_uldivmod>
 800914c:	4602      	mov	r2, r0
 800914e:	460b      	mov	r3, r1
 8009150:	4b60      	ldr	r3, [pc, #384]	; (80092d4 <UART_SetConfig+0x4e4>)
 8009152:	fba3 2302 	umull	r2, r3, r3, r2
 8009156:	095b      	lsrs	r3, r3, #5
 8009158:	011c      	lsls	r4, r3, #4
 800915a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800915e:	2200      	movs	r2, #0
 8009160:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009164:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009168:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800916c:	4642      	mov	r2, r8
 800916e:	464b      	mov	r3, r9
 8009170:	1891      	adds	r1, r2, r2
 8009172:	61b9      	str	r1, [r7, #24]
 8009174:	415b      	adcs	r3, r3
 8009176:	61fb      	str	r3, [r7, #28]
 8009178:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800917c:	4641      	mov	r1, r8
 800917e:	1851      	adds	r1, r2, r1
 8009180:	6139      	str	r1, [r7, #16]
 8009182:	4649      	mov	r1, r9
 8009184:	414b      	adcs	r3, r1
 8009186:	617b      	str	r3, [r7, #20]
 8009188:	f04f 0200 	mov.w	r2, #0
 800918c:	f04f 0300 	mov.w	r3, #0
 8009190:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009194:	4659      	mov	r1, fp
 8009196:	00cb      	lsls	r3, r1, #3
 8009198:	4651      	mov	r1, sl
 800919a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800919e:	4651      	mov	r1, sl
 80091a0:	00ca      	lsls	r2, r1, #3
 80091a2:	4610      	mov	r0, r2
 80091a4:	4619      	mov	r1, r3
 80091a6:	4603      	mov	r3, r0
 80091a8:	4642      	mov	r2, r8
 80091aa:	189b      	adds	r3, r3, r2
 80091ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80091b0:	464b      	mov	r3, r9
 80091b2:	460a      	mov	r2, r1
 80091b4:	eb42 0303 	adc.w	r3, r2, r3
 80091b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80091bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80091c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80091c8:	f04f 0200 	mov.w	r2, #0
 80091cc:	f04f 0300 	mov.w	r3, #0
 80091d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80091d4:	4649      	mov	r1, r9
 80091d6:	008b      	lsls	r3, r1, #2
 80091d8:	4641      	mov	r1, r8
 80091da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091de:	4641      	mov	r1, r8
 80091e0:	008a      	lsls	r2, r1, #2
 80091e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80091e6:	f7f7 f85b 	bl	80002a0 <__aeabi_uldivmod>
 80091ea:	4602      	mov	r2, r0
 80091ec:	460b      	mov	r3, r1
 80091ee:	4b39      	ldr	r3, [pc, #228]	; (80092d4 <UART_SetConfig+0x4e4>)
 80091f0:	fba3 1302 	umull	r1, r3, r3, r2
 80091f4:	095b      	lsrs	r3, r3, #5
 80091f6:	2164      	movs	r1, #100	; 0x64
 80091f8:	fb01 f303 	mul.w	r3, r1, r3
 80091fc:	1ad3      	subs	r3, r2, r3
 80091fe:	011b      	lsls	r3, r3, #4
 8009200:	3332      	adds	r3, #50	; 0x32
 8009202:	4a34      	ldr	r2, [pc, #208]	; (80092d4 <UART_SetConfig+0x4e4>)
 8009204:	fba2 2303 	umull	r2, r3, r2, r3
 8009208:	095b      	lsrs	r3, r3, #5
 800920a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800920e:	441c      	add	r4, r3
 8009210:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009214:	2200      	movs	r2, #0
 8009216:	673b      	str	r3, [r7, #112]	; 0x70
 8009218:	677a      	str	r2, [r7, #116]	; 0x74
 800921a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800921e:	4642      	mov	r2, r8
 8009220:	464b      	mov	r3, r9
 8009222:	1891      	adds	r1, r2, r2
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	415b      	adcs	r3, r3
 8009228:	60fb      	str	r3, [r7, #12]
 800922a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800922e:	4641      	mov	r1, r8
 8009230:	1851      	adds	r1, r2, r1
 8009232:	6039      	str	r1, [r7, #0]
 8009234:	4649      	mov	r1, r9
 8009236:	414b      	adcs	r3, r1
 8009238:	607b      	str	r3, [r7, #4]
 800923a:	f04f 0200 	mov.w	r2, #0
 800923e:	f04f 0300 	mov.w	r3, #0
 8009242:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009246:	4659      	mov	r1, fp
 8009248:	00cb      	lsls	r3, r1, #3
 800924a:	4651      	mov	r1, sl
 800924c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009250:	4651      	mov	r1, sl
 8009252:	00ca      	lsls	r2, r1, #3
 8009254:	4610      	mov	r0, r2
 8009256:	4619      	mov	r1, r3
 8009258:	4603      	mov	r3, r0
 800925a:	4642      	mov	r2, r8
 800925c:	189b      	adds	r3, r3, r2
 800925e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009260:	464b      	mov	r3, r9
 8009262:	460a      	mov	r2, r1
 8009264:	eb42 0303 	adc.w	r3, r2, r3
 8009268:	66fb      	str	r3, [r7, #108]	; 0x6c
 800926a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	663b      	str	r3, [r7, #96]	; 0x60
 8009274:	667a      	str	r2, [r7, #100]	; 0x64
 8009276:	f04f 0200 	mov.w	r2, #0
 800927a:	f04f 0300 	mov.w	r3, #0
 800927e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009282:	4649      	mov	r1, r9
 8009284:	008b      	lsls	r3, r1, #2
 8009286:	4641      	mov	r1, r8
 8009288:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800928c:	4641      	mov	r1, r8
 800928e:	008a      	lsls	r2, r1, #2
 8009290:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009294:	f7f7 f804 	bl	80002a0 <__aeabi_uldivmod>
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	4b0d      	ldr	r3, [pc, #52]	; (80092d4 <UART_SetConfig+0x4e4>)
 800929e:	fba3 1302 	umull	r1, r3, r3, r2
 80092a2:	095b      	lsrs	r3, r3, #5
 80092a4:	2164      	movs	r1, #100	; 0x64
 80092a6:	fb01 f303 	mul.w	r3, r1, r3
 80092aa:	1ad3      	subs	r3, r2, r3
 80092ac:	011b      	lsls	r3, r3, #4
 80092ae:	3332      	adds	r3, #50	; 0x32
 80092b0:	4a08      	ldr	r2, [pc, #32]	; (80092d4 <UART_SetConfig+0x4e4>)
 80092b2:	fba2 2303 	umull	r2, r3, r2, r3
 80092b6:	095b      	lsrs	r3, r3, #5
 80092b8:	f003 020f 	and.w	r2, r3, #15
 80092bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4422      	add	r2, r4
 80092c4:	609a      	str	r2, [r3, #8]
}
 80092c6:	bf00      	nop
 80092c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80092cc:	46bd      	mov	sp, r7
 80092ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092d2:	bf00      	nop
 80092d4:	51eb851f 	.word	0x51eb851f

080092d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80092d8:	b084      	sub	sp, #16
 80092da:	b580      	push	{r7, lr}
 80092dc:	b084      	sub	sp, #16
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
 80092e2:	f107 001c 	add.w	r0, r7, #28
 80092e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80092ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d122      	bne.n	8009336 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800931a:	2b01      	cmp	r3, #1
 800931c:	d105      	bne.n	800932a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 f9c0 	bl	80096b0 <USB_CoreReset>
 8009330:	4603      	mov	r3, r0
 8009332:	73fb      	strb	r3, [r7, #15]
 8009334:	e01a      	b.n	800936c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f9b4 	bl	80096b0 <USB_CoreReset>
 8009348:	4603      	mov	r3, r0
 800934a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800934c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800934e:	2b00      	cmp	r3, #0
 8009350:	d106      	bne.n	8009360 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009356:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	639a      	str	r2, [r3, #56]	; 0x38
 800935e:	e005      	b.n	800936c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009364:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800936c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800936e:	2b01      	cmp	r3, #1
 8009370:	d10b      	bne.n	800938a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	f043 0206 	orr.w	r2, r3, #6
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f043 0220 	orr.w	r2, r3, #32
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800938a:	7bfb      	ldrb	r3, [r7, #15]
}
 800938c:	4618      	mov	r0, r3
 800938e:	3710      	adds	r7, #16
 8009390:	46bd      	mov	sp, r7
 8009392:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009396:	b004      	add	sp, #16
 8009398:	4770      	bx	lr

0800939a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800939a:	b480      	push	{r7}
 800939c:	b083      	sub	sp, #12
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	f043 0201 	orr.w	r2, r3, #1
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	f023 0201 	bic.w	r2, r3, #1
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	370c      	adds	r7, #12
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr

080093de <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b084      	sub	sp, #16
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
 80093e6:	460b      	mov	r3, r1
 80093e8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80093ea:	2300      	movs	r3, #0
 80093ec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80093fa:	78fb      	ldrb	r3, [r7, #3]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d115      	bne.n	800942c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800940c:	2001      	movs	r0, #1
 800940e:	f7fa f897 	bl	8003540 <HAL_Delay>
      ms++;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	3301      	adds	r3, #1
 8009416:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 f93a 	bl	8009692 <USB_GetMode>
 800941e:	4603      	mov	r3, r0
 8009420:	2b01      	cmp	r3, #1
 8009422:	d01e      	beq.n	8009462 <USB_SetCurrentMode+0x84>
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2b31      	cmp	r3, #49	; 0x31
 8009428:	d9f0      	bls.n	800940c <USB_SetCurrentMode+0x2e>
 800942a:	e01a      	b.n	8009462 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800942c:	78fb      	ldrb	r3, [r7, #3]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d115      	bne.n	800945e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800943e:	2001      	movs	r0, #1
 8009440:	f7fa f87e 	bl	8003540 <HAL_Delay>
      ms++;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	3301      	adds	r3, #1
 8009448:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f921 	bl	8009692 <USB_GetMode>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d005      	beq.n	8009462 <USB_SetCurrentMode+0x84>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2b31      	cmp	r3, #49	; 0x31
 800945a:	d9f0      	bls.n	800943e <USB_SetCurrentMode+0x60>
 800945c:	e001      	b.n	8009462 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	e005      	b.n	800946e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2b32      	cmp	r3, #50	; 0x32
 8009466:	d101      	bne.n	800946c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	e000      	b.n	800946e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800946c:	2300      	movs	r3, #0
}
 800946e:	4618      	mov	r0, r3
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
	...

08009478 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009478:	b480      	push	{r7}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009482:	2300      	movs	r3, #0
 8009484:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	3301      	adds	r3, #1
 800948a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	4a13      	ldr	r2, [pc, #76]	; (80094dc <USB_FlushTxFifo+0x64>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d901      	bls.n	8009498 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009494:	2303      	movs	r3, #3
 8009496:	e01b      	b.n	80094d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	691b      	ldr	r3, [r3, #16]
 800949c:	2b00      	cmp	r3, #0
 800949e:	daf2      	bge.n	8009486 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80094a0:	2300      	movs	r3, #0
 80094a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	019b      	lsls	r3, r3, #6
 80094a8:	f043 0220 	orr.w	r2, r3, #32
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	3301      	adds	r3, #1
 80094b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	4a08      	ldr	r2, [pc, #32]	; (80094dc <USB_FlushTxFifo+0x64>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d901      	bls.n	80094c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80094be:	2303      	movs	r3, #3
 80094c0:	e006      	b.n	80094d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	691b      	ldr	r3, [r3, #16]
 80094c6:	f003 0320 	and.w	r3, r3, #32
 80094ca:	2b20      	cmp	r3, #32
 80094cc:	d0f0      	beq.n	80094b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3714      	adds	r7, #20
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr
 80094dc:	00030d40 	.word	0x00030d40

080094e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094e8:	2300      	movs	r3, #0
 80094ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	3301      	adds	r3, #1
 80094f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	4a11      	ldr	r2, [pc, #68]	; (800953c <USB_FlushRxFifo+0x5c>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d901      	bls.n	80094fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80094fa:	2303      	movs	r3, #3
 80094fc:	e018      	b.n	8009530 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	2b00      	cmp	r3, #0
 8009504:	daf2      	bge.n	80094ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009506:	2300      	movs	r3, #0
 8009508:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2210      	movs	r2, #16
 800950e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	3301      	adds	r3, #1
 8009514:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	4a08      	ldr	r2, [pc, #32]	; (800953c <USB_FlushRxFifo+0x5c>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d901      	bls.n	8009522 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800951e:	2303      	movs	r3, #3
 8009520:	e006      	b.n	8009530 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	f003 0310 	and.w	r3, r3, #16
 800952a:	2b10      	cmp	r3, #16
 800952c:	d0f0      	beq.n	8009510 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3714      	adds	r7, #20
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr
 800953c:	00030d40 	.word	0x00030d40

08009540 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009540:	b480      	push	{r7}
 8009542:	b089      	sub	sp, #36	; 0x24
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	4611      	mov	r1, r2
 800954c:	461a      	mov	r2, r3
 800954e:	460b      	mov	r3, r1
 8009550:	71fb      	strb	r3, [r7, #7]
 8009552:	4613      	mov	r3, r2
 8009554:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800955e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009562:	2b00      	cmp	r3, #0
 8009564:	d123      	bne.n	80095ae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009566:	88bb      	ldrh	r3, [r7, #4]
 8009568:	3303      	adds	r3, #3
 800956a:	089b      	lsrs	r3, r3, #2
 800956c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800956e:	2300      	movs	r3, #0
 8009570:	61bb      	str	r3, [r7, #24]
 8009572:	e018      	b.n	80095a6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009574:	79fb      	ldrb	r3, [r7, #7]
 8009576:	031a      	lsls	r2, r3, #12
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	4413      	add	r3, r2
 800957c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009580:	461a      	mov	r2, r3
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009588:	69fb      	ldr	r3, [r7, #28]
 800958a:	3301      	adds	r3, #1
 800958c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	3301      	adds	r3, #1
 8009592:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	3301      	adds	r3, #1
 8009598:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800959a:	69fb      	ldr	r3, [r7, #28]
 800959c:	3301      	adds	r3, #1
 800959e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	3301      	adds	r3, #1
 80095a4:	61bb      	str	r3, [r7, #24]
 80095a6:	69ba      	ldr	r2, [r7, #24]
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d3e2      	bcc.n	8009574 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3724      	adds	r7, #36	; 0x24
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80095bc:	b480      	push	{r7}
 80095be:	b08b      	sub	sp, #44	; 0x2c
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	60f8      	str	r0, [r7, #12]
 80095c4:	60b9      	str	r1, [r7, #8]
 80095c6:	4613      	mov	r3, r2
 80095c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80095d2:	88fb      	ldrh	r3, [r7, #6]
 80095d4:	089b      	lsrs	r3, r3, #2
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80095da:	88fb      	ldrh	r3, [r7, #6]
 80095dc:	f003 0303 	and.w	r3, r3, #3
 80095e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80095e2:	2300      	movs	r3, #0
 80095e4:	623b      	str	r3, [r7, #32]
 80095e6:	e014      	b.n	8009612 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80095f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f6:	3301      	adds	r3, #1
 80095f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80095fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fc:	3301      	adds	r3, #1
 80095fe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009602:	3301      	adds	r3, #1
 8009604:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009608:	3301      	adds	r3, #1
 800960a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800960c:	6a3b      	ldr	r3, [r7, #32]
 800960e:	3301      	adds	r3, #1
 8009610:	623b      	str	r3, [r7, #32]
 8009612:	6a3a      	ldr	r2, [r7, #32]
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	429a      	cmp	r2, r3
 8009618:	d3e6      	bcc.n	80095e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800961a:	8bfb      	ldrh	r3, [r7, #30]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d01e      	beq.n	800965e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009620:	2300      	movs	r3, #0
 8009622:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800962a:	461a      	mov	r2, r3
 800962c:	f107 0310 	add.w	r3, r7, #16
 8009630:	6812      	ldr	r2, [r2, #0]
 8009632:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009634:	693a      	ldr	r2, [r7, #16]
 8009636:	6a3b      	ldr	r3, [r7, #32]
 8009638:	b2db      	uxtb	r3, r3
 800963a:	00db      	lsls	r3, r3, #3
 800963c:	fa22 f303 	lsr.w	r3, r2, r3
 8009640:	b2da      	uxtb	r2, r3
 8009642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009644:	701a      	strb	r2, [r3, #0]
      i++;
 8009646:	6a3b      	ldr	r3, [r7, #32]
 8009648:	3301      	adds	r3, #1
 800964a:	623b      	str	r3, [r7, #32]
      pDest++;
 800964c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964e:	3301      	adds	r3, #1
 8009650:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009652:	8bfb      	ldrh	r3, [r7, #30]
 8009654:	3b01      	subs	r3, #1
 8009656:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009658:	8bfb      	ldrh	r3, [r7, #30]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d1ea      	bne.n	8009634 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800965e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009660:	4618      	mov	r0, r3
 8009662:	372c      	adds	r7, #44	; 0x2c
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800966c:	b480      	push	{r7}
 800966e:	b085      	sub	sp, #20
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	695b      	ldr	r3, [r3, #20]
 8009678:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	699b      	ldr	r3, [r3, #24]
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	4013      	ands	r3, r2
 8009682:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009684:	68fb      	ldr	r3, [r7, #12]
}
 8009686:	4618      	mov	r0, r3
 8009688:	3714      	adds	r7, #20
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr

08009692 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009692:	b480      	push	{r7}
 8009694:	b083      	sub	sp, #12
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	695b      	ldr	r3, [r3, #20]
 800969e:	f003 0301 	and.w	r3, r3, #1
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	370c      	adds	r7, #12
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr
	...

080096b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b085      	sub	sp, #20
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80096b8:	2300      	movs	r3, #0
 80096ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	3301      	adds	r3, #1
 80096c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	4a13      	ldr	r2, [pc, #76]	; (8009714 <USB_CoreReset+0x64>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d901      	bls.n	80096ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80096ca:	2303      	movs	r3, #3
 80096cc:	e01b      	b.n	8009706 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	691b      	ldr	r3, [r3, #16]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	daf2      	bge.n	80096bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80096d6:	2300      	movs	r3, #0
 80096d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	691b      	ldr	r3, [r3, #16]
 80096de:	f043 0201 	orr.w	r2, r3, #1
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	3301      	adds	r3, #1
 80096ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	4a09      	ldr	r2, [pc, #36]	; (8009714 <USB_CoreReset+0x64>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d901      	bls.n	80096f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80096f4:	2303      	movs	r3, #3
 80096f6:	e006      	b.n	8009706 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	691b      	ldr	r3, [r3, #16]
 80096fc:	f003 0301 	and.w	r3, r3, #1
 8009700:	2b01      	cmp	r3, #1
 8009702:	d0f0      	beq.n	80096e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3714      	adds	r7, #20
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop
 8009714:	00030d40 	.word	0x00030d40

08009718 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009718:	b084      	sub	sp, #16
 800971a:	b580      	push	{r7, lr}
 800971c:	b086      	sub	sp, #24
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
 8009722:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009726:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800972a:	2300      	movs	r3, #0
 800972c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009738:	461a      	mov	r2, r3
 800973a:	2300      	movs	r3, #0
 800973c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009742:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800974e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800975a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800976a:	2b00      	cmp	r3, #0
 800976c:	d018      	beq.n	80097a0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800976e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009770:	2b01      	cmp	r3, #1
 8009772:	d10a      	bne.n	800978a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	68fa      	ldr	r2, [r7, #12]
 800977e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009782:	f043 0304 	orr.w	r3, r3, #4
 8009786:	6013      	str	r3, [r2, #0]
 8009788:	e014      	b.n	80097b4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009798:	f023 0304 	bic.w	r3, r3, #4
 800979c:	6013      	str	r3, [r2, #0]
 800979e:	e009      	b.n	80097b4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80097ae:	f023 0304 	bic.w	r3, r3, #4
 80097b2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80097b4:	2110      	movs	r1, #16
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f7ff fe5e 	bl	8009478 <USB_FlushTxFifo>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d001      	beq.n	80097c6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f7ff fe8a 	bl	80094e0 <USB_FlushRxFifo>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d001      	beq.n	80097d6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80097d6:	2300      	movs	r3, #0
 80097d8:	613b      	str	r3, [r7, #16]
 80097da:	e015      	b.n	8009808 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	015a      	lsls	r2, r3, #5
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	4413      	add	r3, r2
 80097e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097e8:	461a      	mov	r2, r3
 80097ea:	f04f 33ff 	mov.w	r3, #4294967295
 80097ee:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	015a      	lsls	r2, r3, #5
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	4413      	add	r3, r2
 80097f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097fc:	461a      	mov	r2, r3
 80097fe:	2300      	movs	r3, #0
 8009800:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	3301      	adds	r3, #1
 8009806:	613b      	str	r3, [r7, #16]
 8009808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980a:	693a      	ldr	r2, [r7, #16]
 800980c:	429a      	cmp	r2, r3
 800980e:	d3e5      	bcc.n	80097dc <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f04f 32ff 	mov.w	r2, #4294967295
 800981c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00b      	beq.n	8009842 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009830:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	4a13      	ldr	r2, [pc, #76]	; (8009884 <USB_HostInit+0x16c>)
 8009836:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4a13      	ldr	r2, [pc, #76]	; (8009888 <USB_HostInit+0x170>)
 800983c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009840:	e009      	b.n	8009856 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2280      	movs	r2, #128	; 0x80
 8009846:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4a10      	ldr	r2, [pc, #64]	; (800988c <USB_HostInit+0x174>)
 800984c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a0f      	ldr	r2, [pc, #60]	; (8009890 <USB_HostInit+0x178>)
 8009852:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009858:	2b00      	cmp	r3, #0
 800985a:	d105      	bne.n	8009868 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	f043 0210 	orr.w	r2, r3, #16
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	699a      	ldr	r2, [r3, #24]
 800986c:	4b09      	ldr	r3, [pc, #36]	; (8009894 <USB_HostInit+0x17c>)
 800986e:	4313      	orrs	r3, r2
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009874:	7dfb      	ldrb	r3, [r7, #23]
}
 8009876:	4618      	mov	r0, r3
 8009878:	3718      	adds	r7, #24
 800987a:	46bd      	mov	sp, r7
 800987c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009880:	b004      	add	sp, #16
 8009882:	4770      	bx	lr
 8009884:	01000200 	.word	0x01000200
 8009888:	00e00300 	.word	0x00e00300
 800988c:	00600080 	.word	0x00600080
 8009890:	004000e0 	.word	0x004000e0
 8009894:	a3200008 	.word	0xa3200008

08009898 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	460b      	mov	r3, r1
 80098a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80098b6:	f023 0303 	bic.w	r3, r3, #3
 80098ba:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	78fb      	ldrb	r3, [r7, #3]
 80098c6:	f003 0303 	and.w	r3, r3, #3
 80098ca:	68f9      	ldr	r1, [r7, #12]
 80098cc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80098d0:	4313      	orrs	r3, r2
 80098d2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80098d4:	78fb      	ldrb	r3, [r7, #3]
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d107      	bne.n	80098ea <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098e0:	461a      	mov	r2, r3
 80098e2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80098e6:	6053      	str	r3, [r2, #4]
 80098e8:	e009      	b.n	80098fe <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80098ea:	78fb      	ldrb	r3, [r7, #3]
 80098ec:	2b02      	cmp	r3, #2
 80098ee:	d106      	bne.n	80098fe <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098f6:	461a      	mov	r2, r3
 80098f8:	f241 7370 	movw	r3, #6000	; 0x1770
 80098fc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80098fe:	2300      	movs	r3, #0
}
 8009900:	4618      	mov	r0, r3
 8009902:	3714      	adds	r7, #20
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009918:	2300      	movs	r3, #0
 800991a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800992c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	68fa      	ldr	r2, [r7, #12]
 8009932:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800993a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800993c:	2064      	movs	r0, #100	; 0x64
 800993e:	f7f9 fdff 	bl	8003540 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	68fa      	ldr	r2, [r7, #12]
 8009946:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800994a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800994e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009950:	200a      	movs	r0, #10
 8009952:	f7f9 fdf5 	bl	8003540 <HAL_Delay>

  return HAL_OK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009960:	b480      	push	{r7}
 8009962:	b085      	sub	sp, #20
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	460b      	mov	r3, r1
 800996a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009970:	2300      	movs	r3, #0
 8009972:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009984:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800998c:	2b00      	cmp	r3, #0
 800998e:	d109      	bne.n	80099a4 <USB_DriveVbus+0x44>
 8009990:	78fb      	ldrb	r3, [r7, #3]
 8009992:	2b01      	cmp	r3, #1
 8009994:	d106      	bne.n	80099a4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800999e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80099a2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80099aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099ae:	d109      	bne.n	80099c4 <USB_DriveVbus+0x64>
 80099b0:	78fb      	ldrb	r3, [r7, #3]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d106      	bne.n	80099c4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	68fa      	ldr	r2, [r7, #12]
 80099ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80099be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099c2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3714      	adds	r7, #20
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80099d2:	b480      	push	{r7}
 80099d4:	b085      	sub	sp, #20
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80099de:	2300      	movs	r3, #0
 80099e0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	0c5b      	lsrs	r3, r3, #17
 80099f0:	f003 0303 	and.w	r3, r3, #3
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3714      	adds	r7, #20
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	b29b      	uxth	r3, r3
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3714      	adds	r7, #20
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr
	...

08009a24 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b088      	sub	sp, #32
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	4608      	mov	r0, r1
 8009a2e:	4611      	mov	r1, r2
 8009a30:	461a      	mov	r2, r3
 8009a32:	4603      	mov	r3, r0
 8009a34:	70fb      	strb	r3, [r7, #3]
 8009a36:	460b      	mov	r3, r1
 8009a38:	70bb      	strb	r3, [r7, #2]
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009a46:	78fb      	ldrb	r3, [r7, #3]
 8009a48:	015a      	lsls	r2, r3, #5
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a52:	461a      	mov	r2, r3
 8009a54:	f04f 33ff 	mov.w	r3, #4294967295
 8009a58:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009a5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009a5e:	2b03      	cmp	r3, #3
 8009a60:	d87e      	bhi.n	8009b60 <USB_HC_Init+0x13c>
 8009a62:	a201      	add	r2, pc, #4	; (adr r2, 8009a68 <USB_HC_Init+0x44>)
 8009a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a68:	08009a79 	.word	0x08009a79
 8009a6c:	08009b23 	.word	0x08009b23
 8009a70:	08009a79 	.word	0x08009a79
 8009a74:	08009ae5 	.word	0x08009ae5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009a78:	78fb      	ldrb	r3, [r7, #3]
 8009a7a:	015a      	lsls	r2, r3, #5
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	4413      	add	r3, r2
 8009a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a84:	461a      	mov	r2, r3
 8009a86:	f240 439d 	movw	r3, #1181	; 0x49d
 8009a8a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009a8c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	da10      	bge.n	8009ab6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009a94:	78fb      	ldrb	r3, [r7, #3]
 8009a96:	015a      	lsls	r2, r3, #5
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	4413      	add	r3, r2
 8009a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	78fa      	ldrb	r2, [r7, #3]
 8009aa4:	0151      	lsls	r1, r2, #5
 8009aa6:	693a      	ldr	r2, [r7, #16]
 8009aa8:	440a      	add	r2, r1
 8009aaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ab2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009ab4:	e057      	b.n	8009b66 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d051      	beq.n	8009b66 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009ac2:	78fb      	ldrb	r3, [r7, #3]
 8009ac4:	015a      	lsls	r2, r3, #5
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	4413      	add	r3, r2
 8009aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ace:	68db      	ldr	r3, [r3, #12]
 8009ad0:	78fa      	ldrb	r2, [r7, #3]
 8009ad2:	0151      	lsls	r1, r2, #5
 8009ad4:	693a      	ldr	r2, [r7, #16]
 8009ad6:	440a      	add	r2, r1
 8009ad8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009adc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009ae0:	60d3      	str	r3, [r2, #12]
      break;
 8009ae2:	e040      	b.n	8009b66 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009ae4:	78fb      	ldrb	r3, [r7, #3]
 8009ae6:	015a      	lsls	r2, r3, #5
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	4413      	add	r3, r2
 8009aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009af0:	461a      	mov	r2, r3
 8009af2:	f240 639d 	movw	r3, #1693	; 0x69d
 8009af6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009af8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	da34      	bge.n	8009b6a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009b00:	78fb      	ldrb	r3, [r7, #3]
 8009b02:	015a      	lsls	r2, r3, #5
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	4413      	add	r3, r2
 8009b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b0c:	68db      	ldr	r3, [r3, #12]
 8009b0e:	78fa      	ldrb	r2, [r7, #3]
 8009b10:	0151      	lsls	r1, r2, #5
 8009b12:	693a      	ldr	r2, [r7, #16]
 8009b14:	440a      	add	r2, r1
 8009b16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b1e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009b20:	e023      	b.n	8009b6a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009b22:	78fb      	ldrb	r3, [r7, #3]
 8009b24:	015a      	lsls	r2, r3, #5
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	4413      	add	r3, r2
 8009b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b2e:	461a      	mov	r2, r3
 8009b30:	f240 2325 	movw	r3, #549	; 0x225
 8009b34:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009b36:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	da17      	bge.n	8009b6e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009b3e:	78fb      	ldrb	r3, [r7, #3]
 8009b40:	015a      	lsls	r2, r3, #5
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	4413      	add	r3, r2
 8009b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	78fa      	ldrb	r2, [r7, #3]
 8009b4e:	0151      	lsls	r1, r2, #5
 8009b50:	693a      	ldr	r2, [r7, #16]
 8009b52:	440a      	add	r2, r1
 8009b54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b58:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009b5c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009b5e:	e006      	b.n	8009b6e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	77fb      	strb	r3, [r7, #31]
      break;
 8009b64:	e004      	b.n	8009b70 <USB_HC_Init+0x14c>
      break;
 8009b66:	bf00      	nop
 8009b68:	e002      	b.n	8009b70 <USB_HC_Init+0x14c>
      break;
 8009b6a:	bf00      	nop
 8009b6c:	e000      	b.n	8009b70 <USB_HC_Init+0x14c>
      break;
 8009b6e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009b70:	78fb      	ldrb	r3, [r7, #3]
 8009b72:	015a      	lsls	r2, r3, #5
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	4413      	add	r3, r2
 8009b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	78fa      	ldrb	r2, [r7, #3]
 8009b80:	0151      	lsls	r1, r2, #5
 8009b82:	693a      	ldr	r2, [r7, #16]
 8009b84:	440a      	add	r2, r1
 8009b86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b8a:	f043 0302 	orr.w	r3, r3, #2
 8009b8e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b96:	699a      	ldr	r2, [r3, #24]
 8009b98:	78fb      	ldrb	r3, [r7, #3]
 8009b9a:	f003 030f 	and.w	r3, r3, #15
 8009b9e:	2101      	movs	r1, #1
 8009ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ba4:	6939      	ldr	r1, [r7, #16]
 8009ba6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009baa:	4313      	orrs	r3, r2
 8009bac:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	699b      	ldr	r3, [r3, #24]
 8009bb2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009bba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	da03      	bge.n	8009bca <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bc6:	61bb      	str	r3, [r7, #24]
 8009bc8:	e001      	b.n	8009bce <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f7ff feff 	bl	80099d2 <USB_GetHostSpeed>
 8009bd4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009bd6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009bda:	2b02      	cmp	r3, #2
 8009bdc:	d106      	bne.n	8009bec <USB_HC_Init+0x1c8>
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2b02      	cmp	r3, #2
 8009be2:	d003      	beq.n	8009bec <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009be4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009be8:	617b      	str	r3, [r7, #20]
 8009bea:	e001      	b.n	8009bf0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009bec:	2300      	movs	r3, #0
 8009bee:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009bf0:	787b      	ldrb	r3, [r7, #1]
 8009bf2:	059b      	lsls	r3, r3, #22
 8009bf4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009bf8:	78bb      	ldrb	r3, [r7, #2]
 8009bfa:	02db      	lsls	r3, r3, #11
 8009bfc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009c00:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009c02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009c06:	049b      	lsls	r3, r3, #18
 8009c08:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009c0c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009c0e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009c10:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009c14:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009c1a:	78fb      	ldrb	r3, [r7, #3]
 8009c1c:	0159      	lsls	r1, r3, #5
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	440b      	add	r3, r1
 8009c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c26:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009c2c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009c2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009c32:	2b03      	cmp	r3, #3
 8009c34:	d003      	beq.n	8009c3e <USB_HC_Init+0x21a>
 8009c36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d10f      	bne.n	8009c5e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009c3e:	78fb      	ldrb	r3, [r7, #3]
 8009c40:	015a      	lsls	r2, r3, #5
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	4413      	add	r3, r2
 8009c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	78fa      	ldrb	r2, [r7, #3]
 8009c4e:	0151      	lsls	r1, r2, #5
 8009c50:	693a      	ldr	r2, [r7, #16]
 8009c52:	440a      	add	r2, r1
 8009c54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c5c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009c5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3720      	adds	r7, #32
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b08c      	sub	sp, #48	; 0x30
 8009c6c:	af02      	add	r7, sp, #8
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	4613      	mov	r3, r2
 8009c74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	785b      	ldrb	r3, [r3, #1]
 8009c7e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009c80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c84:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d02d      	beq.n	8009cee <USB_HC_StartXfer+0x86>
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	791b      	ldrb	r3, [r3, #4]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d129      	bne.n	8009cee <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009c9a:	79fb      	ldrb	r3, [r7, #7]
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d117      	bne.n	8009cd0 <USB_HC_StartXfer+0x68>
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	79db      	ldrb	r3, [r3, #7]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d003      	beq.n	8009cb0 <USB_HC_StartXfer+0x48>
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	79db      	ldrb	r3, [r3, #7]
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	d10f      	bne.n	8009cd0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	015a      	lsls	r2, r3, #5
 8009cb4:	6a3b      	ldr	r3, [r7, #32]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	69fa      	ldr	r2, [r7, #28]
 8009cc0:	0151      	lsls	r1, r2, #5
 8009cc2:	6a3a      	ldr	r2, [r7, #32]
 8009cc4:	440a      	add	r2, r1
 8009cc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cce:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009cd0:	79fb      	ldrb	r3, [r7, #7]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d10b      	bne.n	8009cee <USB_HC_StartXfer+0x86>
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	795b      	ldrb	r3, [r3, #5]
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d107      	bne.n	8009cee <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	785b      	ldrb	r3, [r3, #1]
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f000 fa0f 	bl	800a108 <USB_DoPing>
      return HAL_OK;
 8009cea:	2300      	movs	r3, #0
 8009cec:	e0f8      	b.n	8009ee0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	695b      	ldr	r3, [r3, #20]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d018      	beq.n	8009d28 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	695b      	ldr	r3, [r3, #20]
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	8912      	ldrh	r2, [r2, #8]
 8009cfe:	4413      	add	r3, r2
 8009d00:	3b01      	subs	r3, #1
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	8912      	ldrh	r2, [r2, #8]
 8009d06:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d0a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009d0c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009d0e:	8b7b      	ldrh	r3, [r7, #26]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d90b      	bls.n	8009d2c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009d14:	8b7b      	ldrh	r3, [r7, #26]
 8009d16:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009d18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d1a:	68ba      	ldr	r2, [r7, #8]
 8009d1c:	8912      	ldrh	r2, [r2, #8]
 8009d1e:	fb03 f202 	mul.w	r2, r3, r2
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	611a      	str	r2, [r3, #16]
 8009d26:	e001      	b.n	8009d2c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	78db      	ldrb	r3, [r3, #3]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d007      	beq.n	8009d44 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009d34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d36:	68ba      	ldr	r2, [r7, #8]
 8009d38:	8912      	ldrh	r2, [r2, #8]
 8009d3a:	fb03 f202 	mul.w	r2, r3, r2
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	611a      	str	r2, [r3, #16]
 8009d42:	e003      	b.n	8009d4c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	695a      	ldr	r2, [r3, #20]
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	691b      	ldr	r3, [r3, #16]
 8009d50:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009d54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d56:	04d9      	lsls	r1, r3, #19
 8009d58:	4b63      	ldr	r3, [pc, #396]	; (8009ee8 <USB_HC_StartXfer+0x280>)
 8009d5a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009d5c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	7a9b      	ldrb	r3, [r3, #10]
 8009d62:	075b      	lsls	r3, r3, #29
 8009d64:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009d68:	69f9      	ldr	r1, [r7, #28]
 8009d6a:	0148      	lsls	r0, r1, #5
 8009d6c:	6a39      	ldr	r1, [r7, #32]
 8009d6e:	4401      	add	r1, r0
 8009d70:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009d74:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009d76:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009d78:	79fb      	ldrb	r3, [r7, #7]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d009      	beq.n	8009d92 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	68d9      	ldr	r1, [r3, #12]
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	015a      	lsls	r2, r3, #5
 8009d86:	6a3b      	ldr	r3, [r7, #32]
 8009d88:	4413      	add	r3, r2
 8009d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d8e:	460a      	mov	r2, r1
 8009d90:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009d92:	6a3b      	ldr	r3, [r7, #32]
 8009d94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d98:	689b      	ldr	r3, [r3, #8]
 8009d9a:	f003 0301 	and.w	r3, r3, #1
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	bf0c      	ite	eq
 8009da2:	2301      	moveq	r3, #1
 8009da4:	2300      	movne	r3, #0
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	015a      	lsls	r2, r3, #5
 8009dae:	6a3b      	ldr	r3, [r7, #32]
 8009db0:	4413      	add	r3, r2
 8009db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	69fa      	ldr	r2, [r7, #28]
 8009dba:	0151      	lsls	r1, r2, #5
 8009dbc:	6a3a      	ldr	r2, [r7, #32]
 8009dbe:	440a      	add	r2, r1
 8009dc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009dc4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009dc8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	015a      	lsls	r2, r3, #5
 8009dce:	6a3b      	ldr	r3, [r7, #32]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	7e7b      	ldrb	r3, [r7, #25]
 8009dda:	075b      	lsls	r3, r3, #29
 8009ddc:	69f9      	ldr	r1, [r7, #28]
 8009dde:	0148      	lsls	r0, r1, #5
 8009de0:	6a39      	ldr	r1, [r7, #32]
 8009de2:	4401      	add	r1, r0
 8009de4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009de8:	4313      	orrs	r3, r2
 8009dea:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	015a      	lsls	r2, r3, #5
 8009df0:	6a3b      	ldr	r3, [r7, #32]
 8009df2:	4413      	add	r3, r2
 8009df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009e02:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	78db      	ldrb	r3, [r3, #3]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d004      	beq.n	8009e16 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e12:	613b      	str	r3, [r7, #16]
 8009e14:	e003      	b.n	8009e1e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009e1c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e24:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009e26:	69fb      	ldr	r3, [r7, #28]
 8009e28:	015a      	lsls	r2, r3, #5
 8009e2a:	6a3b      	ldr	r3, [r7, #32]
 8009e2c:	4413      	add	r3, r2
 8009e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e32:	461a      	mov	r2, r3
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009e38:	79fb      	ldrb	r3, [r7, #7]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d001      	beq.n	8009e42 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	e04e      	b.n	8009ee0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	78db      	ldrb	r3, [r3, #3]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d149      	bne.n	8009ede <USB_HC_StartXfer+0x276>
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	695b      	ldr	r3, [r3, #20]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d045      	beq.n	8009ede <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	79db      	ldrb	r3, [r3, #7]
 8009e56:	2b03      	cmp	r3, #3
 8009e58:	d830      	bhi.n	8009ebc <USB_HC_StartXfer+0x254>
 8009e5a:	a201      	add	r2, pc, #4	; (adr r2, 8009e60 <USB_HC_StartXfer+0x1f8>)
 8009e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e60:	08009e71 	.word	0x08009e71
 8009e64:	08009e95 	.word	0x08009e95
 8009e68:	08009e71 	.word	0x08009e71
 8009e6c:	08009e95 	.word	0x08009e95
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	695b      	ldr	r3, [r3, #20]
 8009e74:	3303      	adds	r3, #3
 8009e76:	089b      	lsrs	r3, r3, #2
 8009e78:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009e7a:	8afa      	ldrh	r2, [r7, #22]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d91c      	bls.n	8009ec0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	699b      	ldr	r3, [r3, #24]
 8009e8a:	f043 0220 	orr.w	r2, r3, #32
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	619a      	str	r2, [r3, #24]
        }
        break;
 8009e92:	e015      	b.n	8009ec0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	695b      	ldr	r3, [r3, #20]
 8009e98:	3303      	adds	r3, #3
 8009e9a:	089b      	lsrs	r3, r3, #2
 8009e9c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009e9e:	8afa      	ldrh	r2, [r7, #22]
 8009ea0:	6a3b      	ldr	r3, [r7, #32]
 8009ea2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ea6:	691b      	ldr	r3, [r3, #16]
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d90a      	bls.n	8009ec4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	619a      	str	r2, [r3, #24]
        }
        break;
 8009eba:	e003      	b.n	8009ec4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009ebc:	bf00      	nop
 8009ebe:	e002      	b.n	8009ec6 <USB_HC_StartXfer+0x25e>
        break;
 8009ec0:	bf00      	nop
 8009ec2:	e000      	b.n	8009ec6 <USB_HC_StartXfer+0x25e>
        break;
 8009ec4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	68d9      	ldr	r1, [r3, #12]
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	785a      	ldrb	r2, [r3, #1]
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	695b      	ldr	r3, [r3, #20]
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	2000      	movs	r0, #0
 8009ed6:	9000      	str	r0, [sp, #0]
 8009ed8:	68f8      	ldr	r0, [r7, #12]
 8009eda:	f7ff fb31 	bl	8009540 <USB_WritePacket>
  }

  return HAL_OK;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3728      	adds	r7, #40	; 0x28
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	1ff80000 	.word	0x1ff80000

08009eec <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009efe:	695b      	ldr	r3, [r3, #20]
 8009f00:	b29b      	uxth	r3, r3
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3714      	adds	r7, #20
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr

08009f0e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009f0e:	b480      	push	{r7}
 8009f10:	b089      	sub	sp, #36	; 0x24
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
 8009f16:	460b      	mov	r3, r1
 8009f18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009f1e:	78fb      	ldrb	r3, [r7, #3]
 8009f20:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009f22:	2300      	movs	r3, #0
 8009f24:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	015a      	lsls	r2, r3, #5
 8009f2a:	69fb      	ldr	r3, [r7, #28]
 8009f2c:	4413      	add	r3, r2
 8009f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	0c9b      	lsrs	r3, r3, #18
 8009f36:	f003 0303 	and.w	r3, r3, #3
 8009f3a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	015a      	lsls	r2, r3, #5
 8009f40:	69fb      	ldr	r3, [r7, #28]
 8009f42:	4413      	add	r3, r2
 8009f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	0fdb      	lsrs	r3, r3, #31
 8009f4c:	f003 0301 	and.w	r3, r3, #1
 8009f50:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	f003 0320 	and.w	r3, r3, #32
 8009f5a:	2b20      	cmp	r3, #32
 8009f5c:	d104      	bne.n	8009f68 <USB_HC_Halt+0x5a>
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d101      	bne.n	8009f68 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009f64:	2300      	movs	r3, #0
 8009f66:	e0c8      	b.n	800a0fa <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d002      	beq.n	8009f74 <USB_HC_Halt+0x66>
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	2b02      	cmp	r3, #2
 8009f72:	d163      	bne.n	800a03c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	015a      	lsls	r2, r3, #5
 8009f78:	69fb      	ldr	r3, [r7, #28]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	69ba      	ldr	r2, [r7, #24]
 8009f84:	0151      	lsls	r1, r2, #5
 8009f86:	69fa      	ldr	r2, [r7, #28]
 8009f88:	440a      	add	r2, r1
 8009f8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f92:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	f003 0320 	and.w	r3, r3, #32
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	f040 80ab 	bne.w	800a0f8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d133      	bne.n	800a016 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009fae:	69bb      	ldr	r3, [r7, #24]
 8009fb0:	015a      	lsls	r2, r3, #5
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	69ba      	ldr	r2, [r7, #24]
 8009fbe:	0151      	lsls	r1, r2, #5
 8009fc0:	69fa      	ldr	r2, [r7, #28]
 8009fc2:	440a      	add	r2, r1
 8009fc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fcc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	015a      	lsls	r2, r3, #5
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	4413      	add	r3, r2
 8009fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	69ba      	ldr	r2, [r7, #24]
 8009fde:	0151      	lsls	r1, r2, #5
 8009fe0:	69fa      	ldr	r2, [r7, #28]
 8009fe2:	440a      	add	r2, r1
 8009fe4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fe8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009fec:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ffa:	d81d      	bhi.n	800a038 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	015a      	lsls	r2, r3, #5
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	4413      	add	r3, r2
 800a004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a00e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a012:	d0ec      	beq.n	8009fee <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a014:	e070      	b.n	800a0f8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	015a      	lsls	r2, r3, #5
 800a01a:	69fb      	ldr	r3, [r7, #28]
 800a01c:	4413      	add	r3, r2
 800a01e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	69ba      	ldr	r2, [r7, #24]
 800a026:	0151      	lsls	r1, r2, #5
 800a028:	69fa      	ldr	r2, [r7, #28]
 800a02a:	440a      	add	r2, r1
 800a02c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a030:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a034:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a036:	e05f      	b.n	800a0f8 <USB_HC_Halt+0x1ea>
            break;
 800a038:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a03a:	e05d      	b.n	800a0f8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a03c:	69bb      	ldr	r3, [r7, #24]
 800a03e:	015a      	lsls	r2, r3, #5
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	4413      	add	r3, r2
 800a044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	69ba      	ldr	r2, [r7, #24]
 800a04c:	0151      	lsls	r1, r2, #5
 800a04e:	69fa      	ldr	r2, [r7, #28]
 800a050:	440a      	add	r2, r1
 800a052:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a056:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a05a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a05c:	69fb      	ldr	r3, [r7, #28]
 800a05e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a062:	691b      	ldr	r3, [r3, #16]
 800a064:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d133      	bne.n	800a0d4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	015a      	lsls	r2, r3, #5
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	4413      	add	r3, r2
 800a074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	69ba      	ldr	r2, [r7, #24]
 800a07c:	0151      	lsls	r1, r2, #5
 800a07e:	69fa      	ldr	r2, [r7, #28]
 800a080:	440a      	add	r2, r1
 800a082:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a086:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a08a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a08c:	69bb      	ldr	r3, [r7, #24]
 800a08e:	015a      	lsls	r2, r3, #5
 800a090:	69fb      	ldr	r3, [r7, #28]
 800a092:	4413      	add	r3, r2
 800a094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	69ba      	ldr	r2, [r7, #24]
 800a09c:	0151      	lsls	r1, r2, #5
 800a09e:	69fa      	ldr	r2, [r7, #28]
 800a0a0:	440a      	add	r2, r1
 800a0a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a0aa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a0b8:	d81d      	bhi.n	800a0f6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	015a      	lsls	r2, r3, #5
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0d0:	d0ec      	beq.n	800a0ac <USB_HC_Halt+0x19e>
 800a0d2:	e011      	b.n	800a0f8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a0d4:	69bb      	ldr	r3, [r7, #24]
 800a0d6:	015a      	lsls	r2, r3, #5
 800a0d8:	69fb      	ldr	r3, [r7, #28]
 800a0da:	4413      	add	r3, r2
 800a0dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	69ba      	ldr	r2, [r7, #24]
 800a0e4:	0151      	lsls	r1, r2, #5
 800a0e6:	69fa      	ldr	r2, [r7, #28]
 800a0e8:	440a      	add	r2, r1
 800a0ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a0f2:	6013      	str	r3, [r2, #0]
 800a0f4:	e000      	b.n	800a0f8 <USB_HC_Halt+0x1ea>
          break;
 800a0f6:	bf00      	nop
    }
  }

  return HAL_OK;
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3724      	adds	r7, #36	; 0x24
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr
	...

0800a108 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a108:	b480      	push	{r7}
 800a10a:	b087      	sub	sp, #28
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	460b      	mov	r3, r1
 800a112:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a118:	78fb      	ldrb	r3, [r7, #3]
 800a11a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a11c:	2301      	movs	r3, #1
 800a11e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	04da      	lsls	r2, r3, #19
 800a124:	4b15      	ldr	r3, [pc, #84]	; (800a17c <USB_DoPing+0x74>)
 800a126:	4013      	ands	r3, r2
 800a128:	693a      	ldr	r2, [r7, #16]
 800a12a:	0151      	lsls	r1, r2, #5
 800a12c:	697a      	ldr	r2, [r7, #20]
 800a12e:	440a      	add	r2, r1
 800a130:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a138:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	015a      	lsls	r2, r3, #5
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	4413      	add	r3, r2
 800a142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a150:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a158:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	015a      	lsls	r2, r3, #5
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	4413      	add	r3, r2
 800a162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a166:	461a      	mov	r2, r3
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a16c:	2300      	movs	r3, #0
}
 800a16e:	4618      	mov	r0, r3
 800a170:	371c      	adds	r7, #28
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr
 800a17a:	bf00      	nop
 800a17c:	1ff80000 	.word	0x1ff80000

0800a180 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b088      	sub	sp, #32
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a188:	2300      	movs	r3, #0
 800a18a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a190:	2300      	movs	r3, #0
 800a192:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f7ff f911 	bl	80093bc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a19a:	2110      	movs	r1, #16
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f7ff f96b 	bl	8009478 <USB_FlushTxFifo>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d001      	beq.n	800a1ac <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f7ff f997 	bl	80094e0 <USB_FlushRxFifo>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d001      	beq.n	800a1bc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a1bc:	2300      	movs	r3, #0
 800a1be:	61bb      	str	r3, [r7, #24]
 800a1c0:	e01f      	b.n	800a202 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	015a      	lsls	r2, r3, #5
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	4413      	add	r3, r2
 800a1ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a1d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a1e0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a1e8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	015a      	lsls	r2, r3, #5
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a1fc:	69bb      	ldr	r3, [r7, #24]
 800a1fe:	3301      	adds	r3, #1
 800a200:	61bb      	str	r3, [r7, #24]
 800a202:	69bb      	ldr	r3, [r7, #24]
 800a204:	2b0f      	cmp	r3, #15
 800a206:	d9dc      	bls.n	800a1c2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a208:	2300      	movs	r3, #0
 800a20a:	61bb      	str	r3, [r7, #24]
 800a20c:	e034      	b.n	800a278 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	015a      	lsls	r2, r3, #5
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	4413      	add	r3, r2
 800a216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a224:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a22c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a234:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a236:	69bb      	ldr	r3, [r7, #24]
 800a238:	015a      	lsls	r2, r3, #5
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	4413      	add	r3, r2
 800a23e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a242:	461a      	mov	r2, r3
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	3301      	adds	r3, #1
 800a24c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a254:	d80c      	bhi.n	800a270 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	015a      	lsls	r2, r3, #5
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	4413      	add	r3, r2
 800a25e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a268:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a26c:	d0ec      	beq.n	800a248 <USB_StopHost+0xc8>
 800a26e:	e000      	b.n	800a272 <USB_StopHost+0xf2>
        break;
 800a270:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	3301      	adds	r3, #1
 800a276:	61bb      	str	r3, [r7, #24]
 800a278:	69bb      	ldr	r3, [r7, #24]
 800a27a:	2b0f      	cmp	r3, #15
 800a27c:	d9c7      	bls.n	800a20e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a284:	461a      	mov	r2, r3
 800a286:	f04f 33ff 	mov.w	r3, #4294967295
 800a28a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f04f 32ff 	mov.w	r2, #4294967295
 800a292:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f7ff f880 	bl	800939a <USB_EnableGlobalInt>

  return ret;
 800a29a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3720      	adds	r7, #32
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  //retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
	FATFS_LinkDriver(&SD0_Driver, SD0Path);
 800a2a8:	4908      	ldr	r1, [pc, #32]	; (800a2cc <MX_FATFS_Init+0x28>)
 800a2aa:	4809      	ldr	r0, [pc, #36]	; (800a2d0 <MX_FATFS_Init+0x2c>)
 800a2ac:	f007 fc22 	bl	8011af4 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD1_Driver, SD1Path);
 800a2b0:	4908      	ldr	r1, [pc, #32]	; (800a2d4 <MX_FATFS_Init+0x30>)
 800a2b2:	4809      	ldr	r0, [pc, #36]	; (800a2d8 <MX_FATFS_Init+0x34>)
 800a2b4:	f007 fc1e 	bl	8011af4 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD2_Driver, SD2Path);
 800a2b8:	4908      	ldr	r1, [pc, #32]	; (800a2dc <MX_FATFS_Init+0x38>)
 800a2ba:	4809      	ldr	r0, [pc, #36]	; (800a2e0 <MX_FATFS_Init+0x3c>)
 800a2bc:	f007 fc1a 	bl	8011af4 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD3_Driver, SD3Path);
 800a2c0:	4908      	ldr	r1, [pc, #32]	; (800a2e4 <MX_FATFS_Init+0x40>)
 800a2c2:	4809      	ldr	r0, [pc, #36]	; (800a2e8 <MX_FATFS_Init+0x44>)
 800a2c4:	f007 fc16 	bl	8011af4 <FATFS_LinkDriver>


  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a2c8:	bf00      	nop
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	20001e44 	.word	0x20001e44
 800a2d0:	20000240 	.word	0x20000240
 800a2d4:	20001e48 	.word	0x20001e48
 800a2d8:	20000254 	.word	0x20000254
 800a2dc:	20001e4c 	.word	0x20001e4c
 800a2e0:	20000268 	.word	0x20000268
 800a2e4:	20001e50 	.word	0x20001e50
 800a2e8:	2000027c 	.word	0x2000027c

0800a2ec <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a2f0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <SD0_initialize>:
  * @brief  Initializes a Drive
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS SD0_initialize (BYTE pdrv)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
 800a302:	4603      	mov	r3, r0
 800a304:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(0);
 800a306:	2000      	movs	r0, #0
 800a308:	f7f8 fa64 	bl	80027d4 <sd_ss_set_active>
	return USER_initialize(pdrv);
 800a30c:	79fb      	ldrb	r3, [r7, #7]
 800a30e:	4618      	mov	r0, r3
 800a310:	f000 f838 	bl	800a384 <USER_initialize>
 800a314:	4603      	mov	r3, r0
}
 800a316:	4618      	mov	r0, r3
 800a318:	3708      	adds	r7, #8
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}

0800a31e <SD1_initialize>:
DSTATUS SD1_initialize (BYTE pdrv)
{
 800a31e:	b580      	push	{r7, lr}
 800a320:	b082      	sub	sp, #8
 800a322:	af00      	add	r7, sp, #0
 800a324:	4603      	mov	r3, r0
 800a326:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(1);
 800a328:	2001      	movs	r0, #1
 800a32a:	f7f8 fa53 	bl	80027d4 <sd_ss_set_active>
	return USER_initialize(pdrv);
 800a32e:	79fb      	ldrb	r3, [r7, #7]
 800a330:	4618      	mov	r0, r3
 800a332:	f000 f827 	bl	800a384 <USER_initialize>
 800a336:	4603      	mov	r3, r0
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3708      	adds	r7, #8
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <SD2_initialize>:
DSTATUS SD2_initialize (BYTE pdrv)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	4603      	mov	r3, r0
 800a348:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(2);
 800a34a:	2002      	movs	r0, #2
 800a34c:	f7f8 fa42 	bl	80027d4 <sd_ss_set_active>
	return USER_initialize(pdrv);
 800a350:	79fb      	ldrb	r3, [r7, #7]
 800a352:	4618      	mov	r0, r3
 800a354:	f000 f816 	bl	800a384 <USER_initialize>
 800a358:	4603      	mov	r3, r0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3708      	adds	r7, #8
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <SD3_initialize>:
DSTATUS SD3_initialize (BYTE pdrv)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b082      	sub	sp, #8
 800a366:	af00      	add	r7, sp, #0
 800a368:	4603      	mov	r3, r0
 800a36a:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(3);
 800a36c:	2003      	movs	r0, #3
 800a36e:	f7f8 fa31 	bl	80027d4 <sd_ss_set_active>
	return USER_initialize(pdrv);
 800a372:	79fb      	ldrb	r3, [r7, #7]
 800a374:	4618      	mov	r0, r3
 800a376:	f000 f805 	bl	800a384 <USER_initialize>
 800a37a:	4603      	mov	r3, r0
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3708      	adds	r7, #8
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <USER_initialize>:

DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
 800a38a:	4603      	mov	r3, r0
 800a38c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	//SD_PowerOn();
	SS_SD_SELECT();
 800a38e:	f7f8 fa3f 	bl	8002810 <sd_ss_active_pin_down>
	if(sd_ini()==0) {Stat &= ~STA_NOINIT;} // STA_NOINIT
 800a392:	f7f8 fabf 	bl	8002914 <sd_ini>
 800a396:	4603      	mov	r3, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d107      	bne.n	800a3ac <USER_initialize+0x28>
 800a39c:	4b08      	ldr	r3, [pc, #32]	; (800a3c0 <USER_initialize+0x3c>)
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	f023 0301 	bic.w	r3, r3, #1
 800a3a6:	b2da      	uxtb	r2, r3
 800a3a8:	4b05      	ldr	r3, [pc, #20]	; (800a3c0 <USER_initialize+0x3c>)
 800a3aa:	701a      	strb	r2, [r3, #0]
	SS_SD_DESELECT();
 800a3ac:	f7f8 fa40 	bl	8002830 <sd_ss_active_pin_up>
    return Stat;
 800a3b0:	4b03      	ldr	r3, [pc, #12]	; (800a3c0 <USER_initialize+0x3c>)
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3708      	adds	r7, #8
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	2000023d 	.word	0x2000023d

0800a3c4 <SD0_status>:
  * @brief  Gets Disk Status
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS SD0_status (BYTE pdrv)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(0);
 800a3ce:	2000      	movs	r0, #0
 800a3d0:	f7f8 fa00 	bl	80027d4 <sd_ss_set_active>
	return USER_status(pdrv);
 800a3d4:	79fb      	ldrb	r3, [r7, #7]
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f000 f838 	bl	800a44c <USER_status>
 800a3dc:	4603      	mov	r3, r0
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3708      	adds	r7, #8
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}

0800a3e6 <SD1_status>:
DSTATUS SD1_status (BYTE pdrv)
{
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b082      	sub	sp, #8
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(1);
 800a3f0:	2001      	movs	r0, #1
 800a3f2:	f7f8 f9ef 	bl	80027d4 <sd_ss_set_active>
	return USER_status(pdrv);
 800a3f6:	79fb      	ldrb	r3, [r7, #7]
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f000 f827 	bl	800a44c <USER_status>
 800a3fe:	4603      	mov	r3, r0
}
 800a400:	4618      	mov	r0, r3
 800a402:	3708      	adds	r7, #8
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <SD2_status>:
DSTATUS SD2_status (BYTE pdrv)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	4603      	mov	r3, r0
 800a410:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(2);
 800a412:	2002      	movs	r0, #2
 800a414:	f7f8 f9de 	bl	80027d4 <sd_ss_set_active>
	return USER_status(pdrv);
 800a418:	79fb      	ldrb	r3, [r7, #7]
 800a41a:	4618      	mov	r0, r3
 800a41c:	f000 f816 	bl	800a44c <USER_status>
 800a420:	4603      	mov	r3, r0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3708      	adds	r7, #8
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <SD3_status>:
DSTATUS SD3_status (BYTE pdrv)
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b082      	sub	sp, #8
 800a42e:	af00      	add	r7, sp, #0
 800a430:	4603      	mov	r3, r0
 800a432:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(3);
 800a434:	2003      	movs	r0, #3
 800a436:	f7f8 f9cd 	bl	80027d4 <sd_ss_set_active>
	return USER_status(pdrv);
 800a43a:	79fb      	ldrb	r3, [r7, #7]
 800a43c:	4618      	mov	r0, r3
 800a43e:	f000 f805 	bl	800a44c <USER_status>
 800a442:	4603      	mov	r3, r0
}
 800a444:	4618      	mov	r0, r3
 800a446:	3708      	adds	r7, #8
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <USER_status>:

DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0
 800a452:	4603      	mov	r3, r0
 800a454:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	SS_SD_SELECT();
 800a456:	f7f8 f9db 	bl	8002810 <sd_ss_active_pin_down>
	if (pdrv) return STA_NOINIT;
 800a45a:	79fb      	ldrb	r3, [r7, #7]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d001      	beq.n	800a464 <USER_status+0x18>
 800a460:	2301      	movs	r3, #1
 800a462:	e004      	b.n	800a46e <USER_status+0x22>
	SS_SD_DESELECT();
 800a464:	f7f8 f9e4 	bl	8002830 <sd_ss_active_pin_up>
    return Stat;
 800a468:	4b03      	ldr	r3, [pc, #12]	; (800a478 <USER_status+0x2c>)
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3708      	adds	r7, #8
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	2000023d 	.word	0x2000023d

0800a47c <SD0_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DSTATUS SD0_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	60b9      	str	r1, [r7, #8]
 800a484:	607a      	str	r2, [r7, #4]
 800a486:	603b      	str	r3, [r7, #0]
 800a488:	4603      	mov	r3, r0
 800a48a:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(0);
 800a48c:	2000      	movs	r0, #0
 800a48e:	f7f8 f9a1 	bl	80027d4 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 800a492:	7bf8      	ldrb	r0, [r7, #15]
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	687a      	ldr	r2, [r7, #4]
 800a498:	68b9      	ldr	r1, [r7, #8]
 800a49a:	f000 f847 	bl	800a52c <USER_read>
 800a49e:	4603      	mov	r3, r0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3710      	adds	r7, #16
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <SD1_read>:
DSTATUS SD1_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60b9      	str	r1, [r7, #8]
 800a4b0:	607a      	str	r2, [r7, #4]
 800a4b2:	603b      	str	r3, [r7, #0]
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(1);
 800a4b8:	2001      	movs	r0, #1
 800a4ba:	f7f8 f98b 	bl	80027d4 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 800a4be:	7bf8      	ldrb	r0, [r7, #15]
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	68b9      	ldr	r1, [r7, #8]
 800a4c6:	f000 f831 	bl	800a52c <USER_read>
 800a4ca:	4603      	mov	r3, r0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3710      	adds	r7, #16
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <SD2_read>:
DSTATUS SD2_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60b9      	str	r1, [r7, #8]
 800a4dc:	607a      	str	r2, [r7, #4]
 800a4de:	603b      	str	r3, [r7, #0]
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(2);
 800a4e4:	2002      	movs	r0, #2
 800a4e6:	f7f8 f975 	bl	80027d4 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 800a4ea:	7bf8      	ldrb	r0, [r7, #15]
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	68b9      	ldr	r1, [r7, #8]
 800a4f2:	f000 f81b 	bl	800a52c <USER_read>
 800a4f6:	4603      	mov	r3, r0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <SD3_read>:
DSTATUS SD3_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	60b9      	str	r1, [r7, #8]
 800a508:	607a      	str	r2, [r7, #4]
 800a50a:	603b      	str	r3, [r7, #0]
 800a50c:	4603      	mov	r3, r0
 800a50e:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(3);
 800a510:	2003      	movs	r0, #3
 800a512:	f7f8 f95f 	bl	80027d4 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 800a516:	7bf8      	ldrb	r0, [r7, #15]
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	68b9      	ldr	r1, [r7, #8]
 800a51e:	f000 f805 	bl	800a52c <USER_read>
 800a522:	4603      	mov	r3, r0
}
 800a524:	4618      	mov	r0, r3
 800a526:	3710      	adds	r7, #16
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	60b9      	str	r1, [r7, #8]
 800a534:	607a      	str	r2, [r7, #4]
 800a536:	603b      	str	r3, [r7, #0]
 800a538:	4603      	mov	r3, r0
 800a53a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	SS_SD_SELECT();
 800a53c:	f7f8 f968 	bl	8002810 <sd_ss_active_pin_down>
	if (pdrv || !count) return RES_PARERR;
 800a540:	7bfb      	ldrb	r3, [r7, #15]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d102      	bne.n	800a54c <USER_read+0x20>
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d101      	bne.n	800a550 <USER_read+0x24>
 800a54c:	2304      	movs	r3, #4
 800a54e:	e043      	b.n	800a5d8 <USER_read+0xac>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a550:	4b23      	ldr	r3, [pc, #140]	; (800a5e0 <USER_read+0xb4>)
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	b2db      	uxtb	r3, r3
 800a556:	f003 0301 	and.w	r3, r3, #1
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d001      	beq.n	800a562 <USER_read+0x36>
 800a55e:	2303      	movs	r3, #3
 800a560:	e03a      	b.n	800a5d8 <USER_read+0xac>
	if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 800a562:	4b20      	ldr	r3, [pc, #128]	; (800a5e4 <USER_read+0xb8>)
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	b2db      	uxtb	r3, r3
 800a568:	f003 0304 	and.w	r3, r3, #4
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d102      	bne.n	800a576 <USER_read+0x4a>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	025b      	lsls	r3, r3, #9
 800a574:	607b      	str	r3, [r7, #4]
	if (count == 1) /* Single block read */
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d106      	bne.n	800a58a <USER_read+0x5e>
	{
	  SD_Read_Block(buff,sector); //Ð¡Ñ‡Ð¸Ñ‚Ð°ÐµÐ¼ Ð±Ð»Ð¾Ðº Ð² Ð±ÑƒÑ„ÐµÑ€
 800a57c:	6879      	ldr	r1, [r7, #4]
 800a57e:	68b8      	ldr	r0, [r7, #8]
 800a580:	f7f8 fb01 	bl	8002b86 <SD_Read_Block>
	  count = 0;
 800a584:	2300      	movs	r3, #0
 800a586:	603b      	str	r3, [r7, #0]
 800a588:	e01c      	b.n	800a5c4 <USER_read+0x98>
	}
	else /* Multiple block read */
	{
		do{
			SD_Read_Block((BYTE*)buff,sector);
 800a58a:	6879      	ldr	r1, [r7, #4]
 800a58c:	68b8      	ldr	r0, [r7, #8]
 800a58e:	f7f8 fafa 	bl	8002b86 <SD_Read_Block>
			if (!(sdinfo.type & 4)){
 800a592:	4b14      	ldr	r3, [pc, #80]	; (800a5e4 <USER_read+0xb8>)
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	b2db      	uxtb	r3, r3
 800a598:	f003 0304 	and.w	r3, r3, #4
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d104      	bne.n	800a5aa <USER_read+0x7e>
				sector+=512;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a5a6:	607b      	str	r3, [r7, #4]
 800a5a8:	e002      	b.n	800a5b0 <USER_read+0x84>
			}
			else sector++;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	607b      	str	r3, [r7, #4]
			buff+=512;
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a5b6:	60bb      	str	r3, [r7, #8]
			count--;
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	603b      	str	r3, [r7, #0]
		}while(count>0);
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d1e2      	bne.n	800a58a <USER_read+0x5e>
	}
	SPI_Release();
 800a5c4:	f7f8 fad8 	bl	8002b78 <SPI_Release>
	SS_SD_DESELECT();
 800a5c8:	f7f8 f932 	bl	8002830 <sd_ss_active_pin_up>
	return count ? RES_ERROR : RES_OK;
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	bf14      	ite	ne
 800a5d2:	2301      	movne	r3, #1
 800a5d4:	2300      	moveq	r3, #0
 800a5d6:	b2db      	uxtb	r3, r3
    return RES_OK;
  /* USER CODE END READ */
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3710      	adds	r7, #16
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	2000023d 	.word	0x2000023d
 800a5e4:	20001ba8 	.word	0x20001ba8

0800a5e8 <SD0_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DSTATUS SD0_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	60b9      	str	r1, [r7, #8]
 800a5f0:	607a      	str	r2, [r7, #4]
 800a5f2:	603b      	str	r3, [r7, #0]
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(0);
 800a5f8:	2000      	movs	r0, #0
 800a5fa:	f7f8 f8eb 	bl	80027d4 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 800a5fe:	7bf8      	ldrb	r0, [r7, #15]
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	68b9      	ldr	r1, [r7, #8]
 800a606:	f000 f847 	bl	800a698 <USER_write>
 800a60a:	4603      	mov	r3, r0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <SD1_write>:
DSTATUS SD1_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	60b9      	str	r1, [r7, #8]
 800a61c:	607a      	str	r2, [r7, #4]
 800a61e:	603b      	str	r3, [r7, #0]
 800a620:	4603      	mov	r3, r0
 800a622:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(1);
 800a624:	2001      	movs	r0, #1
 800a626:	f7f8 f8d5 	bl	80027d4 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 800a62a:	7bf8      	ldrb	r0, [r7, #15]
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	68b9      	ldr	r1, [r7, #8]
 800a632:	f000 f831 	bl	800a698 <USER_write>
 800a636:	4603      	mov	r3, r0
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3710      	adds	r7, #16
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <SD2_write>:
DSTATUS SD2_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	60b9      	str	r1, [r7, #8]
 800a648:	607a      	str	r2, [r7, #4]
 800a64a:	603b      	str	r3, [r7, #0]
 800a64c:	4603      	mov	r3, r0
 800a64e:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(2);
 800a650:	2002      	movs	r0, #2
 800a652:	f7f8 f8bf 	bl	80027d4 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 800a656:	7bf8      	ldrb	r0, [r7, #15]
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	68b9      	ldr	r1, [r7, #8]
 800a65e:	f000 f81b 	bl	800a698 <USER_write>
 800a662:	4603      	mov	r3, r0
}
 800a664:	4618      	mov	r0, r3
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <SD3_write>:
DSTATUS SD3_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	60b9      	str	r1, [r7, #8]
 800a674:	607a      	str	r2, [r7, #4]
 800a676:	603b      	str	r3, [r7, #0]
 800a678:	4603      	mov	r3, r0
 800a67a:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(3);
 800a67c:	2003      	movs	r0, #3
 800a67e:	f7f8 f8a9 	bl	80027d4 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 800a682:	7bf8      	ldrb	r0, [r7, #15]
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	68b9      	ldr	r1, [r7, #8]
 800a68a:	f000 f805 	bl	800a698 <USER_write>
 800a68e:	4603      	mov	r3, r0
}
 800a690:	4618      	mov	r0, r3
 800a692:	3710      	adds	r7, #16
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b086      	sub	sp, #24
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60b9      	str	r1, [r7, #8]
 800a6a0:	607a      	str	r2, [r7, #4]
 800a6a2:	603b      	str	r3, [r7, #0]
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	uint8_t res;
	SS_SD_SELECT();
 800a6a8:	f7f8 f8b2 	bl	8002810 <sd_ss_active_pin_down>
	if (pdrv || !count) return RES_PARERR;
 800a6ac:	7bfb      	ldrb	r3, [r7, #15]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d102      	bne.n	800a6b8 <USER_write+0x20>
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d101      	bne.n	800a6bc <USER_write+0x24>
 800a6b8:	2304      	movs	r3, #4
 800a6ba:	e02c      	b.n	800a716 <USER_write+0x7e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a6bc:	4b18      	ldr	r3, [pc, #96]	; (800a720 <USER_write+0x88>)
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	b2db      	uxtb	r3, r3
 800a6c2:	f003 0301 	and.w	r3, r3, #1
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d001      	beq.n	800a6ce <USER_write+0x36>
 800a6ca:	2303      	movs	r3, #3
 800a6cc:	e023      	b.n	800a716 <USER_write+0x7e>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800a6ce:	4b14      	ldr	r3, [pc, #80]	; (800a720 <USER_write+0x88>)
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	f003 0304 	and.w	r3, r3, #4
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d001      	beq.n	800a6e0 <USER_write+0x48>
 800a6dc:	2302      	movs	r3, #2
 800a6de:	e01a      	b.n	800a716 <USER_write+0x7e>
	if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 800a6e0:	4b10      	ldr	r3, [pc, #64]	; (800a724 <USER_write+0x8c>)
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	f003 0304 	and.w	r3, r3, #4
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d102      	bne.n	800a6f4 <USER_write+0x5c>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	025b      	lsls	r3, r3, #9
 800a6f2:	607b      	str	r3, [r7, #4]
  	res=SD_Write_Blocks((BYTE*)buff,sector,count);
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	6879      	ldr	r1, [r7, #4]
 800a6fc:	68b8      	ldr	r0, [r7, #8]
 800a6fe:	f7f8 fa87 	bl	8002c10 <SD_Write_Blocks>
 800a702:	4603      	mov	r3, r0
 800a704:	75fb      	strb	r3, [r7, #23]
	SS_SD_DESELECT();
 800a706:	f7f8 f893 	bl	8002830 <sd_ss_active_pin_up>

	return res ? RES_ERROR : RES_OK;
 800a70a:	7dfb      	ldrb	r3, [r7, #23]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	bf14      	ite	ne
 800a710:	2301      	movne	r3, #1
 800a712:	2300      	moveq	r3, #0
 800a714:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800a716:	4618      	mov	r0, r3
 800a718:	3718      	adds	r7, #24
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	2000023d 	.word	0x2000023d
 800a724:	20001ba8 	.word	0x20001ba8

0800a728 <SD0_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DSTATUS SD0_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b082      	sub	sp, #8
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	4603      	mov	r3, r0
 800a730:	603a      	str	r2, [r7, #0]
 800a732:	71fb      	strb	r3, [r7, #7]
 800a734:	460b      	mov	r3, r1
 800a736:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(0);
 800a738:	2000      	movs	r0, #0
 800a73a:	f7f8 f84b 	bl	80027d4 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 800a73e:	79b9      	ldrb	r1, [r7, #6]
 800a740:	79fb      	ldrb	r3, [r7, #7]
 800a742:	683a      	ldr	r2, [r7, #0]
 800a744:	4618      	mov	r0, r3
 800a746:	f000 f847 	bl	800a7d8 <USER_ioctl>
 800a74a:	4603      	mov	r3, r0
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3708      	adds	r7, #8
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <SD1_ioctl>:
DSTATUS SD1_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
 800a75a:	4603      	mov	r3, r0
 800a75c:	603a      	str	r2, [r7, #0]
 800a75e:	71fb      	strb	r3, [r7, #7]
 800a760:	460b      	mov	r3, r1
 800a762:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(1);
 800a764:	2001      	movs	r0, #1
 800a766:	f7f8 f835 	bl	80027d4 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 800a76a:	79b9      	ldrb	r1, [r7, #6]
 800a76c:	79fb      	ldrb	r3, [r7, #7]
 800a76e:	683a      	ldr	r2, [r7, #0]
 800a770:	4618      	mov	r0, r3
 800a772:	f000 f831 	bl	800a7d8 <USER_ioctl>
 800a776:	4603      	mov	r3, r0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3708      	adds	r7, #8
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <SD2_ioctl>:
DSTATUS SD2_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	4603      	mov	r3, r0
 800a788:	603a      	str	r2, [r7, #0]
 800a78a:	71fb      	strb	r3, [r7, #7]
 800a78c:	460b      	mov	r3, r1
 800a78e:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(2);
 800a790:	2002      	movs	r0, #2
 800a792:	f7f8 f81f 	bl	80027d4 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 800a796:	79b9      	ldrb	r1, [r7, #6]
 800a798:	79fb      	ldrb	r3, [r7, #7]
 800a79a:	683a      	ldr	r2, [r7, #0]
 800a79c:	4618      	mov	r0, r3
 800a79e:	f000 f81b 	bl	800a7d8 <USER_ioctl>
 800a7a2:	4603      	mov	r3, r0
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3708      	adds	r7, #8
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <SD3_ioctl>:
DSTATUS SD3_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	603a      	str	r2, [r7, #0]
 800a7b6:	71fb      	strb	r3, [r7, #7]
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(3);
 800a7bc:	2003      	movs	r0, #3
 800a7be:	f7f8 f809 	bl	80027d4 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 800a7c2:	79b9      	ldrb	r1, [r7, #6]
 800a7c4:	79fb      	ldrb	r3, [r7, #7]
 800a7c6:	683a      	ldr	r2, [r7, #0]
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f000 f805 	bl	800a7d8 <USER_ioctl>
 800a7ce:	4603      	mov	r3, r0
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3708      	adds	r7, #8
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	4603      	mov	r3, r0
 800a7e0:	603a      	str	r2, [r7, #0]
 800a7e2:	71fb      	strb	r3, [r7, #7]
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res;
	sd_ss_set_active(pdrv);
 800a7e8:	79fb      	ldrb	r3, [r7, #7]
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f7f7 fff2 	bl	80027d4 <sd_ss_set_active>
	SS_SD_SELECT();
 800a7f0:	f7f8 f80e 	bl	8002810 <sd_ss_active_pin_down>
	if (pdrv) return RES_PARERR;
 800a7f4:	79fb      	ldrb	r3, [r7, #7]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d001      	beq.n	800a7fe <USER_ioctl+0x26>
 800a7fa:	2304      	movs	r3, #4
 800a7fc:	e02a      	b.n	800a854 <USER_ioctl+0x7c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a7fe:	4b17      	ldr	r3, [pc, #92]	; (800a85c <USER_ioctl+0x84>)
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	b2db      	uxtb	r3, r3
 800a804:	f003 0301 	and.w	r3, r3, #1
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d001      	beq.n	800a810 <USER_ioctl+0x38>
 800a80c:	2303      	movs	r3, #3
 800a80e:	e021      	b.n	800a854 <USER_ioctl+0x7c>
	res = RES_ERROR;
 800a810:	2301      	movs	r3, #1
 800a812:	73fb      	strb	r3, [r7, #15]
	switch (cmd)
 800a814:	79bb      	ldrb	r3, [r7, #6]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d002      	beq.n	800a820 <USER_ioctl+0x48>
 800a81a:	2b02      	cmp	r3, #2
 800a81c:	d00a      	beq.n	800a834 <USER_ioctl+0x5c>
 800a81e:	e010      	b.n	800a842 <USER_ioctl+0x6a>
	{
	  case CTRL_SYNC : /* Flush dirty buffer if present */
	    SS_SD_SELECT();
 800a820:	f7f7 fff6 	bl	8002810 <sd_ss_active_pin_down>
	    if (SPI_wait_ready() == 0xFF)
 800a824:	f7f8 f931 	bl	8002a8a <SPI_wait_ready>
 800a828:	4603      	mov	r3, r0
 800a82a:	2bff      	cmp	r3, #255	; 0xff
 800a82c:	d10c      	bne.n	800a848 <USER_ioctl+0x70>
	    res = RES_OK;
 800a82e:	2300      	movs	r3, #0
 800a830:	73fb      	strb	r3, [r7, #15]
	    break;
 800a832:	e009      	b.n	800a848 <USER_ioctl+0x70>
	  case GET_SECTOR_SIZE : /* Get sectors on the disk (WORD) */
	    *(WORD*)buff = 512;
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a83a:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 800a83c:	2300      	movs	r3, #0
 800a83e:	73fb      	strb	r3, [r7, #15]
	    break;
 800a840:	e003      	b.n	800a84a <USER_ioctl+0x72>
	  default:
	    res = RES_PARERR;
 800a842:	2304      	movs	r3, #4
 800a844:	73fb      	strb	r3, [r7, #15]
 800a846:	e000      	b.n	800a84a <USER_ioctl+0x72>
	    break;
 800a848:	bf00      	nop
	}
	SPI_Release();
 800a84a:	f7f8 f995 	bl	8002b78 <SPI_Release>
	SS_SD_DESELECT();
 800a84e:	f7f7 ffef 	bl	8002830 <sd_ss_active_pin_up>
    return res;
 800a852:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800a854:	4618      	mov	r0, r3
 800a856:	3710      	adds	r7, #16
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}
 800a85c:	2000023d 	.word	0x2000023d

0800a860 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a860:	b590      	push	{r4, r7, lr}
 800a862:	b089      	sub	sp, #36	; 0x24
 800a864:	af04      	add	r7, sp, #16
 800a866:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a868:	2301      	movs	r3, #1
 800a86a:	2202      	movs	r2, #2
 800a86c:	2102      	movs	r1, #2
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 fdb2 	bl	800b3d8 <USBH_FindInterface>
 800a874:	4603      	mov	r3, r0
 800a876:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a878:	7bfb      	ldrb	r3, [r7, #15]
 800a87a:	2bff      	cmp	r3, #255	; 0xff
 800a87c:	d002      	beq.n	800a884 <USBH_CDC_InterfaceInit+0x24>
 800a87e:	7bfb      	ldrb	r3, [r7, #15]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d901      	bls.n	800a888 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a884:	2302      	movs	r3, #2
 800a886:	e13d      	b.n	800ab04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a888:	7bfb      	ldrb	r3, [r7, #15]
 800a88a:	4619      	mov	r1, r3
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 fd87 	bl	800b3a0 <USBH_SelectInterface>
 800a892:	4603      	mov	r3, r0
 800a894:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a896:	7bbb      	ldrb	r3, [r7, #14]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d001      	beq.n	800a8a0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a89c:	2302      	movs	r3, #2
 800a89e:	e131      	b.n	800ab04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a8a6:	2050      	movs	r0, #80	; 0x50
 800a8a8:	f00a f930 	bl	8014b0c <malloc>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8b6:	69db      	ldr	r3, [r3, #28]
 800a8b8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d101      	bne.n	800a8c4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a8c0:	2302      	movs	r3, #2
 800a8c2:	e11f      	b.n	800ab04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a8c4:	2250      	movs	r2, #80	; 0x50
 800a8c6:	2100      	movs	r1, #0
 800a8c8:	68b8      	ldr	r0, [r7, #8]
 800a8ca:	f00a f93d 	bl	8014b48 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a8ce:	7bfb      	ldrb	r3, [r7, #15]
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	211a      	movs	r1, #26
 800a8d4:	fb01 f303 	mul.w	r3, r1, r3
 800a8d8:	4413      	add	r3, r2
 800a8da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	b25b      	sxtb	r3, r3
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	da15      	bge.n	800a912 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a8e6:	7bfb      	ldrb	r3, [r7, #15]
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	211a      	movs	r1, #26
 800a8ec:	fb01 f303 	mul.w	r3, r1, r3
 800a8f0:	4413      	add	r3, r2
 800a8f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a8f6:	781a      	ldrb	r2, [r3, #0]
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a8fc:	7bfb      	ldrb	r3, [r7, #15]
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	211a      	movs	r1, #26
 800a902:	fb01 f303 	mul.w	r3, r1, r3
 800a906:	4413      	add	r3, r2
 800a908:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a90c:	881a      	ldrh	r2, [r3, #0]
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	785b      	ldrb	r3, [r3, #1]
 800a916:	4619      	mov	r1, r3
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f002 fa82 	bl	800ce22 <USBH_AllocPipe>
 800a91e:	4603      	mov	r3, r0
 800a920:	461a      	mov	r2, r3
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	7819      	ldrb	r1, [r3, #0]
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	7858      	ldrb	r0, [r3, #1]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a93a:	68ba      	ldr	r2, [r7, #8]
 800a93c:	8952      	ldrh	r2, [r2, #10]
 800a93e:	9202      	str	r2, [sp, #8]
 800a940:	2203      	movs	r2, #3
 800a942:	9201      	str	r2, [sp, #4]
 800a944:	9300      	str	r3, [sp, #0]
 800a946:	4623      	mov	r3, r4
 800a948:	4602      	mov	r2, r0
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f002 fa3a 	bl	800cdc4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	2200      	movs	r2, #0
 800a956:	4619      	mov	r1, r3
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f009 ff29 	bl	80147b0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a95e:	2300      	movs	r3, #0
 800a960:	2200      	movs	r2, #0
 800a962:	210a      	movs	r1, #10
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 fd37 	bl	800b3d8 <USBH_FindInterface>
 800a96a:	4603      	mov	r3, r0
 800a96c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a96e:	7bfb      	ldrb	r3, [r7, #15]
 800a970:	2bff      	cmp	r3, #255	; 0xff
 800a972:	d002      	beq.n	800a97a <USBH_CDC_InterfaceInit+0x11a>
 800a974:	7bfb      	ldrb	r3, [r7, #15]
 800a976:	2b01      	cmp	r3, #1
 800a978:	d901      	bls.n	800a97e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a97a:	2302      	movs	r3, #2
 800a97c:	e0c2      	b.n	800ab04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a97e:	7bfb      	ldrb	r3, [r7, #15]
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	211a      	movs	r1, #26
 800a984:	fb01 f303 	mul.w	r3, r1, r3
 800a988:	4413      	add	r3, r2
 800a98a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	b25b      	sxtb	r3, r3
 800a992:	2b00      	cmp	r3, #0
 800a994:	da16      	bge.n	800a9c4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a996:	7bfb      	ldrb	r3, [r7, #15]
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	211a      	movs	r1, #26
 800a99c:	fb01 f303 	mul.w	r3, r1, r3
 800a9a0:	4413      	add	r3, r2
 800a9a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a9a6:	781a      	ldrb	r2, [r3, #0]
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a9ac:	7bfb      	ldrb	r3, [r7, #15]
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	211a      	movs	r1, #26
 800a9b2:	fb01 f303 	mul.w	r3, r1, r3
 800a9b6:	4413      	add	r3, r2
 800a9b8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a9bc:	881a      	ldrh	r2, [r3, #0]
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	835a      	strh	r2, [r3, #26]
 800a9c2:	e015      	b.n	800a9f0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a9c4:	7bfb      	ldrb	r3, [r7, #15]
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	211a      	movs	r1, #26
 800a9ca:	fb01 f303 	mul.w	r3, r1, r3
 800a9ce:	4413      	add	r3, r2
 800a9d0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a9d4:	781a      	ldrb	r2, [r3, #0]
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a9da:	7bfb      	ldrb	r3, [r7, #15]
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	211a      	movs	r1, #26
 800a9e0:	fb01 f303 	mul.w	r3, r1, r3
 800a9e4:	4413      	add	r3, r2
 800a9e6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a9ea:	881a      	ldrh	r2, [r3, #0]
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a9f0:	7bfb      	ldrb	r3, [r7, #15]
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	211a      	movs	r1, #26
 800a9f6:	fb01 f303 	mul.w	r3, r1, r3
 800a9fa:	4413      	add	r3, r2
 800a9fc:	f203 3356 	addw	r3, r3, #854	; 0x356
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	b25b      	sxtb	r3, r3
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	da16      	bge.n	800aa36 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800aa08:	7bfb      	ldrb	r3, [r7, #15]
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	211a      	movs	r1, #26
 800aa0e:	fb01 f303 	mul.w	r3, r1, r3
 800aa12:	4413      	add	r3, r2
 800aa14:	f203 3356 	addw	r3, r3, #854	; 0x356
 800aa18:	781a      	ldrb	r2, [r3, #0]
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800aa1e:	7bfb      	ldrb	r3, [r7, #15]
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	211a      	movs	r1, #26
 800aa24:	fb01 f303 	mul.w	r3, r1, r3
 800aa28:	4413      	add	r3, r2
 800aa2a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800aa2e:	881a      	ldrh	r2, [r3, #0]
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	835a      	strh	r2, [r3, #26]
 800aa34:	e015      	b.n	800aa62 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800aa36:	7bfb      	ldrb	r3, [r7, #15]
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	211a      	movs	r1, #26
 800aa3c:	fb01 f303 	mul.w	r3, r1, r3
 800aa40:	4413      	add	r3, r2
 800aa42:	f203 3356 	addw	r3, r3, #854	; 0x356
 800aa46:	781a      	ldrb	r2, [r3, #0]
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800aa4c:	7bfb      	ldrb	r3, [r7, #15]
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	211a      	movs	r1, #26
 800aa52:	fb01 f303 	mul.w	r3, r1, r3
 800aa56:	4413      	add	r3, r2
 800aa58:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800aa5c:	881a      	ldrh	r2, [r3, #0]
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	7b9b      	ldrb	r3, [r3, #14]
 800aa66:	4619      	mov	r1, r3
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f002 f9da 	bl	800ce22 <USBH_AllocPipe>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	461a      	mov	r2, r3
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	7bdb      	ldrb	r3, [r3, #15]
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f002 f9d0 	bl	800ce22 <USBH_AllocPipe>
 800aa82:	4603      	mov	r3, r0
 800aa84:	461a      	mov	r2, r3
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	7b59      	ldrb	r1, [r3, #13]
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	7b98      	ldrb	r0, [r3, #14]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aa9e:	68ba      	ldr	r2, [r7, #8]
 800aaa0:	8b12      	ldrh	r2, [r2, #24]
 800aaa2:	9202      	str	r2, [sp, #8]
 800aaa4:	2202      	movs	r2, #2
 800aaa6:	9201      	str	r2, [sp, #4]
 800aaa8:	9300      	str	r3, [sp, #0]
 800aaaa:	4623      	mov	r3, r4
 800aaac:	4602      	mov	r2, r0
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f002 f988 	bl	800cdc4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	7b19      	ldrb	r1, [r3, #12]
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	7bd8      	ldrb	r0, [r3, #15]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aac8:	68ba      	ldr	r2, [r7, #8]
 800aaca:	8b52      	ldrh	r2, [r2, #26]
 800aacc:	9202      	str	r2, [sp, #8]
 800aace:	2202      	movs	r2, #2
 800aad0:	9201      	str	r2, [sp, #4]
 800aad2:	9300      	str	r3, [sp, #0]
 800aad4:	4623      	mov	r3, r4
 800aad6:	4602      	mov	r2, r0
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f002 f973 	bl	800cdc4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	2200      	movs	r2, #0
 800aae2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	7b5b      	ldrb	r3, [r3, #13]
 800aaea:	2200      	movs	r2, #0
 800aaec:	4619      	mov	r1, r3
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f009 fe5e 	bl	80147b0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	7b1b      	ldrb	r3, [r3, #12]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	4619      	mov	r1, r3
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f009 fe57 	bl	80147b0 <USBH_LL_SetToggle>

  return USBH_OK;
 800ab02:	2300      	movs	r3, #0
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3714      	adds	r7, #20
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd90      	pop	{r4, r7, pc}

0800ab0c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab1a:	69db      	ldr	r3, [r3, #28]
 800ab1c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d00e      	beq.n	800ab44 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f002 f968 	bl	800ce02 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	4619      	mov	r1, r3
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f002 f993 	bl	800ce64 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2200      	movs	r2, #0
 800ab42:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	7b1b      	ldrb	r3, [r3, #12]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d00e      	beq.n	800ab6a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	7b1b      	ldrb	r3, [r3, #12]
 800ab50:	4619      	mov	r1, r3
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f002 f955 	bl	800ce02 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	7b1b      	ldrb	r3, [r3, #12]
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f002 f980 	bl	800ce64 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2200      	movs	r2, #0
 800ab68:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	7b5b      	ldrb	r3, [r3, #13]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00e      	beq.n	800ab90 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	7b5b      	ldrb	r3, [r3, #13]
 800ab76:	4619      	mov	r1, r3
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f002 f942 	bl	800ce02 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	7b5b      	ldrb	r3, [r3, #13]
 800ab82:	4619      	mov	r1, r3
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f002 f96d 	bl	800ce64 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab96:	69db      	ldr	r3, [r3, #28]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d00b      	beq.n	800abb4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aba2:	69db      	ldr	r3, [r3, #28]
 800aba4:	4618      	mov	r0, r3
 800aba6:	f009 ffb9 	bl	8014b1c <free>
    phost->pActiveClass->pData = 0U;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abb0:	2200      	movs	r2, #0
 800abb2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3710      	adds	r7, #16
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}

0800abbe <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b084      	sub	sp, #16
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abcc:	69db      	ldr	r3, [r3, #28]
 800abce:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	3340      	adds	r3, #64	; 0x40
 800abd4:	4619      	mov	r1, r3
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 f8da 	bl	800ad90 <GetLineCoding>
 800abdc:	4603      	mov	r3, r0
 800abde:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800abe0:	7afb      	ldrb	r3, [r7, #11]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d105      	bne.n	800abf2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800abec:	2102      	movs	r1, #2
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800abf2:	7afb      	ldrb	r3, [r7, #11]
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ac04:	2301      	movs	r3, #1
 800ac06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac12:	69db      	ldr	r3, [r3, #28]
 800ac14:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ac1c:	2b04      	cmp	r3, #4
 800ac1e:	d877      	bhi.n	800ad10 <USBH_CDC_Process+0x114>
 800ac20:	a201      	add	r2, pc, #4	; (adr r2, 800ac28 <USBH_CDC_Process+0x2c>)
 800ac22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac26:	bf00      	nop
 800ac28:	0800ac3d 	.word	0x0800ac3d
 800ac2c:	0800ac43 	.word	0x0800ac43
 800ac30:	0800ac73 	.word	0x0800ac73
 800ac34:	0800ace7 	.word	0x0800ace7
 800ac38:	0800acf5 	.word	0x0800acf5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	73fb      	strb	r3, [r7, #15]
      break;
 800ac40:	e06d      	b.n	800ad1e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac46:	4619      	mov	r1, r3
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f000 f8c0 	bl	800adce <SetLineCoding>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ac52:	7bbb      	ldrb	r3, [r7, #14]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d104      	bne.n	800ac62 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	2202      	movs	r2, #2
 800ac5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ac60:	e058      	b.n	800ad14 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800ac62:	7bbb      	ldrb	r3, [r7, #14]
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d055      	beq.n	800ad14 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	2204      	movs	r2, #4
 800ac6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800ac70:	e050      	b.n	800ad14 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	3340      	adds	r3, #64	; 0x40
 800ac76:	4619      	mov	r1, r3
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 f889 	bl	800ad90 <GetLineCoding>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ac82:	7bbb      	ldrb	r3, [r7, #14]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d126      	bne.n	800acd6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac9a:	791b      	ldrb	r3, [r3, #4]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d13b      	bne.n	800ad18 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acaa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800acac:	429a      	cmp	r2, r3
 800acae:	d133      	bne.n	800ad18 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acba:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d12b      	bne.n	800ad18 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acc8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800acca:	429a      	cmp	r2, r3
 800accc:	d124      	bne.n	800ad18 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 fa7c 	bl	800b1cc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800acd4:	e020      	b.n	800ad18 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800acd6:	7bbb      	ldrb	r3, [r7, #14]
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d01d      	beq.n	800ad18 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	2204      	movs	r2, #4
 800ace0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800ace4:	e018      	b.n	800ad18 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 f934 	bl	800af54 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 f9c3 	bl	800b078 <CDC_ProcessReception>
      break;
 800acf2:	e014      	b.n	800ad1e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800acf4:	2100      	movs	r1, #0
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f001 fa55 	bl	800c1a6 <USBH_ClrFeature>
 800acfc:	4603      	mov	r3, r0
 800acfe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ad00:	7bbb      	ldrb	r3, [r7, #14]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d10a      	bne.n	800ad1c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800ad0e:	e005      	b.n	800ad1c <USBH_CDC_Process+0x120>

    default:
      break;
 800ad10:	bf00      	nop
 800ad12:	e004      	b.n	800ad1e <USBH_CDC_Process+0x122>
      break;
 800ad14:	bf00      	nop
 800ad16:	e002      	b.n	800ad1e <USBH_CDC_Process+0x122>
      break;
 800ad18:	bf00      	nop
 800ad1a:	e000      	b.n	800ad1e <USBH_CDC_Process+0x122>
      break;
 800ad1c:	bf00      	nop

  }

  return status;
 800ad1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3710      	adds	r7, #16
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ad30:	2300      	movs	r3, #0
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	370c      	adds	r7, #12
 800ad36:	46bd      	mov	sp, r7
 800ad38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3c:	4770      	bx	lr

0800ad3e <USBH_CDC_Stop>:
  *         Stop current CDC Transmission
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_CDC_Stop(USBH_HandleTypeDef *phost)
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b084      	sub	sp, #16
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad4c:	69db      	ldr	r3, [r3, #28]
 800ad4e:	60fb      	str	r3, [r7, #12]

  if (phost->gState == HOST_CLASS)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	2b0b      	cmp	r3, #11
 800ad58:	d115      	bne.n	800ad86 <USBH_CDC_Stop+0x48>
  {
    CDC_Handle->state = CDC_IDLE_STATE;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	4619      	mov	r1, r3
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f002 f84a 	bl	800ce02 <USBH_ClosePipe>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	7b1b      	ldrb	r3, [r3, #12]
 800ad72:	4619      	mov	r1, r3
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f002 f844 	bl	800ce02 <USBH_ClosePipe>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	7b5b      	ldrb	r3, [r3, #13]
 800ad7e:	4619      	mov	r1, r3
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f002 f83e 	bl	800ce02 <USBH_ClosePipe>
  }
  return USBH_OK;
 800ad86:	2300      	movs	r3, #0
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3710      	adds	r7, #16
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	22a1      	movs	r2, #161	; 0xa1
 800ad9e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2221      	movs	r2, #33	; 0x21
 800ada4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2200      	movs	r2, #0
 800adaa:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2207      	movs	r2, #7
 800adb6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	2207      	movs	r2, #7
 800adbc:	4619      	mov	r1, r3
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f001 fcbe 	bl	800c740 <USBH_CtlReq>
 800adc4:	4603      	mov	r3, r0
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3708      	adds	r7, #8
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}

0800adce <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800adce:	b580      	push	{r7, lr}
 800add0:	b082      	sub	sp, #8
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
 800add6:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2221      	movs	r2, #33	; 0x21
 800addc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2220      	movs	r2, #32
 800ade2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2200      	movs	r2, #0
 800ade8:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2207      	movs	r2, #7
 800adf4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	2207      	movs	r2, #7
 800adfa:	4619      	mov	r1, r3
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f001 fc9f 	bl	800c740 <USBH_CtlReq>
 800ae02:	4603      	mov	r3, r0
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3708      	adds	r7, #8
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <USBH_CDC_SetLineCoding>:
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef USBH_CDC_SetLineCoding(USBH_HandleTypeDef *phost,
                                          CDC_LineCodingTypeDef *linecoding)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b084      	sub	sp, #16
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae1c:	69db      	ldr	r3, [r3, #28]
 800ae1e:	60fb      	str	r3, [r7, #12]

  if (phost->gState == HOST_CLASS)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	2b0b      	cmp	r3, #11
 800ae28:	d114      	bne.n	800ae54 <USBH_CDC_SetLineCoding+0x48>
  {
    CDC_Handle->state = CDC_SET_LINE_CODING_STATE;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->pUserLineCoding = linecoding;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	683a      	ldr	r2, [r7, #0]
 800ae36:	649a      	str	r2, [r3, #72]	; 0x48

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2204      	movs	r2, #4
 800ae3c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	4619      	mov	r1, r3
 800ae50:	f006 ffe0 	bl	8011e14 <osMessagePut>
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }

  return USBH_OK;
 800ae54:	2300      	movs	r3, #0
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3710      	adds	r7, #16
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <USBH_CDC_Transmit>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Transmit(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 800ae5e:	b580      	push	{r7, lr}
 800ae60:	b086      	sub	sp, #24
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	60f8      	str	r0, [r7, #12]
 800ae66:	60b9      	str	r1, [r7, #8]
 800ae68:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae74:	69db      	ldr	r3, [r3, #28]
 800ae76:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d004      	beq.n	800ae8c <USBH_CDC_Transmit+0x2e>
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ae88:	2b03      	cmp	r3, #3
 800ae8a:	d11d      	bne.n	800aec8 <USBH_CDC_Transmit+0x6a>
  {
    CDC_Handle->pTxData = pbuff;
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	68ba      	ldr	r2, [r7, #8]
 800ae90:	61da      	str	r2, [r3, #28]
    CDC_Handle->TxDataLength = length;
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	625a      	str	r2, [r3, #36]	; 0x24
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	2203      	movs	r2, #3
 800ae9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	2201      	movs	r2, #1
 800aea4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    Status = USBH_OK;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	2204      	movs	r2, #4
 800aeb0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aec0:	2200      	movs	r2, #0
 800aec2:	4619      	mov	r1, r3
 800aec4:	f006 ffa6 	bl	8011e14 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }
  return Status;
 800aec8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3718      	adds	r7, #24
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
	...

0800aed4 <USBH_CDC_Receive>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b086      	sub	sp, #24
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	60b9      	str	r1, [r7, #8]
 800aede:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800aee0:	2301      	movs	r3, #1
 800aee2:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aeea:	69db      	ldr	r3, [r3, #28]
 800aeec:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d004      	beq.n	800af02 <USBH_CDC_Receive+0x2e>
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800aefe:	2b03      	cmp	r3, #3
 800af00:	d120      	bne.n	800af44 <USBH_CDC_Receive+0x70>
  {
	icListen_rx_msg_basic_header=(icListen_wav_full_header*)pbuff;
 800af02:	4a13      	ldr	r2, [pc, #76]	; (800af50 <USBH_CDC_Receive+0x7c>)
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	6013      	str	r3, [r2, #0]
    CDC_Handle->pRxData = pbuff;
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	68ba      	ldr	r2, [r7, #8]
 800af0c:	621a      	str	r2, [r3, #32]
    CDC_Handle->RxDataLength = length;
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	629a      	str	r2, [r3, #40]	; 0x28
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	2203      	movs	r2, #3
 800af18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	2203      	movs	r2, #3
 800af20:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    Status = USBH_OK;
 800af24:	2300      	movs	r3, #0
 800af26:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2204      	movs	r2, #4
 800af2c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af3c:	2200      	movs	r2, #0
 800af3e:	4619      	mov	r1, r3
 800af40:	f006 ff68 	bl	8011e14 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }
  return Status;
 800af44:	7dfb      	ldrb	r3, [r7, #23]
}
 800af46:	4618      	mov	r0, r3
 800af48:	3718      	adds	r7, #24
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	20001e54 	.word	0x20001e54

0800af54 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b086      	sub	sp, #24
 800af58:	af02      	add	r7, sp, #8
 800af5a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af62:	69db      	ldr	r3, [r3, #28]
 800af64:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800af66:	2300      	movs	r3, #0
 800af68:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800af70:	2b01      	cmp	r3, #1
 800af72:	d002      	beq.n	800af7a <CDC_ProcessTransmission+0x26>
 800af74:	2b02      	cmp	r3, #2
 800af76:	d023      	beq.n	800afc0 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800af78:	e07a      	b.n	800b070 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af7e:	68fa      	ldr	r2, [r7, #12]
 800af80:	8b12      	ldrh	r2, [r2, #24]
 800af82:	4293      	cmp	r3, r2
 800af84:	d90b      	bls.n	800af9e <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	69d9      	ldr	r1, [r3, #28]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	8b1a      	ldrh	r2, [r3, #24]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	7b5b      	ldrb	r3, [r3, #13]
 800af92:	2001      	movs	r0, #1
 800af94:	9000      	str	r0, [sp, #0]
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f001 fed1 	bl	800cd3e <USBH_BulkSendData>
 800af9c:	e00b      	b.n	800afb6 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800afa6:	b29a      	uxth	r2, r3
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	7b5b      	ldrb	r3, [r3, #13]
 800afac:	2001      	movs	r0, #1
 800afae:	9000      	str	r0, [sp, #0]
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f001 fec4 	bl	800cd3e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2202      	movs	r2, #2
 800afba:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800afbe:	e057      	b.n	800b070 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	7b5b      	ldrb	r3, [r3, #13]
 800afc4:	4619      	mov	r1, r3
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f009 fbc8 	bl	801475c <USBH_LL_GetURBState>
 800afcc:	4603      	mov	r3, r0
 800afce:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800afd0:	7afb      	ldrb	r3, [r7, #11]
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d136      	bne.n	800b044 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afda:	68fa      	ldr	r2, [r7, #12]
 800afdc:	8b12      	ldrh	r2, [r2, #24]
 800afde:	4293      	cmp	r3, r2
 800afe0:	d90e      	bls.n	800b000 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe6:	68fa      	ldr	r2, [r7, #12]
 800afe8:	8b12      	ldrh	r2, [r2, #24]
 800afea:	1a9a      	subs	r2, r3, r2
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	69db      	ldr	r3, [r3, #28]
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	8b12      	ldrh	r2, [r2, #24]
 800aff8:	441a      	add	r2, r3
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	61da      	str	r2, [r3, #28]
 800affe:	e002      	b.n	800b006 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2200      	movs	r2, #0
 800b004:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d004      	beq.n	800b018 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2201      	movs	r2, #1
 800b012:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800b016:	e006      	b.n	800b026 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f009 f92d 	bl	8014280 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2204      	movs	r2, #4
 800b02a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b03a:	2200      	movs	r2, #0
 800b03c:	4619      	mov	r1, r3
 800b03e:	f006 fee9 	bl	8011e14 <osMessagePut>
      break;
 800b042:	e014      	b.n	800b06e <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800b044:	7afb      	ldrb	r3, [r7, #11]
 800b046:	2b02      	cmp	r3, #2
 800b048:	d111      	bne.n	800b06e <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2201      	movs	r2, #1
 800b04e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2204      	movs	r2, #4
 800b056:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b066:	2200      	movs	r2, #0
 800b068:	4619      	mov	r1, r3
 800b06a:	f006 fed3 	bl	8011e14 <osMessagePut>
      break;
 800b06e:	bf00      	nop
  }
}
 800b070:	bf00      	nop
 800b072:	3710      	adds	r7, #16
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b086      	sub	sp, #24
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b086:	69db      	ldr	r3, [r3, #28]
 800b088:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b08a:	2300      	movs	r3, #0
 800b08c:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800b094:	2b03      	cmp	r3, #3
 800b096:	d002      	beq.n	800b09e <CDC_ProcessReception+0x26>
 800b098:	2b04      	cmp	r3, #4
 800b09a:	d00e      	beq.n	800b0ba <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800b09c:	e088      	b.n	800b1b0 <CDC_ProcessReception+0x138>
      (void)USBH_BulkReceiveData(phost,
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	6a19      	ldr	r1, [r3, #32]
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	8b5a      	ldrh	r2, [r3, #26]
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	7b1b      	ldrb	r3, [r3, #12]
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f001 fe6c 	bl	800cd88 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	2204      	movs	r2, #4
 800b0b4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800b0b8:	e07a      	b.n	800b1b0 <CDC_ProcessReception+0x138>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	7b1b      	ldrb	r3, [r3, #12]
 800b0be:	4619      	mov	r1, r3
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f009 fb4b 	bl	801475c <USBH_LL_GetURBState>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800b0ca:	7cfb      	ldrb	r3, [r7, #19]
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d16e      	bne.n	800b1ae <CDC_ProcessReception+0x136>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	7b1b      	ldrb	r3, [r3, #12]
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f009 faae 	bl	8014638 <USBH_LL_GetLastXferSize>
 800b0dc:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (CDC_Handle->RxDataLength > CDC_Handle->DataItf.InEpSize))
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0e2:	68fa      	ldr	r2, [r7, #12]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d04d      	beq.n	800b184 <CDC_ProcessReception+0x10c>
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ec:	697a      	ldr	r2, [r7, #20]
 800b0ee:	8b52      	ldrh	r2, [r2, #26]
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d947      	bls.n	800b184 <CDC_ProcessReception+0x10c>
           CDC_Handle->RxDataLength -= length ;
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	1ad2      	subs	r2, r2, r3
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	629a      	str	r2, [r3, #40]	; 0x28
           CDC_Handle->pRxData += length;
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	6a1a      	ldr	r2, [r3, #32]
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	441a      	add	r2, r3
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	621a      	str	r2, [r3, #32]
           if((icListen_rx_msg_basic_header->length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 800b10c:	4b2a      	ldr	r3, [pc, #168]	; (800b1b8 <CDC_ProcessReception+0x140>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	885b      	ldrh	r3, [r3, #2]
 800b112:	b29b      	uxth	r3, r3
 800b114:	3306      	adds	r3, #6
 800b116:	461a      	mov	r2, r3
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b11c:	f5c3 635a 	rsb	r3, r3, #3488	; 0xda0
 800b120:	330c      	adds	r3, #12
 800b122:	429a      	cmp	r2, r3
 800b124:	d129      	bne.n	800b17a <CDC_ProcessReception+0x102>
               CDC_Handle->data_rx_state = CDC_IDLE;
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	2200      	movs	r2, #0
 800b12a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
               osMessagePut(USB_rxHandle, (uint8_t*)usb_rx_buff[usb_rx_buff_active], 0U);
 800b12e:	4b23      	ldr	r3, [pc, #140]	; (800b1bc <CDC_ProcessReception+0x144>)
 800b130:	6818      	ldr	r0, [r3, #0]
 800b132:	4b23      	ldr	r3, [pc, #140]	; (800b1c0 <CDC_ProcessReception+0x148>)
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	461a      	mov	r2, r3
 800b138:	f640 53ac 	movw	r3, #3500	; 0xdac
 800b13c:	fb02 f303 	mul.w	r3, r2, r3
 800b140:	4a20      	ldr	r2, [pc, #128]	; (800b1c4 <CDC_ProcessReception+0x14c>)
 800b142:	4413      	add	r3, r2
 800b144:	2200      	movs	r2, #0
 800b146:	4619      	mov	r1, r3
 800b148:	f006 fe64 	bl	8011e14 <osMessagePut>
               usb_rx_buff_active++;
 800b14c:	4b1c      	ldr	r3, [pc, #112]	; (800b1c0 <CDC_ProcessReception+0x148>)
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	3301      	adds	r3, #1
 800b152:	b2da      	uxtb	r2, r3
 800b154:	4b1a      	ldr	r3, [pc, #104]	; (800b1c0 <CDC_ProcessReception+0x148>)
 800b156:	701a      	strb	r2, [r3, #0]
               usb_rx_buff_active%=USB_RX_NUM_OF_BUFFERS;
 800b158:	4b19      	ldr	r3, [pc, #100]	; (800b1c0 <CDC_ProcessReception+0x148>)
 800b15a:	781a      	ldrb	r2, [r3, #0]
 800b15c:	4b1a      	ldr	r3, [pc, #104]	; (800b1c8 <CDC_ProcessReception+0x150>)
 800b15e:	fba3 1302 	umull	r1, r3, r3, r2
 800b162:	1ad1      	subs	r1, r2, r3
 800b164:	0849      	lsrs	r1, r1, #1
 800b166:	440b      	add	r3, r1
 800b168:	0899      	lsrs	r1, r3, #2
 800b16a:	460b      	mov	r3, r1
 800b16c:	00db      	lsls	r3, r3, #3
 800b16e:	1a5b      	subs	r3, r3, r1
 800b170:	1ad3      	subs	r3, r2, r3
 800b172:	b2da      	uxtb	r2, r3
 800b174:	4b12      	ldr	r3, [pc, #72]	; (800b1c0 <CDC_ProcessReception+0x148>)
 800b176:	701a      	strb	r2, [r3, #0]
           if((icListen_rx_msg_basic_header->length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 800b178:	e00b      	b.n	800b192 <CDC_ProcessReception+0x11a>
         	CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	2203      	movs	r2, #3
 800b17e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
           if((icListen_rx_msg_basic_header->length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 800b182:	e006      	b.n	800b192 <CDC_ProcessReception+0x11a>
           CDC_Handle->data_rx_state = CDC_IDLE;
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	2200      	movs	r2, #0
 800b188:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
           USBH_CDC_ReceiveCallback(phost);
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f009 f881 	bl	8014294 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2204      	movs	r2, #4
 800b196:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	f006 fe33 	bl	8011e14 <osMessagePut>
      break;
 800b1ae:	bf00      	nop
  }
}
 800b1b0:	bf00      	nop
 800b1b2:	3718      	adds	r7, #24
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}
 800b1b8:	20001e54 	.word	0x20001e54
 800b1bc:	200009ac 	.word	0x200009ac
 800b1c0:	2000e1d8 	.word	0x2000e1d8
 800b1c4:	20008224 	.word	0x20008224
 800b1c8:	24924925 	.word	0x24924925

0800b1cc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b083      	sub	sp, #12
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b1d4:	bf00      	nop
 800b1d6:	370c      	adds	r7, #12
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800b1e0:	b5b0      	push	{r4, r5, r7, lr}
 800b1e2:	b090      	sub	sp, #64	; 0x40
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	60b9      	str	r1, [r7, #8]
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d101      	bne.n	800b1f8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b1f4:	2302      	movs	r3, #2
 800b1f6:	e04d      	b.n	800b294 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	79fa      	ldrb	r2, [r7, #7]
 800b1fc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2200      	movs	r2, #0
 800b204:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2200      	movs	r2, #0
 800b20c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800b210:	68f8      	ldr	r0, [r7, #12]
 800b212:	f000 f847 	bl	800b2a4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2200      	movs	r2, #0
 800b21a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2200      	movs	r2, #0
 800b222:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2200      	movs	r2, #0
 800b22a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2200      	movs	r2, #0
 800b232:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d003      	beq.n	800b244 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	68ba      	ldr	r2, [r7, #8]
 800b240:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800b244:	4b15      	ldr	r3, [pc, #84]	; (800b29c <USBH_Init+0xbc>)
 800b246:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800b24a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b24c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800b250:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b254:	2100      	movs	r1, #0
 800b256:	4618      	mov	r0, r3
 800b258:	f006 fdb3 	bl	8011dc2 <osMessageCreate>
 800b25c:	4602      	mov	r2, r0
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800b264:	4b0e      	ldr	r3, [pc, #56]	; (800b2a0 <USBH_Init+0xc0>)
 800b266:	f107 0414 	add.w	r4, r7, #20
 800b26a:	461d      	mov	r5, r3
 800b26c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b26e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b270:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b274:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800b278:	f107 0314 	add.w	r3, r7, #20
 800b27c:	68f9      	ldr	r1, [r7, #12]
 800b27e:	4618      	mov	r0, r3
 800b280:	f006 fd3f 	bl	8011d02 <osThreadCreate>
 800b284:	4602      	mov	r2, r0
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800b28c:	68f8      	ldr	r0, [r7, #12]
 800b28e:	f009 f91f 	bl	80144d0 <USBH_LL_Init>

  return USBH_OK;
 800b292:	2300      	movs	r3, #0
}
 800b294:	4618      	mov	r0, r3
 800b296:	3740      	adds	r7, #64	; 0x40
 800b298:	46bd      	mov	sp, r7
 800b29a:	bdb0      	pop	{r4, r5, r7, pc}
 800b29c:	08017660 	.word	0x08017660
 800b2a0:	08017670 	.word	0x08017670

0800b2a4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b085      	sub	sp, #20
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	60fb      	str	r3, [r7, #12]
 800b2b4:	e009      	b.n	800b2ca <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	33e0      	adds	r3, #224	; 0xe0
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	4413      	add	r3, r2
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	60fb      	str	r3, [r7, #12]
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2b0f      	cmp	r3, #15
 800b2ce:	d9f2      	bls.n	800b2b6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	60fb      	str	r3, [r7, #12]
 800b2d4:	e009      	b.n	800b2ea <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	4413      	add	r3, r2
 800b2dc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	60fb      	str	r3, [r7, #12]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2f0:	d3f1      	bcc.n	800b2d6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2201      	movs	r2, #1
 800b302:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2201      	movs	r2, #1
 800b310:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2240      	movs	r2, #64	; 0x40
 800b316:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2200      	movs	r2, #0
 800b31c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2200      	movs	r2, #0
 800b322:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2201      	movs	r2, #1
 800b32a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2200      	movs	r2, #0
 800b332:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b33e:	2300      	movs	r3, #0
}
 800b340:	4618      	mov	r0, r3
 800b342:	3714      	adds	r7, #20
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr

0800b34c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b085      	sub	sp, #20
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b356:	2300      	movs	r3, #0
 800b358:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d016      	beq.n	800b38e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b366:	2b00      	cmp	r3, #0
 800b368:	d10e      	bne.n	800b388 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b370:	1c59      	adds	r1, r3, #1
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	33de      	adds	r3, #222	; 0xde
 800b37c:	6839      	ldr	r1, [r7, #0]
 800b37e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b382:	2300      	movs	r3, #0
 800b384:	73fb      	strb	r3, [r7, #15]
 800b386:	e004      	b.n	800b392 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b388:	2302      	movs	r3, #2
 800b38a:	73fb      	strb	r3, [r7, #15]
 800b38c:	e001      	b.n	800b392 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b38e:	2302      	movs	r3, #2
 800b390:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b392:	7bfb      	ldrb	r3, [r7, #15]
}
 800b394:	4618      	mov	r0, r3
 800b396:	3714      	adds	r7, #20
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b085      	sub	sp, #20
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b3b6:	78fa      	ldrb	r2, [r7, #3]
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d204      	bcs.n	800b3c6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	78fa      	ldrb	r2, [r7, #3]
 800b3c0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b3c4:	e001      	b.n	800b3ca <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b3c6:	2302      	movs	r3, #2
 800b3c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b3ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3714      	adds	r7, #20
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr

0800b3d8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b087      	sub	sp, #28
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	4608      	mov	r0, r1
 800b3e2:	4611      	mov	r1, r2
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	70fb      	strb	r3, [r7, #3]
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	70bb      	strb	r3, [r7, #2]
 800b3ee:	4613      	mov	r3, r2
 800b3f0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b400:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b402:	e025      	b.n	800b450 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b404:	7dfb      	ldrb	r3, [r7, #23]
 800b406:	221a      	movs	r2, #26
 800b408:	fb02 f303 	mul.w	r3, r2, r3
 800b40c:	3308      	adds	r3, #8
 800b40e:	68fa      	ldr	r2, [r7, #12]
 800b410:	4413      	add	r3, r2
 800b412:	3302      	adds	r3, #2
 800b414:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	795b      	ldrb	r3, [r3, #5]
 800b41a:	78fa      	ldrb	r2, [r7, #3]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d002      	beq.n	800b426 <USBH_FindInterface+0x4e>
 800b420:	78fb      	ldrb	r3, [r7, #3]
 800b422:	2bff      	cmp	r3, #255	; 0xff
 800b424:	d111      	bne.n	800b44a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b42a:	78ba      	ldrb	r2, [r7, #2]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d002      	beq.n	800b436 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b430:	78bb      	ldrb	r3, [r7, #2]
 800b432:	2bff      	cmp	r3, #255	; 0xff
 800b434:	d109      	bne.n	800b44a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b43a:	787a      	ldrb	r2, [r7, #1]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d002      	beq.n	800b446 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b440:	787b      	ldrb	r3, [r7, #1]
 800b442:	2bff      	cmp	r3, #255	; 0xff
 800b444:	d101      	bne.n	800b44a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b446:	7dfb      	ldrb	r3, [r7, #23]
 800b448:	e006      	b.n	800b458 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b44a:	7dfb      	ldrb	r3, [r7, #23]
 800b44c:	3301      	adds	r3, #1
 800b44e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b450:	7dfb      	ldrb	r3, [r7, #23]
 800b452:	2b01      	cmp	r3, #1
 800b454:	d9d6      	bls.n	800b404 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b456:	23ff      	movs	r3, #255	; 0xff
}
 800b458:	4618      	mov	r0, r3
 800b45a:	371c      	adds	r7, #28
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f009 f86b 	bl	8014548 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b472:	2101      	movs	r1, #1
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f009 f984 	bl	8014782 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b47a:	2300      	movs	r3, #0
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3708      	adds	r7, #8
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b088      	sub	sp, #32
 800b488:	af04      	add	r7, sp, #16
 800b48a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b48c:	2302      	movs	r3, #2
 800b48e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b490:	2300      	movs	r3, #0
 800b492:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b49a:	b2db      	uxtb	r3, r3
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d102      	bne.n	800b4a6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2203      	movs	r2, #3
 800b4a4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	2b0b      	cmp	r3, #11
 800b4ae:	f200 8247 	bhi.w	800b940 <USBH_Process+0x4bc>
 800b4b2:	a201      	add	r2, pc, #4	; (adr r2, 800b4b8 <USBH_Process+0x34>)
 800b4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4b8:	0800b4e9 	.word	0x0800b4e9
 800b4bc:	0800b537 	.word	0x0800b537
 800b4c0:	0800b5bb 	.word	0x0800b5bb
 800b4c4:	0800b8bf 	.word	0x0800b8bf
 800b4c8:	0800b941 	.word	0x0800b941
 800b4cc:	0800b67b 	.word	0x0800b67b
 800b4d0:	0800b849 	.word	0x0800b849
 800b4d4:	0800b6cd 	.word	0x0800b6cd
 800b4d8:	0800b709 	.word	0x0800b709
 800b4dc:	0800b743 	.word	0x0800b743
 800b4e0:	0800b7a1 	.word	0x0800b7a1
 800b4e4:	0800b8a7 	.word	0x0800b8a7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	f000 8227 	beq.w	800b944 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b4fc:	20c8      	movs	r0, #200	; 0xc8
 800b4fe:	f009 f987 	bl	8014810 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f009 f87d 	bl	8014602 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2200      	movs	r2, #0
 800b50c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2200      	movs	r2, #0
 800b514:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2201      	movs	r2, #1
 800b51c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b52c:	2200      	movs	r2, #0
 800b52e:	4619      	mov	r1, r3
 800b530:	f006 fc70 	bl	8011e14 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b534:	e206      	b.n	800b944 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d107      	bne.n	800b550 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2202      	movs	r2, #2
 800b54c:	701a      	strb	r2, [r3, #0]
 800b54e:	e025      	b.n	800b59c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b556:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b55a:	d914      	bls.n	800b586 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b562:	3301      	adds	r3, #1
 800b564:	b2da      	uxtb	r2, r3
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b572:	2b03      	cmp	r3, #3
 800b574:	d903      	bls.n	800b57e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	220d      	movs	r2, #13
 800b57a:	701a      	strb	r2, [r3, #0]
 800b57c:	e00e      	b.n	800b59c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2200      	movs	r2, #0
 800b582:	701a      	strb	r2, [r3, #0]
 800b584:	e00a      	b.n	800b59c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b58c:	f103 020a 	add.w	r2, r3, #10
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b596:	200a      	movs	r0, #10
 800b598:	f009 f93a 	bl	8014810 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	f006 fc2e 	bl	8011e14 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b5b8:	e1cb      	b.n	800b952 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d005      	beq.n	800b5d0 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b5ca:	2104      	movs	r1, #4
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b5d0:	2064      	movs	r0, #100	; 0x64
 800b5d2:	f009 f91d 	bl	8014810 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f008 ffec 	bl	80145b4 <USBH_LL_GetSpeed>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	461a      	mov	r2, r3
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2205      	movs	r2, #5
 800b5ea:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b5ec:	2100      	movs	r1, #0
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f001 fc17 	bl	800ce22 <USBH_AllocPipe>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b5fc:	2180      	movs	r1, #128	; 0x80
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f001 fc0f 	bl	800ce22 <USBH_AllocPipe>
 800b604:	4603      	mov	r3, r0
 800b606:	461a      	mov	r2, r3
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	7919      	ldrb	r1, [r3, #4]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b61c:	687a      	ldr	r2, [r7, #4]
 800b61e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b620:	b292      	uxth	r2, r2
 800b622:	9202      	str	r2, [sp, #8]
 800b624:	2200      	movs	r2, #0
 800b626:	9201      	str	r2, [sp, #4]
 800b628:	9300      	str	r3, [sp, #0]
 800b62a:	4603      	mov	r3, r0
 800b62c:	2280      	movs	r2, #128	; 0x80
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f001 fbc8 	bl	800cdc4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	7959      	ldrb	r1, [r3, #5]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b644:	687a      	ldr	r2, [r7, #4]
 800b646:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b648:	b292      	uxth	r2, r2
 800b64a:	9202      	str	r2, [sp, #8]
 800b64c:	2200      	movs	r2, #0
 800b64e:	9201      	str	r2, [sp, #4]
 800b650:	9300      	str	r3, [sp, #0]
 800b652:	4603      	mov	r3, r0
 800b654:	2200      	movs	r2, #0
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f001 fbb4 	bl	800cdc4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2201      	movs	r2, #1
 800b660:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b670:	2200      	movs	r2, #0
 800b672:	4619      	mov	r1, r3
 800b674:	f006 fbce 	bl	8011e14 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b678:	e16b      	b.n	800b952 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 f96e 	bl	800b95c <USBH_HandleEnum>
 800b680:	4603      	mov	r3, r0
 800b682:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b684:	7bbb      	ldrb	r3, [r7, #14]
 800b686:	b2db      	uxtb	r3, r3
 800b688:	2b00      	cmp	r3, #0
 800b68a:	f040 815d 	bne.w	800b948 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2200      	movs	r2, #0
 800b692:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d103      	bne.n	800b6a8 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2208      	movs	r2, #8
 800b6a4:	701a      	strb	r2, [r3, #0]
 800b6a6:	e002      	b.n	800b6ae <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2207      	movs	r2, #7
 800b6ac:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2205      	movs	r2, #5
 800b6b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	f006 fba5 	bl	8011e14 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b6ca:	e13d      	b.n	800b948 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f000 813a 	beq.w	800b94c <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b6de:	2101      	movs	r1, #1
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2208      	movs	r2, #8
 800b6e8:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2205      	movs	r2, #5
 800b6ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b6fe:	2200      	movs	r2, #0
 800b700:	4619      	mov	r1, r3
 800b702:	f006 fb87 	bl	8011e14 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800b706:	e121      	b.n	800b94c <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b70e:	b29b      	uxth	r3, r3
 800b710:	4619      	mov	r1, r3
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 fd00 	bl	800c118 <USBH_SetCfg>
 800b718:	4603      	mov	r3, r0
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d102      	bne.n	800b724 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2209      	movs	r2, #9
 800b722:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2201      	movs	r2, #1
 800b728:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b738:	2200      	movs	r2, #0
 800b73a:	4619      	mov	r1, r3
 800b73c:	f006 fb6a 	bl	8011e14 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b740:	e107      	b.n	800b952 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b748:	f003 0320 	and.w	r3, r3, #32
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d015      	beq.n	800b77c <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b750:	2101      	movs	r1, #1
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f000 fd03 	bl	800c15e <USBH_SetFeature>
 800b758:	4603      	mov	r3, r0
 800b75a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b75c:	7bbb      	ldrb	r3, [r7, #14]
 800b75e:	b2db      	uxtb	r3, r3
 800b760:	2b00      	cmp	r3, #0
 800b762:	d103      	bne.n	800b76c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	220a      	movs	r2, #10
 800b768:	701a      	strb	r2, [r3, #0]
 800b76a:	e00a      	b.n	800b782 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800b76c:	7bbb      	ldrb	r3, [r7, #14]
 800b76e:	b2db      	uxtb	r3, r3
 800b770:	2b03      	cmp	r3, #3
 800b772:	d106      	bne.n	800b782 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	220a      	movs	r2, #10
 800b778:	701a      	strb	r2, [r3, #0]
 800b77a:	e002      	b.n	800b782 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	220a      	movs	r2, #10
 800b780:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2201      	movs	r2, #1
 800b786:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b796:	2200      	movs	r2, #0
 800b798:	4619      	mov	r1, r3
 800b79a:	f006 fb3b 	bl	8011e14 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b79e:	e0d8      	b.n	800b952 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d03f      	beq.n	800b82a <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	73fb      	strb	r3, [r7, #15]
 800b7b6:	e016      	b.n	800b7e6 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b7b8:	7bfa      	ldrb	r2, [r7, #15]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	32de      	adds	r2, #222	; 0xde
 800b7be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7c2:	791a      	ldrb	r2, [r3, #4]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	d108      	bne.n	800b7e0 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b7ce:	7bfa      	ldrb	r2, [r7, #15]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	32de      	adds	r2, #222	; 0xde
 800b7d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b7de:	e005      	b.n	800b7ec <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b7e0:	7bfb      	ldrb	r3, [r7, #15]
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	73fb      	strb	r3, [r7, #15]
 800b7e6:	7bfb      	ldrb	r3, [r7, #15]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d0e5      	beq.n	800b7b8 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d016      	beq.n	800b824 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	4798      	blx	r3
 800b802:	4603      	mov	r3, r0
 800b804:	2b00      	cmp	r3, #0
 800b806:	d109      	bne.n	800b81c <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2206      	movs	r2, #6
 800b80c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b814:	2103      	movs	r1, #3
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	4798      	blx	r3
 800b81a:	e006      	b.n	800b82a <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	220d      	movs	r2, #13
 800b820:	701a      	strb	r2, [r3, #0]
 800b822:	e002      	b.n	800b82a <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	220d      	movs	r2, #13
 800b828:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2205      	movs	r2, #5
 800b82e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b83e:	2200      	movs	r2, #0
 800b840:	4619      	mov	r1, r3
 800b842:	f006 fae7 	bl	8011e14 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b846:	e084      	b.n	800b952 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d017      	beq.n	800b882 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b858:	691b      	ldr	r3, [r3, #16]
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	4798      	blx	r3
 800b85e:	4603      	mov	r3, r0
 800b860:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b862:	7bbb      	ldrb	r3, [r7, #14]
 800b864:	b2db      	uxtb	r3, r3
 800b866:	2b00      	cmp	r3, #0
 800b868:	d103      	bne.n	800b872 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	220b      	movs	r2, #11
 800b86e:	701a      	strb	r2, [r3, #0]
 800b870:	e00a      	b.n	800b888 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 800b872:	7bbb      	ldrb	r3, [r7, #14]
 800b874:	b2db      	uxtb	r3, r3
 800b876:	2b02      	cmp	r3, #2
 800b878:	d106      	bne.n	800b888 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	220d      	movs	r2, #13
 800b87e:	701a      	strb	r2, [r3, #0]
 800b880:	e002      	b.n	800b888 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	220d      	movs	r2, #13
 800b886:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2205      	movs	r2, #5
 800b88c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b89c:	2200      	movs	r2, #0
 800b89e:	4619      	mov	r1, r3
 800b8a0:	f006 fab8 	bl	8011e14 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b8a4:	e055      	b.n	800b952 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d04f      	beq.n	800b950 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8b6:	695b      	ldr	r3, [r3, #20]
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	4798      	blx	r3
      }
      break;
 800b8bc:	e048      	b.n	800b950 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f7ff fcec 	bl	800b2a4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d009      	beq.n	800b8ea <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8dc:	68db      	ldr	r3, [r3, #12]
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d005      	beq.n	800b900 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b8fa:	2105      	movs	r1, #5
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b906:	b2db      	uxtb	r3, r3
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d107      	bne.n	800b91c <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2200      	movs	r2, #0
 800b910:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f7ff fda5 	bl	800b464 <USBH_Start>
 800b91a:	e002      	b.n	800b922 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f008 fe13 	bl	8014548 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2201      	movs	r2, #1
 800b926:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b936:	2200      	movs	r2, #0
 800b938:	4619      	mov	r1, r3
 800b93a:	f006 fa6b 	bl	8011e14 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b93e:	e008      	b.n	800b952 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 800b940:	bf00      	nop
 800b942:	e006      	b.n	800b952 <USBH_Process+0x4ce>
      break;
 800b944:	bf00      	nop
 800b946:	e004      	b.n	800b952 <USBH_Process+0x4ce>
      break;
 800b948:	bf00      	nop
 800b94a:	e002      	b.n	800b952 <USBH_Process+0x4ce>
    break;
 800b94c:	bf00      	nop
 800b94e:	e000      	b.n	800b952 <USBH_Process+0x4ce>
      break;
 800b950:	bf00      	nop
  }
  return USBH_OK;
 800b952:	2300      	movs	r3, #0
}
 800b954:	4618      	mov	r0, r3
 800b956:	3710      	adds	r7, #16
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b088      	sub	sp, #32
 800b960:	af04      	add	r7, sp, #16
 800b962:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b964:	2301      	movs	r3, #1
 800b966:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b968:	2301      	movs	r3, #1
 800b96a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	785b      	ldrb	r3, [r3, #1]
 800b970:	2b07      	cmp	r3, #7
 800b972:	f200 8208 	bhi.w	800bd86 <USBH_HandleEnum+0x42a>
 800b976:	a201      	add	r2, pc, #4	; (adr r2, 800b97c <USBH_HandleEnum+0x20>)
 800b978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b97c:	0800b99d 	.word	0x0800b99d
 800b980:	0800ba5b 	.word	0x0800ba5b
 800b984:	0800bac5 	.word	0x0800bac5
 800b988:	0800bb53 	.word	0x0800bb53
 800b98c:	0800bbbd 	.word	0x0800bbbd
 800b990:	0800bc2d 	.word	0x0800bc2d
 800b994:	0800bcc9 	.word	0x0800bcc9
 800b998:	0800bd47 	.word	0x0800bd47
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b99c:	2108      	movs	r1, #8
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f000 faea 	bl	800bf78 <USBH_Get_DevDesc>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b9a8:	7bbb      	ldrb	r3, [r7, #14]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d130      	bne.n	800ba10 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	7919      	ldrb	r1, [r3, #4]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b9d2:	b292      	uxth	r2, r2
 800b9d4:	9202      	str	r2, [sp, #8]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	9201      	str	r2, [sp, #4]
 800b9da:	9300      	str	r3, [sp, #0]
 800b9dc:	4603      	mov	r3, r0
 800b9de:	2280      	movs	r2, #128	; 0x80
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f001 f9ef 	bl	800cdc4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	7959      	ldrb	r1, [r3, #5]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b9fa:	b292      	uxth	r2, r2
 800b9fc:	9202      	str	r2, [sp, #8]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	9201      	str	r2, [sp, #4]
 800ba02:	9300      	str	r3, [sp, #0]
 800ba04:	4603      	mov	r3, r0
 800ba06:	2200      	movs	r2, #0
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f001 f9db 	bl	800cdc4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ba0e:	e1bc      	b.n	800bd8a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ba10:	7bbb      	ldrb	r3, [r7, #14]
 800ba12:	2b03      	cmp	r3, #3
 800ba14:	f040 81b9 	bne.w	800bd8a <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ba1e:	3301      	adds	r3, #1
 800ba20:	b2da      	uxtb	r2, r3
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ba2e:	2b03      	cmp	r3, #3
 800ba30:	d903      	bls.n	800ba3a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	220d      	movs	r2, #13
 800ba36:	701a      	strb	r2, [r3, #0]
      break;
 800ba38:	e1a7      	b.n	800bd8a <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	795b      	ldrb	r3, [r3, #5]
 800ba3e:	4619      	mov	r1, r3
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f001 fa0f 	bl	800ce64 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	791b      	ldrb	r3, [r3, #4]
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f001 fa09 	bl	800ce64 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2200      	movs	r2, #0
 800ba56:	701a      	strb	r2, [r3, #0]
      break;
 800ba58:	e197      	b.n	800bd8a <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ba5a:	2112      	movs	r1, #18
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 fa8b 	bl	800bf78 <USBH_Get_DevDesc>
 800ba62:	4603      	mov	r3, r0
 800ba64:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ba66:	7bbb      	ldrb	r3, [r7, #14]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d103      	bne.n	800ba74 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2202      	movs	r2, #2
 800ba70:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ba72:	e18c      	b.n	800bd8e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ba74:	7bbb      	ldrb	r3, [r7, #14]
 800ba76:	2b03      	cmp	r3, #3
 800ba78:	f040 8189 	bne.w	800bd8e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ba82:	3301      	adds	r3, #1
 800ba84:	b2da      	uxtb	r2, r3
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ba92:	2b03      	cmp	r3, #3
 800ba94:	d903      	bls.n	800ba9e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	220d      	movs	r2, #13
 800ba9a:	701a      	strb	r2, [r3, #0]
      break;
 800ba9c:	e177      	b.n	800bd8e <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	795b      	ldrb	r3, [r3, #5]
 800baa2:	4619      	mov	r1, r3
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f001 f9dd 	bl	800ce64 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	791b      	ldrb	r3, [r3, #4]
 800baae:	4619      	mov	r1, r3
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f001 f9d7 	bl	800ce64 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2200      	movs	r2, #0
 800baba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	701a      	strb	r2, [r3, #0]
      break;
 800bac2:	e164      	b.n	800bd8e <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800bac4:	2101      	movs	r1, #1
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f000 fb02 	bl	800c0d0 <USBH_SetAddress>
 800bacc:	4603      	mov	r3, r0
 800bace:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bad0:	7bbb      	ldrb	r3, [r7, #14]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d132      	bne.n	800bb3c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800bad6:	2002      	movs	r0, #2
 800bad8:	f008 fe9a 	bl	8014810 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2201      	movs	r2, #1
 800bae0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2203      	movs	r2, #3
 800bae8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	7919      	ldrb	r1, [r3, #4]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bafa:	687a      	ldr	r2, [r7, #4]
 800bafc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bafe:	b292      	uxth	r2, r2
 800bb00:	9202      	str	r2, [sp, #8]
 800bb02:	2200      	movs	r2, #0
 800bb04:	9201      	str	r2, [sp, #4]
 800bb06:	9300      	str	r3, [sp, #0]
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2280      	movs	r2, #128	; 0x80
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f001 f959 	bl	800cdc4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	7959      	ldrb	r1, [r3, #5]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bb26:	b292      	uxth	r2, r2
 800bb28:	9202      	str	r2, [sp, #8]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	9201      	str	r2, [sp, #4]
 800bb2e:	9300      	str	r3, [sp, #0]
 800bb30:	4603      	mov	r3, r0
 800bb32:	2200      	movs	r2, #0
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f001 f945 	bl	800cdc4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bb3a:	e12a      	b.n	800bd92 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bb3c:	7bbb      	ldrb	r3, [r7, #14]
 800bb3e:	2b03      	cmp	r3, #3
 800bb40:	f040 8127 	bne.w	800bd92 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	220d      	movs	r2, #13
 800bb48:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	705a      	strb	r2, [r3, #1]
      break;
 800bb50:	e11f      	b.n	800bd92 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800bb52:	2109      	movs	r1, #9
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f000 fa37 	bl	800bfc8 <USBH_Get_CfgDesc>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bb5e:	7bbb      	ldrb	r3, [r7, #14]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d103      	bne.n	800bb6c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2204      	movs	r2, #4
 800bb68:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bb6a:	e114      	b.n	800bd96 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bb6c:	7bbb      	ldrb	r3, [r7, #14]
 800bb6e:	2b03      	cmp	r3, #3
 800bb70:	f040 8111 	bne.w	800bd96 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	b2da      	uxtb	r2, r3
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bb8a:	2b03      	cmp	r3, #3
 800bb8c:	d903      	bls.n	800bb96 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	220d      	movs	r2, #13
 800bb92:	701a      	strb	r2, [r3, #0]
      break;
 800bb94:	e0ff      	b.n	800bd96 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	795b      	ldrb	r3, [r3, #5]
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f001 f961 	bl	800ce64 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	791b      	ldrb	r3, [r3, #4]
 800bba6:	4619      	mov	r1, r3
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f001 f95b 	bl	800ce64 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	701a      	strb	r2, [r3, #0]
      break;
 800bbba:	e0ec      	b.n	800bd96 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f000 f9ff 	bl	800bfc8 <USBH_Get_CfgDesc>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bbce:	7bbb      	ldrb	r3, [r7, #14]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d103      	bne.n	800bbdc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2205      	movs	r2, #5
 800bbd8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bbda:	e0de      	b.n	800bd9a <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bbdc:	7bbb      	ldrb	r3, [r7, #14]
 800bbde:	2b03      	cmp	r3, #3
 800bbe0:	f040 80db 	bne.w	800bd9a <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bbea:	3301      	adds	r3, #1
 800bbec:	b2da      	uxtb	r2, r3
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bbfa:	2b03      	cmp	r3, #3
 800bbfc:	d903      	bls.n	800bc06 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	220d      	movs	r2, #13
 800bc02:	701a      	strb	r2, [r3, #0]
      break;
 800bc04:	e0c9      	b.n	800bd9a <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	795b      	ldrb	r3, [r3, #5]
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f001 f929 	bl	800ce64 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	791b      	ldrb	r3, [r3, #4]
 800bc16:	4619      	mov	r1, r3
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f001 f923 	bl	800ce64 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2200      	movs	r2, #0
 800bc22:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2200      	movs	r2, #0
 800bc28:	701a      	strb	r2, [r3, #0]
      break;
 800bc2a:	e0b6      	b.n	800bd9a <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d036      	beq.n	800bca4 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bc42:	23ff      	movs	r3, #255	; 0xff
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f000 f9e3 	bl	800c010 <USBH_Get_StringDesc>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bc4e:	7bbb      	ldrb	r3, [r7, #14]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d111      	bne.n	800bc78 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2206      	movs	r2, #6
 800bc58:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2205      	movs	r2, #5
 800bc5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bc6e:	2200      	movs	r2, #0
 800bc70:	4619      	mov	r1, r3
 800bc72:	f006 f8cf 	bl	8011e14 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bc76:	e092      	b.n	800bd9e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bc78:	7bbb      	ldrb	r3, [r7, #14]
 800bc7a:	2b03      	cmp	r3, #3
 800bc7c:	f040 808f 	bne.w	800bd9e <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2206      	movs	r2, #6
 800bc84:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2205      	movs	r2, #5
 800bc8a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	f006 f8b9 	bl	8011e14 <osMessagePut>
      break;
 800bca2:	e07c      	b.n	800bd9e <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2206      	movs	r2, #6
 800bca8:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2205      	movs	r2, #5
 800bcae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	f006 f8a7 	bl	8011e14 <osMessagePut>
      break;
 800bcc6:	e06a      	b.n	800bd9e <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d027      	beq.n	800bd22 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800bcde:	23ff      	movs	r3, #255	; 0xff
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f000 f995 	bl	800c010 <USBH_Get_StringDesc>
 800bce6:	4603      	mov	r3, r0
 800bce8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bcea:	7bbb      	ldrb	r3, [r7, #14]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d103      	bne.n	800bcf8 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2207      	movs	r2, #7
 800bcf4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bcf6:	e054      	b.n	800bda2 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bcf8:	7bbb      	ldrb	r3, [r7, #14]
 800bcfa:	2b03      	cmp	r3, #3
 800bcfc:	d151      	bne.n	800bda2 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2207      	movs	r2, #7
 800bd02:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2205      	movs	r2, #5
 800bd08:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bd18:	2200      	movs	r2, #0
 800bd1a:	4619      	mov	r1, r3
 800bd1c:	f006 f87a 	bl	8011e14 <osMessagePut>
      break;
 800bd20:	e03f      	b.n	800bda2 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2207      	movs	r2, #7
 800bd26:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2205      	movs	r2, #5
 800bd2c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	4619      	mov	r1, r3
 800bd40:	f006 f868 	bl	8011e14 <osMessagePut>
      break;
 800bd44:	e02d      	b.n	800bda2 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d017      	beq.n	800bd80 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bd5c:	23ff      	movs	r3, #255	; 0xff
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 f956 	bl	800c010 <USBH_Get_StringDesc>
 800bd64:	4603      	mov	r3, r0
 800bd66:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bd68:	7bbb      	ldrb	r3, [r7, #14]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d102      	bne.n	800bd74 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800bd72:	e018      	b.n	800bda6 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bd74:	7bbb      	ldrb	r3, [r7, #14]
 800bd76:	2b03      	cmp	r3, #3
 800bd78:	d115      	bne.n	800bda6 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	73fb      	strb	r3, [r7, #15]
      break;
 800bd7e:	e012      	b.n	800bda6 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800bd80:	2300      	movs	r3, #0
 800bd82:	73fb      	strb	r3, [r7, #15]
      break;
 800bd84:	e00f      	b.n	800bda6 <USBH_HandleEnum+0x44a>

    default:
      break;
 800bd86:	bf00      	nop
 800bd88:	e00e      	b.n	800bda8 <USBH_HandleEnum+0x44c>
      break;
 800bd8a:	bf00      	nop
 800bd8c:	e00c      	b.n	800bda8 <USBH_HandleEnum+0x44c>
      break;
 800bd8e:	bf00      	nop
 800bd90:	e00a      	b.n	800bda8 <USBH_HandleEnum+0x44c>
      break;
 800bd92:	bf00      	nop
 800bd94:	e008      	b.n	800bda8 <USBH_HandleEnum+0x44c>
      break;
 800bd96:	bf00      	nop
 800bd98:	e006      	b.n	800bda8 <USBH_HandleEnum+0x44c>
      break;
 800bd9a:	bf00      	nop
 800bd9c:	e004      	b.n	800bda8 <USBH_HandleEnum+0x44c>
      break;
 800bd9e:	bf00      	nop
 800bda0:	e002      	b.n	800bda8 <USBH_HandleEnum+0x44c>
      break;
 800bda2:	bf00      	nop
 800bda4:	e000      	b.n	800bda8 <USBH_HandleEnum+0x44c>
      break;
 800bda6:	bf00      	nop
  }
  return Status;
 800bda8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3710      	adds	r7, #16
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop

0800bdb4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b083      	sub	sp, #12
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	683a      	ldr	r2, [r7, #0]
 800bdc2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800bdc6:	bf00      	nop
 800bdc8:	370c      	adds	r7, #12
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr

0800bdd2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800bdd2:	b580      	push	{r7, lr}
 800bdd4:	b082      	sub	sp, #8
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bde0:	1c5a      	adds	r2, r3, #1
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 f804 	bl	800bdf6 <USBH_HandleSof>
}
 800bdee:	bf00      	nop
 800bdf0:	3708      	adds	r7, #8
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}

0800bdf6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800bdf6:	b580      	push	{r7, lr}
 800bdf8:	b082      	sub	sp, #8
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	b2db      	uxtb	r3, r3
 800be04:	2b0b      	cmp	r3, #11
 800be06:	d10a      	bne.n	800be1e <USBH_HandleSof+0x28>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d005      	beq.n	800be1e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be18:	699b      	ldr	r3, [r3, #24]
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	4798      	blx	r3
  }
}
 800be1e:	bf00      	nop
 800be20:	3708      	adds	r7, #8
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}

0800be26 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800be26:	b580      	push	{r7, lr}
 800be28:	b082      	sub	sp, #8
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2201      	movs	r2, #1
 800be32:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2201      	movs	r2, #1
 800be3a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800be4a:	2200      	movs	r2, #0
 800be4c:	4619      	mov	r1, r3
 800be4e:	f005 ffe1 	bl	8011e14 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800be52:	bf00      	nop
}
 800be54:	3708      	adds	r7, #8
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}

0800be5a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800be5a:	b480      	push	{r7}
 800be5c:	b083      	sub	sp, #12
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2200      	movs	r2, #0
 800be66:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800be6a:	bf00      	nop
}
 800be6c:	370c      	adds	r7, #12
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr

0800be76 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800be76:	b580      	push	{r7, lr}
 800be78:	b082      	sub	sp, #8
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2201      	movs	r2, #1
 800be82:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2200      	movs	r2, #0
 800be8a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2200      	movs	r2, #0
 800be92:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2201      	movs	r2, #1
 800be9a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800beaa:	2200      	movs	r2, #0
 800beac:	4619      	mov	r1, r3
 800beae:	f005 ffb1 	bl	8011e14 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800beb2:	2300      	movs	r3, #0
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3708      	adds	r7, #8
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}

0800bebc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2201      	movs	r2, #1
 800bec8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2200      	movs	r2, #0
 800bed0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2200      	movs	r2, #0
 800bed8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f008 fb4e 	bl	801457e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	791b      	ldrb	r3, [r3, #4]
 800bee6:	4619      	mov	r1, r3
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 ffbb 	bl	800ce64 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	795b      	ldrb	r3, [r3, #5]
 800bef2:	4619      	mov	r1, r3
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f000 ffb5 	bl	800ce64 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2201      	movs	r2, #1
 800befe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bf0e:	2200      	movs	r2, #0
 800bf10:	4619      	mov	r1, r3
 800bf12:	f005 ff7f 	bl	8011e14 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800bf16:	2300      	movs	r3, #0
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3708      	adds	r7, #8
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b086      	sub	sp, #24
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800bf2e:	f107 030c 	add.w	r3, r7, #12
 800bf32:	f04f 32ff 	mov.w	r2, #4294967295
 800bf36:	4618      	mov	r0, r3
 800bf38:	f005 ffac 	bl	8011e94 <osMessageGet>
    if (event.status == osEventMessage)
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2b10      	cmp	r3, #16
 800bf40:	d1f2      	bne.n	800bf28 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f7ff fa9e 	bl	800b484 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800bf48:	e7ee      	b.n	800bf28 <USBH_Process_OS+0x8>

0800bf4a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800bf4a:	b580      	push	{r7, lr}
 800bf4c:	b082      	sub	sp, #8
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2201      	movs	r2, #1
 800bf56:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bf66:	2200      	movs	r2, #0
 800bf68:	4619      	mov	r1, r3
 800bf6a:	f005 ff53 	bl	8011e14 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800bf6e:	2300      	movs	r3, #0
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3708      	adds	r7, #8
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b086      	sub	sp, #24
 800bf7c:	af02      	add	r7, sp, #8
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	460b      	mov	r3, r1
 800bf82:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800bf8a:	78fb      	ldrb	r3, [r7, #3]
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	9300      	str	r3, [sp, #0]
 800bf90:	4613      	mov	r3, r2
 800bf92:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bf96:	2100      	movs	r1, #0
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f000 f864 	bl	800c066 <USBH_GetDescriptor>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800bfa2:	7bfb      	ldrb	r3, [r7, #15]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d10a      	bne.n	800bfbe <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f203 3026 	addw	r0, r3, #806	; 0x326
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bfb4:	78fa      	ldrb	r2, [r7, #3]
 800bfb6:	b292      	uxth	r2, r2
 800bfb8:	4619      	mov	r1, r3
 800bfba:	f000 f918 	bl	800c1ee <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800bfbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3710      	adds	r7, #16
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b086      	sub	sp, #24
 800bfcc:	af02      	add	r7, sp, #8
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	460b      	mov	r3, r1
 800bfd2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	331c      	adds	r3, #28
 800bfd8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800bfda:	887b      	ldrh	r3, [r7, #2]
 800bfdc:	9300      	str	r3, [sp, #0]
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bfe4:	2100      	movs	r1, #0
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f000 f83d 	bl	800c066 <USBH_GetDescriptor>
 800bfec:	4603      	mov	r3, r0
 800bfee:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800bff0:	7bfb      	ldrb	r3, [r7, #15]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d107      	bne.n	800c006 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800bff6:	887b      	ldrh	r3, [r7, #2]
 800bff8:	461a      	mov	r2, r3
 800bffa:	68b9      	ldr	r1, [r7, #8]
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 f987 	bl	800c310 <USBH_ParseCfgDesc>
 800c002:	4603      	mov	r3, r0
 800c004:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c006:	7bfb      	ldrb	r3, [r7, #15]
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3710      	adds	r7, #16
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b088      	sub	sp, #32
 800c014:	af02      	add	r7, sp, #8
 800c016:	60f8      	str	r0, [r7, #12]
 800c018:	607a      	str	r2, [r7, #4]
 800c01a:	461a      	mov	r2, r3
 800c01c:	460b      	mov	r3, r1
 800c01e:	72fb      	strb	r3, [r7, #11]
 800c020:	4613      	mov	r3, r2
 800c022:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800c024:	7afb      	ldrb	r3, [r7, #11]
 800c026:	b29b      	uxth	r3, r3
 800c028:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c02c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c034:	893b      	ldrh	r3, [r7, #8]
 800c036:	9300      	str	r3, [sp, #0]
 800c038:	460b      	mov	r3, r1
 800c03a:	2100      	movs	r1, #0
 800c03c:	68f8      	ldr	r0, [r7, #12]
 800c03e:	f000 f812 	bl	800c066 <USBH_GetDescriptor>
 800c042:	4603      	mov	r3, r0
 800c044:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800c046:	7dfb      	ldrb	r3, [r7, #23]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d107      	bne.n	800c05c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c052:	893a      	ldrh	r2, [r7, #8]
 800c054:	6879      	ldr	r1, [r7, #4]
 800c056:	4618      	mov	r0, r3
 800c058:	f000 fb24 	bl	800c6a4 <USBH_ParseStringDesc>
  }

  return status;
 800c05c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3718      	adds	r7, #24
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}

0800c066 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c066:	b580      	push	{r7, lr}
 800c068:	b084      	sub	sp, #16
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	60f8      	str	r0, [r7, #12]
 800c06e:	607b      	str	r3, [r7, #4]
 800c070:	460b      	mov	r3, r1
 800c072:	72fb      	strb	r3, [r7, #11]
 800c074:	4613      	mov	r3, r2
 800c076:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	789b      	ldrb	r3, [r3, #2]
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d11c      	bne.n	800c0ba <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c080:	7afb      	ldrb	r3, [r7, #11]
 800c082:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c086:	b2da      	uxtb	r2, r3
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2206      	movs	r2, #6
 800c090:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	893a      	ldrh	r2, [r7, #8]
 800c096:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c098:	893b      	ldrh	r3, [r7, #8]
 800c09a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c09e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c0a2:	d104      	bne.n	800c0ae <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f240 4209 	movw	r2, #1033	; 0x409
 800c0aa:	829a      	strh	r2, [r3, #20]
 800c0ac:	e002      	b.n	800c0b4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	8b3a      	ldrh	r2, [r7, #24]
 800c0b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c0ba:	8b3b      	ldrh	r3, [r7, #24]
 800c0bc:	461a      	mov	r2, r3
 800c0be:	6879      	ldr	r1, [r7, #4]
 800c0c0:	68f8      	ldr	r0, [r7, #12]
 800c0c2:	f000 fb3d 	bl	800c740 <USBH_CtlReq>
 800c0c6:	4603      	mov	r3, r0
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3710      	adds	r7, #16
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b082      	sub	sp, #8
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	460b      	mov	r3, r1
 800c0da:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	789b      	ldrb	r3, [r3, #2]
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d10f      	bne.n	800c104 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2205      	movs	r2, #5
 800c0ee:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c0f0:	78fb      	ldrb	r3, [r7, #3]
 800c0f2:	b29a      	uxth	r2, r3
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2200      	movs	r2, #0
 800c102:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c104:	2200      	movs	r2, #0
 800c106:	2100      	movs	r1, #0
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f000 fb19 	bl	800c740 <USBH_CtlReq>
 800c10e:	4603      	mov	r3, r0
}
 800c110:	4618      	mov	r0, r3
 800c112:	3708      	adds	r7, #8
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}

0800c118 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b082      	sub	sp, #8
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	460b      	mov	r3, r1
 800c122:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	789b      	ldrb	r3, [r3, #2]
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d10e      	bne.n	800c14a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2200      	movs	r2, #0
 800c130:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2209      	movs	r2, #9
 800c136:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	887a      	ldrh	r2, [r7, #2]
 800c13c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2200      	movs	r2, #0
 800c142:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2200      	movs	r2, #0
 800c148:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c14a:	2200      	movs	r2, #0
 800c14c:	2100      	movs	r1, #0
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 faf6 	bl	800c740 <USBH_CtlReq>
 800c154:	4603      	mov	r3, r0
}
 800c156:	4618      	mov	r0, r3
 800c158:	3708      	adds	r7, #8
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}

0800c15e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c15e:	b580      	push	{r7, lr}
 800c160:	b082      	sub	sp, #8
 800c162:	af00      	add	r7, sp, #0
 800c164:	6078      	str	r0, [r7, #4]
 800c166:	460b      	mov	r3, r1
 800c168:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	789b      	ldrb	r3, [r3, #2]
 800c16e:	2b01      	cmp	r3, #1
 800c170:	d10f      	bne.n	800c192 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2200      	movs	r2, #0
 800c176:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2203      	movs	r2, #3
 800c17c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c17e:	78fb      	ldrb	r3, [r7, #3]
 800c180:	b29a      	uxth	r2, r3
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2200      	movs	r2, #0
 800c18a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2200      	movs	r2, #0
 800c190:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c192:	2200      	movs	r2, #0
 800c194:	2100      	movs	r1, #0
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f000 fad2 	bl	800c740 <USBH_CtlReq>
 800c19c:	4603      	mov	r3, r0
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3708      	adds	r7, #8
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}

0800c1a6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c1a6:	b580      	push	{r7, lr}
 800c1a8:	b082      	sub	sp, #8
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	6078      	str	r0, [r7, #4]
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	789b      	ldrb	r3, [r3, #2]
 800c1b6:	2b01      	cmp	r3, #1
 800c1b8:	d10f      	bne.n	800c1da <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2202      	movs	r2, #2
 800c1be:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c1cc:	78fb      	ldrb	r3, [r7, #3]
 800c1ce:	b29a      	uxth	r2, r3
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800c1da:	2200      	movs	r2, #0
 800c1dc:	2100      	movs	r1, #0
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f000 faae 	bl	800c740 <USBH_CtlReq>
 800c1e4:	4603      	mov	r3, r0
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3708      	adds	r7, #8
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c1ee:	b480      	push	{r7}
 800c1f0:	b085      	sub	sp, #20
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	60f8      	str	r0, [r7, #12]
 800c1f6:	60b9      	str	r1, [r7, #8]
 800c1f8:	4613      	mov	r3, r2
 800c1fa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	781a      	ldrb	r2, [r3, #0]
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	785a      	ldrb	r2, [r3, #1]
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	3302      	adds	r3, #2
 800c210:	781b      	ldrb	r3, [r3, #0]
 800c212:	b29a      	uxth	r2, r3
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	3303      	adds	r3, #3
 800c218:	781b      	ldrb	r3, [r3, #0]
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	021b      	lsls	r3, r3, #8
 800c21e:	b29b      	uxth	r3, r3
 800c220:	4313      	orrs	r3, r2
 800c222:	b29a      	uxth	r2, r3
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	791a      	ldrb	r2, [r3, #4]
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	795a      	ldrb	r2, [r3, #5]
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	799a      	ldrb	r2, [r3, #6]
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	79da      	ldrb	r2, [r3, #7]
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	79db      	ldrb	r3, [r3, #7]
 800c24c:	2b20      	cmp	r3, #32
 800c24e:	dc11      	bgt.n	800c274 <USBH_ParseDevDesc+0x86>
 800c250:	2b08      	cmp	r3, #8
 800c252:	db16      	blt.n	800c282 <USBH_ParseDevDesc+0x94>
 800c254:	3b08      	subs	r3, #8
 800c256:	2201      	movs	r2, #1
 800c258:	fa02 f303 	lsl.w	r3, r2, r3
 800c25c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800c260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c264:	2b00      	cmp	r3, #0
 800c266:	bf14      	ite	ne
 800c268:	2301      	movne	r3, #1
 800c26a:	2300      	moveq	r3, #0
 800c26c:	b2db      	uxtb	r3, r3
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d102      	bne.n	800c278 <USBH_ParseDevDesc+0x8a>
 800c272:	e006      	b.n	800c282 <USBH_ParseDevDesc+0x94>
 800c274:	2b40      	cmp	r3, #64	; 0x40
 800c276:	d104      	bne.n	800c282 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	79da      	ldrb	r2, [r3, #7]
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	71da      	strb	r2, [r3, #7]
      break;
 800c280:	e003      	b.n	800c28a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	2240      	movs	r2, #64	; 0x40
 800c286:	71da      	strb	r2, [r3, #7]
      break;
 800c288:	bf00      	nop
  }

  if (length > 8U)
 800c28a:	88fb      	ldrh	r3, [r7, #6]
 800c28c:	2b08      	cmp	r3, #8
 800c28e:	d939      	bls.n	800c304 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	3308      	adds	r3, #8
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	b29a      	uxth	r2, r3
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	3309      	adds	r3, #9
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	021b      	lsls	r3, r3, #8
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	4313      	orrs	r3, r2
 800c2a6:	b29a      	uxth	r2, r3
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	330a      	adds	r3, #10
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	b29a      	uxth	r2, r3
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	330b      	adds	r3, #11
 800c2b8:	781b      	ldrb	r3, [r3, #0]
 800c2ba:	b29b      	uxth	r3, r3
 800c2bc:	021b      	lsls	r3, r3, #8
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	b29a      	uxth	r2, r3
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	330c      	adds	r3, #12
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	b29a      	uxth	r2, r3
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	330d      	adds	r3, #13
 800c2d4:	781b      	ldrb	r3, [r3, #0]
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	021b      	lsls	r3, r3, #8
 800c2da:	b29b      	uxth	r3, r3
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	b29a      	uxth	r2, r3
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	7b9a      	ldrb	r2, [r3, #14]
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	7bda      	ldrb	r2, [r3, #15]
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	7c1a      	ldrb	r2, [r3, #16]
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	7c5a      	ldrb	r2, [r3, #17]
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	745a      	strb	r2, [r3, #17]
  }
}
 800c304:	bf00      	nop
 800c306:	3714      	adds	r7, #20
 800c308:	46bd      	mov	sp, r7
 800c30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30e:	4770      	bx	lr

0800c310 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b08c      	sub	sp, #48	; 0x30
 800c314:	af00      	add	r7, sp, #0
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	60b9      	str	r1, [r7, #8]
 800c31a:	4613      	mov	r3, r2
 800c31c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c324:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c326:	2300      	movs	r3, #0
 800c328:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c330:	2300      	movs	r3, #0
 800c332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800c336:	2300      	movs	r3, #0
 800c338:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	781a      	ldrb	r2, [r3, #0]
 800c344:	6a3b      	ldr	r3, [r7, #32]
 800c346:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	785a      	ldrb	r2, [r3, #1]
 800c34c:	6a3b      	ldr	r3, [r7, #32]
 800c34e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	3302      	adds	r3, #2
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	b29a      	uxth	r2, r3
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	3303      	adds	r3, #3
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	b29b      	uxth	r3, r3
 800c360:	021b      	lsls	r3, r3, #8
 800c362:	b29b      	uxth	r3, r3
 800c364:	4313      	orrs	r3, r2
 800c366:	b29b      	uxth	r3, r3
 800c368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c36c:	bf28      	it	cs
 800c36e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800c372:	b29a      	uxth	r2, r3
 800c374:	6a3b      	ldr	r3, [r7, #32]
 800c376:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	791a      	ldrb	r2, [r3, #4]
 800c37c:	6a3b      	ldr	r3, [r7, #32]
 800c37e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	795a      	ldrb	r2, [r3, #5]
 800c384:	6a3b      	ldr	r3, [r7, #32]
 800c386:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	799a      	ldrb	r2, [r3, #6]
 800c38c:	6a3b      	ldr	r3, [r7, #32]
 800c38e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	79da      	ldrb	r2, [r3, #7]
 800c394:	6a3b      	ldr	r3, [r7, #32]
 800c396:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	7a1a      	ldrb	r2, [r3, #8]
 800c39c:	6a3b      	ldr	r3, [r7, #32]
 800c39e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800c3a0:	6a3b      	ldr	r3, [r7, #32]
 800c3a2:	781b      	ldrb	r3, [r3, #0]
 800c3a4:	2b09      	cmp	r3, #9
 800c3a6:	d002      	beq.n	800c3ae <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c3a8:	6a3b      	ldr	r3, [r7, #32]
 800c3aa:	2209      	movs	r2, #9
 800c3ac:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c3ae:	88fb      	ldrh	r3, [r7, #6]
 800c3b0:	2b09      	cmp	r3, #9
 800c3b2:	f240 809d 	bls.w	800c4f0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800c3b6:	2309      	movs	r3, #9
 800c3b8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c3be:	e081      	b.n	800c4c4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c3c0:	f107 0316 	add.w	r3, r7, #22
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3c8:	f000 f99f 	bl	800c70a <USBH_GetNextDesc>
 800c3cc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d0:	785b      	ldrb	r3, [r3, #1]
 800c3d2:	2b04      	cmp	r3, #4
 800c3d4:	d176      	bne.n	800c4c4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	2b09      	cmp	r3, #9
 800c3dc:	d002      	beq.n	800c3e4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e0:	2209      	movs	r2, #9
 800c3e2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c3e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3e8:	221a      	movs	r2, #26
 800c3ea:	fb02 f303 	mul.w	r3, r2, r3
 800c3ee:	3308      	adds	r3, #8
 800c3f0:	6a3a      	ldr	r2, [r7, #32]
 800c3f2:	4413      	add	r3, r2
 800c3f4:	3302      	adds	r3, #2
 800c3f6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c3f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3fa:	69f8      	ldr	r0, [r7, #28]
 800c3fc:	f000 f87e 	bl	800c4fc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c400:	2300      	movs	r3, #0
 800c402:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c406:	2300      	movs	r3, #0
 800c408:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c40a:	e043      	b.n	800c494 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c40c:	f107 0316 	add.w	r3, r7, #22
 800c410:	4619      	mov	r1, r3
 800c412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c414:	f000 f979 	bl	800c70a <USBH_GetNextDesc>
 800c418:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41c:	785b      	ldrb	r3, [r3, #1]
 800c41e:	2b05      	cmp	r3, #5
 800c420:	d138      	bne.n	800c494 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800c422:	69fb      	ldr	r3, [r7, #28]
 800c424:	795b      	ldrb	r3, [r3, #5]
 800c426:	2b01      	cmp	r3, #1
 800c428:	d10f      	bne.n	800c44a <USBH_ParseCfgDesc+0x13a>
 800c42a:	69fb      	ldr	r3, [r7, #28]
 800c42c:	799b      	ldrb	r3, [r3, #6]
 800c42e:	2b02      	cmp	r3, #2
 800c430:	d10b      	bne.n	800c44a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c432:	69fb      	ldr	r3, [r7, #28]
 800c434:	79db      	ldrb	r3, [r3, #7]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d10f      	bne.n	800c45a <USBH_ParseCfgDesc+0x14a>
 800c43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	2b09      	cmp	r3, #9
 800c440:	d00b      	beq.n	800c45a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800c442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c444:	2209      	movs	r2, #9
 800c446:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c448:	e007      	b.n	800c45a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800c44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c44c:	781b      	ldrb	r3, [r3, #0]
 800c44e:	2b07      	cmp	r3, #7
 800c450:	d004      	beq.n	800c45c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c454:	2207      	movs	r2, #7
 800c456:	701a      	strb	r2, [r3, #0]
 800c458:	e000      	b.n	800c45c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c45a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c45c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c460:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c464:	3201      	adds	r2, #1
 800c466:	00d2      	lsls	r2, r2, #3
 800c468:	211a      	movs	r1, #26
 800c46a:	fb01 f303 	mul.w	r3, r1, r3
 800c46e:	4413      	add	r3, r2
 800c470:	3308      	adds	r3, #8
 800c472:	6a3a      	ldr	r2, [r7, #32]
 800c474:	4413      	add	r3, r2
 800c476:	3304      	adds	r3, #4
 800c478:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c47a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c47c:	69b9      	ldr	r1, [r7, #24]
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	f000 f86b 	bl	800c55a <USBH_ParseEPDesc>
 800c484:	4603      	mov	r3, r0
 800c486:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800c48a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c48e:	3301      	adds	r3, #1
 800c490:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c494:	69fb      	ldr	r3, [r7, #28]
 800c496:	791b      	ldrb	r3, [r3, #4]
 800c498:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d204      	bcs.n	800c4aa <USBH_ParseCfgDesc+0x19a>
 800c4a0:	6a3b      	ldr	r3, [r7, #32]
 800c4a2:	885a      	ldrh	r2, [r3, #2]
 800c4a4:	8afb      	ldrh	r3, [r7, #22]
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d8b0      	bhi.n	800c40c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c4aa:	69fb      	ldr	r3, [r7, #28]
 800c4ac:	791b      	ldrb	r3, [r3, #4]
 800c4ae:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d201      	bcs.n	800c4ba <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800c4b6:	2303      	movs	r3, #3
 800c4b8:	e01c      	b.n	800c4f4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800c4ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4be:	3301      	adds	r3, #1
 800c4c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c4c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4c8:	2b01      	cmp	r3, #1
 800c4ca:	d805      	bhi.n	800c4d8 <USBH_ParseCfgDesc+0x1c8>
 800c4cc:	6a3b      	ldr	r3, [r7, #32]
 800c4ce:	885a      	ldrh	r2, [r3, #2]
 800c4d0:	8afb      	ldrh	r3, [r7, #22]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	f63f af74 	bhi.w	800c3c0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c4d8:	6a3b      	ldr	r3, [r7, #32]
 800c4da:	791b      	ldrb	r3, [r3, #4]
 800c4dc:	2b02      	cmp	r3, #2
 800c4de:	bf28      	it	cs
 800c4e0:	2302      	movcs	r3, #2
 800c4e2:	b2db      	uxtb	r3, r3
 800c4e4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d201      	bcs.n	800c4f0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800c4ec:	2303      	movs	r3, #3
 800c4ee:	e001      	b.n	800c4f4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800c4f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3730      	adds	r7, #48	; 0x30
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}

0800c4fc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b083      	sub	sp, #12
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	781a      	ldrb	r2, [r3, #0]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	785a      	ldrb	r2, [r3, #1]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	789a      	ldrb	r2, [r3, #2]
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	78da      	ldrb	r2, [r3, #3]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	791a      	ldrb	r2, [r3, #4]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	795a      	ldrb	r2, [r3, #5]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	799a      	ldrb	r2, [r3, #6]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	79da      	ldrb	r2, [r3, #7]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	7a1a      	ldrb	r2, [r3, #8]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	721a      	strb	r2, [r3, #8]
}
 800c54e:	bf00      	nop
 800c550:	370c      	adds	r7, #12
 800c552:	46bd      	mov	sp, r7
 800c554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c558:	4770      	bx	lr

0800c55a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800c55a:	b480      	push	{r7}
 800c55c:	b087      	sub	sp, #28
 800c55e:	af00      	add	r7, sp, #0
 800c560:	60f8      	str	r0, [r7, #12]
 800c562:	60b9      	str	r1, [r7, #8]
 800c564:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c566:	2300      	movs	r3, #0
 800c568:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	781a      	ldrb	r2, [r3, #0]
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	785a      	ldrb	r2, [r3, #1]
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	789a      	ldrb	r2, [r3, #2]
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	78da      	ldrb	r2, [r3, #3]
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	3304      	adds	r3, #4
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	b29a      	uxth	r2, r3
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	3305      	adds	r3, #5
 800c596:	781b      	ldrb	r3, [r3, #0]
 800c598:	b29b      	uxth	r3, r3
 800c59a:	021b      	lsls	r3, r3, #8
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	b29a      	uxth	r2, r3
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	799a      	ldrb	r2, [r3, #6]
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	889b      	ldrh	r3, [r3, #4]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d102      	bne.n	800c5bc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800c5b6:	2303      	movs	r3, #3
 800c5b8:	75fb      	strb	r3, [r7, #23]
 800c5ba:	e033      	b.n	800c624 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	889b      	ldrh	r3, [r3, #4]
 800c5c0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c5c4:	f023 0307 	bic.w	r3, r3, #7
 800c5c8:	b29a      	uxth	r2, r3
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	889b      	ldrh	r3, [r3, #4]
 800c5d2:	b21a      	sxth	r2, r3
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	3304      	adds	r3, #4
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	b299      	uxth	r1, r3
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	3305      	adds	r3, #5
 800c5e0:	781b      	ldrb	r3, [r3, #0]
 800c5e2:	b29b      	uxth	r3, r3
 800c5e4:	021b      	lsls	r3, r3, #8
 800c5e6:	b29b      	uxth	r3, r3
 800c5e8:	430b      	orrs	r3, r1
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d110      	bne.n	800c616 <USBH_ParseEPDesc+0xbc>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	3304      	adds	r3, #4
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	b299      	uxth	r1, r3
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	3305      	adds	r3, #5
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	b29b      	uxth	r3, r3
 800c604:	021b      	lsls	r3, r3, #8
 800c606:	b29b      	uxth	r3, r3
 800c608:	430b      	orrs	r3, r1
 800c60a:	b29b      	uxth	r3, r3
 800c60c:	b21b      	sxth	r3, r3
 800c60e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c612:	b21b      	sxth	r3, r3
 800c614:	e001      	b.n	800c61a <USBH_ParseEPDesc+0xc0>
 800c616:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c61a:	4313      	orrs	r3, r2
 800c61c:	b21b      	sxth	r3, r3
 800c61e:	b29a      	uxth	r2, r3
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d116      	bne.n	800c65c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	78db      	ldrb	r3, [r3, #3]
 800c632:	f003 0303 	and.w	r3, r3, #3
 800c636:	2b01      	cmp	r3, #1
 800c638:	d005      	beq.n	800c646 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	78db      	ldrb	r3, [r3, #3]
 800c63e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c642:	2b03      	cmp	r3, #3
 800c644:	d127      	bne.n	800c696 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	799b      	ldrb	r3, [r3, #6]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d003      	beq.n	800c656 <USBH_ParseEPDesc+0xfc>
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	799b      	ldrb	r3, [r3, #6]
 800c652:	2b10      	cmp	r3, #16
 800c654:	d91f      	bls.n	800c696 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c656:	2303      	movs	r3, #3
 800c658:	75fb      	strb	r3, [r7, #23]
 800c65a:	e01c      	b.n	800c696 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	78db      	ldrb	r3, [r3, #3]
 800c660:	f003 0303 	and.w	r3, r3, #3
 800c664:	2b01      	cmp	r3, #1
 800c666:	d10a      	bne.n	800c67e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	799b      	ldrb	r3, [r3, #6]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d003      	beq.n	800c678 <USBH_ParseEPDesc+0x11e>
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	799b      	ldrb	r3, [r3, #6]
 800c674:	2b10      	cmp	r3, #16
 800c676:	d90e      	bls.n	800c696 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c678:	2303      	movs	r3, #3
 800c67a:	75fb      	strb	r3, [r7, #23]
 800c67c:	e00b      	b.n	800c696 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	78db      	ldrb	r3, [r3, #3]
 800c682:	f003 0303 	and.w	r3, r3, #3
 800c686:	2b03      	cmp	r3, #3
 800c688:	d105      	bne.n	800c696 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	799b      	ldrb	r3, [r3, #6]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d101      	bne.n	800c696 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c692:	2303      	movs	r3, #3
 800c694:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800c696:	7dfb      	ldrb	r3, [r7, #23]
}
 800c698:	4618      	mov	r0, r3
 800c69a:	371c      	adds	r7, #28
 800c69c:	46bd      	mov	sp, r7
 800c69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a2:	4770      	bx	lr

0800c6a4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b087      	sub	sp, #28
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	60f8      	str	r0, [r7, #12]
 800c6ac:	60b9      	str	r1, [r7, #8]
 800c6ae:	4613      	mov	r3, r2
 800c6b0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	3301      	adds	r3, #1
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	2b03      	cmp	r3, #3
 800c6ba:	d120      	bne.n	800c6fe <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	1e9a      	subs	r2, r3, #2
 800c6c2:	88fb      	ldrh	r3, [r7, #6]
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	bf28      	it	cs
 800c6c8:	4613      	movcs	r3, r2
 800c6ca:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	3302      	adds	r3, #2
 800c6d0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	82fb      	strh	r3, [r7, #22]
 800c6d6:	e00b      	b.n	800c6f0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c6d8:	8afb      	ldrh	r3, [r7, #22]
 800c6da:	68fa      	ldr	r2, [r7, #12]
 800c6dc:	4413      	add	r3, r2
 800c6de:	781a      	ldrb	r2, [r3, #0]
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	3301      	adds	r3, #1
 800c6e8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c6ea:	8afb      	ldrh	r3, [r7, #22]
 800c6ec:	3302      	adds	r3, #2
 800c6ee:	82fb      	strh	r3, [r7, #22]
 800c6f0:	8afa      	ldrh	r2, [r7, #22]
 800c6f2:	8abb      	ldrh	r3, [r7, #20]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d3ef      	bcc.n	800c6d8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	701a      	strb	r2, [r3, #0]
  }
}
 800c6fe:	bf00      	nop
 800c700:	371c      	adds	r7, #28
 800c702:	46bd      	mov	sp, r7
 800c704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c708:	4770      	bx	lr

0800c70a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800c70a:	b480      	push	{r7}
 800c70c:	b085      	sub	sp, #20
 800c70e:	af00      	add	r7, sp, #0
 800c710:	6078      	str	r0, [r7, #4]
 800c712:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	881a      	ldrh	r2, [r3, #0]
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	b29b      	uxth	r3, r3
 800c71e:	4413      	add	r3, r2
 800c720:	b29a      	uxth	r2, r3
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	4413      	add	r3, r2
 800c730:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c732:	68fb      	ldr	r3, [r7, #12]
}
 800c734:	4618      	mov	r0, r3
 800c736:	3714      	adds	r7, #20
 800c738:	46bd      	mov	sp, r7
 800c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73e:	4770      	bx	lr

0800c740 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b086      	sub	sp, #24
 800c744:	af00      	add	r7, sp, #0
 800c746:	60f8      	str	r0, [r7, #12]
 800c748:	60b9      	str	r1, [r7, #8]
 800c74a:	4613      	mov	r3, r2
 800c74c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c74e:	2301      	movs	r3, #1
 800c750:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	789b      	ldrb	r3, [r3, #2]
 800c756:	2b01      	cmp	r3, #1
 800c758:	d002      	beq.n	800c760 <USBH_CtlReq+0x20>
 800c75a:	2b02      	cmp	r3, #2
 800c75c:	d01d      	beq.n	800c79a <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800c75e:	e043      	b.n	800c7e8 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	68ba      	ldr	r2, [r7, #8]
 800c764:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	88fa      	ldrh	r2, [r7, #6]
 800c76a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2201      	movs	r2, #1
 800c770:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	2202      	movs	r2, #2
 800c776:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c778:	2301      	movs	r3, #1
 800c77a:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	2203      	movs	r2, #3
 800c780:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c790:	2200      	movs	r2, #0
 800c792:	4619      	mov	r1, r3
 800c794:	f005 fb3e 	bl	8011e14 <osMessagePut>
      break;
 800c798:	e026      	b.n	800c7e8 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800c79a:	68f8      	ldr	r0, [r7, #12]
 800c79c:	f000 f82a 	bl	800c7f4 <USBH_HandleControl>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c7a4:	7dfb      	ldrb	r3, [r7, #23]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d002      	beq.n	800c7b0 <USBH_CtlReq+0x70>
 800c7aa:	7dfb      	ldrb	r3, [r7, #23]
 800c7ac:	2b03      	cmp	r3, #3
 800c7ae:	d106      	bne.n	800c7be <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	761a      	strb	r2, [r3, #24]
 800c7bc:	e005      	b.n	800c7ca <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800c7be:	7dfb      	ldrb	r3, [r7, #23]
 800c7c0:	2b02      	cmp	r3, #2
 800c7c2:	d102      	bne.n	800c7ca <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	2203      	movs	r2, #3
 800c7ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c7de:	2200      	movs	r2, #0
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	f005 fb17 	bl	8011e14 <osMessagePut>
      break;
 800c7e6:	bf00      	nop
  }
  return status;
 800c7e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3718      	adds	r7, #24
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}
	...

0800c7f4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b086      	sub	sp, #24
 800c7f8:	af02      	add	r7, sp, #8
 800c7fa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c800:	2300      	movs	r3, #0
 800c802:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	7e1b      	ldrb	r3, [r3, #24]
 800c808:	3b01      	subs	r3, #1
 800c80a:	2b0a      	cmp	r3, #10
 800c80c:	f200 8229 	bhi.w	800cc62 <USBH_HandleControl+0x46e>
 800c810:	a201      	add	r2, pc, #4	; (adr r2, 800c818 <USBH_HandleControl+0x24>)
 800c812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c816:	bf00      	nop
 800c818:	0800c845 	.word	0x0800c845
 800c81c:	0800c85f 	.word	0x0800c85f
 800c820:	0800c901 	.word	0x0800c901
 800c824:	0800c927 	.word	0x0800c927
 800c828:	0800c9b3 	.word	0x0800c9b3
 800c82c:	0800c9dd 	.word	0x0800c9dd
 800c830:	0800ca9f 	.word	0x0800ca9f
 800c834:	0800cac1 	.word	0x0800cac1
 800c838:	0800cb53 	.word	0x0800cb53
 800c83c:	0800cb79 	.word	0x0800cb79
 800c840:	0800cc0b 	.word	0x0800cc0b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f103 0110 	add.w	r1, r3, #16
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	795b      	ldrb	r3, [r3, #5]
 800c84e:	461a      	mov	r2, r3
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f000 fa17 	bl	800cc84 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2202      	movs	r2, #2
 800c85a:	761a      	strb	r2, [r3, #24]
      break;
 800c85c:	e20c      	b.n	800cc78 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	795b      	ldrb	r3, [r3, #5]
 800c862:	4619      	mov	r1, r3
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f007 ff79 	bl	801475c <USBH_LL_GetURBState>
 800c86a:	4603      	mov	r3, r0
 800c86c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c86e:	7bbb      	ldrb	r3, [r7, #14]
 800c870:	2b01      	cmp	r3, #1
 800c872:	d12c      	bne.n	800c8ce <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	7c1b      	ldrb	r3, [r3, #16]
 800c878:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c87c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	8adb      	ldrh	r3, [r3, #22]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d00a      	beq.n	800c89c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c886:	7b7b      	ldrb	r3, [r7, #13]
 800c888:	2b80      	cmp	r3, #128	; 0x80
 800c88a:	d103      	bne.n	800c894 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2203      	movs	r2, #3
 800c890:	761a      	strb	r2, [r3, #24]
 800c892:	e00d      	b.n	800c8b0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2205      	movs	r2, #5
 800c898:	761a      	strb	r2, [r3, #24]
 800c89a:	e009      	b.n	800c8b0 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800c89c:	7b7b      	ldrb	r3, [r7, #13]
 800c89e:	2b80      	cmp	r3, #128	; 0x80
 800c8a0:	d103      	bne.n	800c8aa <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2209      	movs	r2, #9
 800c8a6:	761a      	strb	r2, [r3, #24]
 800c8a8:	e002      	b.n	800c8b0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2207      	movs	r2, #7
 800c8ae:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2203      	movs	r2, #3
 800c8b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	f005 faa4 	bl	8011e14 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c8cc:	e1cb      	b.n	800cc66 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c8ce:	7bbb      	ldrb	r3, [r7, #14]
 800c8d0:	2b04      	cmp	r3, #4
 800c8d2:	d003      	beq.n	800c8dc <USBH_HandleControl+0xe8>
 800c8d4:	7bbb      	ldrb	r3, [r7, #14]
 800c8d6:	2b02      	cmp	r3, #2
 800c8d8:	f040 81c5 	bne.w	800cc66 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	220b      	movs	r2, #11
 800c8e0:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2203      	movs	r2, #3
 800c8e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	f005 fa8b 	bl	8011e14 <osMessagePut>
      break;
 800c8fe:	e1b2      	b.n	800cc66 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c906:	b29a      	uxth	r2, r3
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6899      	ldr	r1, [r3, #8]
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	899a      	ldrh	r2, [r3, #12]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	791b      	ldrb	r3, [r3, #4]
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f000 f9f2 	bl	800cd02 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2204      	movs	r2, #4
 800c922:	761a      	strb	r2, [r3, #24]
      break;
 800c924:	e1a8      	b.n	800cc78 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	791b      	ldrb	r3, [r3, #4]
 800c92a:	4619      	mov	r1, r3
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f007 ff15 	bl	801475c <USBH_LL_GetURBState>
 800c932:	4603      	mov	r3, r0
 800c934:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c936:	7bbb      	ldrb	r3, [r7, #14]
 800c938:	2b01      	cmp	r3, #1
 800c93a:	d110      	bne.n	800c95e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2209      	movs	r2, #9
 800c940:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2203      	movs	r2, #3
 800c946:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c956:	2200      	movs	r2, #0
 800c958:	4619      	mov	r1, r3
 800c95a:	f005 fa5b 	bl	8011e14 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c95e:	7bbb      	ldrb	r3, [r7, #14]
 800c960:	2b05      	cmp	r3, #5
 800c962:	d110      	bne.n	800c986 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c964:	2303      	movs	r3, #3
 800c966:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2203      	movs	r2, #3
 800c96c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c97c:	2200      	movs	r2, #0
 800c97e:	4619      	mov	r1, r3
 800c980:	f005 fa48 	bl	8011e14 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c984:	e171      	b.n	800cc6a <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800c986:	7bbb      	ldrb	r3, [r7, #14]
 800c988:	2b04      	cmp	r3, #4
 800c98a:	f040 816e 	bne.w	800cc6a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	220b      	movs	r2, #11
 800c992:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2203      	movs	r2, #3
 800c998:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	f005 fa32 	bl	8011e14 <osMessagePut>
      break;
 800c9b0:	e15b      	b.n	800cc6a <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6899      	ldr	r1, [r3, #8]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	899a      	ldrh	r2, [r3, #12]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	795b      	ldrb	r3, [r3, #5]
 800c9be:	2001      	movs	r0, #1
 800c9c0:	9000      	str	r0, [sp, #0]
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f000 f978 	bl	800ccb8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c9ce:	b29a      	uxth	r2, r3
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2206      	movs	r2, #6
 800c9d8:	761a      	strb	r2, [r3, #24]
      break;
 800c9da:	e14d      	b.n	800cc78 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	795b      	ldrb	r3, [r3, #5]
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f007 feba 	bl	801475c <USBH_LL_GetURBState>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c9ec:	7bbb      	ldrb	r3, [r7, #14]
 800c9ee:	2b01      	cmp	r3, #1
 800c9f0:	d111      	bne.n	800ca16 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2207      	movs	r2, #7
 800c9f6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2203      	movs	r2, #3
 800c9fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	4619      	mov	r1, r3
 800ca10:	f005 fa00 	bl	8011e14 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ca14:	e12b      	b.n	800cc6e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800ca16:	7bbb      	ldrb	r3, [r7, #14]
 800ca18:	2b05      	cmp	r3, #5
 800ca1a:	d113      	bne.n	800ca44 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	220c      	movs	r2, #12
 800ca20:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ca22:	2303      	movs	r3, #3
 800ca24:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2203      	movs	r2, #3
 800ca2a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	f005 f9e9 	bl	8011e14 <osMessagePut>
      break;
 800ca42:	e114      	b.n	800cc6e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ca44:	7bbb      	ldrb	r3, [r7, #14]
 800ca46:	2b02      	cmp	r3, #2
 800ca48:	d111      	bne.n	800ca6e <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2205      	movs	r2, #5
 800ca4e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2203      	movs	r2, #3
 800ca54:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ca64:	2200      	movs	r2, #0
 800ca66:	4619      	mov	r1, r3
 800ca68:	f005 f9d4 	bl	8011e14 <osMessagePut>
      break;
 800ca6c:	e0ff      	b.n	800cc6e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800ca6e:	7bbb      	ldrb	r3, [r7, #14]
 800ca70:	2b04      	cmp	r3, #4
 800ca72:	f040 80fc 	bne.w	800cc6e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	220b      	movs	r2, #11
 800ca7a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ca7c:	2302      	movs	r3, #2
 800ca7e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2203      	movs	r2, #3
 800ca84:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ca94:	2200      	movs	r2, #0
 800ca96:	4619      	mov	r1, r3
 800ca98:	f005 f9bc 	bl	8011e14 <osMessagePut>
      break;
 800ca9c:	e0e7      	b.n	800cc6e <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	791b      	ldrb	r3, [r3, #4]
 800caa2:	2200      	movs	r2, #0
 800caa4:	2100      	movs	r1, #0
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f000 f92b 	bl	800cd02 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cab2:	b29a      	uxth	r2, r3
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2208      	movs	r2, #8
 800cabc:	761a      	strb	r2, [r3, #24]

      break;
 800cabe:	e0db      	b.n	800cc78 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	791b      	ldrb	r3, [r3, #4]
 800cac4:	4619      	mov	r1, r3
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f007 fe48 	bl	801475c <USBH_LL_GetURBState>
 800cacc:	4603      	mov	r3, r0
 800cace:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cad0:	7bbb      	ldrb	r3, [r7, #14]
 800cad2:	2b01      	cmp	r3, #1
 800cad4:	d113      	bne.n	800cafe <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	220d      	movs	r2, #13
 800cada:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800cadc:	2300      	movs	r3, #0
 800cade:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2203      	movs	r2, #3
 800cae4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800caf4:	2200      	movs	r2, #0
 800caf6:	4619      	mov	r1, r3
 800caf8:	f005 f98c 	bl	8011e14 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cafc:	e0b9      	b.n	800cc72 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800cafe:	7bbb      	ldrb	r3, [r7, #14]
 800cb00:	2b04      	cmp	r3, #4
 800cb02:	d111      	bne.n	800cb28 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	220b      	movs	r2, #11
 800cb08:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2203      	movs	r2, #3
 800cb0e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cb1e:	2200      	movs	r2, #0
 800cb20:	4619      	mov	r1, r3
 800cb22:	f005 f977 	bl	8011e14 <osMessagePut>
      break;
 800cb26:	e0a4      	b.n	800cc72 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800cb28:	7bbb      	ldrb	r3, [r7, #14]
 800cb2a:	2b05      	cmp	r3, #5
 800cb2c:	f040 80a1 	bne.w	800cc72 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800cb30:	2303      	movs	r3, #3
 800cb32:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2203      	movs	r2, #3
 800cb38:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cb48:	2200      	movs	r2, #0
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	f005 f962 	bl	8011e14 <osMessagePut>
      break;
 800cb50:	e08f      	b.n	800cc72 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	795b      	ldrb	r3, [r3, #5]
 800cb56:	2201      	movs	r2, #1
 800cb58:	9200      	str	r2, [sp, #0]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	2100      	movs	r1, #0
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f000 f8aa 	bl	800ccb8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cb6a:	b29a      	uxth	r2, r3
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	220a      	movs	r2, #10
 800cb74:	761a      	strb	r2, [r3, #24]
      break;
 800cb76:	e07f      	b.n	800cc78 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	795b      	ldrb	r3, [r3, #5]
 800cb7c:	4619      	mov	r1, r3
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f007 fdec 	bl	801475c <USBH_LL_GetURBState>
 800cb84:	4603      	mov	r3, r0
 800cb86:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800cb88:	7bbb      	ldrb	r3, [r7, #14]
 800cb8a:	2b01      	cmp	r3, #1
 800cb8c:	d113      	bne.n	800cbb6 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	220d      	movs	r2, #13
 800cb96:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2203      	movs	r2, #3
 800cb9c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cbac:	2200      	movs	r2, #0
 800cbae:	4619      	mov	r1, r3
 800cbb0:	f005 f930 	bl	8011e14 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cbb4:	e05f      	b.n	800cc76 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cbb6:	7bbb      	ldrb	r3, [r7, #14]
 800cbb8:	2b02      	cmp	r3, #2
 800cbba:	d111      	bne.n	800cbe0 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2209      	movs	r2, #9
 800cbc0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2203      	movs	r2, #3
 800cbc6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	4619      	mov	r1, r3
 800cbda:	f005 f91b 	bl	8011e14 <osMessagePut>
      break;
 800cbde:	e04a      	b.n	800cc76 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800cbe0:	7bbb      	ldrb	r3, [r7, #14]
 800cbe2:	2b04      	cmp	r3, #4
 800cbe4:	d147      	bne.n	800cc76 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	220b      	movs	r2, #11
 800cbea:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2203      	movs	r2, #3
 800cbf0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cc00:	2200      	movs	r2, #0
 800cc02:	4619      	mov	r1, r3
 800cc04:	f005 f906 	bl	8011e14 <osMessagePut>
      break;
 800cc08:	e035      	b.n	800cc76 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	7e5b      	ldrb	r3, [r3, #25]
 800cc0e:	3301      	adds	r3, #1
 800cc10:	b2da      	uxtb	r2, r3
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	765a      	strb	r2, [r3, #25]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	7e5b      	ldrb	r3, [r3, #25]
 800cc1a:	2b02      	cmp	r3, #2
 800cc1c:	d806      	bhi.n	800cc2c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2201      	movs	r2, #1
 800cc22:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2201      	movs	r2, #1
 800cc28:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800cc2a:	e025      	b.n	800cc78 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cc32:	2106      	movs	r1, #6
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	795b      	ldrb	r3, [r3, #5]
 800cc42:	4619      	mov	r1, r3
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 f90d 	bl	800ce64 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	791b      	ldrb	r3, [r3, #4]
 800cc4e:	4619      	mov	r1, r3
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f000 f907 	bl	800ce64 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800cc5c:	2302      	movs	r3, #2
 800cc5e:	73fb      	strb	r3, [r7, #15]
      break;
 800cc60:	e00a      	b.n	800cc78 <USBH_HandleControl+0x484>

    default:
      break;
 800cc62:	bf00      	nop
 800cc64:	e008      	b.n	800cc78 <USBH_HandleControl+0x484>
      break;
 800cc66:	bf00      	nop
 800cc68:	e006      	b.n	800cc78 <USBH_HandleControl+0x484>
      break;
 800cc6a:	bf00      	nop
 800cc6c:	e004      	b.n	800cc78 <USBH_HandleControl+0x484>
      break;
 800cc6e:	bf00      	nop
 800cc70:	e002      	b.n	800cc78 <USBH_HandleControl+0x484>
      break;
 800cc72:	bf00      	nop
 800cc74:	e000      	b.n	800cc78 <USBH_HandleControl+0x484>
      break;
 800cc76:	bf00      	nop
  }

  return status;
 800cc78:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3710      	adds	r7, #16
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}
 800cc82:	bf00      	nop

0800cc84 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b088      	sub	sp, #32
 800cc88:	af04      	add	r7, sp, #16
 800cc8a:	60f8      	str	r0, [r7, #12]
 800cc8c:	60b9      	str	r1, [r7, #8]
 800cc8e:	4613      	mov	r3, r2
 800cc90:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cc92:	79f9      	ldrb	r1, [r7, #7]
 800cc94:	2300      	movs	r3, #0
 800cc96:	9303      	str	r3, [sp, #12]
 800cc98:	2308      	movs	r3, #8
 800cc9a:	9302      	str	r3, [sp, #8]
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	9301      	str	r3, [sp, #4]
 800cca0:	2300      	movs	r3, #0
 800cca2:	9300      	str	r3, [sp, #0]
 800cca4:	2300      	movs	r3, #0
 800cca6:	2200      	movs	r2, #0
 800cca8:	68f8      	ldr	r0, [r7, #12]
 800ccaa:	f007 fd26 	bl	80146fa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800ccae:	2300      	movs	r3, #0
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3710      	adds	r7, #16
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}

0800ccb8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b088      	sub	sp, #32
 800ccbc:	af04      	add	r7, sp, #16
 800ccbe:	60f8      	str	r0, [r7, #12]
 800ccc0:	60b9      	str	r1, [r7, #8]
 800ccc2:	4611      	mov	r1, r2
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	460b      	mov	r3, r1
 800ccc8:	80fb      	strh	r3, [r7, #6]
 800ccca:	4613      	mov	r3, r2
 800cccc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d001      	beq.n	800ccdc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ccdc:	7979      	ldrb	r1, [r7, #5]
 800ccde:	7e3b      	ldrb	r3, [r7, #24]
 800cce0:	9303      	str	r3, [sp, #12]
 800cce2:	88fb      	ldrh	r3, [r7, #6]
 800cce4:	9302      	str	r3, [sp, #8]
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	9301      	str	r3, [sp, #4]
 800ccea:	2301      	movs	r3, #1
 800ccec:	9300      	str	r3, [sp, #0]
 800ccee:	2300      	movs	r3, #0
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	68f8      	ldr	r0, [r7, #12]
 800ccf4:	f007 fd01 	bl	80146fa <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ccf8:	2300      	movs	r3, #0
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3710      	adds	r7, #16
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}

0800cd02 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800cd02:	b580      	push	{r7, lr}
 800cd04:	b088      	sub	sp, #32
 800cd06:	af04      	add	r7, sp, #16
 800cd08:	60f8      	str	r0, [r7, #12]
 800cd0a:	60b9      	str	r1, [r7, #8]
 800cd0c:	4611      	mov	r1, r2
 800cd0e:	461a      	mov	r2, r3
 800cd10:	460b      	mov	r3, r1
 800cd12:	80fb      	strh	r3, [r7, #6]
 800cd14:	4613      	mov	r3, r2
 800cd16:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cd18:	7979      	ldrb	r1, [r7, #5]
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	9303      	str	r3, [sp, #12]
 800cd1e:	88fb      	ldrh	r3, [r7, #6]
 800cd20:	9302      	str	r3, [sp, #8]
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	9301      	str	r3, [sp, #4]
 800cd26:	2301      	movs	r3, #1
 800cd28:	9300      	str	r3, [sp, #0]
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	2201      	movs	r2, #1
 800cd2e:	68f8      	ldr	r0, [r7, #12]
 800cd30:	f007 fce3 	bl	80146fa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800cd34:	2300      	movs	r3, #0

}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3710      	adds	r7, #16
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}

0800cd3e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800cd3e:	b580      	push	{r7, lr}
 800cd40:	b088      	sub	sp, #32
 800cd42:	af04      	add	r7, sp, #16
 800cd44:	60f8      	str	r0, [r7, #12]
 800cd46:	60b9      	str	r1, [r7, #8]
 800cd48:	4611      	mov	r1, r2
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	460b      	mov	r3, r1
 800cd4e:	80fb      	strh	r3, [r7, #6]
 800cd50:	4613      	mov	r3, r2
 800cd52:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d001      	beq.n	800cd62 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cd62:	7979      	ldrb	r1, [r7, #5]
 800cd64:	7e3b      	ldrb	r3, [r7, #24]
 800cd66:	9303      	str	r3, [sp, #12]
 800cd68:	88fb      	ldrh	r3, [r7, #6]
 800cd6a:	9302      	str	r3, [sp, #8]
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	9301      	str	r3, [sp, #4]
 800cd70:	2301      	movs	r3, #1
 800cd72:	9300      	str	r3, [sp, #0]
 800cd74:	2302      	movs	r3, #2
 800cd76:	2200      	movs	r2, #0
 800cd78:	68f8      	ldr	r0, [r7, #12]
 800cd7a:	f007 fcbe 	bl	80146fa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800cd7e:	2300      	movs	r3, #0
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3710      	adds	r7, #16
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b088      	sub	sp, #32
 800cd8c:	af04      	add	r7, sp, #16
 800cd8e:	60f8      	str	r0, [r7, #12]
 800cd90:	60b9      	str	r1, [r7, #8]
 800cd92:	4611      	mov	r1, r2
 800cd94:	461a      	mov	r2, r3
 800cd96:	460b      	mov	r3, r1
 800cd98:	80fb      	strh	r3, [r7, #6]
 800cd9a:	4613      	mov	r3, r2
 800cd9c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cd9e:	7979      	ldrb	r1, [r7, #5]
 800cda0:	2300      	movs	r3, #0
 800cda2:	9303      	str	r3, [sp, #12]
 800cda4:	88fb      	ldrh	r3, [r7, #6]
 800cda6:	9302      	str	r3, [sp, #8]
 800cda8:	68bb      	ldr	r3, [r7, #8]
 800cdaa:	9301      	str	r3, [sp, #4]
 800cdac:	2301      	movs	r3, #1
 800cdae:	9300      	str	r3, [sp, #0]
 800cdb0:	2302      	movs	r3, #2
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	68f8      	ldr	r0, [r7, #12]
 800cdb6:	f007 fca0 	bl	80146fa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800cdba:	2300      	movs	r3, #0
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3710      	adds	r7, #16
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}

0800cdc4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b086      	sub	sp, #24
 800cdc8:	af04      	add	r7, sp, #16
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	4608      	mov	r0, r1
 800cdce:	4611      	mov	r1, r2
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	70fb      	strb	r3, [r7, #3]
 800cdd6:	460b      	mov	r3, r1
 800cdd8:	70bb      	strb	r3, [r7, #2]
 800cdda:	4613      	mov	r3, r2
 800cddc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800cdde:	7878      	ldrb	r0, [r7, #1]
 800cde0:	78ba      	ldrb	r2, [r7, #2]
 800cde2:	78f9      	ldrb	r1, [r7, #3]
 800cde4:	8b3b      	ldrh	r3, [r7, #24]
 800cde6:	9302      	str	r3, [sp, #8]
 800cde8:	7d3b      	ldrb	r3, [r7, #20]
 800cdea:	9301      	str	r3, [sp, #4]
 800cdec:	7c3b      	ldrb	r3, [r7, #16]
 800cdee:	9300      	str	r3, [sp, #0]
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f007 fc33 	bl	801465e <USBH_LL_OpenPipe>

  return USBH_OK;
 800cdf8:	2300      	movs	r3, #0
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3708      	adds	r7, #8
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b082      	sub	sp, #8
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]
 800ce0a:	460b      	mov	r3, r1
 800ce0c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ce0e:	78fb      	ldrb	r3, [r7, #3]
 800ce10:	4619      	mov	r1, r3
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f007 fc52 	bl	80146bc <USBH_LL_ClosePipe>

  return USBH_OK;
 800ce18:	2300      	movs	r3, #0
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3708      	adds	r7, #8
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}

0800ce22 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ce22:	b580      	push	{r7, lr}
 800ce24:	b084      	sub	sp, #16
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
 800ce2a:	460b      	mov	r3, r1
 800ce2c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f000 f836 	bl	800cea0 <USBH_GetFreePipe>
 800ce34:	4603      	mov	r3, r0
 800ce36:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ce38:	89fb      	ldrh	r3, [r7, #14]
 800ce3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce3e:	4293      	cmp	r3, r2
 800ce40:	d00a      	beq.n	800ce58 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ce42:	78fa      	ldrb	r2, [r7, #3]
 800ce44:	89fb      	ldrh	r3, [r7, #14]
 800ce46:	f003 030f 	and.w	r3, r3, #15
 800ce4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ce4e:	6879      	ldr	r1, [r7, #4]
 800ce50:	33e0      	adds	r3, #224	; 0xe0
 800ce52:	009b      	lsls	r3, r3, #2
 800ce54:	440b      	add	r3, r1
 800ce56:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ce58:	89fb      	ldrh	r3, [r7, #14]
 800ce5a:	b2db      	uxtb	r3, r3
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3710      	adds	r7, #16
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}

0800ce64 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ce64:	b480      	push	{r7}
 800ce66:	b083      	sub	sp, #12
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	460b      	mov	r3, r1
 800ce6e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ce70:	78fb      	ldrb	r3, [r7, #3]
 800ce72:	2b0f      	cmp	r3, #15
 800ce74:	d80d      	bhi.n	800ce92 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ce76:	78fb      	ldrb	r3, [r7, #3]
 800ce78:	687a      	ldr	r2, [r7, #4]
 800ce7a:	33e0      	adds	r3, #224	; 0xe0
 800ce7c:	009b      	lsls	r3, r3, #2
 800ce7e:	4413      	add	r3, r2
 800ce80:	685a      	ldr	r2, [r3, #4]
 800ce82:	78fb      	ldrb	r3, [r7, #3]
 800ce84:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ce88:	6879      	ldr	r1, [r7, #4]
 800ce8a:	33e0      	adds	r3, #224	; 0xe0
 800ce8c:	009b      	lsls	r3, r3, #2
 800ce8e:	440b      	add	r3, r1
 800ce90:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ce92:	2300      	movs	r3, #0
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	370c      	adds	r7, #12
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9e:	4770      	bx	lr

0800cea0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800cea0:	b480      	push	{r7}
 800cea2:	b085      	sub	sp, #20
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800ceac:	2300      	movs	r3, #0
 800ceae:	73fb      	strb	r3, [r7, #15]
 800ceb0:	e00f      	b.n	800ced2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ceb2:	7bfb      	ldrb	r3, [r7, #15]
 800ceb4:	687a      	ldr	r2, [r7, #4]
 800ceb6:	33e0      	adds	r3, #224	; 0xe0
 800ceb8:	009b      	lsls	r3, r3, #2
 800ceba:	4413      	add	r3, r2
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d102      	bne.n	800cecc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800cec6:	7bfb      	ldrb	r3, [r7, #15]
 800cec8:	b29b      	uxth	r3, r3
 800ceca:	e007      	b.n	800cedc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800cecc:	7bfb      	ldrb	r3, [r7, #15]
 800cece:	3301      	adds	r3, #1
 800ced0:	73fb      	strb	r3, [r7, #15]
 800ced2:	7bfb      	ldrb	r3, [r7, #15]
 800ced4:	2b0f      	cmp	r3, #15
 800ced6:	d9ec      	bls.n	800ceb2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ced8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3714      	adds	r7, #20
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr

0800cee8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b084      	sub	sp, #16
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	4603      	mov	r3, r0
 800cef0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cef2:	79fb      	ldrb	r3, [r7, #7]
 800cef4:	4a08      	ldr	r2, [pc, #32]	; (800cf18 <disk_status+0x30>)
 800cef6:	009b      	lsls	r3, r3, #2
 800cef8:	4413      	add	r3, r2
 800cefa:	685b      	ldr	r3, [r3, #4]
 800cefc:	685b      	ldr	r3, [r3, #4]
 800cefe:	79fa      	ldrb	r2, [r7, #7]
 800cf00:	4905      	ldr	r1, [pc, #20]	; (800cf18 <disk_status+0x30>)
 800cf02:	440a      	add	r2, r1
 800cf04:	7d12      	ldrb	r2, [r2, #20]
 800cf06:	4610      	mov	r0, r2
 800cf08:	4798      	blx	r3
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cf0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3710      	adds	r7, #16
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}
 800cf18:	200022ec 	.word	0x200022ec

0800cf1c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b084      	sub	sp, #16
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	4603      	mov	r3, r0
 800cf24:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cf26:	2300      	movs	r3, #0
 800cf28:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cf2a:	79fb      	ldrb	r3, [r7, #7]
 800cf2c:	4a0d      	ldr	r2, [pc, #52]	; (800cf64 <disk_initialize+0x48>)
 800cf2e:	5cd3      	ldrb	r3, [r2, r3]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d111      	bne.n	800cf58 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800cf34:	79fb      	ldrb	r3, [r7, #7]
 800cf36:	4a0b      	ldr	r2, [pc, #44]	; (800cf64 <disk_initialize+0x48>)
 800cf38:	2101      	movs	r1, #1
 800cf3a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cf3c:	79fb      	ldrb	r3, [r7, #7]
 800cf3e:	4a09      	ldr	r2, [pc, #36]	; (800cf64 <disk_initialize+0x48>)
 800cf40:	009b      	lsls	r3, r3, #2
 800cf42:	4413      	add	r3, r2
 800cf44:	685b      	ldr	r3, [r3, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	79fa      	ldrb	r2, [r7, #7]
 800cf4a:	4906      	ldr	r1, [pc, #24]	; (800cf64 <disk_initialize+0x48>)
 800cf4c:	440a      	add	r2, r1
 800cf4e:	7d12      	ldrb	r2, [r2, #20]
 800cf50:	4610      	mov	r0, r2
 800cf52:	4798      	blx	r3
 800cf54:	4603      	mov	r3, r0
 800cf56:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cf58:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3710      	adds	r7, #16
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	bf00      	nop
 800cf64:	200022ec 	.word	0x200022ec

0800cf68 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cf68:	b590      	push	{r4, r7, lr}
 800cf6a:	b087      	sub	sp, #28
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	60b9      	str	r1, [r7, #8]
 800cf70:	607a      	str	r2, [r7, #4]
 800cf72:	603b      	str	r3, [r7, #0]
 800cf74:	4603      	mov	r3, r0
 800cf76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cf78:	7bfb      	ldrb	r3, [r7, #15]
 800cf7a:	4a0a      	ldr	r2, [pc, #40]	; (800cfa4 <disk_read+0x3c>)
 800cf7c:	009b      	lsls	r3, r3, #2
 800cf7e:	4413      	add	r3, r2
 800cf80:	685b      	ldr	r3, [r3, #4]
 800cf82:	689c      	ldr	r4, [r3, #8]
 800cf84:	7bfb      	ldrb	r3, [r7, #15]
 800cf86:	4a07      	ldr	r2, [pc, #28]	; (800cfa4 <disk_read+0x3c>)
 800cf88:	4413      	add	r3, r2
 800cf8a:	7d18      	ldrb	r0, [r3, #20]
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	687a      	ldr	r2, [r7, #4]
 800cf90:	68b9      	ldr	r1, [r7, #8]
 800cf92:	47a0      	blx	r4
 800cf94:	4603      	mov	r3, r0
 800cf96:	75fb      	strb	r3, [r7, #23]
  return res;
 800cf98:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	371c      	adds	r7, #28
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd90      	pop	{r4, r7, pc}
 800cfa2:	bf00      	nop
 800cfa4:	200022ec 	.word	0x200022ec

0800cfa8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cfa8:	b590      	push	{r4, r7, lr}
 800cfaa:	b087      	sub	sp, #28
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	60b9      	str	r1, [r7, #8]
 800cfb0:	607a      	str	r2, [r7, #4]
 800cfb2:	603b      	str	r3, [r7, #0]
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cfb8:	7bfb      	ldrb	r3, [r7, #15]
 800cfba:	4a0a      	ldr	r2, [pc, #40]	; (800cfe4 <disk_write+0x3c>)
 800cfbc:	009b      	lsls	r3, r3, #2
 800cfbe:	4413      	add	r3, r2
 800cfc0:	685b      	ldr	r3, [r3, #4]
 800cfc2:	68dc      	ldr	r4, [r3, #12]
 800cfc4:	7bfb      	ldrb	r3, [r7, #15]
 800cfc6:	4a07      	ldr	r2, [pc, #28]	; (800cfe4 <disk_write+0x3c>)
 800cfc8:	4413      	add	r3, r2
 800cfca:	7d18      	ldrb	r0, [r3, #20]
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	687a      	ldr	r2, [r7, #4]
 800cfd0:	68b9      	ldr	r1, [r7, #8]
 800cfd2:	47a0      	blx	r4
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	75fb      	strb	r3, [r7, #23]
  return res;
 800cfd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	371c      	adds	r7, #28
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd90      	pop	{r4, r7, pc}
 800cfe2:	bf00      	nop
 800cfe4:	200022ec 	.word	0x200022ec

0800cfe8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b084      	sub	sp, #16
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	4603      	mov	r3, r0
 800cff0:	603a      	str	r2, [r7, #0]
 800cff2:	71fb      	strb	r3, [r7, #7]
 800cff4:	460b      	mov	r3, r1
 800cff6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cff8:	79fb      	ldrb	r3, [r7, #7]
 800cffa:	4a09      	ldr	r2, [pc, #36]	; (800d020 <disk_ioctl+0x38>)
 800cffc:	009b      	lsls	r3, r3, #2
 800cffe:	4413      	add	r3, r2
 800d000:	685b      	ldr	r3, [r3, #4]
 800d002:	691b      	ldr	r3, [r3, #16]
 800d004:	79fa      	ldrb	r2, [r7, #7]
 800d006:	4906      	ldr	r1, [pc, #24]	; (800d020 <disk_ioctl+0x38>)
 800d008:	440a      	add	r2, r1
 800d00a:	7d10      	ldrb	r0, [r2, #20]
 800d00c:	79b9      	ldrb	r1, [r7, #6]
 800d00e:	683a      	ldr	r2, [r7, #0]
 800d010:	4798      	blx	r3
 800d012:	4603      	mov	r3, r0
 800d014:	73fb      	strb	r3, [r7, #15]
  return res;
 800d016:	7bfb      	ldrb	r3, [r7, #15]
}
 800d018:	4618      	mov	r0, r3
 800d01a:	3710      	adds	r7, #16
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}
 800d020:	200022ec 	.word	0x200022ec

0800d024 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d024:	b480      	push	{r7}
 800d026:	b085      	sub	sp, #20
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	3301      	adds	r3, #1
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d034:	89fb      	ldrh	r3, [r7, #14]
 800d036:	021b      	lsls	r3, r3, #8
 800d038:	b21a      	sxth	r2, r3
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	781b      	ldrb	r3, [r3, #0]
 800d03e:	b21b      	sxth	r3, r3
 800d040:	4313      	orrs	r3, r2
 800d042:	b21b      	sxth	r3, r3
 800d044:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d046:	89fb      	ldrh	r3, [r7, #14]
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3714      	adds	r7, #20
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr

0800d054 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d054:	b480      	push	{r7}
 800d056:	b085      	sub	sp, #20
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	3303      	adds	r3, #3
 800d060:	781b      	ldrb	r3, [r3, #0]
 800d062:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	021b      	lsls	r3, r3, #8
 800d068:	687a      	ldr	r2, [r7, #4]
 800d06a:	3202      	adds	r2, #2
 800d06c:	7812      	ldrb	r2, [r2, #0]
 800d06e:	4313      	orrs	r3, r2
 800d070:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	021b      	lsls	r3, r3, #8
 800d076:	687a      	ldr	r2, [r7, #4]
 800d078:	3201      	adds	r2, #1
 800d07a:	7812      	ldrb	r2, [r2, #0]
 800d07c:	4313      	orrs	r3, r2
 800d07e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	021b      	lsls	r3, r3, #8
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	7812      	ldrb	r2, [r2, #0]
 800d088:	4313      	orrs	r3, r2
 800d08a:	60fb      	str	r3, [r7, #12]
	return rv;
 800d08c:	68fb      	ldr	r3, [r7, #12]
}
 800d08e:	4618      	mov	r0, r3
 800d090:	3714      	adds	r7, #20
 800d092:	46bd      	mov	sp, r7
 800d094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d098:	4770      	bx	lr

0800d09a <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800d09a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d09e:	b09d      	sub	sp, #116	; 0x74
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 800d0a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0a6:	3307      	adds	r3, #7
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	b2db      	uxtb	r3, r3
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	469a      	mov	sl, r3
 800d0b0:	4693      	mov	fp, r2
 800d0b2:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 800d0b6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d0ba:	f04f 0000 	mov.w	r0, #0
 800d0be:	f04f 0100 	mov.w	r1, #0
 800d0c2:	0219      	lsls	r1, r3, #8
 800d0c4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d0c8:	0210      	lsls	r0, r2, #8
 800d0ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0cc:	3306      	adds	r3, #6
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	b2db      	uxtb	r3, r3
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	461c      	mov	r4, r3
 800d0d6:	4615      	mov	r5, r2
 800d0d8:	ea40 0804 	orr.w	r8, r0, r4
 800d0dc:	ea41 0905 	orr.w	r9, r1, r5
 800d0e0:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 800d0e4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d0e8:	f04f 0000 	mov.w	r0, #0
 800d0ec:	f04f 0100 	mov.w	r1, #0
 800d0f0:	0219      	lsls	r1, r3, #8
 800d0f2:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d0f6:	0210      	lsls	r0, r2, #8
 800d0f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0fa:	3305      	adds	r3, #5
 800d0fc:	781b      	ldrb	r3, [r3, #0]
 800d0fe:	b2db      	uxtb	r3, r3
 800d100:	2200      	movs	r2, #0
 800d102:	65bb      	str	r3, [r7, #88]	; 0x58
 800d104:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d106:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800d10a:	4623      	mov	r3, r4
 800d10c:	4303      	orrs	r3, r0
 800d10e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d110:	462b      	mov	r3, r5
 800d112:	430b      	orrs	r3, r1
 800d114:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d116:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800d11a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 800d11e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d122:	f04f 0000 	mov.w	r0, #0
 800d126:	f04f 0100 	mov.w	r1, #0
 800d12a:	0219      	lsls	r1, r3, #8
 800d12c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d130:	0210      	lsls	r0, r2, #8
 800d132:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d134:	3304      	adds	r3, #4
 800d136:	781b      	ldrb	r3, [r3, #0]
 800d138:	b2db      	uxtb	r3, r3
 800d13a:	2200      	movs	r2, #0
 800d13c:	653b      	str	r3, [r7, #80]	; 0x50
 800d13e:	657a      	str	r2, [r7, #84]	; 0x54
 800d140:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800d144:	4623      	mov	r3, r4
 800d146:	4303      	orrs	r3, r0
 800d148:	623b      	str	r3, [r7, #32]
 800d14a:	462b      	mov	r3, r5
 800d14c:	430b      	orrs	r3, r1
 800d14e:	627b      	str	r3, [r7, #36]	; 0x24
 800d150:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d154:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 800d158:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d15c:	f04f 0000 	mov.w	r0, #0
 800d160:	f04f 0100 	mov.w	r1, #0
 800d164:	0219      	lsls	r1, r3, #8
 800d166:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d16a:	0210      	lsls	r0, r2, #8
 800d16c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d16e:	3303      	adds	r3, #3
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	b2db      	uxtb	r3, r3
 800d174:	2200      	movs	r2, #0
 800d176:	64bb      	str	r3, [r7, #72]	; 0x48
 800d178:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d17a:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800d17e:	4623      	mov	r3, r4
 800d180:	4303      	orrs	r3, r0
 800d182:	61bb      	str	r3, [r7, #24]
 800d184:	462b      	mov	r3, r5
 800d186:	430b      	orrs	r3, r1
 800d188:	61fb      	str	r3, [r7, #28]
 800d18a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d18e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 800d192:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d196:	f04f 0000 	mov.w	r0, #0
 800d19a:	f04f 0100 	mov.w	r1, #0
 800d19e:	0219      	lsls	r1, r3, #8
 800d1a0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d1a4:	0210      	lsls	r0, r2, #8
 800d1a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1a8:	3302      	adds	r3, #2
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	b2db      	uxtb	r3, r3
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	643b      	str	r3, [r7, #64]	; 0x40
 800d1b2:	647a      	str	r2, [r7, #68]	; 0x44
 800d1b4:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800d1b8:	4623      	mov	r3, r4
 800d1ba:	4303      	orrs	r3, r0
 800d1bc:	613b      	str	r3, [r7, #16]
 800d1be:	462b      	mov	r3, r5
 800d1c0:	430b      	orrs	r3, r1
 800d1c2:	617b      	str	r3, [r7, #20]
 800d1c4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d1c8:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 800d1cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d1d0:	f04f 0200 	mov.w	r2, #0
 800d1d4:	f04f 0300 	mov.w	r3, #0
 800d1d8:	020b      	lsls	r3, r1, #8
 800d1da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d1de:	0202      	lsls	r2, r0, #8
 800d1e0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d1e2:	3101      	adds	r1, #1
 800d1e4:	7809      	ldrb	r1, [r1, #0]
 800d1e6:	b2c9      	uxtb	r1, r1
 800d1e8:	2000      	movs	r0, #0
 800d1ea:	63b9      	str	r1, [r7, #56]	; 0x38
 800d1ec:	63f8      	str	r0, [r7, #60]	; 0x3c
 800d1ee:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800d1f2:	4621      	mov	r1, r4
 800d1f4:	4311      	orrs	r1, r2
 800d1f6:	60b9      	str	r1, [r7, #8]
 800d1f8:	4629      	mov	r1, r5
 800d1fa:	4319      	orrs	r1, r3
 800d1fc:	60f9      	str	r1, [r7, #12]
 800d1fe:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d202:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 800d206:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d20a:	f04f 0200 	mov.w	r2, #0
 800d20e:	f04f 0300 	mov.w	r3, #0
 800d212:	020b      	lsls	r3, r1, #8
 800d214:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d218:	0202      	lsls	r2, r0, #8
 800d21a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d21c:	7809      	ldrb	r1, [r1, #0]
 800d21e:	b2c9      	uxtb	r1, r1
 800d220:	2000      	movs	r0, #0
 800d222:	6339      	str	r1, [r7, #48]	; 0x30
 800d224:	6378      	str	r0, [r7, #52]	; 0x34
 800d226:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800d22a:	4621      	mov	r1, r4
 800d22c:	4311      	orrs	r1, r2
 800d22e:	6039      	str	r1, [r7, #0]
 800d230:	4629      	mov	r1, r5
 800d232:	4319      	orrs	r1, r3
 800d234:	6079      	str	r1, [r7, #4]
 800d236:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d23a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 800d23e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 800d242:	4610      	mov	r0, r2
 800d244:	4619      	mov	r1, r3
 800d246:	3774      	adds	r7, #116	; 0x74
 800d248:	46bd      	mov	sp, r7
 800d24a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d24e:	4770      	bx	lr

0800d250 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d250:	b480      	push	{r7}
 800d252:	b083      	sub	sp, #12
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
 800d258:	460b      	mov	r3, r1
 800d25a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	1c5a      	adds	r2, r3, #1
 800d260:	607a      	str	r2, [r7, #4]
 800d262:	887a      	ldrh	r2, [r7, #2]
 800d264:	b2d2      	uxtb	r2, r2
 800d266:	701a      	strb	r2, [r3, #0]
 800d268:	887b      	ldrh	r3, [r7, #2]
 800d26a:	0a1b      	lsrs	r3, r3, #8
 800d26c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	1c5a      	adds	r2, r3, #1
 800d272:	607a      	str	r2, [r7, #4]
 800d274:	887a      	ldrh	r2, [r7, #2]
 800d276:	b2d2      	uxtb	r2, r2
 800d278:	701a      	strb	r2, [r3, #0]
}
 800d27a:	bf00      	nop
 800d27c:	370c      	adds	r7, #12
 800d27e:	46bd      	mov	sp, r7
 800d280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d284:	4770      	bx	lr

0800d286 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d286:	b480      	push	{r7}
 800d288:	b083      	sub	sp, #12
 800d28a:	af00      	add	r7, sp, #0
 800d28c:	6078      	str	r0, [r7, #4]
 800d28e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	1c5a      	adds	r2, r3, #1
 800d294:	607a      	str	r2, [r7, #4]
 800d296:	683a      	ldr	r2, [r7, #0]
 800d298:	b2d2      	uxtb	r2, r2
 800d29a:	701a      	strb	r2, [r3, #0]
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	0a1b      	lsrs	r3, r3, #8
 800d2a0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	1c5a      	adds	r2, r3, #1
 800d2a6:	607a      	str	r2, [r7, #4]
 800d2a8:	683a      	ldr	r2, [r7, #0]
 800d2aa:	b2d2      	uxtb	r2, r2
 800d2ac:	701a      	strb	r2, [r3, #0]
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	0a1b      	lsrs	r3, r3, #8
 800d2b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	1c5a      	adds	r2, r3, #1
 800d2b8:	607a      	str	r2, [r7, #4]
 800d2ba:	683a      	ldr	r2, [r7, #0]
 800d2bc:	b2d2      	uxtb	r2, r2
 800d2be:	701a      	strb	r2, [r3, #0]
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	0a1b      	lsrs	r3, r3, #8
 800d2c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	1c5a      	adds	r2, r3, #1
 800d2ca:	607a      	str	r2, [r7, #4]
 800d2cc:	683a      	ldr	r2, [r7, #0]
 800d2ce:	b2d2      	uxtb	r2, r2
 800d2d0:	701a      	strb	r2, [r3, #0]
}
 800d2d2:	bf00      	nop
 800d2d4:	370c      	adds	r7, #12
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2dc:	4770      	bx	lr

0800d2de <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800d2de:	b480      	push	{r7}
 800d2e0:	b085      	sub	sp, #20
 800d2e2:	af00      	add	r7, sp, #0
 800d2e4:	60f8      	str	r0, [r7, #12]
 800d2e6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	1c5a      	adds	r2, r3, #1
 800d2ee:	60fa      	str	r2, [r7, #12]
 800d2f0:	783a      	ldrb	r2, [r7, #0]
 800d2f2:	701a      	strb	r2, [r3, #0]
 800d2f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d2f8:	f04f 0200 	mov.w	r2, #0
 800d2fc:	f04f 0300 	mov.w	r3, #0
 800d300:	0a02      	lsrs	r2, r0, #8
 800d302:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d306:	0a0b      	lsrs	r3, r1, #8
 800d308:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	1c5a      	adds	r2, r3, #1
 800d310:	60fa      	str	r2, [r7, #12]
 800d312:	783a      	ldrb	r2, [r7, #0]
 800d314:	701a      	strb	r2, [r3, #0]
 800d316:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d31a:	f04f 0200 	mov.w	r2, #0
 800d31e:	f04f 0300 	mov.w	r3, #0
 800d322:	0a02      	lsrs	r2, r0, #8
 800d324:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d328:	0a0b      	lsrs	r3, r1, #8
 800d32a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	1c5a      	adds	r2, r3, #1
 800d332:	60fa      	str	r2, [r7, #12]
 800d334:	783a      	ldrb	r2, [r7, #0]
 800d336:	701a      	strb	r2, [r3, #0]
 800d338:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d33c:	f04f 0200 	mov.w	r2, #0
 800d340:	f04f 0300 	mov.w	r3, #0
 800d344:	0a02      	lsrs	r2, r0, #8
 800d346:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d34a:	0a0b      	lsrs	r3, r1, #8
 800d34c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	1c5a      	adds	r2, r3, #1
 800d354:	60fa      	str	r2, [r7, #12]
 800d356:	783a      	ldrb	r2, [r7, #0]
 800d358:	701a      	strb	r2, [r3, #0]
 800d35a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d35e:	f04f 0200 	mov.w	r2, #0
 800d362:	f04f 0300 	mov.w	r3, #0
 800d366:	0a02      	lsrs	r2, r0, #8
 800d368:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d36c:	0a0b      	lsrs	r3, r1, #8
 800d36e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	1c5a      	adds	r2, r3, #1
 800d376:	60fa      	str	r2, [r7, #12]
 800d378:	783a      	ldrb	r2, [r7, #0]
 800d37a:	701a      	strb	r2, [r3, #0]
 800d37c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d380:	f04f 0200 	mov.w	r2, #0
 800d384:	f04f 0300 	mov.w	r3, #0
 800d388:	0a02      	lsrs	r2, r0, #8
 800d38a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d38e:	0a0b      	lsrs	r3, r1, #8
 800d390:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	1c5a      	adds	r2, r3, #1
 800d398:	60fa      	str	r2, [r7, #12]
 800d39a:	783a      	ldrb	r2, [r7, #0]
 800d39c:	701a      	strb	r2, [r3, #0]
 800d39e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d3a2:	f04f 0200 	mov.w	r2, #0
 800d3a6:	f04f 0300 	mov.w	r3, #0
 800d3aa:	0a02      	lsrs	r2, r0, #8
 800d3ac:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d3b0:	0a0b      	lsrs	r3, r1, #8
 800d3b2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	1c5a      	adds	r2, r3, #1
 800d3ba:	60fa      	str	r2, [r7, #12]
 800d3bc:	783a      	ldrb	r2, [r7, #0]
 800d3be:	701a      	strb	r2, [r3, #0]
 800d3c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d3c4:	f04f 0200 	mov.w	r2, #0
 800d3c8:	f04f 0300 	mov.w	r3, #0
 800d3cc:	0a02      	lsrs	r2, r0, #8
 800d3ce:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d3d2:	0a0b      	lsrs	r3, r1, #8
 800d3d4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	1c5a      	adds	r2, r3, #1
 800d3dc:	60fa      	str	r2, [r7, #12]
 800d3de:	783a      	ldrb	r2, [r7, #0]
 800d3e0:	701a      	strb	r2, [r3, #0]
}
 800d3e2:	bf00      	nop
 800d3e4:	3714      	adds	r7, #20
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ec:	4770      	bx	lr

0800d3ee <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d3ee:	b480      	push	{r7}
 800d3f0:	b087      	sub	sp, #28
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	60f8      	str	r0, [r7, #12]
 800d3f6:	60b9      	str	r1, [r7, #8]
 800d3f8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d00d      	beq.n	800d424 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d408:	693a      	ldr	r2, [r7, #16]
 800d40a:	1c53      	adds	r3, r2, #1
 800d40c:	613b      	str	r3, [r7, #16]
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	1c59      	adds	r1, r3, #1
 800d412:	6179      	str	r1, [r7, #20]
 800d414:	7812      	ldrb	r2, [r2, #0]
 800d416:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	3b01      	subs	r3, #1
 800d41c:	607b      	str	r3, [r7, #4]
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d1f1      	bne.n	800d408 <mem_cpy+0x1a>
	}
}
 800d424:	bf00      	nop
 800d426:	371c      	adds	r7, #28
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr

0800d430 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d430:	b480      	push	{r7}
 800d432:	b087      	sub	sp, #28
 800d434:	af00      	add	r7, sp, #0
 800d436:	60f8      	str	r0, [r7, #12]
 800d438:	60b9      	str	r1, [r7, #8]
 800d43a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	1c5a      	adds	r2, r3, #1
 800d444:	617a      	str	r2, [r7, #20]
 800d446:	68ba      	ldr	r2, [r7, #8]
 800d448:	b2d2      	uxtb	r2, r2
 800d44a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	3b01      	subs	r3, #1
 800d450:	607b      	str	r3, [r7, #4]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d1f3      	bne.n	800d440 <mem_set+0x10>
}
 800d458:	bf00      	nop
 800d45a:	bf00      	nop
 800d45c:	371c      	adds	r7, #28
 800d45e:	46bd      	mov	sp, r7
 800d460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d464:	4770      	bx	lr

0800d466 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d466:	b480      	push	{r7}
 800d468:	b089      	sub	sp, #36	; 0x24
 800d46a:	af00      	add	r7, sp, #0
 800d46c:	60f8      	str	r0, [r7, #12]
 800d46e:	60b9      	str	r1, [r7, #8]
 800d470:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	61fb      	str	r3, [r7, #28]
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d47a:	2300      	movs	r3, #0
 800d47c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d47e:	69fb      	ldr	r3, [r7, #28]
 800d480:	1c5a      	adds	r2, r3, #1
 800d482:	61fa      	str	r2, [r7, #28]
 800d484:	781b      	ldrb	r3, [r3, #0]
 800d486:	4619      	mov	r1, r3
 800d488:	69bb      	ldr	r3, [r7, #24]
 800d48a:	1c5a      	adds	r2, r3, #1
 800d48c:	61ba      	str	r2, [r7, #24]
 800d48e:	781b      	ldrb	r3, [r3, #0]
 800d490:	1acb      	subs	r3, r1, r3
 800d492:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	3b01      	subs	r3, #1
 800d498:	607b      	str	r3, [r7, #4]
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d002      	beq.n	800d4a6 <mem_cmp+0x40>
 800d4a0:	697b      	ldr	r3, [r7, #20]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d0eb      	beq.n	800d47e <mem_cmp+0x18>

	return r;
 800d4a6:	697b      	ldr	r3, [r7, #20]
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3724      	adds	r7, #36	; 0x24
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr

0800d4b4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d4b4:	b480      	push	{r7}
 800d4b6:	b083      	sub	sp, #12
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d4be:	e002      	b.n	800d4c6 <chk_chr+0x12>
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	607b      	str	r3, [r7, #4]
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	781b      	ldrb	r3, [r3, #0]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d005      	beq.n	800d4da <chk_chr+0x26>
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	461a      	mov	r2, r3
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d1f2      	bne.n	800d4c0 <chk_chr+0xc>
	return *str;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	781b      	ldrb	r3, [r3, #0]
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	370c      	adds	r7, #12
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e8:	4770      	bx	lr
	...

0800d4ec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	b085      	sub	sp, #20
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
 800d4f4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	60bb      	str	r3, [r7, #8]
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	60fb      	str	r3, [r7, #12]
 800d4fe:	e029      	b.n	800d554 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d500:	4a27      	ldr	r2, [pc, #156]	; (800d5a0 <chk_lock+0xb4>)
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	011b      	lsls	r3, r3, #4
 800d506:	4413      	add	r3, r2
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d01d      	beq.n	800d54a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d50e:	4a24      	ldr	r2, [pc, #144]	; (800d5a0 <chk_lock+0xb4>)
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	011b      	lsls	r3, r3, #4
 800d514:	4413      	add	r3, r2
 800d516:	681a      	ldr	r2, [r3, #0]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d116      	bne.n	800d54e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d520:	4a1f      	ldr	r2, [pc, #124]	; (800d5a0 <chk_lock+0xb4>)
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	011b      	lsls	r3, r3, #4
 800d526:	4413      	add	r3, r2
 800d528:	3304      	adds	r3, #4
 800d52a:	681a      	ldr	r2, [r3, #0]
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d530:	429a      	cmp	r2, r3
 800d532:	d10c      	bne.n	800d54e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d534:	4a1a      	ldr	r2, [pc, #104]	; (800d5a0 <chk_lock+0xb4>)
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	011b      	lsls	r3, r3, #4
 800d53a:	4413      	add	r3, r2
 800d53c:	3308      	adds	r3, #8
 800d53e:	681a      	ldr	r2, [r3, #0]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800d544:	429a      	cmp	r2, r3
 800d546:	d102      	bne.n	800d54e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d548:	e007      	b.n	800d55a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d54a:	2301      	movs	r3, #1
 800d54c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	3301      	adds	r3, #1
 800d552:	60fb      	str	r3, [r7, #12]
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	2b01      	cmp	r3, #1
 800d558:	d9d2      	bls.n	800d500 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	2b02      	cmp	r3, #2
 800d55e:	d109      	bne.n	800d574 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d102      	bne.n	800d56c <chk_lock+0x80>
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	2b02      	cmp	r3, #2
 800d56a:	d101      	bne.n	800d570 <chk_lock+0x84>
 800d56c:	2300      	movs	r3, #0
 800d56e:	e010      	b.n	800d592 <chk_lock+0xa6>
 800d570:	2312      	movs	r3, #18
 800d572:	e00e      	b.n	800d592 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d108      	bne.n	800d58c <chk_lock+0xa0>
 800d57a:	4a09      	ldr	r2, [pc, #36]	; (800d5a0 <chk_lock+0xb4>)
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	011b      	lsls	r3, r3, #4
 800d580:	4413      	add	r3, r2
 800d582:	330c      	adds	r3, #12
 800d584:	881b      	ldrh	r3, [r3, #0]
 800d586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d58a:	d101      	bne.n	800d590 <chk_lock+0xa4>
 800d58c:	2310      	movs	r3, #16
 800d58e:	e000      	b.n	800d592 <chk_lock+0xa6>
 800d590:	2300      	movs	r3, #0
}
 800d592:	4618      	mov	r0, r3
 800d594:	3714      	adds	r7, #20
 800d596:	46bd      	mov	sp, r7
 800d598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59c:	4770      	bx	lr
 800d59e:	bf00      	nop
 800d5a0:	20001e6c 	.word	0x20001e6c

0800d5a4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b083      	sub	sp, #12
 800d5a8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	607b      	str	r3, [r7, #4]
 800d5ae:	e002      	b.n	800d5b6 <enq_lock+0x12>
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	607b      	str	r3, [r7, #4]
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2b01      	cmp	r3, #1
 800d5ba:	d806      	bhi.n	800d5ca <enq_lock+0x26>
 800d5bc:	4a09      	ldr	r2, [pc, #36]	; (800d5e4 <enq_lock+0x40>)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	011b      	lsls	r3, r3, #4
 800d5c2:	4413      	add	r3, r2
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d1f2      	bne.n	800d5b0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2b02      	cmp	r3, #2
 800d5ce:	bf14      	ite	ne
 800d5d0:	2301      	movne	r3, #1
 800d5d2:	2300      	moveq	r3, #0
 800d5d4:	b2db      	uxtb	r3, r3
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	370c      	adds	r7, #12
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e0:	4770      	bx	lr
 800d5e2:	bf00      	nop
 800d5e4:	20001e6c 	.word	0x20001e6c

0800d5e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b085      	sub	sp, #20
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
 800d5f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	60fb      	str	r3, [r7, #12]
 800d5f6:	e01f      	b.n	800d638 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d5f8:	4a41      	ldr	r2, [pc, #260]	; (800d700 <inc_lock+0x118>)
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	011b      	lsls	r3, r3, #4
 800d5fe:	4413      	add	r3, r2
 800d600:	681a      	ldr	r2, [r3, #0]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	429a      	cmp	r2, r3
 800d608:	d113      	bne.n	800d632 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d60a:	4a3d      	ldr	r2, [pc, #244]	; (800d700 <inc_lock+0x118>)
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	011b      	lsls	r3, r3, #4
 800d610:	4413      	add	r3, r2
 800d612:	3304      	adds	r3, #4
 800d614:	681a      	ldr	r2, [r3, #0]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d61a:	429a      	cmp	r2, r3
 800d61c:	d109      	bne.n	800d632 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d61e:	4a38      	ldr	r2, [pc, #224]	; (800d700 <inc_lock+0x118>)
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	011b      	lsls	r3, r3, #4
 800d624:	4413      	add	r3, r2
 800d626:	3308      	adds	r3, #8
 800d628:	681a      	ldr	r2, [r3, #0]
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800d62e:	429a      	cmp	r2, r3
 800d630:	d006      	beq.n	800d640 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	3301      	adds	r3, #1
 800d636:	60fb      	str	r3, [r7, #12]
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	2b01      	cmp	r3, #1
 800d63c:	d9dc      	bls.n	800d5f8 <inc_lock+0x10>
 800d63e:	e000      	b.n	800d642 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d640:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	2b02      	cmp	r3, #2
 800d646:	d132      	bne.n	800d6ae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d648:	2300      	movs	r3, #0
 800d64a:	60fb      	str	r3, [r7, #12]
 800d64c:	e002      	b.n	800d654 <inc_lock+0x6c>
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	3301      	adds	r3, #1
 800d652:	60fb      	str	r3, [r7, #12]
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2b01      	cmp	r3, #1
 800d658:	d806      	bhi.n	800d668 <inc_lock+0x80>
 800d65a:	4a29      	ldr	r2, [pc, #164]	; (800d700 <inc_lock+0x118>)
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	011b      	lsls	r3, r3, #4
 800d660:	4413      	add	r3, r2
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d1f2      	bne.n	800d64e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2b02      	cmp	r3, #2
 800d66c:	d101      	bne.n	800d672 <inc_lock+0x8a>
 800d66e:	2300      	movs	r3, #0
 800d670:	e040      	b.n	800d6f4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681a      	ldr	r2, [r3, #0]
 800d676:	4922      	ldr	r1, [pc, #136]	; (800d700 <inc_lock+0x118>)
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	011b      	lsls	r3, r3, #4
 800d67c:	440b      	add	r3, r1
 800d67e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	689a      	ldr	r2, [r3, #8]
 800d684:	491e      	ldr	r1, [pc, #120]	; (800d700 <inc_lock+0x118>)
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	011b      	lsls	r3, r3, #4
 800d68a:	440b      	add	r3, r1
 800d68c:	3304      	adds	r3, #4
 800d68e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d694:	491a      	ldr	r1, [pc, #104]	; (800d700 <inc_lock+0x118>)
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	011b      	lsls	r3, r3, #4
 800d69a:	440b      	add	r3, r1
 800d69c:	3308      	adds	r3, #8
 800d69e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d6a0:	4a17      	ldr	r2, [pc, #92]	; (800d700 <inc_lock+0x118>)
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	011b      	lsls	r3, r3, #4
 800d6a6:	4413      	add	r3, r2
 800d6a8:	330c      	adds	r3, #12
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d009      	beq.n	800d6c8 <inc_lock+0xe0>
 800d6b4:	4a12      	ldr	r2, [pc, #72]	; (800d700 <inc_lock+0x118>)
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	011b      	lsls	r3, r3, #4
 800d6ba:	4413      	add	r3, r2
 800d6bc:	330c      	adds	r3, #12
 800d6be:	881b      	ldrh	r3, [r3, #0]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d001      	beq.n	800d6c8 <inc_lock+0xe0>
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	e015      	b.n	800d6f4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d108      	bne.n	800d6e0 <inc_lock+0xf8>
 800d6ce:	4a0c      	ldr	r2, [pc, #48]	; (800d700 <inc_lock+0x118>)
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	011b      	lsls	r3, r3, #4
 800d6d4:	4413      	add	r3, r2
 800d6d6:	330c      	adds	r3, #12
 800d6d8:	881b      	ldrh	r3, [r3, #0]
 800d6da:	3301      	adds	r3, #1
 800d6dc:	b29a      	uxth	r2, r3
 800d6de:	e001      	b.n	800d6e4 <inc_lock+0xfc>
 800d6e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d6e4:	4906      	ldr	r1, [pc, #24]	; (800d700 <inc_lock+0x118>)
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	011b      	lsls	r3, r3, #4
 800d6ea:	440b      	add	r3, r1
 800d6ec:	330c      	adds	r3, #12
 800d6ee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	3301      	adds	r3, #1
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3714      	adds	r7, #20
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fe:	4770      	bx	lr
 800d700:	20001e6c 	.word	0x20001e6c

0800d704 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d704:	b480      	push	{r7}
 800d706:	b085      	sub	sp, #20
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	3b01      	subs	r3, #1
 800d710:	607b      	str	r3, [r7, #4]
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2b01      	cmp	r3, #1
 800d716:	d825      	bhi.n	800d764 <dec_lock+0x60>
		n = Files[i].ctr;
 800d718:	4a17      	ldr	r2, [pc, #92]	; (800d778 <dec_lock+0x74>)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	011b      	lsls	r3, r3, #4
 800d71e:	4413      	add	r3, r2
 800d720:	330c      	adds	r3, #12
 800d722:	881b      	ldrh	r3, [r3, #0]
 800d724:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d726:	89fb      	ldrh	r3, [r7, #14]
 800d728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d72c:	d101      	bne.n	800d732 <dec_lock+0x2e>
 800d72e:	2300      	movs	r3, #0
 800d730:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d732:	89fb      	ldrh	r3, [r7, #14]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d002      	beq.n	800d73e <dec_lock+0x3a>
 800d738:	89fb      	ldrh	r3, [r7, #14]
 800d73a:	3b01      	subs	r3, #1
 800d73c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d73e:	4a0e      	ldr	r2, [pc, #56]	; (800d778 <dec_lock+0x74>)
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	011b      	lsls	r3, r3, #4
 800d744:	4413      	add	r3, r2
 800d746:	330c      	adds	r3, #12
 800d748:	89fa      	ldrh	r2, [r7, #14]
 800d74a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d74c:	89fb      	ldrh	r3, [r7, #14]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d105      	bne.n	800d75e <dec_lock+0x5a>
 800d752:	4a09      	ldr	r2, [pc, #36]	; (800d778 <dec_lock+0x74>)
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	011b      	lsls	r3, r3, #4
 800d758:	4413      	add	r3, r2
 800d75a:	2200      	movs	r2, #0
 800d75c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d75e:	2300      	movs	r3, #0
 800d760:	737b      	strb	r3, [r7, #13]
 800d762:	e001      	b.n	800d768 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d764:	2302      	movs	r3, #2
 800d766:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d768:	7b7b      	ldrb	r3, [r7, #13]
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3714      	adds	r7, #20
 800d76e:	46bd      	mov	sp, r7
 800d770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d774:	4770      	bx	lr
 800d776:	bf00      	nop
 800d778:	20001e6c 	.word	0x20001e6c

0800d77c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b085      	sub	sp, #20
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d784:	2300      	movs	r3, #0
 800d786:	60fb      	str	r3, [r7, #12]
 800d788:	e010      	b.n	800d7ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d78a:	4a0d      	ldr	r2, [pc, #52]	; (800d7c0 <clear_lock+0x44>)
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	011b      	lsls	r3, r3, #4
 800d790:	4413      	add	r3, r2
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	687a      	ldr	r2, [r7, #4]
 800d796:	429a      	cmp	r2, r3
 800d798:	d105      	bne.n	800d7a6 <clear_lock+0x2a>
 800d79a:	4a09      	ldr	r2, [pc, #36]	; (800d7c0 <clear_lock+0x44>)
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	011b      	lsls	r3, r3, #4
 800d7a0:	4413      	add	r3, r2
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	3301      	adds	r3, #1
 800d7aa:	60fb      	str	r3, [r7, #12]
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	2b01      	cmp	r3, #1
 800d7b0:	d9eb      	bls.n	800d78a <clear_lock+0xe>
	}
}
 800d7b2:	bf00      	nop
 800d7b4:	bf00      	nop
 800d7b6:	3714      	adds	r7, #20
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr
 800d7c0:	20001e6c 	.word	0x20001e6c

0800d7c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b086      	sub	sp, #24
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	78db      	ldrb	r3, [r3, #3]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d034      	beq.n	800d842 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	7858      	ldrb	r0, [r3, #1]
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	697a      	ldr	r2, [r7, #20]
 800d7ec:	f7ff fbdc 	bl	800cfa8 <disk_write>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d002      	beq.n	800d7fc <sync_window+0x38>
			res = FR_DISK_ERR;
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	73fb      	strb	r3, [r7, #15]
 800d7fa:	e022      	b.n	800d842 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2200      	movs	r2, #0
 800d800:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d806:	697a      	ldr	r2, [r7, #20]
 800d808:	1ad2      	subs	r2, r2, r3
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6a1b      	ldr	r3, [r3, #32]
 800d80e:	429a      	cmp	r2, r3
 800d810:	d217      	bcs.n	800d842 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	789b      	ldrb	r3, [r3, #2]
 800d816:	613b      	str	r3, [r7, #16]
 800d818:	e010      	b.n	800d83c <sync_window+0x78>
					wsect += fs->fsize;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6a1b      	ldr	r3, [r3, #32]
 800d81e:	697a      	ldr	r2, [r7, #20]
 800d820:	4413      	add	r3, r2
 800d822:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	7858      	ldrb	r0, [r3, #1]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d82e:	2301      	movs	r3, #1
 800d830:	697a      	ldr	r2, [r7, #20]
 800d832:	f7ff fbb9 	bl	800cfa8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d836:	693b      	ldr	r3, [r7, #16]
 800d838:	3b01      	subs	r3, #1
 800d83a:	613b      	str	r3, [r7, #16]
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	2b01      	cmp	r3, #1
 800d840:	d8eb      	bhi.n	800d81a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d842:	7bfb      	ldrb	r3, [r7, #15]
}
 800d844:	4618      	mov	r0, r3
 800d846:	3718      	adds	r7, #24
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}

0800d84c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b084      	sub	sp, #16
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
 800d854:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d856:	2300      	movs	r3, #0
 800d858:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d85e:	683a      	ldr	r2, [r7, #0]
 800d860:	429a      	cmp	r2, r3
 800d862:	d01b      	beq.n	800d89c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f7ff ffad 	bl	800d7c4 <sync_window>
 800d86a:	4603      	mov	r3, r0
 800d86c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d86e:	7bfb      	ldrb	r3, [r7, #15]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d113      	bne.n	800d89c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	7858      	ldrb	r0, [r3, #1]
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d87e:	2301      	movs	r3, #1
 800d880:	683a      	ldr	r2, [r7, #0]
 800d882:	f7ff fb71 	bl	800cf68 <disk_read>
 800d886:	4603      	mov	r3, r0
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d004      	beq.n	800d896 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d88c:	f04f 33ff 	mov.w	r3, #4294967295
 800d890:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d892:	2301      	movs	r3, #1
 800d894:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	683a      	ldr	r2, [r7, #0]
 800d89a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800d89c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3710      	adds	r7, #16
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}
	...

0800d8a8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b084      	sub	sp, #16
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d8b0:	6878      	ldr	r0, [r7, #4]
 800d8b2:	f7ff ff87 	bl	800d7c4 <sync_window>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d8ba:	7bfb      	ldrb	r3, [r7, #15]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d158      	bne.n	800d972 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	781b      	ldrb	r3, [r3, #0]
 800d8c4:	2b03      	cmp	r3, #3
 800d8c6:	d148      	bne.n	800d95a <sync_fs+0xb2>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	791b      	ldrb	r3, [r3, #4]
 800d8cc:	2b01      	cmp	r3, #1
 800d8ce:	d144      	bne.n	800d95a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	3338      	adds	r3, #56	; 0x38
 800d8d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d8d8:	2100      	movs	r1, #0
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f7ff fda8 	bl	800d430 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	3338      	adds	r3, #56	; 0x38
 800d8e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d8e8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f7ff fcaf 	bl	800d250 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	3338      	adds	r3, #56	; 0x38
 800d8f6:	4921      	ldr	r1, [pc, #132]	; (800d97c <sync_fs+0xd4>)
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f7ff fcc4 	bl	800d286 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	3338      	adds	r3, #56	; 0x38
 800d902:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d906:	491e      	ldr	r1, [pc, #120]	; (800d980 <sync_fs+0xd8>)
 800d908:	4618      	mov	r0, r3
 800d90a:	f7ff fcbc 	bl	800d286 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	3338      	adds	r3, #56	; 0x38
 800d912:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	699b      	ldr	r3, [r3, #24]
 800d91a:	4619      	mov	r1, r3
 800d91c:	4610      	mov	r0, r2
 800d91e:	f7ff fcb2 	bl	800d286 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	3338      	adds	r3, #56	; 0x38
 800d926:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	695b      	ldr	r3, [r3, #20]
 800d92e:	4619      	mov	r1, r3
 800d930:	4610      	mov	r0, r2
 800d932:	f7ff fca8 	bl	800d286 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d93a:	1c5a      	adds	r2, r3, #1
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	7858      	ldrb	r0, [r3, #1]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d94e:	2301      	movs	r3, #1
 800d950:	f7ff fb2a 	bl	800cfa8 <disk_write>
			fs->fsi_flag = 0;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2200      	movs	r2, #0
 800d958:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	785b      	ldrb	r3, [r3, #1]
 800d95e:	2200      	movs	r2, #0
 800d960:	2100      	movs	r1, #0
 800d962:	4618      	mov	r0, r3
 800d964:	f7ff fb40 	bl	800cfe8 <disk_ioctl>
 800d968:	4603      	mov	r3, r0
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d001      	beq.n	800d972 <sync_fs+0xca>
 800d96e:	2301      	movs	r3, #1
 800d970:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d972:	7bfb      	ldrb	r3, [r7, #15]
}
 800d974:	4618      	mov	r0, r3
 800d976:	3710      	adds	r7, #16
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}
 800d97c:	41615252 	.word	0x41615252
 800d980:	61417272 	.word	0x61417272

0800d984 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d984:	b480      	push	{r7}
 800d986:	b083      	sub	sp, #12
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	3b02      	subs	r3, #2
 800d992:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	69db      	ldr	r3, [r3, #28]
 800d998:	3b02      	subs	r3, #2
 800d99a:	683a      	ldr	r2, [r7, #0]
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d301      	bcc.n	800d9a4 <clust2sect+0x20>
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	e008      	b.n	800d9b6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	895b      	ldrh	r3, [r3, #10]
 800d9a8:	461a      	mov	r2, r3
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	fb03 f202 	mul.w	r2, r3, r2
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9b4:	4413      	add	r3, r2
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	370c      	adds	r7, #12
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr
	...

0800d9c4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b088      	sub	sp, #32
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d9ce:	6879      	ldr	r1, [r7, #4]
 800d9d0:	6809      	ldr	r1, [r1, #0]
 800d9d2:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d9d4:	6839      	ldr	r1, [r7, #0]
 800d9d6:	2901      	cmp	r1, #1
 800d9d8:	d904      	bls.n	800d9e4 <get_fat+0x20>
 800d9da:	69b9      	ldr	r1, [r7, #24]
 800d9dc:	69c9      	ldr	r1, [r1, #28]
 800d9de:	6838      	ldr	r0, [r7, #0]
 800d9e0:	4288      	cmp	r0, r1
 800d9e2:	d302      	bcc.n	800d9ea <get_fat+0x26>
		val = 1;	/* Internal error */
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	61fb      	str	r3, [r7, #28]
 800d9e8:	e101      	b.n	800dbee <get_fat+0x22a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d9ea:	f04f 31ff 	mov.w	r1, #4294967295
 800d9ee:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800d9f0:	69b9      	ldr	r1, [r7, #24]
 800d9f2:	7809      	ldrb	r1, [r1, #0]
 800d9f4:	3901      	subs	r1, #1
 800d9f6:	2903      	cmp	r1, #3
 800d9f8:	f200 80ed 	bhi.w	800dbd6 <get_fat+0x212>
 800d9fc:	a001      	add	r0, pc, #4	; (adr r0, 800da04 <get_fat+0x40>)
 800d9fe:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800da02:	bf00      	nop
 800da04:	0800da15 	.word	0x0800da15
 800da08:	0800da9d 	.word	0x0800da9d
 800da0c:	0800dad3 	.word	0x0800dad3
 800da10:	0800db0b 	.word	0x0800db0b
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	60fb      	str	r3, [r7, #12]
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	085b      	lsrs	r3, r3, #1
 800da1c:	68fa      	ldr	r2, [r7, #12]
 800da1e:	4413      	add	r3, r2
 800da20:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800da22:	69bb      	ldr	r3, [r7, #24]
 800da24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	0a5b      	lsrs	r3, r3, #9
 800da2a:	4413      	add	r3, r2
 800da2c:	4619      	mov	r1, r3
 800da2e:	69b8      	ldr	r0, [r7, #24]
 800da30:	f7ff ff0c 	bl	800d84c <move_window>
 800da34:	4603      	mov	r3, r0
 800da36:	2b00      	cmp	r3, #0
 800da38:	f040 80d0 	bne.w	800dbdc <get_fat+0x218>
			wc = fs->win[bc++ % SS(fs)];
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	1c5a      	adds	r2, r3, #1
 800da40:	60fa      	str	r2, [r7, #12]
 800da42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da46:	69ba      	ldr	r2, [r7, #24]
 800da48:	4413      	add	r3, r2
 800da4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800da4e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800da50:	69bb      	ldr	r3, [r7, #24]
 800da52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	0a5b      	lsrs	r3, r3, #9
 800da58:	4413      	add	r3, r2
 800da5a:	4619      	mov	r1, r3
 800da5c:	69b8      	ldr	r0, [r7, #24]
 800da5e:	f7ff fef5 	bl	800d84c <move_window>
 800da62:	4603      	mov	r3, r0
 800da64:	2b00      	cmp	r3, #0
 800da66:	f040 80bb 	bne.w	800dbe0 <get_fat+0x21c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da70:	69ba      	ldr	r2, [r7, #24]
 800da72:	4413      	add	r3, r2
 800da74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800da78:	021b      	lsls	r3, r3, #8
 800da7a:	461a      	mov	r2, r3
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	4313      	orrs	r3, r2
 800da80:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	f003 0301 	and.w	r3, r3, #1
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d002      	beq.n	800da92 <get_fat+0xce>
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	091b      	lsrs	r3, r3, #4
 800da90:	e002      	b.n	800da98 <get_fat+0xd4>
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800da98:	61fb      	str	r3, [r7, #28]
			break;
 800da9a:	e0a8      	b.n	800dbee <get_fat+0x22a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800da9c:	69bb      	ldr	r3, [r7, #24]
 800da9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	0a1b      	lsrs	r3, r3, #8
 800daa4:	4413      	add	r3, r2
 800daa6:	4619      	mov	r1, r3
 800daa8:	69b8      	ldr	r0, [r7, #24]
 800daaa:	f7ff fecf 	bl	800d84c <move_window>
 800daae:	4603      	mov	r3, r0
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	f040 8097 	bne.w	800dbe4 <get_fat+0x220>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800dab6:	69bb      	ldr	r3, [r7, #24]
 800dab8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	005b      	lsls	r3, r3, #1
 800dac0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800dac4:	4413      	add	r3, r2
 800dac6:	4618      	mov	r0, r3
 800dac8:	f7ff faac 	bl	800d024 <ld_word>
 800dacc:	4603      	mov	r3, r0
 800dace:	61fb      	str	r3, [r7, #28]
			break;
 800dad0:	e08d      	b.n	800dbee <get_fat+0x22a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dad2:	69bb      	ldr	r3, [r7, #24]
 800dad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	09db      	lsrs	r3, r3, #7
 800dada:	4413      	add	r3, r2
 800dadc:	4619      	mov	r1, r3
 800dade:	69b8      	ldr	r0, [r7, #24]
 800dae0:	f7ff feb4 	bl	800d84c <move_window>
 800dae4:	4603      	mov	r3, r0
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d17e      	bne.n	800dbe8 <get_fat+0x224>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800daea:	69bb      	ldr	r3, [r7, #24]
 800daec:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	009b      	lsls	r3, r3, #2
 800daf4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800daf8:	4413      	add	r3, r2
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7ff faaa 	bl	800d054 <ld_dword>
 800db00:	4603      	mov	r3, r0
 800db02:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800db06:	61fb      	str	r3, [r7, #28]
			break;
 800db08:	e071      	b.n	800dbee <get_fat+0x22a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800db0a:	6879      	ldr	r1, [r7, #4]
 800db0c:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800db10:	4301      	orrs	r1, r0
 800db12:	d060      	beq.n	800dbd6 <get_fat+0x212>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800db14:	6879      	ldr	r1, [r7, #4]
 800db16:	6889      	ldr	r1, [r1, #8]
 800db18:	6838      	ldr	r0, [r7, #0]
 800db1a:	1a41      	subs	r1, r0, r1
 800db1c:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800db1e:	6879      	ldr	r1, [r7, #4]
 800db20:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800db24:	1e42      	subs	r2, r0, #1
 800db26:	f141 33ff 	adc.w	r3, r1, #4294967295
 800db2a:	f04f 0000 	mov.w	r0, #0
 800db2e:	f04f 0100 	mov.w	r1, #0
 800db32:	0a50      	lsrs	r0, r2, #9
 800db34:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800db38:	0a59      	lsrs	r1, r3, #9
 800db3a:	4602      	mov	r2, r0
 800db3c:	69bb      	ldr	r3, [r7, #24]
 800db3e:	895b      	ldrh	r3, [r3, #10]
 800db40:	fbb2 f3f3 	udiv	r3, r2, r3
 800db44:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	79db      	ldrb	r3, [r3, #7]
 800db4a:	2b02      	cmp	r3, #2
 800db4c:	d10e      	bne.n	800db6c <get_fat+0x1a8>
					if (cofs <= clen) {
 800db4e:	697a      	ldr	r2, [r7, #20]
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	429a      	cmp	r2, r3
 800db54:	d80a      	bhi.n	800db6c <get_fat+0x1a8>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800db56:	697a      	ldr	r2, [r7, #20]
 800db58:	693b      	ldr	r3, [r7, #16]
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d002      	beq.n	800db64 <get_fat+0x1a0>
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	3301      	adds	r3, #1
 800db62:	e001      	b.n	800db68 <get_fat+0x1a4>
 800db64:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800db68:	61fb      	str	r3, [r7, #28]
						break;
 800db6a:	e040      	b.n	800dbee <get_fat+0x22a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	79db      	ldrb	r3, [r3, #7]
 800db70:	2b03      	cmp	r3, #3
 800db72:	d108      	bne.n	800db86 <get_fat+0x1c2>
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	699b      	ldr	r3, [r3, #24]
 800db78:	697a      	ldr	r2, [r7, #20]
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d203      	bcs.n	800db86 <get_fat+0x1c2>
					val = clst + 1; 	/* Generate the value */
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	3301      	adds	r3, #1
 800db82:	61fb      	str	r3, [r7, #28]
					break;
 800db84:	e033      	b.n	800dbee <get_fat+0x22a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	79db      	ldrb	r3, [r3, #7]
 800db8a:	2b02      	cmp	r3, #2
 800db8c:	d023      	beq.n	800dbd6 <get_fat+0x212>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	69db      	ldr	r3, [r3, #28]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d003      	beq.n	800db9e <get_fat+0x1da>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800db96:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800db9a:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800db9c:	e027      	b.n	800dbee <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800db9e:	69bb      	ldr	r3, [r7, #24]
 800dba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	09db      	lsrs	r3, r3, #7
 800dba6:	4413      	add	r3, r2
 800dba8:	4619      	mov	r1, r3
 800dbaa:	69b8      	ldr	r0, [r7, #24]
 800dbac:	f7ff fe4e 	bl	800d84c <move_window>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d11a      	bne.n	800dbec <get_fat+0x228>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800dbb6:	69bb      	ldr	r3, [r7, #24]
 800dbb8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	009b      	lsls	r3, r3, #2
 800dbc0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800dbc4:	4413      	add	r3, r2
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f7ff fa44 	bl	800d054 <ld_dword>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dbd2:	61fb      	str	r3, [r7, #28]
					break;
 800dbd4:	e00b      	b.n	800dbee <get_fat+0x22a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	61fb      	str	r3, [r7, #28]
 800dbda:	e008      	b.n	800dbee <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dbdc:	bf00      	nop
 800dbde:	e006      	b.n	800dbee <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dbe0:	bf00      	nop
 800dbe2:	e004      	b.n	800dbee <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dbe4:	bf00      	nop
 800dbe6:	e002      	b.n	800dbee <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dbe8:	bf00      	nop
 800dbea:	e000      	b.n	800dbee <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dbec:	bf00      	nop
		}
	}

	return val;
 800dbee:	69fb      	ldr	r3, [r7, #28]
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	3720      	adds	r7, #32
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}

0800dbf8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800dbf8:	b590      	push	{r4, r7, lr}
 800dbfa:	b089      	sub	sp, #36	; 0x24
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	60f8      	str	r0, [r7, #12]
 800dc00:	60b9      	str	r1, [r7, #8]
 800dc02:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800dc04:	2302      	movs	r3, #2
 800dc06:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	2b01      	cmp	r3, #1
 800dc0c:	f240 80d6 	bls.w	800ddbc <put_fat+0x1c4>
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	69db      	ldr	r3, [r3, #28]
 800dc14:	68ba      	ldr	r2, [r7, #8]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	f080 80d0 	bcs.w	800ddbc <put_fat+0x1c4>
		switch (fs->fs_type) {
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	2b04      	cmp	r3, #4
 800dc22:	f300 80d4 	bgt.w	800ddce <put_fat+0x1d6>
 800dc26:	2b03      	cmp	r3, #3
 800dc28:	f280 8093 	bge.w	800dd52 <put_fat+0x15a>
 800dc2c:	2b01      	cmp	r3, #1
 800dc2e:	d002      	beq.n	800dc36 <put_fat+0x3e>
 800dc30:	2b02      	cmp	r3, #2
 800dc32:	d06e      	beq.n	800dd12 <put_fat+0x11a>
 800dc34:	e0cb      	b.n	800ddce <put_fat+0x1d6>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	61bb      	str	r3, [r7, #24]
 800dc3a:	69bb      	ldr	r3, [r7, #24]
 800dc3c:	085b      	lsrs	r3, r3, #1
 800dc3e:	69ba      	ldr	r2, [r7, #24]
 800dc40:	4413      	add	r3, r2
 800dc42:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dc48:	69bb      	ldr	r3, [r7, #24]
 800dc4a:	0a5b      	lsrs	r3, r3, #9
 800dc4c:	4413      	add	r3, r2
 800dc4e:	4619      	mov	r1, r3
 800dc50:	68f8      	ldr	r0, [r7, #12]
 800dc52:	f7ff fdfb 	bl	800d84c <move_window>
 800dc56:	4603      	mov	r3, r0
 800dc58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dc5a:	7ffb      	ldrb	r3, [r7, #31]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	f040 80af 	bne.w	800ddc0 <put_fat+0x1c8>
			p = fs->win + bc++ % SS(fs);
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dc68:	69bb      	ldr	r3, [r7, #24]
 800dc6a:	1c59      	adds	r1, r3, #1
 800dc6c:	61b9      	str	r1, [r7, #24]
 800dc6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc72:	4413      	add	r3, r2
 800dc74:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	f003 0301 	and.w	r3, r3, #1
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d00d      	beq.n	800dc9c <put_fat+0xa4>
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	781b      	ldrb	r3, [r3, #0]
 800dc84:	b25b      	sxtb	r3, r3
 800dc86:	f003 030f 	and.w	r3, r3, #15
 800dc8a:	b25a      	sxtb	r2, r3
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	b2db      	uxtb	r3, r3
 800dc90:	011b      	lsls	r3, r3, #4
 800dc92:	b25b      	sxtb	r3, r3
 800dc94:	4313      	orrs	r3, r2
 800dc96:	b25b      	sxtb	r3, r3
 800dc98:	b2db      	uxtb	r3, r3
 800dc9a:	e001      	b.n	800dca0 <put_fat+0xa8>
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	b2db      	uxtb	r3, r3
 800dca0:	697a      	ldr	r2, [r7, #20]
 800dca2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	2201      	movs	r2, #1
 800dca8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dcae:	69bb      	ldr	r3, [r7, #24]
 800dcb0:	0a5b      	lsrs	r3, r3, #9
 800dcb2:	4413      	add	r3, r2
 800dcb4:	4619      	mov	r1, r3
 800dcb6:	68f8      	ldr	r0, [r7, #12]
 800dcb8:	f7ff fdc8 	bl	800d84c <move_window>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dcc0:	7ffb      	ldrb	r3, [r7, #31]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d17e      	bne.n	800ddc4 <put_fat+0x1cc>
			p = fs->win + bc % SS(fs);
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dccc:	69bb      	ldr	r3, [r7, #24]
 800dcce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcd2:	4413      	add	r3, r2
 800dcd4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	f003 0301 	and.w	r3, r3, #1
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d003      	beq.n	800dce8 <put_fat+0xf0>
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	091b      	lsrs	r3, r3, #4
 800dce4:	b2db      	uxtb	r3, r3
 800dce6:	e00e      	b.n	800dd06 <put_fat+0x10e>
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	b25b      	sxtb	r3, r3
 800dcee:	f023 030f 	bic.w	r3, r3, #15
 800dcf2:	b25a      	sxtb	r2, r3
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	0a1b      	lsrs	r3, r3, #8
 800dcf8:	b25b      	sxtb	r3, r3
 800dcfa:	f003 030f 	and.w	r3, r3, #15
 800dcfe:	b25b      	sxtb	r3, r3
 800dd00:	4313      	orrs	r3, r2
 800dd02:	b25b      	sxtb	r3, r3
 800dd04:	b2db      	uxtb	r3, r3
 800dd06:	697a      	ldr	r2, [r7, #20]
 800dd08:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	2201      	movs	r2, #1
 800dd0e:	70da      	strb	r2, [r3, #3]
			break;
 800dd10:	e05d      	b.n	800ddce <put_fat+0x1d6>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	0a1b      	lsrs	r3, r3, #8
 800dd1a:	4413      	add	r3, r2
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	68f8      	ldr	r0, [r7, #12]
 800dd20:	f7ff fd94 	bl	800d84c <move_window>
 800dd24:	4603      	mov	r3, r0
 800dd26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd28:	7ffb      	ldrb	r3, [r7, #31]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d14c      	bne.n	800ddc8 <put_fat+0x1d0>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	005b      	lsls	r3, r3, #1
 800dd38:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800dd3c:	4413      	add	r3, r2
 800dd3e:	687a      	ldr	r2, [r7, #4]
 800dd40:	b292      	uxth	r2, r2
 800dd42:	4611      	mov	r1, r2
 800dd44:	4618      	mov	r0, r3
 800dd46:	f7ff fa83 	bl	800d250 <st_word>
			fs->wflag = 1;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	2201      	movs	r2, #1
 800dd4e:	70da      	strb	r2, [r3, #3]
			break;
 800dd50:	e03d      	b.n	800ddce <put_fat+0x1d6>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	09db      	lsrs	r3, r3, #7
 800dd5a:	4413      	add	r3, r2
 800dd5c:	4619      	mov	r1, r3
 800dd5e:	68f8      	ldr	r0, [r7, #12]
 800dd60:	f7ff fd74 	bl	800d84c <move_window>
 800dd64:	4603      	mov	r3, r0
 800dd66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd68:	7ffb      	ldrb	r3, [r7, #31]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d12e      	bne.n	800ddcc <put_fat+0x1d4>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	781b      	ldrb	r3, [r3, #0]
 800dd72:	2b04      	cmp	r3, #4
 800dd74:	d012      	beq.n	800dd9c <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	009b      	lsls	r3, r3, #2
 800dd86:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800dd8a:	4413      	add	r3, r2
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f7ff f961 	bl	800d054 <ld_dword>
 800dd92:	4603      	mov	r3, r0
 800dd94:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800dd98:	4323      	orrs	r3, r4
 800dd9a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	009b      	lsls	r3, r3, #2
 800dda6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ddaa:	4413      	add	r3, r2
 800ddac:	6879      	ldr	r1, [r7, #4]
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7ff fa69 	bl	800d286 <st_dword>
			fs->wflag = 1;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	70da      	strb	r2, [r3, #3]
			break;
 800ddba:	e008      	b.n	800ddce <put_fat+0x1d6>
		}
	}
 800ddbc:	bf00      	nop
 800ddbe:	e006      	b.n	800ddce <put_fat+0x1d6>
			if (res != FR_OK) break;
 800ddc0:	bf00      	nop
 800ddc2:	e004      	b.n	800ddce <put_fat+0x1d6>
			if (res != FR_OK) break;
 800ddc4:	bf00      	nop
 800ddc6:	e002      	b.n	800ddce <put_fat+0x1d6>
			if (res != FR_OK) break;
 800ddc8:	bf00      	nop
 800ddca:	e000      	b.n	800ddce <put_fat+0x1d6>
			if (res != FR_OK) break;
 800ddcc:	bf00      	nop
	return res;
 800ddce:	7ffb      	ldrb	r3, [r7, #31]
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3724      	adds	r7, #36	; 0x24
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd90      	pop	{r4, r7, pc}

0800ddd8 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b08a      	sub	sp, #40	; 0x28
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	60f8      	str	r0, [r7, #12]
 800dde0:	60b9      	str	r1, [r7, #8]
 800dde2:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	3b02      	subs	r3, #2
 800dde8:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	69db      	ldr	r3, [r3, #28]
 800ddee:	3b02      	subs	r3, #2
 800ddf0:	68ba      	ldr	r2, [r7, #8]
 800ddf2:	429a      	cmp	r2, r3
 800ddf4:	d301      	bcc.n	800ddfa <find_bitmap+0x22>
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	61fb      	str	r3, [r7, #28]
 800ddfe:	69fb      	ldr	r3, [r7, #28]
 800de00:	61bb      	str	r3, [r7, #24]
 800de02:	2300      	movs	r3, #0
 800de04:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de0a:	69fb      	ldr	r3, [r7, #28]
 800de0c:	0b1b      	lsrs	r3, r3, #12
 800de0e:	4413      	add	r3, r2
 800de10:	4619      	mov	r1, r3
 800de12:	68f8      	ldr	r0, [r7, #12]
 800de14:	f7ff fd1a 	bl	800d84c <move_window>
 800de18:	4603      	mov	r3, r0
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d002      	beq.n	800de24 <find_bitmap+0x4c>
 800de1e:	f04f 33ff 	mov.w	r3, #4294967295
 800de22:	e051      	b.n	800dec8 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800de24:	69fb      	ldr	r3, [r7, #28]
 800de26:	08db      	lsrs	r3, r3, #3
 800de28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de2c:	623b      	str	r3, [r7, #32]
 800de2e:	69fb      	ldr	r3, [r7, #28]
 800de30:	f003 0307 	and.w	r3, r3, #7
 800de34:	2201      	movs	r2, #1
 800de36:	fa02 f303 	lsl.w	r3, r2, r3
 800de3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800de3e:	68fa      	ldr	r2, [r7, #12]
 800de40:	6a3b      	ldr	r3, [r7, #32]
 800de42:	4413      	add	r3, r2
 800de44:	3338      	adds	r3, #56	; 0x38
 800de46:	781a      	ldrb	r2, [r3, #0]
 800de48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de4c:	4013      	ands	r3, r2
 800de4e:	74fb      	strb	r3, [r7, #19]
 800de50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de54:	005b      	lsls	r3, r3, #1
 800de56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800de5a:	69fb      	ldr	r3, [r7, #28]
 800de5c:	3301      	adds	r3, #1
 800de5e:	61fb      	str	r3, [r7, #28]
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	69db      	ldr	r3, [r3, #28]
 800de64:	3b02      	subs	r3, #2
 800de66:	69fa      	ldr	r2, [r7, #28]
 800de68:	429a      	cmp	r2, r3
 800de6a:	d307      	bcc.n	800de7c <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800de6c:	2300      	movs	r3, #0
 800de6e:	61fb      	str	r3, [r7, #28]
 800de70:	2300      	movs	r3, #0
 800de72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de76:	f44f 7300 	mov.w	r3, #512	; 0x200
 800de7a:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800de7c:	7cfb      	ldrb	r3, [r7, #19]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d109      	bne.n	800de96 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	3301      	adds	r3, #1
 800de86:	617b      	str	r3, [r7, #20]
 800de88:	697a      	ldr	r2, [r7, #20]
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	429a      	cmp	r2, r3
 800de8e:	d106      	bne.n	800de9e <find_bitmap+0xc6>
 800de90:	69bb      	ldr	r3, [r7, #24]
 800de92:	3302      	adds	r3, #2
 800de94:	e018      	b.n	800dec8 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800de96:	69fb      	ldr	r3, [r7, #28]
 800de98:	61bb      	str	r3, [r7, #24]
 800de9a:	2300      	movs	r3, #0
 800de9c:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800de9e:	69fa      	ldr	r2, [r7, #28]
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	429a      	cmp	r2, r3
 800dea4:	d101      	bne.n	800deaa <find_bitmap+0xd2>
 800dea6:	2300      	movs	r3, #0
 800dea8:	e00e      	b.n	800dec8 <find_bitmap+0xf0>
			} while (bm);
 800deaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d1c5      	bne.n	800de3e <find_bitmap+0x66>
			bm = 1;
 800deb2:	2301      	movs	r3, #1
 800deb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800deb8:	6a3b      	ldr	r3, [r7, #32]
 800deba:	3301      	adds	r3, #1
 800debc:	623b      	str	r3, [r7, #32]
 800debe:	6a3b      	ldr	r3, [r7, #32]
 800dec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dec4:	d3bb      	bcc.n	800de3e <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800dec6:	e79e      	b.n	800de06 <find_bitmap+0x2e>
	}
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3728      	adds	r7, #40	; 0x28
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}

0800ded0 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b088      	sub	sp, #32
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	60f8      	str	r0, [r7, #12]
 800ded8:	60b9      	str	r1, [r7, #8]
 800deda:	607a      	str	r2, [r7, #4]
 800dedc:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	3b02      	subs	r3, #2
 800dee2:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	0b1b      	lsrs	r3, r3, #12
 800deec:	4413      	add	r3, r2
 800deee:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	08db      	lsrs	r3, r3, #3
 800def4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800def8:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	f003 0307 	and.w	r3, r3, #7
 800df00:	2201      	movs	r2, #1
 800df02:	fa02 f303 	lsl.w	r3, r2, r3
 800df06:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	1c5a      	adds	r2, r3, #1
 800df0c:	617a      	str	r2, [r7, #20]
 800df0e:	4619      	mov	r1, r3
 800df10:	68f8      	ldr	r0, [r7, #12]
 800df12:	f7ff fc9b 	bl	800d84c <move_window>
 800df16:	4603      	mov	r3, r0
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d001      	beq.n	800df20 <change_bitmap+0x50>
 800df1c:	2301      	movs	r3, #1
 800df1e:	e03d      	b.n	800df9c <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800df20:	68fa      	ldr	r2, [r7, #12]
 800df22:	69bb      	ldr	r3, [r7, #24]
 800df24:	4413      	add	r3, r2
 800df26:	3338      	adds	r3, #56	; 0x38
 800df28:	781a      	ldrb	r2, [r3, #0]
 800df2a:	7ffb      	ldrb	r3, [r7, #31]
 800df2c:	4013      	ands	r3, r2
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	2b00      	cmp	r3, #0
 800df32:	bf14      	ite	ne
 800df34:	2301      	movne	r3, #1
 800df36:	2300      	moveq	r3, #0
 800df38:	b2db      	uxtb	r3, r3
 800df3a:	461a      	mov	r2, r3
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	4293      	cmp	r3, r2
 800df40:	d101      	bne.n	800df46 <change_bitmap+0x76>
 800df42:	2302      	movs	r3, #2
 800df44:	e02a      	b.n	800df9c <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 800df46:	68fa      	ldr	r2, [r7, #12]
 800df48:	69bb      	ldr	r3, [r7, #24]
 800df4a:	4413      	add	r3, r2
 800df4c:	3338      	adds	r3, #56	; 0x38
 800df4e:	781a      	ldrb	r2, [r3, #0]
 800df50:	7ffb      	ldrb	r3, [r7, #31]
 800df52:	4053      	eors	r3, r2
 800df54:	b2d9      	uxtb	r1, r3
 800df56:	68fa      	ldr	r2, [r7, #12]
 800df58:	69bb      	ldr	r3, [r7, #24]
 800df5a:	4413      	add	r3, r2
 800df5c:	3338      	adds	r3, #56	; 0x38
 800df5e:	460a      	mov	r2, r1
 800df60:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	2201      	movs	r2, #1
 800df66:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	3b01      	subs	r3, #1
 800df6c:	607b      	str	r3, [r7, #4]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d101      	bne.n	800df78 <change_bitmap+0xa8>
 800df74:	2300      	movs	r3, #0
 800df76:	e011      	b.n	800df9c <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 800df78:	7ffb      	ldrb	r3, [r7, #31]
 800df7a:	005b      	lsls	r3, r3, #1
 800df7c:	77fb      	strb	r3, [r7, #31]
 800df7e:	7ffb      	ldrb	r3, [r7, #31]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d1cd      	bne.n	800df20 <change_bitmap+0x50>
			bm = 1;
 800df84:	2301      	movs	r3, #1
 800df86:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800df88:	69bb      	ldr	r3, [r7, #24]
 800df8a:	3301      	adds	r3, #1
 800df8c:	61bb      	str	r3, [r7, #24]
 800df8e:	69bb      	ldr	r3, [r7, #24]
 800df90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df94:	d3c4      	bcc.n	800df20 <change_bitmap+0x50>
		i = 0;
 800df96:	2300      	movs	r3, #0
 800df98:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800df9a:	e7b5      	b.n	800df08 <change_bitmap+0x38>
	}
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3720      	adds	r7, #32
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}

0800dfa4 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b086      	sub	sp, #24
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	79db      	ldrb	r3, [r3, #7]
 800dfb0:	2b03      	cmp	r3, #3
 800dfb2:	d121      	bne.n	800dff8 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	689b      	ldr	r3, [r3, #8]
 800dfb8:	617b      	str	r3, [r7, #20]
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	699b      	ldr	r3, [r3, #24]
 800dfbe:	613b      	str	r3, [r7, #16]
 800dfc0:	e014      	b.n	800dfec <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6818      	ldr	r0, [r3, #0]
 800dfc6:	697b      	ldr	r3, [r7, #20]
 800dfc8:	3301      	adds	r3, #1
 800dfca:	461a      	mov	r2, r3
 800dfcc:	6979      	ldr	r1, [r7, #20]
 800dfce:	f7ff fe13 	bl	800dbf8 <put_fat>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800dfd6:	7bfb      	ldrb	r3, [r7, #15]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d001      	beq.n	800dfe0 <fill_first_frag+0x3c>
 800dfdc:	7bfb      	ldrb	r3, [r7, #15]
 800dfde:	e00c      	b.n	800dffa <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800dfe0:	697b      	ldr	r3, [r7, #20]
 800dfe2:	3301      	adds	r3, #1
 800dfe4:	617b      	str	r3, [r7, #20]
 800dfe6:	693b      	ldr	r3, [r7, #16]
 800dfe8:	3b01      	subs	r3, #1
 800dfea:	613b      	str	r3, [r7, #16]
 800dfec:	693b      	ldr	r3, [r7, #16]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d1e7      	bne.n	800dfc2 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2200      	movs	r2, #0
 800dff6:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800dff8:	2300      	movs	r3, #0
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	3718      	adds	r7, #24
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}

0800e002 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800e002:	b580      	push	{r7, lr}
 800e004:	b086      	sub	sp, #24
 800e006:	af00      	add	r7, sp, #0
 800e008:	60f8      	str	r0, [r7, #12]
 800e00a:	60b9      	str	r1, [r7, #8]
 800e00c:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800e00e:	e020      	b.n	800e052 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	6818      	ldr	r0, [r3, #0]
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	69db      	ldr	r3, [r3, #28]
 800e018:	68ba      	ldr	r2, [r7, #8]
 800e01a:	1ad3      	subs	r3, r2, r3
 800e01c:	1c59      	adds	r1, r3, #1
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	69db      	ldr	r3, [r3, #28]
 800e022:	2b01      	cmp	r3, #1
 800e024:	d905      	bls.n	800e032 <fill_last_frag+0x30>
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	69db      	ldr	r3, [r3, #28]
 800e02a:	68ba      	ldr	r2, [r7, #8]
 800e02c:	1ad3      	subs	r3, r2, r3
 800e02e:	3302      	adds	r3, #2
 800e030:	e000      	b.n	800e034 <fill_last_frag+0x32>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	461a      	mov	r2, r3
 800e036:	f7ff fddf 	bl	800dbf8 <put_fat>
 800e03a:	4603      	mov	r3, r0
 800e03c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800e03e:	7dfb      	ldrb	r3, [r7, #23]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d001      	beq.n	800e048 <fill_last_frag+0x46>
 800e044:	7dfb      	ldrb	r3, [r7, #23]
 800e046:	e009      	b.n	800e05c <fill_last_frag+0x5a>
		obj->n_frag--;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	69db      	ldr	r3, [r3, #28]
 800e04c:	1e5a      	subs	r2, r3, #1
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	69db      	ldr	r3, [r3, #28]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d1da      	bne.n	800e010 <fill_last_frag+0xe>
	}
	return FR_OK;
 800e05a:	2300      	movs	r3, #0
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3718      	adds	r7, #24
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}

0800e064 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b08a      	sub	sp, #40	; 0x28
 800e068:	af00      	add	r7, sp, #0
 800e06a:	60f8      	str	r0, [r7, #12]
 800e06c:	60b9      	str	r1, [r7, #8]
 800e06e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e070:	2300      	movs	r3, #0
 800e072:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	627b      	str	r3, [r7, #36]	; 0x24
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	2b01      	cmp	r3, #1
 800e086:	d904      	bls.n	800e092 <remove_chain+0x2e>
 800e088:	69bb      	ldr	r3, [r7, #24]
 800e08a:	69db      	ldr	r3, [r3, #28]
 800e08c:	68ba      	ldr	r2, [r7, #8]
 800e08e:	429a      	cmp	r2, r3
 800e090:	d301      	bcc.n	800e096 <remove_chain+0x32>
 800e092:	2302      	movs	r3, #2
 800e094:	e096      	b.n	800e1c4 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d014      	beq.n	800e0c6 <remove_chain+0x62>
 800e09c:	69bb      	ldr	r3, [r7, #24]
 800e09e:	781b      	ldrb	r3, [r3, #0]
 800e0a0:	2b04      	cmp	r3, #4
 800e0a2:	d103      	bne.n	800e0ac <remove_chain+0x48>
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	79db      	ldrb	r3, [r3, #7]
 800e0a8:	2b02      	cmp	r3, #2
 800e0aa:	d00c      	beq.n	800e0c6 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e0ac:	f04f 32ff 	mov.w	r2, #4294967295
 800e0b0:	6879      	ldr	r1, [r7, #4]
 800e0b2:	69b8      	ldr	r0, [r7, #24]
 800e0b4:	f7ff fda0 	bl	800dbf8 <put_fat>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e0bc:	7ffb      	ldrb	r3, [r7, #31]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d001      	beq.n	800e0c6 <remove_chain+0x62>
 800e0c2:	7ffb      	ldrb	r3, [r7, #31]
 800e0c4:	e07e      	b.n	800e1c4 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e0c6:	68b9      	ldr	r1, [r7, #8]
 800e0c8:	68f8      	ldr	r0, [r7, #12]
 800e0ca:	f7ff fc7b 	bl	800d9c4 <get_fat>
 800e0ce:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d055      	beq.n	800e182 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e0d6:	697b      	ldr	r3, [r7, #20]
 800e0d8:	2b01      	cmp	r3, #1
 800e0da:	d101      	bne.n	800e0e0 <remove_chain+0x7c>
 800e0dc:	2302      	movs	r3, #2
 800e0de:	e071      	b.n	800e1c4 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e0e0:	697b      	ldr	r3, [r7, #20]
 800e0e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0e6:	d101      	bne.n	800e0ec <remove_chain+0x88>
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	e06b      	b.n	800e1c4 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800e0ec:	69bb      	ldr	r3, [r7, #24]
 800e0ee:	781b      	ldrb	r3, [r3, #0]
 800e0f0:	2b04      	cmp	r3, #4
 800e0f2:	d00b      	beq.n	800e10c <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	68b9      	ldr	r1, [r7, #8]
 800e0f8:	69b8      	ldr	r0, [r7, #24]
 800e0fa:	f7ff fd7d 	bl	800dbf8 <put_fat>
 800e0fe:	4603      	mov	r3, r0
 800e100:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e102:	7ffb      	ldrb	r3, [r7, #31]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d001      	beq.n	800e10c <remove_chain+0xa8>
 800e108:	7ffb      	ldrb	r3, [r7, #31]
 800e10a:	e05b      	b.n	800e1c4 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e10c:	69bb      	ldr	r3, [r7, #24]
 800e10e:	699a      	ldr	r2, [r3, #24]
 800e110:	69bb      	ldr	r3, [r7, #24]
 800e112:	69db      	ldr	r3, [r3, #28]
 800e114:	3b02      	subs	r3, #2
 800e116:	429a      	cmp	r2, r3
 800e118:	d20b      	bcs.n	800e132 <remove_chain+0xce>
			fs->free_clst++;
 800e11a:	69bb      	ldr	r3, [r7, #24]
 800e11c:	699b      	ldr	r3, [r3, #24]
 800e11e:	1c5a      	adds	r2, r3, #1
 800e120:	69bb      	ldr	r3, [r7, #24]
 800e122:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800e124:	69bb      	ldr	r3, [r7, #24]
 800e126:	791b      	ldrb	r3, [r3, #4]
 800e128:	f043 0301 	orr.w	r3, r3, #1
 800e12c:	b2da      	uxtb	r2, r3
 800e12e:	69bb      	ldr	r3, [r7, #24]
 800e130:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800e132:	6a3b      	ldr	r3, [r7, #32]
 800e134:	3301      	adds	r3, #1
 800e136:	697a      	ldr	r2, [r7, #20]
 800e138:	429a      	cmp	r2, r3
 800e13a:	d102      	bne.n	800e142 <remove_chain+0xde>
			ecl = nxt;
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	623b      	str	r3, [r7, #32]
 800e140:	e017      	b.n	800e172 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800e142:	69bb      	ldr	r3, [r7, #24]
 800e144:	781b      	ldrb	r3, [r3, #0]
 800e146:	2b04      	cmp	r3, #4
 800e148:	d10f      	bne.n	800e16a <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800e14a:	6a3a      	ldr	r2, [r7, #32]
 800e14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e14e:	1ad3      	subs	r3, r2, r3
 800e150:	1c5a      	adds	r2, r3, #1
 800e152:	2300      	movs	r3, #0
 800e154:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e156:	69b8      	ldr	r0, [r7, #24]
 800e158:	f7ff feba 	bl	800ded0 <change_bitmap>
 800e15c:	4603      	mov	r3, r0
 800e15e:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800e160:	7ffb      	ldrb	r3, [r7, #31]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d001      	beq.n	800e16a <remove_chain+0x106>
 800e166:	7ffb      	ldrb	r3, [r7, #31]
 800e168:	e02c      	b.n	800e1c4 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	623b      	str	r3, [r7, #32]
 800e16e:	6a3b      	ldr	r3, [r7, #32]
 800e170:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e176:	69bb      	ldr	r3, [r7, #24]
 800e178:	69db      	ldr	r3, [r3, #28]
 800e17a:	68ba      	ldr	r2, [r7, #8]
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d3a2      	bcc.n	800e0c6 <remove_chain+0x62>
 800e180:	e000      	b.n	800e184 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800e182:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800e184:	69bb      	ldr	r3, [r7, #24]
 800e186:	781b      	ldrb	r3, [r3, #0]
 800e188:	2b04      	cmp	r3, #4
 800e18a:	d11a      	bne.n	800e1c2 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d103      	bne.n	800e19a <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	2200      	movs	r2, #0
 800e196:	71da      	strb	r2, [r3, #7]
 800e198:	e013      	b.n	800e1c2 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	79db      	ldrb	r3, [r3, #7]
 800e19e:	2b03      	cmp	r3, #3
 800e1a0:	d10f      	bne.n	800e1c2 <remove_chain+0x15e>
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	689b      	ldr	r3, [r3, #8]
 800e1a6:	687a      	ldr	r2, [r7, #4]
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d30a      	bcc.n	800e1c2 <remove_chain+0x15e>
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	689a      	ldr	r2, [r3, #8]
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	699b      	ldr	r3, [r3, #24]
 800e1b4:	4413      	add	r3, r2
 800e1b6:	687a      	ldr	r2, [r7, #4]
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	d802      	bhi.n	800e1c2 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	2202      	movs	r2, #2
 800e1c0:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800e1c2:	2300      	movs	r3, #0
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	3728      	adds	r7, #40	; 0x28
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}

0800e1cc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b088      	sub	sp, #32
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
 800e1d4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d10d      	bne.n	800e1fe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	695b      	ldr	r3, [r3, #20]
 800e1e6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e1e8:	69bb      	ldr	r3, [r7, #24]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d004      	beq.n	800e1f8 <create_chain+0x2c>
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	69db      	ldr	r3, [r3, #28]
 800e1f2:	69ba      	ldr	r2, [r7, #24]
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	d31b      	bcc.n	800e230 <create_chain+0x64>
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	61bb      	str	r3, [r7, #24]
 800e1fc:	e018      	b.n	800e230 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e1fe:	6839      	ldr	r1, [r7, #0]
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f7ff fbdf 	bl	800d9c4 <get_fat>
 800e206:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	2b01      	cmp	r3, #1
 800e20c:	d801      	bhi.n	800e212 <create_chain+0x46>
 800e20e:	2301      	movs	r3, #1
 800e210:	e0d9      	b.n	800e3c6 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e218:	d101      	bne.n	800e21e <create_chain+0x52>
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	e0d3      	b.n	800e3c6 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e21e:	693b      	ldr	r3, [r7, #16]
 800e220:	69db      	ldr	r3, [r3, #28]
 800e222:	68fa      	ldr	r2, [r7, #12]
 800e224:	429a      	cmp	r2, r3
 800e226:	d201      	bcs.n	800e22c <create_chain+0x60>
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	e0cc      	b.n	800e3c6 <create_chain+0x1fa>
		scl = clst;
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	781b      	ldrb	r3, [r3, #0]
 800e234:	2b04      	cmp	r3, #4
 800e236:	d164      	bne.n	800e302 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800e238:	2201      	movs	r2, #1
 800e23a:	69b9      	ldr	r1, [r7, #24]
 800e23c:	6938      	ldr	r0, [r7, #16]
 800e23e:	f7ff fdcb 	bl	800ddd8 <find_bitmap>
 800e242:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800e244:	69fb      	ldr	r3, [r7, #28]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d003      	beq.n	800e252 <create_chain+0x86>
 800e24a:	69fb      	ldr	r3, [r7, #28]
 800e24c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e250:	d101      	bne.n	800e256 <create_chain+0x8a>
 800e252:	69fb      	ldr	r3, [r7, #28]
 800e254:	e0b7      	b.n	800e3c6 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800e256:	2301      	movs	r3, #1
 800e258:	2201      	movs	r2, #1
 800e25a:	69f9      	ldr	r1, [r7, #28]
 800e25c:	6938      	ldr	r0, [r7, #16]
 800e25e:	f7ff fe37 	bl	800ded0 <change_bitmap>
 800e262:	4603      	mov	r3, r0
 800e264:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800e266:	7dfb      	ldrb	r3, [r7, #23]
 800e268:	2b02      	cmp	r3, #2
 800e26a:	d101      	bne.n	800e270 <create_chain+0xa4>
 800e26c:	2301      	movs	r3, #1
 800e26e:	e0aa      	b.n	800e3c6 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800e270:	7dfb      	ldrb	r3, [r7, #23]
 800e272:	2b01      	cmp	r3, #1
 800e274:	d102      	bne.n	800e27c <create_chain+0xb0>
 800e276:	f04f 33ff 	mov.w	r3, #4294967295
 800e27a:	e0a4      	b.n	800e3c6 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d103      	bne.n	800e28a <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	2202      	movs	r2, #2
 800e286:	71da      	strb	r2, [r3, #7]
 800e288:	e011      	b.n	800e2ae <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	79db      	ldrb	r3, [r3, #7]
 800e28e:	2b02      	cmp	r3, #2
 800e290:	d10d      	bne.n	800e2ae <create_chain+0xe2>
 800e292:	69bb      	ldr	r3, [r7, #24]
 800e294:	3301      	adds	r3, #1
 800e296:	69fa      	ldr	r2, [r7, #28]
 800e298:	429a      	cmp	r2, r3
 800e29a:	d008      	beq.n	800e2ae <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	689b      	ldr	r3, [r3, #8]
 800e2a0:	69ba      	ldr	r2, [r7, #24]
 800e2a2:	1ad2      	subs	r2, r2, r3
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2203      	movs	r2, #3
 800e2ac:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	79db      	ldrb	r3, [r3, #7]
 800e2b2:	2b02      	cmp	r3, #2
 800e2b4:	d064      	beq.n	800e380 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	3301      	adds	r3, #1
 800e2ba:	69fa      	ldr	r2, [r7, #28]
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	d10b      	bne.n	800e2d8 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	69db      	ldr	r3, [r3, #28]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d003      	beq.n	800e2d0 <create_chain+0x104>
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	69db      	ldr	r3, [r3, #28]
 800e2cc:	3301      	adds	r3, #1
 800e2ce:	e000      	b.n	800e2d2 <create_chain+0x106>
 800e2d0:	2302      	movs	r3, #2
 800e2d2:	687a      	ldr	r2, [r7, #4]
 800e2d4:	61d3      	str	r3, [r2, #28]
 800e2d6:	e053      	b.n	800e380 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	69db      	ldr	r3, [r3, #28]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d102      	bne.n	800e2e6 <create_chain+0x11a>
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2201      	movs	r2, #1
 800e2e4:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800e2e6:	69fa      	ldr	r2, [r7, #28]
 800e2e8:	6839      	ldr	r1, [r7, #0]
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f7ff fe89 	bl	800e002 <fill_last_frag>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800e2f4:	7dfb      	ldrb	r3, [r7, #23]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d142      	bne.n	800e380 <create_chain+0x1b4>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2201      	movs	r2, #1
 800e2fe:	61da      	str	r2, [r3, #28]
 800e300:	e03e      	b.n	800e380 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e302:	69bb      	ldr	r3, [r7, #24]
 800e304:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e306:	69fb      	ldr	r3, [r7, #28]
 800e308:	3301      	adds	r3, #1
 800e30a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	69db      	ldr	r3, [r3, #28]
 800e310:	69fa      	ldr	r2, [r7, #28]
 800e312:	429a      	cmp	r2, r3
 800e314:	d307      	bcc.n	800e326 <create_chain+0x15a>
				ncl = 2;
 800e316:	2302      	movs	r3, #2
 800e318:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e31a:	69fa      	ldr	r2, [r7, #28]
 800e31c:	69bb      	ldr	r3, [r7, #24]
 800e31e:	429a      	cmp	r2, r3
 800e320:	d901      	bls.n	800e326 <create_chain+0x15a>
 800e322:	2300      	movs	r3, #0
 800e324:	e04f      	b.n	800e3c6 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e326:	69f9      	ldr	r1, [r7, #28]
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f7ff fb4b 	bl	800d9c4 <get_fat>
 800e32e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d00e      	beq.n	800e354 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	2b01      	cmp	r3, #1
 800e33a:	d003      	beq.n	800e344 <create_chain+0x178>
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e342:	d101      	bne.n	800e348 <create_chain+0x17c>
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	e03e      	b.n	800e3c6 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800e348:	69fa      	ldr	r2, [r7, #28]
 800e34a:	69bb      	ldr	r3, [r7, #24]
 800e34c:	429a      	cmp	r2, r3
 800e34e:	d1da      	bne.n	800e306 <create_chain+0x13a>
 800e350:	2300      	movs	r3, #0
 800e352:	e038      	b.n	800e3c6 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800e354:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e356:	f04f 32ff 	mov.w	r2, #4294967295
 800e35a:	69f9      	ldr	r1, [r7, #28]
 800e35c:	6938      	ldr	r0, [r7, #16]
 800e35e:	f7ff fc4b 	bl	800dbf8 <put_fat>
 800e362:	4603      	mov	r3, r0
 800e364:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e366:	7dfb      	ldrb	r3, [r7, #23]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d109      	bne.n	800e380 <create_chain+0x1b4>
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d006      	beq.n	800e380 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e372:	69fa      	ldr	r2, [r7, #28]
 800e374:	6839      	ldr	r1, [r7, #0]
 800e376:	6938      	ldr	r0, [r7, #16]
 800e378:	f7ff fc3e 	bl	800dbf8 <put_fat>
 800e37c:	4603      	mov	r3, r0
 800e37e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e380:	7dfb      	ldrb	r3, [r7, #23]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d116      	bne.n	800e3b4 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800e386:	693b      	ldr	r3, [r7, #16]
 800e388:	69fa      	ldr	r2, [r7, #28]
 800e38a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e38c:	693b      	ldr	r3, [r7, #16]
 800e38e:	699a      	ldr	r2, [r3, #24]
 800e390:	693b      	ldr	r3, [r7, #16]
 800e392:	69db      	ldr	r3, [r3, #28]
 800e394:	3b02      	subs	r3, #2
 800e396:	429a      	cmp	r2, r3
 800e398:	d804      	bhi.n	800e3a4 <create_chain+0x1d8>
 800e39a:	693b      	ldr	r3, [r7, #16]
 800e39c:	699b      	ldr	r3, [r3, #24]
 800e39e:	1e5a      	subs	r2, r3, #1
 800e3a0:	693b      	ldr	r3, [r7, #16]
 800e3a2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800e3a4:	693b      	ldr	r3, [r7, #16]
 800e3a6:	791b      	ldrb	r3, [r3, #4]
 800e3a8:	f043 0301 	orr.w	r3, r3, #1
 800e3ac:	b2da      	uxtb	r2, r3
 800e3ae:	693b      	ldr	r3, [r7, #16]
 800e3b0:	711a      	strb	r2, [r3, #4]
 800e3b2:	e007      	b.n	800e3c4 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e3b4:	7dfb      	ldrb	r3, [r7, #23]
 800e3b6:	2b01      	cmp	r3, #1
 800e3b8:	d102      	bne.n	800e3c0 <create_chain+0x1f4>
 800e3ba:	f04f 33ff 	mov.w	r3, #4294967295
 800e3be:	e000      	b.n	800e3c2 <create_chain+0x1f6>
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e3c4:	69fb      	ldr	r3, [r7, #28]
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3720      	adds	r7, #32
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}

0800e3ce <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e3ce:	b5b0      	push	{r4, r5, r7, lr}
 800e3d0:	b088      	sub	sp, #32
 800e3d2:	af00      	add	r7, sp, #0
 800e3d4:	60f8      	str	r0, [r7, #12]
 800e3d6:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3e4:	3304      	adds	r3, #4
 800e3e6:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e3e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e3ec:	f04f 0000 	mov.w	r0, #0
 800e3f0:	f04f 0100 	mov.w	r1, #0
 800e3f4:	0a50      	lsrs	r0, r2, #9
 800e3f6:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800e3fa:	0a59      	lsrs	r1, r3, #9
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	895b      	ldrh	r3, [r3, #10]
 800e400:	b29b      	uxth	r3, r3
 800e402:	2200      	movs	r2, #0
 800e404:	461c      	mov	r4, r3
 800e406:	4615      	mov	r5, r2
 800e408:	4622      	mov	r2, r4
 800e40a:	462b      	mov	r3, r5
 800e40c:	f7f1 ff48 	bl	80002a0 <__aeabi_uldivmod>
 800e410:	4602      	mov	r2, r0
 800e412:	460b      	mov	r3, r1
 800e414:	4613      	mov	r3, r2
 800e416:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e418:	69bb      	ldr	r3, [r7, #24]
 800e41a:	1d1a      	adds	r2, r3, #4
 800e41c:	61ba      	str	r2, [r7, #24]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e422:	693b      	ldr	r3, [r7, #16]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d101      	bne.n	800e42c <clmt_clust+0x5e>
 800e428:	2300      	movs	r3, #0
 800e42a:	e010      	b.n	800e44e <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 800e42c:	69fa      	ldr	r2, [r7, #28]
 800e42e:	693b      	ldr	r3, [r7, #16]
 800e430:	429a      	cmp	r2, r3
 800e432:	d307      	bcc.n	800e444 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 800e434:	69fa      	ldr	r2, [r7, #28]
 800e436:	693b      	ldr	r3, [r7, #16]
 800e438:	1ad3      	subs	r3, r2, r3
 800e43a:	61fb      	str	r3, [r7, #28]
 800e43c:	69bb      	ldr	r3, [r7, #24]
 800e43e:	3304      	adds	r3, #4
 800e440:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e442:	e7e9      	b.n	800e418 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 800e444:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e446:	69bb      	ldr	r3, [r7, #24]
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	69fb      	ldr	r3, [r7, #28]
 800e44c:	4413      	add	r3, r2
}
 800e44e:	4618      	mov	r0, r3
 800e450:	3720      	adds	r7, #32
 800e452:	46bd      	mov	sp, r7
 800e454:	bdb0      	pop	{r4, r5, r7, pc}

0800e456 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e456:	b580      	push	{r7, lr}
 800e458:	b086      	sub	sp, #24
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	6078      	str	r0, [r7, #4]
 800e45e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e466:	693b      	ldr	r3, [r7, #16]
 800e468:	781b      	ldrb	r3, [r3, #0]
 800e46a:	2b04      	cmp	r3, #4
 800e46c:	d102      	bne.n	800e474 <dir_sdi+0x1e>
 800e46e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e472:	e001      	b.n	800e478 <dir_sdi+0x22>
 800e474:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d904      	bls.n	800e488 <dir_sdi+0x32>
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	f003 031f 	and.w	r3, r3, #31
 800e484:	2b00      	cmp	r3, #0
 800e486:	d001      	beq.n	800e48c <dir_sdi+0x36>
		return FR_INT_ERR;
 800e488:	2302      	movs	r3, #2
 800e48a:	e066      	b.n	800e55a <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	683a      	ldr	r2, [r7, #0]
 800e490:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	689b      	ldr	r3, [r3, #8]
 800e496:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e498:	697b      	ldr	r3, [r7, #20]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d109      	bne.n	800e4b2 <dir_sdi+0x5c>
 800e49e:	693b      	ldr	r3, [r7, #16]
 800e4a0:	781b      	ldrb	r3, [r3, #0]
 800e4a2:	2b02      	cmp	r3, #2
 800e4a4:	d905      	bls.n	800e4b2 <dir_sdi+0x5c>
		clst = fs->dirbase;
 800e4a6:	693b      	ldr	r3, [r7, #16]
 800e4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4aa:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d10c      	bne.n	800e4d2 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	095b      	lsrs	r3, r3, #5
 800e4bc:	693a      	ldr	r2, [r7, #16]
 800e4be:	8912      	ldrh	r2, [r2, #8]
 800e4c0:	4293      	cmp	r3, r2
 800e4c2:	d301      	bcc.n	800e4c8 <dir_sdi+0x72>
 800e4c4:	2302      	movs	r3, #2
 800e4c6:	e048      	b.n	800e55a <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800e4c8:	693b      	ldr	r3, [r7, #16]
 800e4ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	639a      	str	r2, [r3, #56]	; 0x38
 800e4d0:	e029      	b.n	800e526 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	895b      	ldrh	r3, [r3, #10]
 800e4d6:	025b      	lsls	r3, r3, #9
 800e4d8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e4da:	e019      	b.n	800e510 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6979      	ldr	r1, [r7, #20]
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7ff fa6f 	bl	800d9c4 <get_fat>
 800e4e6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4ee:	d101      	bne.n	800e4f4 <dir_sdi+0x9e>
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	e032      	b.n	800e55a <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	2b01      	cmp	r3, #1
 800e4f8:	d904      	bls.n	800e504 <dir_sdi+0xae>
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	69db      	ldr	r3, [r3, #28]
 800e4fe:	697a      	ldr	r2, [r7, #20]
 800e500:	429a      	cmp	r2, r3
 800e502:	d301      	bcc.n	800e508 <dir_sdi+0xb2>
 800e504:	2302      	movs	r3, #2
 800e506:	e028      	b.n	800e55a <dir_sdi+0x104>
			ofs -= csz;
 800e508:	683a      	ldr	r2, [r7, #0]
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	1ad3      	subs	r3, r2, r3
 800e50e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e510:	683a      	ldr	r2, [r7, #0]
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	429a      	cmp	r2, r3
 800e516:	d2e1      	bcs.n	800e4dc <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 800e518:	6979      	ldr	r1, [r7, #20]
 800e51a:	6938      	ldr	r0, [r7, #16]
 800e51c:	f7ff fa32 	bl	800d984 <clust2sect>
 800e520:	4602      	mov	r2, r0
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	697a      	ldr	r2, [r7, #20]
 800e52a:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e530:	2b00      	cmp	r3, #0
 800e532:	d101      	bne.n	800e538 <dir_sdi+0xe2>
 800e534:	2302      	movs	r3, #2
 800e536:	e010      	b.n	800e55a <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	0a5b      	lsrs	r3, r3, #9
 800e540:	441a      	add	r2, r3
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e552:	441a      	add	r2, r3
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800e558:	2300      	movs	r3, #0
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	3718      	adds	r7, #24
 800e55e:	46bd      	mov	sp, r7
 800e560:	bd80      	pop	{r7, pc}

0800e562 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e562:	b580      	push	{r7, lr}
 800e564:	b086      	sub	sp, #24
 800e566:	af00      	add	r7, sp, #0
 800e568:	6078      	str	r0, [r7, #4]
 800e56a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e576:	3320      	adds	r3, #32
 800e578:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d00b      	beq.n	800e59a <dir_next+0x38>
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	781b      	ldrb	r3, [r3, #0]
 800e586:	2b04      	cmp	r3, #4
 800e588:	d102      	bne.n	800e590 <dir_next+0x2e>
 800e58a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e58e:	e001      	b.n	800e594 <dir_next+0x32>
 800e590:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	429a      	cmp	r2, r3
 800e598:	d801      	bhi.n	800e59e <dir_next+0x3c>
 800e59a:	2304      	movs	r3, #4
 800e59c:	e0b2      	b.n	800e704 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	f040 80a0 	bne.w	800e6ea <dir_next+0x188>
		dp->sect++;				/* Next sector */
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5ae:	1c5a      	adds	r2, r3, #1
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d10b      	bne.n	800e5d4 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	095b      	lsrs	r3, r3, #5
 800e5c0:	68fa      	ldr	r2, [r7, #12]
 800e5c2:	8912      	ldrh	r2, [r2, #8]
 800e5c4:	4293      	cmp	r3, r2
 800e5c6:	f0c0 8090 	bcc.w	800e6ea <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	639a      	str	r2, [r3, #56]	; 0x38
 800e5d0:	2304      	movs	r3, #4
 800e5d2:	e097      	b.n	800e704 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	0a5b      	lsrs	r3, r3, #9
 800e5d8:	68fa      	ldr	r2, [r7, #12]
 800e5da:	8952      	ldrh	r2, [r2, #10]
 800e5dc:	3a01      	subs	r2, #1
 800e5de:	4013      	ands	r3, r2
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	f040 8082 	bne.w	800e6ea <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e5e6:	687a      	ldr	r2, [r7, #4]
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	4610      	mov	r0, r2
 800e5f0:	f7ff f9e8 	bl	800d9c4 <get_fat>
 800e5f4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	2b01      	cmp	r3, #1
 800e5fa:	d801      	bhi.n	800e600 <dir_next+0x9e>
 800e5fc:	2302      	movs	r3, #2
 800e5fe:	e081      	b.n	800e704 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e600:	697b      	ldr	r3, [r7, #20]
 800e602:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e606:	d101      	bne.n	800e60c <dir_next+0xaa>
 800e608:	2301      	movs	r3, #1
 800e60a:	e07b      	b.n	800e704 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	69db      	ldr	r3, [r3, #28]
 800e610:	697a      	ldr	r2, [r7, #20]
 800e612:	429a      	cmp	r2, r3
 800e614:	d35f      	bcc.n	800e6d6 <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d104      	bne.n	800e626 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2200      	movs	r2, #0
 800e620:	639a      	str	r2, [r3, #56]	; 0x38
 800e622:	2304      	movs	r3, #4
 800e624:	e06e      	b.n	800e704 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e626:	687a      	ldr	r2, [r7, #4]
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e62c:	4619      	mov	r1, r3
 800e62e:	4610      	mov	r0, r2
 800e630:	f7ff fdcc 	bl	800e1cc <create_chain>
 800e634:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d101      	bne.n	800e640 <dir_next+0xde>
 800e63c:	2307      	movs	r3, #7
 800e63e:	e061      	b.n	800e704 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	2b01      	cmp	r3, #1
 800e644:	d101      	bne.n	800e64a <dir_next+0xe8>
 800e646:	2302      	movs	r3, #2
 800e648:	e05c      	b.n	800e704 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e650:	d101      	bne.n	800e656 <dir_next+0xf4>
 800e652:	2301      	movs	r3, #1
 800e654:	e056      	b.n	800e704 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	79db      	ldrb	r3, [r3, #7]
 800e65a:	f043 0304 	orr.w	r3, r3, #4
 800e65e:	b2da      	uxtb	r2, r3
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e664:	68f8      	ldr	r0, [r7, #12]
 800e666:	f7ff f8ad 	bl	800d7c4 <sync_window>
 800e66a:	4603      	mov	r3, r0
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d001      	beq.n	800e674 <dir_next+0x112>
 800e670:	2301      	movs	r3, #1
 800e672:	e047      	b.n	800e704 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	3338      	adds	r3, #56	; 0x38
 800e678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e67c:	2100      	movs	r1, #0
 800e67e:	4618      	mov	r0, r3
 800e680:	f7fe fed6 	bl	800d430 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e684:	2300      	movs	r3, #0
 800e686:	613b      	str	r3, [r7, #16]
 800e688:	6979      	ldr	r1, [r7, #20]
 800e68a:	68f8      	ldr	r0, [r7, #12]
 800e68c:	f7ff f97a 	bl	800d984 <clust2sect>
 800e690:	4602      	mov	r2, r0
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	635a      	str	r2, [r3, #52]	; 0x34
 800e696:	e012      	b.n	800e6be <dir_next+0x15c>
						fs->wflag = 1;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	2201      	movs	r2, #1
 800e69c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e69e:	68f8      	ldr	r0, [r7, #12]
 800e6a0:	f7ff f890 	bl	800d7c4 <sync_window>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d001      	beq.n	800e6ae <dir_next+0x14c>
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	e02a      	b.n	800e704 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	3301      	adds	r3, #1
 800e6b2:	613b      	str	r3, [r7, #16]
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6b8:	1c5a      	adds	r2, r3, #1
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	635a      	str	r2, [r3, #52]	; 0x34
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	895b      	ldrh	r3, [r3, #10]
 800e6c2:	461a      	mov	r2, r3
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	d3e6      	bcc.n	800e698 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6ce:	693b      	ldr	r3, [r7, #16]
 800e6d0:	1ad2      	subs	r2, r2, r3
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	697a      	ldr	r2, [r7, #20]
 800e6da:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800e6dc:	6979      	ldr	r1, [r7, #20]
 800e6de:	68f8      	ldr	r0, [r7, #12]
 800e6e0:	f7ff f950 	bl	800d984 <clust2sect>
 800e6e4:	4602      	mov	r2, r0
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	68ba      	ldr	r2, [r7, #8]
 800e6ee:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6fc:	441a      	add	r2, r3
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800e702:	2300      	movs	r3, #0
}
 800e704:	4618      	mov	r0, r3
 800e706:	3718      	adds	r7, #24
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}

0800e70c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b086      	sub	sp, #24
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
 800e714:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e71c:	2100      	movs	r1, #0
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f7ff fe99 	bl	800e456 <dir_sdi>
 800e724:	4603      	mov	r3, r0
 800e726:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e728:	7dfb      	ldrb	r3, [r7, #23]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d140      	bne.n	800e7b0 <dir_alloc+0xa4>
		n = 0;
 800e72e:	2300      	movs	r3, #0
 800e730:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e736:	4619      	mov	r1, r3
 800e738:	68f8      	ldr	r0, [r7, #12]
 800e73a:	f7ff f887 	bl	800d84c <move_window>
 800e73e:	4603      	mov	r3, r0
 800e740:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e742:	7dfb      	ldrb	r3, [r7, #23]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d132      	bne.n	800e7ae <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	781b      	ldrb	r3, [r3, #0]
 800e74c:	2b04      	cmp	r3, #4
 800e74e:	d108      	bne.n	800e762 <dir_alloc+0x56>
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e754:	781b      	ldrb	r3, [r3, #0]
 800e756:	b25b      	sxtb	r3, r3
 800e758:	43db      	mvns	r3, r3
 800e75a:	b2db      	uxtb	r3, r3
 800e75c:	09db      	lsrs	r3, r3, #7
 800e75e:	b2db      	uxtb	r3, r3
 800e760:	e00f      	b.n	800e782 <dir_alloc+0x76>
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e766:	781b      	ldrb	r3, [r3, #0]
 800e768:	2be5      	cmp	r3, #229	; 0xe5
 800e76a:	d004      	beq.n	800e776 <dir_alloc+0x6a>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e770:	781b      	ldrb	r3, [r3, #0]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d101      	bne.n	800e77a <dir_alloc+0x6e>
 800e776:	2301      	movs	r3, #1
 800e778:	e000      	b.n	800e77c <dir_alloc+0x70>
 800e77a:	2300      	movs	r3, #0
 800e77c:	f003 0301 	and.w	r3, r3, #1
 800e780:	b2db      	uxtb	r3, r3
 800e782:	2b00      	cmp	r3, #0
 800e784:	d007      	beq.n	800e796 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e786:	693b      	ldr	r3, [r7, #16]
 800e788:	3301      	adds	r3, #1
 800e78a:	613b      	str	r3, [r7, #16]
 800e78c:	693a      	ldr	r2, [r7, #16]
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	429a      	cmp	r2, r3
 800e792:	d102      	bne.n	800e79a <dir_alloc+0x8e>
 800e794:	e00c      	b.n	800e7b0 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e796:	2300      	movs	r3, #0
 800e798:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e79a:	2101      	movs	r1, #1
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f7ff fee0 	bl	800e562 <dir_next>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e7a6:	7dfb      	ldrb	r3, [r7, #23]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d0c2      	beq.n	800e732 <dir_alloc+0x26>
 800e7ac:	e000      	b.n	800e7b0 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800e7ae:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e7b0:	7dfb      	ldrb	r3, [r7, #23]
 800e7b2:	2b04      	cmp	r3, #4
 800e7b4:	d101      	bne.n	800e7ba <dir_alloc+0xae>
 800e7b6:	2307      	movs	r3, #7
 800e7b8:	75fb      	strb	r3, [r7, #23]
	return res;
 800e7ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3718      	adds	r7, #24
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}

0800e7c4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b084      	sub	sp, #16
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	331a      	adds	r3, #26
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f7fe fc26 	bl	800d024 <ld_word>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	781b      	ldrb	r3, [r3, #0]
 800e7e0:	2b03      	cmp	r3, #3
 800e7e2:	d109      	bne.n	800e7f8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	3314      	adds	r3, #20
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f7fe fc1b 	bl	800d024 <ld_word>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	041b      	lsls	r3, r3, #16
 800e7f2:	68fa      	ldr	r2, [r7, #12]
 800e7f4:	4313      	orrs	r3, r2
 800e7f6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
}
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	3710      	adds	r7, #16
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}

0800e802 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e802:	b580      	push	{r7, lr}
 800e804:	b084      	sub	sp, #16
 800e806:	af00      	add	r7, sp, #0
 800e808:	60f8      	str	r0, [r7, #12]
 800e80a:	60b9      	str	r1, [r7, #8]
 800e80c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	331a      	adds	r3, #26
 800e812:	687a      	ldr	r2, [r7, #4]
 800e814:	b292      	uxth	r2, r2
 800e816:	4611      	mov	r1, r2
 800e818:	4618      	mov	r0, r3
 800e81a:	f7fe fd19 	bl	800d250 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	781b      	ldrb	r3, [r3, #0]
 800e822:	2b03      	cmp	r3, #3
 800e824:	d109      	bne.n	800e83a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	f103 0214 	add.w	r2, r3, #20
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	0c1b      	lsrs	r3, r3, #16
 800e830:	b29b      	uxth	r3, r3
 800e832:	4619      	mov	r1, r3
 800e834:	4610      	mov	r0, r2
 800e836:	f7fe fd0b 	bl	800d250 <st_word>
	}
}
 800e83a:	bf00      	nop
 800e83c:	3710      	adds	r7, #16
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}
	...

0800e844 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e844:	b590      	push	{r4, r7, lr}
 800e846:	b087      	sub	sp, #28
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
 800e84c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	331a      	adds	r3, #26
 800e852:	4618      	mov	r0, r3
 800e854:	f7fe fbe6 	bl	800d024 <ld_word>
 800e858:	4603      	mov	r3, r0
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d001      	beq.n	800e862 <cmp_lfn+0x1e>
 800e85e:	2300      	movs	r3, #0
 800e860:	e059      	b.n	800e916 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	781b      	ldrb	r3, [r3, #0]
 800e866:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e86a:	1e5a      	subs	r2, r3, #1
 800e86c:	4613      	mov	r3, r2
 800e86e:	005b      	lsls	r3, r3, #1
 800e870:	4413      	add	r3, r2
 800e872:	009b      	lsls	r3, r3, #2
 800e874:	4413      	add	r3, r2
 800e876:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e878:	2301      	movs	r3, #1
 800e87a:	81fb      	strh	r3, [r7, #14]
 800e87c:	2300      	movs	r3, #0
 800e87e:	613b      	str	r3, [r7, #16]
 800e880:	e033      	b.n	800e8ea <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e882:	4a27      	ldr	r2, [pc, #156]	; (800e920 <cmp_lfn+0xdc>)
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	4413      	add	r3, r2
 800e888:	781b      	ldrb	r3, [r3, #0]
 800e88a:	461a      	mov	r2, r3
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	4413      	add	r3, r2
 800e890:	4618      	mov	r0, r3
 800e892:	f7fe fbc7 	bl	800d024 <ld_word>
 800e896:	4603      	mov	r3, r0
 800e898:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e89a:	89fb      	ldrh	r3, [r7, #14]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d01a      	beq.n	800e8d6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e8a0:	697b      	ldr	r3, [r7, #20]
 800e8a2:	2bfe      	cmp	r3, #254	; 0xfe
 800e8a4:	d812      	bhi.n	800e8cc <cmp_lfn+0x88>
 800e8a6:	89bb      	ldrh	r3, [r7, #12]
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f003 f96f 	bl	8011b8c <ff_wtoupper>
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	461c      	mov	r4, r3
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	1c5a      	adds	r2, r3, #1
 800e8b6:	617a      	str	r2, [r7, #20]
 800e8b8:	005b      	lsls	r3, r3, #1
 800e8ba:	687a      	ldr	r2, [r7, #4]
 800e8bc:	4413      	add	r3, r2
 800e8be:	881b      	ldrh	r3, [r3, #0]
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f003 f963 	bl	8011b8c <ff_wtoupper>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	429c      	cmp	r4, r3
 800e8ca:	d001      	beq.n	800e8d0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	e022      	b.n	800e916 <cmp_lfn+0xd2>
			}
			wc = uc;
 800e8d0:	89bb      	ldrh	r3, [r7, #12]
 800e8d2:	81fb      	strh	r3, [r7, #14]
 800e8d4:	e006      	b.n	800e8e4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e8d6:	89bb      	ldrh	r3, [r7, #12]
 800e8d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e8dc:	4293      	cmp	r3, r2
 800e8de:	d001      	beq.n	800e8e4 <cmp_lfn+0xa0>
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	e018      	b.n	800e916 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e8e4:	693b      	ldr	r3, [r7, #16]
 800e8e6:	3301      	adds	r3, #1
 800e8e8:	613b      	str	r3, [r7, #16]
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	2b0c      	cmp	r3, #12
 800e8ee:	d9c8      	bls.n	800e882 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	781b      	ldrb	r3, [r3, #0]
 800e8f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d00b      	beq.n	800e914 <cmp_lfn+0xd0>
 800e8fc:	89fb      	ldrh	r3, [r7, #14]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d008      	beq.n	800e914 <cmp_lfn+0xd0>
 800e902:	697b      	ldr	r3, [r7, #20]
 800e904:	005b      	lsls	r3, r3, #1
 800e906:	687a      	ldr	r2, [r7, #4]
 800e908:	4413      	add	r3, r2
 800e90a:	881b      	ldrh	r3, [r3, #0]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d001      	beq.n	800e914 <cmp_lfn+0xd0>
 800e910:	2300      	movs	r3, #0
 800e912:	e000      	b.n	800e916 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e914:	2301      	movs	r3, #1
}
 800e916:	4618      	mov	r0, r3
 800e918:	371c      	adds	r7, #28
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd90      	pop	{r4, r7, pc}
 800e91e:	bf00      	nop
 800e920:	08017794 	.word	0x08017794

0800e924 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b086      	sub	sp, #24
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	331a      	adds	r3, #26
 800e932:	4618      	mov	r0, r3
 800e934:	f7fe fb76 	bl	800d024 <ld_word>
 800e938:	4603      	mov	r3, r0
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d001      	beq.n	800e942 <pick_lfn+0x1e>
 800e93e:	2300      	movs	r3, #0
 800e940:	e04d      	b.n	800e9de <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	781b      	ldrb	r3, [r3, #0]
 800e946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e94a:	1e5a      	subs	r2, r3, #1
 800e94c:	4613      	mov	r3, r2
 800e94e:	005b      	lsls	r3, r3, #1
 800e950:	4413      	add	r3, r2
 800e952:	009b      	lsls	r3, r3, #2
 800e954:	4413      	add	r3, r2
 800e956:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e958:	2301      	movs	r3, #1
 800e95a:	81fb      	strh	r3, [r7, #14]
 800e95c:	2300      	movs	r3, #0
 800e95e:	613b      	str	r3, [r7, #16]
 800e960:	e028      	b.n	800e9b4 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e962:	4a21      	ldr	r2, [pc, #132]	; (800e9e8 <pick_lfn+0xc4>)
 800e964:	693b      	ldr	r3, [r7, #16]
 800e966:	4413      	add	r3, r2
 800e968:	781b      	ldrb	r3, [r3, #0]
 800e96a:	461a      	mov	r2, r3
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	4413      	add	r3, r2
 800e970:	4618      	mov	r0, r3
 800e972:	f7fe fb57 	bl	800d024 <ld_word>
 800e976:	4603      	mov	r3, r0
 800e978:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e97a:	89fb      	ldrh	r3, [r7, #14]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d00f      	beq.n	800e9a0 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800e980:	697b      	ldr	r3, [r7, #20]
 800e982:	2bfe      	cmp	r3, #254	; 0xfe
 800e984:	d901      	bls.n	800e98a <pick_lfn+0x66>
 800e986:	2300      	movs	r3, #0
 800e988:	e029      	b.n	800e9de <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800e98a:	89bb      	ldrh	r3, [r7, #12]
 800e98c:	81fb      	strh	r3, [r7, #14]
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	1c5a      	adds	r2, r3, #1
 800e992:	617a      	str	r2, [r7, #20]
 800e994:	005b      	lsls	r3, r3, #1
 800e996:	687a      	ldr	r2, [r7, #4]
 800e998:	4413      	add	r3, r2
 800e99a:	89fa      	ldrh	r2, [r7, #14]
 800e99c:	801a      	strh	r2, [r3, #0]
 800e99e:	e006      	b.n	800e9ae <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e9a0:	89bb      	ldrh	r3, [r7, #12]
 800e9a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e9a6:	4293      	cmp	r3, r2
 800e9a8:	d001      	beq.n	800e9ae <pick_lfn+0x8a>
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	e017      	b.n	800e9de <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e9ae:	693b      	ldr	r3, [r7, #16]
 800e9b0:	3301      	adds	r3, #1
 800e9b2:	613b      	str	r3, [r7, #16]
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	2b0c      	cmp	r3, #12
 800e9b8:	d9d3      	bls.n	800e962 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	781b      	ldrb	r3, [r3, #0]
 800e9be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d00a      	beq.n	800e9dc <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	2bfe      	cmp	r3, #254	; 0xfe
 800e9ca:	d901      	bls.n	800e9d0 <pick_lfn+0xac>
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	e006      	b.n	800e9de <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	005b      	lsls	r3, r3, #1
 800e9d4:	687a      	ldr	r2, [r7, #4]
 800e9d6:	4413      	add	r3, r2
 800e9d8:	2200      	movs	r2, #0
 800e9da:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800e9dc:	2301      	movs	r3, #1
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3718      	adds	r7, #24
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}
 800e9e6:	bf00      	nop
 800e9e8:	08017794 	.word	0x08017794

0800e9ec <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b088      	sub	sp, #32
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	60f8      	str	r0, [r7, #12]
 800e9f4:	60b9      	str	r1, [r7, #8]
 800e9f6:	4611      	mov	r1, r2
 800e9f8:	461a      	mov	r2, r3
 800e9fa:	460b      	mov	r3, r1
 800e9fc:	71fb      	strb	r3, [r7, #7]
 800e9fe:	4613      	mov	r3, r2
 800ea00:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	330d      	adds	r3, #13
 800ea06:	79ba      	ldrb	r2, [r7, #6]
 800ea08:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	330b      	adds	r3, #11
 800ea0e:	220f      	movs	r2, #15
 800ea10:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	330c      	adds	r3, #12
 800ea16:	2200      	movs	r2, #0
 800ea18:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	331a      	adds	r3, #26
 800ea1e:	2100      	movs	r1, #0
 800ea20:	4618      	mov	r0, r3
 800ea22:	f7fe fc15 	bl	800d250 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ea26:	79fb      	ldrb	r3, [r7, #7]
 800ea28:	1e5a      	subs	r2, r3, #1
 800ea2a:	4613      	mov	r3, r2
 800ea2c:	005b      	lsls	r3, r3, #1
 800ea2e:	4413      	add	r3, r2
 800ea30:	009b      	lsls	r3, r3, #2
 800ea32:	4413      	add	r3, r2
 800ea34:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ea36:	2300      	movs	r3, #0
 800ea38:	82fb      	strh	r3, [r7, #22]
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ea3e:	8afb      	ldrh	r3, [r7, #22]
 800ea40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea44:	4293      	cmp	r3, r2
 800ea46:	d007      	beq.n	800ea58 <put_lfn+0x6c>
 800ea48:	69fb      	ldr	r3, [r7, #28]
 800ea4a:	1c5a      	adds	r2, r3, #1
 800ea4c:	61fa      	str	r2, [r7, #28]
 800ea4e:	005b      	lsls	r3, r3, #1
 800ea50:	68fa      	ldr	r2, [r7, #12]
 800ea52:	4413      	add	r3, r2
 800ea54:	881b      	ldrh	r3, [r3, #0]
 800ea56:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ea58:	4a17      	ldr	r2, [pc, #92]	; (800eab8 <put_lfn+0xcc>)
 800ea5a:	69bb      	ldr	r3, [r7, #24]
 800ea5c:	4413      	add	r3, r2
 800ea5e:	781b      	ldrb	r3, [r3, #0]
 800ea60:	461a      	mov	r2, r3
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	4413      	add	r3, r2
 800ea66:	8afa      	ldrh	r2, [r7, #22]
 800ea68:	4611      	mov	r1, r2
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f7fe fbf0 	bl	800d250 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ea70:	8afb      	ldrh	r3, [r7, #22]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d102      	bne.n	800ea7c <put_lfn+0x90>
 800ea76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ea7a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ea7c:	69bb      	ldr	r3, [r7, #24]
 800ea7e:	3301      	adds	r3, #1
 800ea80:	61bb      	str	r3, [r7, #24]
 800ea82:	69bb      	ldr	r3, [r7, #24]
 800ea84:	2b0c      	cmp	r3, #12
 800ea86:	d9da      	bls.n	800ea3e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ea88:	8afb      	ldrh	r3, [r7, #22]
 800ea8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea8e:	4293      	cmp	r3, r2
 800ea90:	d006      	beq.n	800eaa0 <put_lfn+0xb4>
 800ea92:	69fb      	ldr	r3, [r7, #28]
 800ea94:	005b      	lsls	r3, r3, #1
 800ea96:	68fa      	ldr	r2, [r7, #12]
 800ea98:	4413      	add	r3, r2
 800ea9a:	881b      	ldrh	r3, [r3, #0]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d103      	bne.n	800eaa8 <put_lfn+0xbc>
 800eaa0:	79fb      	ldrb	r3, [r7, #7]
 800eaa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eaa6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	79fa      	ldrb	r2, [r7, #7]
 800eaac:	701a      	strb	r2, [r3, #0]
}
 800eaae:	bf00      	nop
 800eab0:	3720      	adds	r7, #32
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}
 800eab6:	bf00      	nop
 800eab8:	08017794 	.word	0x08017794

0800eabc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b08c      	sub	sp, #48	; 0x30
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	60f8      	str	r0, [r7, #12]
 800eac4:	60b9      	str	r1, [r7, #8]
 800eac6:	607a      	str	r2, [r7, #4]
 800eac8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800eaca:	220b      	movs	r2, #11
 800eacc:	68b9      	ldr	r1, [r7, #8]
 800eace:	68f8      	ldr	r0, [r7, #12]
 800ead0:	f7fe fc8d 	bl	800d3ee <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	2b05      	cmp	r3, #5
 800ead8:	d92b      	bls.n	800eb32 <gen_numname+0x76>
		sr = seq;
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800eade:	e022      	b.n	800eb26 <gen_numname+0x6a>
			wc = *lfn++;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	1c9a      	adds	r2, r3, #2
 800eae4:	607a      	str	r2, [r7, #4]
 800eae6:	881b      	ldrh	r3, [r3, #0]
 800eae8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800eaea:	2300      	movs	r3, #0
 800eaec:	62bb      	str	r3, [r7, #40]	; 0x28
 800eaee:	e017      	b.n	800eb20 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800eaf0:	69fb      	ldr	r3, [r7, #28]
 800eaf2:	005a      	lsls	r2, r3, #1
 800eaf4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eaf6:	f003 0301 	and.w	r3, r3, #1
 800eafa:	4413      	add	r3, r2
 800eafc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800eafe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eb00:	085b      	lsrs	r3, r3, #1
 800eb02:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800eb04:	69fb      	ldr	r3, [r7, #28]
 800eb06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d005      	beq.n	800eb1a <gen_numname+0x5e>
 800eb0e:	69fb      	ldr	r3, [r7, #28]
 800eb10:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800eb14:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800eb18:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800eb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb1c:	3301      	adds	r3, #1
 800eb1e:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb22:	2b0f      	cmp	r3, #15
 800eb24:	d9e4      	bls.n	800eaf0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	881b      	ldrh	r3, [r3, #0]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d1d8      	bne.n	800eae0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800eb2e:	69fb      	ldr	r3, [r7, #28]
 800eb30:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800eb32:	2307      	movs	r3, #7
 800eb34:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	b2db      	uxtb	r3, r3
 800eb3a:	f003 030f 	and.w	r3, r3, #15
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	3330      	adds	r3, #48	; 0x30
 800eb42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800eb46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb4a:	2b39      	cmp	r3, #57	; 0x39
 800eb4c:	d904      	bls.n	800eb58 <gen_numname+0x9c>
 800eb4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb52:	3307      	adds	r3, #7
 800eb54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800eb58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb5a:	1e5a      	subs	r2, r3, #1
 800eb5c:	62ba      	str	r2, [r7, #40]	; 0x28
 800eb5e:	3330      	adds	r3, #48	; 0x30
 800eb60:	443b      	add	r3, r7
 800eb62:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800eb66:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	091b      	lsrs	r3, r3, #4
 800eb6e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d1df      	bne.n	800eb36 <gen_numname+0x7a>
	ns[i] = '~';
 800eb76:	f107 0214 	add.w	r2, r7, #20
 800eb7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb7c:	4413      	add	r3, r2
 800eb7e:	227e      	movs	r2, #126	; 0x7e
 800eb80:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800eb82:	2300      	movs	r3, #0
 800eb84:	627b      	str	r3, [r7, #36]	; 0x24
 800eb86:	e002      	b.n	800eb8e <gen_numname+0xd2>
 800eb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb8a:	3301      	adds	r3, #1
 800eb8c:	627b      	str	r3, [r7, #36]	; 0x24
 800eb8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb92:	429a      	cmp	r2, r3
 800eb94:	d205      	bcs.n	800eba2 <gen_numname+0xe6>
 800eb96:	68fa      	ldr	r2, [r7, #12]
 800eb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb9a:	4413      	add	r3, r2
 800eb9c:	781b      	ldrb	r3, [r3, #0]
 800eb9e:	2b20      	cmp	r3, #32
 800eba0:	d1f2      	bne.n	800eb88 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800eba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba4:	2b07      	cmp	r3, #7
 800eba6:	d807      	bhi.n	800ebb8 <gen_numname+0xfc>
 800eba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebaa:	1c5a      	adds	r2, r3, #1
 800ebac:	62ba      	str	r2, [r7, #40]	; 0x28
 800ebae:	3330      	adds	r3, #48	; 0x30
 800ebb0:	443b      	add	r3, r7
 800ebb2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ebb6:	e000      	b.n	800ebba <gen_numname+0xfe>
 800ebb8:	2120      	movs	r1, #32
 800ebba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebbc:	1c5a      	adds	r2, r3, #1
 800ebbe:	627a      	str	r2, [r7, #36]	; 0x24
 800ebc0:	68fa      	ldr	r2, [r7, #12]
 800ebc2:	4413      	add	r3, r2
 800ebc4:	460a      	mov	r2, r1
 800ebc6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ebc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebca:	2b07      	cmp	r3, #7
 800ebcc:	d9e9      	bls.n	800eba2 <gen_numname+0xe6>
}
 800ebce:	bf00      	nop
 800ebd0:	bf00      	nop
 800ebd2:	3730      	adds	r7, #48	; 0x30
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}

0800ebd8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ebd8:	b480      	push	{r7}
 800ebda:	b085      	sub	sp, #20
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ebe4:	230b      	movs	r3, #11
 800ebe6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ebe8:	7bfb      	ldrb	r3, [r7, #15]
 800ebea:	b2da      	uxtb	r2, r3
 800ebec:	0852      	lsrs	r2, r2, #1
 800ebee:	01db      	lsls	r3, r3, #7
 800ebf0:	4313      	orrs	r3, r2
 800ebf2:	b2da      	uxtb	r2, r3
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	1c59      	adds	r1, r3, #1
 800ebf8:	6079      	str	r1, [r7, #4]
 800ebfa:	781b      	ldrb	r3, [r3, #0]
 800ebfc:	4413      	add	r3, r2
 800ebfe:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	3b01      	subs	r3, #1
 800ec04:	60bb      	str	r3, [r7, #8]
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d1ed      	bne.n	800ebe8 <sum_sfn+0x10>
	return sum;
 800ec0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3714      	adds	r7, #20
 800ec12:	46bd      	mov	sp, r7
 800ec14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec18:	4770      	bx	lr

0800ec1a <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800ec1a:	b480      	push	{r7}
 800ec1c:	b087      	sub	sp, #28
 800ec1e:	af00      	add	r7, sp, #0
 800ec20:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	3301      	adds	r3, #1
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	3301      	adds	r3, #1
 800ec2a:	015b      	lsls	r3, r3, #5
 800ec2c:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800ec2e:	2300      	movs	r3, #0
 800ec30:	827b      	strh	r3, [r7, #18]
 800ec32:	2300      	movs	r3, #0
 800ec34:	617b      	str	r3, [r7, #20]
 800ec36:	e018      	b.n	800ec6a <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800ec38:	697b      	ldr	r3, [r7, #20]
 800ec3a:	2b02      	cmp	r3, #2
 800ec3c:	d103      	bne.n	800ec46 <xdir_sum+0x2c>
			i++;
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	3301      	adds	r3, #1
 800ec42:	617b      	str	r3, [r7, #20]
 800ec44:	e00e      	b.n	800ec64 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800ec46:	8a7b      	ldrh	r3, [r7, #18]
 800ec48:	03db      	lsls	r3, r3, #15
 800ec4a:	b29a      	uxth	r2, r3
 800ec4c:	8a7b      	ldrh	r3, [r7, #18]
 800ec4e:	085b      	lsrs	r3, r3, #1
 800ec50:	b29b      	uxth	r3, r3
 800ec52:	4413      	add	r3, r2
 800ec54:	b29a      	uxth	r2, r3
 800ec56:	6879      	ldr	r1, [r7, #4]
 800ec58:	697b      	ldr	r3, [r7, #20]
 800ec5a:	440b      	add	r3, r1
 800ec5c:	781b      	ldrb	r3, [r3, #0]
 800ec5e:	b29b      	uxth	r3, r3
 800ec60:	4413      	add	r3, r2
 800ec62:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	3301      	adds	r3, #1
 800ec68:	617b      	str	r3, [r7, #20]
 800ec6a:	697a      	ldr	r2, [r7, #20]
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	429a      	cmp	r2, r3
 800ec70:	d3e2      	bcc.n	800ec38 <xdir_sum+0x1e>
		}
	}
	return sum;
 800ec72:	8a7b      	ldrh	r3, [r7, #18]
}
 800ec74:	4618      	mov	r0, r3
 800ec76:	371c      	adds	r7, #28
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7e:	4770      	bx	lr

0800ec80 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b084      	sub	sp, #16
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800ec88:	2300      	movs	r3, #0
 800ec8a:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800ec8c:	e01f      	b.n	800ecce <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800ec8e:	89bb      	ldrh	r3, [r7, #12]
 800ec90:	4618      	mov	r0, r3
 800ec92:	f002 ff7b 	bl	8011b8c <ff_wtoupper>
 800ec96:	4603      	mov	r3, r0
 800ec98:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800ec9a:	89fb      	ldrh	r3, [r7, #14]
 800ec9c:	03db      	lsls	r3, r3, #15
 800ec9e:	b29a      	uxth	r2, r3
 800eca0:	89fb      	ldrh	r3, [r7, #14]
 800eca2:	085b      	lsrs	r3, r3, #1
 800eca4:	b29b      	uxth	r3, r3
 800eca6:	4413      	add	r3, r2
 800eca8:	b29a      	uxth	r2, r3
 800ecaa:	89bb      	ldrh	r3, [r7, #12]
 800ecac:	b2db      	uxtb	r3, r3
 800ecae:	b29b      	uxth	r3, r3
 800ecb0:	4413      	add	r3, r2
 800ecb2:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800ecb4:	89fb      	ldrh	r3, [r7, #14]
 800ecb6:	03db      	lsls	r3, r3, #15
 800ecb8:	b29a      	uxth	r2, r3
 800ecba:	89fb      	ldrh	r3, [r7, #14]
 800ecbc:	085b      	lsrs	r3, r3, #1
 800ecbe:	b29b      	uxth	r3, r3
 800ecc0:	4413      	add	r3, r2
 800ecc2:	b29a      	uxth	r2, r3
 800ecc4:	89bb      	ldrh	r3, [r7, #12]
 800ecc6:	0a1b      	lsrs	r3, r3, #8
 800ecc8:	b29b      	uxth	r3, r3
 800ecca:	4413      	add	r3, r2
 800eccc:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	1c9a      	adds	r2, r3, #2
 800ecd2:	607a      	str	r2, [r7, #4]
 800ecd4:	881b      	ldrh	r3, [r3, #0]
 800ecd6:	81bb      	strh	r3, [r7, #12]
 800ecd8:	89bb      	ldrh	r3, [r7, #12]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d1d7      	bne.n	800ec8e <xname_sum+0xe>
	}
	return sum;
 800ecde:	89fb      	ldrh	r3, [r7, #14]
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	3710      	adds	r7, #16
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}

0800ece8 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800ece8:	b590      	push	{r4, r7, lr}
 800ecea:	b087      	sub	sp, #28
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	691b      	ldr	r3, [r3, #16]
 800ecf6:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681a      	ldr	r2, [r3, #0]
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed00:	4619      	mov	r1, r3
 800ed02:	4610      	mov	r0, r2
 800ed04:	f7fe fda2 	bl	800d84c <move_window>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800ed0c:	7bfb      	ldrb	r3, [r7, #15]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d001      	beq.n	800ed16 <load_xdir+0x2e>
 800ed12:	7bfb      	ldrb	r3, [r7, #15]
 800ed14:	e09f      	b.n	800ee56 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed1a:	781b      	ldrb	r3, [r3, #0]
 800ed1c:	2b85      	cmp	r3, #133	; 0x85
 800ed1e:	d001      	beq.n	800ed24 <load_xdir+0x3c>
 800ed20:	2302      	movs	r3, #2
 800ed22:	e098      	b.n	800ee56 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed28:	2220      	movs	r2, #32
 800ed2a:	4619      	mov	r1, r3
 800ed2c:	6938      	ldr	r0, [r7, #16]
 800ed2e:	f7fe fb5e 	bl	800d3ee <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800ed32:	693b      	ldr	r3, [r7, #16]
 800ed34:	3301      	adds	r3, #1
 800ed36:	781b      	ldrb	r3, [r3, #0]
 800ed38:	3301      	adds	r3, #1
 800ed3a:	015b      	lsls	r3, r3, #5
 800ed3c:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	2b5f      	cmp	r3, #95	; 0x5f
 800ed42:	d903      	bls.n	800ed4c <load_xdir+0x64>
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800ed4a:	d901      	bls.n	800ed50 <load_xdir+0x68>
 800ed4c:	2302      	movs	r3, #2
 800ed4e:	e082      	b.n	800ee56 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800ed50:	2100      	movs	r1, #0
 800ed52:	6878      	ldr	r0, [r7, #4]
 800ed54:	f7ff fc05 	bl	800e562 <dir_next>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800ed5c:	7bfb      	ldrb	r3, [r7, #15]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d001      	beq.n	800ed66 <load_xdir+0x7e>
 800ed62:	7bfb      	ldrb	r3, [r7, #15]
 800ed64:	e077      	b.n	800ee56 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681a      	ldr	r2, [r3, #0]
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed6e:	4619      	mov	r1, r3
 800ed70:	4610      	mov	r0, r2
 800ed72:	f7fe fd6b 	bl	800d84c <move_window>
 800ed76:	4603      	mov	r3, r0
 800ed78:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800ed7a:	7bfb      	ldrb	r3, [r7, #15]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d001      	beq.n	800ed84 <load_xdir+0x9c>
 800ed80:	7bfb      	ldrb	r3, [r7, #15]
 800ed82:	e068      	b.n	800ee56 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed88:	781b      	ldrb	r3, [r3, #0]
 800ed8a:	2bc0      	cmp	r3, #192	; 0xc0
 800ed8c:	d001      	beq.n	800ed92 <load_xdir+0xaa>
 800ed8e:	2302      	movs	r3, #2
 800ed90:	e061      	b.n	800ee56 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800ed92:	693b      	ldr	r3, [r7, #16]
 800ed94:	f103 0020 	add.w	r0, r3, #32
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed9c:	2220      	movs	r2, #32
 800ed9e:	4619      	mov	r1, r3
 800eda0:	f7fe fb25 	bl	800d3ee <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	3323      	adds	r3, #35	; 0x23
 800eda8:	781b      	ldrb	r3, [r3, #0]
 800edaa:	332c      	adds	r3, #44	; 0x2c
 800edac:	4a2c      	ldr	r2, [pc, #176]	; (800ee60 <load_xdir+0x178>)
 800edae:	fba2 2303 	umull	r2, r3, r2, r3
 800edb2:	08db      	lsrs	r3, r3, #3
 800edb4:	015b      	lsls	r3, r3, #5
 800edb6:	68ba      	ldr	r2, [r7, #8]
 800edb8:	429a      	cmp	r2, r3
 800edba:	d201      	bcs.n	800edc0 <load_xdir+0xd8>
 800edbc:	2302      	movs	r3, #2
 800edbe:	e04a      	b.n	800ee56 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800edc0:	2340      	movs	r3, #64	; 0x40
 800edc2:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800edc4:	2100      	movs	r1, #0
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	f7ff fbcb 	bl	800e562 <dir_next>
 800edcc:	4603      	mov	r3, r0
 800edce:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800edd0:	7bfb      	ldrb	r3, [r7, #15]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d001      	beq.n	800edda <load_xdir+0xf2>
 800edd6:	7bfb      	ldrb	r3, [r7, #15]
 800edd8:	e03d      	b.n	800ee56 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681a      	ldr	r2, [r3, #0]
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ede2:	4619      	mov	r1, r3
 800ede4:	4610      	mov	r0, r2
 800ede6:	f7fe fd31 	bl	800d84c <move_window>
 800edea:	4603      	mov	r3, r0
 800edec:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800edee:	7bfb      	ldrb	r3, [r7, #15]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d001      	beq.n	800edf8 <load_xdir+0x110>
 800edf4:	7bfb      	ldrb	r3, [r7, #15]
 800edf6:	e02e      	b.n	800ee56 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edfc:	781b      	ldrb	r3, [r3, #0]
 800edfe:	2bc1      	cmp	r3, #193	; 0xc1
 800ee00:	d001      	beq.n	800ee06 <load_xdir+0x11e>
 800ee02:	2302      	movs	r3, #2
 800ee04:	e027      	b.n	800ee56 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800ee0c:	d208      	bcs.n	800ee20 <load_xdir+0x138>
 800ee0e:	693a      	ldr	r2, [r7, #16]
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	18d0      	adds	r0, r2, r3
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee18:	2220      	movs	r2, #32
 800ee1a:	4619      	mov	r1, r3
 800ee1c:	f7fe fae7 	bl	800d3ee <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	3320      	adds	r3, #32
 800ee24:	617b      	str	r3, [r7, #20]
 800ee26:	697a      	ldr	r2, [r7, #20]
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d3ca      	bcc.n	800edc4 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800ee2e:	697b      	ldr	r3, [r7, #20]
 800ee30:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800ee34:	d80e      	bhi.n	800ee54 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800ee36:	6938      	ldr	r0, [r7, #16]
 800ee38:	f7ff feef 	bl	800ec1a <xdir_sum>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	461c      	mov	r4, r3
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	3302      	adds	r3, #2
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7fe f8ed 	bl	800d024 <ld_word>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	429c      	cmp	r4, r3
 800ee4e:	d001      	beq.n	800ee54 <load_xdir+0x16c>
 800ee50:	2302      	movs	r3, #2
 800ee52:	e000      	b.n	800ee56 <load_xdir+0x16e>
	}
	return FR_OK;
 800ee54:	2300      	movs	r3, #0
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	371c      	adds	r7, #28
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd90      	pop	{r4, r7, pc}
 800ee5e:	bf00      	nop
 800ee60:	88888889 	.word	0x88888889

0800ee64 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800ee64:	b5b0      	push	{r4, r5, r7, lr}
 800ee66:	b084      	sub	sp, #16
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
 800ee6c:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800ee6e:	6839      	ldr	r1, [r7, #0]
 800ee70:	6808      	ldr	r0, [r1, #0]
 800ee72:	6879      	ldr	r1, [r7, #4]
 800ee74:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800ee76:	6839      	ldr	r1, [r7, #0]
 800ee78:	6a08      	ldr	r0, [r1, #32]
 800ee7a:	6879      	ldr	r1, [r7, #4]
 800ee7c:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800ee7e:	6839      	ldr	r1, [r7, #0]
 800ee80:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800ee82:	b2c8      	uxtb	r0, r1
 800ee84:	6879      	ldr	r1, [r7, #4]
 800ee86:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800ee88:	6839      	ldr	r1, [r7, #0]
 800ee8a:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800ee8c:	2000      	movs	r0, #0
 800ee8e:	460c      	mov	r4, r1
 800ee90:	4605      	mov	r5, r0
 800ee92:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800ee96:	2300      	movs	r3, #0
 800ee98:	6879      	ldr	r1, [r7, #4]
 800ee9a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eeaa:	4619      	mov	r1, r3
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f7ff fad2 	bl	800e456 <dir_sdi>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800eeb6:	7bfb      	ldrb	r3, [r7, #15]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d104      	bne.n	800eec6 <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f7ff ff13 	bl	800ece8 <load_xdir>
 800eec2:	4603      	mov	r3, r0
 800eec4:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800eec6:	7bfb      	ldrb	r3, [r7, #15]
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	3710      	adds	r7, #16
 800eecc:	46bd      	mov	sp, r7
 800eece:	bdb0      	pop	{r4, r5, r7, pc}

0800eed0 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800eed0:	b590      	push	{r4, r7, lr}
 800eed2:	b087      	sub	sp, #28
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	691b      	ldr	r3, [r3, #16]
 800eede:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	1c9c      	adds	r4, r3, #2
 800eee4:	68f8      	ldr	r0, [r7, #12]
 800eee6:	f7ff fe98 	bl	800ec1a <xdir_sum>
 800eeea:	4603      	mov	r3, r0
 800eeec:	4619      	mov	r1, r3
 800eeee:	4620      	mov	r0, r4
 800eef0:	f7fe f9ae 	bl	800d250 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	3301      	adds	r3, #1
 800eef8:	781b      	ldrb	r3, [r3, #0]
 800eefa:	3301      	adds	r3, #1
 800eefc:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef02:	4619      	mov	r1, r3
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	f7ff faa6 	bl	800e456 <dir_sdi>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800ef0e:	e026      	b.n	800ef5e <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681a      	ldr	r2, [r3, #0]
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef18:	4619      	mov	r1, r3
 800ef1a:	4610      	mov	r0, r2
 800ef1c:	f7fe fc96 	bl	800d84c <move_window>
 800ef20:	4603      	mov	r3, r0
 800ef22:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ef24:	7dfb      	ldrb	r3, [r7, #23]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d11d      	bne.n	800ef66 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef2e:	2220      	movs	r2, #32
 800ef30:	68f9      	ldr	r1, [r7, #12]
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7fe fa5b 	bl	800d3ee <mem_cpy>
		dp->obj.fs->wflag = 1;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	2201      	movs	r2, #1
 800ef3e:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800ef40:	693b      	ldr	r3, [r7, #16]
 800ef42:	3b01      	subs	r3, #1
 800ef44:	613b      	str	r3, [r7, #16]
 800ef46:	693b      	ldr	r3, [r7, #16]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d00e      	beq.n	800ef6a <store_xdir+0x9a>
		dirb += SZDIRE;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	3320      	adds	r3, #32
 800ef50:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800ef52:	2100      	movs	r1, #0
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f7ff fb04 	bl	800e562 <dir_next>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800ef5e:	7dfb      	ldrb	r3, [r7, #23]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d0d5      	beq.n	800ef10 <store_xdir+0x40>
 800ef64:	e002      	b.n	800ef6c <store_xdir+0x9c>
		if (res != FR_OK) break;
 800ef66:	bf00      	nop
 800ef68:	e000      	b.n	800ef6c <store_xdir+0x9c>
		if (--nent == 0) break;
 800ef6a:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800ef6c:	7dfb      	ldrb	r3, [r7, #23]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d002      	beq.n	800ef78 <store_xdir+0xa8>
 800ef72:	7dfb      	ldrb	r3, [r7, #23]
 800ef74:	2b01      	cmp	r3, #1
 800ef76:	d101      	bne.n	800ef7c <store_xdir+0xac>
 800ef78:	7dfb      	ldrb	r3, [r7, #23]
 800ef7a:	e000      	b.n	800ef7e <store_xdir+0xae>
 800ef7c:	2302      	movs	r3, #2
}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	371c      	adds	r7, #28
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd90      	pop	{r4, r7, pc}

0800ef86 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800ef86:	b590      	push	{r4, r7, lr}
 800ef88:	b085      	sub	sp, #20
 800ef8a:	af00      	add	r7, sp, #0
 800ef8c:	6078      	str	r0, [r7, #4]
 800ef8e:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800ef90:	2240      	movs	r2, #64	; 0x40
 800ef92:	2100      	movs	r1, #0
 800ef94:	6878      	ldr	r0, [r7, #4]
 800ef96:	f7fe fa4b 	bl	800d430 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	2285      	movs	r2, #133	; 0x85
 800ef9e:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	3320      	adds	r3, #32
 800efa4:	22c0      	movs	r2, #192	; 0xc0
 800efa6:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800efa8:	2300      	movs	r3, #0
 800efaa:	72bb      	strb	r3, [r7, #10]
 800efac:	2301      	movs	r3, #1
 800efae:	72fb      	strb	r3, [r7, #11]
 800efb0:	2301      	movs	r3, #1
 800efb2:	813b      	strh	r3, [r7, #8]
 800efb4:	2340      	movs	r3, #64	; 0x40
 800efb6:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	1c5a      	adds	r2, r3, #1
 800efbc:	60fa      	str	r2, [r7, #12]
 800efbe:	687a      	ldr	r2, [r7, #4]
 800efc0:	4413      	add	r3, r2
 800efc2:	22c1      	movs	r2, #193	; 0xc1
 800efc4:	701a      	strb	r2, [r3, #0]
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	1c5a      	adds	r2, r3, #1
 800efca:	60fa      	str	r2, [r7, #12]
 800efcc:	687a      	ldr	r2, [r7, #4]
 800efce:	4413      	add	r3, r2
 800efd0:	2200      	movs	r2, #0
 800efd2:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800efd4:	893b      	ldrh	r3, [r7, #8]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d00b      	beq.n	800eff2 <create_xdir+0x6c>
 800efda:	7abb      	ldrb	r3, [r7, #10]
 800efdc:	005b      	lsls	r3, r3, #1
 800efde:	683a      	ldr	r2, [r7, #0]
 800efe0:	4413      	add	r3, r2
 800efe2:	881b      	ldrh	r3, [r3, #0]
 800efe4:	813b      	strh	r3, [r7, #8]
 800efe6:	893b      	ldrh	r3, [r7, #8]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d002      	beq.n	800eff2 <create_xdir+0x6c>
 800efec:	7abb      	ldrb	r3, [r7, #10]
 800efee:	3301      	adds	r3, #1
 800eff0:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800eff2:	687a      	ldr	r2, [r7, #4]
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	4413      	add	r3, r2
 800eff8:	893a      	ldrh	r2, [r7, #8]
 800effa:	4611      	mov	r1, r2
 800effc:	4618      	mov	r0, r3
 800effe:	f7fe f927 	bl	800d250 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	3302      	adds	r3, #2
 800f006:	60fb      	str	r3, [r7, #12]
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	f003 031f 	and.w	r3, r3, #31
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d1e0      	bne.n	800efd4 <create_xdir+0x4e>
		nb++;
 800f012:	7afb      	ldrb	r3, [r7, #11]
 800f014:	3301      	adds	r3, #1
 800f016:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800f018:	7abb      	ldrb	r3, [r7, #10]
 800f01a:	005b      	lsls	r3, r3, #1
 800f01c:	683a      	ldr	r2, [r7, #0]
 800f01e:	4413      	add	r3, r2
 800f020:	881b      	ldrh	r3, [r3, #0]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d1c8      	bne.n	800efb8 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	3323      	adds	r3, #35	; 0x23
 800f02a:	7aba      	ldrb	r2, [r7, #10]
 800f02c:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	3301      	adds	r3, #1
 800f032:	7afa      	ldrb	r2, [r7, #11]
 800f034:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800f03c:	6838      	ldr	r0, [r7, #0]
 800f03e:	f7ff fe1f 	bl	800ec80 <xname_sum>
 800f042:	4603      	mov	r3, r0
 800f044:	4619      	mov	r1, r3
 800f046:	4620      	mov	r0, r4
 800f048:	f7fe f902 	bl	800d250 <st_word>
}
 800f04c:	bf00      	nop
 800f04e:	3714      	adds	r7, #20
 800f050:	46bd      	mov	sp, r7
 800f052:	bd90      	pop	{r4, r7, pc}

0800f054 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b086      	sub	sp, #24
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
 800f05c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f05e:	2304      	movs	r3, #4
 800f060:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800f068:	23ff      	movs	r3, #255	; 0xff
 800f06a:	757b      	strb	r3, [r7, #21]
 800f06c:	23ff      	movs	r3, #255	; 0xff
 800f06e:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800f070:	e09f      	b.n	800f1b2 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f076:	4619      	mov	r1, r3
 800f078:	6938      	ldr	r0, [r7, #16]
 800f07a:	f7fe fbe7 	bl	800d84c <move_window>
 800f07e:	4603      	mov	r3, r0
 800f080:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f082:	7dfb      	ldrb	r3, [r7, #23]
 800f084:	2b00      	cmp	r3, #0
 800f086:	f040 809a 	bne.w	800f1be <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f08e:	781b      	ldrb	r3, [r3, #0]
 800f090:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800f092:	7dbb      	ldrb	r3, [r7, #22]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d102      	bne.n	800f09e <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f098:	2304      	movs	r3, #4
 800f09a:	75fb      	strb	r3, [r7, #23]
 800f09c:	e096      	b.n	800f1cc <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800f09e:	693b      	ldr	r3, [r7, #16]
 800f0a0:	781b      	ldrb	r3, [r3, #0]
 800f0a2:	2b04      	cmp	r3, #4
 800f0a4:	d118      	bne.n	800f0d8 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800f0a6:	7dbb      	ldrb	r3, [r7, #22]
 800f0a8:	2b85      	cmp	r3, #133	; 0x85
 800f0aa:	d179      	bne.n	800f1a0 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	f7ff fe17 	bl	800ece8 <load_xdir>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800f0be:	7dfb      	ldrb	r3, [r7, #23]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d17e      	bne.n	800f1c2 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800f0c4:	693b      	ldr	r3, [r7, #16]
 800f0c6:	691b      	ldr	r3, [r3, #16]
 800f0c8:	3304      	adds	r3, #4
 800f0ca:	781b      	ldrb	r3, [r3, #0]
 800f0cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0d0:	b2da      	uxtb	r2, r3
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	719a      	strb	r2, [r3, #6]
					}
					break;
 800f0d6:	e074      	b.n	800f1c2 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0dc:	330b      	adds	r3, #11
 800f0de:	781b      	ldrb	r3, [r3, #0]
 800f0e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0e4:	73fb      	strb	r3, [r7, #15]
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	7bfa      	ldrb	r2, [r7, #15]
 800f0ea:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800f0ec:	7dbb      	ldrb	r3, [r7, #22]
 800f0ee:	2be5      	cmp	r3, #229	; 0xe5
 800f0f0:	d00e      	beq.n	800f110 <dir_read+0xbc>
 800f0f2:	7dbb      	ldrb	r3, [r7, #22]
 800f0f4:	2b2e      	cmp	r3, #46	; 0x2e
 800f0f6:	d00b      	beq.n	800f110 <dir_read+0xbc>
 800f0f8:	7bfb      	ldrb	r3, [r7, #15]
 800f0fa:	f023 0320 	bic.w	r3, r3, #32
 800f0fe:	2b08      	cmp	r3, #8
 800f100:	bf0c      	ite	eq
 800f102:	2301      	moveq	r3, #1
 800f104:	2300      	movne	r3, #0
 800f106:	b2db      	uxtb	r3, r3
 800f108:	461a      	mov	r2, r3
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	4293      	cmp	r3, r2
 800f10e:	d002      	beq.n	800f116 <dir_read+0xc2>
				ord = 0xFF;
 800f110:	23ff      	movs	r3, #255	; 0xff
 800f112:	757b      	strb	r3, [r7, #21]
 800f114:	e044      	b.n	800f1a0 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800f116:	7bfb      	ldrb	r3, [r7, #15]
 800f118:	2b0f      	cmp	r3, #15
 800f11a:	d12f      	bne.n	800f17c <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800f11c:	7dbb      	ldrb	r3, [r7, #22]
 800f11e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f122:	2b00      	cmp	r3, #0
 800f124:	d00d      	beq.n	800f142 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f12a:	7b5b      	ldrb	r3, [r3, #13]
 800f12c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800f12e:	7dbb      	ldrb	r3, [r7, #22]
 800f130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f134:	75bb      	strb	r3, [r7, #22]
 800f136:	7dbb      	ldrb	r3, [r7, #22]
 800f138:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f142:	7dba      	ldrb	r2, [r7, #22]
 800f144:	7d7b      	ldrb	r3, [r7, #21]
 800f146:	429a      	cmp	r2, r3
 800f148:	d115      	bne.n	800f176 <dir_read+0x122>
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f14e:	330d      	adds	r3, #13
 800f150:	781b      	ldrb	r3, [r3, #0]
 800f152:	7d3a      	ldrb	r2, [r7, #20]
 800f154:	429a      	cmp	r2, r3
 800f156:	d10e      	bne.n	800f176 <dir_read+0x122>
 800f158:	693b      	ldr	r3, [r7, #16]
 800f15a:	68da      	ldr	r2, [r3, #12]
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f160:	4619      	mov	r1, r3
 800f162:	4610      	mov	r0, r2
 800f164:	f7ff fbde 	bl	800e924 <pick_lfn>
 800f168:	4603      	mov	r3, r0
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d003      	beq.n	800f176 <dir_read+0x122>
 800f16e:	7d7b      	ldrb	r3, [r7, #21]
 800f170:	3b01      	subs	r3, #1
 800f172:	b2db      	uxtb	r3, r3
 800f174:	e000      	b.n	800f178 <dir_read+0x124>
 800f176:	23ff      	movs	r3, #255	; 0xff
 800f178:	757b      	strb	r3, [r7, #21]
 800f17a:	e011      	b.n	800f1a0 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800f17c:	7d7b      	ldrb	r3, [r7, #21]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d109      	bne.n	800f196 <dir_read+0x142>
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f186:	4618      	mov	r0, r3
 800f188:	f7ff fd26 	bl	800ebd8 <sum_sfn>
 800f18c:	4603      	mov	r3, r0
 800f18e:	461a      	mov	r2, r3
 800f190:	7d3b      	ldrb	r3, [r7, #20]
 800f192:	4293      	cmp	r3, r2
 800f194:	d017      	beq.n	800f1c6 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	f04f 32ff 	mov.w	r2, #4294967295
 800f19c:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800f19e:	e012      	b.n	800f1c6 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f1a0:	2100      	movs	r1, #0
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f7ff f9dd 	bl	800e562 <dir_next>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f1ac:	7dfb      	ldrb	r3, [r7, #23]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d10b      	bne.n	800f1ca <dir_read+0x176>
	while (dp->sect) {
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	f47f af5b 	bne.w	800f072 <dir_read+0x1e>
 800f1bc:	e006      	b.n	800f1cc <dir_read+0x178>
		if (res != FR_OK) break;
 800f1be:	bf00      	nop
 800f1c0:	e004      	b.n	800f1cc <dir_read+0x178>
					break;
 800f1c2:	bf00      	nop
 800f1c4:	e002      	b.n	800f1cc <dir_read+0x178>
					break;
 800f1c6:	bf00      	nop
 800f1c8:	e000      	b.n	800f1cc <dir_read+0x178>
		if (res != FR_OK) break;
 800f1ca:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f1cc:	7dfb      	ldrb	r3, [r7, #23]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d002      	beq.n	800f1d8 <dir_read+0x184>
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800f1d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3718      	adds	r7, #24
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}

0800f1e2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f1e2:	b590      	push	{r4, r7, lr}
 800f1e4:	b089      	sub	sp, #36	; 0x24
 800f1e6:	af00      	add	r7, sp, #0
 800f1e8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f1f0:	2100      	movs	r1, #0
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f7ff f92f 	bl	800e456 <dir_sdi>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800f1fc:	7ffb      	ldrb	r3, [r7, #31]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d001      	beq.n	800f206 <dir_find+0x24>
 800f202:	7ffb      	ldrb	r3, [r7, #31]
 800f204:	e112      	b.n	800f42c <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	781b      	ldrb	r3, [r3, #0]
 800f20a:	2b04      	cmp	r3, #4
 800f20c:	d164      	bne.n	800f2d8 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	68db      	ldr	r3, [r3, #12]
 800f212:	4618      	mov	r0, r3
 800f214:	f7ff fd34 	bl	800ec80 <xname_sum>
 800f218:	4603      	mov	r3, r0
 800f21a:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800f21c:	e04f      	b.n	800f2be <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	691b      	ldr	r3, [r3, #16]
 800f222:	3324      	adds	r3, #36	; 0x24
 800f224:	4618      	mov	r0, r3
 800f226:	f7fd fefd 	bl	800d024 <ld_word>
 800f22a:	4603      	mov	r3, r0
 800f22c:	461a      	mov	r2, r3
 800f22e:	893b      	ldrh	r3, [r7, #8]
 800f230:	4293      	cmp	r3, r2
 800f232:	d000      	beq.n	800f236 <dir_find+0x54>
 800f234:	e043      	b.n	800f2be <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	691b      	ldr	r3, [r3, #16]
 800f23a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800f23e:	76fb      	strb	r3, [r7, #27]
 800f240:	2340      	movs	r3, #64	; 0x40
 800f242:	617b      	str	r3, [r7, #20]
 800f244:	2300      	movs	r3, #0
 800f246:	613b      	str	r3, [r7, #16]
 800f248:	e029      	b.n	800f29e <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	f003 031f 	and.w	r3, r3, #31
 800f250:	2b00      	cmp	r3, #0
 800f252:	d102      	bne.n	800f25a <dir_find+0x78>
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	3302      	adds	r3, #2
 800f258:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	691a      	ldr	r2, [r3, #16]
 800f25e:	697b      	ldr	r3, [r7, #20]
 800f260:	4413      	add	r3, r2
 800f262:	4618      	mov	r0, r3
 800f264:	f7fd fede 	bl	800d024 <ld_word>
 800f268:	4603      	mov	r3, r0
 800f26a:	4618      	mov	r0, r3
 800f26c:	f002 fc8e 	bl	8011b8c <ff_wtoupper>
 800f270:	4603      	mov	r3, r0
 800f272:	461c      	mov	r4, r3
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	68da      	ldr	r2, [r3, #12]
 800f278:	693b      	ldr	r3, [r7, #16]
 800f27a:	005b      	lsls	r3, r3, #1
 800f27c:	4413      	add	r3, r2
 800f27e:	881b      	ldrh	r3, [r3, #0]
 800f280:	4618      	mov	r0, r3
 800f282:	f002 fc83 	bl	8011b8c <ff_wtoupper>
 800f286:	4603      	mov	r3, r0
 800f288:	429c      	cmp	r4, r3
 800f28a:	d10c      	bne.n	800f2a6 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800f28c:	7efb      	ldrb	r3, [r7, #27]
 800f28e:	3b01      	subs	r3, #1
 800f290:	76fb      	strb	r3, [r7, #27]
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	3302      	adds	r3, #2
 800f296:	617b      	str	r3, [r7, #20]
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	3301      	adds	r3, #1
 800f29c:	613b      	str	r3, [r7, #16]
 800f29e:	7efb      	ldrb	r3, [r7, #27]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d1d2      	bne.n	800f24a <dir_find+0x68>
 800f2a4:	e000      	b.n	800f2a8 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800f2a6:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800f2a8:	7efb      	ldrb	r3, [r7, #27]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d107      	bne.n	800f2be <dir_find+0xdc>
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	68da      	ldr	r2, [r3, #12]
 800f2b2:	693b      	ldr	r3, [r7, #16]
 800f2b4:	005b      	lsls	r3, r3, #1
 800f2b6:	4413      	add	r3, r2
 800f2b8:	881b      	ldrh	r3, [r3, #0]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d009      	beq.n	800f2d2 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800f2be:	2100      	movs	r1, #0
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f7ff fec7 	bl	800f054 <dir_read>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	77fb      	strb	r3, [r7, #31]
 800f2ca:	7ffb      	ldrb	r3, [r7, #31]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d0a6      	beq.n	800f21e <dir_find+0x3c>
 800f2d0:	e000      	b.n	800f2d4 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800f2d2:	bf00      	nop
		}
		return res;
 800f2d4:	7ffb      	ldrb	r3, [r7, #31]
 800f2d6:	e0a9      	b.n	800f42c <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f2d8:	23ff      	movs	r3, #255	; 0xff
 800f2da:	773b      	strb	r3, [r7, #28]
 800f2dc:	7f3b      	ldrb	r3, [r7, #28]
 800f2de:	777b      	strb	r3, [r7, #29]
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f04f 32ff 	mov.w	r2, #4294967295
 800f2e6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2ec:	4619      	mov	r1, r3
 800f2ee:	68f8      	ldr	r0, [r7, #12]
 800f2f0:	f7fe faac 	bl	800d84c <move_window>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800f2f8:	7ffb      	ldrb	r3, [r7, #31]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	f040 8090 	bne.w	800f420 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f304:	781b      	ldrb	r3, [r3, #0]
 800f306:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f308:	7fbb      	ldrb	r3, [r7, #30]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d102      	bne.n	800f314 <dir_find+0x132>
 800f30e:	2304      	movs	r3, #4
 800f310:	77fb      	strb	r3, [r7, #31]
 800f312:	e08a      	b.n	800f42a <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f318:	330b      	adds	r3, #11
 800f31a:	781b      	ldrb	r3, [r3, #0]
 800f31c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f320:	72fb      	strb	r3, [r7, #11]
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	7afa      	ldrb	r2, [r7, #11]
 800f326:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f328:	7fbb      	ldrb	r3, [r7, #30]
 800f32a:	2be5      	cmp	r3, #229	; 0xe5
 800f32c:	d007      	beq.n	800f33e <dir_find+0x15c>
 800f32e:	7afb      	ldrb	r3, [r7, #11]
 800f330:	f003 0308 	and.w	r3, r3, #8
 800f334:	2b00      	cmp	r3, #0
 800f336:	d009      	beq.n	800f34c <dir_find+0x16a>
 800f338:	7afb      	ldrb	r3, [r7, #11]
 800f33a:	2b0f      	cmp	r3, #15
 800f33c:	d006      	beq.n	800f34c <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f33e:	23ff      	movs	r3, #255	; 0xff
 800f340:	777b      	strb	r3, [r7, #29]
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	f04f 32ff 	mov.w	r2, #4294967295
 800f348:	64da      	str	r2, [r3, #76]	; 0x4c
 800f34a:	e05e      	b.n	800f40a <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f34c:	7afb      	ldrb	r3, [r7, #11]
 800f34e:	2b0f      	cmp	r3, #15
 800f350:	d136      	bne.n	800f3c0 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d154      	bne.n	800f40a <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f360:	7fbb      	ldrb	r3, [r7, #30]
 800f362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f366:	2b00      	cmp	r3, #0
 800f368:	d00d      	beq.n	800f386 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f36e:	7b5b      	ldrb	r3, [r3, #13]
 800f370:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f372:	7fbb      	ldrb	r3, [r7, #30]
 800f374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f378:	77bb      	strb	r3, [r7, #30]
 800f37a:	7fbb      	ldrb	r3, [r7, #30]
 800f37c:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f386:	7fba      	ldrb	r2, [r7, #30]
 800f388:	7f7b      	ldrb	r3, [r7, #29]
 800f38a:	429a      	cmp	r2, r3
 800f38c:	d115      	bne.n	800f3ba <dir_find+0x1d8>
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f392:	330d      	adds	r3, #13
 800f394:	781b      	ldrb	r3, [r3, #0]
 800f396:	7f3a      	ldrb	r2, [r7, #28]
 800f398:	429a      	cmp	r2, r3
 800f39a:	d10e      	bne.n	800f3ba <dir_find+0x1d8>
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	68da      	ldr	r2, [r3, #12]
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3a4:	4619      	mov	r1, r3
 800f3a6:	4610      	mov	r0, r2
 800f3a8:	f7ff fa4c 	bl	800e844 <cmp_lfn>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d003      	beq.n	800f3ba <dir_find+0x1d8>
 800f3b2:	7f7b      	ldrb	r3, [r7, #29]
 800f3b4:	3b01      	subs	r3, #1
 800f3b6:	b2db      	uxtb	r3, r3
 800f3b8:	e000      	b.n	800f3bc <dir_find+0x1da>
 800f3ba:	23ff      	movs	r3, #255	; 0xff
 800f3bc:	777b      	strb	r3, [r7, #29]
 800f3be:	e024      	b.n	800f40a <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f3c0:	7f7b      	ldrb	r3, [r7, #29]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d109      	bne.n	800f3da <dir_find+0x1f8>
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f7ff fc04 	bl	800ebd8 <sum_sfn>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	461a      	mov	r2, r3
 800f3d4:	7f3b      	ldrb	r3, [r7, #28]
 800f3d6:	4293      	cmp	r3, r2
 800f3d8:	d024      	beq.n	800f424 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f3e0:	f003 0301 	and.w	r3, r3, #1
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d10a      	bne.n	800f3fe <dir_find+0x21c>
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	3340      	adds	r3, #64	; 0x40
 800f3f0:	220b      	movs	r2, #11
 800f3f2:	4619      	mov	r1, r3
 800f3f4:	f7fe f837 	bl	800d466 <mem_cmp>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d014      	beq.n	800f428 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f3fe:	23ff      	movs	r3, #255	; 0xff
 800f400:	777b      	strb	r3, [r7, #29]
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	f04f 32ff 	mov.w	r2, #4294967295
 800f408:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f40a:	2100      	movs	r1, #0
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f7ff f8a8 	bl	800e562 <dir_next>
 800f412:	4603      	mov	r3, r0
 800f414:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800f416:	7ffb      	ldrb	r3, [r7, #31]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	f43f af65 	beq.w	800f2e8 <dir_find+0x106>
 800f41e:	e004      	b.n	800f42a <dir_find+0x248>
		if (res != FR_OK) break;
 800f420:	bf00      	nop
 800f422:	e002      	b.n	800f42a <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f424:	bf00      	nop
 800f426:	e000      	b.n	800f42a <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f428:	bf00      	nop

	return res;
 800f42a:	7ffb      	ldrb	r3, [r7, #31]
}
 800f42c:	4618      	mov	r0, r3
 800f42e:	3724      	adds	r7, #36	; 0x24
 800f430:	46bd      	mov	sp, r7
 800f432:	bd90      	pop	{r4, r7, pc}

0800f434 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f434:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800f438:	b0a0      	sub	sp, #128	; 0x80
 800f43a:	af00      	add	r7, sp, #0
 800f43c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f44a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d001      	beq.n	800f456 <dir_register+0x22>
 800f452:	2306      	movs	r3, #6
 800f454:	e18e      	b.n	800f774 <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f456:	2300      	movs	r3, #0
 800f458:	677b      	str	r3, [r7, #116]	; 0x74
 800f45a:	e002      	b.n	800f462 <dir_register+0x2e>
 800f45c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f45e:	3301      	adds	r3, #1
 800f460:	677b      	str	r3, [r7, #116]	; 0x74
 800f462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f464:	68da      	ldr	r2, [r3, #12]
 800f466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f468:	005b      	lsls	r3, r3, #1
 800f46a:	4413      	add	r3, r2
 800f46c:	881b      	ldrh	r3, [r3, #0]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d1f4      	bne.n	800f45c <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800f472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f474:	781b      	ldrb	r3, [r3, #0]
 800f476:	2b04      	cmp	r3, #4
 800f478:	f040 809f 	bne.w	800f5ba <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800f47c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f47e:	330e      	adds	r3, #14
 800f480:	4aa2      	ldr	r2, [pc, #648]	; (800f70c <dir_register+0x2d8>)
 800f482:	fba2 2303 	umull	r2, r3, r2, r3
 800f486:	08db      	lsrs	r3, r3, #3
 800f488:	3302      	adds	r3, #2
 800f48a:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800f48c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f48e:	6878      	ldr	r0, [r7, #4]
 800f490:	f7ff f93c 	bl	800e70c <dir_alloc>
 800f494:	4603      	mov	r3, r0
 800f496:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800f49a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d002      	beq.n	800f4a8 <dir_register+0x74>
 800f4a2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f4a6:	e165      	b.n	800f774 <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f4ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f4ae:	3b01      	subs	r3, #1
 800f4b0:	015b      	lsls	r3, r3, #5
 800f4b2:	1ad2      	subs	r2, r2, r3
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	689b      	ldr	r3, [r3, #8]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d072      	beq.n	800f5a6 <dir_register+0x172>
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	79db      	ldrb	r3, [r3, #7]
 800f4c4:	f003 0304 	and.w	r3, r3, #4
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d06c      	beq.n	800f5a6 <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f4d2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f4d4:	8949      	ldrh	r1, [r1, #10]
 800f4d6:	0249      	lsls	r1, r1, #9
 800f4d8:	2000      	movs	r0, #0
 800f4da:	460c      	mov	r4, r1
 800f4dc:	4605      	mov	r5, r0
 800f4de:	eb12 0804 	adds.w	r8, r2, r4
 800f4e2:	eb43 0905 	adc.w	r9, r3, r5
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f7fe fd58 	bl	800dfa4 <fill_first_frag>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800f4fa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d002      	beq.n	800f508 <dir_register+0xd4>
 800f502:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f506:	e135      	b.n	800f774 <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800f508:	6878      	ldr	r0, [r7, #4]
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f50e:	f04f 32ff 	mov.w	r2, #4294967295
 800f512:	4619      	mov	r1, r3
 800f514:	f7fe fd75 	bl	800e002 <fill_last_frag>
 800f518:	4603      	mov	r3, r0
 800f51a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800f51e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f522:	2b00      	cmp	r3, #0
 800f524:	d002      	beq.n	800f52c <dir_register+0xf8>
 800f526:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f52a:	e123      	b.n	800f774 <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800f52c:	687a      	ldr	r2, [r7, #4]
 800f52e:	f107 0308 	add.w	r3, r7, #8
 800f532:	4611      	mov	r1, r2
 800f534:	4618      	mov	r0, r3
 800f536:	f7ff fc95 	bl	800ee64 <load_obj_dir>
 800f53a:	4603      	mov	r3, r0
 800f53c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800f540:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f544:	2b00      	cmp	r3, #0
 800f546:	d002      	beq.n	800f54e <dir_register+0x11a>
 800f548:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f54c:	e112      	b.n	800f774 <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800f54e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f550:	691b      	ldr	r3, [r3, #16]
 800f552:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f55c:	4608      	mov	r0, r1
 800f55e:	f7fd febe 	bl	800d2de <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800f562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f564:	691b      	ldr	r3, [r3, #16]
 800f566:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f570:	4608      	mov	r0, r1
 800f572:	f7fd feb4 	bl	800d2de <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	79da      	ldrb	r2, [r3, #7]
 800f57a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f57c:	691b      	ldr	r3, [r3, #16]
 800f57e:	3321      	adds	r3, #33	; 0x21
 800f580:	f042 0201 	orr.w	r2, r2, #1
 800f584:	b2d2      	uxtb	r2, r2
 800f586:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800f588:	f107 0308 	add.w	r3, r7, #8
 800f58c:	4618      	mov	r0, r3
 800f58e:	f7ff fc9f 	bl	800eed0 <store_xdir>
 800f592:	4603      	mov	r3, r0
 800f594:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800f598:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d002      	beq.n	800f5a6 <dir_register+0x172>
 800f5a0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f5a4:	e0e6      	b.n	800f774 <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800f5a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5a8:	691a      	ldr	r2, [r3, #16]
 800f5aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5ac:	68db      	ldr	r3, [r3, #12]
 800f5ae:	4619      	mov	r1, r3
 800f5b0:	4610      	mov	r0, r2
 800f5b2:	f7ff fce8 	bl	800ef86 <create_xdir>
		return FR_OK;
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	e0dc      	b.n	800f774 <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800f5c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f5c4:	220c      	movs	r2, #12
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f7fd ff11 	bl	800d3ee <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f5cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f5d0:	f003 0301 	and.w	r3, r3, #1
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d033      	beq.n	800f640 <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2240      	movs	r2, #64	; 0x40
 800f5dc:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	67bb      	str	r3, [r7, #120]	; 0x78
 800f5e4:	e016      	b.n	800f614 <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800f5ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5ee:	68da      	ldr	r2, [r3, #12]
 800f5f0:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800f5f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f5f6:	f7ff fa61 	bl	800eabc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f5fa:	6878      	ldr	r0, [r7, #4]
 800f5fc:	f7ff fdf1 	bl	800f1e2 <dir_find>
 800f600:	4603      	mov	r3, r0
 800f602:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800f606:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d106      	bne.n	800f61c <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 800f60e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f610:	3301      	adds	r3, #1
 800f612:	67bb      	str	r3, [r7, #120]	; 0x78
 800f614:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f616:	2b63      	cmp	r3, #99	; 0x63
 800f618:	d9e5      	bls.n	800f5e6 <dir_register+0x1b2>
 800f61a:	e000      	b.n	800f61e <dir_register+0x1ea>
			if (res != FR_OK) break;
 800f61c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f61e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f620:	2b64      	cmp	r3, #100	; 0x64
 800f622:	d101      	bne.n	800f628 <dir_register+0x1f4>
 800f624:	2307      	movs	r3, #7
 800f626:	e0a5      	b.n	800f774 <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f628:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f62c:	2b04      	cmp	r3, #4
 800f62e:	d002      	beq.n	800f636 <dir_register+0x202>
 800f630:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f634:	e09e      	b.n	800f774 <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800f636:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800f640:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f644:	f003 0302 	and.w	r3, r3, #2
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d007      	beq.n	800f65c <dir_register+0x228>
 800f64c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f64e:	330c      	adds	r3, #12
 800f650:	4a2f      	ldr	r2, [pc, #188]	; (800f710 <dir_register+0x2dc>)
 800f652:	fba2 2303 	umull	r2, r3, r2, r3
 800f656:	089b      	lsrs	r3, r3, #2
 800f658:	3301      	adds	r3, #1
 800f65a:	e000      	b.n	800f65e <dir_register+0x22a>
 800f65c:	2301      	movs	r3, #1
 800f65e:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800f660:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f662:	6878      	ldr	r0, [r7, #4]
 800f664:	f7ff f852 	bl	800e70c <dir_alloc>
 800f668:	4603      	mov	r3, r0
 800f66a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800f66e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f672:	2b00      	cmp	r3, #0
 800f674:	d14f      	bne.n	800f716 <dir_register+0x2e2>
 800f676:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f678:	3b01      	subs	r3, #1
 800f67a:	673b      	str	r3, [r7, #112]	; 0x70
 800f67c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d049      	beq.n	800f716 <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f686:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f688:	015b      	lsls	r3, r3, #5
 800f68a:	1ad3      	subs	r3, r2, r3
 800f68c:	4619      	mov	r1, r3
 800f68e:	6878      	ldr	r0, [r7, #4]
 800f690:	f7fe fee1 	bl	800e456 <dir_sdi>
 800f694:	4603      	mov	r3, r0
 800f696:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800f69a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d139      	bne.n	800f716 <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	3340      	adds	r3, #64	; 0x40
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7ff fa96 	bl	800ebd8 <sum_sfn>
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6b6:	4619      	mov	r1, r3
 800f6b8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f6ba:	f7fe f8c7 	bl	800d84c <move_window>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800f6c4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d123      	bne.n	800f714 <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800f6cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f6ce:	68d8      	ldr	r0, [r3, #12]
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800f6d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f6d6:	b2da      	uxtb	r2, r3
 800f6d8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f6dc:	f7ff f986 	bl	800e9ec <put_lfn>
				fs->wflag = 1;
 800f6e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f6e2:	2201      	movs	r2, #1
 800f6e4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800f6e6:	2100      	movs	r1, #0
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f7fe ff3a 	bl	800e562 <dir_next>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800f6f4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d10c      	bne.n	800f716 <dir_register+0x2e2>
 800f6fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f6fe:	3b01      	subs	r3, #1
 800f700:	673b      	str	r3, [r7, #112]	; 0x70
 800f702:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f704:	2b00      	cmp	r3, #0
 800f706:	d1d4      	bne.n	800f6b2 <dir_register+0x27e>
 800f708:	e005      	b.n	800f716 <dir_register+0x2e2>
 800f70a:	bf00      	nop
 800f70c:	88888889 	.word	0x88888889
 800f710:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800f714:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f716:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d128      	bne.n	800f770 <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f722:	4619      	mov	r1, r3
 800f724:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f726:	f7fe f891 	bl	800d84c <move_window>
 800f72a:	4603      	mov	r3, r0
 800f72c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800f730:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f734:	2b00      	cmp	r3, #0
 800f736:	d11b      	bne.n	800f770 <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f73c:	2220      	movs	r2, #32
 800f73e:	2100      	movs	r1, #0
 800f740:	4618      	mov	r0, r3
 800f742:	f7fd fe75 	bl	800d430 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	3340      	adds	r3, #64	; 0x40
 800f74e:	220b      	movs	r2, #11
 800f750:	4619      	mov	r1, r3
 800f752:	f7fd fe4c 	bl	800d3ee <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f760:	330c      	adds	r3, #12
 800f762:	f002 0218 	and.w	r2, r2, #24
 800f766:	b2d2      	uxtb	r2, r2
 800f768:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800f76a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f76c:	2201      	movs	r2, #1
 800f76e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f770:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800f774:	4618      	mov	r0, r3
 800f776:	3780      	adds	r7, #128	; 0x80
 800f778:	46bd      	mov	sp, r7
 800f77a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800f77e:	bf00      	nop

0800f780 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b08a      	sub	sp, #40	; 0x28
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	613b      	str	r3, [r7, #16]
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	68db      	ldr	r3, [r3, #12]
 800f796:	60fb      	str	r3, [r7, #12]
 800f798:	2300      	movs	r3, #0
 800f79a:	617b      	str	r3, [r7, #20]
 800f79c:	697b      	ldr	r3, [r7, #20]
 800f79e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f7a0:	69bb      	ldr	r3, [r7, #24]
 800f7a2:	1c5a      	adds	r2, r3, #1
 800f7a4:	61ba      	str	r2, [r7, #24]
 800f7a6:	693a      	ldr	r2, [r7, #16]
 800f7a8:	4413      	add	r3, r2
 800f7aa:	781b      	ldrb	r3, [r3, #0]
 800f7ac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800f7ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7b0:	2b1f      	cmp	r3, #31
 800f7b2:	d940      	bls.n	800f836 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800f7b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7b6:	2b2f      	cmp	r3, #47	; 0x2f
 800f7b8:	d006      	beq.n	800f7c8 <create_name+0x48>
 800f7ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7bc:	2b5c      	cmp	r3, #92	; 0x5c
 800f7be:	d110      	bne.n	800f7e2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f7c0:	e002      	b.n	800f7c8 <create_name+0x48>
 800f7c2:	69bb      	ldr	r3, [r7, #24]
 800f7c4:	3301      	adds	r3, #1
 800f7c6:	61bb      	str	r3, [r7, #24]
 800f7c8:	693a      	ldr	r2, [r7, #16]
 800f7ca:	69bb      	ldr	r3, [r7, #24]
 800f7cc:	4413      	add	r3, r2
 800f7ce:	781b      	ldrb	r3, [r3, #0]
 800f7d0:	2b2f      	cmp	r3, #47	; 0x2f
 800f7d2:	d0f6      	beq.n	800f7c2 <create_name+0x42>
 800f7d4:	693a      	ldr	r2, [r7, #16]
 800f7d6:	69bb      	ldr	r3, [r7, #24]
 800f7d8:	4413      	add	r3, r2
 800f7da:	781b      	ldrb	r3, [r3, #0]
 800f7dc:	2b5c      	cmp	r3, #92	; 0x5c
 800f7de:	d0f0      	beq.n	800f7c2 <create_name+0x42>
			break;
 800f7e0:	e02a      	b.n	800f838 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	2bfe      	cmp	r3, #254	; 0xfe
 800f7e6:	d901      	bls.n	800f7ec <create_name+0x6c>
 800f7e8:	2306      	movs	r3, #6
 800f7ea:	e17d      	b.n	800fae8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f7ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7ee:	b2db      	uxtb	r3, r3
 800f7f0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f7f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7f4:	2101      	movs	r1, #1
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f002 f98c 	bl	8011b14 <ff_convert>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f800:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f802:	2b00      	cmp	r3, #0
 800f804:	d101      	bne.n	800f80a <create_name+0x8a>
 800f806:	2306      	movs	r3, #6
 800f808:	e16e      	b.n	800fae8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800f80a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f80c:	2b7f      	cmp	r3, #127	; 0x7f
 800f80e:	d809      	bhi.n	800f824 <create_name+0xa4>
 800f810:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f812:	4619      	mov	r1, r3
 800f814:	488d      	ldr	r0, [pc, #564]	; (800fa4c <create_name+0x2cc>)
 800f816:	f7fd fe4d 	bl	800d4b4 <chk_chr>
 800f81a:	4603      	mov	r3, r0
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d001      	beq.n	800f824 <create_name+0xa4>
 800f820:	2306      	movs	r3, #6
 800f822:	e161      	b.n	800fae8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800f824:	697b      	ldr	r3, [r7, #20]
 800f826:	1c5a      	adds	r2, r3, #1
 800f828:	617a      	str	r2, [r7, #20]
 800f82a:	005b      	lsls	r3, r3, #1
 800f82c:	68fa      	ldr	r2, [r7, #12]
 800f82e:	4413      	add	r3, r2
 800f830:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f832:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f834:	e7b4      	b.n	800f7a0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800f836:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f838:	693a      	ldr	r2, [r7, #16]
 800f83a:	69bb      	ldr	r3, [r7, #24]
 800f83c:	441a      	add	r2, r3
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f842:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f844:	2b1f      	cmp	r3, #31
 800f846:	d801      	bhi.n	800f84c <create_name+0xcc>
 800f848:	2304      	movs	r3, #4
 800f84a:	e000      	b.n	800f84e <create_name+0xce>
 800f84c:	2300      	movs	r3, #0
 800f84e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f852:	e011      	b.n	800f878 <create_name+0xf8>
		w = lfn[di - 1];
 800f854:	697b      	ldr	r3, [r7, #20]
 800f856:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f85a:	3b01      	subs	r3, #1
 800f85c:	005b      	lsls	r3, r3, #1
 800f85e:	68fa      	ldr	r2, [r7, #12]
 800f860:	4413      	add	r3, r2
 800f862:	881b      	ldrh	r3, [r3, #0]
 800f864:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800f866:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f868:	2b20      	cmp	r3, #32
 800f86a:	d002      	beq.n	800f872 <create_name+0xf2>
 800f86c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f86e:	2b2e      	cmp	r3, #46	; 0x2e
 800f870:	d106      	bne.n	800f880 <create_name+0x100>
		di--;
 800f872:	697b      	ldr	r3, [r7, #20]
 800f874:	3b01      	subs	r3, #1
 800f876:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d1ea      	bne.n	800f854 <create_name+0xd4>
 800f87e:	e000      	b.n	800f882 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800f880:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800f882:	697b      	ldr	r3, [r7, #20]
 800f884:	005b      	lsls	r3, r3, #1
 800f886:	68fa      	ldr	r2, [r7, #12]
 800f888:	4413      	add	r3, r2
 800f88a:	2200      	movs	r2, #0
 800f88c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f88e:	697b      	ldr	r3, [r7, #20]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d101      	bne.n	800f898 <create_name+0x118>
 800f894:	2306      	movs	r3, #6
 800f896:	e127      	b.n	800fae8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	3340      	adds	r3, #64	; 0x40
 800f89c:	220b      	movs	r2, #11
 800f89e:	2120      	movs	r1, #32
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f7fd fdc5 	bl	800d430 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	61bb      	str	r3, [r7, #24]
 800f8aa:	e002      	b.n	800f8b2 <create_name+0x132>
 800f8ac:	69bb      	ldr	r3, [r7, #24]
 800f8ae:	3301      	adds	r3, #1
 800f8b0:	61bb      	str	r3, [r7, #24]
 800f8b2:	69bb      	ldr	r3, [r7, #24]
 800f8b4:	005b      	lsls	r3, r3, #1
 800f8b6:	68fa      	ldr	r2, [r7, #12]
 800f8b8:	4413      	add	r3, r2
 800f8ba:	881b      	ldrh	r3, [r3, #0]
 800f8bc:	2b20      	cmp	r3, #32
 800f8be:	d0f5      	beq.n	800f8ac <create_name+0x12c>
 800f8c0:	69bb      	ldr	r3, [r7, #24]
 800f8c2:	005b      	lsls	r3, r3, #1
 800f8c4:	68fa      	ldr	r2, [r7, #12]
 800f8c6:	4413      	add	r3, r2
 800f8c8:	881b      	ldrh	r3, [r3, #0]
 800f8ca:	2b2e      	cmp	r3, #46	; 0x2e
 800f8cc:	d0ee      	beq.n	800f8ac <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f8ce:	69bb      	ldr	r3, [r7, #24]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d009      	beq.n	800f8e8 <create_name+0x168>
 800f8d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8d8:	f043 0303 	orr.w	r3, r3, #3
 800f8dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f8e0:	e002      	b.n	800f8e8 <create_name+0x168>
 800f8e2:	697b      	ldr	r3, [r7, #20]
 800f8e4:	3b01      	subs	r3, #1
 800f8e6:	617b      	str	r3, [r7, #20]
 800f8e8:	697b      	ldr	r3, [r7, #20]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d009      	beq.n	800f902 <create_name+0x182>
 800f8ee:	697b      	ldr	r3, [r7, #20]
 800f8f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f8f4:	3b01      	subs	r3, #1
 800f8f6:	005b      	lsls	r3, r3, #1
 800f8f8:	68fa      	ldr	r2, [r7, #12]
 800f8fa:	4413      	add	r3, r2
 800f8fc:	881b      	ldrh	r3, [r3, #0]
 800f8fe:	2b2e      	cmp	r3, #46	; 0x2e
 800f900:	d1ef      	bne.n	800f8e2 <create_name+0x162>

	i = b = 0; ni = 8;
 800f902:	2300      	movs	r3, #0
 800f904:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f908:	2300      	movs	r3, #0
 800f90a:	623b      	str	r3, [r7, #32]
 800f90c:	2308      	movs	r3, #8
 800f90e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f910:	69bb      	ldr	r3, [r7, #24]
 800f912:	1c5a      	adds	r2, r3, #1
 800f914:	61ba      	str	r2, [r7, #24]
 800f916:	005b      	lsls	r3, r3, #1
 800f918:	68fa      	ldr	r2, [r7, #12]
 800f91a:	4413      	add	r3, r2
 800f91c:	881b      	ldrh	r3, [r3, #0]
 800f91e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f920:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f922:	2b00      	cmp	r3, #0
 800f924:	f000 8090 	beq.w	800fa48 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f928:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f92a:	2b20      	cmp	r3, #32
 800f92c:	d006      	beq.n	800f93c <create_name+0x1bc>
 800f92e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f930:	2b2e      	cmp	r3, #46	; 0x2e
 800f932:	d10a      	bne.n	800f94a <create_name+0x1ca>
 800f934:	69ba      	ldr	r2, [r7, #24]
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	429a      	cmp	r2, r3
 800f93a:	d006      	beq.n	800f94a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800f93c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f940:	f043 0303 	orr.w	r3, r3, #3
 800f944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f948:	e07d      	b.n	800fa46 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f94a:	6a3a      	ldr	r2, [r7, #32]
 800f94c:	69fb      	ldr	r3, [r7, #28]
 800f94e:	429a      	cmp	r2, r3
 800f950:	d203      	bcs.n	800f95a <create_name+0x1da>
 800f952:	69ba      	ldr	r2, [r7, #24]
 800f954:	697b      	ldr	r3, [r7, #20]
 800f956:	429a      	cmp	r2, r3
 800f958:	d123      	bne.n	800f9a2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800f95a:	69fb      	ldr	r3, [r7, #28]
 800f95c:	2b0b      	cmp	r3, #11
 800f95e:	d106      	bne.n	800f96e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800f960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f964:	f043 0303 	orr.w	r3, r3, #3
 800f968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f96c:	e075      	b.n	800fa5a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f96e:	69ba      	ldr	r2, [r7, #24]
 800f970:	697b      	ldr	r3, [r7, #20]
 800f972:	429a      	cmp	r2, r3
 800f974:	d005      	beq.n	800f982 <create_name+0x202>
 800f976:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f97a:	f043 0303 	orr.w	r3, r3, #3
 800f97e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800f982:	69ba      	ldr	r2, [r7, #24]
 800f984:	697b      	ldr	r3, [r7, #20]
 800f986:	429a      	cmp	r2, r3
 800f988:	d866      	bhi.n	800fa58 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f98a:	697b      	ldr	r3, [r7, #20]
 800f98c:	61bb      	str	r3, [r7, #24]
 800f98e:	2308      	movs	r3, #8
 800f990:	623b      	str	r3, [r7, #32]
 800f992:	230b      	movs	r3, #11
 800f994:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f996:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f99a:	009b      	lsls	r3, r3, #2
 800f99c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f9a0:	e051      	b.n	800fa46 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f9a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9a4:	2b7f      	cmp	r3, #127	; 0x7f
 800f9a6:	d914      	bls.n	800f9d2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f9a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9aa:	2100      	movs	r1, #0
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f002 f8b1 	bl	8011b14 <ff_convert>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f9b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d004      	beq.n	800f9c6 <create_name+0x246>
 800f9bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9be:	3b80      	subs	r3, #128	; 0x80
 800f9c0:	4a23      	ldr	r2, [pc, #140]	; (800fa50 <create_name+0x2d0>)
 800f9c2:	5cd3      	ldrb	r3, [r2, r3]
 800f9c4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f9c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f9ca:	f043 0302 	orr.w	r3, r3, #2
 800f9ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f9d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d007      	beq.n	800f9e8 <create_name+0x268>
 800f9d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9da:	4619      	mov	r1, r3
 800f9dc:	481d      	ldr	r0, [pc, #116]	; (800fa54 <create_name+0x2d4>)
 800f9de:	f7fd fd69 	bl	800d4b4 <chk_chr>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d008      	beq.n	800f9fa <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f9e8:	235f      	movs	r3, #95	; 0x5f
 800f9ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f9ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f9f0:	f043 0303 	orr.w	r3, r3, #3
 800f9f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f9f8:	e01b      	b.n	800fa32 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f9fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9fc:	2b40      	cmp	r3, #64	; 0x40
 800f9fe:	d909      	bls.n	800fa14 <create_name+0x294>
 800fa00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa02:	2b5a      	cmp	r3, #90	; 0x5a
 800fa04:	d806      	bhi.n	800fa14 <create_name+0x294>
					b |= 2;
 800fa06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fa0a:	f043 0302 	orr.w	r3, r3, #2
 800fa0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fa12:	e00e      	b.n	800fa32 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800fa14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa16:	2b60      	cmp	r3, #96	; 0x60
 800fa18:	d90b      	bls.n	800fa32 <create_name+0x2b2>
 800fa1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa1c:	2b7a      	cmp	r3, #122	; 0x7a
 800fa1e:	d808      	bhi.n	800fa32 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800fa20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fa24:	f043 0301 	orr.w	r3, r3, #1
 800fa28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fa2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa2e:	3b20      	subs	r3, #32
 800fa30:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800fa32:	6a3b      	ldr	r3, [r7, #32]
 800fa34:	1c5a      	adds	r2, r3, #1
 800fa36:	623a      	str	r2, [r7, #32]
 800fa38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fa3a:	b2d1      	uxtb	r1, r2
 800fa3c:	687a      	ldr	r2, [r7, #4]
 800fa3e:	4413      	add	r3, r2
 800fa40:	460a      	mov	r2, r1
 800fa42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800fa46:	e763      	b.n	800f910 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800fa48:	bf00      	nop
 800fa4a:	e006      	b.n	800fa5a <create_name+0x2da>
 800fa4c:	0801768c 	.word	0x0801768c
 800fa50:	08017714 	.word	0x08017714
 800fa54:	08017698 	.word	0x08017698
			if (si > di) break;			/* No extension */
 800fa58:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fa60:	2be5      	cmp	r3, #229	; 0xe5
 800fa62:	d103      	bne.n	800fa6c <create_name+0x2ec>
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2205      	movs	r2, #5
 800fa68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800fa6c:	69fb      	ldr	r3, [r7, #28]
 800fa6e:	2b08      	cmp	r3, #8
 800fa70:	d104      	bne.n	800fa7c <create_name+0x2fc>
 800fa72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fa76:	009b      	lsls	r3, r3, #2
 800fa78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800fa7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fa80:	f003 030c 	and.w	r3, r3, #12
 800fa84:	2b0c      	cmp	r3, #12
 800fa86:	d005      	beq.n	800fa94 <create_name+0x314>
 800fa88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fa8c:	f003 0303 	and.w	r3, r3, #3
 800fa90:	2b03      	cmp	r3, #3
 800fa92:	d105      	bne.n	800faa0 <create_name+0x320>
 800fa94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa98:	f043 0302 	orr.w	r3, r3, #2
 800fa9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800faa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800faa4:	f003 0302 	and.w	r3, r3, #2
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d117      	bne.n	800fadc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800faac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fab0:	f003 0303 	and.w	r3, r3, #3
 800fab4:	2b01      	cmp	r3, #1
 800fab6:	d105      	bne.n	800fac4 <create_name+0x344>
 800fab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fabc:	f043 0310 	orr.w	r3, r3, #16
 800fac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800fac4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fac8:	f003 030c 	and.w	r3, r3, #12
 800facc:	2b04      	cmp	r3, #4
 800face:	d105      	bne.n	800fadc <create_name+0x35c>
 800fad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fad4:	f043 0308 	orr.w	r3, r3, #8
 800fad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fae2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800fae6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800fae8:	4618      	mov	r0, r3
 800faea:	3728      	adds	r7, #40	; 0x28
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}

0800faf0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b086      	sub	sp, #24
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
 800faf8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fafe:	693b      	ldr	r3, [r7, #16]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fb04:	e002      	b.n	800fb0c <follow_path+0x1c>
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	3301      	adds	r3, #1
 800fb0a:	603b      	str	r3, [r7, #0]
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	781b      	ldrb	r3, [r3, #0]
 800fb10:	2b2f      	cmp	r3, #47	; 0x2f
 800fb12:	d0f8      	beq.n	800fb06 <follow_path+0x16>
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	781b      	ldrb	r3, [r3, #0]
 800fb18:	2b5c      	cmp	r3, #92	; 0x5c
 800fb1a:	d0f4      	beq.n	800fb06 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800fb1c:	693b      	ldr	r3, [r7, #16]
 800fb1e:	2200      	movs	r2, #0
 800fb20:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800fb22:	693b      	ldr	r3, [r7, #16]
 800fb24:	2200      	movs	r2, #0
 800fb26:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	781b      	ldrb	r3, [r3, #0]
 800fb2c:	2b1f      	cmp	r3, #31
 800fb2e:	d80a      	bhi.n	800fb46 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	2280      	movs	r2, #128	; 0x80
 800fb34:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800fb38:	2100      	movs	r1, #0
 800fb3a:	6878      	ldr	r0, [r7, #4]
 800fb3c:	f7fe fc8b 	bl	800e456 <dir_sdi>
 800fb40:	4603      	mov	r3, r0
 800fb42:	75fb      	strb	r3, [r7, #23]
 800fb44:	e078      	b.n	800fc38 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fb46:	463b      	mov	r3, r7
 800fb48:	4619      	mov	r1, r3
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f7ff fe18 	bl	800f780 <create_name>
 800fb50:	4603      	mov	r3, r0
 800fb52:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fb54:	7dfb      	ldrb	r3, [r7, #23]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d169      	bne.n	800fc2e <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fb5a:	6878      	ldr	r0, [r7, #4]
 800fb5c:	f7ff fb41 	bl	800f1e2 <dir_find>
 800fb60:	4603      	mov	r3, r0
 800fb62:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800fb6a:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fb6c:	7dfb      	ldrb	r3, [r7, #23]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d00a      	beq.n	800fb88 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fb72:	7dfb      	ldrb	r3, [r7, #23]
 800fb74:	2b04      	cmp	r3, #4
 800fb76:	d15c      	bne.n	800fc32 <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fb78:	7afb      	ldrb	r3, [r7, #11]
 800fb7a:	f003 0304 	and.w	r3, r3, #4
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d157      	bne.n	800fc32 <follow_path+0x142>
 800fb82:	2305      	movs	r3, #5
 800fb84:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800fb86:	e054      	b.n	800fc32 <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fb88:	7afb      	ldrb	r3, [r7, #11]
 800fb8a:	f003 0304 	and.w	r3, r3, #4
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d151      	bne.n	800fc36 <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fb92:	693b      	ldr	r3, [r7, #16]
 800fb94:	799b      	ldrb	r3, [r3, #6]
 800fb96:	f003 0310 	and.w	r3, r3, #16
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d102      	bne.n	800fba4 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800fb9e:	2305      	movs	r3, #5
 800fba0:	75fb      	strb	r3, [r7, #23]
 800fba2:	e049      	b.n	800fc38 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	781b      	ldrb	r3, [r3, #0]
 800fba8:	2b04      	cmp	r3, #4
 800fbaa:	d130      	bne.n	800fc0e <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	689a      	ldr	r2, [r3, #8]
 800fbb0:	693b      	ldr	r3, [r7, #16]
 800fbb2:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800fbba:	4613      	mov	r3, r2
 800fbbc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800fbc0:	693a      	ldr	r2, [r7, #16]
 800fbc2:	79d2      	ldrb	r2, [r2, #7]
 800fbc4:	431a      	orrs	r2, r3
 800fbc6:	693b      	ldr	r3, [r7, #16]
 800fbc8:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fbce:	693b      	ldr	r3, [r7, #16]
 800fbd0:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	691b      	ldr	r3, [r3, #16]
 800fbd6:	3334      	adds	r3, #52	; 0x34
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f7fd fa3b 	bl	800d054 <ld_dword>
 800fbde:	4602      	mov	r2, r0
 800fbe0:	693b      	ldr	r3, [r7, #16]
 800fbe2:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	691b      	ldr	r3, [r3, #16]
 800fbe8:	3321      	adds	r3, #33	; 0x21
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	f003 0302 	and.w	r3, r3, #2
 800fbf0:	b2da      	uxtb	r2, r3
 800fbf2:	693b      	ldr	r3, [r7, #16]
 800fbf4:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	691b      	ldr	r3, [r3, #16]
 800fbfa:	3338      	adds	r3, #56	; 0x38
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f7fd fa4c 	bl	800d09a <ld_qword>
 800fc02:	4602      	mov	r2, r0
 800fc04:	460b      	mov	r3, r1
 800fc06:	6939      	ldr	r1, [r7, #16]
 800fc08:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800fc0c:	e79b      	b.n	800fb46 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc1c:	4413      	add	r3, r2
 800fc1e:	4619      	mov	r1, r3
 800fc20:	68f8      	ldr	r0, [r7, #12]
 800fc22:	f7fe fdcf 	bl	800e7c4 <ld_clust>
 800fc26:	4602      	mov	r2, r0
 800fc28:	693b      	ldr	r3, [r7, #16]
 800fc2a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fc2c:	e78b      	b.n	800fb46 <follow_path+0x56>
			if (res != FR_OK) break;
 800fc2e:	bf00      	nop
 800fc30:	e002      	b.n	800fc38 <follow_path+0x148>
				break;
 800fc32:	bf00      	nop
 800fc34:	e000      	b.n	800fc38 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fc36:	bf00      	nop
			}
		}
	}

	return res;
 800fc38:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3718      	adds	r7, #24
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}

0800fc42 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fc42:	b480      	push	{r7}
 800fc44:	b087      	sub	sp, #28
 800fc46:	af00      	add	r7, sp, #0
 800fc48:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fc4a:	f04f 33ff 	mov.w	r3, #4294967295
 800fc4e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d031      	beq.n	800fcbc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	617b      	str	r3, [r7, #20]
 800fc5e:	e002      	b.n	800fc66 <get_ldnumber+0x24>
 800fc60:	697b      	ldr	r3, [r7, #20]
 800fc62:	3301      	adds	r3, #1
 800fc64:	617b      	str	r3, [r7, #20]
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	781b      	ldrb	r3, [r3, #0]
 800fc6a:	2b1f      	cmp	r3, #31
 800fc6c:	d903      	bls.n	800fc76 <get_ldnumber+0x34>
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	781b      	ldrb	r3, [r3, #0]
 800fc72:	2b3a      	cmp	r3, #58	; 0x3a
 800fc74:	d1f4      	bne.n	800fc60 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	781b      	ldrb	r3, [r3, #0]
 800fc7a:	2b3a      	cmp	r3, #58	; 0x3a
 800fc7c:	d11c      	bne.n	800fcb8 <get_ldnumber+0x76>
			tp = *path;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	1c5a      	adds	r2, r3, #1
 800fc88:	60fa      	str	r2, [r7, #12]
 800fc8a:	781b      	ldrb	r3, [r3, #0]
 800fc8c:	3b30      	subs	r3, #48	; 0x30
 800fc8e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fc90:	68bb      	ldr	r3, [r7, #8]
 800fc92:	2b09      	cmp	r3, #9
 800fc94:	d80e      	bhi.n	800fcb4 <get_ldnumber+0x72>
 800fc96:	68fa      	ldr	r2, [r7, #12]
 800fc98:	697b      	ldr	r3, [r7, #20]
 800fc9a:	429a      	cmp	r2, r3
 800fc9c:	d10a      	bne.n	800fcb4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	2b03      	cmp	r3, #3
 800fca2:	d807      	bhi.n	800fcb4 <get_ldnumber+0x72>
					vol = (int)i;
 800fca4:	68bb      	ldr	r3, [r7, #8]
 800fca6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fca8:	697b      	ldr	r3, [r7, #20]
 800fcaa:	3301      	adds	r3, #1
 800fcac:	617b      	str	r3, [r7, #20]
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	697a      	ldr	r2, [r7, #20]
 800fcb2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fcb4:	693b      	ldr	r3, [r7, #16]
 800fcb6:	e002      	b.n	800fcbe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fcb8:	2300      	movs	r3, #0
 800fcba:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fcbc:	693b      	ldr	r3, [r7, #16]
}
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	371c      	adds	r7, #28
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc8:	4770      	bx	lr
	...

0800fccc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b082      	sub	sp, #8
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
 800fcd4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	2200      	movs	r2, #0
 800fcda:	70da      	strb	r2, [r3, #3]
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	f04f 32ff 	mov.w	r2, #4294967295
 800fce2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fce4:	6839      	ldr	r1, [r7, #0]
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f7fd fdb0 	bl	800d84c <move_window>
 800fcec:	4603      	mov	r3, r0
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d001      	beq.n	800fcf6 <check_fs+0x2a>
 800fcf2:	2304      	movs	r3, #4
 800fcf4:	e044      	b.n	800fd80 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	3338      	adds	r3, #56	; 0x38
 800fcfa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f7fd f990 	bl	800d024 <ld_word>
 800fd04:	4603      	mov	r3, r0
 800fd06:	461a      	mov	r2, r3
 800fd08:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fd0c:	429a      	cmp	r2, r3
 800fd0e:	d001      	beq.n	800fd14 <check_fs+0x48>
 800fd10:	2303      	movs	r3, #3
 800fd12:	e035      	b.n	800fd80 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fd1a:	2be9      	cmp	r3, #233	; 0xe9
 800fd1c:	d009      	beq.n	800fd32 <check_fs+0x66>
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fd24:	2beb      	cmp	r3, #235	; 0xeb
 800fd26:	d11e      	bne.n	800fd66 <check_fs+0x9a>
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800fd2e:	2b90      	cmp	r3, #144	; 0x90
 800fd30:	d119      	bne.n	800fd66 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	3338      	adds	r3, #56	; 0x38
 800fd36:	3336      	adds	r3, #54	; 0x36
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f7fd f98b 	bl	800d054 <ld_dword>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fd44:	4a10      	ldr	r2, [pc, #64]	; (800fd88 <check_fs+0xbc>)
 800fd46:	4293      	cmp	r3, r2
 800fd48:	d101      	bne.n	800fd4e <check_fs+0x82>
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	e018      	b.n	800fd80 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	3338      	adds	r3, #56	; 0x38
 800fd52:	3352      	adds	r3, #82	; 0x52
 800fd54:	4618      	mov	r0, r3
 800fd56:	f7fd f97d 	bl	800d054 <ld_dword>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	4a0b      	ldr	r2, [pc, #44]	; (800fd8c <check_fs+0xc0>)
 800fd5e:	4293      	cmp	r3, r2
 800fd60:	d101      	bne.n	800fd66 <check_fs+0x9a>
 800fd62:	2300      	movs	r3, #0
 800fd64:	e00c      	b.n	800fd80 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	3338      	adds	r3, #56	; 0x38
 800fd6a:	220b      	movs	r2, #11
 800fd6c:	4908      	ldr	r1, [pc, #32]	; (800fd90 <check_fs+0xc4>)
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7fd fb79 	bl	800d466 <mem_cmp>
 800fd74:	4603      	mov	r3, r0
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d101      	bne.n	800fd7e <check_fs+0xb2>
 800fd7a:	2301      	movs	r3, #1
 800fd7c:	e000      	b.n	800fd80 <check_fs+0xb4>
#endif
	return 2;
 800fd7e:	2302      	movs	r3, #2
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	3708      	adds	r7, #8
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}
 800fd88:	00544146 	.word	0x00544146
 800fd8c:	33544146 	.word	0x33544146
 800fd90:	080176a0 	.word	0x080176a0

0800fd94 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fd94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fd98:	b09c      	sub	sp, #112	; 0x70
 800fd9a:	af00      	add	r7, sp, #0
 800fd9c:	61f8      	str	r0, [r7, #28]
 800fd9e:	61b9      	str	r1, [r7, #24]
 800fda0:	4613      	mov	r3, r2
 800fda2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fda4:	69bb      	ldr	r3, [r7, #24]
 800fda6:	2200      	movs	r2, #0
 800fda8:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fdaa:	69f8      	ldr	r0, [r7, #28]
 800fdac:	f7ff ff49 	bl	800fc42 <get_ldnumber>
 800fdb0:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800fdb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	da01      	bge.n	800fdbc <find_volume+0x28>
 800fdb8:	230b      	movs	r3, #11
 800fdba:	e337      	b.n	801042c <find_volume+0x698>


	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fdbc:	4a99      	ldr	r2, [pc, #612]	; (8010024 <find_volume+0x290>)
 800fdbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fdc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdc4:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fdc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d101      	bne.n	800fdd0 <find_volume+0x3c>
 800fdcc:	230c      	movs	r3, #12
 800fdce:	e32d      	b.n	801042c <find_volume+0x698>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fdd0:	69bb      	ldr	r3, [r7, #24]
 800fdd2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fdd4:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fdd6:	7dfb      	ldrb	r3, [r7, #23]
 800fdd8:	f023 0301 	bic.w	r3, r3, #1
 800fddc:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fdde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fde0:	781b      	ldrb	r3, [r3, #0]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d01a      	beq.n	800fe1c <find_volume+0x88>

		stat = disk_status(fs->drv);
 800fde6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fde8:	785b      	ldrb	r3, [r3, #1]
 800fdea:	4618      	mov	r0, r3
 800fdec:	f7fd f87c 	bl	800cee8 <disk_status>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fdf6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fdfa:	f003 0301 	and.w	r3, r3, #1
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d10c      	bne.n	800fe1c <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fe02:	7dfb      	ldrb	r3, [r7, #23]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d007      	beq.n	800fe18 <find_volume+0x84>
 800fe08:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fe0c:	f003 0304 	and.w	r3, r3, #4
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d001      	beq.n	800fe18 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800fe14:	230a      	movs	r3, #10
 800fe16:	e309      	b.n	801042c <find_volume+0x698>
			}
			return FR_OK;				/* The file system object is valid */
 800fe18:	2300      	movs	r3, #0
 800fe1a:	e307      	b.n	801042c <find_volume+0x698>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fe1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe1e:	2200      	movs	r2, #0
 800fe20:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fe22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe24:	b2da      	uxtb	r2, r3
 800fe26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe28:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fe2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe2c:	785b      	ldrb	r3, [r3, #1]
 800fe2e:	4618      	mov	r0, r3
 800fe30:	f7fd f874 	bl	800cf1c <disk_initialize>
 800fe34:	4603      	mov	r3, r0
 800fe36:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fe3a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fe3e:	f003 0301 	and.w	r3, r3, #1
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d001      	beq.n	800fe4a <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fe46:	2303      	movs	r3, #3
 800fe48:	e2f0      	b.n	801042c <find_volume+0x698>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fe4a:	7dfb      	ldrb	r3, [r7, #23]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d007      	beq.n	800fe60 <find_volume+0xcc>
 800fe50:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fe54:	f003 0304 	and.w	r3, r3, #4
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d001      	beq.n	800fe60 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800fe5c:	230a      	movs	r3, #10
 800fe5e:	e2e5      	b.n	801042c <find_volume+0x698>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fe60:	2300      	movs	r3, #0
 800fe62:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fe64:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fe66:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fe68:	f7ff ff30 	bl	800fccc <check_fs>
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fe72:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800fe76:	2b02      	cmp	r3, #2
 800fe78:	d14d      	bne.n	800ff16 <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	65bb      	str	r3, [r7, #88]	; 0x58
 800fe7e:	e020      	b.n	800fec2 <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fe80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe82:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800fe86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fe88:	011b      	lsls	r3, r3, #4
 800fe8a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fe8e:	4413      	add	r3, r2
 800fe90:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fe92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe94:	3304      	adds	r3, #4
 800fe96:	781b      	ldrb	r3, [r3, #0]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d006      	beq.n	800feaa <find_volume+0x116>
 800fe9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe9e:	3308      	adds	r3, #8
 800fea0:	4618      	mov	r0, r3
 800fea2:	f7fd f8d7 	bl	800d054 <ld_dword>
 800fea6:	4602      	mov	r2, r0
 800fea8:	e000      	b.n	800feac <find_volume+0x118>
 800feaa:	2200      	movs	r2, #0
 800feac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800feae:	009b      	lsls	r3, r3, #2
 800feb0:	3360      	adds	r3, #96	; 0x60
 800feb2:	f107 0110 	add.w	r1, r7, #16
 800feb6:	440b      	add	r3, r1
 800feb8:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800febc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800febe:	3301      	adds	r3, #1
 800fec0:	65bb      	str	r3, [r7, #88]	; 0x58
 800fec2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fec4:	2b03      	cmp	r3, #3
 800fec6:	d9db      	bls.n	800fe80 <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fec8:	2300      	movs	r3, #0
 800feca:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 800fecc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d002      	beq.n	800fed8 <find_volume+0x144>
 800fed2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fed4:	3b01      	subs	r3, #1
 800fed6:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fed8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800feda:	009b      	lsls	r3, r3, #2
 800fedc:	3360      	adds	r3, #96	; 0x60
 800fede:	f107 0210 	add.w	r2, r7, #16
 800fee2:	4413      	add	r3, r2
 800fee4:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800fee8:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800feea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800feec:	2b00      	cmp	r3, #0
 800feee:	d005      	beq.n	800fefc <find_volume+0x168>
 800fef0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fef2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fef4:	f7ff feea 	bl	800fccc <check_fs>
 800fef8:	4603      	mov	r3, r0
 800fefa:	e000      	b.n	800fefe <find_volume+0x16a>
 800fefc:	2303      	movs	r3, #3
 800fefe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ff02:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ff06:	2b01      	cmp	r3, #1
 800ff08:	d905      	bls.n	800ff16 <find_volume+0x182>
 800ff0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff0c:	3301      	adds	r3, #1
 800ff0e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ff10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff12:	2b03      	cmp	r3, #3
 800ff14:	d9e0      	bls.n	800fed8 <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ff16:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ff1a:	2b04      	cmp	r3, #4
 800ff1c:	d101      	bne.n	800ff22 <find_volume+0x18e>
 800ff1e:	2301      	movs	r3, #1
 800ff20:	e284      	b.n	801042c <find_volume+0x698>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ff22:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ff26:	2b01      	cmp	r3, #1
 800ff28:	d901      	bls.n	800ff2e <find_volume+0x19a>
 800ff2a:	230d      	movs	r3, #13
 800ff2c:	e27e      	b.n	801042c <find_volume+0x698>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800ff2e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ff32:	2b01      	cmp	r3, #1
 800ff34:	f040 80fa 	bne.w	801012c <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800ff38:	230b      	movs	r3, #11
 800ff3a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ff3c:	e002      	b.n	800ff44 <find_volume+0x1b0>
 800ff3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff40:	3301      	adds	r3, #1
 800ff42:	65bb      	str	r3, [r7, #88]	; 0x58
 800ff44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff46:	2b3f      	cmp	r3, #63	; 0x3f
 800ff48:	d806      	bhi.n	800ff58 <find_volume+0x1c4>
 800ff4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ff4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff4e:	4413      	add	r3, r2
 800ff50:	3338      	adds	r3, #56	; 0x38
 800ff52:	781b      	ldrb	r3, [r3, #0]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d0f2      	beq.n	800ff3e <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800ff58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff5a:	2b3f      	cmp	r3, #63	; 0x3f
 800ff5c:	d801      	bhi.n	800ff62 <find_volume+0x1ce>
 800ff5e:	230d      	movs	r3, #13
 800ff60:	e264      	b.n	801042c <find_volume+0x698>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800ff62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff64:	3338      	adds	r3, #56	; 0x38
 800ff66:	3368      	adds	r3, #104	; 0x68
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f7fd f85b 	bl	800d024 <ld_word>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ff74:	d001      	beq.n	800ff7a <find_volume+0x1e6>
 800ff76:	230d      	movs	r3, #13
 800ff78:	e258      	b.n	801042c <find_volume+0x698>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800ff7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff7c:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800ff80:	2b09      	cmp	r3, #9
 800ff82:	d001      	beq.n	800ff88 <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 800ff84:	230d      	movs	r3, #13
 800ff86:	e251      	b.n	801042c <find_volume+0x698>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800ff88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff8a:	3338      	adds	r3, #56	; 0x38
 800ff8c:	3348      	adds	r3, #72	; 0x48
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f7fd f883 	bl	800d09a <ld_qword>
 800ff94:	4602      	mov	r2, r0
 800ff96:	460b      	mov	r3, r1
 800ff98:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ff9a:	2000      	movs	r0, #0
 800ff9c:	60b9      	str	r1, [r7, #8]
 800ff9e:	60f8      	str	r0, [r7, #12]
 800ffa0:	68b9      	ldr	r1, [r7, #8]
 800ffa2:	1851      	adds	r1, r2, r1
 800ffa4:	6039      	str	r1, [r7, #0]
 800ffa6:	68f9      	ldr	r1, [r7, #12]
 800ffa8:	eb43 0101 	adc.w	r1, r3, r1
 800ffac:	6079      	str	r1, [r7, #4]
 800ffae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ffb2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800ffb6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ffba:	2b01      	cmp	r3, #1
 800ffbc:	d301      	bcc.n	800ffc2 <find_volume+0x22e>
 800ffbe:	230d      	movs	r3, #13
 800ffc0:	e234      	b.n	801042c <find_volume+0x698>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800ffc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffc4:	3338      	adds	r3, #56	; 0x38
 800ffc6:	3354      	adds	r3, #84	; 0x54
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f7fd f843 	bl	800d054 <ld_dword>
 800ffce:	4602      	mov	r2, r0
 800ffd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffd2:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800ffd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffd6:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 800ffda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffdc:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800ffde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffe0:	789b      	ldrb	r3, [r3, #2]
 800ffe2:	2b01      	cmp	r3, #1
 800ffe4:	d001      	beq.n	800ffea <find_volume+0x256>
 800ffe6:	230d      	movs	r3, #13
 800ffe8:	e220      	b.n	801042c <find_volume+0x698>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800ffea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffec:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800fff0:	461a      	mov	r2, r3
 800fff2:	2301      	movs	r3, #1
 800fff4:	4093      	lsls	r3, r2
 800fff6:	b29a      	uxth	r2, r3
 800fff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fffa:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800fffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fffe:	895b      	ldrh	r3, [r3, #10]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d101      	bne.n	8010008 <find_volume+0x274>
 8010004:	230d      	movs	r3, #13
 8010006:	e211      	b.n	801042c <find_volume+0x698>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8010008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801000a:	3338      	adds	r3, #56	; 0x38
 801000c:	335c      	adds	r3, #92	; 0x5c
 801000e:	4618      	mov	r0, r3
 8010010:	f7fd f820 	bl	800d054 <ld_dword>
 8010014:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8010016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010018:	4a03      	ldr	r2, [pc, #12]	; (8010028 <find_volume+0x294>)
 801001a:	4293      	cmp	r3, r2
 801001c:	d906      	bls.n	801002c <find_volume+0x298>
 801001e:	230d      	movs	r3, #13
 8010020:	e204      	b.n	801042c <find_volume+0x698>
 8010022:	bf00      	nop
 8010024:	20001e58 	.word	0x20001e58
 8010028:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 801002c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801002e:	1c9a      	adds	r2, r3, #2
 8010030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010032:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 8010034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010036:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010038:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 801003a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801003c:	3338      	adds	r3, #56	; 0x38
 801003e:	3358      	adds	r3, #88	; 0x58
 8010040:	4618      	mov	r0, r3
 8010042:	f7fd f807 	bl	800d054 <ld_dword>
 8010046:	4602      	mov	r2, r0
 8010048:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801004a:	441a      	add	r2, r3
 801004c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801004e:	631a      	str	r2, [r3, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8010050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010052:	3338      	adds	r3, #56	; 0x38
 8010054:	3350      	adds	r3, #80	; 0x50
 8010056:	4618      	mov	r0, r3
 8010058:	f7fc fffc 	bl	800d054 <ld_dword>
 801005c:	4602      	mov	r2, r0
 801005e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010060:	441a      	add	r2, r3
 8010062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010064:	629a      	str	r2, [r3, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8010066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801006a:	2200      	movs	r2, #0
 801006c:	469a      	mov	sl, r3
 801006e:	4693      	mov	fp, r2
 8010070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010072:	895b      	ldrh	r3, [r3, #10]
 8010074:	461a      	mov	r2, r3
 8010076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010078:	fb02 f303 	mul.w	r3, r2, r3
 801007c:	2200      	movs	r2, #0
 801007e:	4698      	mov	r8, r3
 8010080:	4691      	mov	r9, r2
 8010082:	eb1a 0408 	adds.w	r4, sl, r8
 8010086:	eb4b 0509 	adc.w	r5, fp, r9
 801008a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801008e:	42a2      	cmp	r2, r4
 8010090:	41ab      	sbcs	r3, r5
 8010092:	d201      	bcs.n	8010098 <find_volume+0x304>
 8010094:	230d      	movs	r3, #13
 8010096:	e1c9      	b.n	801042c <find_volume+0x698>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8010098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801009a:	3338      	adds	r3, #56	; 0x38
 801009c:	3360      	adds	r3, #96	; 0x60
 801009e:	4618      	mov	r0, r3
 80100a0:	f7fc ffd8 	bl	800d054 <ld_dword>
 80100a4:	4602      	mov	r2, r0
 80100a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100a8:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 80100aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100ae:	4619      	mov	r1, r3
 80100b0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80100b2:	f7fd fc67 	bl	800d984 <clust2sect>
 80100b6:	4603      	mov	r3, r0
 80100b8:	4619      	mov	r1, r3
 80100ba:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80100bc:	f7fd fbc6 	bl	800d84c <move_window>
 80100c0:	4603      	mov	r3, r0
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d001      	beq.n	80100ca <find_volume+0x336>
 80100c6:	2301      	movs	r3, #1
 80100c8:	e1b0      	b.n	801042c <find_volume+0x698>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 80100ca:	2300      	movs	r3, #0
 80100cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80100ce:	e015      	b.n	80100fc <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 80100d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80100d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100d4:	4413      	add	r3, r2
 80100d6:	3338      	adds	r3, #56	; 0x38
 80100d8:	781b      	ldrb	r3, [r3, #0]
 80100da:	2b81      	cmp	r3, #129	; 0x81
 80100dc:	d10b      	bne.n	80100f6 <find_volume+0x362>
 80100de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100e0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80100e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100e6:	3314      	adds	r3, #20
 80100e8:	4413      	add	r3, r2
 80100ea:	4618      	mov	r0, r3
 80100ec:	f7fc ffb2 	bl	800d054 <ld_dword>
 80100f0:	4603      	mov	r3, r0
 80100f2:	2b02      	cmp	r3, #2
 80100f4:	d007      	beq.n	8010106 <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 80100f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100f8:	3320      	adds	r3, #32
 80100fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80100fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010102:	d3e5      	bcc.n	80100d0 <find_volume+0x33c>
 8010104:	e000      	b.n	8010108 <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8010106:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8010108:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801010a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801010e:	d101      	bne.n	8010114 <find_volume+0x380>
 8010110:	230d      	movs	r3, #13
 8010112:	e18b      	b.n	801042c <find_volume+0x698>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010116:	f04f 32ff 	mov.w	r2, #4294967295
 801011a:	619a      	str	r2, [r3, #24]
 801011c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801011e:	699a      	ldr	r2, [r3, #24]
 8010120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010122:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8010124:	2304      	movs	r3, #4
 8010126:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 801012a:	e167      	b.n	80103fc <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801012c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801012e:	3338      	adds	r3, #56	; 0x38
 8010130:	330b      	adds	r3, #11
 8010132:	4618      	mov	r0, r3
 8010134:	f7fc ff76 	bl	800d024 <ld_word>
 8010138:	4603      	mov	r3, r0
 801013a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801013e:	d001      	beq.n	8010144 <find_volume+0x3b0>
 8010140:	230d      	movs	r3, #13
 8010142:	e173      	b.n	801042c <find_volume+0x698>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010146:	3338      	adds	r3, #56	; 0x38
 8010148:	3316      	adds	r3, #22
 801014a:	4618      	mov	r0, r3
 801014c:	f7fc ff6a 	bl	800d024 <ld_word>
 8010150:	4603      	mov	r3, r0
 8010152:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010154:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010156:	2b00      	cmp	r3, #0
 8010158:	d106      	bne.n	8010168 <find_volume+0x3d4>
 801015a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801015c:	3338      	adds	r3, #56	; 0x38
 801015e:	3324      	adds	r3, #36	; 0x24
 8010160:	4618      	mov	r0, r3
 8010162:	f7fc ff77 	bl	800d054 <ld_dword>
 8010166:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 8010168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801016a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801016c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801016e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010170:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010174:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010176:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801017a:	789b      	ldrb	r3, [r3, #2]
 801017c:	2b01      	cmp	r3, #1
 801017e:	d005      	beq.n	801018c <find_volume+0x3f8>
 8010180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010182:	789b      	ldrb	r3, [r3, #2]
 8010184:	2b02      	cmp	r3, #2
 8010186:	d001      	beq.n	801018c <find_volume+0x3f8>
 8010188:	230d      	movs	r3, #13
 801018a:	e14f      	b.n	801042c <find_volume+0x698>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801018c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801018e:	789b      	ldrb	r3, [r3, #2]
 8010190:	461a      	mov	r2, r3
 8010192:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010194:	fb02 f303 	mul.w	r3, r2, r3
 8010198:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801019a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801019c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80101a0:	b29a      	uxth	r2, r3
 80101a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101a4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80101a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101a8:	895b      	ldrh	r3, [r3, #10]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d008      	beq.n	80101c0 <find_volume+0x42c>
 80101ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101b0:	895b      	ldrh	r3, [r3, #10]
 80101b2:	461a      	mov	r2, r3
 80101b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101b6:	895b      	ldrh	r3, [r3, #10]
 80101b8:	3b01      	subs	r3, #1
 80101ba:	4013      	ands	r3, r2
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d001      	beq.n	80101c4 <find_volume+0x430>
 80101c0:	230d      	movs	r3, #13
 80101c2:	e133      	b.n	801042c <find_volume+0x698>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80101c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101c6:	3338      	adds	r3, #56	; 0x38
 80101c8:	3311      	adds	r3, #17
 80101ca:	4618      	mov	r0, r3
 80101cc:	f7fc ff2a 	bl	800d024 <ld_word>
 80101d0:	4603      	mov	r3, r0
 80101d2:	461a      	mov	r2, r3
 80101d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101d6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80101d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101da:	891b      	ldrh	r3, [r3, #8]
 80101dc:	f003 030f 	and.w	r3, r3, #15
 80101e0:	b29b      	uxth	r3, r3
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d001      	beq.n	80101ea <find_volume+0x456>
 80101e6:	230d      	movs	r3, #13
 80101e8:	e120      	b.n	801042c <find_volume+0x698>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80101ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101ec:	3338      	adds	r3, #56	; 0x38
 80101ee:	3313      	adds	r3, #19
 80101f0:	4618      	mov	r0, r3
 80101f2:	f7fc ff17 	bl	800d024 <ld_word>
 80101f6:	4603      	mov	r3, r0
 80101f8:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80101fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d106      	bne.n	801020e <find_volume+0x47a>
 8010200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010202:	3338      	adds	r3, #56	; 0x38
 8010204:	3320      	adds	r3, #32
 8010206:	4618      	mov	r0, r3
 8010208:	f7fc ff24 	bl	800d054 <ld_dword>
 801020c:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801020e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010210:	3338      	adds	r3, #56	; 0x38
 8010212:	330e      	adds	r3, #14
 8010214:	4618      	mov	r0, r3
 8010216:	f7fc ff05 	bl	800d024 <ld_word>
 801021a:	4603      	mov	r3, r0
 801021c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010220:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010224:	2b00      	cmp	r3, #0
 8010226:	d101      	bne.n	801022c <find_volume+0x498>
 8010228:	230d      	movs	r3, #13
 801022a:	e0ff      	b.n	801042c <find_volume+0x698>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801022c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8010230:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010232:	4413      	add	r3, r2
 8010234:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010236:	8912      	ldrh	r2, [r2, #8]
 8010238:	0912      	lsrs	r2, r2, #4
 801023a:	b292      	uxth	r2, r2
 801023c:	4413      	add	r3, r2
 801023e:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010240:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010244:	429a      	cmp	r2, r3
 8010246:	d201      	bcs.n	801024c <find_volume+0x4b8>
 8010248:	230d      	movs	r3, #13
 801024a:	e0ef      	b.n	801042c <find_volume+0x698>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801024c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801024e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010250:	1ad3      	subs	r3, r2, r3
 8010252:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010254:	8952      	ldrh	r2, [r2, #10]
 8010256:	fbb3 f3f2 	udiv	r3, r3, r2
 801025a:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801025c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801025e:	2b00      	cmp	r3, #0
 8010260:	d101      	bne.n	8010266 <find_volume+0x4d2>
 8010262:	230d      	movs	r3, #13
 8010264:	e0e2      	b.n	801042c <find_volume+0x698>
		fmt = FS_FAT32;
 8010266:	2303      	movs	r3, #3
 8010268:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801026c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801026e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010272:	4293      	cmp	r3, r2
 8010274:	d802      	bhi.n	801027c <find_volume+0x4e8>
 8010276:	2302      	movs	r3, #2
 8010278:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801027c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801027e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010282:	4293      	cmp	r3, r2
 8010284:	d802      	bhi.n	801028c <find_volume+0x4f8>
 8010286:	2301      	movs	r3, #1
 8010288:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801028c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801028e:	1c9a      	adds	r2, r3, #2
 8010290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010292:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8010294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010296:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010298:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801029a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801029e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80102a0:	441a      	add	r2, r3
 80102a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102a4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80102a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80102a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102aa:	441a      	add	r2, r3
 80102ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102ae:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80102b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80102b4:	2b03      	cmp	r3, #3
 80102b6:	d11e      	bne.n	80102f6 <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80102b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102ba:	3338      	adds	r3, #56	; 0x38
 80102bc:	332a      	adds	r3, #42	; 0x2a
 80102be:	4618      	mov	r0, r3
 80102c0:	f7fc feb0 	bl	800d024 <ld_word>
 80102c4:	4603      	mov	r3, r0
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d001      	beq.n	80102ce <find_volume+0x53a>
 80102ca:	230d      	movs	r3, #13
 80102cc:	e0ae      	b.n	801042c <find_volume+0x698>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80102ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102d0:	891b      	ldrh	r3, [r3, #8]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d001      	beq.n	80102da <find_volume+0x546>
 80102d6:	230d      	movs	r3, #13
 80102d8:	e0a8      	b.n	801042c <find_volume+0x698>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80102da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102dc:	3338      	adds	r3, #56	; 0x38
 80102de:	332c      	adds	r3, #44	; 0x2c
 80102e0:	4618      	mov	r0, r3
 80102e2:	f7fc feb7 	bl	800d054 <ld_dword>
 80102e6:	4602      	mov	r2, r0
 80102e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102ea:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80102ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102ee:	69db      	ldr	r3, [r3, #28]
 80102f0:	009b      	lsls	r3, r3, #2
 80102f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80102f4:	e01f      	b.n	8010336 <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80102f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102f8:	891b      	ldrh	r3, [r3, #8]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d101      	bne.n	8010302 <find_volume+0x56e>
 80102fe:	230d      	movs	r3, #13
 8010300:	e094      	b.n	801042c <find_volume+0x698>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010306:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010308:	441a      	add	r2, r3
 801030a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801030c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801030e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010312:	2b02      	cmp	r3, #2
 8010314:	d103      	bne.n	801031e <find_volume+0x58a>
 8010316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010318:	69db      	ldr	r3, [r3, #28]
 801031a:	005b      	lsls	r3, r3, #1
 801031c:	e00a      	b.n	8010334 <find_volume+0x5a0>
 801031e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010320:	69da      	ldr	r2, [r3, #28]
 8010322:	4613      	mov	r3, r2
 8010324:	005b      	lsls	r3, r3, #1
 8010326:	4413      	add	r3, r2
 8010328:	085a      	lsrs	r2, r3, #1
 801032a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801032c:	69db      	ldr	r3, [r3, #28]
 801032e:	f003 0301 	and.w	r3, r3, #1
 8010332:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010334:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010338:	6a1a      	ldr	r2, [r3, #32]
 801033a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801033c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8010340:	0a5b      	lsrs	r3, r3, #9
 8010342:	429a      	cmp	r2, r3
 8010344:	d201      	bcs.n	801034a <find_volume+0x5b6>
 8010346:	230d      	movs	r3, #13
 8010348:	e070      	b.n	801042c <find_volume+0x698>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801034a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801034c:	f04f 32ff 	mov.w	r2, #4294967295
 8010350:	619a      	str	r2, [r3, #24]
 8010352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010354:	699a      	ldr	r2, [r3, #24]
 8010356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010358:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801035a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801035c:	2280      	movs	r2, #128	; 0x80
 801035e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010360:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010364:	2b03      	cmp	r3, #3
 8010366:	d149      	bne.n	80103fc <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801036a:	3338      	adds	r3, #56	; 0x38
 801036c:	3330      	adds	r3, #48	; 0x30
 801036e:	4618      	mov	r0, r3
 8010370:	f7fc fe58 	bl	800d024 <ld_word>
 8010374:	4603      	mov	r3, r0
 8010376:	2b01      	cmp	r3, #1
 8010378:	d140      	bne.n	80103fc <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 801037a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801037c:	3301      	adds	r3, #1
 801037e:	4619      	mov	r1, r3
 8010380:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010382:	f7fd fa63 	bl	800d84c <move_window>
 8010386:	4603      	mov	r3, r0
 8010388:	2b00      	cmp	r3, #0
 801038a:	d137      	bne.n	80103fc <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 801038c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801038e:	2200      	movs	r2, #0
 8010390:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010394:	3338      	adds	r3, #56	; 0x38
 8010396:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801039a:	4618      	mov	r0, r3
 801039c:	f7fc fe42 	bl	800d024 <ld_word>
 80103a0:	4603      	mov	r3, r0
 80103a2:	461a      	mov	r2, r3
 80103a4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80103a8:	429a      	cmp	r2, r3
 80103aa:	d127      	bne.n	80103fc <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80103ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103ae:	3338      	adds	r3, #56	; 0x38
 80103b0:	4618      	mov	r0, r3
 80103b2:	f7fc fe4f 	bl	800d054 <ld_dword>
 80103b6:	4603      	mov	r3, r0
 80103b8:	4a1f      	ldr	r2, [pc, #124]	; (8010438 <find_volume+0x6a4>)
 80103ba:	4293      	cmp	r3, r2
 80103bc:	d11e      	bne.n	80103fc <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80103be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103c0:	3338      	adds	r3, #56	; 0x38
 80103c2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80103c6:	4618      	mov	r0, r3
 80103c8:	f7fc fe44 	bl	800d054 <ld_dword>
 80103cc:	4603      	mov	r3, r0
 80103ce:	4a1b      	ldr	r2, [pc, #108]	; (801043c <find_volume+0x6a8>)
 80103d0:	4293      	cmp	r3, r2
 80103d2:	d113      	bne.n	80103fc <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80103d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103d6:	3338      	adds	r3, #56	; 0x38
 80103d8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80103dc:	4618      	mov	r0, r3
 80103de:	f7fc fe39 	bl	800d054 <ld_dword>
 80103e2:	4602      	mov	r2, r0
 80103e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103e6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80103e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103ea:	3338      	adds	r3, #56	; 0x38
 80103ec:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80103f0:	4618      	mov	r0, r3
 80103f2:	f7fc fe2f 	bl	800d054 <ld_dword>
 80103f6:	4602      	mov	r2, r0
 80103f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103fa:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80103fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103fe:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8010402:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010404:	4b0e      	ldr	r3, [pc, #56]	; (8010440 <find_volume+0x6ac>)
 8010406:	881b      	ldrh	r3, [r3, #0]
 8010408:	3301      	adds	r3, #1
 801040a:	b29a      	uxth	r2, r3
 801040c:	4b0c      	ldr	r3, [pc, #48]	; (8010440 <find_volume+0x6ac>)
 801040e:	801a      	strh	r2, [r3, #0]
 8010410:	4b0b      	ldr	r3, [pc, #44]	; (8010440 <find_volume+0x6ac>)
 8010412:	881a      	ldrh	r2, [r3, #0]
 8010414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010416:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8010418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801041a:	4a0a      	ldr	r2, [pc, #40]	; (8010444 <find_volume+0x6b0>)
 801041c:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 801041e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010420:	4a09      	ldr	r2, [pc, #36]	; (8010448 <find_volume+0x6b4>)
 8010422:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010424:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010426:	f7fd f9a9 	bl	800d77c <clear_lock>
#endif
	return FR_OK;
 801042a:	2300      	movs	r3, #0
}
 801042c:	4618      	mov	r0, r3
 801042e:	3770      	adds	r7, #112	; 0x70
 8010430:	46bd      	mov	sp, r7
 8010432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010436:	bf00      	nop
 8010438:	41615252 	.word	0x41615252
 801043c:	61417272 	.word	0x61417272
 8010440:	20001e68 	.word	0x20001e68
 8010444:	200020ec 	.word	0x200020ec
 8010448:	20001e8c 	.word	0x20001e8c

0801044c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b084      	sub	sp, #16
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010456:	2309      	movs	r3, #9
 8010458:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d01c      	beq.n	801049a <validate+0x4e>
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d018      	beq.n	801049a <validate+0x4e>
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	781b      	ldrb	r3, [r3, #0]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d013      	beq.n	801049a <validate+0x4e>
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	889a      	ldrh	r2, [r3, #4]
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	88db      	ldrh	r3, [r3, #6]
 801047c:	429a      	cmp	r2, r3
 801047e:	d10c      	bne.n	801049a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	785b      	ldrb	r3, [r3, #1]
 8010486:	4618      	mov	r0, r3
 8010488:	f7fc fd2e 	bl	800cee8 <disk_status>
 801048c:	4603      	mov	r3, r0
 801048e:	f003 0301 	and.w	r3, r3, #1
 8010492:	2b00      	cmp	r3, #0
 8010494:	d101      	bne.n	801049a <validate+0x4e>
			res = FR_OK;
 8010496:	2300      	movs	r3, #0
 8010498:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801049a:	7bfb      	ldrb	r3, [r7, #15]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d102      	bne.n	80104a6 <validate+0x5a>
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	e000      	b.n	80104a8 <validate+0x5c>
 80104a6:	2300      	movs	r3, #0
 80104a8:	683a      	ldr	r2, [r7, #0]
 80104aa:	6013      	str	r3, [r2, #0]
	return res;
 80104ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80104ae:	4618      	mov	r0, r3
 80104b0:	3710      	adds	r7, #16
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}
	...

080104b8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b088      	sub	sp, #32
 80104bc:	af00      	add	r7, sp, #0
 80104be:	60f8      	str	r0, [r7, #12]
 80104c0:	60b9      	str	r1, [r7, #8]
 80104c2:	4613      	mov	r3, r2
 80104c4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80104c6:	68bb      	ldr	r3, [r7, #8]
 80104c8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80104ca:	f107 0310 	add.w	r3, r7, #16
 80104ce:	4618      	mov	r0, r3
 80104d0:	f7ff fbb7 	bl	800fc42 <get_ldnumber>
 80104d4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80104d6:	69fb      	ldr	r3, [r7, #28]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	da01      	bge.n	80104e0 <f_mount+0x28>
 80104dc:	230b      	movs	r3, #11
 80104de:	e02b      	b.n	8010538 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80104e0:	4a17      	ldr	r2, [pc, #92]	; (8010540 <f_mount+0x88>)
 80104e2:	69fb      	ldr	r3, [r7, #28]
 80104e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104e8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80104ea:	69bb      	ldr	r3, [r7, #24]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d005      	beq.n	80104fc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80104f0:	69b8      	ldr	r0, [r7, #24]
 80104f2:	f7fd f943 	bl	800d77c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80104f6:	69bb      	ldr	r3, [r7, #24]
 80104f8:	2200      	movs	r2, #0
 80104fa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d002      	beq.n	8010508 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	2200      	movs	r2, #0
 8010506:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010508:	68fa      	ldr	r2, [r7, #12]
 801050a:	490d      	ldr	r1, [pc, #52]	; (8010540 <f_mount+0x88>)
 801050c:	69fb      	ldr	r3, [r7, #28]
 801050e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d002      	beq.n	801051e <f_mount+0x66>
 8010518:	79fb      	ldrb	r3, [r7, #7]
 801051a:	2b01      	cmp	r3, #1
 801051c:	d001      	beq.n	8010522 <f_mount+0x6a>
 801051e:	2300      	movs	r3, #0
 8010520:	e00a      	b.n	8010538 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010522:	f107 010c 	add.w	r1, r7, #12
 8010526:	f107 0308 	add.w	r3, r7, #8
 801052a:	2200      	movs	r2, #0
 801052c:	4618      	mov	r0, r3
 801052e:	f7ff fc31 	bl	800fd94 <find_volume>
 8010532:	4603      	mov	r3, r0
 8010534:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010536:	7dfb      	ldrb	r3, [r7, #23]
}
 8010538:	4618      	mov	r0, r3
 801053a:	3720      	adds	r7, #32
 801053c:	46bd      	mov	sp, r7
 801053e:	bd80      	pop	{r7, pc}
 8010540:	20001e58 	.word	0x20001e58

08010544 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010548:	b0a6      	sub	sp, #152	; 0x98
 801054a:	af00      	add	r7, sp, #0
 801054c:	61f8      	str	r0, [r7, #28]
 801054e:	61b9      	str	r1, [r7, #24]
 8010550:	4613      	mov	r3, r2
 8010552:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010554:	69fb      	ldr	r3, [r7, #28]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d101      	bne.n	801055e <f_open+0x1a>
 801055a:	2309      	movs	r3, #9
 801055c:	e2ae      	b.n	8010abc <f_open+0x578>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801055e:	7dfb      	ldrb	r3, [r7, #23]
 8010560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010564:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 8010566:	7dfa      	ldrb	r2, [r7, #23]
 8010568:	f107 0124 	add.w	r1, r7, #36	; 0x24
 801056c:	f107 0318 	add.w	r3, r7, #24
 8010570:	4618      	mov	r0, r3
 8010572:	f7ff fc0f 	bl	800fd94 <find_volume>
 8010576:	4603      	mov	r3, r0
 8010578:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	if (res == FR_OK) {
 801057c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010580:	2b00      	cmp	r3, #0
 8010582:	f040 8292 	bne.w	8010aaa <f_open+0x566>
		dj.obj.fs = fs;
 8010586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010588:	62bb      	str	r3, [r7, #40]	; 0x28
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801058a:	69ba      	ldr	r2, [r7, #24]
 801058c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010590:	4611      	mov	r1, r2
 8010592:	4618      	mov	r0, r3
 8010594:	f7ff faac 	bl	800faf0 <follow_path>
 8010598:	4603      	mov	r3, r0
 801059a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801059e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d11a      	bne.n	80105dc <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80105a6:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80105aa:	b25b      	sxtb	r3, r3
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	da03      	bge.n	80105b8 <f_open+0x74>
				res = FR_INVALID_NAME;
 80105b0:	2306      	movs	r3, #6
 80105b2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80105b6:	e011      	b.n	80105dc <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80105b8:	7dfb      	ldrb	r3, [r7, #23]
 80105ba:	f023 0301 	bic.w	r3, r3, #1
 80105be:	2b00      	cmp	r3, #0
 80105c0:	bf14      	ite	ne
 80105c2:	2301      	movne	r3, #1
 80105c4:	2300      	moveq	r3, #0
 80105c6:	b2db      	uxtb	r3, r3
 80105c8:	461a      	mov	r2, r3
 80105ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80105ce:	4611      	mov	r1, r2
 80105d0:	4618      	mov	r0, r3
 80105d2:	f7fc ff8b 	bl	800d4ec <chk_lock>
 80105d6:	4603      	mov	r3, r0
 80105d8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80105dc:	7dfb      	ldrb	r3, [r7, #23]
 80105de:	f003 031c 	and.w	r3, r3, #28
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	f000 8115 	beq.w	8010812 <f_open+0x2ce>
			if (res != FR_OK) {					/* No file, create new */
 80105e8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d017      	beq.n	8010620 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80105f0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80105f4:	2b04      	cmp	r3, #4
 80105f6:	d10e      	bne.n	8010616 <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80105f8:	f7fc ffd4 	bl	800d5a4 <enq_lock>
 80105fc:	4603      	mov	r3, r0
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d006      	beq.n	8010610 <f_open+0xcc>
 8010602:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010606:	4618      	mov	r0, r3
 8010608:	f7fe ff14 	bl	800f434 <dir_register>
 801060c:	4603      	mov	r3, r0
 801060e:	e000      	b.n	8010612 <f_open+0xce>
 8010610:	2312      	movs	r3, #18
 8010612:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010616:	7dfb      	ldrb	r3, [r7, #23]
 8010618:	f043 0308 	orr.w	r3, r3, #8
 801061c:	75fb      	strb	r3, [r7, #23]
 801061e:	e011      	b.n	8010644 <f_open+0x100>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010620:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010624:	f003 0311 	and.w	r3, r3, #17
 8010628:	2b00      	cmp	r3, #0
 801062a:	d003      	beq.n	8010634 <f_open+0xf0>
					res = FR_DENIED;
 801062c:	2307      	movs	r3, #7
 801062e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8010632:	e007      	b.n	8010644 <f_open+0x100>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010634:	7dfb      	ldrb	r3, [r7, #23]
 8010636:	f003 0304 	and.w	r3, r3, #4
 801063a:	2b00      	cmp	r3, #0
 801063c:	d002      	beq.n	8010644 <f_open+0x100>
 801063e:	2308      	movs	r3, #8
 8010640:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010644:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010648:	2b00      	cmp	r3, #0
 801064a:	f040 80fe 	bne.w	801084a <f_open+0x306>
 801064e:	7dfb      	ldrb	r3, [r7, #23]
 8010650:	f003 0308 	and.w	r3, r3, #8
 8010654:	2b00      	cmp	r3, #0
 8010656:	f000 80f8 	beq.w	801084a <f_open+0x306>
				dw = GET_FATTIME();
 801065a:	f7f9 fe47 	bl	800a2ec <get_fattime>
 801065e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8010662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010664:	781b      	ldrb	r3, [r3, #0]
 8010666:	2b04      	cmp	r3, #4
 8010668:	f040 8084 	bne.w	8010774 <f_open+0x230>
					/* Get current allocation info */
					fp->obj.fs = fs;
 801066c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801066e:	69fb      	ldr	r3, [r7, #28]
 8010670:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 8010672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010674:	691b      	ldr	r3, [r3, #16]
 8010676:	3334      	adds	r3, #52	; 0x34
 8010678:	4618      	mov	r0, r3
 801067a:	f7fc fceb 	bl	800d054 <ld_dword>
 801067e:	4602      	mov	r2, r0
 8010680:	69fb      	ldr	r3, [r7, #28]
 8010682:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8010684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010686:	691b      	ldr	r3, [r3, #16]
 8010688:	3338      	adds	r3, #56	; 0x38
 801068a:	4618      	mov	r0, r3
 801068c:	f7fc fd05 	bl	800d09a <ld_qword>
 8010690:	4602      	mov	r2, r0
 8010692:	460b      	mov	r3, r1
 8010694:	69f9      	ldr	r1, [r7, #28]
 8010696:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 801069a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801069c:	691b      	ldr	r3, [r3, #16]
 801069e:	3321      	adds	r3, #33	; 0x21
 80106a0:	781b      	ldrb	r3, [r3, #0]
 80106a2:	f003 0302 	and.w	r3, r3, #2
 80106a6:	b2da      	uxtb	r2, r3
 80106a8:	69fb      	ldr	r3, [r7, #28]
 80106aa:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 80106ac:	69fb      	ldr	r3, [r7, #28]
 80106ae:	2200      	movs	r2, #0
 80106b0:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 80106b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b4:	691b      	ldr	r3, [r3, #16]
 80106b6:	3308      	adds	r3, #8
 80106b8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80106bc:	4618      	mov	r0, r3
 80106be:	f7fc fde2 	bl	800d286 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 80106c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106c4:	691b      	ldr	r3, [r3, #16]
 80106c6:	3314      	adds	r3, #20
 80106c8:	2200      	movs	r2, #0
 80106ca:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 80106cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ce:	691b      	ldr	r3, [r3, #16]
 80106d0:	330c      	adds	r3, #12
 80106d2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80106d6:	4618      	mov	r0, r3
 80106d8:	f7fc fdd5 	bl	800d286 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 80106dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106de:	691b      	ldr	r3, [r3, #16]
 80106e0:	3315      	adds	r3, #21
 80106e2:	2200      	movs	r2, #0
 80106e4:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 80106e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e8:	691b      	ldr	r3, [r3, #16]
 80106ea:	3304      	adds	r3, #4
 80106ec:	2220      	movs	r2, #32
 80106ee:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 80106f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106f2:	691b      	ldr	r3, [r3, #16]
 80106f4:	3334      	adds	r3, #52	; 0x34
 80106f6:	2100      	movs	r1, #0
 80106f8:	4618      	mov	r0, r3
 80106fa:	f7fc fdc4 	bl	800d286 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 80106fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010700:	691b      	ldr	r3, [r3, #16]
 8010702:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010706:	f04f 0200 	mov.w	r2, #0
 801070a:	f04f 0300 	mov.w	r3, #0
 801070e:	4608      	mov	r0, r1
 8010710:	f7fc fde5 	bl	800d2de <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8010714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010716:	691b      	ldr	r3, [r3, #16]
 8010718:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801071c:	f04f 0200 	mov.w	r2, #0
 8010720:	f04f 0300 	mov.w	r3, #0
 8010724:	4608      	mov	r0, r1
 8010726:	f7fc fdda 	bl	800d2de <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 801072a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801072c:	691b      	ldr	r3, [r3, #16]
 801072e:	3321      	adds	r3, #33	; 0x21
 8010730:	2201      	movs	r2, #1
 8010732:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8010734:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010738:	4618      	mov	r0, r3
 801073a:	f7fe fbc9 	bl	800eed0 <store_xdir>
 801073e:	4603      	mov	r3, r0
 8010740:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8010744:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010748:	2b00      	cmp	r3, #0
 801074a:	d17e      	bne.n	801084a <f_open+0x306>
 801074c:	69fb      	ldr	r3, [r7, #28]
 801074e:	689b      	ldr	r3, [r3, #8]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d07a      	beq.n	801084a <f_open+0x306>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8010754:	69f8      	ldr	r0, [r7, #28]
 8010756:	69fb      	ldr	r3, [r7, #28]
 8010758:	689b      	ldr	r3, [r3, #8]
 801075a:	2200      	movs	r2, #0
 801075c:	4619      	mov	r1, r3
 801075e:	f7fd fc81 	bl	800e064 <remove_chain>
 8010762:	4603      	mov	r3, r0
 8010764:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8010768:	69fb      	ldr	r3, [r7, #28]
 801076a:	689a      	ldr	r2, [r3, #8]
 801076c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801076e:	3a01      	subs	r2, #1
 8010770:	615a      	str	r2, [r3, #20]
 8010772:	e06a      	b.n	801084a <f_open+0x306>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010774:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010776:	330e      	adds	r3, #14
 8010778:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801077c:	4618      	mov	r0, r3
 801077e:	f7fc fd82 	bl	800d286 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010782:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010784:	3316      	adds	r3, #22
 8010786:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801078a:	4618      	mov	r0, r3
 801078c:	f7fc fd7b 	bl	800d286 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010792:	330b      	adds	r3, #11
 8010794:	2220      	movs	r2, #32
 8010796:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801079a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801079c:	4611      	mov	r1, r2
 801079e:	4618      	mov	r0, r3
 80107a0:	f7fe f810 	bl	800e7c4 <ld_clust>
 80107a4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80107a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107aa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80107ac:	2200      	movs	r2, #0
 80107ae:	4618      	mov	r0, r3
 80107b0:	f7fe f827 	bl	800e802 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80107b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80107b6:	331c      	adds	r3, #28
 80107b8:	2100      	movs	r1, #0
 80107ba:	4618      	mov	r0, r3
 80107bc:	f7fc fd63 	bl	800d286 <st_dword>
					fs->wflag = 1;
 80107c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c2:	2201      	movs	r2, #1
 80107c4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80107c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d03d      	beq.n	801084a <f_open+0x306>
						dw = fs->winsect;
 80107ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
						res = remove_chain(&dj.obj, cl, 0);
 80107d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80107da:	2200      	movs	r2, #0
 80107dc:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80107e0:	4618      	mov	r0, r3
 80107e2:	f7fd fc3f 	bl	800e064 <remove_chain>
 80107e6:	4603      	mov	r3, r0
 80107e8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						if (res == FR_OK) {
 80107ec:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d12a      	bne.n	801084a <f_open+0x306>
							res = move_window(fs, dw);
 80107f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107f6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80107fa:	4618      	mov	r0, r3
 80107fc:	f7fd f826 	bl	800d84c <move_window>
 8010800:	4603      	mov	r3, r0
 8010802:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010808:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801080c:	3a01      	subs	r2, #1
 801080e:	615a      	str	r2, [r3, #20]
 8010810:	e01b      	b.n	801084a <f_open+0x306>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010812:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010816:	2b00      	cmp	r3, #0
 8010818:	d117      	bne.n	801084a <f_open+0x306>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801081a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801081e:	f003 0310 	and.w	r3, r3, #16
 8010822:	2b00      	cmp	r3, #0
 8010824:	d003      	beq.n	801082e <f_open+0x2ea>
					res = FR_NO_FILE;
 8010826:	2304      	movs	r3, #4
 8010828:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801082c:	e00d      	b.n	801084a <f_open+0x306>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801082e:	7dfb      	ldrb	r3, [r7, #23]
 8010830:	f003 0302 	and.w	r3, r3, #2
 8010834:	2b00      	cmp	r3, #0
 8010836:	d008      	beq.n	801084a <f_open+0x306>
 8010838:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801083c:	f003 0301 	and.w	r3, r3, #1
 8010840:	2b00      	cmp	r3, #0
 8010842:	d002      	beq.n	801084a <f_open+0x306>
						res = FR_DENIED;
 8010844:	2307      	movs	r3, #7
 8010846:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					}
				}
			}
		}
		if (res == FR_OK) {
 801084a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801084e:	2b00      	cmp	r3, #0
 8010850:	d128      	bne.n	80108a4 <f_open+0x360>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010852:	7dfb      	ldrb	r3, [r7, #23]
 8010854:	f003 0308 	and.w	r3, r3, #8
 8010858:	2b00      	cmp	r3, #0
 801085a:	d003      	beq.n	8010864 <f_open+0x320>
				mode |= FA_MODIFIED;
 801085c:	7dfb      	ldrb	r3, [r7, #23]
 801085e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010862:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010868:	69fb      	ldr	r3, [r7, #28]
 801086a:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 801086c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801086e:	69fb      	ldr	r3, [r7, #28]
 8010870:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010872:	7dfb      	ldrb	r3, [r7, #23]
 8010874:	f023 0301 	bic.w	r3, r3, #1
 8010878:	2b00      	cmp	r3, #0
 801087a:	bf14      	ite	ne
 801087c:	2301      	movne	r3, #1
 801087e:	2300      	moveq	r3, #0
 8010880:	b2db      	uxtb	r3, r3
 8010882:	461a      	mov	r2, r3
 8010884:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010888:	4611      	mov	r1, r2
 801088a:	4618      	mov	r0, r3
 801088c:	f7fc feac 	bl	800d5e8 <inc_lock>
 8010890:	4602      	mov	r2, r0
 8010892:	69fb      	ldr	r3, [r7, #28]
 8010894:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010896:	69fb      	ldr	r3, [r7, #28]
 8010898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801089a:	2b00      	cmp	r3, #0
 801089c:	d102      	bne.n	80108a4 <f_open+0x360>
 801089e:	2302      	movs	r3, #2
 80108a0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
		}
#endif

		if (res == FR_OK) {
 80108a4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	f040 80fe 	bne.w	8010aaa <f_open+0x566>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80108ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b0:	781b      	ldrb	r3, [r3, #0]
 80108b2:	2b04      	cmp	r3, #4
 80108b4:	d12d      	bne.n	8010912 <f_open+0x3ce>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 80108b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108b8:	69fb      	ldr	r3, [r7, #28]
 80108ba:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80108bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80108c0:	4613      	mov	r3, r2
 80108c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80108c6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80108ca:	431a      	orrs	r2, r3
 80108cc:	69fb      	ldr	r3, [r7, #28]
 80108ce:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 80108d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80108d2:	69fb      	ldr	r3, [r7, #28]
 80108d4:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 80108d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108d8:	691b      	ldr	r3, [r3, #16]
 80108da:	3334      	adds	r3, #52	; 0x34
 80108dc:	4618      	mov	r0, r3
 80108de:	f7fc fbb9 	bl	800d054 <ld_dword>
 80108e2:	4602      	mov	r2, r0
 80108e4:	69fb      	ldr	r3, [r7, #28]
 80108e6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80108e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ea:	691b      	ldr	r3, [r3, #16]
 80108ec:	3338      	adds	r3, #56	; 0x38
 80108ee:	4618      	mov	r0, r3
 80108f0:	f7fc fbd3 	bl	800d09a <ld_qword>
 80108f4:	4602      	mov	r2, r0
 80108f6:	460b      	mov	r3, r1
 80108f8:	69f9      	ldr	r1, [r7, #28]
 80108fa:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80108fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010900:	691b      	ldr	r3, [r3, #16]
 8010902:	3321      	adds	r3, #33	; 0x21
 8010904:	781b      	ldrb	r3, [r3, #0]
 8010906:	f003 0302 	and.w	r3, r3, #2
 801090a:	b2da      	uxtb	r2, r3
 801090c:	69fb      	ldr	r3, [r7, #28]
 801090e:	71da      	strb	r2, [r3, #7]
 8010910:	e016      	b.n	8010940 <f_open+0x3fc>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010914:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010916:	4611      	mov	r1, r2
 8010918:	4618      	mov	r0, r3
 801091a:	f7fd ff53 	bl	800e7c4 <ld_clust>
 801091e:	4602      	mov	r2, r0
 8010920:	69fb      	ldr	r3, [r7, #28]
 8010922:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010924:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010926:	331c      	adds	r3, #28
 8010928:	4618      	mov	r0, r3
 801092a:	f7fc fb93 	bl	800d054 <ld_dword>
 801092e:	4603      	mov	r3, r0
 8010930:	2200      	movs	r2, #0
 8010932:	60bb      	str	r3, [r7, #8]
 8010934:	60fa      	str	r2, [r7, #12]
 8010936:	69fb      	ldr	r3, [r7, #28]
 8010938:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801093c:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010940:	69fb      	ldr	r3, [r7, #28]
 8010942:	2200      	movs	r2, #0
 8010944:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010948:	69fb      	ldr	r3, [r7, #28]
 801094a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801094c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801094e:	88da      	ldrh	r2, [r3, #6]
 8010950:	69fb      	ldr	r3, [r7, #28]
 8010952:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010954:	69fb      	ldr	r3, [r7, #28]
 8010956:	7dfa      	ldrb	r2, [r7, #23]
 8010958:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 801095c:	69fb      	ldr	r3, [r7, #28]
 801095e:	2200      	movs	r2, #0
 8010960:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8010964:	69fb      	ldr	r3, [r7, #28]
 8010966:	2200      	movs	r2, #0
 8010968:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 801096a:	69f9      	ldr	r1, [r7, #28]
 801096c:	f04f 0200 	mov.w	r2, #0
 8010970:	f04f 0300 	mov.w	r3, #0
 8010974:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010978:	69fb      	ldr	r3, [r7, #28]
 801097a:	3354      	adds	r3, #84	; 0x54
 801097c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010980:	2100      	movs	r1, #0
 8010982:	4618      	mov	r0, r3
 8010984:	f7fc fd54 	bl	800d430 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010988:	7dfb      	ldrb	r3, [r7, #23]
 801098a:	f003 0320 	and.w	r3, r3, #32
 801098e:	2b00      	cmp	r3, #0
 8010990:	f000 808b 	beq.w	8010aaa <f_open+0x566>
 8010994:	69fb      	ldr	r3, [r7, #28]
 8010996:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801099a:	4313      	orrs	r3, r2
 801099c:	f000 8085 	beq.w	8010aaa <f_open+0x566>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80109a0:	69fb      	ldr	r3, [r7, #28]
 80109a2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80109a6:	69f9      	ldr	r1, [r7, #28]
 80109a8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80109ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ae:	895b      	ldrh	r3, [r3, #10]
 80109b0:	025b      	lsls	r3, r3, #9
 80109b2:	67fb      	str	r3, [r7, #124]	; 0x7c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80109b4:	69fb      	ldr	r3, [r7, #28]
 80109b6:	689b      	ldr	r3, [r3, #8]
 80109b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80109bc:	69fb      	ldr	r3, [r7, #28]
 80109be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80109c2:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 80109c6:	e026      	b.n	8010a16 <f_open+0x4d2>
					clst = get_fat(&fp->obj, clst);
 80109c8:	69fb      	ldr	r3, [r7, #28]
 80109ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80109ce:	4618      	mov	r0, r3
 80109d0:	f7fc fff8 	bl	800d9c4 <get_fat>
 80109d4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
					if (clst <= 1) res = FR_INT_ERR;
 80109d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80109dc:	2b01      	cmp	r3, #1
 80109de:	d802      	bhi.n	80109e6 <f_open+0x4a2>
 80109e0:	2302      	movs	r3, #2
 80109e2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80109e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80109ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109ee:	d102      	bne.n	80109f6 <f_open+0x4b2>
 80109f0:	2301      	movs	r3, #1
 80109f2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80109f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80109f8:	2200      	movs	r2, #0
 80109fa:	469a      	mov	sl, r3
 80109fc:	4693      	mov	fp, r2
 80109fe:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010a02:	ebb2 010a 	subs.w	r1, r2, sl
 8010a06:	6039      	str	r1, [r7, #0]
 8010a08:	eb63 030b 	sbc.w	r3, r3, fp
 8010a0c:	607b      	str	r3, [r7, #4]
 8010a0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a12:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 8010a16:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d109      	bne.n	8010a32 <f_open+0x4ee>
 8010a1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010a20:	2200      	movs	r2, #0
 8010a22:	4698      	mov	r8, r3
 8010a24:	4691      	mov	r9, r2
 8010a26:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010a2a:	4590      	cmp	r8, r2
 8010a2c:	eb79 0303 	sbcs.w	r3, r9, r3
 8010a30:	d3ca      	bcc.n	80109c8 <f_open+0x484>
				}
				fp->clust = clst;
 8010a32:	69fb      	ldr	r3, [r7, #28]
 8010a34:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8010a38:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010a3a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d133      	bne.n	8010aaa <f_open+0x566>
 8010a42:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010a46:	f3c2 0408 	ubfx	r4, r2, #0, #9
 8010a4a:	2500      	movs	r5, #0
 8010a4c:	ea54 0305 	orrs.w	r3, r4, r5
 8010a50:	d02b      	beq.n	8010aaa <f_open+0x566>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a54:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010a58:	4618      	mov	r0, r3
 8010a5a:	f7fc ff93 	bl	800d984 <clust2sect>
 8010a5e:	67b8      	str	r0, [r7, #120]	; 0x78
 8010a60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d103      	bne.n	8010a6e <f_open+0x52a>
						res = FR_INT_ERR;
 8010a66:	2302      	movs	r3, #2
 8010a68:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8010a6c:	e01d      	b.n	8010aaa <f_open+0x566>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010a6e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8010a72:	f04f 0200 	mov.w	r2, #0
 8010a76:	f04f 0300 	mov.w	r3, #0
 8010a7a:	0a42      	lsrs	r2, r0, #9
 8010a7c:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8010a80:	0a4b      	lsrs	r3, r1, #9
 8010a82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010a84:	441a      	add	r2, r3
 8010a86:	69fb      	ldr	r3, [r7, #28]
 8010a88:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a8c:	7858      	ldrb	r0, [r3, #1]
 8010a8e:	69fb      	ldr	r3, [r7, #28]
 8010a90:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010a94:	69fb      	ldr	r3, [r7, #28]
 8010a96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a98:	2301      	movs	r3, #1
 8010a9a:	f7fc fa65 	bl	800cf68 <disk_read>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d002      	beq.n	8010aaa <f_open+0x566>
 8010aa4:	2301      	movs	r3, #1
 8010aa6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010aaa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d002      	beq.n	8010ab8 <f_open+0x574>
 8010ab2:	69fb      	ldr	r3, [r7, #28]
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010ab8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8010abc:	4618      	mov	r0, r3
 8010abe:	3798      	adds	r7, #152	; 0x98
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010ac6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010ac6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010aca:	b08c      	sub	sp, #48	; 0x30
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	60f8      	str	r0, [r7, #12]
 8010ad0:	60b9      	str	r1, [r7, #8]
 8010ad2:	607a      	str	r2, [r7, #4]
 8010ad4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010ada:	683b      	ldr	r3, [r7, #0]
 8010adc:	2200      	movs	r2, #0
 8010ade:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	f107 0210 	add.w	r2, r7, #16
 8010ae6:	4611      	mov	r1, r2
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f7ff fcaf 	bl	801044c <validate>
 8010aee:	4603      	mov	r3, r0
 8010af0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010af4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d108      	bne.n	8010b0e <f_write+0x48>
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010b06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d002      	beq.n	8010b14 <f_write+0x4e>
 8010b0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b12:	e187      	b.n	8010e24 <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010b1a:	f003 0302 	and.w	r3, r3, #2
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d101      	bne.n	8010b26 <f_write+0x60>
 8010b22:	2307      	movs	r3, #7
 8010b24:	e17e      	b.n	8010e24 <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010b26:	693b      	ldr	r3, [r7, #16]
 8010b28:	781b      	ldrb	r3, [r3, #0]
 8010b2a:	2b04      	cmp	r3, #4
 8010b2c:	f000 816a 	beq.w	8010e04 <f_write+0x33e>
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	18d1      	adds	r1, r2, r3
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010b40:	4613      	mov	r3, r2
 8010b42:	4299      	cmp	r1, r3
 8010b44:	f080 815e 	bcs.w	8010e04 <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010b4e:	4613      	mov	r3, r2
 8010b50:	43db      	mvns	r3, r3
 8010b52:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010b54:	e156      	b.n	8010e04 <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010b5c:	f3c2 0408 	ubfx	r4, r2, #0, #9
 8010b60:	2500      	movs	r5, #0
 8010b62:	ea54 0305 	orrs.w	r3, r4, r5
 8010b66:	f040 80fb 	bne.w	8010d60 <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8010b70:	f04f 0200 	mov.w	r2, #0
 8010b74:	f04f 0300 	mov.w	r3, #0
 8010b78:	0a42      	lsrs	r2, r0, #9
 8010b7a:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8010b7e:	0a4b      	lsrs	r3, r1, #9
 8010b80:	693b      	ldr	r3, [r7, #16]
 8010b82:	895b      	ldrh	r3, [r3, #10]
 8010b84:	3b01      	subs	r3, #1
 8010b86:	4013      	ands	r3, r2
 8010b88:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010b8a:	69bb      	ldr	r3, [r7, #24]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d146      	bne.n	8010c1e <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010b96:	4313      	orrs	r3, r2
 8010b98:	d10c      	bne.n	8010bb4 <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	689b      	ldr	r3, [r3, #8]
 8010b9e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d11a      	bne.n	8010bdc <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	2100      	movs	r1, #0
 8010baa:	4618      	mov	r0, r3
 8010bac:	f7fd fb0e 	bl	800e1cc <create_chain>
 8010bb0:	62b8      	str	r0, [r7, #40]	; 0x28
 8010bb2:	e013      	b.n	8010bdc <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d007      	beq.n	8010bcc <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010bc2:	68f8      	ldr	r0, [r7, #12]
 8010bc4:	f7fd fc03 	bl	800e3ce <clmt_clust>
 8010bc8:	62b8      	str	r0, [r7, #40]	; 0x28
 8010bca:	e007      	b.n	8010bdc <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010bcc:	68fa      	ldr	r2, [r7, #12]
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bd2:	4619      	mov	r1, r3
 8010bd4:	4610      	mov	r0, r2
 8010bd6:	f7fd faf9 	bl	800e1cc <create_chain>
 8010bda:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	f000 8115 	beq.w	8010e0e <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010be6:	2b01      	cmp	r3, #1
 8010be8:	d105      	bne.n	8010bf6 <f_write+0x130>
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	2202      	movs	r2, #2
 8010bee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010bf2:	2302      	movs	r3, #2
 8010bf4:	e116      	b.n	8010e24 <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bfc:	d105      	bne.n	8010c0a <f_write+0x144>
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	2201      	movs	r2, #1
 8010c02:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010c06:	2301      	movs	r3, #1
 8010c08:	e10c      	b.n	8010e24 <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c0e:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	689b      	ldr	r3, [r3, #8]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d102      	bne.n	8010c1e <f_write+0x158>
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c1c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010c24:	b25b      	sxtb	r3, r3
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	da1b      	bge.n	8010c62 <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010c2a:	693b      	ldr	r3, [r7, #16]
 8010c2c:	7858      	ldrb	r0, [r3, #1]
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010c38:	2301      	movs	r3, #1
 8010c3a:	f7fc f9b5 	bl	800cfa8 <disk_write>
 8010c3e:	4603      	mov	r3, r0
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d005      	beq.n	8010c50 <f_write+0x18a>
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	2201      	movs	r2, #1
 8010c48:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010c4c:	2301      	movs	r3, #1
 8010c4e:	e0e9      	b.n	8010e24 <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c5a:	b2da      	uxtb	r2, r3
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010c62:	693a      	ldr	r2, [r7, #16]
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c68:	4619      	mov	r1, r3
 8010c6a:	4610      	mov	r0, r2
 8010c6c:	f7fc fe8a 	bl	800d984 <clust2sect>
 8010c70:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010c72:	697b      	ldr	r3, [r7, #20]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d105      	bne.n	8010c84 <f_write+0x1be>
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	2202      	movs	r2, #2
 8010c7c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010c80:	2302      	movs	r3, #2
 8010c82:	e0cf      	b.n	8010e24 <f_write+0x35e>
			sect += csect;
 8010c84:	697a      	ldr	r2, [r7, #20]
 8010c86:	69bb      	ldr	r3, [r7, #24]
 8010c88:	4413      	add	r3, r2
 8010c8a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	0a5b      	lsrs	r3, r3, #9
 8010c90:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010c92:	6a3b      	ldr	r3, [r7, #32]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d03f      	beq.n	8010d18 <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010c98:	69ba      	ldr	r2, [r7, #24]
 8010c9a:	6a3b      	ldr	r3, [r7, #32]
 8010c9c:	4413      	add	r3, r2
 8010c9e:	693a      	ldr	r2, [r7, #16]
 8010ca0:	8952      	ldrh	r2, [r2, #10]
 8010ca2:	4293      	cmp	r3, r2
 8010ca4:	d905      	bls.n	8010cb2 <f_write+0x1ec>
					cc = fs->csize - csect;
 8010ca6:	693b      	ldr	r3, [r7, #16]
 8010ca8:	895b      	ldrh	r3, [r3, #10]
 8010caa:	461a      	mov	r2, r3
 8010cac:	69bb      	ldr	r3, [r7, #24]
 8010cae:	1ad3      	subs	r3, r2, r3
 8010cb0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010cb2:	693b      	ldr	r3, [r7, #16]
 8010cb4:	7858      	ldrb	r0, [r3, #1]
 8010cb6:	6a3b      	ldr	r3, [r7, #32]
 8010cb8:	697a      	ldr	r2, [r7, #20]
 8010cba:	69f9      	ldr	r1, [r7, #28]
 8010cbc:	f7fc f974 	bl	800cfa8 <disk_write>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d005      	beq.n	8010cd2 <f_write+0x20c>
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	2201      	movs	r2, #1
 8010cca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010cce:	2301      	movs	r3, #1
 8010cd0:	e0a8      	b.n	8010e24 <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010cd6:	697b      	ldr	r3, [r7, #20]
 8010cd8:	1ad3      	subs	r3, r2, r3
 8010cda:	6a3a      	ldr	r2, [r7, #32]
 8010cdc:	429a      	cmp	r2, r3
 8010cde:	d917      	bls.n	8010d10 <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010cea:	697b      	ldr	r3, [r7, #20]
 8010cec:	1ad3      	subs	r3, r2, r3
 8010cee:	025b      	lsls	r3, r3, #9
 8010cf0:	69fa      	ldr	r2, [r7, #28]
 8010cf2:	4413      	add	r3, r2
 8010cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010cf8:	4619      	mov	r1, r3
 8010cfa:	f7fc fb78 	bl	800d3ee <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d08:	b2da      	uxtb	r2, r3
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010d10:	6a3b      	ldr	r3, [r7, #32]
 8010d12:	025b      	lsls	r3, r3, #9
 8010d14:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010d16:	e04a      	b.n	8010dae <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d1c:	697a      	ldr	r2, [r7, #20]
 8010d1e:	429a      	cmp	r2, r3
 8010d20:	d01b      	beq.n	8010d5a <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010d2e:	4290      	cmp	r0, r2
 8010d30:	eb71 0303 	sbcs.w	r3, r1, r3
 8010d34:	d211      	bcs.n	8010d5a <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010d36:	693b      	ldr	r3, [r7, #16]
 8010d38:	7858      	ldrb	r0, [r3, #1]
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010d40:	2301      	movs	r3, #1
 8010d42:	697a      	ldr	r2, [r7, #20]
 8010d44:	f7fc f910 	bl	800cf68 <disk_read>
 8010d48:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d005      	beq.n	8010d5a <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	2201      	movs	r2, #1
 8010d52:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010d56:	2301      	movs	r3, #1
 8010d58:	e064      	b.n	8010e24 <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	697a      	ldr	r2, [r7, #20]
 8010d5e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010d66:	4613      	mov	r3, r2
 8010d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d6c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010d70:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	429a      	cmp	r2, r3
 8010d78:	d901      	bls.n	8010d7e <f_write+0x2b8>
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010d8a:	4613      	mov	r3, r2
 8010d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d90:	440b      	add	r3, r1
 8010d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d94:	69f9      	ldr	r1, [r7, #28]
 8010d96:	4618      	mov	r0, r3
 8010d98:	f7fc fb29 	bl	800d3ee <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010da2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010da6:	b2da      	uxtb	r2, r3
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010dae:	69fa      	ldr	r2, [r7, #28]
 8010db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010db2:	4413      	add	r3, r2
 8010db4:	61fb      	str	r3, [r7, #28]
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010dbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010dbe:	2000      	movs	r0, #0
 8010dc0:	4688      	mov	r8, r1
 8010dc2:	4681      	mov	r9, r0
 8010dc4:	eb12 0a08 	adds.w	sl, r2, r8
 8010dc8:	eb43 0b09 	adc.w	fp, r3, r9
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010dd8:	68f9      	ldr	r1, [r7, #12]
 8010dda:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 8010dde:	4282      	cmp	r2, r0
 8010de0:	eb73 0c01 	sbcs.w	ip, r3, r1
 8010de4:	d201      	bcs.n	8010dea <f_write+0x324>
 8010de6:	4602      	mov	r2, r0
 8010de8:	460b      	mov	r3, r1
 8010dea:	68f9      	ldr	r1, [r7, #12]
 8010dec:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8010df0:	683b      	ldr	r3, [r7, #0]
 8010df2:	681a      	ldr	r2, [r3, #0]
 8010df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df6:	441a      	add	r2, r3
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	601a      	str	r2, [r3, #0]
 8010dfc:	687a      	ldr	r2, [r7, #4]
 8010dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e00:	1ad3      	subs	r3, r2, r3
 8010e02:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	f47f aea5 	bne.w	8010b56 <f_write+0x90>
 8010e0c:	e000      	b.n	8010e10 <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010e0e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e1a:	b2da      	uxtb	r2, r3
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 8010e22:	2300      	movs	r3, #0
}
 8010e24:	4618      	mov	r0, r3
 8010e26:	3730      	adds	r7, #48	; 0x30
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010e2e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010e2e:	b580      	push	{r7, lr}
 8010e30:	b09a      	sub	sp, #104	; 0x68
 8010e32:	af00      	add	r7, sp, #0
 8010e34:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010e3c:	4611      	mov	r1, r2
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f7ff fb04 	bl	801044c <validate>
 8010e44:	4603      	mov	r3, r0
 8010e46:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8010e4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	f040 8105 	bne.w	801105e <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	f000 80fd 	beq.w	801105e <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e6a:	b25b      	sxtb	r3, r3
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	da17      	bge.n	8010ea0 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010e70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010e72:	7858      	ldrb	r0, [r3, #1]
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010e7e:	2301      	movs	r3, #1
 8010e80:	f7fc f892 	bl	800cfa8 <disk_write>
 8010e84:	4603      	mov	r3, r0
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d001      	beq.n	8010e8e <f_sync+0x60>
 8010e8a:	2301      	movs	r3, #1
 8010e8c:	e0e9      	b.n	8011062 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e98:	b2da      	uxtb	r2, r3
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010ea0:	f7f9 fa24 	bl	800a2ec <get_fattime>
 8010ea4:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8010ea6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010ea8:	781b      	ldrb	r3, [r3, #0]
 8010eaa:	2b04      	cmp	r3, #4
 8010eac:	f040 808c 	bne.w	8010fc8 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f7fd f876 	bl	800dfa4 <fill_first_frag>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 8010ebe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d10a      	bne.n	8010edc <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8010ec6:	6878      	ldr	r0, [r7, #4]
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8010ed0:	4619      	mov	r1, r3
 8010ed2:	f7fd f896 	bl	800e002 <fill_last_frag>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 8010edc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	f040 80bc 	bne.w	801105e <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8010ee6:	687a      	ldr	r2, [r7, #4]
 8010ee8:	f107 0308 	add.w	r3, r7, #8
 8010eec:	4611      	mov	r1, r2
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f7fd ffb8 	bl	800ee64 <load_obj_dir>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 8010efa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	f040 80ad 	bne.w	801105e <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8010f04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f06:	691b      	ldr	r3, [r3, #16]
 8010f08:	3304      	adds	r3, #4
 8010f0a:	781a      	ldrb	r2, [r3, #0]
 8010f0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f0e:	691b      	ldr	r3, [r3, #16]
 8010f10:	3304      	adds	r3, #4
 8010f12:	f042 0220 	orr.w	r2, r2, #32
 8010f16:	b2d2      	uxtb	r2, r2
 8010f18:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	79da      	ldrb	r2, [r3, #7]
 8010f1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f20:	691b      	ldr	r3, [r3, #16]
 8010f22:	3321      	adds	r3, #33	; 0x21
 8010f24:	f042 0201 	orr.w	r2, r2, #1
 8010f28:	b2d2      	uxtb	r2, r2
 8010f2a:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 8010f2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f2e:	691b      	ldr	r3, [r3, #16]
 8010f30:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	689b      	ldr	r3, [r3, #8]
 8010f38:	4619      	mov	r1, r3
 8010f3a:	4610      	mov	r0, r2
 8010f3c:	f7fc f9a3 	bl	800d286 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8010f40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f42:	691b      	ldr	r3, [r3, #16]
 8010f44:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010f4e:	4608      	mov	r0, r1
 8010f50:	f7fc f9c5 	bl	800d2de <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8010f54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f56:	691b      	ldr	r3, [r3, #16]
 8010f58:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010f62:	4608      	mov	r0, r1
 8010f64:	f7fc f9bb 	bl	800d2de <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8010f68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f6a:	691b      	ldr	r3, [r3, #16]
 8010f6c:	330c      	adds	r3, #12
 8010f6e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010f70:	4618      	mov	r0, r3
 8010f72:	f7fc f988 	bl	800d286 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8010f76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f78:	691b      	ldr	r3, [r3, #16]
 8010f7a:	3315      	adds	r3, #21
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8010f80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f82:	691b      	ldr	r3, [r3, #16]
 8010f84:	3310      	adds	r3, #16
 8010f86:	2100      	movs	r1, #0
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f7fc f97c 	bl	800d286 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8010f8e:	f107 0308 	add.w	r3, r7, #8
 8010f92:	4618      	mov	r0, r3
 8010f94:	f7fd ff9c 	bl	800eed0 <store_xdir>
 8010f98:	4603      	mov	r3, r0
 8010f9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8010f9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d15b      	bne.n	801105e <f_sync+0x230>
							res = sync_fs(fs);
 8010fa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010fa8:	4618      	mov	r0, r3
 8010faa:	f7fc fc7d 	bl	800d8a8 <sync_fs>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010fba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010fbe:	b2da      	uxtb	r2, r3
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010fc6:	e04a      	b.n	801105e <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010fc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010fce:	4619      	mov	r1, r3
 8010fd0:	4610      	mov	r0, r2
 8010fd2:	f7fc fc3b 	bl	800d84c <move_window>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 8010fdc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d13c      	bne.n	801105e <f_sync+0x230>
					dir = fp->dir_ptr;
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010fec:	330b      	adds	r3, #11
 8010fee:	781a      	ldrb	r2, [r3, #0]
 8010ff0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010ff2:	330b      	adds	r3, #11
 8010ff4:	f042 0220 	orr.w	r2, r2, #32
 8010ff8:	b2d2      	uxtb	r2, r2
 8010ffa:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	6818      	ldr	r0, [r3, #0]
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	689b      	ldr	r3, [r3, #8]
 8011004:	461a      	mov	r2, r3
 8011006:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8011008:	f7fd fbfb 	bl	800e802 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801100c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801100e:	f103 001c 	add.w	r0, r3, #28
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8011018:	4613      	mov	r3, r2
 801101a:	4619      	mov	r1, r3
 801101c:	f7fc f933 	bl	800d286 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011022:	3316      	adds	r3, #22
 8011024:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8011026:	4618      	mov	r0, r3
 8011028:	f7fc f92d 	bl	800d286 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801102c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801102e:	3312      	adds	r3, #18
 8011030:	2100      	movs	r1, #0
 8011032:	4618      	mov	r0, r3
 8011034:	f7fc f90c 	bl	800d250 <st_word>
					fs->wflag = 1;
 8011038:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801103a:	2201      	movs	r2, #1
 801103c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801103e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011040:	4618      	mov	r0, r3
 8011042:	f7fc fc31 	bl	800d8a8 <sync_fs>
 8011046:	4603      	mov	r3, r0
 8011048:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011052:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011056:	b2da      	uxtb	r2, r3
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801105e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8011062:	4618      	mov	r0, r3
 8011064:	3768      	adds	r7, #104	; 0x68
 8011066:	46bd      	mov	sp, r7
 8011068:	bd80      	pop	{r7, pc}

0801106a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801106a:	b580      	push	{r7, lr}
 801106c:	b084      	sub	sp, #16
 801106e:	af00      	add	r7, sp, #0
 8011070:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011072:	6878      	ldr	r0, [r7, #4]
 8011074:	f7ff fedb 	bl	8010e2e <f_sync>
 8011078:	4603      	mov	r3, r0
 801107a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801107c:	7bfb      	ldrb	r3, [r7, #15]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d118      	bne.n	80110b4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	f107 0208 	add.w	r2, r7, #8
 8011088:	4611      	mov	r1, r2
 801108a:	4618      	mov	r0, r3
 801108c:	f7ff f9de 	bl	801044c <validate>
 8011090:	4603      	mov	r3, r0
 8011092:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011094:	7bfb      	ldrb	r3, [r7, #15]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d10c      	bne.n	80110b4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801109e:	4618      	mov	r0, r3
 80110a0:	f7fc fb30 	bl	800d704 <dec_lock>
 80110a4:	4603      	mov	r3, r0
 80110a6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80110a8:	7bfb      	ldrb	r3, [r7, #15]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d102      	bne.n	80110b4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	2200      	movs	r2, #0
 80110b2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80110b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80110b6:	4618      	mov	r0, r3
 80110b8:	3710      	adds	r7, #16
 80110ba:	46bd      	mov	sp, r7
 80110bc:	bd80      	pop	{r7, pc}

080110be <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80110be:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80110c2:	b0b6      	sub	sp, #216	; 0xd8
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80110ca:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80110ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80110d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80110d6:	4619      	mov	r1, r3
 80110d8:	4610      	mov	r0, r2
 80110da:	f7ff f9b7 	bl	801044c <validate>
 80110de:	4603      	mov	r3, r0
 80110e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	if (res == FR_OK) res = (FRESULT)fp->err;
 80110e4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d105      	bne.n	80110f8 <f_lseek+0x3a>
 80110ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80110f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80110f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 80110f8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d111      	bne.n	8011124 <f_lseek+0x66>
 8011100:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011104:	781b      	ldrb	r3, [r3, #0]
 8011106:	2b04      	cmp	r3, #4
 8011108:	d10c      	bne.n	8011124 <f_lseek+0x66>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 801110a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 801110e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011114:	f04f 32ff 	mov.w	r2, #4294967295
 8011118:	4619      	mov	r1, r3
 801111a:	f7fc ff72 	bl	800e002 <fill_last_frag>
 801111e:	4603      	mov	r3, r0
 8011120:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8011124:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8011128:	2b00      	cmp	r3, #0
 801112a:	d002      	beq.n	8011132 <f_lseek+0x74>
 801112c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8011130:	e38c      	b.n	801184c <f_lseek+0x78e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011132:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011138:	2b00      	cmp	r3, #0
 801113a:	f000 8141 	beq.w	80113c0 <f_lseek+0x302>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801113e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8011142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011146:	bf08      	it	eq
 8011148:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 801114c:	f040 8087 	bne.w	801125e <f_lseek+0x1a0>
			tbl = fp->cltbl;
 8011150:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011156:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801115a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801115e:	1d1a      	adds	r2, r3, #4
 8011160:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801116a:	2302      	movs	r3, #2
 801116c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			cl = fp->obj.sclust;		/* Origin of the chain */
 8011170:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011174:	689b      	ldr	r3, [r3, #8]
 8011176:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			if (cl) {
 801117a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801117e:	2b00      	cmp	r3, #0
 8011180:	d058      	beq.n	8011234 <f_lseek+0x176>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011182:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011186:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801118a:	2300      	movs	r3, #0
 801118c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011190:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011194:	3302      	adds	r3, #2
 8011196:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
					do {
						pcl = cl; ncl++;
 801119a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801119e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80111a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80111a6:	3301      	adds	r3, #1
 80111a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
						cl = get_fat(&fp->obj, cl);
 80111ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80111b0:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80111b4:	4618      	mov	r0, r3
 80111b6:	f7fc fc05 	bl	800d9c4 <get_fat>
 80111ba:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80111be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80111c2:	2b01      	cmp	r3, #1
 80111c4:	d806      	bhi.n	80111d4 <f_lseek+0x116>
 80111c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80111ca:	2202      	movs	r2, #2
 80111cc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80111d0:	2302      	movs	r3, #2
 80111d2:	e33b      	b.n	801184c <f_lseek+0x78e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80111d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80111d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111dc:	d106      	bne.n	80111ec <f_lseek+0x12e>
 80111de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80111e2:	2201      	movs	r2, #1
 80111e4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80111e8:	2301      	movs	r3, #1
 80111ea:	e32f      	b.n	801184c <f_lseek+0x78e>
					} while (cl == pcl + 1);
 80111ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80111f0:	3301      	adds	r3, #1
 80111f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80111f6:	429a      	cmp	r2, r3
 80111f8:	d0cf      	beq.n	801119a <f_lseek+0xdc>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80111fa:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80111fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011202:	429a      	cmp	r2, r3
 8011204:	d80f      	bhi.n	8011226 <f_lseek+0x168>
						*tbl++ = ncl; *tbl++ = tcl;
 8011206:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801120a:	1d1a      	adds	r2, r3, #4
 801120c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8011210:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8011214:	601a      	str	r2, [r3, #0]
 8011216:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801121a:	1d1a      	adds	r2, r3, #4
 801121c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8011220:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8011224:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8011226:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801122a:	69db      	ldr	r3, [r3, #28]
 801122c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8011230:	429a      	cmp	r2, r3
 8011232:	d3a6      	bcc.n	8011182 <f_lseek+0xc4>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011234:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801123a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801123e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8011240:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8011244:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011248:	429a      	cmp	r2, r3
 801124a:	d804      	bhi.n	8011256 <f_lseek+0x198>
				*tbl = 0;		/* Terminate table */
 801124c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011250:	2200      	movs	r2, #0
 8011252:	601a      	str	r2, [r3, #0]
 8011254:	e2f8      	b.n	8011848 <f_lseek+0x78a>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011256:	2311      	movs	r3, #17
 8011258:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 801125c:	e2f4      	b.n	8011848 <f_lseek+0x78a>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801125e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011262:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8011266:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801126a:	4290      	cmp	r0, r2
 801126c:	eb71 0303 	sbcs.w	r3, r1, r3
 8011270:	d205      	bcs.n	801127e <f_lseek+0x1c0>
 8011272:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011276:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801127a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			fp->fptr = ofs;				/* Set file pointer */
 801127e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8011282:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8011286:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			if (ofs) {
 801128a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801128e:	4313      	orrs	r3, r2
 8011290:	f000 82da 	beq.w	8011848 <f_lseek+0x78a>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011294:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8011298:	f112 3aff 	adds.w	sl, r2, #4294967295
 801129c:	f143 3bff 	adc.w	fp, r3, #4294967295
 80112a0:	4652      	mov	r2, sl
 80112a2:	465b      	mov	r3, fp
 80112a4:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80112a8:	f7fd f891 	bl	800e3ce <clmt_clust>
 80112ac:	4602      	mov	r2, r0
 80112ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80112b2:	641a      	str	r2, [r3, #64]	; 0x40
				dsc = clust2sect(fs, fp->clust);
 80112b4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80112b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80112bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112be:	4619      	mov	r1, r3
 80112c0:	4610      	mov	r0, r2
 80112c2:	f7fc fb5f 	bl	800d984 <clust2sect>
 80112c6:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80112ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d106      	bne.n	80112e0 <f_lseek+0x222>
 80112d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80112d6:	2202      	movs	r2, #2
 80112d8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80112dc:	2302      	movs	r3, #2
 80112de:	e2b5      	b.n	801184c <f_lseek+0x78e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80112e0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80112e4:	1e54      	subs	r4, r2, #1
 80112e6:	f143 35ff 	adc.w	r5, r3, #4294967295
 80112ea:	f04f 0200 	mov.w	r2, #0
 80112ee:	f04f 0300 	mov.w	r3, #0
 80112f2:	0a62      	lsrs	r2, r4, #9
 80112f4:	ea42 52c5 	orr.w	r2, r2, r5, lsl #23
 80112f8:	0a6b      	lsrs	r3, r5, #9
 80112fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80112fe:	895b      	ldrh	r3, [r3, #10]
 8011300:	3b01      	subs	r3, #1
 8011302:	4013      	ands	r3, r2
 8011304:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011308:	4413      	add	r3, r2
 801130a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801130e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011312:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011316:	f3c2 0808 	ubfx	r8, r2, #0, #9
 801131a:	f04f 0900 	mov.w	r9, #0
 801131e:	ea58 0309 	orrs.w	r3, r8, r9
 8011322:	f000 8291 	beq.w	8011848 <f_lseek+0x78a>
 8011326:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801132a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801132c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011330:	429a      	cmp	r2, r3
 8011332:	f000 8289 	beq.w	8011848 <f_lseek+0x78a>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011336:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801133a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801133e:	b25b      	sxtb	r3, r3
 8011340:	2b00      	cmp	r3, #0
 8011342:	da21      	bge.n	8011388 <f_lseek+0x2ca>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011344:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011348:	7858      	ldrb	r0, [r3, #1]
 801134a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801134e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8011352:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011356:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011358:	2301      	movs	r3, #1
 801135a:	f7fb fe25 	bl	800cfa8 <disk_write>
 801135e:	4603      	mov	r3, r0
 8011360:	2b00      	cmp	r3, #0
 8011362:	d006      	beq.n	8011372 <f_lseek+0x2b4>
 8011364:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011368:	2201      	movs	r2, #1
 801136a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801136e:	2301      	movs	r3, #1
 8011370:	e26c      	b.n	801184c <f_lseek+0x78e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011372:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011376:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801137a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801137e:	b2da      	uxtb	r2, r3
 8011380:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011384:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011388:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801138c:	7858      	ldrb	r0, [r3, #1]
 801138e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011392:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8011396:	2301      	movs	r3, #1
 8011398:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801139c:	f7fb fde4 	bl	800cf68 <disk_read>
 80113a0:	4603      	mov	r3, r0
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d006      	beq.n	80113b4 <f_lseek+0x2f6>
 80113a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80113aa:	2201      	movs	r2, #1
 80113ac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80113b0:	2301      	movs	r3, #1
 80113b2:	e24b      	b.n	801184c <f_lseek+0x78e>
#endif
					fp->sect = dsc;
 80113b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80113b8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80113bc:	645a      	str	r2, [r3, #68]	; 0x44
 80113be:	e243      	b.n	8011848 <f_lseek+0x78a>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 80113c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80113c4:	781b      	ldrb	r3, [r3, #0]
 80113c6:	2b04      	cmp	r3, #4
 80113c8:	d009      	beq.n	80113de <f_lseek+0x320>
 80113ca:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80113ce:	2b01      	cmp	r3, #1
 80113d0:	d305      	bcc.n	80113de <f_lseek+0x320>
 80113d2:	f04f 32ff 	mov.w	r2, #4294967295
 80113d6:	f04f 0300 	mov.w	r3, #0
 80113da:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80113de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80113e2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80113e6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80113ea:	4290      	cmp	r0, r2
 80113ec:	eb71 0303 	sbcs.w	r3, r1, r3
 80113f0:	d20d      	bcs.n	801140e <f_lseek+0x350>
 80113f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80113f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80113fa:	f003 0302 	and.w	r3, r3, #2
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d105      	bne.n	801140e <f_lseek+0x350>
			ofs = fp->obj.objsize;
 8011402:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011406:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801140a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		}
		ifptr = fp->fptr;
 801140e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011412:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011416:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
		fp->fptr = nsect = 0;
 801141a:	2300      	movs	r3, #0
 801141c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011420:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8011424:	f04f 0200 	mov.w	r2, #0
 8011428:	f04f 0300 	mov.w	r3, #0
 801142c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		if (ofs) {
 8011430:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8011434:	4313      	orrs	r3, r2
 8011436:	f000 818f 	beq.w	8011758 <f_lseek+0x69a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801143a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801143e:	895b      	ldrh	r3, [r3, #10]
 8011440:	025b      	lsls	r3, r3, #9
 8011442:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			if (ifptr > 0 &&
 8011446:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 801144a:	4313      	orrs	r3, r2
 801144c:	d06b      	beq.n	8011526 <f_lseek+0x468>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801144e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8011452:	1e51      	subs	r1, r2, #1
 8011454:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8011458:	f143 33ff 	adc.w	r3, r3, #4294967295
 801145c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011460:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011464:	2200      	movs	r2, #0
 8011466:	67bb      	str	r3, [r7, #120]	; 0x78
 8011468:	67fa      	str	r2, [r7, #124]	; 0x7c
 801146a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 801146e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8011472:	f7ee ff15 	bl	80002a0 <__aeabi_uldivmod>
 8011476:	4602      	mov	r2, r0
 8011478:	460b      	mov	r3, r1
 801147a:	4614      	mov	r4, r2
 801147c:	461d      	mov	r5, r3
 801147e:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8011482:	1e51      	subs	r1, r2, #1
 8011484:	6739      	str	r1, [r7, #112]	; 0x70
 8011486:	f143 33ff 	adc.w	r3, r3, #4294967295
 801148a:	677b      	str	r3, [r7, #116]	; 0x74
 801148c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011490:	2200      	movs	r2, #0
 8011492:	66bb      	str	r3, [r7, #104]	; 0x68
 8011494:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011496:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801149a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 801149e:	f7ee feff 	bl	80002a0 <__aeabi_uldivmod>
 80114a2:	4602      	mov	r2, r0
 80114a4:	460b      	mov	r3, r1
			if (ifptr > 0 &&
 80114a6:	4294      	cmp	r4, r2
 80114a8:	eb75 0303 	sbcs.w	r3, r5, r3
 80114ac:	d33b      	bcc.n	8011526 <f_lseek+0x468>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80114ae:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80114b2:	1e51      	subs	r1, r2, #1
 80114b4:	6639      	str	r1, [r7, #96]	; 0x60
 80114b6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80114ba:	667b      	str	r3, [r7, #100]	; 0x64
 80114bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80114c0:	3b01      	subs	r3, #1
 80114c2:	2200      	movs	r2, #0
 80114c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80114c6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80114c8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80114cc:	460b      	mov	r3, r1
 80114ce:	43db      	mvns	r3, r3
 80114d0:	653b      	str	r3, [r7, #80]	; 0x50
 80114d2:	4613      	mov	r3, r2
 80114d4:	43db      	mvns	r3, r3
 80114d6:	657b      	str	r3, [r7, #84]	; 0x54
 80114d8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80114dc:	4623      	mov	r3, r4
 80114de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80114e2:	4602      	mov	r2, r0
 80114e4:	4013      	ands	r3, r2
 80114e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80114e8:	462b      	mov	r3, r5
 80114ea:	460a      	mov	r2, r1
 80114ec:	4013      	ands	r3, r2
 80114ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80114f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80114f4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80114f8:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				ofs -= fp->fptr;
 80114fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011500:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8011504:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8011508:	1a14      	subs	r4, r2, r0
 801150a:	60bc      	str	r4, [r7, #8]
 801150c:	eb63 0301 	sbc.w	r3, r3, r1
 8011510:	60fb      	str	r3, [r7, #12]
 8011512:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8011516:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
				clst = fp->clust;
 801151a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011520:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011524:	e031      	b.n	801158a <f_lseek+0x4cc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011526:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801152a:	689b      	ldr	r3, [r3, #8]
 801152c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011530:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011534:	2b00      	cmp	r3, #0
 8011536:	d123      	bne.n	8011580 <f_lseek+0x4c2>
					clst = create_chain(&fp->obj, 0);
 8011538:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801153c:	2100      	movs	r1, #0
 801153e:	4618      	mov	r0, r3
 8011540:	f7fc fe44 	bl	800e1cc <create_chain>
 8011544:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011548:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801154c:	2b01      	cmp	r3, #1
 801154e:	d106      	bne.n	801155e <f_lseek+0x4a0>
 8011550:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011554:	2202      	movs	r2, #2
 8011556:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801155a:	2302      	movs	r3, #2
 801155c:	e176      	b.n	801184c <f_lseek+0x78e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801155e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011566:	d106      	bne.n	8011576 <f_lseek+0x4b8>
 8011568:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801156c:	2201      	movs	r2, #1
 801156e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011572:	2301      	movs	r3, #1
 8011574:	e16a      	b.n	801184c <f_lseek+0x78e>
					fp->obj.sclust = clst;
 8011576:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801157a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801157e:	6093      	str	r3, [r2, #8]
				}
#endif
				fp->clust = clst;
 8011580:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011584:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011588:	6413      	str	r3, [r2, #64]	; 0x40
			}
			if (clst != 0) {
 801158a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801158e:	2b00      	cmp	r3, #0
 8011590:	f000 80e2 	beq.w	8011758 <f_lseek+0x69a>
				while (ofs > bcs) {						/* Cluster following loop */
 8011594:	e090      	b.n	80116b8 <f_lseek+0x5fa>
					ofs -= bcs; fp->fptr += bcs;
 8011596:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801159a:	2200      	movs	r2, #0
 801159c:	643b      	str	r3, [r7, #64]	; 0x40
 801159e:	647a      	str	r2, [r7, #68]	; 0x44
 80115a0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80115a4:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80115a8:	4621      	mov	r1, r4
 80115aa:	1a51      	subs	r1, r2, r1
 80115ac:	6039      	str	r1, [r7, #0]
 80115ae:	4629      	mov	r1, r5
 80115b0:	eb63 0301 	sbc.w	r3, r3, r1
 80115b4:	607b      	str	r3, [r7, #4]
 80115b6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80115ba:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
 80115be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80115c2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80115c6:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80115ca:	2000      	movs	r0, #0
 80115cc:	63b9      	str	r1, [r7, #56]	; 0x38
 80115ce:	63f8      	str	r0, [r7, #60]	; 0x3c
 80115d0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80115d4:	4621      	mov	r1, r4
 80115d6:	1851      	adds	r1, r2, r1
 80115d8:	6339      	str	r1, [r7, #48]	; 0x30
 80115da:	4629      	mov	r1, r5
 80115dc:	414b      	adcs	r3, r1
 80115de:	637b      	str	r3, [r7, #52]	; 0x34
 80115e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80115e4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80115e8:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80115ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80115f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80115f4:	f003 0302 	and.w	r3, r3, #2
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d031      	beq.n	8011660 <f_lseek+0x5a2>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 80115fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011600:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8011604:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011608:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801160c:	4282      	cmp	r2, r0
 801160e:	418b      	sbcs	r3, r1
 8011610:	d212      	bcs.n	8011638 <f_lseek+0x57a>
							fp->obj.objsize = fp->fptr;
 8011612:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011616:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801161a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801161e:	e9c3 0104 	strd	r0, r1, [r3, #16]
							fp->flag |= FA_MODIFIED;
 8011622:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011626:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801162a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801162e:	b2db      	uxtb	r3, r3
 8011630:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011634:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011638:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801163c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8011640:	4618      	mov	r0, r3
 8011642:	f7fc fdc3 	bl	800e1cc <create_chain>
 8011646:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
						if (clst == 0) {				/* Clip file size in case of disk full */
 801164a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801164e:	2b00      	cmp	r3, #0
 8011650:	d10f      	bne.n	8011672 <f_lseek+0x5b4>
							ofs = 0; break;
 8011652:	f04f 0200 	mov.w	r2, #0
 8011656:	f04f 0300 	mov.w	r3, #0
 801165a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 801165e:	e03b      	b.n	80116d8 <f_lseek+0x61a>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011660:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011664:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8011668:	4618      	mov	r0, r3
 801166a:	f7fc f9ab 	bl	800d9c4 <get_fat>
 801166e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011672:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011676:	f1b3 3fff 	cmp.w	r3, #4294967295
 801167a:	d106      	bne.n	801168a <f_lseek+0x5cc>
 801167c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011680:	2201      	movs	r2, #1
 8011682:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011686:	2301      	movs	r3, #1
 8011688:	e0e0      	b.n	801184c <f_lseek+0x78e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801168a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801168e:	2b01      	cmp	r3, #1
 8011690:	d906      	bls.n	80116a0 <f_lseek+0x5e2>
 8011692:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011696:	69da      	ldr	r2, [r3, #28]
 8011698:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801169c:	4293      	cmp	r3, r2
 801169e:	d306      	bcc.n	80116ae <f_lseek+0x5f0>
 80116a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80116a4:	2202      	movs	r2, #2
 80116a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80116aa:	2302      	movs	r3, #2
 80116ac:	e0ce      	b.n	801184c <f_lseek+0x78e>
					fp->clust = clst;
 80116ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80116b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80116b6:	6413      	str	r3, [r2, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 80116b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80116bc:	2200      	movs	r2, #0
 80116be:	62bb      	str	r3, [r7, #40]	; 0x28
 80116c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80116c2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80116c6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80116ca:	4621      	mov	r1, r4
 80116cc:	4291      	cmp	r1, r2
 80116ce:	4629      	mov	r1, r5
 80116d0:	eb71 0303 	sbcs.w	r3, r1, r3
 80116d4:	f4ff af5f 	bcc.w	8011596 <f_lseek+0x4d8>
				}
				fp->fptr += ofs;
 80116d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80116dc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80116e0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80116e4:	1884      	adds	r4, r0, r2
 80116e6:	623c      	str	r4, [r7, #32]
 80116e8:	eb41 0303 	adc.w	r3, r1, r3
 80116ec:	627b      	str	r3, [r7, #36]	; 0x24
 80116ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80116f2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80116f6:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				if (ofs % SS(fs)) {
 80116fa:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80116fe:	f3c2 0308 	ubfx	r3, r2, #0, #9
 8011702:	61bb      	str	r3, [r7, #24]
 8011704:	2300      	movs	r3, #0
 8011706:	61fb      	str	r3, [r7, #28]
 8011708:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801170c:	460b      	mov	r3, r1
 801170e:	4313      	orrs	r3, r2
 8011710:	d022      	beq.n	8011758 <f_lseek+0x69a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011712:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011716:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 801171a:	4618      	mov	r0, r3
 801171c:	f7fc f932 	bl	800d984 <clust2sect>
 8011720:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011724:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011728:	2b00      	cmp	r3, #0
 801172a:	d106      	bne.n	801173a <f_lseek+0x67c>
 801172c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011730:	2202      	movs	r2, #2
 8011732:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011736:	2302      	movs	r3, #2
 8011738:	e088      	b.n	801184c <f_lseek+0x78e>
					nsect += (DWORD)(ofs / SS(fs));
 801173a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 801173e:	f04f 0200 	mov.w	r2, #0
 8011742:	f04f 0300 	mov.w	r3, #0
 8011746:	0a42      	lsrs	r2, r0, #9
 8011748:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 801174c:	0a4b      	lsrs	r3, r1, #9
 801174e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011752:	4413      	add	r3, r2
 8011754:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011758:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801175c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011760:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8011764:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8011768:	4290      	cmp	r0, r2
 801176a:	eb71 0303 	sbcs.w	r3, r1, r3
 801176e:	d212      	bcs.n	8011796 <f_lseek+0x6d8>
			fp->obj.objsize = fp->fptr;
 8011770:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011774:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011778:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 801177c:	e9c1 2304 	strd	r2, r3, [r1, #16]
			fp->flag |= FA_MODIFIED;
 8011780:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011784:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801178c:	b2da      	uxtb	r2, r3
 801178e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011792:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011796:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801179a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801179e:	f3c2 0308 	ubfx	r3, r2, #0, #9
 80117a2:	613b      	str	r3, [r7, #16]
 80117a4:	2300      	movs	r3, #0
 80117a6:	617b      	str	r3, [r7, #20]
 80117a8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80117ac:	460b      	mov	r3, r1
 80117ae:	4313      	orrs	r3, r2
 80117b0:	d04a      	beq.n	8011848 <f_lseek+0x78a>
 80117b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80117b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117b8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80117bc:	429a      	cmp	r2, r3
 80117be:	d043      	beq.n	8011848 <f_lseek+0x78a>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80117c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80117c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80117c8:	b25b      	sxtb	r3, r3
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	da21      	bge.n	8011812 <f_lseek+0x754>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80117ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80117d2:	7858      	ldrb	r0, [r3, #1]
 80117d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80117d8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80117dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80117e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80117e2:	2301      	movs	r3, #1
 80117e4:	f7fb fbe0 	bl	800cfa8 <disk_write>
 80117e8:	4603      	mov	r3, r0
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d006      	beq.n	80117fc <f_lseek+0x73e>
 80117ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80117f2:	2201      	movs	r2, #1
 80117f4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80117f8:	2301      	movs	r3, #1
 80117fa:	e027      	b.n	801184c <f_lseek+0x78e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80117fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011800:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011808:	b2da      	uxtb	r2, r3
 801180a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801180e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011812:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011816:	7858      	ldrb	r0, [r3, #1]
 8011818:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801181c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8011820:	2301      	movs	r3, #1
 8011822:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8011826:	f7fb fb9f 	bl	800cf68 <disk_read>
 801182a:	4603      	mov	r3, r0
 801182c:	2b00      	cmp	r3, #0
 801182e:	d006      	beq.n	801183e <f_lseek+0x780>
 8011830:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011834:	2201      	movs	r2, #1
 8011836:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801183a:	2301      	movs	r3, #1
 801183c:	e006      	b.n	801184c <f_lseek+0x78e>
#endif
			fp->sect = nsect;
 801183e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011842:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8011846:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}

	LEAVE_FF(fs, res);
 8011848:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 801184c:	4618      	mov	r0, r3
 801184e:	37d8      	adds	r7, #216	; 0xd8
 8011850:	46bd      	mov	sp, r7
 8011852:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011856 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8011856:	b580      	push	{r7, lr}
 8011858:	b09a      	sub	sp, #104	; 0x68
 801185a:	af00      	add	r7, sp, #0
 801185c:	60f8      	str	r0, [r7, #12]
 801185e:	60b9      	str	r1, [r7, #8]
 8011860:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8011862:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8011866:	f107 030c 	add.w	r3, r7, #12
 801186a:	2200      	movs	r2, #0
 801186c:	4618      	mov	r0, r3
 801186e:	f7fe fa91 	bl	800fd94 <find_volume>
 8011872:	4603      	mov	r3, r0
 8011874:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8011878:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801187c:	2b00      	cmp	r3, #0
 801187e:	f040 80e6 	bne.w	8011a4e <f_getfree+0x1f8>
		*fatfs = fs;				/* Return ptr to the fs object */
 8011882:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8011888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801188a:	699a      	ldr	r2, [r3, #24]
 801188c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801188e:	69db      	ldr	r3, [r3, #28]
 8011890:	3b02      	subs	r3, #2
 8011892:	429a      	cmp	r2, r3
 8011894:	d804      	bhi.n	80118a0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8011896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011898:	699a      	ldr	r2, [r3, #24]
 801189a:	68bb      	ldr	r3, [r7, #8]
 801189c:	601a      	str	r2, [r3, #0]
 801189e:	e0d6      	b.n	8011a4e <f_getfree+0x1f8>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80118a0:	2300      	movs	r3, #0
 80118a2:	663b      	str	r3, [r7, #96]	; 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80118a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118a6:	781b      	ldrb	r3, [r3, #0]
 80118a8:	2b01      	cmp	r3, #1
 80118aa:	d128      	bne.n	80118fe <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80118ac:	2302      	movs	r3, #2
 80118ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80118b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118b2:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 80118b4:	f107 0310 	add.w	r3, r7, #16
 80118b8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80118ba:	4618      	mov	r0, r3
 80118bc:	f7fc f882 	bl	800d9c4 <get_fat>
 80118c0:	6478      	str	r0, [r7, #68]	; 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80118c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118c8:	d103      	bne.n	80118d2 <f_getfree+0x7c>
 80118ca:	2301      	movs	r3, #1
 80118cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80118d0:	e0b0      	b.n	8011a34 <f_getfree+0x1de>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80118d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118d4:	2b01      	cmp	r3, #1
 80118d6:	d103      	bne.n	80118e0 <f_getfree+0x8a>
 80118d8:	2302      	movs	r3, #2
 80118da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80118de:	e0a9      	b.n	8011a34 <f_getfree+0x1de>
					if (stat == 0) nfree++;
 80118e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d102      	bne.n	80118ec <f_getfree+0x96>
 80118e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80118e8:	3301      	adds	r3, #1
 80118ea:	663b      	str	r3, [r7, #96]	; 0x60
				} while (++clst < fs->n_fatent);
 80118ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80118ee:	3301      	adds	r3, #1
 80118f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80118f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118f4:	69db      	ldr	r3, [r3, #28]
 80118f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80118f8:	429a      	cmp	r2, r3
 80118fa:	d3db      	bcc.n	80118b4 <f_getfree+0x5e>
 80118fc:	e09a      	b.n	8011a34 <f_getfree+0x1de>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 80118fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011900:	781b      	ldrb	r3, [r3, #0]
 8011902:	2b04      	cmp	r3, #4
 8011904:	d146      	bne.n	8011994 <f_getfree+0x13e>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 8011906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011908:	69db      	ldr	r3, [r3, #28]
 801190a:	3b02      	subs	r3, #2
 801190c:	65fb      	str	r3, [r7, #92]	; 0x5c
					sect = fs->database;
 801190e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011912:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0;
 8011914:	2300      	movs	r3, #0
 8011916:	657b      	str	r3, [r7, #84]	; 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 8011918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801191a:	2b00      	cmp	r3, #0
 801191c:	d10d      	bne.n	801193a <f_getfree+0xe4>
 801191e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8011920:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011922:	1c5a      	adds	r2, r3, #1
 8011924:	65ba      	str	r2, [r7, #88]	; 0x58
 8011926:	4619      	mov	r1, r3
 8011928:	f7fb ff90 	bl	800d84c <move_window>
 801192c:	4603      	mov	r3, r0
 801192e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8011932:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011936:	2b00      	cmp	r3, #0
 8011938:	d179      	bne.n	8011a2e <f_getfree+0x1d8>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 801193a:	2308      	movs	r3, #8
 801193c:	64bb      	str	r3, [r7, #72]	; 0x48
 801193e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011942:	4413      	add	r3, r2
 8011944:	3338      	adds	r3, #56	; 0x38
 8011946:	781b      	ldrb	r3, [r3, #0]
 8011948:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801194c:	e013      	b.n	8011976 <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 801194e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011952:	f003 0301 	and.w	r3, r3, #1
 8011956:	2b00      	cmp	r3, #0
 8011958:	d102      	bne.n	8011960 <f_getfree+0x10a>
 801195a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801195c:	3301      	adds	r3, #1
 801195e:	663b      	str	r3, [r7, #96]	; 0x60
							bm >>= 1;
 8011960:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011964:	085b      	lsrs	r3, r3, #1
 8011966:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 801196a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801196c:	3b01      	subs	r3, #1
 801196e:	64bb      	str	r3, [r7, #72]	; 0x48
 8011970:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011972:	3b01      	subs	r3, #1
 8011974:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011978:	2b00      	cmp	r3, #0
 801197a:	d002      	beq.n	8011982 <f_getfree+0x12c>
 801197c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801197e:	2b00      	cmp	r3, #0
 8011980:	d1e5      	bne.n	801194e <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 8011982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011984:	3301      	adds	r3, #1
 8011986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801198a:	657b      	str	r3, [r7, #84]	; 0x54
					} while (clst);
 801198c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801198e:	2b00      	cmp	r3, #0
 8011990:	d1c2      	bne.n	8011918 <f_getfree+0xc2>
 8011992:	e04f      	b.n	8011a34 <f_getfree+0x1de>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8011994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011996:	69db      	ldr	r3, [r3, #28]
 8011998:	65fb      	str	r3, [r7, #92]	; 0x5c
 801199a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801199e:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0; p = 0;
 80119a0:	2300      	movs	r3, #0
 80119a2:	657b      	str	r3, [r7, #84]	; 0x54
 80119a4:	2300      	movs	r3, #0
 80119a6:	653b      	str	r3, [r7, #80]	; 0x50
					do {
						if (i == 0) {
 80119a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d113      	bne.n	80119d6 <f_getfree+0x180>
							res = move_window(fs, sect++);
 80119ae:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80119b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80119b2:	1c5a      	adds	r2, r3, #1
 80119b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80119b6:	4619      	mov	r1, r3
 80119b8:	f7fb ff48 	bl	800d84c <move_window>
 80119bc:	4603      	mov	r3, r0
 80119be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							if (res != FR_OK) break;
 80119c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d133      	bne.n	8011a32 <f_getfree+0x1dc>
							p = fs->win;
 80119ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119cc:	3338      	adds	r3, #56	; 0x38
 80119ce:	653b      	str	r3, [r7, #80]	; 0x50
							i = SS(fs);
 80119d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80119d4:	657b      	str	r3, [r7, #84]	; 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 80119d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119d8:	781b      	ldrb	r3, [r3, #0]
 80119da:	2b02      	cmp	r3, #2
 80119dc:	d10f      	bne.n	80119fe <f_getfree+0x1a8>
							if (ld_word(p) == 0) nfree++;
 80119de:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80119e0:	f7fb fb20 	bl	800d024 <ld_word>
 80119e4:	4603      	mov	r3, r0
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d102      	bne.n	80119f0 <f_getfree+0x19a>
 80119ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80119ec:	3301      	adds	r3, #1
 80119ee:	663b      	str	r3, [r7, #96]	; 0x60
							p += 2; i -= 2;
 80119f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119f2:	3302      	adds	r3, #2
 80119f4:	653b      	str	r3, [r7, #80]	; 0x50
 80119f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119f8:	3b02      	subs	r3, #2
 80119fa:	657b      	str	r3, [r7, #84]	; 0x54
 80119fc:	e010      	b.n	8011a20 <f_getfree+0x1ca>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80119fe:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8011a00:	f7fb fb28 	bl	800d054 <ld_dword>
 8011a04:	4603      	mov	r3, r0
 8011a06:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d102      	bne.n	8011a14 <f_getfree+0x1be>
 8011a0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011a10:	3301      	adds	r3, #1
 8011a12:	663b      	str	r3, [r7, #96]	; 0x60
							p += 4; i -= 4;
 8011a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a16:	3304      	adds	r3, #4
 8011a18:	653b      	str	r3, [r7, #80]	; 0x50
 8011a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a1c:	3b04      	subs	r3, #4
 8011a1e:	657b      	str	r3, [r7, #84]	; 0x54
						}
					} while (--clst);
 8011a20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011a22:	3b01      	subs	r3, #1
 8011a24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d1bd      	bne.n	80119a8 <f_getfree+0x152>
 8011a2c:	e002      	b.n	8011a34 <f_getfree+0x1de>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 8011a2e:	bf00      	nop
 8011a30:	e000      	b.n	8011a34 <f_getfree+0x1de>
							if (res != FR_OK) break;
 8011a32:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8011a34:	68bb      	ldr	r3, [r7, #8]
 8011a36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011a38:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8011a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011a3e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8011a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a42:	791a      	ldrb	r2, [r3, #4]
 8011a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a46:	f042 0201 	orr.w	r2, r2, #1
 8011a4a:	b2d2      	uxtb	r2, r2
 8011a4c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8011a4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8011a52:	4618      	mov	r0, r3
 8011a54:	3768      	adds	r7, #104	; 0x68
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd80      	pop	{r7, pc}
	...

08011a5c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011a5c:	b480      	push	{r7}
 8011a5e:	b087      	sub	sp, #28
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	60f8      	str	r0, [r7, #12]
 8011a64:	60b9      	str	r1, [r7, #8]
 8011a66:	4613      	mov	r3, r2
 8011a68:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011a6a:	2301      	movs	r3, #1
 8011a6c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011a6e:	2300      	movs	r3, #0
 8011a70:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011a72:	4b1f      	ldr	r3, [pc, #124]	; (8011af0 <FATFS_LinkDriverEx+0x94>)
 8011a74:	7e1b      	ldrb	r3, [r3, #24]
 8011a76:	b2db      	uxtb	r3, r3
 8011a78:	2b03      	cmp	r3, #3
 8011a7a:	d831      	bhi.n	8011ae0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011a7c:	4b1c      	ldr	r3, [pc, #112]	; (8011af0 <FATFS_LinkDriverEx+0x94>)
 8011a7e:	7e1b      	ldrb	r3, [r3, #24]
 8011a80:	b2db      	uxtb	r3, r3
 8011a82:	461a      	mov	r2, r3
 8011a84:	4b1a      	ldr	r3, [pc, #104]	; (8011af0 <FATFS_LinkDriverEx+0x94>)
 8011a86:	2100      	movs	r1, #0
 8011a88:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011a8a:	4b19      	ldr	r3, [pc, #100]	; (8011af0 <FATFS_LinkDriverEx+0x94>)
 8011a8c:	7e1b      	ldrb	r3, [r3, #24]
 8011a8e:	b2db      	uxtb	r3, r3
 8011a90:	4a17      	ldr	r2, [pc, #92]	; (8011af0 <FATFS_LinkDriverEx+0x94>)
 8011a92:	009b      	lsls	r3, r3, #2
 8011a94:	4413      	add	r3, r2
 8011a96:	68fa      	ldr	r2, [r7, #12]
 8011a98:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011a9a:	4b15      	ldr	r3, [pc, #84]	; (8011af0 <FATFS_LinkDriverEx+0x94>)
 8011a9c:	7e1b      	ldrb	r3, [r3, #24]
 8011a9e:	b2db      	uxtb	r3, r3
 8011aa0:	461a      	mov	r2, r3
 8011aa2:	4b13      	ldr	r3, [pc, #76]	; (8011af0 <FATFS_LinkDriverEx+0x94>)
 8011aa4:	4413      	add	r3, r2
 8011aa6:	79fa      	ldrb	r2, [r7, #7]
 8011aa8:	751a      	strb	r2, [r3, #20]
    DiskNum = disk.nbr++;
 8011aaa:	4b11      	ldr	r3, [pc, #68]	; (8011af0 <FATFS_LinkDriverEx+0x94>)
 8011aac:	7e1b      	ldrb	r3, [r3, #24]
 8011aae:	b2db      	uxtb	r3, r3
 8011ab0:	1c5a      	adds	r2, r3, #1
 8011ab2:	b2d1      	uxtb	r1, r2
 8011ab4:	4a0e      	ldr	r2, [pc, #56]	; (8011af0 <FATFS_LinkDriverEx+0x94>)
 8011ab6:	7611      	strb	r1, [r2, #24]
 8011ab8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011aba:	7dbb      	ldrb	r3, [r7, #22]
 8011abc:	3330      	adds	r3, #48	; 0x30
 8011abe:	b2da      	uxtb	r2, r3
 8011ac0:	68bb      	ldr	r3, [r7, #8]
 8011ac2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011ac4:	68bb      	ldr	r3, [r7, #8]
 8011ac6:	3301      	adds	r3, #1
 8011ac8:	223a      	movs	r2, #58	; 0x3a
 8011aca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011acc:	68bb      	ldr	r3, [r7, #8]
 8011ace:	3302      	adds	r3, #2
 8011ad0:	222f      	movs	r2, #47	; 0x2f
 8011ad2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011ad4:	68bb      	ldr	r3, [r7, #8]
 8011ad6:	3303      	adds	r3, #3
 8011ad8:	2200      	movs	r2, #0
 8011ada:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011adc:	2300      	movs	r3, #0
 8011ade:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	371c      	adds	r7, #28
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aec:	4770      	bx	lr
 8011aee:	bf00      	nop
 8011af0:	200022ec 	.word	0x200022ec

08011af4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b082      	sub	sp, #8
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
 8011afc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011afe:	2200      	movs	r2, #0
 8011b00:	6839      	ldr	r1, [r7, #0]
 8011b02:	6878      	ldr	r0, [r7, #4]
 8011b04:	f7ff ffaa 	bl	8011a5c <FATFS_LinkDriverEx>
 8011b08:	4603      	mov	r3, r0
}
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	3708      	adds	r7, #8
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	bd80      	pop	{r7, pc}
	...

08011b14 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8011b14:	b480      	push	{r7}
 8011b16:	b085      	sub	sp, #20
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	6039      	str	r1, [r7, #0]
 8011b1e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8011b20:	88fb      	ldrh	r3, [r7, #6]
 8011b22:	2b7f      	cmp	r3, #127	; 0x7f
 8011b24:	d802      	bhi.n	8011b2c <ff_convert+0x18>
		c = chr;
 8011b26:	88fb      	ldrh	r3, [r7, #6]
 8011b28:	81fb      	strh	r3, [r7, #14]
 8011b2a:	e025      	b.n	8011b78 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8011b2c:	683b      	ldr	r3, [r7, #0]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d00b      	beq.n	8011b4a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8011b32:	88fb      	ldrh	r3, [r7, #6]
 8011b34:	2bff      	cmp	r3, #255	; 0xff
 8011b36:	d805      	bhi.n	8011b44 <ff_convert+0x30>
 8011b38:	88fb      	ldrh	r3, [r7, #6]
 8011b3a:	3b80      	subs	r3, #128	; 0x80
 8011b3c:	4a12      	ldr	r2, [pc, #72]	; (8011b88 <ff_convert+0x74>)
 8011b3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011b42:	e000      	b.n	8011b46 <ff_convert+0x32>
 8011b44:	2300      	movs	r3, #0
 8011b46:	81fb      	strh	r3, [r7, #14]
 8011b48:	e016      	b.n	8011b78 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	81fb      	strh	r3, [r7, #14]
 8011b4e:	e009      	b.n	8011b64 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8011b50:	89fb      	ldrh	r3, [r7, #14]
 8011b52:	4a0d      	ldr	r2, [pc, #52]	; (8011b88 <ff_convert+0x74>)
 8011b54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011b58:	88fa      	ldrh	r2, [r7, #6]
 8011b5a:	429a      	cmp	r2, r3
 8011b5c:	d006      	beq.n	8011b6c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8011b5e:	89fb      	ldrh	r3, [r7, #14]
 8011b60:	3301      	adds	r3, #1
 8011b62:	81fb      	strh	r3, [r7, #14]
 8011b64:	89fb      	ldrh	r3, [r7, #14]
 8011b66:	2b7f      	cmp	r3, #127	; 0x7f
 8011b68:	d9f2      	bls.n	8011b50 <ff_convert+0x3c>
 8011b6a:	e000      	b.n	8011b6e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8011b6c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8011b6e:	89fb      	ldrh	r3, [r7, #14]
 8011b70:	3380      	adds	r3, #128	; 0x80
 8011b72:	b29b      	uxth	r3, r3
 8011b74:	b2db      	uxtb	r3, r3
 8011b76:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8011b78:	89fb      	ldrh	r3, [r7, #14]
}
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	3714      	adds	r7, #20
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b84:	4770      	bx	lr
 8011b86:	bf00      	nop
 8011b88:	080177a4 	.word	0x080177a4

08011b8c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8011b8c:	b480      	push	{r7}
 8011b8e:	b087      	sub	sp, #28
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	4603      	mov	r3, r0
 8011b94:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8011b96:	88fb      	ldrh	r3, [r7, #6]
 8011b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011b9c:	d201      	bcs.n	8011ba2 <ff_wtoupper+0x16>
 8011b9e:	4b3e      	ldr	r3, [pc, #248]	; (8011c98 <ff_wtoupper+0x10c>)
 8011ba0:	e000      	b.n	8011ba4 <ff_wtoupper+0x18>
 8011ba2:	4b3e      	ldr	r3, [pc, #248]	; (8011c9c <ff_wtoupper+0x110>)
 8011ba4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8011ba6:	697b      	ldr	r3, [r7, #20]
 8011ba8:	1c9a      	adds	r2, r3, #2
 8011baa:	617a      	str	r2, [r7, #20]
 8011bac:	881b      	ldrh	r3, [r3, #0]
 8011bae:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8011bb0:	8a7b      	ldrh	r3, [r7, #18]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d068      	beq.n	8011c88 <ff_wtoupper+0xfc>
 8011bb6:	88fa      	ldrh	r2, [r7, #6]
 8011bb8:	8a7b      	ldrh	r3, [r7, #18]
 8011bba:	429a      	cmp	r2, r3
 8011bbc:	d364      	bcc.n	8011c88 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8011bbe:	697b      	ldr	r3, [r7, #20]
 8011bc0:	1c9a      	adds	r2, r3, #2
 8011bc2:	617a      	str	r2, [r7, #20]
 8011bc4:	881b      	ldrh	r3, [r3, #0]
 8011bc6:	823b      	strh	r3, [r7, #16]
 8011bc8:	8a3b      	ldrh	r3, [r7, #16]
 8011bca:	0a1b      	lsrs	r3, r3, #8
 8011bcc:	81fb      	strh	r3, [r7, #14]
 8011bce:	8a3b      	ldrh	r3, [r7, #16]
 8011bd0:	b2db      	uxtb	r3, r3
 8011bd2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8011bd4:	88fa      	ldrh	r2, [r7, #6]
 8011bd6:	8a79      	ldrh	r1, [r7, #18]
 8011bd8:	8a3b      	ldrh	r3, [r7, #16]
 8011bda:	440b      	add	r3, r1
 8011bdc:	429a      	cmp	r2, r3
 8011bde:	da49      	bge.n	8011c74 <ff_wtoupper+0xe8>
			switch (cmd) {
 8011be0:	89fb      	ldrh	r3, [r7, #14]
 8011be2:	2b08      	cmp	r3, #8
 8011be4:	d84f      	bhi.n	8011c86 <ff_wtoupper+0xfa>
 8011be6:	a201      	add	r2, pc, #4	; (adr r2, 8011bec <ff_wtoupper+0x60>)
 8011be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bec:	08011c11 	.word	0x08011c11
 8011bf0:	08011c23 	.word	0x08011c23
 8011bf4:	08011c39 	.word	0x08011c39
 8011bf8:	08011c41 	.word	0x08011c41
 8011bfc:	08011c49 	.word	0x08011c49
 8011c00:	08011c51 	.word	0x08011c51
 8011c04:	08011c59 	.word	0x08011c59
 8011c08:	08011c61 	.word	0x08011c61
 8011c0c:	08011c69 	.word	0x08011c69
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8011c10:	88fa      	ldrh	r2, [r7, #6]
 8011c12:	8a7b      	ldrh	r3, [r7, #18]
 8011c14:	1ad3      	subs	r3, r2, r3
 8011c16:	005b      	lsls	r3, r3, #1
 8011c18:	697a      	ldr	r2, [r7, #20]
 8011c1a:	4413      	add	r3, r2
 8011c1c:	881b      	ldrh	r3, [r3, #0]
 8011c1e:	80fb      	strh	r3, [r7, #6]
 8011c20:	e027      	b.n	8011c72 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8011c22:	88fa      	ldrh	r2, [r7, #6]
 8011c24:	8a7b      	ldrh	r3, [r7, #18]
 8011c26:	1ad3      	subs	r3, r2, r3
 8011c28:	b29b      	uxth	r3, r3
 8011c2a:	f003 0301 	and.w	r3, r3, #1
 8011c2e:	b29b      	uxth	r3, r3
 8011c30:	88fa      	ldrh	r2, [r7, #6]
 8011c32:	1ad3      	subs	r3, r2, r3
 8011c34:	80fb      	strh	r3, [r7, #6]
 8011c36:	e01c      	b.n	8011c72 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8011c38:	88fb      	ldrh	r3, [r7, #6]
 8011c3a:	3b10      	subs	r3, #16
 8011c3c:	80fb      	strh	r3, [r7, #6]
 8011c3e:	e018      	b.n	8011c72 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8011c40:	88fb      	ldrh	r3, [r7, #6]
 8011c42:	3b20      	subs	r3, #32
 8011c44:	80fb      	strh	r3, [r7, #6]
 8011c46:	e014      	b.n	8011c72 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8011c48:	88fb      	ldrh	r3, [r7, #6]
 8011c4a:	3b30      	subs	r3, #48	; 0x30
 8011c4c:	80fb      	strh	r3, [r7, #6]
 8011c4e:	e010      	b.n	8011c72 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8011c50:	88fb      	ldrh	r3, [r7, #6]
 8011c52:	3b1a      	subs	r3, #26
 8011c54:	80fb      	strh	r3, [r7, #6]
 8011c56:	e00c      	b.n	8011c72 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8011c58:	88fb      	ldrh	r3, [r7, #6]
 8011c5a:	3308      	adds	r3, #8
 8011c5c:	80fb      	strh	r3, [r7, #6]
 8011c5e:	e008      	b.n	8011c72 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8011c60:	88fb      	ldrh	r3, [r7, #6]
 8011c62:	3b50      	subs	r3, #80	; 0x50
 8011c64:	80fb      	strh	r3, [r7, #6]
 8011c66:	e004      	b.n	8011c72 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8011c68:	88fb      	ldrh	r3, [r7, #6]
 8011c6a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8011c6e:	80fb      	strh	r3, [r7, #6]
 8011c70:	bf00      	nop
			}
			break;
 8011c72:	e008      	b.n	8011c86 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011c74:	89fb      	ldrh	r3, [r7, #14]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d195      	bne.n	8011ba6 <ff_wtoupper+0x1a>
 8011c7a:	8a3b      	ldrh	r3, [r7, #16]
 8011c7c:	005b      	lsls	r3, r3, #1
 8011c7e:	697a      	ldr	r2, [r7, #20]
 8011c80:	4413      	add	r3, r2
 8011c82:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8011c84:	e78f      	b.n	8011ba6 <ff_wtoupper+0x1a>
			break;
 8011c86:	bf00      	nop
	}

	return chr;
 8011c88:	88fb      	ldrh	r3, [r7, #6]
}
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	371c      	adds	r7, #28
 8011c8e:	46bd      	mov	sp, r7
 8011c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c94:	4770      	bx	lr
 8011c96:	bf00      	nop
 8011c98:	080178a4 	.word	0x080178a4
 8011c9c:	08017a98 	.word	0x08017a98

08011ca0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011ca0:	b480      	push	{r7}
 8011ca2:	b085      	sub	sp, #20
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011caa:	2300      	movs	r3, #0
 8011cac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011cae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011cb2:	2b84      	cmp	r3, #132	; 0x84
 8011cb4:	d005      	beq.n	8011cc2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011cb6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	4413      	add	r3, r2
 8011cbe:	3303      	adds	r3, #3
 8011cc0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011cc2:	68fb      	ldr	r3, [r7, #12]
}
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	3714      	adds	r7, #20
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cce:	4770      	bx	lr

08011cd0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8011cd0:	b480      	push	{r7}
 8011cd2:	b083      	sub	sp, #12
 8011cd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011cd6:	f3ef 8305 	mrs	r3, IPSR
 8011cda:	607b      	str	r3, [r7, #4]
  return(result);
 8011cdc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	bf14      	ite	ne
 8011ce2:	2301      	movne	r3, #1
 8011ce4:	2300      	moveq	r3, #0
 8011ce6:	b2db      	uxtb	r3, r3
}
 8011ce8:	4618      	mov	r0, r3
 8011cea:	370c      	adds	r7, #12
 8011cec:	46bd      	mov	sp, r7
 8011cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf2:	4770      	bx	lr

08011cf4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011cf8:	f001 f916 	bl	8012f28 <vTaskStartScheduler>
  
  return osOK;
 8011cfc:	2300      	movs	r3, #0
}
 8011cfe:	4618      	mov	r0, r3
 8011d00:	bd80      	pop	{r7, pc}

08011d02 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011d02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d04:	b089      	sub	sp, #36	; 0x24
 8011d06:	af04      	add	r7, sp, #16
 8011d08:	6078      	str	r0, [r7, #4]
 8011d0a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	695b      	ldr	r3, [r3, #20]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d020      	beq.n	8011d56 <osThreadCreate+0x54>
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	699b      	ldr	r3, [r3, #24]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d01c      	beq.n	8011d56 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	685c      	ldr	r4, [r3, #4]
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	681d      	ldr	r5, [r3, #0]
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	691e      	ldr	r6, [r3, #16]
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011d2e:	4618      	mov	r0, r3
 8011d30:	f7ff ffb6 	bl	8011ca0 <makeFreeRtosPriority>
 8011d34:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	695b      	ldr	r3, [r3, #20]
 8011d3a:	687a      	ldr	r2, [r7, #4]
 8011d3c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011d3e:	9202      	str	r2, [sp, #8]
 8011d40:	9301      	str	r3, [sp, #4]
 8011d42:	9100      	str	r1, [sp, #0]
 8011d44:	683b      	ldr	r3, [r7, #0]
 8011d46:	4632      	mov	r2, r6
 8011d48:	4629      	mov	r1, r5
 8011d4a:	4620      	mov	r0, r4
 8011d4c:	f000 ff0e 	bl	8012b6c <xTaskCreateStatic>
 8011d50:	4603      	mov	r3, r0
 8011d52:	60fb      	str	r3, [r7, #12]
 8011d54:	e01c      	b.n	8011d90 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	685c      	ldr	r4, [r3, #4]
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011d62:	b29e      	uxth	r6, r3
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	f7ff ff98 	bl	8011ca0 <makeFreeRtosPriority>
 8011d70:	4602      	mov	r2, r0
 8011d72:	f107 030c 	add.w	r3, r7, #12
 8011d76:	9301      	str	r3, [sp, #4]
 8011d78:	9200      	str	r2, [sp, #0]
 8011d7a:	683b      	ldr	r3, [r7, #0]
 8011d7c:	4632      	mov	r2, r6
 8011d7e:	4629      	mov	r1, r5
 8011d80:	4620      	mov	r0, r4
 8011d82:	f000 ff50 	bl	8012c26 <xTaskCreate>
 8011d86:	4603      	mov	r3, r0
 8011d88:	2b01      	cmp	r3, #1
 8011d8a:	d001      	beq.n	8011d90 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	e000      	b.n	8011d92 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011d90:	68fb      	ldr	r3, [r7, #12]
}
 8011d92:	4618      	mov	r0, r3
 8011d94:	3714      	adds	r7, #20
 8011d96:	46bd      	mov	sp, r7
 8011d98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011d9a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8011d9a:	b580      	push	{r7, lr}
 8011d9c:	b084      	sub	sp, #16
 8011d9e:	af00      	add	r7, sp, #0
 8011da0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d001      	beq.n	8011db0 <osDelay+0x16>
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	e000      	b.n	8011db2 <osDelay+0x18>
 8011db0:	2301      	movs	r3, #1
 8011db2:	4618      	mov	r0, r3
 8011db4:	f001 f884 	bl	8012ec0 <vTaskDelay>
  
  return osOK;
 8011db8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011dba:	4618      	mov	r0, r3
 8011dbc:	3710      	adds	r7, #16
 8011dbe:	46bd      	mov	sp, r7
 8011dc0:	bd80      	pop	{r7, pc}

08011dc2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8011dc2:	b590      	push	{r4, r7, lr}
 8011dc4:	b085      	sub	sp, #20
 8011dc6:	af02      	add	r7, sp, #8
 8011dc8:	6078      	str	r0, [r7, #4]
 8011dca:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	689b      	ldr	r3, [r3, #8]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d011      	beq.n	8011df8 <osMessageCreate+0x36>
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	68db      	ldr	r3, [r3, #12]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d00d      	beq.n	8011df8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	6818      	ldr	r0, [r3, #0]
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	6859      	ldr	r1, [r3, #4]
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	689a      	ldr	r2, [r3, #8]
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	68db      	ldr	r3, [r3, #12]
 8011dec:	2400      	movs	r4, #0
 8011dee:	9400      	str	r4, [sp, #0]
 8011df0:	f000 f9e0 	bl	80121b4 <xQueueGenericCreateStatic>
 8011df4:	4603      	mov	r3, r0
 8011df6:	e008      	b.n	8011e0a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	6818      	ldr	r0, [r3, #0]
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	685b      	ldr	r3, [r3, #4]
 8011e00:	2200      	movs	r2, #0
 8011e02:	4619      	mov	r1, r3
 8011e04:	f000 fa4e 	bl	80122a4 <xQueueGenericCreate>
 8011e08:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	370c      	adds	r7, #12
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd90      	pop	{r4, r7, pc}
	...

08011e14 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b086      	sub	sp, #24
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	60f8      	str	r0, [r7, #12]
 8011e1c:	60b9      	str	r1, [r7, #8]
 8011e1e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8011e20:	2300      	movs	r3, #0
 8011e22:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8011e28:	697b      	ldr	r3, [r7, #20]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d101      	bne.n	8011e32 <osMessagePut+0x1e>
    ticks = 1;
 8011e2e:	2301      	movs	r3, #1
 8011e30:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8011e32:	f7ff ff4d 	bl	8011cd0 <inHandlerMode>
 8011e36:	4603      	mov	r3, r0
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d018      	beq.n	8011e6e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8011e3c:	f107 0210 	add.w	r2, r7, #16
 8011e40:	f107 0108 	add.w	r1, r7, #8
 8011e44:	2300      	movs	r3, #0
 8011e46:	68f8      	ldr	r0, [r7, #12]
 8011e48:	f000 fb84 	bl	8012554 <xQueueGenericSendFromISR>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	2b01      	cmp	r3, #1
 8011e50:	d001      	beq.n	8011e56 <osMessagePut+0x42>
      return osErrorOS;
 8011e52:	23ff      	movs	r3, #255	; 0xff
 8011e54:	e018      	b.n	8011e88 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011e56:	693b      	ldr	r3, [r7, #16]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d014      	beq.n	8011e86 <osMessagePut+0x72>
 8011e5c:	4b0c      	ldr	r3, [pc, #48]	; (8011e90 <osMessagePut+0x7c>)
 8011e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e62:	601a      	str	r2, [r3, #0]
 8011e64:	f3bf 8f4f 	dsb	sy
 8011e68:	f3bf 8f6f 	isb	sy
 8011e6c:	e00b      	b.n	8011e86 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8011e6e:	f107 0108 	add.w	r1, r7, #8
 8011e72:	2300      	movs	r3, #0
 8011e74:	697a      	ldr	r2, [r7, #20]
 8011e76:	68f8      	ldr	r0, [r7, #12]
 8011e78:	f000 fa6e 	bl	8012358 <xQueueGenericSend>
 8011e7c:	4603      	mov	r3, r0
 8011e7e:	2b01      	cmp	r3, #1
 8011e80:	d001      	beq.n	8011e86 <osMessagePut+0x72>
      return osErrorOS;
 8011e82:	23ff      	movs	r3, #255	; 0xff
 8011e84:	e000      	b.n	8011e88 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8011e86:	2300      	movs	r3, #0
}
 8011e88:	4618      	mov	r0, r3
 8011e8a:	3718      	adds	r7, #24
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	bd80      	pop	{r7, pc}
 8011e90:	e000ed04 	.word	0xe000ed04

08011e94 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8011e94:	b590      	push	{r4, r7, lr}
 8011e96:	b08b      	sub	sp, #44	; 0x2c
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	60f8      	str	r0, [r7, #12]
 8011e9c:	60b9      	str	r1, [r7, #8]
 8011e9e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8011ea0:	68bb      	ldr	r3, [r7, #8]
 8011ea2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8011ea8:	68bb      	ldr	r3, [r7, #8]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d10a      	bne.n	8011ec4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8011eae:	2380      	movs	r3, #128	; 0x80
 8011eb0:	617b      	str	r3, [r7, #20]
    return event;
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	461c      	mov	r4, r3
 8011eb6:	f107 0314 	add.w	r3, r7, #20
 8011eba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011ebe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011ec2:	e054      	b.n	8011f6e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8011ec8:	2300      	movs	r3, #0
 8011eca:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ed2:	d103      	bne.n	8011edc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8011ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8011ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8011eda:	e009      	b.n	8011ef0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d006      	beq.n	8011ef0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8011ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d101      	bne.n	8011ef0 <osMessageGet+0x5c>
      ticks = 1;
 8011eec:	2301      	movs	r3, #1
 8011eee:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8011ef0:	f7ff feee 	bl	8011cd0 <inHandlerMode>
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d01c      	beq.n	8011f34 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8011efa:	f107 0220 	add.w	r2, r7, #32
 8011efe:	f107 0314 	add.w	r3, r7, #20
 8011f02:	3304      	adds	r3, #4
 8011f04:	4619      	mov	r1, r3
 8011f06:	68b8      	ldr	r0, [r7, #8]
 8011f08:	f000 fca0 	bl	801284c <xQueueReceiveFromISR>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	2b01      	cmp	r3, #1
 8011f10:	d102      	bne.n	8011f18 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8011f12:	2310      	movs	r3, #16
 8011f14:	617b      	str	r3, [r7, #20]
 8011f16:	e001      	b.n	8011f1c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8011f18:	2300      	movs	r3, #0
 8011f1a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011f1c:	6a3b      	ldr	r3, [r7, #32]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d01d      	beq.n	8011f5e <osMessageGet+0xca>
 8011f22:	4b15      	ldr	r3, [pc, #84]	; (8011f78 <osMessageGet+0xe4>)
 8011f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f28:	601a      	str	r2, [r3, #0]
 8011f2a:	f3bf 8f4f 	dsb	sy
 8011f2e:	f3bf 8f6f 	isb	sy
 8011f32:	e014      	b.n	8011f5e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8011f34:	f107 0314 	add.w	r3, r7, #20
 8011f38:	3304      	adds	r3, #4
 8011f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f3c:	4619      	mov	r1, r3
 8011f3e:	68b8      	ldr	r0, [r7, #8]
 8011f40:	f000 fba4 	bl	801268c <xQueueReceive>
 8011f44:	4603      	mov	r3, r0
 8011f46:	2b01      	cmp	r3, #1
 8011f48:	d102      	bne.n	8011f50 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8011f4a:	2310      	movs	r3, #16
 8011f4c:	617b      	str	r3, [r7, #20]
 8011f4e:	e006      	b.n	8011f5e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8011f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d101      	bne.n	8011f5a <osMessageGet+0xc6>
 8011f56:	2300      	movs	r3, #0
 8011f58:	e000      	b.n	8011f5c <osMessageGet+0xc8>
 8011f5a:	2340      	movs	r3, #64	; 0x40
 8011f5c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	461c      	mov	r4, r3
 8011f62:	f107 0314 	add.w	r3, r7, #20
 8011f66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011f6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011f6e:	68f8      	ldr	r0, [r7, #12]
 8011f70:	372c      	adds	r7, #44	; 0x2c
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bd90      	pop	{r4, r7, pc}
 8011f76:	bf00      	nop
 8011f78:	e000ed04 	.word	0xe000ed04

08011f7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011f7c:	b480      	push	{r7}
 8011f7e:	b083      	sub	sp, #12
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	f103 0208 	add.w	r2, r3, #8
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	f04f 32ff 	mov.w	r2, #4294967295
 8011f94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	f103 0208 	add.w	r2, r3, #8
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	f103 0208 	add.w	r2, r3, #8
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	2200      	movs	r2, #0
 8011fae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011fb0:	bf00      	nop
 8011fb2:	370c      	adds	r7, #12
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fba:	4770      	bx	lr

08011fbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011fbc:	b480      	push	{r7}
 8011fbe:	b083      	sub	sp, #12
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011fca:	bf00      	nop
 8011fcc:	370c      	adds	r7, #12
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd4:	4770      	bx	lr

08011fd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011fd6:	b480      	push	{r7}
 8011fd8:	b085      	sub	sp, #20
 8011fda:	af00      	add	r7, sp, #0
 8011fdc:	6078      	str	r0, [r7, #4]
 8011fde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	685b      	ldr	r3, [r3, #4]
 8011fe4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	68fa      	ldr	r2, [r7, #12]
 8011fea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	689a      	ldr	r2, [r3, #8]
 8011ff0:	683b      	ldr	r3, [r7, #0]
 8011ff2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	689b      	ldr	r3, [r3, #8]
 8011ff8:	683a      	ldr	r2, [r7, #0]
 8011ffa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	683a      	ldr	r2, [r7, #0]
 8012000:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012002:	683b      	ldr	r3, [r7, #0]
 8012004:	687a      	ldr	r2, [r7, #4]
 8012006:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	1c5a      	adds	r2, r3, #1
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	601a      	str	r2, [r3, #0]
}
 8012012:	bf00      	nop
 8012014:	3714      	adds	r7, #20
 8012016:	46bd      	mov	sp, r7
 8012018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201c:	4770      	bx	lr

0801201e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801201e:	b480      	push	{r7}
 8012020:	b085      	sub	sp, #20
 8012022:	af00      	add	r7, sp, #0
 8012024:	6078      	str	r0, [r7, #4]
 8012026:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012028:	683b      	ldr	r3, [r7, #0]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801202e:	68bb      	ldr	r3, [r7, #8]
 8012030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012034:	d103      	bne.n	801203e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	691b      	ldr	r3, [r3, #16]
 801203a:	60fb      	str	r3, [r7, #12]
 801203c:	e00c      	b.n	8012058 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	3308      	adds	r3, #8
 8012042:	60fb      	str	r3, [r7, #12]
 8012044:	e002      	b.n	801204c <vListInsert+0x2e>
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	685b      	ldr	r3, [r3, #4]
 801204a:	60fb      	str	r3, [r7, #12]
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	685b      	ldr	r3, [r3, #4]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	68ba      	ldr	r2, [r7, #8]
 8012054:	429a      	cmp	r2, r3
 8012056:	d2f6      	bcs.n	8012046 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	685a      	ldr	r2, [r3, #4]
 801205c:	683b      	ldr	r3, [r7, #0]
 801205e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012060:	683b      	ldr	r3, [r7, #0]
 8012062:	685b      	ldr	r3, [r3, #4]
 8012064:	683a      	ldr	r2, [r7, #0]
 8012066:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012068:	683b      	ldr	r3, [r7, #0]
 801206a:	68fa      	ldr	r2, [r7, #12]
 801206c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	683a      	ldr	r2, [r7, #0]
 8012072:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012074:	683b      	ldr	r3, [r7, #0]
 8012076:	687a      	ldr	r2, [r7, #4]
 8012078:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	1c5a      	adds	r2, r3, #1
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	601a      	str	r2, [r3, #0]
}
 8012084:	bf00      	nop
 8012086:	3714      	adds	r7, #20
 8012088:	46bd      	mov	sp, r7
 801208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208e:	4770      	bx	lr

08012090 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012090:	b480      	push	{r7}
 8012092:	b085      	sub	sp, #20
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	691b      	ldr	r3, [r3, #16]
 801209c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	685b      	ldr	r3, [r3, #4]
 80120a2:	687a      	ldr	r2, [r7, #4]
 80120a4:	6892      	ldr	r2, [r2, #8]
 80120a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	689b      	ldr	r3, [r3, #8]
 80120ac:	687a      	ldr	r2, [r7, #4]
 80120ae:	6852      	ldr	r2, [r2, #4]
 80120b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	685b      	ldr	r3, [r3, #4]
 80120b6:	687a      	ldr	r2, [r7, #4]
 80120b8:	429a      	cmp	r2, r3
 80120ba:	d103      	bne.n	80120c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	689a      	ldr	r2, [r3, #8]
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	2200      	movs	r2, #0
 80120c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	1e5a      	subs	r2, r3, #1
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	681b      	ldr	r3, [r3, #0]
}
 80120d8:	4618      	mov	r0, r3
 80120da:	3714      	adds	r7, #20
 80120dc:	46bd      	mov	sp, r7
 80120de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e2:	4770      	bx	lr

080120e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b084      	sub	sp, #16
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
 80120ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d10a      	bne.n	801210e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80120f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120fc:	f383 8811 	msr	BASEPRI, r3
 8012100:	f3bf 8f6f 	isb	sy
 8012104:	f3bf 8f4f 	dsb	sy
 8012108:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801210a:	bf00      	nop
 801210c:	e7fe      	b.n	801210c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801210e:	f001 fd61 	bl	8013bd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	681a      	ldr	r2, [r3, #0]
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801211a:	68f9      	ldr	r1, [r7, #12]
 801211c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801211e:	fb01 f303 	mul.w	r3, r1, r3
 8012122:	441a      	add	r2, r3
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	2200      	movs	r2, #0
 801212c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	681a      	ldr	r2, [r3, #0]
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	681a      	ldr	r2, [r3, #0]
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801213e:	3b01      	subs	r3, #1
 8012140:	68f9      	ldr	r1, [r7, #12]
 8012142:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012144:	fb01 f303 	mul.w	r3, r1, r3
 8012148:	441a      	add	r2, r3
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	22ff      	movs	r2, #255	; 0xff
 8012152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	22ff      	movs	r2, #255	; 0xff
 801215a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801215e:	683b      	ldr	r3, [r7, #0]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d114      	bne.n	801218e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	691b      	ldr	r3, [r3, #16]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d01a      	beq.n	80121a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	3310      	adds	r3, #16
 8012170:	4618      	mov	r0, r3
 8012172:	f001 f93b 	bl	80133ec <xTaskRemoveFromEventList>
 8012176:	4603      	mov	r3, r0
 8012178:	2b00      	cmp	r3, #0
 801217a:	d012      	beq.n	80121a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801217c:	4b0c      	ldr	r3, [pc, #48]	; (80121b0 <xQueueGenericReset+0xcc>)
 801217e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012182:	601a      	str	r2, [r3, #0]
 8012184:	f3bf 8f4f 	dsb	sy
 8012188:	f3bf 8f6f 	isb	sy
 801218c:	e009      	b.n	80121a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	3310      	adds	r3, #16
 8012192:	4618      	mov	r0, r3
 8012194:	f7ff fef2 	bl	8011f7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	3324      	adds	r3, #36	; 0x24
 801219c:	4618      	mov	r0, r3
 801219e:	f7ff feed 	bl	8011f7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80121a2:	f001 fd47 	bl	8013c34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80121a6:	2301      	movs	r3, #1
}
 80121a8:	4618      	mov	r0, r3
 80121aa:	3710      	adds	r7, #16
 80121ac:	46bd      	mov	sp, r7
 80121ae:	bd80      	pop	{r7, pc}
 80121b0:	e000ed04 	.word	0xe000ed04

080121b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b08e      	sub	sp, #56	; 0x38
 80121b8:	af02      	add	r7, sp, #8
 80121ba:	60f8      	str	r0, [r7, #12]
 80121bc:	60b9      	str	r1, [r7, #8]
 80121be:	607a      	str	r2, [r7, #4]
 80121c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d10a      	bne.n	80121de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80121c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121cc:	f383 8811 	msr	BASEPRI, r3
 80121d0:	f3bf 8f6f 	isb	sy
 80121d4:	f3bf 8f4f 	dsb	sy
 80121d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80121da:	bf00      	nop
 80121dc:	e7fe      	b.n	80121dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80121de:	683b      	ldr	r3, [r7, #0]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d10a      	bne.n	80121fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80121e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121e8:	f383 8811 	msr	BASEPRI, r3
 80121ec:	f3bf 8f6f 	isb	sy
 80121f0:	f3bf 8f4f 	dsb	sy
 80121f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80121f6:	bf00      	nop
 80121f8:	e7fe      	b.n	80121f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d002      	beq.n	8012206 <xQueueGenericCreateStatic+0x52>
 8012200:	68bb      	ldr	r3, [r7, #8]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d001      	beq.n	801220a <xQueueGenericCreateStatic+0x56>
 8012206:	2301      	movs	r3, #1
 8012208:	e000      	b.n	801220c <xQueueGenericCreateStatic+0x58>
 801220a:	2300      	movs	r3, #0
 801220c:	2b00      	cmp	r3, #0
 801220e:	d10a      	bne.n	8012226 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8012210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012214:	f383 8811 	msr	BASEPRI, r3
 8012218:	f3bf 8f6f 	isb	sy
 801221c:	f3bf 8f4f 	dsb	sy
 8012220:	623b      	str	r3, [r7, #32]
}
 8012222:	bf00      	nop
 8012224:	e7fe      	b.n	8012224 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d102      	bne.n	8012232 <xQueueGenericCreateStatic+0x7e>
 801222c:	68bb      	ldr	r3, [r7, #8]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d101      	bne.n	8012236 <xQueueGenericCreateStatic+0x82>
 8012232:	2301      	movs	r3, #1
 8012234:	e000      	b.n	8012238 <xQueueGenericCreateStatic+0x84>
 8012236:	2300      	movs	r3, #0
 8012238:	2b00      	cmp	r3, #0
 801223a:	d10a      	bne.n	8012252 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801223c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012240:	f383 8811 	msr	BASEPRI, r3
 8012244:	f3bf 8f6f 	isb	sy
 8012248:	f3bf 8f4f 	dsb	sy
 801224c:	61fb      	str	r3, [r7, #28]
}
 801224e:	bf00      	nop
 8012250:	e7fe      	b.n	8012250 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012252:	2348      	movs	r3, #72	; 0x48
 8012254:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012256:	697b      	ldr	r3, [r7, #20]
 8012258:	2b48      	cmp	r3, #72	; 0x48
 801225a:	d00a      	beq.n	8012272 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801225c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012260:	f383 8811 	msr	BASEPRI, r3
 8012264:	f3bf 8f6f 	isb	sy
 8012268:	f3bf 8f4f 	dsb	sy
 801226c:	61bb      	str	r3, [r7, #24]
}
 801226e:	bf00      	nop
 8012270:	e7fe      	b.n	8012270 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012272:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012274:	683b      	ldr	r3, [r7, #0]
 8012276:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801227a:	2b00      	cmp	r3, #0
 801227c:	d00d      	beq.n	801229a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801227e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012280:	2201      	movs	r2, #1
 8012282:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012286:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801228a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801228c:	9300      	str	r3, [sp, #0]
 801228e:	4613      	mov	r3, r2
 8012290:	687a      	ldr	r2, [r7, #4]
 8012292:	68b9      	ldr	r1, [r7, #8]
 8012294:	68f8      	ldr	r0, [r7, #12]
 8012296:	f000 f83f 	bl	8012318 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801229a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801229c:	4618      	mov	r0, r3
 801229e:	3730      	adds	r7, #48	; 0x30
 80122a0:	46bd      	mov	sp, r7
 80122a2:	bd80      	pop	{r7, pc}

080122a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b08a      	sub	sp, #40	; 0x28
 80122a8:	af02      	add	r7, sp, #8
 80122aa:	60f8      	str	r0, [r7, #12]
 80122ac:	60b9      	str	r1, [r7, #8]
 80122ae:	4613      	mov	r3, r2
 80122b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d10a      	bne.n	80122ce <xQueueGenericCreate+0x2a>
	__asm volatile
 80122b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122bc:	f383 8811 	msr	BASEPRI, r3
 80122c0:	f3bf 8f6f 	isb	sy
 80122c4:	f3bf 8f4f 	dsb	sy
 80122c8:	613b      	str	r3, [r7, #16]
}
 80122ca:	bf00      	nop
 80122cc:	e7fe      	b.n	80122cc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	68ba      	ldr	r2, [r7, #8]
 80122d2:	fb02 f303 	mul.w	r3, r2, r3
 80122d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80122d8:	69fb      	ldr	r3, [r7, #28]
 80122da:	3348      	adds	r3, #72	; 0x48
 80122dc:	4618      	mov	r0, r3
 80122de:	f001 fd9b 	bl	8013e18 <pvPortMalloc>
 80122e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80122e4:	69bb      	ldr	r3, [r7, #24]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d011      	beq.n	801230e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80122ea:	69bb      	ldr	r3, [r7, #24]
 80122ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80122ee:	697b      	ldr	r3, [r7, #20]
 80122f0:	3348      	adds	r3, #72	; 0x48
 80122f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80122f4:	69bb      	ldr	r3, [r7, #24]
 80122f6:	2200      	movs	r2, #0
 80122f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80122fc:	79fa      	ldrb	r2, [r7, #7]
 80122fe:	69bb      	ldr	r3, [r7, #24]
 8012300:	9300      	str	r3, [sp, #0]
 8012302:	4613      	mov	r3, r2
 8012304:	697a      	ldr	r2, [r7, #20]
 8012306:	68b9      	ldr	r1, [r7, #8]
 8012308:	68f8      	ldr	r0, [r7, #12]
 801230a:	f000 f805 	bl	8012318 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801230e:	69bb      	ldr	r3, [r7, #24]
	}
 8012310:	4618      	mov	r0, r3
 8012312:	3720      	adds	r7, #32
 8012314:	46bd      	mov	sp, r7
 8012316:	bd80      	pop	{r7, pc}

08012318 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b084      	sub	sp, #16
 801231c:	af00      	add	r7, sp, #0
 801231e:	60f8      	str	r0, [r7, #12]
 8012320:	60b9      	str	r1, [r7, #8]
 8012322:	607a      	str	r2, [r7, #4]
 8012324:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012326:	68bb      	ldr	r3, [r7, #8]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d103      	bne.n	8012334 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801232c:	69bb      	ldr	r3, [r7, #24]
 801232e:	69ba      	ldr	r2, [r7, #24]
 8012330:	601a      	str	r2, [r3, #0]
 8012332:	e002      	b.n	801233a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012334:	69bb      	ldr	r3, [r7, #24]
 8012336:	687a      	ldr	r2, [r7, #4]
 8012338:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801233a:	69bb      	ldr	r3, [r7, #24]
 801233c:	68fa      	ldr	r2, [r7, #12]
 801233e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012340:	69bb      	ldr	r3, [r7, #24]
 8012342:	68ba      	ldr	r2, [r7, #8]
 8012344:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012346:	2101      	movs	r1, #1
 8012348:	69b8      	ldr	r0, [r7, #24]
 801234a:	f7ff fecb 	bl	80120e4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801234e:	bf00      	nop
 8012350:	3710      	adds	r7, #16
 8012352:	46bd      	mov	sp, r7
 8012354:	bd80      	pop	{r7, pc}
	...

08012358 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012358:	b580      	push	{r7, lr}
 801235a:	b08e      	sub	sp, #56	; 0x38
 801235c:	af00      	add	r7, sp, #0
 801235e:	60f8      	str	r0, [r7, #12]
 8012360:	60b9      	str	r1, [r7, #8]
 8012362:	607a      	str	r2, [r7, #4]
 8012364:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012366:	2300      	movs	r3, #0
 8012368:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801236e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012370:	2b00      	cmp	r3, #0
 8012372:	d10a      	bne.n	801238a <xQueueGenericSend+0x32>
	__asm volatile
 8012374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012378:	f383 8811 	msr	BASEPRI, r3
 801237c:	f3bf 8f6f 	isb	sy
 8012380:	f3bf 8f4f 	dsb	sy
 8012384:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012386:	bf00      	nop
 8012388:	e7fe      	b.n	8012388 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801238a:	68bb      	ldr	r3, [r7, #8]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d103      	bne.n	8012398 <xQueueGenericSend+0x40>
 8012390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012394:	2b00      	cmp	r3, #0
 8012396:	d101      	bne.n	801239c <xQueueGenericSend+0x44>
 8012398:	2301      	movs	r3, #1
 801239a:	e000      	b.n	801239e <xQueueGenericSend+0x46>
 801239c:	2300      	movs	r3, #0
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d10a      	bne.n	80123b8 <xQueueGenericSend+0x60>
	__asm volatile
 80123a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123a6:	f383 8811 	msr	BASEPRI, r3
 80123aa:	f3bf 8f6f 	isb	sy
 80123ae:	f3bf 8f4f 	dsb	sy
 80123b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80123b4:	bf00      	nop
 80123b6:	e7fe      	b.n	80123b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80123b8:	683b      	ldr	r3, [r7, #0]
 80123ba:	2b02      	cmp	r3, #2
 80123bc:	d103      	bne.n	80123c6 <xQueueGenericSend+0x6e>
 80123be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80123c2:	2b01      	cmp	r3, #1
 80123c4:	d101      	bne.n	80123ca <xQueueGenericSend+0x72>
 80123c6:	2301      	movs	r3, #1
 80123c8:	e000      	b.n	80123cc <xQueueGenericSend+0x74>
 80123ca:	2300      	movs	r3, #0
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d10a      	bne.n	80123e6 <xQueueGenericSend+0x8e>
	__asm volatile
 80123d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123d4:	f383 8811 	msr	BASEPRI, r3
 80123d8:	f3bf 8f6f 	isb	sy
 80123dc:	f3bf 8f4f 	dsb	sy
 80123e0:	623b      	str	r3, [r7, #32]
}
 80123e2:	bf00      	nop
 80123e4:	e7fe      	b.n	80123e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80123e6:	f001 f9c1 	bl	801376c <xTaskGetSchedulerState>
 80123ea:	4603      	mov	r3, r0
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d102      	bne.n	80123f6 <xQueueGenericSend+0x9e>
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d101      	bne.n	80123fa <xQueueGenericSend+0xa2>
 80123f6:	2301      	movs	r3, #1
 80123f8:	e000      	b.n	80123fc <xQueueGenericSend+0xa4>
 80123fa:	2300      	movs	r3, #0
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d10a      	bne.n	8012416 <xQueueGenericSend+0xbe>
	__asm volatile
 8012400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012404:	f383 8811 	msr	BASEPRI, r3
 8012408:	f3bf 8f6f 	isb	sy
 801240c:	f3bf 8f4f 	dsb	sy
 8012410:	61fb      	str	r3, [r7, #28]
}
 8012412:	bf00      	nop
 8012414:	e7fe      	b.n	8012414 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012416:	f001 fbdd 	bl	8013bd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801241a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801241c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801241e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012422:	429a      	cmp	r2, r3
 8012424:	d302      	bcc.n	801242c <xQueueGenericSend+0xd4>
 8012426:	683b      	ldr	r3, [r7, #0]
 8012428:	2b02      	cmp	r3, #2
 801242a:	d129      	bne.n	8012480 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801242c:	683a      	ldr	r2, [r7, #0]
 801242e:	68b9      	ldr	r1, [r7, #8]
 8012430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012432:	f000 fa8b 	bl	801294c <prvCopyDataToQueue>
 8012436:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801243c:	2b00      	cmp	r3, #0
 801243e:	d010      	beq.n	8012462 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012442:	3324      	adds	r3, #36	; 0x24
 8012444:	4618      	mov	r0, r3
 8012446:	f000 ffd1 	bl	80133ec <xTaskRemoveFromEventList>
 801244a:	4603      	mov	r3, r0
 801244c:	2b00      	cmp	r3, #0
 801244e:	d013      	beq.n	8012478 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012450:	4b3f      	ldr	r3, [pc, #252]	; (8012550 <xQueueGenericSend+0x1f8>)
 8012452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012456:	601a      	str	r2, [r3, #0]
 8012458:	f3bf 8f4f 	dsb	sy
 801245c:	f3bf 8f6f 	isb	sy
 8012460:	e00a      	b.n	8012478 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012464:	2b00      	cmp	r3, #0
 8012466:	d007      	beq.n	8012478 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012468:	4b39      	ldr	r3, [pc, #228]	; (8012550 <xQueueGenericSend+0x1f8>)
 801246a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801246e:	601a      	str	r2, [r3, #0]
 8012470:	f3bf 8f4f 	dsb	sy
 8012474:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012478:	f001 fbdc 	bl	8013c34 <vPortExitCritical>
				return pdPASS;
 801247c:	2301      	movs	r3, #1
 801247e:	e063      	b.n	8012548 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d103      	bne.n	801248e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012486:	f001 fbd5 	bl	8013c34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801248a:	2300      	movs	r3, #0
 801248c:	e05c      	b.n	8012548 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801248e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012490:	2b00      	cmp	r3, #0
 8012492:	d106      	bne.n	80124a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012494:	f107 0314 	add.w	r3, r7, #20
 8012498:	4618      	mov	r0, r3
 801249a:	f001 f809 	bl	80134b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801249e:	2301      	movs	r3, #1
 80124a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80124a2:	f001 fbc7 	bl	8013c34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80124a6:	f000 fda9 	bl	8012ffc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80124aa:	f001 fb93 	bl	8013bd4 <vPortEnterCritical>
 80124ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80124b4:	b25b      	sxtb	r3, r3
 80124b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124ba:	d103      	bne.n	80124c4 <xQueueGenericSend+0x16c>
 80124bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124be:	2200      	movs	r2, #0
 80124c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80124c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80124ca:	b25b      	sxtb	r3, r3
 80124cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124d0:	d103      	bne.n	80124da <xQueueGenericSend+0x182>
 80124d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124d4:	2200      	movs	r2, #0
 80124d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80124da:	f001 fbab 	bl	8013c34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80124de:	1d3a      	adds	r2, r7, #4
 80124e0:	f107 0314 	add.w	r3, r7, #20
 80124e4:	4611      	mov	r1, r2
 80124e6:	4618      	mov	r0, r3
 80124e8:	f000 fff8 	bl	80134dc <xTaskCheckForTimeOut>
 80124ec:	4603      	mov	r3, r0
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d124      	bne.n	801253c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80124f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80124f4:	f000 fb22 	bl	8012b3c <prvIsQueueFull>
 80124f8:	4603      	mov	r3, r0
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d018      	beq.n	8012530 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80124fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012500:	3310      	adds	r3, #16
 8012502:	687a      	ldr	r2, [r7, #4]
 8012504:	4611      	mov	r1, r2
 8012506:	4618      	mov	r0, r3
 8012508:	f000 ff4c 	bl	80133a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801250c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801250e:	f000 faad 	bl	8012a6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012512:	f000 fd81 	bl	8013018 <xTaskResumeAll>
 8012516:	4603      	mov	r3, r0
 8012518:	2b00      	cmp	r3, #0
 801251a:	f47f af7c 	bne.w	8012416 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801251e:	4b0c      	ldr	r3, [pc, #48]	; (8012550 <xQueueGenericSend+0x1f8>)
 8012520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012524:	601a      	str	r2, [r3, #0]
 8012526:	f3bf 8f4f 	dsb	sy
 801252a:	f3bf 8f6f 	isb	sy
 801252e:	e772      	b.n	8012416 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012530:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012532:	f000 fa9b 	bl	8012a6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012536:	f000 fd6f 	bl	8013018 <xTaskResumeAll>
 801253a:	e76c      	b.n	8012416 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801253c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801253e:	f000 fa95 	bl	8012a6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012542:	f000 fd69 	bl	8013018 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012546:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012548:	4618      	mov	r0, r3
 801254a:	3738      	adds	r7, #56	; 0x38
 801254c:	46bd      	mov	sp, r7
 801254e:	bd80      	pop	{r7, pc}
 8012550:	e000ed04 	.word	0xe000ed04

08012554 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b090      	sub	sp, #64	; 0x40
 8012558:	af00      	add	r7, sp, #0
 801255a:	60f8      	str	r0, [r7, #12]
 801255c:	60b9      	str	r1, [r7, #8]
 801255e:	607a      	str	r2, [r7, #4]
 8012560:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8012566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012568:	2b00      	cmp	r3, #0
 801256a:	d10a      	bne.n	8012582 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801256c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012570:	f383 8811 	msr	BASEPRI, r3
 8012574:	f3bf 8f6f 	isb	sy
 8012578:	f3bf 8f4f 	dsb	sy
 801257c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801257e:	bf00      	nop
 8012580:	e7fe      	b.n	8012580 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012582:	68bb      	ldr	r3, [r7, #8]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d103      	bne.n	8012590 <xQueueGenericSendFromISR+0x3c>
 8012588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801258c:	2b00      	cmp	r3, #0
 801258e:	d101      	bne.n	8012594 <xQueueGenericSendFromISR+0x40>
 8012590:	2301      	movs	r3, #1
 8012592:	e000      	b.n	8012596 <xQueueGenericSendFromISR+0x42>
 8012594:	2300      	movs	r3, #0
 8012596:	2b00      	cmp	r3, #0
 8012598:	d10a      	bne.n	80125b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801259a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801259e:	f383 8811 	msr	BASEPRI, r3
 80125a2:	f3bf 8f6f 	isb	sy
 80125a6:	f3bf 8f4f 	dsb	sy
 80125aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80125ac:	bf00      	nop
 80125ae:	e7fe      	b.n	80125ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80125b0:	683b      	ldr	r3, [r7, #0]
 80125b2:	2b02      	cmp	r3, #2
 80125b4:	d103      	bne.n	80125be <xQueueGenericSendFromISR+0x6a>
 80125b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125ba:	2b01      	cmp	r3, #1
 80125bc:	d101      	bne.n	80125c2 <xQueueGenericSendFromISR+0x6e>
 80125be:	2301      	movs	r3, #1
 80125c0:	e000      	b.n	80125c4 <xQueueGenericSendFromISR+0x70>
 80125c2:	2300      	movs	r3, #0
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d10a      	bne.n	80125de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80125c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125cc:	f383 8811 	msr	BASEPRI, r3
 80125d0:	f3bf 8f6f 	isb	sy
 80125d4:	f3bf 8f4f 	dsb	sy
 80125d8:	623b      	str	r3, [r7, #32]
}
 80125da:	bf00      	nop
 80125dc:	e7fe      	b.n	80125dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80125de:	f001 fbdb 	bl	8013d98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80125e2:	f3ef 8211 	mrs	r2, BASEPRI
 80125e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125ea:	f383 8811 	msr	BASEPRI, r3
 80125ee:	f3bf 8f6f 	isb	sy
 80125f2:	f3bf 8f4f 	dsb	sy
 80125f6:	61fa      	str	r2, [r7, #28]
 80125f8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80125fa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80125fc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80125fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012606:	429a      	cmp	r2, r3
 8012608:	d302      	bcc.n	8012610 <xQueueGenericSendFromISR+0xbc>
 801260a:	683b      	ldr	r3, [r7, #0]
 801260c:	2b02      	cmp	r3, #2
 801260e:	d12f      	bne.n	8012670 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012612:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801261a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801261c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801261e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012620:	683a      	ldr	r2, [r7, #0]
 8012622:	68b9      	ldr	r1, [r7, #8]
 8012624:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012626:	f000 f991 	bl	801294c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801262a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801262e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012632:	d112      	bne.n	801265a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012638:	2b00      	cmp	r3, #0
 801263a:	d016      	beq.n	801266a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801263c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801263e:	3324      	adds	r3, #36	; 0x24
 8012640:	4618      	mov	r0, r3
 8012642:	f000 fed3 	bl	80133ec <xTaskRemoveFromEventList>
 8012646:	4603      	mov	r3, r0
 8012648:	2b00      	cmp	r3, #0
 801264a:	d00e      	beq.n	801266a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d00b      	beq.n	801266a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	2201      	movs	r2, #1
 8012656:	601a      	str	r2, [r3, #0]
 8012658:	e007      	b.n	801266a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801265a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801265e:	3301      	adds	r3, #1
 8012660:	b2db      	uxtb	r3, r3
 8012662:	b25a      	sxtb	r2, r3
 8012664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801266a:	2301      	movs	r3, #1
 801266c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801266e:	e001      	b.n	8012674 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012670:	2300      	movs	r3, #0
 8012672:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012676:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012678:	697b      	ldr	r3, [r7, #20]
 801267a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801267e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012682:	4618      	mov	r0, r3
 8012684:	3740      	adds	r7, #64	; 0x40
 8012686:	46bd      	mov	sp, r7
 8012688:	bd80      	pop	{r7, pc}
	...

0801268c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801268c:	b580      	push	{r7, lr}
 801268e:	b08c      	sub	sp, #48	; 0x30
 8012690:	af00      	add	r7, sp, #0
 8012692:	60f8      	str	r0, [r7, #12]
 8012694:	60b9      	str	r1, [r7, #8]
 8012696:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012698:	2300      	movs	r3, #0
 801269a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80126a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d10a      	bne.n	80126bc <xQueueReceive+0x30>
	__asm volatile
 80126a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126aa:	f383 8811 	msr	BASEPRI, r3
 80126ae:	f3bf 8f6f 	isb	sy
 80126b2:	f3bf 8f4f 	dsb	sy
 80126b6:	623b      	str	r3, [r7, #32]
}
 80126b8:	bf00      	nop
 80126ba:	e7fe      	b.n	80126ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80126bc:	68bb      	ldr	r3, [r7, #8]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d103      	bne.n	80126ca <xQueueReceive+0x3e>
 80126c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d101      	bne.n	80126ce <xQueueReceive+0x42>
 80126ca:	2301      	movs	r3, #1
 80126cc:	e000      	b.n	80126d0 <xQueueReceive+0x44>
 80126ce:	2300      	movs	r3, #0
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d10a      	bne.n	80126ea <xQueueReceive+0x5e>
	__asm volatile
 80126d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126d8:	f383 8811 	msr	BASEPRI, r3
 80126dc:	f3bf 8f6f 	isb	sy
 80126e0:	f3bf 8f4f 	dsb	sy
 80126e4:	61fb      	str	r3, [r7, #28]
}
 80126e6:	bf00      	nop
 80126e8:	e7fe      	b.n	80126e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80126ea:	f001 f83f 	bl	801376c <xTaskGetSchedulerState>
 80126ee:	4603      	mov	r3, r0
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d102      	bne.n	80126fa <xQueueReceive+0x6e>
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d101      	bne.n	80126fe <xQueueReceive+0x72>
 80126fa:	2301      	movs	r3, #1
 80126fc:	e000      	b.n	8012700 <xQueueReceive+0x74>
 80126fe:	2300      	movs	r3, #0
 8012700:	2b00      	cmp	r3, #0
 8012702:	d10a      	bne.n	801271a <xQueueReceive+0x8e>
	__asm volatile
 8012704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012708:	f383 8811 	msr	BASEPRI, r3
 801270c:	f3bf 8f6f 	isb	sy
 8012710:	f3bf 8f4f 	dsb	sy
 8012714:	61bb      	str	r3, [r7, #24]
}
 8012716:	bf00      	nop
 8012718:	e7fe      	b.n	8012718 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801271a:	f001 fa5b 	bl	8013bd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801271e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012722:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012726:	2b00      	cmp	r3, #0
 8012728:	d01f      	beq.n	801276a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801272a:	68b9      	ldr	r1, [r7, #8]
 801272c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801272e:	f000 f977 	bl	8012a20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012734:	1e5a      	subs	r2, r3, #1
 8012736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012738:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801273a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801273c:	691b      	ldr	r3, [r3, #16]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d00f      	beq.n	8012762 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012744:	3310      	adds	r3, #16
 8012746:	4618      	mov	r0, r3
 8012748:	f000 fe50 	bl	80133ec <xTaskRemoveFromEventList>
 801274c:	4603      	mov	r3, r0
 801274e:	2b00      	cmp	r3, #0
 8012750:	d007      	beq.n	8012762 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012752:	4b3d      	ldr	r3, [pc, #244]	; (8012848 <xQueueReceive+0x1bc>)
 8012754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012758:	601a      	str	r2, [r3, #0]
 801275a:	f3bf 8f4f 	dsb	sy
 801275e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012762:	f001 fa67 	bl	8013c34 <vPortExitCritical>
				return pdPASS;
 8012766:	2301      	movs	r3, #1
 8012768:	e069      	b.n	801283e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d103      	bne.n	8012778 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012770:	f001 fa60 	bl	8013c34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012774:	2300      	movs	r3, #0
 8012776:	e062      	b.n	801283e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801277a:	2b00      	cmp	r3, #0
 801277c:	d106      	bne.n	801278c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801277e:	f107 0310 	add.w	r3, r7, #16
 8012782:	4618      	mov	r0, r3
 8012784:	f000 fe94 	bl	80134b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012788:	2301      	movs	r3, #1
 801278a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801278c:	f001 fa52 	bl	8013c34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012790:	f000 fc34 	bl	8012ffc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012794:	f001 fa1e 	bl	8013bd4 <vPortEnterCritical>
 8012798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801279a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801279e:	b25b      	sxtb	r3, r3
 80127a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127a4:	d103      	bne.n	80127ae <xQueueReceive+0x122>
 80127a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127a8:	2200      	movs	r2, #0
 80127aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80127ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80127b4:	b25b      	sxtb	r3, r3
 80127b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127ba:	d103      	bne.n	80127c4 <xQueueReceive+0x138>
 80127bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127be:	2200      	movs	r2, #0
 80127c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80127c4:	f001 fa36 	bl	8013c34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80127c8:	1d3a      	adds	r2, r7, #4
 80127ca:	f107 0310 	add.w	r3, r7, #16
 80127ce:	4611      	mov	r1, r2
 80127d0:	4618      	mov	r0, r3
 80127d2:	f000 fe83 	bl	80134dc <xTaskCheckForTimeOut>
 80127d6:	4603      	mov	r3, r0
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d123      	bne.n	8012824 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80127dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80127de:	f000 f997 	bl	8012b10 <prvIsQueueEmpty>
 80127e2:	4603      	mov	r3, r0
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d017      	beq.n	8012818 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80127e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ea:	3324      	adds	r3, #36	; 0x24
 80127ec:	687a      	ldr	r2, [r7, #4]
 80127ee:	4611      	mov	r1, r2
 80127f0:	4618      	mov	r0, r3
 80127f2:	f000 fdd7 	bl	80133a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80127f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80127f8:	f000 f938 	bl	8012a6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80127fc:	f000 fc0c 	bl	8013018 <xTaskResumeAll>
 8012800:	4603      	mov	r3, r0
 8012802:	2b00      	cmp	r3, #0
 8012804:	d189      	bne.n	801271a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8012806:	4b10      	ldr	r3, [pc, #64]	; (8012848 <xQueueReceive+0x1bc>)
 8012808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801280c:	601a      	str	r2, [r3, #0]
 801280e:	f3bf 8f4f 	dsb	sy
 8012812:	f3bf 8f6f 	isb	sy
 8012816:	e780      	b.n	801271a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801281a:	f000 f927 	bl	8012a6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801281e:	f000 fbfb 	bl	8013018 <xTaskResumeAll>
 8012822:	e77a      	b.n	801271a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012826:	f000 f921 	bl	8012a6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801282a:	f000 fbf5 	bl	8013018 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801282e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012830:	f000 f96e 	bl	8012b10 <prvIsQueueEmpty>
 8012834:	4603      	mov	r3, r0
 8012836:	2b00      	cmp	r3, #0
 8012838:	f43f af6f 	beq.w	801271a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801283c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801283e:	4618      	mov	r0, r3
 8012840:	3730      	adds	r7, #48	; 0x30
 8012842:	46bd      	mov	sp, r7
 8012844:	bd80      	pop	{r7, pc}
 8012846:	bf00      	nop
 8012848:	e000ed04 	.word	0xe000ed04

0801284c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801284c:	b580      	push	{r7, lr}
 801284e:	b08e      	sub	sp, #56	; 0x38
 8012850:	af00      	add	r7, sp, #0
 8012852:	60f8      	str	r0, [r7, #12]
 8012854:	60b9      	str	r1, [r7, #8]
 8012856:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801285c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801285e:	2b00      	cmp	r3, #0
 8012860:	d10a      	bne.n	8012878 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8012862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012866:	f383 8811 	msr	BASEPRI, r3
 801286a:	f3bf 8f6f 	isb	sy
 801286e:	f3bf 8f4f 	dsb	sy
 8012872:	623b      	str	r3, [r7, #32]
}
 8012874:	bf00      	nop
 8012876:	e7fe      	b.n	8012876 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012878:	68bb      	ldr	r3, [r7, #8]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d103      	bne.n	8012886 <xQueueReceiveFromISR+0x3a>
 801287e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012882:	2b00      	cmp	r3, #0
 8012884:	d101      	bne.n	801288a <xQueueReceiveFromISR+0x3e>
 8012886:	2301      	movs	r3, #1
 8012888:	e000      	b.n	801288c <xQueueReceiveFromISR+0x40>
 801288a:	2300      	movs	r3, #0
 801288c:	2b00      	cmp	r3, #0
 801288e:	d10a      	bne.n	80128a6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8012890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012894:	f383 8811 	msr	BASEPRI, r3
 8012898:	f3bf 8f6f 	isb	sy
 801289c:	f3bf 8f4f 	dsb	sy
 80128a0:	61fb      	str	r3, [r7, #28]
}
 80128a2:	bf00      	nop
 80128a4:	e7fe      	b.n	80128a4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80128a6:	f001 fa77 	bl	8013d98 <vPortValidateInterruptPriority>
	__asm volatile
 80128aa:	f3ef 8211 	mrs	r2, BASEPRI
 80128ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128b2:	f383 8811 	msr	BASEPRI, r3
 80128b6:	f3bf 8f6f 	isb	sy
 80128ba:	f3bf 8f4f 	dsb	sy
 80128be:	61ba      	str	r2, [r7, #24]
 80128c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80128c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80128c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80128c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80128cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d02f      	beq.n	8012932 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80128d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80128d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80128dc:	68b9      	ldr	r1, [r7, #8]
 80128de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80128e0:	f000 f89e 	bl	8012a20 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80128e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128e6:	1e5a      	subs	r2, r3, #1
 80128e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80128ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80128f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128f4:	d112      	bne.n	801291c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80128f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128f8:	691b      	ldr	r3, [r3, #16]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d016      	beq.n	801292c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80128fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012900:	3310      	adds	r3, #16
 8012902:	4618      	mov	r0, r3
 8012904:	f000 fd72 	bl	80133ec <xTaskRemoveFromEventList>
 8012908:	4603      	mov	r3, r0
 801290a:	2b00      	cmp	r3, #0
 801290c:	d00e      	beq.n	801292c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d00b      	beq.n	801292c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	2201      	movs	r2, #1
 8012918:	601a      	str	r2, [r3, #0]
 801291a:	e007      	b.n	801292c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801291c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012920:	3301      	adds	r3, #1
 8012922:	b2db      	uxtb	r3, r3
 8012924:	b25a      	sxtb	r2, r3
 8012926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801292c:	2301      	movs	r3, #1
 801292e:	637b      	str	r3, [r7, #52]	; 0x34
 8012930:	e001      	b.n	8012936 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8012932:	2300      	movs	r3, #0
 8012934:	637b      	str	r3, [r7, #52]	; 0x34
 8012936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012938:	613b      	str	r3, [r7, #16]
	__asm volatile
 801293a:	693b      	ldr	r3, [r7, #16]
 801293c:	f383 8811 	msr	BASEPRI, r3
}
 8012940:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012944:	4618      	mov	r0, r3
 8012946:	3738      	adds	r7, #56	; 0x38
 8012948:	46bd      	mov	sp, r7
 801294a:	bd80      	pop	{r7, pc}

0801294c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801294c:	b580      	push	{r7, lr}
 801294e:	b086      	sub	sp, #24
 8012950:	af00      	add	r7, sp, #0
 8012952:	60f8      	str	r0, [r7, #12]
 8012954:	60b9      	str	r1, [r7, #8]
 8012956:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012958:	2300      	movs	r3, #0
 801295a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012960:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012966:	2b00      	cmp	r3, #0
 8012968:	d10d      	bne.n	8012986 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d14d      	bne.n	8012a0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	689b      	ldr	r3, [r3, #8]
 8012976:	4618      	mov	r0, r3
 8012978:	f000 ff16 	bl	80137a8 <xTaskPriorityDisinherit>
 801297c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	2200      	movs	r2, #0
 8012982:	609a      	str	r2, [r3, #8]
 8012984:	e043      	b.n	8012a0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d119      	bne.n	80129c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	6858      	ldr	r0, [r3, #4]
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012994:	461a      	mov	r2, r3
 8012996:	68b9      	ldr	r1, [r7, #8]
 8012998:	f002 f8c8 	bl	8014b2c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	685a      	ldr	r2, [r3, #4]
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129a4:	441a      	add	r2, r3
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	685a      	ldr	r2, [r3, #4]
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	689b      	ldr	r3, [r3, #8]
 80129b2:	429a      	cmp	r2, r3
 80129b4:	d32b      	bcc.n	8012a0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	681a      	ldr	r2, [r3, #0]
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	605a      	str	r2, [r3, #4]
 80129be:	e026      	b.n	8012a0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	68d8      	ldr	r0, [r3, #12]
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129c8:	461a      	mov	r2, r3
 80129ca:	68b9      	ldr	r1, [r7, #8]
 80129cc:	f002 f8ae 	bl	8014b2c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	68da      	ldr	r2, [r3, #12]
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129d8:	425b      	negs	r3, r3
 80129da:	441a      	add	r2, r3
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	68da      	ldr	r2, [r3, #12]
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	429a      	cmp	r2, r3
 80129ea:	d207      	bcs.n	80129fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	689a      	ldr	r2, [r3, #8]
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129f4:	425b      	negs	r3, r3
 80129f6:	441a      	add	r2, r3
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	2b02      	cmp	r3, #2
 8012a00:	d105      	bne.n	8012a0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012a02:	693b      	ldr	r3, [r7, #16]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d002      	beq.n	8012a0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012a08:	693b      	ldr	r3, [r7, #16]
 8012a0a:	3b01      	subs	r3, #1
 8012a0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012a0e:	693b      	ldr	r3, [r7, #16]
 8012a10:	1c5a      	adds	r2, r3, #1
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012a16:	697b      	ldr	r3, [r7, #20]
}
 8012a18:	4618      	mov	r0, r3
 8012a1a:	3718      	adds	r7, #24
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	bd80      	pop	{r7, pc}

08012a20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b082      	sub	sp, #8
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
 8012a28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d018      	beq.n	8012a64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	68da      	ldr	r2, [r3, #12]
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a3a:	441a      	add	r2, r3
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	68da      	ldr	r2, [r3, #12]
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	689b      	ldr	r3, [r3, #8]
 8012a48:	429a      	cmp	r2, r3
 8012a4a:	d303      	bcc.n	8012a54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	681a      	ldr	r2, [r3, #0]
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	68d9      	ldr	r1, [r3, #12]
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a5c:	461a      	mov	r2, r3
 8012a5e:	6838      	ldr	r0, [r7, #0]
 8012a60:	f002 f864 	bl	8014b2c <memcpy>
	}
}
 8012a64:	bf00      	nop
 8012a66:	3708      	adds	r7, #8
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	bd80      	pop	{r7, pc}

08012a6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b084      	sub	sp, #16
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012a74:	f001 f8ae 	bl	8013bd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012a7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012a80:	e011      	b.n	8012aa6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d012      	beq.n	8012ab0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	3324      	adds	r3, #36	; 0x24
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f000 fcac 	bl	80133ec <xTaskRemoveFromEventList>
 8012a94:	4603      	mov	r3, r0
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d001      	beq.n	8012a9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012a9a:	f000 fd81 	bl	80135a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012a9e:	7bfb      	ldrb	r3, [r7, #15]
 8012aa0:	3b01      	subs	r3, #1
 8012aa2:	b2db      	uxtb	r3, r3
 8012aa4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	dce9      	bgt.n	8012a82 <prvUnlockQueue+0x16>
 8012aae:	e000      	b.n	8012ab2 <prvUnlockQueue+0x46>
					break;
 8012ab0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	22ff      	movs	r2, #255	; 0xff
 8012ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012aba:	f001 f8bb 	bl	8013c34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012abe:	f001 f889 	bl	8013bd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012ac8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012aca:	e011      	b.n	8012af0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	691b      	ldr	r3, [r3, #16]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d012      	beq.n	8012afa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	3310      	adds	r3, #16
 8012ad8:	4618      	mov	r0, r3
 8012ada:	f000 fc87 	bl	80133ec <xTaskRemoveFromEventList>
 8012ade:	4603      	mov	r3, r0
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d001      	beq.n	8012ae8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012ae4:	f000 fd5c 	bl	80135a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012ae8:	7bbb      	ldrb	r3, [r7, #14]
 8012aea:	3b01      	subs	r3, #1
 8012aec:	b2db      	uxtb	r3, r3
 8012aee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012af0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	dce9      	bgt.n	8012acc <prvUnlockQueue+0x60>
 8012af8:	e000      	b.n	8012afc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012afa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	22ff      	movs	r2, #255	; 0xff
 8012b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012b04:	f001 f896 	bl	8013c34 <vPortExitCritical>
}
 8012b08:	bf00      	nop
 8012b0a:	3710      	adds	r7, #16
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	bd80      	pop	{r7, pc}

08012b10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b084      	sub	sp, #16
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012b18:	f001 f85c 	bl	8013bd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d102      	bne.n	8012b2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012b24:	2301      	movs	r3, #1
 8012b26:	60fb      	str	r3, [r7, #12]
 8012b28:	e001      	b.n	8012b2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012b2e:	f001 f881 	bl	8013c34 <vPortExitCritical>

	return xReturn;
 8012b32:	68fb      	ldr	r3, [r7, #12]
}
 8012b34:	4618      	mov	r0, r3
 8012b36:	3710      	adds	r7, #16
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	bd80      	pop	{r7, pc}

08012b3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b084      	sub	sp, #16
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012b44:	f001 f846 	bl	8013bd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b50:	429a      	cmp	r2, r3
 8012b52:	d102      	bne.n	8012b5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012b54:	2301      	movs	r3, #1
 8012b56:	60fb      	str	r3, [r7, #12]
 8012b58:	e001      	b.n	8012b5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012b5e:	f001 f869 	bl	8013c34 <vPortExitCritical>

	return xReturn;
 8012b62:	68fb      	ldr	r3, [r7, #12]
}
 8012b64:	4618      	mov	r0, r3
 8012b66:	3710      	adds	r7, #16
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	bd80      	pop	{r7, pc}

08012b6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b08e      	sub	sp, #56	; 0x38
 8012b70:	af04      	add	r7, sp, #16
 8012b72:	60f8      	str	r0, [r7, #12]
 8012b74:	60b9      	str	r1, [r7, #8]
 8012b76:	607a      	str	r2, [r7, #4]
 8012b78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d10a      	bne.n	8012b96 <xTaskCreateStatic+0x2a>
	__asm volatile
 8012b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b84:	f383 8811 	msr	BASEPRI, r3
 8012b88:	f3bf 8f6f 	isb	sy
 8012b8c:	f3bf 8f4f 	dsb	sy
 8012b90:	623b      	str	r3, [r7, #32]
}
 8012b92:	bf00      	nop
 8012b94:	e7fe      	b.n	8012b94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8012b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d10a      	bne.n	8012bb2 <xTaskCreateStatic+0x46>
	__asm volatile
 8012b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ba0:	f383 8811 	msr	BASEPRI, r3
 8012ba4:	f3bf 8f6f 	isb	sy
 8012ba8:	f3bf 8f4f 	dsb	sy
 8012bac:	61fb      	str	r3, [r7, #28]
}
 8012bae:	bf00      	nop
 8012bb0:	e7fe      	b.n	8012bb0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012bb2:	23b4      	movs	r3, #180	; 0xb4
 8012bb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012bb6:	693b      	ldr	r3, [r7, #16]
 8012bb8:	2bb4      	cmp	r3, #180	; 0xb4
 8012bba:	d00a      	beq.n	8012bd2 <xTaskCreateStatic+0x66>
	__asm volatile
 8012bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bc0:	f383 8811 	msr	BASEPRI, r3
 8012bc4:	f3bf 8f6f 	isb	sy
 8012bc8:	f3bf 8f4f 	dsb	sy
 8012bcc:	61bb      	str	r3, [r7, #24]
}
 8012bce:	bf00      	nop
 8012bd0:	e7fe      	b.n	8012bd0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012bd2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d01e      	beq.n	8012c18 <xTaskCreateStatic+0xac>
 8012bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d01b      	beq.n	8012c18 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012be2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012be8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bec:	2202      	movs	r2, #2
 8012bee:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	9303      	str	r3, [sp, #12]
 8012bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bf8:	9302      	str	r3, [sp, #8]
 8012bfa:	f107 0314 	add.w	r3, r7, #20
 8012bfe:	9301      	str	r3, [sp, #4]
 8012c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c02:	9300      	str	r3, [sp, #0]
 8012c04:	683b      	ldr	r3, [r7, #0]
 8012c06:	687a      	ldr	r2, [r7, #4]
 8012c08:	68b9      	ldr	r1, [r7, #8]
 8012c0a:	68f8      	ldr	r0, [r7, #12]
 8012c0c:	f000 f850 	bl	8012cb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012c10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c12:	f000 f8eb 	bl	8012dec <prvAddNewTaskToReadyList>
 8012c16:	e001      	b.n	8012c1c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8012c18:	2300      	movs	r3, #0
 8012c1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012c1c:	697b      	ldr	r3, [r7, #20]
	}
 8012c1e:	4618      	mov	r0, r3
 8012c20:	3728      	adds	r7, #40	; 0x28
 8012c22:	46bd      	mov	sp, r7
 8012c24:	bd80      	pop	{r7, pc}

08012c26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012c26:	b580      	push	{r7, lr}
 8012c28:	b08c      	sub	sp, #48	; 0x30
 8012c2a:	af04      	add	r7, sp, #16
 8012c2c:	60f8      	str	r0, [r7, #12]
 8012c2e:	60b9      	str	r1, [r7, #8]
 8012c30:	603b      	str	r3, [r7, #0]
 8012c32:	4613      	mov	r3, r2
 8012c34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012c36:	88fb      	ldrh	r3, [r7, #6]
 8012c38:	009b      	lsls	r3, r3, #2
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	f001 f8ec 	bl	8013e18 <pvPortMalloc>
 8012c40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012c42:	697b      	ldr	r3, [r7, #20]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d00e      	beq.n	8012c66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012c48:	20b4      	movs	r0, #180	; 0xb4
 8012c4a:	f001 f8e5 	bl	8013e18 <pvPortMalloc>
 8012c4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012c50:	69fb      	ldr	r3, [r7, #28]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d003      	beq.n	8012c5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012c56:	69fb      	ldr	r3, [r7, #28]
 8012c58:	697a      	ldr	r2, [r7, #20]
 8012c5a:	631a      	str	r2, [r3, #48]	; 0x30
 8012c5c:	e005      	b.n	8012c6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012c5e:	6978      	ldr	r0, [r7, #20]
 8012c60:	f001 f9a6 	bl	8013fb0 <vPortFree>
 8012c64:	e001      	b.n	8012c6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012c66:	2300      	movs	r3, #0
 8012c68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012c6a:	69fb      	ldr	r3, [r7, #28]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d017      	beq.n	8012ca0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012c70:	69fb      	ldr	r3, [r7, #28]
 8012c72:	2200      	movs	r2, #0
 8012c74:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012c78:	88fa      	ldrh	r2, [r7, #6]
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	9303      	str	r3, [sp, #12]
 8012c7e:	69fb      	ldr	r3, [r7, #28]
 8012c80:	9302      	str	r3, [sp, #8]
 8012c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c84:	9301      	str	r3, [sp, #4]
 8012c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c88:	9300      	str	r3, [sp, #0]
 8012c8a:	683b      	ldr	r3, [r7, #0]
 8012c8c:	68b9      	ldr	r1, [r7, #8]
 8012c8e:	68f8      	ldr	r0, [r7, #12]
 8012c90:	f000 f80e 	bl	8012cb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012c94:	69f8      	ldr	r0, [r7, #28]
 8012c96:	f000 f8a9 	bl	8012dec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012c9a:	2301      	movs	r3, #1
 8012c9c:	61bb      	str	r3, [r7, #24]
 8012c9e:	e002      	b.n	8012ca6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8012ca4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012ca6:	69bb      	ldr	r3, [r7, #24]
	}
 8012ca8:	4618      	mov	r0, r3
 8012caa:	3720      	adds	r7, #32
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bd80      	pop	{r7, pc}

08012cb0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b088      	sub	sp, #32
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	60f8      	str	r0, [r7, #12]
 8012cb8:	60b9      	str	r1, [r7, #8]
 8012cba:	607a      	str	r2, [r7, #4]
 8012cbc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012cc8:	3b01      	subs	r3, #1
 8012cca:	009b      	lsls	r3, r3, #2
 8012ccc:	4413      	add	r3, r2
 8012cce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012cd0:	69bb      	ldr	r3, [r7, #24]
 8012cd2:	f023 0307 	bic.w	r3, r3, #7
 8012cd6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012cd8:	69bb      	ldr	r3, [r7, #24]
 8012cda:	f003 0307 	and.w	r3, r3, #7
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d00a      	beq.n	8012cf8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8012ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ce6:	f383 8811 	msr	BASEPRI, r3
 8012cea:	f3bf 8f6f 	isb	sy
 8012cee:	f3bf 8f4f 	dsb	sy
 8012cf2:	617b      	str	r3, [r7, #20]
}
 8012cf4:	bf00      	nop
 8012cf6:	e7fe      	b.n	8012cf6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012cf8:	68bb      	ldr	r3, [r7, #8]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d01f      	beq.n	8012d3e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012cfe:	2300      	movs	r3, #0
 8012d00:	61fb      	str	r3, [r7, #28]
 8012d02:	e012      	b.n	8012d2a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012d04:	68ba      	ldr	r2, [r7, #8]
 8012d06:	69fb      	ldr	r3, [r7, #28]
 8012d08:	4413      	add	r3, r2
 8012d0a:	7819      	ldrb	r1, [r3, #0]
 8012d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d0e:	69fb      	ldr	r3, [r7, #28]
 8012d10:	4413      	add	r3, r2
 8012d12:	3334      	adds	r3, #52	; 0x34
 8012d14:	460a      	mov	r2, r1
 8012d16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012d18:	68ba      	ldr	r2, [r7, #8]
 8012d1a:	69fb      	ldr	r3, [r7, #28]
 8012d1c:	4413      	add	r3, r2
 8012d1e:	781b      	ldrb	r3, [r3, #0]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d006      	beq.n	8012d32 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012d24:	69fb      	ldr	r3, [r7, #28]
 8012d26:	3301      	adds	r3, #1
 8012d28:	61fb      	str	r3, [r7, #28]
 8012d2a:	69fb      	ldr	r3, [r7, #28]
 8012d2c:	2b0f      	cmp	r3, #15
 8012d2e:	d9e9      	bls.n	8012d04 <prvInitialiseNewTask+0x54>
 8012d30:	e000      	b.n	8012d34 <prvInitialiseNewTask+0x84>
			{
				break;
 8012d32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d36:	2200      	movs	r2, #0
 8012d38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012d3c:	e003      	b.n	8012d46 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d40:	2200      	movs	r2, #0
 8012d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d48:	2b06      	cmp	r3, #6
 8012d4a:	d901      	bls.n	8012d50 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012d4c:	2306      	movs	r3, #6
 8012d4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d5a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d5e:	2200      	movs	r2, #0
 8012d60:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d64:	3304      	adds	r3, #4
 8012d66:	4618      	mov	r0, r3
 8012d68:	f7ff f928 	bl	8011fbc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d6e:	3318      	adds	r3, #24
 8012d70:	4618      	mov	r0, r3
 8012d72:	f7ff f923 	bl	8011fbc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d7e:	f1c3 0207 	rsb	r2, r3, #7
 8012d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d8e:	2200      	movs	r2, #0
 8012d90:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d96:	2200      	movs	r2, #0
 8012d98:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8012d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d9e:	334c      	adds	r3, #76	; 0x4c
 8012da0:	2260      	movs	r2, #96	; 0x60
 8012da2:	2100      	movs	r1, #0
 8012da4:	4618      	mov	r0, r3
 8012da6:	f001 fecf 	bl	8014b48 <memset>
 8012daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dac:	4a0c      	ldr	r2, [pc, #48]	; (8012de0 <prvInitialiseNewTask+0x130>)
 8012dae:	651a      	str	r2, [r3, #80]	; 0x50
 8012db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012db2:	4a0c      	ldr	r2, [pc, #48]	; (8012de4 <prvInitialiseNewTask+0x134>)
 8012db4:	655a      	str	r2, [r3, #84]	; 0x54
 8012db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012db8:	4a0b      	ldr	r2, [pc, #44]	; (8012de8 <prvInitialiseNewTask+0x138>)
 8012dba:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012dbc:	683a      	ldr	r2, [r7, #0]
 8012dbe:	68f9      	ldr	r1, [r7, #12]
 8012dc0:	69b8      	ldr	r0, [r7, #24]
 8012dc2:	f000 fddd 	bl	8013980 <pxPortInitialiseStack>
 8012dc6:	4602      	mov	r2, r0
 8012dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d002      	beq.n	8012dd8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012dd6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012dd8:	bf00      	nop
 8012dda:	3720      	adds	r7, #32
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	bd80      	pop	{r7, pc}
 8012de0:	08017b74 	.word	0x08017b74
 8012de4:	08017b94 	.word	0x08017b94
 8012de8:	08017b54 	.word	0x08017b54

08012dec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012dec:	b580      	push	{r7, lr}
 8012dee:	b082      	sub	sp, #8
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012df4:	f000 feee 	bl	8013bd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012df8:	4b2a      	ldr	r3, [pc, #168]	; (8012ea4 <prvAddNewTaskToReadyList+0xb8>)
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	3301      	adds	r3, #1
 8012dfe:	4a29      	ldr	r2, [pc, #164]	; (8012ea4 <prvAddNewTaskToReadyList+0xb8>)
 8012e00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012e02:	4b29      	ldr	r3, [pc, #164]	; (8012ea8 <prvAddNewTaskToReadyList+0xbc>)
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d109      	bne.n	8012e1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012e0a:	4a27      	ldr	r2, [pc, #156]	; (8012ea8 <prvAddNewTaskToReadyList+0xbc>)
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012e10:	4b24      	ldr	r3, [pc, #144]	; (8012ea4 <prvAddNewTaskToReadyList+0xb8>)
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	2b01      	cmp	r3, #1
 8012e16:	d110      	bne.n	8012e3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012e18:	f000 fbe6 	bl	80135e8 <prvInitialiseTaskLists>
 8012e1c:	e00d      	b.n	8012e3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012e1e:	4b23      	ldr	r3, [pc, #140]	; (8012eac <prvAddNewTaskToReadyList+0xc0>)
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d109      	bne.n	8012e3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012e26:	4b20      	ldr	r3, [pc, #128]	; (8012ea8 <prvAddNewTaskToReadyList+0xbc>)
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e30:	429a      	cmp	r2, r3
 8012e32:	d802      	bhi.n	8012e3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012e34:	4a1c      	ldr	r2, [pc, #112]	; (8012ea8 <prvAddNewTaskToReadyList+0xbc>)
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012e3a:	4b1d      	ldr	r3, [pc, #116]	; (8012eb0 <prvAddNewTaskToReadyList+0xc4>)
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	3301      	adds	r3, #1
 8012e40:	4a1b      	ldr	r2, [pc, #108]	; (8012eb0 <prvAddNewTaskToReadyList+0xc4>)
 8012e42:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e48:	2201      	movs	r2, #1
 8012e4a:	409a      	lsls	r2, r3
 8012e4c:	4b19      	ldr	r3, [pc, #100]	; (8012eb4 <prvAddNewTaskToReadyList+0xc8>)
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	4313      	orrs	r3, r2
 8012e52:	4a18      	ldr	r2, [pc, #96]	; (8012eb4 <prvAddNewTaskToReadyList+0xc8>)
 8012e54:	6013      	str	r3, [r2, #0]
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e5a:	4613      	mov	r3, r2
 8012e5c:	009b      	lsls	r3, r3, #2
 8012e5e:	4413      	add	r3, r2
 8012e60:	009b      	lsls	r3, r3, #2
 8012e62:	4a15      	ldr	r2, [pc, #84]	; (8012eb8 <prvAddNewTaskToReadyList+0xcc>)
 8012e64:	441a      	add	r2, r3
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	3304      	adds	r3, #4
 8012e6a:	4619      	mov	r1, r3
 8012e6c:	4610      	mov	r0, r2
 8012e6e:	f7ff f8b2 	bl	8011fd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012e72:	f000 fedf 	bl	8013c34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012e76:	4b0d      	ldr	r3, [pc, #52]	; (8012eac <prvAddNewTaskToReadyList+0xc0>)
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d00e      	beq.n	8012e9c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012e7e:	4b0a      	ldr	r3, [pc, #40]	; (8012ea8 <prvAddNewTaskToReadyList+0xbc>)
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e88:	429a      	cmp	r2, r3
 8012e8a:	d207      	bcs.n	8012e9c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012e8c:	4b0b      	ldr	r3, [pc, #44]	; (8012ebc <prvAddNewTaskToReadyList+0xd0>)
 8012e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e92:	601a      	str	r2, [r3, #0]
 8012e94:	f3bf 8f4f 	dsb	sy
 8012e98:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012e9c:	bf00      	nop
 8012e9e:	3708      	adds	r7, #8
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bd80      	pop	{r7, pc}
 8012ea4:	20002408 	.word	0x20002408
 8012ea8:	20002308 	.word	0x20002308
 8012eac:	20002414 	.word	0x20002414
 8012eb0:	20002424 	.word	0x20002424
 8012eb4:	20002410 	.word	0x20002410
 8012eb8:	2000230c 	.word	0x2000230c
 8012ebc:	e000ed04 	.word	0xe000ed04

08012ec0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b084      	sub	sp, #16
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012ec8:	2300      	movs	r3, #0
 8012eca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d017      	beq.n	8012f02 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012ed2:	4b13      	ldr	r3, [pc, #76]	; (8012f20 <vTaskDelay+0x60>)
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d00a      	beq.n	8012ef0 <vTaskDelay+0x30>
	__asm volatile
 8012eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ede:	f383 8811 	msr	BASEPRI, r3
 8012ee2:	f3bf 8f6f 	isb	sy
 8012ee6:	f3bf 8f4f 	dsb	sy
 8012eea:	60bb      	str	r3, [r7, #8]
}
 8012eec:	bf00      	nop
 8012eee:	e7fe      	b.n	8012eee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012ef0:	f000 f884 	bl	8012ffc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012ef4:	2100      	movs	r1, #0
 8012ef6:	6878      	ldr	r0, [r7, #4]
 8012ef8:	f000 fcdc 	bl	80138b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012efc:	f000 f88c 	bl	8013018 <xTaskResumeAll>
 8012f00:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d107      	bne.n	8012f18 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8012f08:	4b06      	ldr	r3, [pc, #24]	; (8012f24 <vTaskDelay+0x64>)
 8012f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f0e:	601a      	str	r2, [r3, #0]
 8012f10:	f3bf 8f4f 	dsb	sy
 8012f14:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012f18:	bf00      	nop
 8012f1a:	3710      	adds	r7, #16
 8012f1c:	46bd      	mov	sp, r7
 8012f1e:	bd80      	pop	{r7, pc}
 8012f20:	20002430 	.word	0x20002430
 8012f24:	e000ed04 	.word	0xe000ed04

08012f28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b08a      	sub	sp, #40	; 0x28
 8012f2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012f2e:	2300      	movs	r3, #0
 8012f30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012f32:	2300      	movs	r3, #0
 8012f34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012f36:	463a      	mov	r2, r7
 8012f38:	1d39      	adds	r1, r7, #4
 8012f3a:	f107 0308 	add.w	r3, r7, #8
 8012f3e:	4618      	mov	r0, r3
 8012f40:	f7ee f9d0 	bl	80012e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012f44:	6839      	ldr	r1, [r7, #0]
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	68ba      	ldr	r2, [r7, #8]
 8012f4a:	9202      	str	r2, [sp, #8]
 8012f4c:	9301      	str	r3, [sp, #4]
 8012f4e:	2300      	movs	r3, #0
 8012f50:	9300      	str	r3, [sp, #0]
 8012f52:	2300      	movs	r3, #0
 8012f54:	460a      	mov	r2, r1
 8012f56:	4921      	ldr	r1, [pc, #132]	; (8012fdc <vTaskStartScheduler+0xb4>)
 8012f58:	4821      	ldr	r0, [pc, #132]	; (8012fe0 <vTaskStartScheduler+0xb8>)
 8012f5a:	f7ff fe07 	bl	8012b6c <xTaskCreateStatic>
 8012f5e:	4603      	mov	r3, r0
 8012f60:	4a20      	ldr	r2, [pc, #128]	; (8012fe4 <vTaskStartScheduler+0xbc>)
 8012f62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012f64:	4b1f      	ldr	r3, [pc, #124]	; (8012fe4 <vTaskStartScheduler+0xbc>)
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d002      	beq.n	8012f72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012f6c:	2301      	movs	r3, #1
 8012f6e:	617b      	str	r3, [r7, #20]
 8012f70:	e001      	b.n	8012f76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012f72:	2300      	movs	r3, #0
 8012f74:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012f76:	697b      	ldr	r3, [r7, #20]
 8012f78:	2b01      	cmp	r3, #1
 8012f7a:	d11b      	bne.n	8012fb4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8012f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f80:	f383 8811 	msr	BASEPRI, r3
 8012f84:	f3bf 8f6f 	isb	sy
 8012f88:	f3bf 8f4f 	dsb	sy
 8012f8c:	613b      	str	r3, [r7, #16]
}
 8012f8e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012f90:	4b15      	ldr	r3, [pc, #84]	; (8012fe8 <vTaskStartScheduler+0xc0>)
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	334c      	adds	r3, #76	; 0x4c
 8012f96:	4a15      	ldr	r2, [pc, #84]	; (8012fec <vTaskStartScheduler+0xc4>)
 8012f98:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012f9a:	4b15      	ldr	r3, [pc, #84]	; (8012ff0 <vTaskStartScheduler+0xc8>)
 8012f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8012fa0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012fa2:	4b14      	ldr	r3, [pc, #80]	; (8012ff4 <vTaskStartScheduler+0xcc>)
 8012fa4:	2201      	movs	r2, #1
 8012fa6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012fa8:	4b13      	ldr	r3, [pc, #76]	; (8012ff8 <vTaskStartScheduler+0xd0>)
 8012faa:	2200      	movs	r2, #0
 8012fac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012fae:	f000 fd6f 	bl	8013a90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012fb2:	e00e      	b.n	8012fd2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012fb4:	697b      	ldr	r3, [r7, #20]
 8012fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fba:	d10a      	bne.n	8012fd2 <vTaskStartScheduler+0xaa>
	__asm volatile
 8012fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fc0:	f383 8811 	msr	BASEPRI, r3
 8012fc4:	f3bf 8f6f 	isb	sy
 8012fc8:	f3bf 8f4f 	dsb	sy
 8012fcc:	60fb      	str	r3, [r7, #12]
}
 8012fce:	bf00      	nop
 8012fd0:	e7fe      	b.n	8012fd0 <vTaskStartScheduler+0xa8>
}
 8012fd2:	bf00      	nop
 8012fd4:	3718      	adds	r7, #24
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	bd80      	pop	{r7, pc}
 8012fda:	bf00      	nop
 8012fdc:	080176e0 	.word	0x080176e0
 8012fe0:	080135b9 	.word	0x080135b9
 8012fe4:	2000242c 	.word	0x2000242c
 8012fe8:	20002308 	.word	0x20002308
 8012fec:	200002b4 	.word	0x200002b4
 8012ff0:	20002428 	.word	0x20002428
 8012ff4:	20002414 	.word	0x20002414
 8012ff8:	2000240c 	.word	0x2000240c

08012ffc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012ffc:	b480      	push	{r7}
 8012ffe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013000:	4b04      	ldr	r3, [pc, #16]	; (8013014 <vTaskSuspendAll+0x18>)
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	3301      	adds	r3, #1
 8013006:	4a03      	ldr	r2, [pc, #12]	; (8013014 <vTaskSuspendAll+0x18>)
 8013008:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801300a:	bf00      	nop
 801300c:	46bd      	mov	sp, r7
 801300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013012:	4770      	bx	lr
 8013014:	20002430 	.word	0x20002430

08013018 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013018:	b580      	push	{r7, lr}
 801301a:	b084      	sub	sp, #16
 801301c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801301e:	2300      	movs	r3, #0
 8013020:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013022:	2300      	movs	r3, #0
 8013024:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013026:	4b41      	ldr	r3, [pc, #260]	; (801312c <xTaskResumeAll+0x114>)
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d10a      	bne.n	8013044 <xTaskResumeAll+0x2c>
	__asm volatile
 801302e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013032:	f383 8811 	msr	BASEPRI, r3
 8013036:	f3bf 8f6f 	isb	sy
 801303a:	f3bf 8f4f 	dsb	sy
 801303e:	603b      	str	r3, [r7, #0]
}
 8013040:	bf00      	nop
 8013042:	e7fe      	b.n	8013042 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013044:	f000 fdc6 	bl	8013bd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013048:	4b38      	ldr	r3, [pc, #224]	; (801312c <xTaskResumeAll+0x114>)
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	3b01      	subs	r3, #1
 801304e:	4a37      	ldr	r2, [pc, #220]	; (801312c <xTaskResumeAll+0x114>)
 8013050:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013052:	4b36      	ldr	r3, [pc, #216]	; (801312c <xTaskResumeAll+0x114>)
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d161      	bne.n	801311e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801305a:	4b35      	ldr	r3, [pc, #212]	; (8013130 <xTaskResumeAll+0x118>)
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d05d      	beq.n	801311e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013062:	e02e      	b.n	80130c2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013064:	4b33      	ldr	r3, [pc, #204]	; (8013134 <xTaskResumeAll+0x11c>)
 8013066:	68db      	ldr	r3, [r3, #12]
 8013068:	68db      	ldr	r3, [r3, #12]
 801306a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	3318      	adds	r3, #24
 8013070:	4618      	mov	r0, r3
 8013072:	f7ff f80d 	bl	8012090 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	3304      	adds	r3, #4
 801307a:	4618      	mov	r0, r3
 801307c:	f7ff f808 	bl	8012090 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013084:	2201      	movs	r2, #1
 8013086:	409a      	lsls	r2, r3
 8013088:	4b2b      	ldr	r3, [pc, #172]	; (8013138 <xTaskResumeAll+0x120>)
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	4313      	orrs	r3, r2
 801308e:	4a2a      	ldr	r2, [pc, #168]	; (8013138 <xTaskResumeAll+0x120>)
 8013090:	6013      	str	r3, [r2, #0]
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013096:	4613      	mov	r3, r2
 8013098:	009b      	lsls	r3, r3, #2
 801309a:	4413      	add	r3, r2
 801309c:	009b      	lsls	r3, r3, #2
 801309e:	4a27      	ldr	r2, [pc, #156]	; (801313c <xTaskResumeAll+0x124>)
 80130a0:	441a      	add	r2, r3
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	3304      	adds	r3, #4
 80130a6:	4619      	mov	r1, r3
 80130a8:	4610      	mov	r0, r2
 80130aa:	f7fe ff94 	bl	8011fd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130b2:	4b23      	ldr	r3, [pc, #140]	; (8013140 <xTaskResumeAll+0x128>)
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130b8:	429a      	cmp	r2, r3
 80130ba:	d302      	bcc.n	80130c2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80130bc:	4b21      	ldr	r3, [pc, #132]	; (8013144 <xTaskResumeAll+0x12c>)
 80130be:	2201      	movs	r2, #1
 80130c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80130c2:	4b1c      	ldr	r3, [pc, #112]	; (8013134 <xTaskResumeAll+0x11c>)
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d1cc      	bne.n	8013064 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d001      	beq.n	80130d4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80130d0:	f000 fb2c 	bl	801372c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80130d4:	4b1c      	ldr	r3, [pc, #112]	; (8013148 <xTaskResumeAll+0x130>)
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d010      	beq.n	8013102 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80130e0:	f000 f846 	bl	8013170 <xTaskIncrementTick>
 80130e4:	4603      	mov	r3, r0
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d002      	beq.n	80130f0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80130ea:	4b16      	ldr	r3, [pc, #88]	; (8013144 <xTaskResumeAll+0x12c>)
 80130ec:	2201      	movs	r2, #1
 80130ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	3b01      	subs	r3, #1
 80130f4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d1f1      	bne.n	80130e0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80130fc:	4b12      	ldr	r3, [pc, #72]	; (8013148 <xTaskResumeAll+0x130>)
 80130fe:	2200      	movs	r2, #0
 8013100:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013102:	4b10      	ldr	r3, [pc, #64]	; (8013144 <xTaskResumeAll+0x12c>)
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d009      	beq.n	801311e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801310a:	2301      	movs	r3, #1
 801310c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801310e:	4b0f      	ldr	r3, [pc, #60]	; (801314c <xTaskResumeAll+0x134>)
 8013110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013114:	601a      	str	r2, [r3, #0]
 8013116:	f3bf 8f4f 	dsb	sy
 801311a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801311e:	f000 fd89 	bl	8013c34 <vPortExitCritical>

	return xAlreadyYielded;
 8013122:	68bb      	ldr	r3, [r7, #8]
}
 8013124:	4618      	mov	r0, r3
 8013126:	3710      	adds	r7, #16
 8013128:	46bd      	mov	sp, r7
 801312a:	bd80      	pop	{r7, pc}
 801312c:	20002430 	.word	0x20002430
 8013130:	20002408 	.word	0x20002408
 8013134:	200023c8 	.word	0x200023c8
 8013138:	20002410 	.word	0x20002410
 801313c:	2000230c 	.word	0x2000230c
 8013140:	20002308 	.word	0x20002308
 8013144:	2000241c 	.word	0x2000241c
 8013148:	20002418 	.word	0x20002418
 801314c:	e000ed04 	.word	0xe000ed04

08013150 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013150:	b480      	push	{r7}
 8013152:	b083      	sub	sp, #12
 8013154:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013156:	4b05      	ldr	r3, [pc, #20]	; (801316c <xTaskGetTickCount+0x1c>)
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801315c:	687b      	ldr	r3, [r7, #4]
}
 801315e:	4618      	mov	r0, r3
 8013160:	370c      	adds	r7, #12
 8013162:	46bd      	mov	sp, r7
 8013164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013168:	4770      	bx	lr
 801316a:	bf00      	nop
 801316c:	2000240c 	.word	0x2000240c

08013170 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b086      	sub	sp, #24
 8013174:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013176:	2300      	movs	r3, #0
 8013178:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801317a:	4b4e      	ldr	r3, [pc, #312]	; (80132b4 <xTaskIncrementTick+0x144>)
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	2b00      	cmp	r3, #0
 8013180:	f040 808e 	bne.w	80132a0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013184:	4b4c      	ldr	r3, [pc, #304]	; (80132b8 <xTaskIncrementTick+0x148>)
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	3301      	adds	r3, #1
 801318a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801318c:	4a4a      	ldr	r2, [pc, #296]	; (80132b8 <xTaskIncrementTick+0x148>)
 801318e:	693b      	ldr	r3, [r7, #16]
 8013190:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013192:	693b      	ldr	r3, [r7, #16]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d120      	bne.n	80131da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013198:	4b48      	ldr	r3, [pc, #288]	; (80132bc <xTaskIncrementTick+0x14c>)
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d00a      	beq.n	80131b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80131a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131a6:	f383 8811 	msr	BASEPRI, r3
 80131aa:	f3bf 8f6f 	isb	sy
 80131ae:	f3bf 8f4f 	dsb	sy
 80131b2:	603b      	str	r3, [r7, #0]
}
 80131b4:	bf00      	nop
 80131b6:	e7fe      	b.n	80131b6 <xTaskIncrementTick+0x46>
 80131b8:	4b40      	ldr	r3, [pc, #256]	; (80132bc <xTaskIncrementTick+0x14c>)
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	60fb      	str	r3, [r7, #12]
 80131be:	4b40      	ldr	r3, [pc, #256]	; (80132c0 <xTaskIncrementTick+0x150>)
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	4a3e      	ldr	r2, [pc, #248]	; (80132bc <xTaskIncrementTick+0x14c>)
 80131c4:	6013      	str	r3, [r2, #0]
 80131c6:	4a3e      	ldr	r2, [pc, #248]	; (80132c0 <xTaskIncrementTick+0x150>)
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	6013      	str	r3, [r2, #0]
 80131cc:	4b3d      	ldr	r3, [pc, #244]	; (80132c4 <xTaskIncrementTick+0x154>)
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	3301      	adds	r3, #1
 80131d2:	4a3c      	ldr	r2, [pc, #240]	; (80132c4 <xTaskIncrementTick+0x154>)
 80131d4:	6013      	str	r3, [r2, #0]
 80131d6:	f000 faa9 	bl	801372c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80131da:	4b3b      	ldr	r3, [pc, #236]	; (80132c8 <xTaskIncrementTick+0x158>)
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	693a      	ldr	r2, [r7, #16]
 80131e0:	429a      	cmp	r2, r3
 80131e2:	d348      	bcc.n	8013276 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80131e4:	4b35      	ldr	r3, [pc, #212]	; (80132bc <xTaskIncrementTick+0x14c>)
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d104      	bne.n	80131f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80131ee:	4b36      	ldr	r3, [pc, #216]	; (80132c8 <xTaskIncrementTick+0x158>)
 80131f0:	f04f 32ff 	mov.w	r2, #4294967295
 80131f4:	601a      	str	r2, [r3, #0]
					break;
 80131f6:	e03e      	b.n	8013276 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80131f8:	4b30      	ldr	r3, [pc, #192]	; (80132bc <xTaskIncrementTick+0x14c>)
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	68db      	ldr	r3, [r3, #12]
 80131fe:	68db      	ldr	r3, [r3, #12]
 8013200:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013202:	68bb      	ldr	r3, [r7, #8]
 8013204:	685b      	ldr	r3, [r3, #4]
 8013206:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013208:	693a      	ldr	r2, [r7, #16]
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	429a      	cmp	r2, r3
 801320e:	d203      	bcs.n	8013218 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013210:	4a2d      	ldr	r2, [pc, #180]	; (80132c8 <xTaskIncrementTick+0x158>)
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013216:	e02e      	b.n	8013276 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013218:	68bb      	ldr	r3, [r7, #8]
 801321a:	3304      	adds	r3, #4
 801321c:	4618      	mov	r0, r3
 801321e:	f7fe ff37 	bl	8012090 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013222:	68bb      	ldr	r3, [r7, #8]
 8013224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013226:	2b00      	cmp	r3, #0
 8013228:	d004      	beq.n	8013234 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	3318      	adds	r3, #24
 801322e:	4618      	mov	r0, r3
 8013230:	f7fe ff2e 	bl	8012090 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013234:	68bb      	ldr	r3, [r7, #8]
 8013236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013238:	2201      	movs	r2, #1
 801323a:	409a      	lsls	r2, r3
 801323c:	4b23      	ldr	r3, [pc, #140]	; (80132cc <xTaskIncrementTick+0x15c>)
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	4313      	orrs	r3, r2
 8013242:	4a22      	ldr	r2, [pc, #136]	; (80132cc <xTaskIncrementTick+0x15c>)
 8013244:	6013      	str	r3, [r2, #0]
 8013246:	68bb      	ldr	r3, [r7, #8]
 8013248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801324a:	4613      	mov	r3, r2
 801324c:	009b      	lsls	r3, r3, #2
 801324e:	4413      	add	r3, r2
 8013250:	009b      	lsls	r3, r3, #2
 8013252:	4a1f      	ldr	r2, [pc, #124]	; (80132d0 <xTaskIncrementTick+0x160>)
 8013254:	441a      	add	r2, r3
 8013256:	68bb      	ldr	r3, [r7, #8]
 8013258:	3304      	adds	r3, #4
 801325a:	4619      	mov	r1, r3
 801325c:	4610      	mov	r0, r2
 801325e:	f7fe feba 	bl	8011fd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013262:	68bb      	ldr	r3, [r7, #8]
 8013264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013266:	4b1b      	ldr	r3, [pc, #108]	; (80132d4 <xTaskIncrementTick+0x164>)
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801326c:	429a      	cmp	r2, r3
 801326e:	d3b9      	bcc.n	80131e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8013270:	2301      	movs	r3, #1
 8013272:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013274:	e7b6      	b.n	80131e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013276:	4b17      	ldr	r3, [pc, #92]	; (80132d4 <xTaskIncrementTick+0x164>)
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801327c:	4914      	ldr	r1, [pc, #80]	; (80132d0 <xTaskIncrementTick+0x160>)
 801327e:	4613      	mov	r3, r2
 8013280:	009b      	lsls	r3, r3, #2
 8013282:	4413      	add	r3, r2
 8013284:	009b      	lsls	r3, r3, #2
 8013286:	440b      	add	r3, r1
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	2b01      	cmp	r3, #1
 801328c:	d901      	bls.n	8013292 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 801328e:	2301      	movs	r3, #1
 8013290:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013292:	4b11      	ldr	r3, [pc, #68]	; (80132d8 <xTaskIncrementTick+0x168>)
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d007      	beq.n	80132aa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 801329a:	2301      	movs	r3, #1
 801329c:	617b      	str	r3, [r7, #20]
 801329e:	e004      	b.n	80132aa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80132a0:	4b0e      	ldr	r3, [pc, #56]	; (80132dc <xTaskIncrementTick+0x16c>)
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	3301      	adds	r3, #1
 80132a6:	4a0d      	ldr	r2, [pc, #52]	; (80132dc <xTaskIncrementTick+0x16c>)
 80132a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80132aa:	697b      	ldr	r3, [r7, #20]
}
 80132ac:	4618      	mov	r0, r3
 80132ae:	3718      	adds	r7, #24
 80132b0:	46bd      	mov	sp, r7
 80132b2:	bd80      	pop	{r7, pc}
 80132b4:	20002430 	.word	0x20002430
 80132b8:	2000240c 	.word	0x2000240c
 80132bc:	200023c0 	.word	0x200023c0
 80132c0:	200023c4 	.word	0x200023c4
 80132c4:	20002420 	.word	0x20002420
 80132c8:	20002428 	.word	0x20002428
 80132cc:	20002410 	.word	0x20002410
 80132d0:	2000230c 	.word	0x2000230c
 80132d4:	20002308 	.word	0x20002308
 80132d8:	2000241c 	.word	0x2000241c
 80132dc:	20002418 	.word	0x20002418

080132e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80132e0:	b480      	push	{r7}
 80132e2:	b087      	sub	sp, #28
 80132e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80132e6:	4b29      	ldr	r3, [pc, #164]	; (801338c <vTaskSwitchContext+0xac>)
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d003      	beq.n	80132f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80132ee:	4b28      	ldr	r3, [pc, #160]	; (8013390 <vTaskSwitchContext+0xb0>)
 80132f0:	2201      	movs	r2, #1
 80132f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80132f4:	e044      	b.n	8013380 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80132f6:	4b26      	ldr	r3, [pc, #152]	; (8013390 <vTaskSwitchContext+0xb0>)
 80132f8:	2200      	movs	r2, #0
 80132fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80132fc:	4b25      	ldr	r3, [pc, #148]	; (8013394 <vTaskSwitchContext+0xb4>)
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	fab3 f383 	clz	r3, r3
 8013308:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801330a:	7afb      	ldrb	r3, [r7, #11]
 801330c:	f1c3 031f 	rsb	r3, r3, #31
 8013310:	617b      	str	r3, [r7, #20]
 8013312:	4921      	ldr	r1, [pc, #132]	; (8013398 <vTaskSwitchContext+0xb8>)
 8013314:	697a      	ldr	r2, [r7, #20]
 8013316:	4613      	mov	r3, r2
 8013318:	009b      	lsls	r3, r3, #2
 801331a:	4413      	add	r3, r2
 801331c:	009b      	lsls	r3, r3, #2
 801331e:	440b      	add	r3, r1
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d10a      	bne.n	801333c <vTaskSwitchContext+0x5c>
	__asm volatile
 8013326:	f04f 0350 	mov.w	r3, #80	; 0x50
 801332a:	f383 8811 	msr	BASEPRI, r3
 801332e:	f3bf 8f6f 	isb	sy
 8013332:	f3bf 8f4f 	dsb	sy
 8013336:	607b      	str	r3, [r7, #4]
}
 8013338:	bf00      	nop
 801333a:	e7fe      	b.n	801333a <vTaskSwitchContext+0x5a>
 801333c:	697a      	ldr	r2, [r7, #20]
 801333e:	4613      	mov	r3, r2
 8013340:	009b      	lsls	r3, r3, #2
 8013342:	4413      	add	r3, r2
 8013344:	009b      	lsls	r3, r3, #2
 8013346:	4a14      	ldr	r2, [pc, #80]	; (8013398 <vTaskSwitchContext+0xb8>)
 8013348:	4413      	add	r3, r2
 801334a:	613b      	str	r3, [r7, #16]
 801334c:	693b      	ldr	r3, [r7, #16]
 801334e:	685b      	ldr	r3, [r3, #4]
 8013350:	685a      	ldr	r2, [r3, #4]
 8013352:	693b      	ldr	r3, [r7, #16]
 8013354:	605a      	str	r2, [r3, #4]
 8013356:	693b      	ldr	r3, [r7, #16]
 8013358:	685a      	ldr	r2, [r3, #4]
 801335a:	693b      	ldr	r3, [r7, #16]
 801335c:	3308      	adds	r3, #8
 801335e:	429a      	cmp	r2, r3
 8013360:	d104      	bne.n	801336c <vTaskSwitchContext+0x8c>
 8013362:	693b      	ldr	r3, [r7, #16]
 8013364:	685b      	ldr	r3, [r3, #4]
 8013366:	685a      	ldr	r2, [r3, #4]
 8013368:	693b      	ldr	r3, [r7, #16]
 801336a:	605a      	str	r2, [r3, #4]
 801336c:	693b      	ldr	r3, [r7, #16]
 801336e:	685b      	ldr	r3, [r3, #4]
 8013370:	68db      	ldr	r3, [r3, #12]
 8013372:	4a0a      	ldr	r2, [pc, #40]	; (801339c <vTaskSwitchContext+0xbc>)
 8013374:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013376:	4b09      	ldr	r3, [pc, #36]	; (801339c <vTaskSwitchContext+0xbc>)
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	334c      	adds	r3, #76	; 0x4c
 801337c:	4a08      	ldr	r2, [pc, #32]	; (80133a0 <vTaskSwitchContext+0xc0>)
 801337e:	6013      	str	r3, [r2, #0]
}
 8013380:	bf00      	nop
 8013382:	371c      	adds	r7, #28
 8013384:	46bd      	mov	sp, r7
 8013386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801338a:	4770      	bx	lr
 801338c:	20002430 	.word	0x20002430
 8013390:	2000241c 	.word	0x2000241c
 8013394:	20002410 	.word	0x20002410
 8013398:	2000230c 	.word	0x2000230c
 801339c:	20002308 	.word	0x20002308
 80133a0:	200002b4 	.word	0x200002b4

080133a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b084      	sub	sp, #16
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
 80133ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d10a      	bne.n	80133ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80133b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133b8:	f383 8811 	msr	BASEPRI, r3
 80133bc:	f3bf 8f6f 	isb	sy
 80133c0:	f3bf 8f4f 	dsb	sy
 80133c4:	60fb      	str	r3, [r7, #12]
}
 80133c6:	bf00      	nop
 80133c8:	e7fe      	b.n	80133c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80133ca:	4b07      	ldr	r3, [pc, #28]	; (80133e8 <vTaskPlaceOnEventList+0x44>)
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	3318      	adds	r3, #24
 80133d0:	4619      	mov	r1, r3
 80133d2:	6878      	ldr	r0, [r7, #4]
 80133d4:	f7fe fe23 	bl	801201e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80133d8:	2101      	movs	r1, #1
 80133da:	6838      	ldr	r0, [r7, #0]
 80133dc:	f000 fa6a 	bl	80138b4 <prvAddCurrentTaskToDelayedList>
}
 80133e0:	bf00      	nop
 80133e2:	3710      	adds	r7, #16
 80133e4:	46bd      	mov	sp, r7
 80133e6:	bd80      	pop	{r7, pc}
 80133e8:	20002308 	.word	0x20002308

080133ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b086      	sub	sp, #24
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	68db      	ldr	r3, [r3, #12]
 80133f8:	68db      	ldr	r3, [r3, #12]
 80133fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80133fc:	693b      	ldr	r3, [r7, #16]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d10a      	bne.n	8013418 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8013402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013406:	f383 8811 	msr	BASEPRI, r3
 801340a:	f3bf 8f6f 	isb	sy
 801340e:	f3bf 8f4f 	dsb	sy
 8013412:	60fb      	str	r3, [r7, #12]
}
 8013414:	bf00      	nop
 8013416:	e7fe      	b.n	8013416 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013418:	693b      	ldr	r3, [r7, #16]
 801341a:	3318      	adds	r3, #24
 801341c:	4618      	mov	r0, r3
 801341e:	f7fe fe37 	bl	8012090 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013422:	4b1d      	ldr	r3, [pc, #116]	; (8013498 <xTaskRemoveFromEventList+0xac>)
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d11c      	bne.n	8013464 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801342a:	693b      	ldr	r3, [r7, #16]
 801342c:	3304      	adds	r3, #4
 801342e:	4618      	mov	r0, r3
 8013430:	f7fe fe2e 	bl	8012090 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013434:	693b      	ldr	r3, [r7, #16]
 8013436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013438:	2201      	movs	r2, #1
 801343a:	409a      	lsls	r2, r3
 801343c:	4b17      	ldr	r3, [pc, #92]	; (801349c <xTaskRemoveFromEventList+0xb0>)
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	4313      	orrs	r3, r2
 8013442:	4a16      	ldr	r2, [pc, #88]	; (801349c <xTaskRemoveFromEventList+0xb0>)
 8013444:	6013      	str	r3, [r2, #0]
 8013446:	693b      	ldr	r3, [r7, #16]
 8013448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801344a:	4613      	mov	r3, r2
 801344c:	009b      	lsls	r3, r3, #2
 801344e:	4413      	add	r3, r2
 8013450:	009b      	lsls	r3, r3, #2
 8013452:	4a13      	ldr	r2, [pc, #76]	; (80134a0 <xTaskRemoveFromEventList+0xb4>)
 8013454:	441a      	add	r2, r3
 8013456:	693b      	ldr	r3, [r7, #16]
 8013458:	3304      	adds	r3, #4
 801345a:	4619      	mov	r1, r3
 801345c:	4610      	mov	r0, r2
 801345e:	f7fe fdba 	bl	8011fd6 <vListInsertEnd>
 8013462:	e005      	b.n	8013470 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013464:	693b      	ldr	r3, [r7, #16]
 8013466:	3318      	adds	r3, #24
 8013468:	4619      	mov	r1, r3
 801346a:	480e      	ldr	r0, [pc, #56]	; (80134a4 <xTaskRemoveFromEventList+0xb8>)
 801346c:	f7fe fdb3 	bl	8011fd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013470:	693b      	ldr	r3, [r7, #16]
 8013472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013474:	4b0c      	ldr	r3, [pc, #48]	; (80134a8 <xTaskRemoveFromEventList+0xbc>)
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801347a:	429a      	cmp	r2, r3
 801347c:	d905      	bls.n	801348a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801347e:	2301      	movs	r3, #1
 8013480:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013482:	4b0a      	ldr	r3, [pc, #40]	; (80134ac <xTaskRemoveFromEventList+0xc0>)
 8013484:	2201      	movs	r2, #1
 8013486:	601a      	str	r2, [r3, #0]
 8013488:	e001      	b.n	801348e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801348a:	2300      	movs	r3, #0
 801348c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801348e:	697b      	ldr	r3, [r7, #20]
}
 8013490:	4618      	mov	r0, r3
 8013492:	3718      	adds	r7, #24
 8013494:	46bd      	mov	sp, r7
 8013496:	bd80      	pop	{r7, pc}
 8013498:	20002430 	.word	0x20002430
 801349c:	20002410 	.word	0x20002410
 80134a0:	2000230c 	.word	0x2000230c
 80134a4:	200023c8 	.word	0x200023c8
 80134a8:	20002308 	.word	0x20002308
 80134ac:	2000241c 	.word	0x2000241c

080134b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80134b0:	b480      	push	{r7}
 80134b2:	b083      	sub	sp, #12
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80134b8:	4b06      	ldr	r3, [pc, #24]	; (80134d4 <vTaskInternalSetTimeOutState+0x24>)
 80134ba:	681a      	ldr	r2, [r3, #0]
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80134c0:	4b05      	ldr	r3, [pc, #20]	; (80134d8 <vTaskInternalSetTimeOutState+0x28>)
 80134c2:	681a      	ldr	r2, [r3, #0]
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	605a      	str	r2, [r3, #4]
}
 80134c8:	bf00      	nop
 80134ca:	370c      	adds	r7, #12
 80134cc:	46bd      	mov	sp, r7
 80134ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d2:	4770      	bx	lr
 80134d4:	20002420 	.word	0x20002420
 80134d8:	2000240c 	.word	0x2000240c

080134dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80134dc:	b580      	push	{r7, lr}
 80134de:	b088      	sub	sp, #32
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	6078      	str	r0, [r7, #4]
 80134e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d10a      	bne.n	8013502 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80134ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134f0:	f383 8811 	msr	BASEPRI, r3
 80134f4:	f3bf 8f6f 	isb	sy
 80134f8:	f3bf 8f4f 	dsb	sy
 80134fc:	613b      	str	r3, [r7, #16]
}
 80134fe:	bf00      	nop
 8013500:	e7fe      	b.n	8013500 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8013502:	683b      	ldr	r3, [r7, #0]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d10a      	bne.n	801351e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8013508:	f04f 0350 	mov.w	r3, #80	; 0x50
 801350c:	f383 8811 	msr	BASEPRI, r3
 8013510:	f3bf 8f6f 	isb	sy
 8013514:	f3bf 8f4f 	dsb	sy
 8013518:	60fb      	str	r3, [r7, #12]
}
 801351a:	bf00      	nop
 801351c:	e7fe      	b.n	801351c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801351e:	f000 fb59 	bl	8013bd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013522:	4b1d      	ldr	r3, [pc, #116]	; (8013598 <xTaskCheckForTimeOut+0xbc>)
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	685b      	ldr	r3, [r3, #4]
 801352c:	69ba      	ldr	r2, [r7, #24]
 801352e:	1ad3      	subs	r3, r2, r3
 8013530:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013532:	683b      	ldr	r3, [r7, #0]
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	f1b3 3fff 	cmp.w	r3, #4294967295
 801353a:	d102      	bne.n	8013542 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801353c:	2300      	movs	r3, #0
 801353e:	61fb      	str	r3, [r7, #28]
 8013540:	e023      	b.n	801358a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	681a      	ldr	r2, [r3, #0]
 8013546:	4b15      	ldr	r3, [pc, #84]	; (801359c <xTaskCheckForTimeOut+0xc0>)
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	429a      	cmp	r2, r3
 801354c:	d007      	beq.n	801355e <xTaskCheckForTimeOut+0x82>
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	685b      	ldr	r3, [r3, #4]
 8013552:	69ba      	ldr	r2, [r7, #24]
 8013554:	429a      	cmp	r2, r3
 8013556:	d302      	bcc.n	801355e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013558:	2301      	movs	r3, #1
 801355a:	61fb      	str	r3, [r7, #28]
 801355c:	e015      	b.n	801358a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801355e:	683b      	ldr	r3, [r7, #0]
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	697a      	ldr	r2, [r7, #20]
 8013564:	429a      	cmp	r2, r3
 8013566:	d20b      	bcs.n	8013580 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	681a      	ldr	r2, [r3, #0]
 801356c:	697b      	ldr	r3, [r7, #20]
 801356e:	1ad2      	subs	r2, r2, r3
 8013570:	683b      	ldr	r3, [r7, #0]
 8013572:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013574:	6878      	ldr	r0, [r7, #4]
 8013576:	f7ff ff9b 	bl	80134b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801357a:	2300      	movs	r3, #0
 801357c:	61fb      	str	r3, [r7, #28]
 801357e:	e004      	b.n	801358a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8013580:	683b      	ldr	r3, [r7, #0]
 8013582:	2200      	movs	r2, #0
 8013584:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013586:	2301      	movs	r3, #1
 8013588:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801358a:	f000 fb53 	bl	8013c34 <vPortExitCritical>

	return xReturn;
 801358e:	69fb      	ldr	r3, [r7, #28]
}
 8013590:	4618      	mov	r0, r3
 8013592:	3720      	adds	r7, #32
 8013594:	46bd      	mov	sp, r7
 8013596:	bd80      	pop	{r7, pc}
 8013598:	2000240c 	.word	0x2000240c
 801359c:	20002420 	.word	0x20002420

080135a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80135a0:	b480      	push	{r7}
 80135a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80135a4:	4b03      	ldr	r3, [pc, #12]	; (80135b4 <vTaskMissedYield+0x14>)
 80135a6:	2201      	movs	r2, #1
 80135a8:	601a      	str	r2, [r3, #0]
}
 80135aa:	bf00      	nop
 80135ac:	46bd      	mov	sp, r7
 80135ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b2:	4770      	bx	lr
 80135b4:	2000241c 	.word	0x2000241c

080135b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80135b8:	b580      	push	{r7, lr}
 80135ba:	b082      	sub	sp, #8
 80135bc:	af00      	add	r7, sp, #0
 80135be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80135c0:	f000 f852 	bl	8013668 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80135c4:	4b06      	ldr	r3, [pc, #24]	; (80135e0 <prvIdleTask+0x28>)
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	2b01      	cmp	r3, #1
 80135ca:	d9f9      	bls.n	80135c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80135cc:	4b05      	ldr	r3, [pc, #20]	; (80135e4 <prvIdleTask+0x2c>)
 80135ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135d2:	601a      	str	r2, [r3, #0]
 80135d4:	f3bf 8f4f 	dsb	sy
 80135d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80135dc:	e7f0      	b.n	80135c0 <prvIdleTask+0x8>
 80135de:	bf00      	nop
 80135e0:	2000230c 	.word	0x2000230c
 80135e4:	e000ed04 	.word	0xe000ed04

080135e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b082      	sub	sp, #8
 80135ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80135ee:	2300      	movs	r3, #0
 80135f0:	607b      	str	r3, [r7, #4]
 80135f2:	e00c      	b.n	801360e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80135f4:	687a      	ldr	r2, [r7, #4]
 80135f6:	4613      	mov	r3, r2
 80135f8:	009b      	lsls	r3, r3, #2
 80135fa:	4413      	add	r3, r2
 80135fc:	009b      	lsls	r3, r3, #2
 80135fe:	4a12      	ldr	r2, [pc, #72]	; (8013648 <prvInitialiseTaskLists+0x60>)
 8013600:	4413      	add	r3, r2
 8013602:	4618      	mov	r0, r3
 8013604:	f7fe fcba 	bl	8011f7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	3301      	adds	r3, #1
 801360c:	607b      	str	r3, [r7, #4]
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	2b06      	cmp	r3, #6
 8013612:	d9ef      	bls.n	80135f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013614:	480d      	ldr	r0, [pc, #52]	; (801364c <prvInitialiseTaskLists+0x64>)
 8013616:	f7fe fcb1 	bl	8011f7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801361a:	480d      	ldr	r0, [pc, #52]	; (8013650 <prvInitialiseTaskLists+0x68>)
 801361c:	f7fe fcae 	bl	8011f7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013620:	480c      	ldr	r0, [pc, #48]	; (8013654 <prvInitialiseTaskLists+0x6c>)
 8013622:	f7fe fcab 	bl	8011f7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013626:	480c      	ldr	r0, [pc, #48]	; (8013658 <prvInitialiseTaskLists+0x70>)
 8013628:	f7fe fca8 	bl	8011f7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801362c:	480b      	ldr	r0, [pc, #44]	; (801365c <prvInitialiseTaskLists+0x74>)
 801362e:	f7fe fca5 	bl	8011f7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013632:	4b0b      	ldr	r3, [pc, #44]	; (8013660 <prvInitialiseTaskLists+0x78>)
 8013634:	4a05      	ldr	r2, [pc, #20]	; (801364c <prvInitialiseTaskLists+0x64>)
 8013636:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013638:	4b0a      	ldr	r3, [pc, #40]	; (8013664 <prvInitialiseTaskLists+0x7c>)
 801363a:	4a05      	ldr	r2, [pc, #20]	; (8013650 <prvInitialiseTaskLists+0x68>)
 801363c:	601a      	str	r2, [r3, #0]
}
 801363e:	bf00      	nop
 8013640:	3708      	adds	r7, #8
 8013642:	46bd      	mov	sp, r7
 8013644:	bd80      	pop	{r7, pc}
 8013646:	bf00      	nop
 8013648:	2000230c 	.word	0x2000230c
 801364c:	20002398 	.word	0x20002398
 8013650:	200023ac 	.word	0x200023ac
 8013654:	200023c8 	.word	0x200023c8
 8013658:	200023dc 	.word	0x200023dc
 801365c:	200023f4 	.word	0x200023f4
 8013660:	200023c0 	.word	0x200023c0
 8013664:	200023c4 	.word	0x200023c4

08013668 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b082      	sub	sp, #8
 801366c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801366e:	e019      	b.n	80136a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013670:	f000 fab0 	bl	8013bd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013674:	4b10      	ldr	r3, [pc, #64]	; (80136b8 <prvCheckTasksWaitingTermination+0x50>)
 8013676:	68db      	ldr	r3, [r3, #12]
 8013678:	68db      	ldr	r3, [r3, #12]
 801367a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	3304      	adds	r3, #4
 8013680:	4618      	mov	r0, r3
 8013682:	f7fe fd05 	bl	8012090 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013686:	4b0d      	ldr	r3, [pc, #52]	; (80136bc <prvCheckTasksWaitingTermination+0x54>)
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	3b01      	subs	r3, #1
 801368c:	4a0b      	ldr	r2, [pc, #44]	; (80136bc <prvCheckTasksWaitingTermination+0x54>)
 801368e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013690:	4b0b      	ldr	r3, [pc, #44]	; (80136c0 <prvCheckTasksWaitingTermination+0x58>)
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	3b01      	subs	r3, #1
 8013696:	4a0a      	ldr	r2, [pc, #40]	; (80136c0 <prvCheckTasksWaitingTermination+0x58>)
 8013698:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801369a:	f000 facb 	bl	8013c34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801369e:	6878      	ldr	r0, [r7, #4]
 80136a0:	f000 f810 	bl	80136c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80136a4:	4b06      	ldr	r3, [pc, #24]	; (80136c0 <prvCheckTasksWaitingTermination+0x58>)
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d1e1      	bne.n	8013670 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80136ac:	bf00      	nop
 80136ae:	bf00      	nop
 80136b0:	3708      	adds	r7, #8
 80136b2:	46bd      	mov	sp, r7
 80136b4:	bd80      	pop	{r7, pc}
 80136b6:	bf00      	nop
 80136b8:	200023dc 	.word	0x200023dc
 80136bc:	20002408 	.word	0x20002408
 80136c0:	200023f0 	.word	0x200023f0

080136c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b084      	sub	sp, #16
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	334c      	adds	r3, #76	; 0x4c
 80136d0:	4618      	mov	r0, r3
 80136d2:	f001 fda1 	bl	8015218 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d108      	bne.n	80136f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136e4:	4618      	mov	r0, r3
 80136e6:	f000 fc63 	bl	8013fb0 <vPortFree>
				vPortFree( pxTCB );
 80136ea:	6878      	ldr	r0, [r7, #4]
 80136ec:	f000 fc60 	bl	8013fb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80136f0:	e018      	b.n	8013724 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80136f8:	2b01      	cmp	r3, #1
 80136fa:	d103      	bne.n	8013704 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80136fc:	6878      	ldr	r0, [r7, #4]
 80136fe:	f000 fc57 	bl	8013fb0 <vPortFree>
	}
 8013702:	e00f      	b.n	8013724 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 801370a:	2b02      	cmp	r3, #2
 801370c:	d00a      	beq.n	8013724 <prvDeleteTCB+0x60>
	__asm volatile
 801370e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013712:	f383 8811 	msr	BASEPRI, r3
 8013716:	f3bf 8f6f 	isb	sy
 801371a:	f3bf 8f4f 	dsb	sy
 801371e:	60fb      	str	r3, [r7, #12]
}
 8013720:	bf00      	nop
 8013722:	e7fe      	b.n	8013722 <prvDeleteTCB+0x5e>
	}
 8013724:	bf00      	nop
 8013726:	3710      	adds	r7, #16
 8013728:	46bd      	mov	sp, r7
 801372a:	bd80      	pop	{r7, pc}

0801372c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801372c:	b480      	push	{r7}
 801372e:	b083      	sub	sp, #12
 8013730:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013732:	4b0c      	ldr	r3, [pc, #48]	; (8013764 <prvResetNextTaskUnblockTime+0x38>)
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d104      	bne.n	8013746 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801373c:	4b0a      	ldr	r3, [pc, #40]	; (8013768 <prvResetNextTaskUnblockTime+0x3c>)
 801373e:	f04f 32ff 	mov.w	r2, #4294967295
 8013742:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013744:	e008      	b.n	8013758 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013746:	4b07      	ldr	r3, [pc, #28]	; (8013764 <prvResetNextTaskUnblockTime+0x38>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	68db      	ldr	r3, [r3, #12]
 801374c:	68db      	ldr	r3, [r3, #12]
 801374e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	685b      	ldr	r3, [r3, #4]
 8013754:	4a04      	ldr	r2, [pc, #16]	; (8013768 <prvResetNextTaskUnblockTime+0x3c>)
 8013756:	6013      	str	r3, [r2, #0]
}
 8013758:	bf00      	nop
 801375a:	370c      	adds	r7, #12
 801375c:	46bd      	mov	sp, r7
 801375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013762:	4770      	bx	lr
 8013764:	200023c0 	.word	0x200023c0
 8013768:	20002428 	.word	0x20002428

0801376c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801376c:	b480      	push	{r7}
 801376e:	b083      	sub	sp, #12
 8013770:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013772:	4b0b      	ldr	r3, [pc, #44]	; (80137a0 <xTaskGetSchedulerState+0x34>)
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d102      	bne.n	8013780 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801377a:	2301      	movs	r3, #1
 801377c:	607b      	str	r3, [r7, #4]
 801377e:	e008      	b.n	8013792 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013780:	4b08      	ldr	r3, [pc, #32]	; (80137a4 <xTaskGetSchedulerState+0x38>)
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d102      	bne.n	801378e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013788:	2302      	movs	r3, #2
 801378a:	607b      	str	r3, [r7, #4]
 801378c:	e001      	b.n	8013792 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801378e:	2300      	movs	r3, #0
 8013790:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013792:	687b      	ldr	r3, [r7, #4]
	}
 8013794:	4618      	mov	r0, r3
 8013796:	370c      	adds	r7, #12
 8013798:	46bd      	mov	sp, r7
 801379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801379e:	4770      	bx	lr
 80137a0:	20002414 	.word	0x20002414
 80137a4:	20002430 	.word	0x20002430

080137a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80137a8:	b580      	push	{r7, lr}
 80137aa:	b086      	sub	sp, #24
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80137b4:	2300      	movs	r3, #0
 80137b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d06e      	beq.n	801389c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80137be:	4b3a      	ldr	r3, [pc, #232]	; (80138a8 <xTaskPriorityDisinherit+0x100>)
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	693a      	ldr	r2, [r7, #16]
 80137c4:	429a      	cmp	r2, r3
 80137c6:	d00a      	beq.n	80137de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80137c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137cc:	f383 8811 	msr	BASEPRI, r3
 80137d0:	f3bf 8f6f 	isb	sy
 80137d4:	f3bf 8f4f 	dsb	sy
 80137d8:	60fb      	str	r3, [r7, #12]
}
 80137da:	bf00      	nop
 80137dc:	e7fe      	b.n	80137dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80137de:	693b      	ldr	r3, [r7, #16]
 80137e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d10a      	bne.n	80137fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80137e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137ea:	f383 8811 	msr	BASEPRI, r3
 80137ee:	f3bf 8f6f 	isb	sy
 80137f2:	f3bf 8f4f 	dsb	sy
 80137f6:	60bb      	str	r3, [r7, #8]
}
 80137f8:	bf00      	nop
 80137fa:	e7fe      	b.n	80137fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80137fc:	693b      	ldr	r3, [r7, #16]
 80137fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013800:	1e5a      	subs	r2, r3, #1
 8013802:	693b      	ldr	r3, [r7, #16]
 8013804:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013806:	693b      	ldr	r3, [r7, #16]
 8013808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801380a:	693b      	ldr	r3, [r7, #16]
 801380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801380e:	429a      	cmp	r2, r3
 8013810:	d044      	beq.n	801389c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013812:	693b      	ldr	r3, [r7, #16]
 8013814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013816:	2b00      	cmp	r3, #0
 8013818:	d140      	bne.n	801389c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801381a:	693b      	ldr	r3, [r7, #16]
 801381c:	3304      	adds	r3, #4
 801381e:	4618      	mov	r0, r3
 8013820:	f7fe fc36 	bl	8012090 <uxListRemove>
 8013824:	4603      	mov	r3, r0
 8013826:	2b00      	cmp	r3, #0
 8013828:	d115      	bne.n	8013856 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801382a:	693b      	ldr	r3, [r7, #16]
 801382c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801382e:	491f      	ldr	r1, [pc, #124]	; (80138ac <xTaskPriorityDisinherit+0x104>)
 8013830:	4613      	mov	r3, r2
 8013832:	009b      	lsls	r3, r3, #2
 8013834:	4413      	add	r3, r2
 8013836:	009b      	lsls	r3, r3, #2
 8013838:	440b      	add	r3, r1
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d10a      	bne.n	8013856 <xTaskPriorityDisinherit+0xae>
 8013840:	693b      	ldr	r3, [r7, #16]
 8013842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013844:	2201      	movs	r2, #1
 8013846:	fa02 f303 	lsl.w	r3, r2, r3
 801384a:	43da      	mvns	r2, r3
 801384c:	4b18      	ldr	r3, [pc, #96]	; (80138b0 <xTaskPriorityDisinherit+0x108>)
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	4013      	ands	r3, r2
 8013852:	4a17      	ldr	r2, [pc, #92]	; (80138b0 <xTaskPriorityDisinherit+0x108>)
 8013854:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013856:	693b      	ldr	r3, [r7, #16]
 8013858:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801385a:	693b      	ldr	r3, [r7, #16]
 801385c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801385e:	693b      	ldr	r3, [r7, #16]
 8013860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013862:	f1c3 0207 	rsb	r2, r3, #7
 8013866:	693b      	ldr	r3, [r7, #16]
 8013868:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801386a:	693b      	ldr	r3, [r7, #16]
 801386c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801386e:	2201      	movs	r2, #1
 8013870:	409a      	lsls	r2, r3
 8013872:	4b0f      	ldr	r3, [pc, #60]	; (80138b0 <xTaskPriorityDisinherit+0x108>)
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	4313      	orrs	r3, r2
 8013878:	4a0d      	ldr	r2, [pc, #52]	; (80138b0 <xTaskPriorityDisinherit+0x108>)
 801387a:	6013      	str	r3, [r2, #0]
 801387c:	693b      	ldr	r3, [r7, #16]
 801387e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013880:	4613      	mov	r3, r2
 8013882:	009b      	lsls	r3, r3, #2
 8013884:	4413      	add	r3, r2
 8013886:	009b      	lsls	r3, r3, #2
 8013888:	4a08      	ldr	r2, [pc, #32]	; (80138ac <xTaskPriorityDisinherit+0x104>)
 801388a:	441a      	add	r2, r3
 801388c:	693b      	ldr	r3, [r7, #16]
 801388e:	3304      	adds	r3, #4
 8013890:	4619      	mov	r1, r3
 8013892:	4610      	mov	r0, r2
 8013894:	f7fe fb9f 	bl	8011fd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013898:	2301      	movs	r3, #1
 801389a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801389c:	697b      	ldr	r3, [r7, #20]
	}
 801389e:	4618      	mov	r0, r3
 80138a0:	3718      	adds	r7, #24
 80138a2:	46bd      	mov	sp, r7
 80138a4:	bd80      	pop	{r7, pc}
 80138a6:	bf00      	nop
 80138a8:	20002308 	.word	0x20002308
 80138ac:	2000230c 	.word	0x2000230c
 80138b0:	20002410 	.word	0x20002410

080138b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b084      	sub	sp, #16
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	6078      	str	r0, [r7, #4]
 80138bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80138be:	4b29      	ldr	r3, [pc, #164]	; (8013964 <prvAddCurrentTaskToDelayedList+0xb0>)
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80138c4:	4b28      	ldr	r3, [pc, #160]	; (8013968 <prvAddCurrentTaskToDelayedList+0xb4>)
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	3304      	adds	r3, #4
 80138ca:	4618      	mov	r0, r3
 80138cc:	f7fe fbe0 	bl	8012090 <uxListRemove>
 80138d0:	4603      	mov	r3, r0
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d10b      	bne.n	80138ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80138d6:	4b24      	ldr	r3, [pc, #144]	; (8013968 <prvAddCurrentTaskToDelayedList+0xb4>)
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138dc:	2201      	movs	r2, #1
 80138de:	fa02 f303 	lsl.w	r3, r2, r3
 80138e2:	43da      	mvns	r2, r3
 80138e4:	4b21      	ldr	r3, [pc, #132]	; (801396c <prvAddCurrentTaskToDelayedList+0xb8>)
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	4013      	ands	r3, r2
 80138ea:	4a20      	ldr	r2, [pc, #128]	; (801396c <prvAddCurrentTaskToDelayedList+0xb8>)
 80138ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138f4:	d10a      	bne.n	801390c <prvAddCurrentTaskToDelayedList+0x58>
 80138f6:	683b      	ldr	r3, [r7, #0]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d007      	beq.n	801390c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80138fc:	4b1a      	ldr	r3, [pc, #104]	; (8013968 <prvAddCurrentTaskToDelayedList+0xb4>)
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	3304      	adds	r3, #4
 8013902:	4619      	mov	r1, r3
 8013904:	481a      	ldr	r0, [pc, #104]	; (8013970 <prvAddCurrentTaskToDelayedList+0xbc>)
 8013906:	f7fe fb66 	bl	8011fd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801390a:	e026      	b.n	801395a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801390c:	68fa      	ldr	r2, [r7, #12]
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	4413      	add	r3, r2
 8013912:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013914:	4b14      	ldr	r3, [pc, #80]	; (8013968 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	68ba      	ldr	r2, [r7, #8]
 801391a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801391c:	68ba      	ldr	r2, [r7, #8]
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	429a      	cmp	r2, r3
 8013922:	d209      	bcs.n	8013938 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013924:	4b13      	ldr	r3, [pc, #76]	; (8013974 <prvAddCurrentTaskToDelayedList+0xc0>)
 8013926:	681a      	ldr	r2, [r3, #0]
 8013928:	4b0f      	ldr	r3, [pc, #60]	; (8013968 <prvAddCurrentTaskToDelayedList+0xb4>)
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	3304      	adds	r3, #4
 801392e:	4619      	mov	r1, r3
 8013930:	4610      	mov	r0, r2
 8013932:	f7fe fb74 	bl	801201e <vListInsert>
}
 8013936:	e010      	b.n	801395a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013938:	4b0f      	ldr	r3, [pc, #60]	; (8013978 <prvAddCurrentTaskToDelayedList+0xc4>)
 801393a:	681a      	ldr	r2, [r3, #0]
 801393c:	4b0a      	ldr	r3, [pc, #40]	; (8013968 <prvAddCurrentTaskToDelayedList+0xb4>)
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	3304      	adds	r3, #4
 8013942:	4619      	mov	r1, r3
 8013944:	4610      	mov	r0, r2
 8013946:	f7fe fb6a 	bl	801201e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801394a:	4b0c      	ldr	r3, [pc, #48]	; (801397c <prvAddCurrentTaskToDelayedList+0xc8>)
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	68ba      	ldr	r2, [r7, #8]
 8013950:	429a      	cmp	r2, r3
 8013952:	d202      	bcs.n	801395a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013954:	4a09      	ldr	r2, [pc, #36]	; (801397c <prvAddCurrentTaskToDelayedList+0xc8>)
 8013956:	68bb      	ldr	r3, [r7, #8]
 8013958:	6013      	str	r3, [r2, #0]
}
 801395a:	bf00      	nop
 801395c:	3710      	adds	r7, #16
 801395e:	46bd      	mov	sp, r7
 8013960:	bd80      	pop	{r7, pc}
 8013962:	bf00      	nop
 8013964:	2000240c 	.word	0x2000240c
 8013968:	20002308 	.word	0x20002308
 801396c:	20002410 	.word	0x20002410
 8013970:	200023f4 	.word	0x200023f4
 8013974:	200023c4 	.word	0x200023c4
 8013978:	200023c0 	.word	0x200023c0
 801397c:	20002428 	.word	0x20002428

08013980 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013980:	b480      	push	{r7}
 8013982:	b085      	sub	sp, #20
 8013984:	af00      	add	r7, sp, #0
 8013986:	60f8      	str	r0, [r7, #12]
 8013988:	60b9      	str	r1, [r7, #8]
 801398a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	3b04      	subs	r3, #4
 8013990:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013998:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	3b04      	subs	r3, #4
 801399e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80139a0:	68bb      	ldr	r3, [r7, #8]
 80139a2:	f023 0201 	bic.w	r2, r3, #1
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	3b04      	subs	r3, #4
 80139ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80139b0:	4a0c      	ldr	r2, [pc, #48]	; (80139e4 <pxPortInitialiseStack+0x64>)
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	3b14      	subs	r3, #20
 80139ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80139bc:	687a      	ldr	r2, [r7, #4]
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	3b04      	subs	r3, #4
 80139c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	f06f 0202 	mvn.w	r2, #2
 80139ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	3b20      	subs	r3, #32
 80139d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80139d6:	68fb      	ldr	r3, [r7, #12]
}
 80139d8:	4618      	mov	r0, r3
 80139da:	3714      	adds	r7, #20
 80139dc:	46bd      	mov	sp, r7
 80139de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e2:	4770      	bx	lr
 80139e4:	080139e9 	.word	0x080139e9

080139e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80139e8:	b480      	push	{r7}
 80139ea:	b085      	sub	sp, #20
 80139ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80139ee:	2300      	movs	r3, #0
 80139f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80139f2:	4b12      	ldr	r3, [pc, #72]	; (8013a3c <prvTaskExitError+0x54>)
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139fa:	d00a      	beq.n	8013a12 <prvTaskExitError+0x2a>
	__asm volatile
 80139fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a00:	f383 8811 	msr	BASEPRI, r3
 8013a04:	f3bf 8f6f 	isb	sy
 8013a08:	f3bf 8f4f 	dsb	sy
 8013a0c:	60fb      	str	r3, [r7, #12]
}
 8013a0e:	bf00      	nop
 8013a10:	e7fe      	b.n	8013a10 <prvTaskExitError+0x28>
	__asm volatile
 8013a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a16:	f383 8811 	msr	BASEPRI, r3
 8013a1a:	f3bf 8f6f 	isb	sy
 8013a1e:	f3bf 8f4f 	dsb	sy
 8013a22:	60bb      	str	r3, [r7, #8]
}
 8013a24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013a26:	bf00      	nop
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d0fc      	beq.n	8013a28 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013a2e:	bf00      	nop
 8013a30:	bf00      	nop
 8013a32:	3714      	adds	r7, #20
 8013a34:	46bd      	mov	sp, r7
 8013a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a3a:	4770      	bx	lr
 8013a3c:	200002b0 	.word	0x200002b0

08013a40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013a40:	4b07      	ldr	r3, [pc, #28]	; (8013a60 <pxCurrentTCBConst2>)
 8013a42:	6819      	ldr	r1, [r3, #0]
 8013a44:	6808      	ldr	r0, [r1, #0]
 8013a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a4a:	f380 8809 	msr	PSP, r0
 8013a4e:	f3bf 8f6f 	isb	sy
 8013a52:	f04f 0000 	mov.w	r0, #0
 8013a56:	f380 8811 	msr	BASEPRI, r0
 8013a5a:	4770      	bx	lr
 8013a5c:	f3af 8000 	nop.w

08013a60 <pxCurrentTCBConst2>:
 8013a60:	20002308 	.word	0x20002308
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013a64:	bf00      	nop
 8013a66:	bf00      	nop

08013a68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013a68:	4808      	ldr	r0, [pc, #32]	; (8013a8c <prvPortStartFirstTask+0x24>)
 8013a6a:	6800      	ldr	r0, [r0, #0]
 8013a6c:	6800      	ldr	r0, [r0, #0]
 8013a6e:	f380 8808 	msr	MSP, r0
 8013a72:	f04f 0000 	mov.w	r0, #0
 8013a76:	f380 8814 	msr	CONTROL, r0
 8013a7a:	b662      	cpsie	i
 8013a7c:	b661      	cpsie	f
 8013a7e:	f3bf 8f4f 	dsb	sy
 8013a82:	f3bf 8f6f 	isb	sy
 8013a86:	df00      	svc	0
 8013a88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013a8a:	bf00      	nop
 8013a8c:	e000ed08 	.word	0xe000ed08

08013a90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b086      	sub	sp, #24
 8013a94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013a96:	4b46      	ldr	r3, [pc, #280]	; (8013bb0 <xPortStartScheduler+0x120>)
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	4a46      	ldr	r2, [pc, #280]	; (8013bb4 <xPortStartScheduler+0x124>)
 8013a9c:	4293      	cmp	r3, r2
 8013a9e:	d10a      	bne.n	8013ab6 <xPortStartScheduler+0x26>
	__asm volatile
 8013aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aa4:	f383 8811 	msr	BASEPRI, r3
 8013aa8:	f3bf 8f6f 	isb	sy
 8013aac:	f3bf 8f4f 	dsb	sy
 8013ab0:	613b      	str	r3, [r7, #16]
}
 8013ab2:	bf00      	nop
 8013ab4:	e7fe      	b.n	8013ab4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013ab6:	4b3e      	ldr	r3, [pc, #248]	; (8013bb0 <xPortStartScheduler+0x120>)
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	4a3f      	ldr	r2, [pc, #252]	; (8013bb8 <xPortStartScheduler+0x128>)
 8013abc:	4293      	cmp	r3, r2
 8013abe:	d10a      	bne.n	8013ad6 <xPortStartScheduler+0x46>
	__asm volatile
 8013ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ac4:	f383 8811 	msr	BASEPRI, r3
 8013ac8:	f3bf 8f6f 	isb	sy
 8013acc:	f3bf 8f4f 	dsb	sy
 8013ad0:	60fb      	str	r3, [r7, #12]
}
 8013ad2:	bf00      	nop
 8013ad4:	e7fe      	b.n	8013ad4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013ad6:	4b39      	ldr	r3, [pc, #228]	; (8013bbc <xPortStartScheduler+0x12c>)
 8013ad8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013ada:	697b      	ldr	r3, [r7, #20]
 8013adc:	781b      	ldrb	r3, [r3, #0]
 8013ade:	b2db      	uxtb	r3, r3
 8013ae0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013ae2:	697b      	ldr	r3, [r7, #20]
 8013ae4:	22ff      	movs	r2, #255	; 0xff
 8013ae6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013ae8:	697b      	ldr	r3, [r7, #20]
 8013aea:	781b      	ldrb	r3, [r3, #0]
 8013aec:	b2db      	uxtb	r3, r3
 8013aee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013af0:	78fb      	ldrb	r3, [r7, #3]
 8013af2:	b2db      	uxtb	r3, r3
 8013af4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013af8:	b2da      	uxtb	r2, r3
 8013afa:	4b31      	ldr	r3, [pc, #196]	; (8013bc0 <xPortStartScheduler+0x130>)
 8013afc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013afe:	4b31      	ldr	r3, [pc, #196]	; (8013bc4 <xPortStartScheduler+0x134>)
 8013b00:	2207      	movs	r2, #7
 8013b02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013b04:	e009      	b.n	8013b1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8013b06:	4b2f      	ldr	r3, [pc, #188]	; (8013bc4 <xPortStartScheduler+0x134>)
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	3b01      	subs	r3, #1
 8013b0c:	4a2d      	ldr	r2, [pc, #180]	; (8013bc4 <xPortStartScheduler+0x134>)
 8013b0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013b10:	78fb      	ldrb	r3, [r7, #3]
 8013b12:	b2db      	uxtb	r3, r3
 8013b14:	005b      	lsls	r3, r3, #1
 8013b16:	b2db      	uxtb	r3, r3
 8013b18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013b1a:	78fb      	ldrb	r3, [r7, #3]
 8013b1c:	b2db      	uxtb	r3, r3
 8013b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013b22:	2b80      	cmp	r3, #128	; 0x80
 8013b24:	d0ef      	beq.n	8013b06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013b26:	4b27      	ldr	r3, [pc, #156]	; (8013bc4 <xPortStartScheduler+0x134>)
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	f1c3 0307 	rsb	r3, r3, #7
 8013b2e:	2b04      	cmp	r3, #4
 8013b30:	d00a      	beq.n	8013b48 <xPortStartScheduler+0xb8>
	__asm volatile
 8013b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b36:	f383 8811 	msr	BASEPRI, r3
 8013b3a:	f3bf 8f6f 	isb	sy
 8013b3e:	f3bf 8f4f 	dsb	sy
 8013b42:	60bb      	str	r3, [r7, #8]
}
 8013b44:	bf00      	nop
 8013b46:	e7fe      	b.n	8013b46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013b48:	4b1e      	ldr	r3, [pc, #120]	; (8013bc4 <xPortStartScheduler+0x134>)
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	021b      	lsls	r3, r3, #8
 8013b4e:	4a1d      	ldr	r2, [pc, #116]	; (8013bc4 <xPortStartScheduler+0x134>)
 8013b50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013b52:	4b1c      	ldr	r3, [pc, #112]	; (8013bc4 <xPortStartScheduler+0x134>)
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013b5a:	4a1a      	ldr	r2, [pc, #104]	; (8013bc4 <xPortStartScheduler+0x134>)
 8013b5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	b2da      	uxtb	r2, r3
 8013b62:	697b      	ldr	r3, [r7, #20]
 8013b64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013b66:	4b18      	ldr	r3, [pc, #96]	; (8013bc8 <xPortStartScheduler+0x138>)
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	4a17      	ldr	r2, [pc, #92]	; (8013bc8 <xPortStartScheduler+0x138>)
 8013b6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013b70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013b72:	4b15      	ldr	r3, [pc, #84]	; (8013bc8 <xPortStartScheduler+0x138>)
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	4a14      	ldr	r2, [pc, #80]	; (8013bc8 <xPortStartScheduler+0x138>)
 8013b78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013b7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013b7e:	f000 f8dd 	bl	8013d3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013b82:	4b12      	ldr	r3, [pc, #72]	; (8013bcc <xPortStartScheduler+0x13c>)
 8013b84:	2200      	movs	r2, #0
 8013b86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013b88:	f000 f8fc 	bl	8013d84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013b8c:	4b10      	ldr	r3, [pc, #64]	; (8013bd0 <xPortStartScheduler+0x140>)
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	4a0f      	ldr	r2, [pc, #60]	; (8013bd0 <xPortStartScheduler+0x140>)
 8013b92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013b96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013b98:	f7ff ff66 	bl	8013a68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013b9c:	f7ff fba0 	bl	80132e0 <vTaskSwitchContext>
	prvTaskExitError();
 8013ba0:	f7ff ff22 	bl	80139e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013ba4:	2300      	movs	r3, #0
}
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	3718      	adds	r7, #24
 8013baa:	46bd      	mov	sp, r7
 8013bac:	bd80      	pop	{r7, pc}
 8013bae:	bf00      	nop
 8013bb0:	e000ed00 	.word	0xe000ed00
 8013bb4:	410fc271 	.word	0x410fc271
 8013bb8:	410fc270 	.word	0x410fc270
 8013bbc:	e000e400 	.word	0xe000e400
 8013bc0:	20002434 	.word	0x20002434
 8013bc4:	20002438 	.word	0x20002438
 8013bc8:	e000ed20 	.word	0xe000ed20
 8013bcc:	200002b0 	.word	0x200002b0
 8013bd0:	e000ef34 	.word	0xe000ef34

08013bd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013bd4:	b480      	push	{r7}
 8013bd6:	b083      	sub	sp, #12
 8013bd8:	af00      	add	r7, sp, #0
	__asm volatile
 8013bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bde:	f383 8811 	msr	BASEPRI, r3
 8013be2:	f3bf 8f6f 	isb	sy
 8013be6:	f3bf 8f4f 	dsb	sy
 8013bea:	607b      	str	r3, [r7, #4]
}
 8013bec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013bee:	4b0f      	ldr	r3, [pc, #60]	; (8013c2c <vPortEnterCritical+0x58>)
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	3301      	adds	r3, #1
 8013bf4:	4a0d      	ldr	r2, [pc, #52]	; (8013c2c <vPortEnterCritical+0x58>)
 8013bf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013bf8:	4b0c      	ldr	r3, [pc, #48]	; (8013c2c <vPortEnterCritical+0x58>)
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	2b01      	cmp	r3, #1
 8013bfe:	d10f      	bne.n	8013c20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013c00:	4b0b      	ldr	r3, [pc, #44]	; (8013c30 <vPortEnterCritical+0x5c>)
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	b2db      	uxtb	r3, r3
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d00a      	beq.n	8013c20 <vPortEnterCritical+0x4c>
	__asm volatile
 8013c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c0e:	f383 8811 	msr	BASEPRI, r3
 8013c12:	f3bf 8f6f 	isb	sy
 8013c16:	f3bf 8f4f 	dsb	sy
 8013c1a:	603b      	str	r3, [r7, #0]
}
 8013c1c:	bf00      	nop
 8013c1e:	e7fe      	b.n	8013c1e <vPortEnterCritical+0x4a>
	}
}
 8013c20:	bf00      	nop
 8013c22:	370c      	adds	r7, #12
 8013c24:	46bd      	mov	sp, r7
 8013c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2a:	4770      	bx	lr
 8013c2c:	200002b0 	.word	0x200002b0
 8013c30:	e000ed04 	.word	0xe000ed04

08013c34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013c34:	b480      	push	{r7}
 8013c36:	b083      	sub	sp, #12
 8013c38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013c3a:	4b12      	ldr	r3, [pc, #72]	; (8013c84 <vPortExitCritical+0x50>)
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d10a      	bne.n	8013c58 <vPortExitCritical+0x24>
	__asm volatile
 8013c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c46:	f383 8811 	msr	BASEPRI, r3
 8013c4a:	f3bf 8f6f 	isb	sy
 8013c4e:	f3bf 8f4f 	dsb	sy
 8013c52:	607b      	str	r3, [r7, #4]
}
 8013c54:	bf00      	nop
 8013c56:	e7fe      	b.n	8013c56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013c58:	4b0a      	ldr	r3, [pc, #40]	; (8013c84 <vPortExitCritical+0x50>)
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	3b01      	subs	r3, #1
 8013c5e:	4a09      	ldr	r2, [pc, #36]	; (8013c84 <vPortExitCritical+0x50>)
 8013c60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013c62:	4b08      	ldr	r3, [pc, #32]	; (8013c84 <vPortExitCritical+0x50>)
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d105      	bne.n	8013c76 <vPortExitCritical+0x42>
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013c6e:	683b      	ldr	r3, [r7, #0]
 8013c70:	f383 8811 	msr	BASEPRI, r3
}
 8013c74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013c76:	bf00      	nop
 8013c78:	370c      	adds	r7, #12
 8013c7a:	46bd      	mov	sp, r7
 8013c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c80:	4770      	bx	lr
 8013c82:	bf00      	nop
 8013c84:	200002b0 	.word	0x200002b0
	...

08013c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013c90:	f3ef 8009 	mrs	r0, PSP
 8013c94:	f3bf 8f6f 	isb	sy
 8013c98:	4b15      	ldr	r3, [pc, #84]	; (8013cf0 <pxCurrentTCBConst>)
 8013c9a:	681a      	ldr	r2, [r3, #0]
 8013c9c:	f01e 0f10 	tst.w	lr, #16
 8013ca0:	bf08      	it	eq
 8013ca2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013ca6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013caa:	6010      	str	r0, [r2, #0]
 8013cac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013cb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013cb4:	f380 8811 	msr	BASEPRI, r0
 8013cb8:	f3bf 8f4f 	dsb	sy
 8013cbc:	f3bf 8f6f 	isb	sy
 8013cc0:	f7ff fb0e 	bl	80132e0 <vTaskSwitchContext>
 8013cc4:	f04f 0000 	mov.w	r0, #0
 8013cc8:	f380 8811 	msr	BASEPRI, r0
 8013ccc:	bc09      	pop	{r0, r3}
 8013cce:	6819      	ldr	r1, [r3, #0]
 8013cd0:	6808      	ldr	r0, [r1, #0]
 8013cd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cd6:	f01e 0f10 	tst.w	lr, #16
 8013cda:	bf08      	it	eq
 8013cdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013ce0:	f380 8809 	msr	PSP, r0
 8013ce4:	f3bf 8f6f 	isb	sy
 8013ce8:	4770      	bx	lr
 8013cea:	bf00      	nop
 8013cec:	f3af 8000 	nop.w

08013cf0 <pxCurrentTCBConst>:
 8013cf0:	20002308 	.word	0x20002308
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013cf4:	bf00      	nop
 8013cf6:	bf00      	nop

08013cf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b082      	sub	sp, #8
 8013cfc:	af00      	add	r7, sp, #0
	__asm volatile
 8013cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d02:	f383 8811 	msr	BASEPRI, r3
 8013d06:	f3bf 8f6f 	isb	sy
 8013d0a:	f3bf 8f4f 	dsb	sy
 8013d0e:	607b      	str	r3, [r7, #4]
}
 8013d10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013d12:	f7ff fa2d 	bl	8013170 <xTaskIncrementTick>
 8013d16:	4603      	mov	r3, r0
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d003      	beq.n	8013d24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013d1c:	4b06      	ldr	r3, [pc, #24]	; (8013d38 <SysTick_Handler+0x40>)
 8013d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d22:	601a      	str	r2, [r3, #0]
 8013d24:	2300      	movs	r3, #0
 8013d26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013d28:	683b      	ldr	r3, [r7, #0]
 8013d2a:	f383 8811 	msr	BASEPRI, r3
}
 8013d2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013d30:	bf00      	nop
 8013d32:	3708      	adds	r7, #8
 8013d34:	46bd      	mov	sp, r7
 8013d36:	bd80      	pop	{r7, pc}
 8013d38:	e000ed04 	.word	0xe000ed04

08013d3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013d3c:	b480      	push	{r7}
 8013d3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013d40:	4b0b      	ldr	r3, [pc, #44]	; (8013d70 <vPortSetupTimerInterrupt+0x34>)
 8013d42:	2200      	movs	r2, #0
 8013d44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013d46:	4b0b      	ldr	r3, [pc, #44]	; (8013d74 <vPortSetupTimerInterrupt+0x38>)
 8013d48:	2200      	movs	r2, #0
 8013d4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013d4c:	4b0a      	ldr	r3, [pc, #40]	; (8013d78 <vPortSetupTimerInterrupt+0x3c>)
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	4a0a      	ldr	r2, [pc, #40]	; (8013d7c <vPortSetupTimerInterrupt+0x40>)
 8013d52:	fba2 2303 	umull	r2, r3, r2, r3
 8013d56:	099b      	lsrs	r3, r3, #6
 8013d58:	4a09      	ldr	r2, [pc, #36]	; (8013d80 <vPortSetupTimerInterrupt+0x44>)
 8013d5a:	3b01      	subs	r3, #1
 8013d5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013d5e:	4b04      	ldr	r3, [pc, #16]	; (8013d70 <vPortSetupTimerInterrupt+0x34>)
 8013d60:	2207      	movs	r2, #7
 8013d62:	601a      	str	r2, [r3, #0]
}
 8013d64:	bf00      	nop
 8013d66:	46bd      	mov	sp, r7
 8013d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d6c:	4770      	bx	lr
 8013d6e:	bf00      	nop
 8013d70:	e000e010 	.word	0xe000e010
 8013d74:	e000e018 	.word	0xe000e018
 8013d78:	20000234 	.word	0x20000234
 8013d7c:	10624dd3 	.word	0x10624dd3
 8013d80:	e000e014 	.word	0xe000e014

08013d84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013d84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013d94 <vPortEnableVFP+0x10>
 8013d88:	6801      	ldr	r1, [r0, #0]
 8013d8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013d8e:	6001      	str	r1, [r0, #0]
 8013d90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013d92:	bf00      	nop
 8013d94:	e000ed88 	.word	0xe000ed88

08013d98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013d98:	b480      	push	{r7}
 8013d9a:	b085      	sub	sp, #20
 8013d9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013d9e:	f3ef 8305 	mrs	r3, IPSR
 8013da2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	2b0f      	cmp	r3, #15
 8013da8:	d914      	bls.n	8013dd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013daa:	4a17      	ldr	r2, [pc, #92]	; (8013e08 <vPortValidateInterruptPriority+0x70>)
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	4413      	add	r3, r2
 8013db0:	781b      	ldrb	r3, [r3, #0]
 8013db2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013db4:	4b15      	ldr	r3, [pc, #84]	; (8013e0c <vPortValidateInterruptPriority+0x74>)
 8013db6:	781b      	ldrb	r3, [r3, #0]
 8013db8:	7afa      	ldrb	r2, [r7, #11]
 8013dba:	429a      	cmp	r2, r3
 8013dbc:	d20a      	bcs.n	8013dd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8013dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dc2:	f383 8811 	msr	BASEPRI, r3
 8013dc6:	f3bf 8f6f 	isb	sy
 8013dca:	f3bf 8f4f 	dsb	sy
 8013dce:	607b      	str	r3, [r7, #4]
}
 8013dd0:	bf00      	nop
 8013dd2:	e7fe      	b.n	8013dd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013dd4:	4b0e      	ldr	r3, [pc, #56]	; (8013e10 <vPortValidateInterruptPriority+0x78>)
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013ddc:	4b0d      	ldr	r3, [pc, #52]	; (8013e14 <vPortValidateInterruptPriority+0x7c>)
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	429a      	cmp	r2, r3
 8013de2:	d90a      	bls.n	8013dfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8013de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013de8:	f383 8811 	msr	BASEPRI, r3
 8013dec:	f3bf 8f6f 	isb	sy
 8013df0:	f3bf 8f4f 	dsb	sy
 8013df4:	603b      	str	r3, [r7, #0]
}
 8013df6:	bf00      	nop
 8013df8:	e7fe      	b.n	8013df8 <vPortValidateInterruptPriority+0x60>
	}
 8013dfa:	bf00      	nop
 8013dfc:	3714      	adds	r7, #20
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e04:	4770      	bx	lr
 8013e06:	bf00      	nop
 8013e08:	e000e3f0 	.word	0xe000e3f0
 8013e0c:	20002434 	.word	0x20002434
 8013e10:	e000ed0c 	.word	0xe000ed0c
 8013e14:	20002438 	.word	0x20002438

08013e18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013e18:	b580      	push	{r7, lr}
 8013e1a:	b08a      	sub	sp, #40	; 0x28
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013e20:	2300      	movs	r3, #0
 8013e22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013e24:	f7ff f8ea 	bl	8012ffc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013e28:	4b5b      	ldr	r3, [pc, #364]	; (8013f98 <pvPortMalloc+0x180>)
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d101      	bne.n	8013e34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013e30:	f000 f920 	bl	8014074 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013e34:	4b59      	ldr	r3, [pc, #356]	; (8013f9c <pvPortMalloc+0x184>)
 8013e36:	681a      	ldr	r2, [r3, #0]
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	4013      	ands	r3, r2
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	f040 8093 	bne.w	8013f68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d01d      	beq.n	8013e84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8013e48:	2208      	movs	r2, #8
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	4413      	add	r3, r2
 8013e4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	f003 0307 	and.w	r3, r3, #7
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d014      	beq.n	8013e84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	f023 0307 	bic.w	r3, r3, #7
 8013e60:	3308      	adds	r3, #8
 8013e62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	f003 0307 	and.w	r3, r3, #7
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d00a      	beq.n	8013e84 <pvPortMalloc+0x6c>
	__asm volatile
 8013e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e72:	f383 8811 	msr	BASEPRI, r3
 8013e76:	f3bf 8f6f 	isb	sy
 8013e7a:	f3bf 8f4f 	dsb	sy
 8013e7e:	617b      	str	r3, [r7, #20]
}
 8013e80:	bf00      	nop
 8013e82:	e7fe      	b.n	8013e82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d06e      	beq.n	8013f68 <pvPortMalloc+0x150>
 8013e8a:	4b45      	ldr	r3, [pc, #276]	; (8013fa0 <pvPortMalloc+0x188>)
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	687a      	ldr	r2, [r7, #4]
 8013e90:	429a      	cmp	r2, r3
 8013e92:	d869      	bhi.n	8013f68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013e94:	4b43      	ldr	r3, [pc, #268]	; (8013fa4 <pvPortMalloc+0x18c>)
 8013e96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013e98:	4b42      	ldr	r3, [pc, #264]	; (8013fa4 <pvPortMalloc+0x18c>)
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013e9e:	e004      	b.n	8013eaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8013ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eac:	685b      	ldr	r3, [r3, #4]
 8013eae:	687a      	ldr	r2, [r7, #4]
 8013eb0:	429a      	cmp	r2, r3
 8013eb2:	d903      	bls.n	8013ebc <pvPortMalloc+0xa4>
 8013eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d1f1      	bne.n	8013ea0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013ebc:	4b36      	ldr	r3, [pc, #216]	; (8013f98 <pvPortMalloc+0x180>)
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ec2:	429a      	cmp	r2, r3
 8013ec4:	d050      	beq.n	8013f68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013ec6:	6a3b      	ldr	r3, [r7, #32]
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	2208      	movs	r2, #8
 8013ecc:	4413      	add	r3, r2
 8013ece:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ed2:	681a      	ldr	r2, [r3, #0]
 8013ed4:	6a3b      	ldr	r3, [r7, #32]
 8013ed6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eda:	685a      	ldr	r2, [r3, #4]
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	1ad2      	subs	r2, r2, r3
 8013ee0:	2308      	movs	r3, #8
 8013ee2:	005b      	lsls	r3, r3, #1
 8013ee4:	429a      	cmp	r2, r3
 8013ee6:	d91f      	bls.n	8013f28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	4413      	add	r3, r2
 8013eee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013ef0:	69bb      	ldr	r3, [r7, #24]
 8013ef2:	f003 0307 	and.w	r3, r3, #7
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d00a      	beq.n	8013f10 <pvPortMalloc+0xf8>
	__asm volatile
 8013efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013efe:	f383 8811 	msr	BASEPRI, r3
 8013f02:	f3bf 8f6f 	isb	sy
 8013f06:	f3bf 8f4f 	dsb	sy
 8013f0a:	613b      	str	r3, [r7, #16]
}
 8013f0c:	bf00      	nop
 8013f0e:	e7fe      	b.n	8013f0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f12:	685a      	ldr	r2, [r3, #4]
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	1ad2      	subs	r2, r2, r3
 8013f18:	69bb      	ldr	r3, [r7, #24]
 8013f1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f1e:	687a      	ldr	r2, [r7, #4]
 8013f20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013f22:	69b8      	ldr	r0, [r7, #24]
 8013f24:	f000 f908 	bl	8014138 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013f28:	4b1d      	ldr	r3, [pc, #116]	; (8013fa0 <pvPortMalloc+0x188>)
 8013f2a:	681a      	ldr	r2, [r3, #0]
 8013f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f2e:	685b      	ldr	r3, [r3, #4]
 8013f30:	1ad3      	subs	r3, r2, r3
 8013f32:	4a1b      	ldr	r2, [pc, #108]	; (8013fa0 <pvPortMalloc+0x188>)
 8013f34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013f36:	4b1a      	ldr	r3, [pc, #104]	; (8013fa0 <pvPortMalloc+0x188>)
 8013f38:	681a      	ldr	r2, [r3, #0]
 8013f3a:	4b1b      	ldr	r3, [pc, #108]	; (8013fa8 <pvPortMalloc+0x190>)
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	429a      	cmp	r2, r3
 8013f40:	d203      	bcs.n	8013f4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013f42:	4b17      	ldr	r3, [pc, #92]	; (8013fa0 <pvPortMalloc+0x188>)
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	4a18      	ldr	r2, [pc, #96]	; (8013fa8 <pvPortMalloc+0x190>)
 8013f48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f4c:	685a      	ldr	r2, [r3, #4]
 8013f4e:	4b13      	ldr	r3, [pc, #76]	; (8013f9c <pvPortMalloc+0x184>)
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	431a      	orrs	r2, r3
 8013f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f5a:	2200      	movs	r2, #0
 8013f5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8013f5e:	4b13      	ldr	r3, [pc, #76]	; (8013fac <pvPortMalloc+0x194>)
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	3301      	adds	r3, #1
 8013f64:	4a11      	ldr	r2, [pc, #68]	; (8013fac <pvPortMalloc+0x194>)
 8013f66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013f68:	f7ff f856 	bl	8013018 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013f6c:	69fb      	ldr	r3, [r7, #28]
 8013f6e:	f003 0307 	and.w	r3, r3, #7
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d00a      	beq.n	8013f8c <pvPortMalloc+0x174>
	__asm volatile
 8013f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f7a:	f383 8811 	msr	BASEPRI, r3
 8013f7e:	f3bf 8f6f 	isb	sy
 8013f82:	f3bf 8f4f 	dsb	sy
 8013f86:	60fb      	str	r3, [r7, #12]
}
 8013f88:	bf00      	nop
 8013f8a:	e7fe      	b.n	8013f8a <pvPortMalloc+0x172>
	return pvReturn;
 8013f8c:	69fb      	ldr	r3, [r7, #28]
}
 8013f8e:	4618      	mov	r0, r3
 8013f90:	3728      	adds	r7, #40	; 0x28
 8013f92:	46bd      	mov	sp, r7
 8013f94:	bd80      	pop	{r7, pc}
 8013f96:	bf00      	nop
 8013f98:	20008204 	.word	0x20008204
 8013f9c:	20008218 	.word	0x20008218
 8013fa0:	20008208 	.word	0x20008208
 8013fa4:	200081fc 	.word	0x200081fc
 8013fa8:	2000820c 	.word	0x2000820c
 8013fac:	20008210 	.word	0x20008210

08013fb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013fb0:	b580      	push	{r7, lr}
 8013fb2:	b086      	sub	sp, #24
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d04d      	beq.n	801405e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013fc2:	2308      	movs	r3, #8
 8013fc4:	425b      	negs	r3, r3
 8013fc6:	697a      	ldr	r2, [r7, #20]
 8013fc8:	4413      	add	r3, r2
 8013fca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013fcc:	697b      	ldr	r3, [r7, #20]
 8013fce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013fd0:	693b      	ldr	r3, [r7, #16]
 8013fd2:	685a      	ldr	r2, [r3, #4]
 8013fd4:	4b24      	ldr	r3, [pc, #144]	; (8014068 <vPortFree+0xb8>)
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	4013      	ands	r3, r2
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d10a      	bne.n	8013ff4 <vPortFree+0x44>
	__asm volatile
 8013fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fe2:	f383 8811 	msr	BASEPRI, r3
 8013fe6:	f3bf 8f6f 	isb	sy
 8013fea:	f3bf 8f4f 	dsb	sy
 8013fee:	60fb      	str	r3, [r7, #12]
}
 8013ff0:	bf00      	nop
 8013ff2:	e7fe      	b.n	8013ff2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013ff4:	693b      	ldr	r3, [r7, #16]
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d00a      	beq.n	8014012 <vPortFree+0x62>
	__asm volatile
 8013ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014000:	f383 8811 	msr	BASEPRI, r3
 8014004:	f3bf 8f6f 	isb	sy
 8014008:	f3bf 8f4f 	dsb	sy
 801400c:	60bb      	str	r3, [r7, #8]
}
 801400e:	bf00      	nop
 8014010:	e7fe      	b.n	8014010 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014012:	693b      	ldr	r3, [r7, #16]
 8014014:	685a      	ldr	r2, [r3, #4]
 8014016:	4b14      	ldr	r3, [pc, #80]	; (8014068 <vPortFree+0xb8>)
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	4013      	ands	r3, r2
 801401c:	2b00      	cmp	r3, #0
 801401e:	d01e      	beq.n	801405e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014020:	693b      	ldr	r3, [r7, #16]
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d11a      	bne.n	801405e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014028:	693b      	ldr	r3, [r7, #16]
 801402a:	685a      	ldr	r2, [r3, #4]
 801402c:	4b0e      	ldr	r3, [pc, #56]	; (8014068 <vPortFree+0xb8>)
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	43db      	mvns	r3, r3
 8014032:	401a      	ands	r2, r3
 8014034:	693b      	ldr	r3, [r7, #16]
 8014036:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014038:	f7fe ffe0 	bl	8012ffc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801403c:	693b      	ldr	r3, [r7, #16]
 801403e:	685a      	ldr	r2, [r3, #4]
 8014040:	4b0a      	ldr	r3, [pc, #40]	; (801406c <vPortFree+0xbc>)
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	4413      	add	r3, r2
 8014046:	4a09      	ldr	r2, [pc, #36]	; (801406c <vPortFree+0xbc>)
 8014048:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801404a:	6938      	ldr	r0, [r7, #16]
 801404c:	f000 f874 	bl	8014138 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014050:	4b07      	ldr	r3, [pc, #28]	; (8014070 <vPortFree+0xc0>)
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	3301      	adds	r3, #1
 8014056:	4a06      	ldr	r2, [pc, #24]	; (8014070 <vPortFree+0xc0>)
 8014058:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801405a:	f7fe ffdd 	bl	8013018 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801405e:	bf00      	nop
 8014060:	3718      	adds	r7, #24
 8014062:	46bd      	mov	sp, r7
 8014064:	bd80      	pop	{r7, pc}
 8014066:	bf00      	nop
 8014068:	20008218 	.word	0x20008218
 801406c:	20008208 	.word	0x20008208
 8014070:	20008214 	.word	0x20008214

08014074 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014074:	b480      	push	{r7}
 8014076:	b085      	sub	sp, #20
 8014078:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801407a:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 801407e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014080:	4b27      	ldr	r3, [pc, #156]	; (8014120 <prvHeapInit+0xac>)
 8014082:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	f003 0307 	and.w	r3, r3, #7
 801408a:	2b00      	cmp	r3, #0
 801408c:	d00c      	beq.n	80140a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	3307      	adds	r3, #7
 8014092:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	f023 0307 	bic.w	r3, r3, #7
 801409a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801409c:	68ba      	ldr	r2, [r7, #8]
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	1ad3      	subs	r3, r2, r3
 80140a2:	4a1f      	ldr	r2, [pc, #124]	; (8014120 <prvHeapInit+0xac>)
 80140a4:	4413      	add	r3, r2
 80140a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80140ac:	4a1d      	ldr	r2, [pc, #116]	; (8014124 <prvHeapInit+0xb0>)
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80140b2:	4b1c      	ldr	r3, [pc, #112]	; (8014124 <prvHeapInit+0xb0>)
 80140b4:	2200      	movs	r2, #0
 80140b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	68ba      	ldr	r2, [r7, #8]
 80140bc:	4413      	add	r3, r2
 80140be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80140c0:	2208      	movs	r2, #8
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	1a9b      	subs	r3, r3, r2
 80140c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	f023 0307 	bic.w	r3, r3, #7
 80140ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	4a15      	ldr	r2, [pc, #84]	; (8014128 <prvHeapInit+0xb4>)
 80140d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80140d6:	4b14      	ldr	r3, [pc, #80]	; (8014128 <prvHeapInit+0xb4>)
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	2200      	movs	r2, #0
 80140dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80140de:	4b12      	ldr	r3, [pc, #72]	; (8014128 <prvHeapInit+0xb4>)
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	2200      	movs	r2, #0
 80140e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80140ea:	683b      	ldr	r3, [r7, #0]
 80140ec:	68fa      	ldr	r2, [r7, #12]
 80140ee:	1ad2      	subs	r2, r2, r3
 80140f0:	683b      	ldr	r3, [r7, #0]
 80140f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80140f4:	4b0c      	ldr	r3, [pc, #48]	; (8014128 <prvHeapInit+0xb4>)
 80140f6:	681a      	ldr	r2, [r3, #0]
 80140f8:	683b      	ldr	r3, [r7, #0]
 80140fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80140fc:	683b      	ldr	r3, [r7, #0]
 80140fe:	685b      	ldr	r3, [r3, #4]
 8014100:	4a0a      	ldr	r2, [pc, #40]	; (801412c <prvHeapInit+0xb8>)
 8014102:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014104:	683b      	ldr	r3, [r7, #0]
 8014106:	685b      	ldr	r3, [r3, #4]
 8014108:	4a09      	ldr	r2, [pc, #36]	; (8014130 <prvHeapInit+0xbc>)
 801410a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801410c:	4b09      	ldr	r3, [pc, #36]	; (8014134 <prvHeapInit+0xc0>)
 801410e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014112:	601a      	str	r2, [r3, #0]
}
 8014114:	bf00      	nop
 8014116:	3714      	adds	r7, #20
 8014118:	46bd      	mov	sp, r7
 801411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801411e:	4770      	bx	lr
 8014120:	2000243c 	.word	0x2000243c
 8014124:	200081fc 	.word	0x200081fc
 8014128:	20008204 	.word	0x20008204
 801412c:	2000820c 	.word	0x2000820c
 8014130:	20008208 	.word	0x20008208
 8014134:	20008218 	.word	0x20008218

08014138 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014138:	b480      	push	{r7}
 801413a:	b085      	sub	sp, #20
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014140:	4b28      	ldr	r3, [pc, #160]	; (80141e4 <prvInsertBlockIntoFreeList+0xac>)
 8014142:	60fb      	str	r3, [r7, #12]
 8014144:	e002      	b.n	801414c <prvInsertBlockIntoFreeList+0x14>
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	60fb      	str	r3, [r7, #12]
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	687a      	ldr	r2, [r7, #4]
 8014152:	429a      	cmp	r2, r3
 8014154:	d8f7      	bhi.n	8014146 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	685b      	ldr	r3, [r3, #4]
 801415e:	68ba      	ldr	r2, [r7, #8]
 8014160:	4413      	add	r3, r2
 8014162:	687a      	ldr	r2, [r7, #4]
 8014164:	429a      	cmp	r2, r3
 8014166:	d108      	bne.n	801417a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	685a      	ldr	r2, [r3, #4]
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	685b      	ldr	r3, [r3, #4]
 8014170:	441a      	add	r2, r3
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	685b      	ldr	r3, [r3, #4]
 8014182:	68ba      	ldr	r2, [r7, #8]
 8014184:	441a      	add	r2, r3
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	429a      	cmp	r2, r3
 801418c:	d118      	bne.n	80141c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	681a      	ldr	r2, [r3, #0]
 8014192:	4b15      	ldr	r3, [pc, #84]	; (80141e8 <prvInsertBlockIntoFreeList+0xb0>)
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	429a      	cmp	r2, r3
 8014198:	d00d      	beq.n	80141b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	685a      	ldr	r2, [r3, #4]
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	685b      	ldr	r3, [r3, #4]
 80141a4:	441a      	add	r2, r3
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	681a      	ldr	r2, [r3, #0]
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	601a      	str	r2, [r3, #0]
 80141b4:	e008      	b.n	80141c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80141b6:	4b0c      	ldr	r3, [pc, #48]	; (80141e8 <prvInsertBlockIntoFreeList+0xb0>)
 80141b8:	681a      	ldr	r2, [r3, #0]
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	601a      	str	r2, [r3, #0]
 80141be:	e003      	b.n	80141c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	681a      	ldr	r2, [r3, #0]
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80141c8:	68fa      	ldr	r2, [r7, #12]
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	429a      	cmp	r2, r3
 80141ce:	d002      	beq.n	80141d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	687a      	ldr	r2, [r7, #4]
 80141d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80141d6:	bf00      	nop
 80141d8:	3714      	adds	r7, #20
 80141da:	46bd      	mov	sp, r7
 80141dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e0:	4770      	bx	lr
 80141e2:	bf00      	nop
 80141e4:	200081fc 	.word	0x200081fc
 80141e8:	20008204 	.word	0x20008204

080141ec <USB_transmit_msg>:

/*
 * -- Insert your variables declaration here --
 */
/* USER CODE BEGIN 0 */
void USB_transmit_msg(uint8_t* data,uint32_t size){
 80141ec:	b580      	push	{r7, lr}
 80141ee:	b082      	sub	sp, #8
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	6078      	str	r0, [r7, #4]
 80141f4:	6039      	str	r1, [r7, #0]
  USBH_CDC_Stop(&hUsbHostFS);
 80141f6:	4806      	ldr	r0, [pc, #24]	; (8014210 <USB_transmit_msg+0x24>)
 80141f8:	f7f6 fda1 	bl	800ad3e <USBH_CDC_Stop>
  USBH_CDC_Transmit(&hUsbHostFS,data, size);
 80141fc:	683a      	ldr	r2, [r7, #0]
 80141fe:	6879      	ldr	r1, [r7, #4]
 8014200:	4803      	ldr	r0, [pc, #12]	; (8014210 <USB_transmit_msg+0x24>)
 8014202:	f7f6 fe2c 	bl	800ae5e <USBH_CDC_Transmit>
}
 8014206:	bf00      	nop
 8014208:	3708      	adds	r7, #8
 801420a:	46bd      	mov	sp, r7
 801420c:	bd80      	pop	{r7, pc}
 801420e:	bf00      	nop
 8014210:	2000e1dc 	.word	0x2000e1dc

08014214 <USB_receive_msg>:

void USB_receive_msg(){
 8014214:	b580      	push	{r7, lr}
 8014216:	af00      	add	r7, sp, #0
  USBH_CDC_Stop(&hUsbHostFS);
 8014218:	4809      	ldr	r0, [pc, #36]	; (8014240 <USB_receive_msg+0x2c>)
 801421a:	f7f6 fd90 	bl	800ad3e <USBH_CDC_Stop>
  USBH_CDC_Receive(&hUsbHostFS,usb_rx_buff[usb_rx_buff_active],USB_RX_BUFF_SIZE);
 801421e:	4b09      	ldr	r3, [pc, #36]	; (8014244 <USB_receive_msg+0x30>)
 8014220:	781b      	ldrb	r3, [r3, #0]
 8014222:	461a      	mov	r2, r3
 8014224:	f640 53ac 	movw	r3, #3500	; 0xdac
 8014228:	fb02 f303 	mul.w	r3, r2, r3
 801422c:	4a06      	ldr	r2, [pc, #24]	; (8014248 <USB_receive_msg+0x34>)
 801422e:	4413      	add	r3, r2
 8014230:	f640 52ac 	movw	r2, #3500	; 0xdac
 8014234:	4619      	mov	r1, r3
 8014236:	4802      	ldr	r0, [pc, #8]	; (8014240 <USB_receive_msg+0x2c>)
 8014238:	f7f6 fe4c 	bl	800aed4 <USBH_CDC_Receive>
}
 801423c:	bf00      	nop
 801423e:	bd80      	pop	{r7, pc}
 8014240:	2000e1dc 	.word	0x2000e1dc
 8014244:	2000e1d8 	.word	0x2000e1d8
 8014248:	20008224 	.word	0x20008224

0801424c <USB_set_line_coding>:


void USB_set_line_coding(){
 801424c:	b580      	push	{r7, lr}
 801424e:	af00      	add	r7, sp, #0
	FrameFormat.b.dwDTERate = 1250000;
 8014250:	4b08      	ldr	r3, [pc, #32]	; (8014274 <USB_set_line_coding+0x28>)
 8014252:	4a09      	ldr	r2, [pc, #36]	; (8014278 <USB_set_line_coding+0x2c>)
 8014254:	601a      	str	r2, [r3, #0]
	FrameFormat.b.bCharFormat = 0;
 8014256:	4b07      	ldr	r3, [pc, #28]	; (8014274 <USB_set_line_coding+0x28>)
 8014258:	2200      	movs	r2, #0
 801425a:	711a      	strb	r2, [r3, #4]
	FrameFormat.b.bDataBits = 8;
 801425c:	4b05      	ldr	r3, [pc, #20]	; (8014274 <USB_set_line_coding+0x28>)
 801425e:	2208      	movs	r2, #8
 8014260:	719a      	strb	r2, [r3, #6]
	FrameFormat.b.bParityType = 0;
 8014262:	4b04      	ldr	r3, [pc, #16]	; (8014274 <USB_set_line_coding+0x28>)
 8014264:	2200      	movs	r2, #0
 8014266:	715a      	strb	r2, [r3, #5]

	USBH_CDC_SetLineCoding(&hUsbHostFS, &FrameFormat);
 8014268:	4902      	ldr	r1, [pc, #8]	; (8014274 <USB_set_line_coding+0x28>)
 801426a:	4804      	ldr	r0, [pc, #16]	; (801427c <USB_set_line_coding+0x30>)
 801426c:	f7f6 fdce 	bl	800ae0c <USBH_CDC_SetLineCoding>
}
 8014270:	bf00      	nop
 8014272:	bd80      	pop	{r7, pc}
 8014274:	2000821c 	.word	0x2000821c
 8014278:	001312d0 	.word	0x001312d0
 801427c:	2000e1dc 	.word	0x2000e1dc

08014280 <USBH_CDC_TransmitCallback>:
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */

void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b082      	sub	sp, #8
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
  USB_receive_msg();
 8014288:	f7ff ffc4 	bl	8014214 <USB_receive_msg>
}
 801428c:	bf00      	nop
 801428e:	3708      	adds	r7, #8
 8014290:	46bd      	mov	sp, r7
 8014292:	bd80      	pop	{r7, pc}

08014294 <USBH_CDC_ReceiveCallback>:


void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8014294:	b480      	push	{r7}
 8014296:	b083      	sub	sp, #12
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
}
 801429c:	bf00      	nop
 801429e:	370c      	adds	r7, #12
 80142a0:	46bd      	mov	sp, r7
 80142a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a6:	4770      	bx	lr

080142a8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	af00      	add	r7, sp, #0


  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80142ac:	2201      	movs	r2, #1
 80142ae:	490e      	ldr	r1, [pc, #56]	; (80142e8 <MX_USB_HOST_Init+0x40>)
 80142b0:	480e      	ldr	r0, [pc, #56]	; (80142ec <MX_USB_HOST_Init+0x44>)
 80142b2:	f7f6 ff95 	bl	800b1e0 <USBH_Init>
 80142b6:	4603      	mov	r3, r0
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d001      	beq.n	80142c0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80142bc:	f7ee f95c 	bl	8002578 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80142c0:	490b      	ldr	r1, [pc, #44]	; (80142f0 <MX_USB_HOST_Init+0x48>)
 80142c2:	480a      	ldr	r0, [pc, #40]	; (80142ec <MX_USB_HOST_Init+0x44>)
 80142c4:	f7f7 f842 	bl	800b34c <USBH_RegisterClass>
 80142c8:	4603      	mov	r3, r0
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d001      	beq.n	80142d2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80142ce:	f7ee f953 	bl	8002578 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80142d2:	4806      	ldr	r0, [pc, #24]	; (80142ec <MX_USB_HOST_Init+0x44>)
 80142d4:	f7f7 f8c6 	bl	800b464 <USBH_Start>
 80142d8:	4603      	mov	r3, r0
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d001      	beq.n	80142e2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80142de:	f7ee f94b 	bl	8002578 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80142e2:	bf00      	nop
 80142e4:	bd80      	pop	{r7, pc}
 80142e6:	bf00      	nop
 80142e8:	080142f5 	.word	0x080142f5
 80142ec:	2000e1dc 	.word	0x2000e1dc
 80142f0:	20000290 	.word	0x20000290

080142f4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b082      	sub	sp, #8
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
 80142fc:	460b      	mov	r3, r1
 80142fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8014300:	78fb      	ldrb	r3, [r7, #3]
 8014302:	3b01      	subs	r3, #1
 8014304:	2b04      	cmp	r3, #4
 8014306:	d82e      	bhi.n	8014366 <USBH_UserProcess+0x72>
 8014308:	a201      	add	r2, pc, #4	; (adr r2, 8014310 <USBH_UserProcess+0x1c>)
 801430a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801430e:	bf00      	nop
 8014310:	08014367 	.word	0x08014367
 8014314:	0801433b 	.word	0x0801433b
 8014318:	08014367 	.word	0x08014367
 801431c:	08014351 	.word	0x08014351
 8014320:	08014325 	.word	0x08014325
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8014324:	4b12      	ldr	r3, [pc, #72]	; (8014370 <USBH_UserProcess+0x7c>)
 8014326:	2203      	movs	r2, #3
 8014328:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_DISCONNECT, 0);
 801432a:	4b12      	ldr	r3, [pc, #72]	; (8014374 <USBH_UserProcess+0x80>)
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	2200      	movs	r2, #0
 8014330:	2103      	movs	r1, #3
 8014332:	4618      	mov	r0, r3
 8014334:	f7fd fd6e 	bl	8011e14 <osMessagePut>
  break;
 8014338:	e016      	b.n	8014368 <USBH_UserProcess+0x74>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801433a:	4b0d      	ldr	r3, [pc, #52]	; (8014370 <USBH_UserProcess+0x7c>)
 801433c:	2202      	movs	r2, #2
 801433e:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_READY, 0);
 8014340:	4b0c      	ldr	r3, [pc, #48]	; (8014374 <USBH_UserProcess+0x80>)
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	2200      	movs	r2, #0
 8014346:	2102      	movs	r1, #2
 8014348:	4618      	mov	r0, r3
 801434a:	f7fd fd63 	bl	8011e14 <osMessagePut>
  break;
 801434e:	e00b      	b.n	8014368 <USBH_UserProcess+0x74>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8014350:	4b07      	ldr	r3, [pc, #28]	; (8014370 <USBH_UserProcess+0x7c>)
 8014352:	2201      	movs	r2, #1
 8014354:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_START, 0);
 8014356:	4b07      	ldr	r3, [pc, #28]	; (8014374 <USBH_UserProcess+0x80>)
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	2200      	movs	r2, #0
 801435c:	2101      	movs	r1, #1
 801435e:	4618      	mov	r0, r3
 8014360:	f7fd fd58 	bl	8011e14 <osMessagePut>
  break;
 8014364:	e000      	b.n	8014368 <USBH_UserProcess+0x74>

  default:
  break;
 8014366:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8014368:	bf00      	nop
 801436a:	3708      	adds	r7, #8
 801436c:	46bd      	mov	sp, r7
 801436e:	bd80      	pop	{r7, pc}
 8014370:	2000e5c0 	.word	0x2000e5c0
 8014374:	200009a8 	.word	0x200009a8

08014378 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8014378:	b580      	push	{r7, lr}
 801437a:	b08a      	sub	sp, #40	; 0x28
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014380:	f107 0314 	add.w	r3, r7, #20
 8014384:	2200      	movs	r2, #0
 8014386:	601a      	str	r2, [r3, #0]
 8014388:	605a      	str	r2, [r3, #4]
 801438a:	609a      	str	r2, [r3, #8]
 801438c:	60da      	str	r2, [r3, #12]
 801438e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8014398:	d13a      	bne.n	8014410 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801439a:	2300      	movs	r3, #0
 801439c:	613b      	str	r3, [r7, #16]
 801439e:	4b1e      	ldr	r3, [pc, #120]	; (8014418 <HAL_HCD_MspInit+0xa0>)
 80143a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143a2:	4a1d      	ldr	r2, [pc, #116]	; (8014418 <HAL_HCD_MspInit+0xa0>)
 80143a4:	f043 0301 	orr.w	r3, r3, #1
 80143a8:	6313      	str	r3, [r2, #48]	; 0x30
 80143aa:	4b1b      	ldr	r3, [pc, #108]	; (8014418 <HAL_HCD_MspInit+0xa0>)
 80143ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143ae:	f003 0301 	and.w	r3, r3, #1
 80143b2:	613b      	str	r3, [r7, #16]
 80143b4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80143b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80143ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80143bc:	2302      	movs	r3, #2
 80143be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80143c0:	2300      	movs	r3, #0
 80143c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80143c4:	2303      	movs	r3, #3
 80143c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80143c8:	230a      	movs	r3, #10
 80143ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80143cc:	f107 0314 	add.w	r3, r7, #20
 80143d0:	4619      	mov	r1, r3
 80143d2:	4812      	ldr	r0, [pc, #72]	; (801441c <HAL_HCD_MspInit+0xa4>)
 80143d4:	f7f0 f80e 	bl	80043f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80143d8:	4b0f      	ldr	r3, [pc, #60]	; (8014418 <HAL_HCD_MspInit+0xa0>)
 80143da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80143dc:	4a0e      	ldr	r2, [pc, #56]	; (8014418 <HAL_HCD_MspInit+0xa0>)
 80143de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80143e2:	6353      	str	r3, [r2, #52]	; 0x34
 80143e4:	2300      	movs	r3, #0
 80143e6:	60fb      	str	r3, [r7, #12]
 80143e8:	4b0b      	ldr	r3, [pc, #44]	; (8014418 <HAL_HCD_MspInit+0xa0>)
 80143ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80143ec:	4a0a      	ldr	r2, [pc, #40]	; (8014418 <HAL_HCD_MspInit+0xa0>)
 80143ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80143f2:	6453      	str	r3, [r2, #68]	; 0x44
 80143f4:	4b08      	ldr	r3, [pc, #32]	; (8014418 <HAL_HCD_MspInit+0xa0>)
 80143f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80143f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80143fc:	60fb      	str	r3, [r7, #12]
 80143fe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8014400:	2200      	movs	r2, #0
 8014402:	2105      	movs	r1, #5
 8014404:	2043      	movs	r0, #67	; 0x43
 8014406:	f7ef f977 	bl	80036f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801440a:	2043      	movs	r0, #67	; 0x43
 801440c:	f7ef f990 	bl	8003730 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014410:	bf00      	nop
 8014412:	3728      	adds	r7, #40	; 0x28
 8014414:	46bd      	mov	sp, r7
 8014416:	bd80      	pop	{r7, pc}
 8014418:	40023800 	.word	0x40023800
 801441c:	40020000 	.word	0x40020000

08014420 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b082      	sub	sp, #8
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801442e:	4618      	mov	r0, r3
 8014430:	f7f7 fccf 	bl	800bdd2 <USBH_LL_IncTimer>
}
 8014434:	bf00      	nop
 8014436:	3708      	adds	r7, #8
 8014438:	46bd      	mov	sp, r7
 801443a:	bd80      	pop	{r7, pc}

0801443c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801443c:	b580      	push	{r7, lr}
 801443e:	b082      	sub	sp, #8
 8014440:	af00      	add	r7, sp, #0
 8014442:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801444a:	4618      	mov	r0, r3
 801444c:	f7f7 fd13 	bl	800be76 <USBH_LL_Connect>
}
 8014450:	bf00      	nop
 8014452:	3708      	adds	r7, #8
 8014454:	46bd      	mov	sp, r7
 8014456:	bd80      	pop	{r7, pc}

08014458 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8014458:	b580      	push	{r7, lr}
 801445a:	b082      	sub	sp, #8
 801445c:	af00      	add	r7, sp, #0
 801445e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8014466:	4618      	mov	r0, r3
 8014468:	f7f7 fd28 	bl	800bebc <USBH_LL_Disconnect>
}
 801446c:	bf00      	nop
 801446e:	3708      	adds	r7, #8
 8014470:	46bd      	mov	sp, r7
 8014472:	bd80      	pop	{r7, pc}

08014474 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8014474:	b580      	push	{r7, lr}
 8014476:	b082      	sub	sp, #8
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
 801447c:	460b      	mov	r3, r1
 801447e:	70fb      	strb	r3, [r7, #3]
 8014480:	4613      	mov	r3, r2
 8014482:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801448a:	4618      	mov	r0, r3
 801448c:	f7f7 fd5d 	bl	800bf4a <USBH_LL_NotifyURBChange>
#endif
}
 8014490:	bf00      	nop
 8014492:	3708      	adds	r7, #8
 8014494:	46bd      	mov	sp, r7
 8014496:	bd80      	pop	{r7, pc}

08014498 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8014498:	b580      	push	{r7, lr}
 801449a:	b082      	sub	sp, #8
 801449c:	af00      	add	r7, sp, #0
 801449e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80144a6:	4618      	mov	r0, r3
 80144a8:	f7f7 fcbd 	bl	800be26 <USBH_LL_PortEnabled>
}
 80144ac:	bf00      	nop
 80144ae:	3708      	adds	r7, #8
 80144b0:	46bd      	mov	sp, r7
 80144b2:	bd80      	pop	{r7, pc}

080144b4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b082      	sub	sp, #8
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80144c2:	4618      	mov	r0, r3
 80144c4:	f7f7 fcc9 	bl	800be5a <USBH_LL_PortDisabled>
}
 80144c8:	bf00      	nop
 80144ca:	3708      	adds	r7, #8
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bd80      	pop	{r7, pc}

080144d0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b082      	sub	sp, #8
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80144de:	2b01      	cmp	r3, #1
 80144e0:	d12a      	bne.n	8014538 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80144e2:	4a18      	ldr	r2, [pc, #96]	; (8014544 <USBH_LL_Init+0x74>)
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	4a15      	ldr	r2, [pc, #84]	; (8014544 <USBH_LL_Init+0x74>)
 80144ee:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80144f2:	4b14      	ldr	r3, [pc, #80]	; (8014544 <USBH_LL_Init+0x74>)
 80144f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80144f8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80144fa:	4b12      	ldr	r3, [pc, #72]	; (8014544 <USBH_LL_Init+0x74>)
 80144fc:	2208      	movs	r2, #8
 80144fe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8014500:	4b10      	ldr	r3, [pc, #64]	; (8014544 <USBH_LL_Init+0x74>)
 8014502:	2201      	movs	r2, #1
 8014504:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8014506:	4b0f      	ldr	r3, [pc, #60]	; (8014544 <USBH_LL_Init+0x74>)
 8014508:	2200      	movs	r2, #0
 801450a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801450c:	4b0d      	ldr	r3, [pc, #52]	; (8014544 <USBH_LL_Init+0x74>)
 801450e:	2202      	movs	r2, #2
 8014510:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8014512:	4b0c      	ldr	r3, [pc, #48]	; (8014544 <USBH_LL_Init+0x74>)
 8014514:	2200      	movs	r2, #0
 8014516:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8014518:	480a      	ldr	r0, [pc, #40]	; (8014544 <USBH_LL_Init+0x74>)
 801451a:	f7f0 f920 	bl	800475e <HAL_HCD_Init>
 801451e:	4603      	mov	r3, r0
 8014520:	2b00      	cmp	r3, #0
 8014522:	d001      	beq.n	8014528 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8014524:	f7ee f828 	bl	8002578 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8014528:	4806      	ldr	r0, [pc, #24]	; (8014544 <USBH_LL_Init+0x74>)
 801452a:	f7f0 fd04 	bl	8004f36 <HAL_HCD_GetCurrentFrame>
 801452e:	4603      	mov	r3, r0
 8014530:	4619      	mov	r1, r3
 8014532:	6878      	ldr	r0, [r7, #4]
 8014534:	f7f7 fc3e 	bl	800bdb4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8014538:	2300      	movs	r3, #0
}
 801453a:	4618      	mov	r0, r3
 801453c:	3708      	adds	r7, #8
 801453e:	46bd      	mov	sp, r7
 8014540:	bd80      	pop	{r7, pc}
 8014542:	bf00      	nop
 8014544:	2000e5c4 	.word	0x2000e5c4

08014548 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8014548:	b580      	push	{r7, lr}
 801454a:	b084      	sub	sp, #16
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014550:	2300      	movs	r3, #0
 8014552:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014554:	2300      	movs	r3, #0
 8014556:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801455e:	4618      	mov	r0, r3
 8014560:	f7f0 fc73 	bl	8004e4a <HAL_HCD_Start>
 8014564:	4603      	mov	r3, r0
 8014566:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014568:	7bfb      	ldrb	r3, [r7, #15]
 801456a:	4618      	mov	r0, r3
 801456c:	f000 f95c 	bl	8014828 <USBH_Get_USB_Status>
 8014570:	4603      	mov	r3, r0
 8014572:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014574:	7bbb      	ldrb	r3, [r7, #14]
}
 8014576:	4618      	mov	r0, r3
 8014578:	3710      	adds	r7, #16
 801457a:	46bd      	mov	sp, r7
 801457c:	bd80      	pop	{r7, pc}

0801457e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801457e:	b580      	push	{r7, lr}
 8014580:	b084      	sub	sp, #16
 8014582:	af00      	add	r7, sp, #0
 8014584:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014586:	2300      	movs	r3, #0
 8014588:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801458a:	2300      	movs	r3, #0
 801458c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014594:	4618      	mov	r0, r3
 8014596:	f7f0 fc7b 	bl	8004e90 <HAL_HCD_Stop>
 801459a:	4603      	mov	r3, r0
 801459c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801459e:	7bfb      	ldrb	r3, [r7, #15]
 80145a0:	4618      	mov	r0, r3
 80145a2:	f000 f941 	bl	8014828 <USBH_Get_USB_Status>
 80145a6:	4603      	mov	r3, r0
 80145a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80145aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80145ac:	4618      	mov	r0, r3
 80145ae:	3710      	adds	r7, #16
 80145b0:	46bd      	mov	sp, r7
 80145b2:	bd80      	pop	{r7, pc}

080145b4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80145b4:	b580      	push	{r7, lr}
 80145b6:	b084      	sub	sp, #16
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80145bc:	2301      	movs	r3, #1
 80145be:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80145c6:	4618      	mov	r0, r3
 80145c8:	f7f0 fcc3 	bl	8004f52 <HAL_HCD_GetCurrentSpeed>
 80145cc:	4603      	mov	r3, r0
 80145ce:	2b02      	cmp	r3, #2
 80145d0:	d00c      	beq.n	80145ec <USBH_LL_GetSpeed+0x38>
 80145d2:	2b02      	cmp	r3, #2
 80145d4:	d80d      	bhi.n	80145f2 <USBH_LL_GetSpeed+0x3e>
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d002      	beq.n	80145e0 <USBH_LL_GetSpeed+0x2c>
 80145da:	2b01      	cmp	r3, #1
 80145dc:	d003      	beq.n	80145e6 <USBH_LL_GetSpeed+0x32>
 80145de:	e008      	b.n	80145f2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80145e0:	2300      	movs	r3, #0
 80145e2:	73fb      	strb	r3, [r7, #15]
    break;
 80145e4:	e008      	b.n	80145f8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80145e6:	2301      	movs	r3, #1
 80145e8:	73fb      	strb	r3, [r7, #15]
    break;
 80145ea:	e005      	b.n	80145f8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80145ec:	2302      	movs	r3, #2
 80145ee:	73fb      	strb	r3, [r7, #15]
    break;
 80145f0:	e002      	b.n	80145f8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80145f2:	2301      	movs	r3, #1
 80145f4:	73fb      	strb	r3, [r7, #15]
    break;
 80145f6:	bf00      	nop
  }
  return  speed;
 80145f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80145fa:	4618      	mov	r0, r3
 80145fc:	3710      	adds	r7, #16
 80145fe:	46bd      	mov	sp, r7
 8014600:	bd80      	pop	{r7, pc}

08014602 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8014602:	b580      	push	{r7, lr}
 8014604:	b084      	sub	sp, #16
 8014606:	af00      	add	r7, sp, #0
 8014608:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801460a:	2300      	movs	r3, #0
 801460c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801460e:	2300      	movs	r3, #0
 8014610:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014618:	4618      	mov	r0, r3
 801461a:	f7f0 fc56 	bl	8004eca <HAL_HCD_ResetPort>
 801461e:	4603      	mov	r3, r0
 8014620:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014622:	7bfb      	ldrb	r3, [r7, #15]
 8014624:	4618      	mov	r0, r3
 8014626:	f000 f8ff 	bl	8014828 <USBH_Get_USB_Status>
 801462a:	4603      	mov	r3, r0
 801462c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801462e:	7bbb      	ldrb	r3, [r7, #14]
}
 8014630:	4618      	mov	r0, r3
 8014632:	3710      	adds	r7, #16
 8014634:	46bd      	mov	sp, r7
 8014636:	bd80      	pop	{r7, pc}

08014638 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b082      	sub	sp, #8
 801463c:	af00      	add	r7, sp, #0
 801463e:	6078      	str	r0, [r7, #4]
 8014640:	460b      	mov	r3, r1
 8014642:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801464a:	78fa      	ldrb	r2, [r7, #3]
 801464c:	4611      	mov	r1, r2
 801464e:	4618      	mov	r0, r3
 8014650:	f7f0 fc5d 	bl	8004f0e <HAL_HCD_HC_GetXferCount>
 8014654:	4603      	mov	r3, r0
}
 8014656:	4618      	mov	r0, r3
 8014658:	3708      	adds	r7, #8
 801465a:	46bd      	mov	sp, r7
 801465c:	bd80      	pop	{r7, pc}

0801465e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801465e:	b590      	push	{r4, r7, lr}
 8014660:	b089      	sub	sp, #36	; 0x24
 8014662:	af04      	add	r7, sp, #16
 8014664:	6078      	str	r0, [r7, #4]
 8014666:	4608      	mov	r0, r1
 8014668:	4611      	mov	r1, r2
 801466a:	461a      	mov	r2, r3
 801466c:	4603      	mov	r3, r0
 801466e:	70fb      	strb	r3, [r7, #3]
 8014670:	460b      	mov	r3, r1
 8014672:	70bb      	strb	r3, [r7, #2]
 8014674:	4613      	mov	r3, r2
 8014676:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014678:	2300      	movs	r3, #0
 801467a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801467c:	2300      	movs	r3, #0
 801467e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8014686:	787c      	ldrb	r4, [r7, #1]
 8014688:	78ba      	ldrb	r2, [r7, #2]
 801468a:	78f9      	ldrb	r1, [r7, #3]
 801468c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801468e:	9302      	str	r3, [sp, #8]
 8014690:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014694:	9301      	str	r3, [sp, #4]
 8014696:	f897 3020 	ldrb.w	r3, [r7, #32]
 801469a:	9300      	str	r3, [sp, #0]
 801469c:	4623      	mov	r3, r4
 801469e:	f7f0 f8c0 	bl	8004822 <HAL_HCD_HC_Init>
 80146a2:	4603      	mov	r3, r0
 80146a4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80146a6:	7bfb      	ldrb	r3, [r7, #15]
 80146a8:	4618      	mov	r0, r3
 80146aa:	f000 f8bd 	bl	8014828 <USBH_Get_USB_Status>
 80146ae:	4603      	mov	r3, r0
 80146b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80146b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80146b4:	4618      	mov	r0, r3
 80146b6:	3714      	adds	r7, #20
 80146b8:	46bd      	mov	sp, r7
 80146ba:	bd90      	pop	{r4, r7, pc}

080146bc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80146bc:	b580      	push	{r7, lr}
 80146be:	b084      	sub	sp, #16
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
 80146c4:	460b      	mov	r3, r1
 80146c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80146c8:	2300      	movs	r3, #0
 80146ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80146cc:	2300      	movs	r3, #0
 80146ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80146d6:	78fa      	ldrb	r2, [r7, #3]
 80146d8:	4611      	mov	r1, r2
 80146da:	4618      	mov	r0, r3
 80146dc:	f7f0 f930 	bl	8004940 <HAL_HCD_HC_Halt>
 80146e0:	4603      	mov	r3, r0
 80146e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80146e4:	7bfb      	ldrb	r3, [r7, #15]
 80146e6:	4618      	mov	r0, r3
 80146e8:	f000 f89e 	bl	8014828 <USBH_Get_USB_Status>
 80146ec:	4603      	mov	r3, r0
 80146ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80146f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80146f2:	4618      	mov	r0, r3
 80146f4:	3710      	adds	r7, #16
 80146f6:	46bd      	mov	sp, r7
 80146f8:	bd80      	pop	{r7, pc}

080146fa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80146fa:	b590      	push	{r4, r7, lr}
 80146fc:	b089      	sub	sp, #36	; 0x24
 80146fe:	af04      	add	r7, sp, #16
 8014700:	6078      	str	r0, [r7, #4]
 8014702:	4608      	mov	r0, r1
 8014704:	4611      	mov	r1, r2
 8014706:	461a      	mov	r2, r3
 8014708:	4603      	mov	r3, r0
 801470a:	70fb      	strb	r3, [r7, #3]
 801470c:	460b      	mov	r3, r1
 801470e:	70bb      	strb	r3, [r7, #2]
 8014710:	4613      	mov	r3, r2
 8014712:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014714:	2300      	movs	r3, #0
 8014716:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014718:	2300      	movs	r3, #0
 801471a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8014722:	787c      	ldrb	r4, [r7, #1]
 8014724:	78ba      	ldrb	r2, [r7, #2]
 8014726:	78f9      	ldrb	r1, [r7, #3]
 8014728:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801472c:	9303      	str	r3, [sp, #12]
 801472e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8014730:	9302      	str	r3, [sp, #8]
 8014732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014734:	9301      	str	r3, [sp, #4]
 8014736:	f897 3020 	ldrb.w	r3, [r7, #32]
 801473a:	9300      	str	r3, [sp, #0]
 801473c:	4623      	mov	r3, r4
 801473e:	f7f0 f923 	bl	8004988 <HAL_HCD_HC_SubmitRequest>
 8014742:	4603      	mov	r3, r0
 8014744:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8014746:	7bfb      	ldrb	r3, [r7, #15]
 8014748:	4618      	mov	r0, r3
 801474a:	f000 f86d 	bl	8014828 <USBH_Get_USB_Status>
 801474e:	4603      	mov	r3, r0
 8014750:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014752:	7bbb      	ldrb	r3, [r7, #14]
}
 8014754:	4618      	mov	r0, r3
 8014756:	3714      	adds	r7, #20
 8014758:	46bd      	mov	sp, r7
 801475a:	bd90      	pop	{r4, r7, pc}

0801475c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801475c:	b580      	push	{r7, lr}
 801475e:	b082      	sub	sp, #8
 8014760:	af00      	add	r7, sp, #0
 8014762:	6078      	str	r0, [r7, #4]
 8014764:	460b      	mov	r3, r1
 8014766:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801476e:	78fa      	ldrb	r2, [r7, #3]
 8014770:	4611      	mov	r1, r2
 8014772:	4618      	mov	r0, r3
 8014774:	f7f0 fbb7 	bl	8004ee6 <HAL_HCD_HC_GetURBState>
 8014778:	4603      	mov	r3, r0
}
 801477a:	4618      	mov	r0, r3
 801477c:	3708      	adds	r7, #8
 801477e:	46bd      	mov	sp, r7
 8014780:	bd80      	pop	{r7, pc}

08014782 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8014782:	b580      	push	{r7, lr}
 8014784:	b082      	sub	sp, #8
 8014786:	af00      	add	r7, sp, #0
 8014788:	6078      	str	r0, [r7, #4]
 801478a:	460b      	mov	r3, r1
 801478c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8014794:	2b01      	cmp	r3, #1
 8014796:	d103      	bne.n	80147a0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8014798:	78fb      	ldrb	r3, [r7, #3]
 801479a:	4618      	mov	r0, r3
 801479c:	f000 f870 	bl	8014880 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80147a0:	20c8      	movs	r0, #200	; 0xc8
 80147a2:	f7ee fecd 	bl	8003540 <HAL_Delay>
  return USBH_OK;
 80147a6:	2300      	movs	r3, #0
}
 80147a8:	4618      	mov	r0, r3
 80147aa:	3708      	adds	r7, #8
 80147ac:	46bd      	mov	sp, r7
 80147ae:	bd80      	pop	{r7, pc}

080147b0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80147b0:	b480      	push	{r7}
 80147b2:	b085      	sub	sp, #20
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	6078      	str	r0, [r7, #4]
 80147b8:	460b      	mov	r3, r1
 80147ba:	70fb      	strb	r3, [r7, #3]
 80147bc:	4613      	mov	r3, r2
 80147be:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80147c6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80147c8:	78fb      	ldrb	r3, [r7, #3]
 80147ca:	68fa      	ldr	r2, [r7, #12]
 80147cc:	212c      	movs	r1, #44	; 0x2c
 80147ce:	fb01 f303 	mul.w	r3, r1, r3
 80147d2:	4413      	add	r3, r2
 80147d4:	333b      	adds	r3, #59	; 0x3b
 80147d6:	781b      	ldrb	r3, [r3, #0]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d009      	beq.n	80147f0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80147dc:	78fb      	ldrb	r3, [r7, #3]
 80147de:	68fa      	ldr	r2, [r7, #12]
 80147e0:	212c      	movs	r1, #44	; 0x2c
 80147e2:	fb01 f303 	mul.w	r3, r1, r3
 80147e6:	4413      	add	r3, r2
 80147e8:	3354      	adds	r3, #84	; 0x54
 80147ea:	78ba      	ldrb	r2, [r7, #2]
 80147ec:	701a      	strb	r2, [r3, #0]
 80147ee:	e008      	b.n	8014802 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80147f0:	78fb      	ldrb	r3, [r7, #3]
 80147f2:	68fa      	ldr	r2, [r7, #12]
 80147f4:	212c      	movs	r1, #44	; 0x2c
 80147f6:	fb01 f303 	mul.w	r3, r1, r3
 80147fa:	4413      	add	r3, r2
 80147fc:	3355      	adds	r3, #85	; 0x55
 80147fe:	78ba      	ldrb	r2, [r7, #2]
 8014800:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8014802:	2300      	movs	r3, #0
}
 8014804:	4618      	mov	r0, r3
 8014806:	3714      	adds	r7, #20
 8014808:	46bd      	mov	sp, r7
 801480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801480e:	4770      	bx	lr

08014810 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8014810:	b580      	push	{r7, lr}
 8014812:	b082      	sub	sp, #8
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8014818:	6878      	ldr	r0, [r7, #4]
 801481a:	f7ee fe91 	bl	8003540 <HAL_Delay>
}
 801481e:	bf00      	nop
 8014820:	3708      	adds	r7, #8
 8014822:	46bd      	mov	sp, r7
 8014824:	bd80      	pop	{r7, pc}
	...

08014828 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014828:	b480      	push	{r7}
 801482a:	b085      	sub	sp, #20
 801482c:	af00      	add	r7, sp, #0
 801482e:	4603      	mov	r3, r0
 8014830:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014832:	2300      	movs	r3, #0
 8014834:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014836:	79fb      	ldrb	r3, [r7, #7]
 8014838:	2b03      	cmp	r3, #3
 801483a:	d817      	bhi.n	801486c <USBH_Get_USB_Status+0x44>
 801483c:	a201      	add	r2, pc, #4	; (adr r2, 8014844 <USBH_Get_USB_Status+0x1c>)
 801483e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014842:	bf00      	nop
 8014844:	08014855 	.word	0x08014855
 8014848:	0801485b 	.word	0x0801485b
 801484c:	08014861 	.word	0x08014861
 8014850:	08014867 	.word	0x08014867
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8014854:	2300      	movs	r3, #0
 8014856:	73fb      	strb	r3, [r7, #15]
    break;
 8014858:	e00b      	b.n	8014872 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801485a:	2302      	movs	r3, #2
 801485c:	73fb      	strb	r3, [r7, #15]
    break;
 801485e:	e008      	b.n	8014872 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8014860:	2301      	movs	r3, #1
 8014862:	73fb      	strb	r3, [r7, #15]
    break;
 8014864:	e005      	b.n	8014872 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8014866:	2302      	movs	r3, #2
 8014868:	73fb      	strb	r3, [r7, #15]
    break;
 801486a:	e002      	b.n	8014872 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801486c:	2302      	movs	r3, #2
 801486e:	73fb      	strb	r3, [r7, #15]
    break;
 8014870:	bf00      	nop
  }
  return usb_status;
 8014872:	7bfb      	ldrb	r3, [r7, #15]
}
 8014874:	4618      	mov	r0, r3
 8014876:	3714      	adds	r7, #20
 8014878:	46bd      	mov	sp, r7
 801487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801487e:	4770      	bx	lr

08014880 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8014880:	b580      	push	{r7, lr}
 8014882:	b084      	sub	sp, #16
 8014884:	af00      	add	r7, sp, #0
 8014886:	4603      	mov	r3, r0
 8014888:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801488a:	79fb      	ldrb	r3, [r7, #7]
 801488c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801488e:	79fb      	ldrb	r3, [r7, #7]
 8014890:	2b00      	cmp	r3, #0
 8014892:	d102      	bne.n	801489a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8014894:	2301      	movs	r3, #1
 8014896:	73fb      	strb	r3, [r7, #15]
 8014898:	e001      	b.n	801489e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801489a:	2300      	movs	r3, #0
 801489c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,(GPIO_PinState)data);
 801489e:	7bfb      	ldrb	r3, [r7, #15]
 80148a0:	461a      	mov	r2, r3
 80148a2:	2101      	movs	r1, #1
 80148a4:	4803      	ldr	r0, [pc, #12]	; (80148b4 <MX_DriverVbusFS+0x34>)
 80148a6:	f7ef ff41 	bl	800472c <HAL_GPIO_WritePin>
}
 80148aa:	bf00      	nop
 80148ac:	3710      	adds	r7, #16
 80148ae:	46bd      	mov	sp, r7
 80148b0:	bd80      	pop	{r7, pc}
 80148b2:	bf00      	nop
 80148b4:	40020400 	.word	0x40020400

080148b8 <atol>:
 80148b8:	220a      	movs	r2, #10
 80148ba:	2100      	movs	r1, #0
 80148bc:	f000 be5e 	b.w	801557c <strtol>

080148c0 <__errno>:
 80148c0:	4b01      	ldr	r3, [pc, #4]	; (80148c8 <__errno+0x8>)
 80148c2:	6818      	ldr	r0, [r3, #0]
 80148c4:	4770      	bx	lr
 80148c6:	bf00      	nop
 80148c8:	200002b4 	.word	0x200002b4

080148cc <std>:
 80148cc:	2300      	movs	r3, #0
 80148ce:	b510      	push	{r4, lr}
 80148d0:	4604      	mov	r4, r0
 80148d2:	e9c0 3300 	strd	r3, r3, [r0]
 80148d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80148da:	6083      	str	r3, [r0, #8]
 80148dc:	8181      	strh	r1, [r0, #12]
 80148de:	6643      	str	r3, [r0, #100]	; 0x64
 80148e0:	81c2      	strh	r2, [r0, #14]
 80148e2:	6183      	str	r3, [r0, #24]
 80148e4:	4619      	mov	r1, r3
 80148e6:	2208      	movs	r2, #8
 80148e8:	305c      	adds	r0, #92	; 0x5c
 80148ea:	f000 f92d 	bl	8014b48 <memset>
 80148ee:	4b05      	ldr	r3, [pc, #20]	; (8014904 <std+0x38>)
 80148f0:	6263      	str	r3, [r4, #36]	; 0x24
 80148f2:	4b05      	ldr	r3, [pc, #20]	; (8014908 <std+0x3c>)
 80148f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80148f6:	4b05      	ldr	r3, [pc, #20]	; (801490c <std+0x40>)
 80148f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80148fa:	4b05      	ldr	r3, [pc, #20]	; (8014910 <std+0x44>)
 80148fc:	6224      	str	r4, [r4, #32]
 80148fe:	6323      	str	r3, [r4, #48]	; 0x30
 8014900:	bd10      	pop	{r4, pc}
 8014902:	bf00      	nop
 8014904:	08015331 	.word	0x08015331
 8014908:	08015357 	.word	0x08015357
 801490c:	0801538f 	.word	0x0801538f
 8014910:	080153b3 	.word	0x080153b3

08014914 <_cleanup_r>:
 8014914:	4901      	ldr	r1, [pc, #4]	; (801491c <_cleanup_r+0x8>)
 8014916:	f000 b8af 	b.w	8014a78 <_fwalk_reent>
 801491a:	bf00      	nop
 801491c:	08015bbd 	.word	0x08015bbd

08014920 <__sfmoreglue>:
 8014920:	b570      	push	{r4, r5, r6, lr}
 8014922:	2268      	movs	r2, #104	; 0x68
 8014924:	1e4d      	subs	r5, r1, #1
 8014926:	4355      	muls	r5, r2
 8014928:	460e      	mov	r6, r1
 801492a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801492e:	f000 fbf1 	bl	8015114 <_malloc_r>
 8014932:	4604      	mov	r4, r0
 8014934:	b140      	cbz	r0, 8014948 <__sfmoreglue+0x28>
 8014936:	2100      	movs	r1, #0
 8014938:	e9c0 1600 	strd	r1, r6, [r0]
 801493c:	300c      	adds	r0, #12
 801493e:	60a0      	str	r0, [r4, #8]
 8014940:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014944:	f000 f900 	bl	8014b48 <memset>
 8014948:	4620      	mov	r0, r4
 801494a:	bd70      	pop	{r4, r5, r6, pc}

0801494c <__sfp_lock_acquire>:
 801494c:	4801      	ldr	r0, [pc, #4]	; (8014954 <__sfp_lock_acquire+0x8>)
 801494e:	f000 b8d9 	b.w	8014b04 <__retarget_lock_acquire_recursive>
 8014952:	bf00      	nop
 8014954:	2000e8ca 	.word	0x2000e8ca

08014958 <__sfp_lock_release>:
 8014958:	4801      	ldr	r0, [pc, #4]	; (8014960 <__sfp_lock_release+0x8>)
 801495a:	f000 b8d5 	b.w	8014b08 <__retarget_lock_release_recursive>
 801495e:	bf00      	nop
 8014960:	2000e8ca 	.word	0x2000e8ca

08014964 <__sinit_lock_acquire>:
 8014964:	4801      	ldr	r0, [pc, #4]	; (801496c <__sinit_lock_acquire+0x8>)
 8014966:	f000 b8cd 	b.w	8014b04 <__retarget_lock_acquire_recursive>
 801496a:	bf00      	nop
 801496c:	2000e8cb 	.word	0x2000e8cb

08014970 <__sinit_lock_release>:
 8014970:	4801      	ldr	r0, [pc, #4]	; (8014978 <__sinit_lock_release+0x8>)
 8014972:	f000 b8c9 	b.w	8014b08 <__retarget_lock_release_recursive>
 8014976:	bf00      	nop
 8014978:	2000e8cb 	.word	0x2000e8cb

0801497c <__sinit>:
 801497c:	b510      	push	{r4, lr}
 801497e:	4604      	mov	r4, r0
 8014980:	f7ff fff0 	bl	8014964 <__sinit_lock_acquire>
 8014984:	69a3      	ldr	r3, [r4, #24]
 8014986:	b11b      	cbz	r3, 8014990 <__sinit+0x14>
 8014988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801498c:	f7ff bff0 	b.w	8014970 <__sinit_lock_release>
 8014990:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014994:	6523      	str	r3, [r4, #80]	; 0x50
 8014996:	4b13      	ldr	r3, [pc, #76]	; (80149e4 <__sinit+0x68>)
 8014998:	4a13      	ldr	r2, [pc, #76]	; (80149e8 <__sinit+0x6c>)
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	62a2      	str	r2, [r4, #40]	; 0x28
 801499e:	42a3      	cmp	r3, r4
 80149a0:	bf04      	itt	eq
 80149a2:	2301      	moveq	r3, #1
 80149a4:	61a3      	streq	r3, [r4, #24]
 80149a6:	4620      	mov	r0, r4
 80149a8:	f000 f820 	bl	80149ec <__sfp>
 80149ac:	6060      	str	r0, [r4, #4]
 80149ae:	4620      	mov	r0, r4
 80149b0:	f000 f81c 	bl	80149ec <__sfp>
 80149b4:	60a0      	str	r0, [r4, #8]
 80149b6:	4620      	mov	r0, r4
 80149b8:	f000 f818 	bl	80149ec <__sfp>
 80149bc:	2200      	movs	r2, #0
 80149be:	60e0      	str	r0, [r4, #12]
 80149c0:	2104      	movs	r1, #4
 80149c2:	6860      	ldr	r0, [r4, #4]
 80149c4:	f7ff ff82 	bl	80148cc <std>
 80149c8:	68a0      	ldr	r0, [r4, #8]
 80149ca:	2201      	movs	r2, #1
 80149cc:	2109      	movs	r1, #9
 80149ce:	f7ff ff7d 	bl	80148cc <std>
 80149d2:	68e0      	ldr	r0, [r4, #12]
 80149d4:	2202      	movs	r2, #2
 80149d6:	2112      	movs	r1, #18
 80149d8:	f7ff ff78 	bl	80148cc <std>
 80149dc:	2301      	movs	r3, #1
 80149de:	61a3      	str	r3, [r4, #24]
 80149e0:	e7d2      	b.n	8014988 <__sinit+0xc>
 80149e2:	bf00      	nop
 80149e4:	08017bb4 	.word	0x08017bb4
 80149e8:	08014915 	.word	0x08014915

080149ec <__sfp>:
 80149ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149ee:	4607      	mov	r7, r0
 80149f0:	f7ff ffac 	bl	801494c <__sfp_lock_acquire>
 80149f4:	4b1e      	ldr	r3, [pc, #120]	; (8014a70 <__sfp+0x84>)
 80149f6:	681e      	ldr	r6, [r3, #0]
 80149f8:	69b3      	ldr	r3, [r6, #24]
 80149fa:	b913      	cbnz	r3, 8014a02 <__sfp+0x16>
 80149fc:	4630      	mov	r0, r6
 80149fe:	f7ff ffbd 	bl	801497c <__sinit>
 8014a02:	3648      	adds	r6, #72	; 0x48
 8014a04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014a08:	3b01      	subs	r3, #1
 8014a0a:	d503      	bpl.n	8014a14 <__sfp+0x28>
 8014a0c:	6833      	ldr	r3, [r6, #0]
 8014a0e:	b30b      	cbz	r3, 8014a54 <__sfp+0x68>
 8014a10:	6836      	ldr	r6, [r6, #0]
 8014a12:	e7f7      	b.n	8014a04 <__sfp+0x18>
 8014a14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014a18:	b9d5      	cbnz	r5, 8014a50 <__sfp+0x64>
 8014a1a:	4b16      	ldr	r3, [pc, #88]	; (8014a74 <__sfp+0x88>)
 8014a1c:	60e3      	str	r3, [r4, #12]
 8014a1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014a22:	6665      	str	r5, [r4, #100]	; 0x64
 8014a24:	f000 f86c 	bl	8014b00 <__retarget_lock_init_recursive>
 8014a28:	f7ff ff96 	bl	8014958 <__sfp_lock_release>
 8014a2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014a30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014a34:	6025      	str	r5, [r4, #0]
 8014a36:	61a5      	str	r5, [r4, #24]
 8014a38:	2208      	movs	r2, #8
 8014a3a:	4629      	mov	r1, r5
 8014a3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014a40:	f000 f882 	bl	8014b48 <memset>
 8014a44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014a48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014a4c:	4620      	mov	r0, r4
 8014a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a50:	3468      	adds	r4, #104	; 0x68
 8014a52:	e7d9      	b.n	8014a08 <__sfp+0x1c>
 8014a54:	2104      	movs	r1, #4
 8014a56:	4638      	mov	r0, r7
 8014a58:	f7ff ff62 	bl	8014920 <__sfmoreglue>
 8014a5c:	4604      	mov	r4, r0
 8014a5e:	6030      	str	r0, [r6, #0]
 8014a60:	2800      	cmp	r0, #0
 8014a62:	d1d5      	bne.n	8014a10 <__sfp+0x24>
 8014a64:	f7ff ff78 	bl	8014958 <__sfp_lock_release>
 8014a68:	230c      	movs	r3, #12
 8014a6a:	603b      	str	r3, [r7, #0]
 8014a6c:	e7ee      	b.n	8014a4c <__sfp+0x60>
 8014a6e:	bf00      	nop
 8014a70:	08017bb4 	.word	0x08017bb4
 8014a74:	ffff0001 	.word	0xffff0001

08014a78 <_fwalk_reent>:
 8014a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a7c:	4606      	mov	r6, r0
 8014a7e:	4688      	mov	r8, r1
 8014a80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014a84:	2700      	movs	r7, #0
 8014a86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014a8a:	f1b9 0901 	subs.w	r9, r9, #1
 8014a8e:	d505      	bpl.n	8014a9c <_fwalk_reent+0x24>
 8014a90:	6824      	ldr	r4, [r4, #0]
 8014a92:	2c00      	cmp	r4, #0
 8014a94:	d1f7      	bne.n	8014a86 <_fwalk_reent+0xe>
 8014a96:	4638      	mov	r0, r7
 8014a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a9c:	89ab      	ldrh	r3, [r5, #12]
 8014a9e:	2b01      	cmp	r3, #1
 8014aa0:	d907      	bls.n	8014ab2 <_fwalk_reent+0x3a>
 8014aa2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014aa6:	3301      	adds	r3, #1
 8014aa8:	d003      	beq.n	8014ab2 <_fwalk_reent+0x3a>
 8014aaa:	4629      	mov	r1, r5
 8014aac:	4630      	mov	r0, r6
 8014aae:	47c0      	blx	r8
 8014ab0:	4307      	orrs	r7, r0
 8014ab2:	3568      	adds	r5, #104	; 0x68
 8014ab4:	e7e9      	b.n	8014a8a <_fwalk_reent+0x12>
	...

08014ab8 <__libc_init_array>:
 8014ab8:	b570      	push	{r4, r5, r6, lr}
 8014aba:	4d0d      	ldr	r5, [pc, #52]	; (8014af0 <__libc_init_array+0x38>)
 8014abc:	4c0d      	ldr	r4, [pc, #52]	; (8014af4 <__libc_init_array+0x3c>)
 8014abe:	1b64      	subs	r4, r4, r5
 8014ac0:	10a4      	asrs	r4, r4, #2
 8014ac2:	2600      	movs	r6, #0
 8014ac4:	42a6      	cmp	r6, r4
 8014ac6:	d109      	bne.n	8014adc <__libc_init_array+0x24>
 8014ac8:	4d0b      	ldr	r5, [pc, #44]	; (8014af8 <__libc_init_array+0x40>)
 8014aca:	4c0c      	ldr	r4, [pc, #48]	; (8014afc <__libc_init_array+0x44>)
 8014acc:	f002 fbd4 	bl	8017278 <_init>
 8014ad0:	1b64      	subs	r4, r4, r5
 8014ad2:	10a4      	asrs	r4, r4, #2
 8014ad4:	2600      	movs	r6, #0
 8014ad6:	42a6      	cmp	r6, r4
 8014ad8:	d105      	bne.n	8014ae6 <__libc_init_array+0x2e>
 8014ada:	bd70      	pop	{r4, r5, r6, pc}
 8014adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8014ae0:	4798      	blx	r3
 8014ae2:	3601      	adds	r6, #1
 8014ae4:	e7ee      	b.n	8014ac4 <__libc_init_array+0xc>
 8014ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8014aea:	4798      	blx	r3
 8014aec:	3601      	adds	r6, #1
 8014aee:	e7f2      	b.n	8014ad6 <__libc_init_array+0x1e>
 8014af0:	08017ec0 	.word	0x08017ec0
 8014af4:	08017ec0 	.word	0x08017ec0
 8014af8:	08017ec0 	.word	0x08017ec0
 8014afc:	08017ec4 	.word	0x08017ec4

08014b00 <__retarget_lock_init_recursive>:
 8014b00:	4770      	bx	lr

08014b02 <__retarget_lock_acquire>:
 8014b02:	4770      	bx	lr

08014b04 <__retarget_lock_acquire_recursive>:
 8014b04:	4770      	bx	lr

08014b06 <__retarget_lock_release>:
 8014b06:	4770      	bx	lr

08014b08 <__retarget_lock_release_recursive>:
 8014b08:	4770      	bx	lr
	...

08014b0c <malloc>:
 8014b0c:	4b02      	ldr	r3, [pc, #8]	; (8014b18 <malloc+0xc>)
 8014b0e:	4601      	mov	r1, r0
 8014b10:	6818      	ldr	r0, [r3, #0]
 8014b12:	f000 baff 	b.w	8015114 <_malloc_r>
 8014b16:	bf00      	nop
 8014b18:	200002b4 	.word	0x200002b4

08014b1c <free>:
 8014b1c:	4b02      	ldr	r3, [pc, #8]	; (8014b28 <free+0xc>)
 8014b1e:	4601      	mov	r1, r0
 8014b20:	6818      	ldr	r0, [r3, #0]
 8014b22:	f000 ba8b 	b.w	801503c <_free_r>
 8014b26:	bf00      	nop
 8014b28:	200002b4 	.word	0x200002b4

08014b2c <memcpy>:
 8014b2c:	440a      	add	r2, r1
 8014b2e:	4291      	cmp	r1, r2
 8014b30:	f100 33ff 	add.w	r3, r0, #4294967295
 8014b34:	d100      	bne.n	8014b38 <memcpy+0xc>
 8014b36:	4770      	bx	lr
 8014b38:	b510      	push	{r4, lr}
 8014b3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014b3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014b42:	4291      	cmp	r1, r2
 8014b44:	d1f9      	bne.n	8014b3a <memcpy+0xe>
 8014b46:	bd10      	pop	{r4, pc}

08014b48 <memset>:
 8014b48:	4402      	add	r2, r0
 8014b4a:	4603      	mov	r3, r0
 8014b4c:	4293      	cmp	r3, r2
 8014b4e:	d100      	bne.n	8014b52 <memset+0xa>
 8014b50:	4770      	bx	lr
 8014b52:	f803 1b01 	strb.w	r1, [r3], #1
 8014b56:	e7f9      	b.n	8014b4c <memset+0x4>

08014b58 <validate_structure>:
 8014b58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014b5a:	6801      	ldr	r1, [r0, #0]
 8014b5c:	293b      	cmp	r1, #59	; 0x3b
 8014b5e:	4604      	mov	r4, r0
 8014b60:	d911      	bls.n	8014b86 <validate_structure+0x2e>
 8014b62:	223c      	movs	r2, #60	; 0x3c
 8014b64:	4668      	mov	r0, sp
 8014b66:	f000 ff8f 	bl	8015a88 <div>
 8014b6a:	9a01      	ldr	r2, [sp, #4]
 8014b6c:	6863      	ldr	r3, [r4, #4]
 8014b6e:	9900      	ldr	r1, [sp, #0]
 8014b70:	2a00      	cmp	r2, #0
 8014b72:	440b      	add	r3, r1
 8014b74:	6063      	str	r3, [r4, #4]
 8014b76:	bfbb      	ittet	lt
 8014b78:	323c      	addlt	r2, #60	; 0x3c
 8014b7a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8014b7e:	6022      	strge	r2, [r4, #0]
 8014b80:	6022      	strlt	r2, [r4, #0]
 8014b82:	bfb8      	it	lt
 8014b84:	6063      	strlt	r3, [r4, #4]
 8014b86:	6861      	ldr	r1, [r4, #4]
 8014b88:	293b      	cmp	r1, #59	; 0x3b
 8014b8a:	d911      	bls.n	8014bb0 <validate_structure+0x58>
 8014b8c:	223c      	movs	r2, #60	; 0x3c
 8014b8e:	4668      	mov	r0, sp
 8014b90:	f000 ff7a 	bl	8015a88 <div>
 8014b94:	9a01      	ldr	r2, [sp, #4]
 8014b96:	68a3      	ldr	r3, [r4, #8]
 8014b98:	9900      	ldr	r1, [sp, #0]
 8014b9a:	2a00      	cmp	r2, #0
 8014b9c:	440b      	add	r3, r1
 8014b9e:	60a3      	str	r3, [r4, #8]
 8014ba0:	bfbb      	ittet	lt
 8014ba2:	323c      	addlt	r2, #60	; 0x3c
 8014ba4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8014ba8:	6062      	strge	r2, [r4, #4]
 8014baa:	6062      	strlt	r2, [r4, #4]
 8014bac:	bfb8      	it	lt
 8014bae:	60a3      	strlt	r3, [r4, #8]
 8014bb0:	68a1      	ldr	r1, [r4, #8]
 8014bb2:	2917      	cmp	r1, #23
 8014bb4:	d911      	bls.n	8014bda <validate_structure+0x82>
 8014bb6:	2218      	movs	r2, #24
 8014bb8:	4668      	mov	r0, sp
 8014bba:	f000 ff65 	bl	8015a88 <div>
 8014bbe:	9a01      	ldr	r2, [sp, #4]
 8014bc0:	68e3      	ldr	r3, [r4, #12]
 8014bc2:	9900      	ldr	r1, [sp, #0]
 8014bc4:	2a00      	cmp	r2, #0
 8014bc6:	440b      	add	r3, r1
 8014bc8:	60e3      	str	r3, [r4, #12]
 8014bca:	bfbb      	ittet	lt
 8014bcc:	3218      	addlt	r2, #24
 8014bce:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8014bd2:	60a2      	strge	r2, [r4, #8]
 8014bd4:	60a2      	strlt	r2, [r4, #8]
 8014bd6:	bfb8      	it	lt
 8014bd8:	60e3      	strlt	r3, [r4, #12]
 8014bda:	6921      	ldr	r1, [r4, #16]
 8014bdc:	290b      	cmp	r1, #11
 8014bde:	d911      	bls.n	8014c04 <validate_structure+0xac>
 8014be0:	220c      	movs	r2, #12
 8014be2:	4668      	mov	r0, sp
 8014be4:	f000 ff50 	bl	8015a88 <div>
 8014be8:	9a01      	ldr	r2, [sp, #4]
 8014bea:	6963      	ldr	r3, [r4, #20]
 8014bec:	9900      	ldr	r1, [sp, #0]
 8014bee:	2a00      	cmp	r2, #0
 8014bf0:	440b      	add	r3, r1
 8014bf2:	6163      	str	r3, [r4, #20]
 8014bf4:	bfbb      	ittet	lt
 8014bf6:	320c      	addlt	r2, #12
 8014bf8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8014bfc:	6122      	strge	r2, [r4, #16]
 8014bfe:	6122      	strlt	r2, [r4, #16]
 8014c00:	bfb8      	it	lt
 8014c02:	6163      	strlt	r3, [r4, #20]
 8014c04:	6963      	ldr	r3, [r4, #20]
 8014c06:	0798      	lsls	r0, r3, #30
 8014c08:	d120      	bne.n	8014c4c <validate_structure+0xf4>
 8014c0a:	2164      	movs	r1, #100	; 0x64
 8014c0c:	fb93 f2f1 	sdiv	r2, r3, r1
 8014c10:	fb01 3212 	mls	r2, r1, r2, r3
 8014c14:	b9e2      	cbnz	r2, 8014c50 <validate_structure+0xf8>
 8014c16:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8014c1a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8014c1e:	fb93 f1f2 	sdiv	r1, r3, r2
 8014c22:	fb02 3311 	mls	r3, r2, r1, r3
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	bf14      	ite	ne
 8014c2a:	231c      	movne	r3, #28
 8014c2c:	231d      	moveq	r3, #29
 8014c2e:	68e2      	ldr	r2, [r4, #12]
 8014c30:	2a00      	cmp	r2, #0
 8014c32:	dc0f      	bgt.n	8014c54 <validate_structure+0xfc>
 8014c34:	4f33      	ldr	r7, [pc, #204]	; (8014d04 <validate_structure+0x1ac>)
 8014c36:	260b      	movs	r6, #11
 8014c38:	2064      	movs	r0, #100	; 0x64
 8014c3a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8014c3e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8014c42:	f1bc 0f00 	cmp.w	ip, #0
 8014c46:	dd31      	ble.n	8014cac <validate_structure+0x154>
 8014c48:	b003      	add	sp, #12
 8014c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c4c:	231c      	movs	r3, #28
 8014c4e:	e7ee      	b.n	8014c2e <validate_structure+0xd6>
 8014c50:	231d      	movs	r3, #29
 8014c52:	e7ec      	b.n	8014c2e <validate_structure+0xd6>
 8014c54:	4e2b      	ldr	r6, [pc, #172]	; (8014d04 <validate_structure+0x1ac>)
 8014c56:	2700      	movs	r7, #0
 8014c58:	2064      	movs	r0, #100	; 0x64
 8014c5a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8014c5e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8014c62:	2a01      	cmp	r2, #1
 8014c64:	bf14      	ite	ne
 8014c66:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 8014c6a:	469c      	moveq	ip, r3
 8014c6c:	4561      	cmp	r1, ip
 8014c6e:	ddeb      	ble.n	8014c48 <validate_structure+0xf0>
 8014c70:	3201      	adds	r2, #1
 8014c72:	eba1 010c 	sub.w	r1, r1, ip
 8014c76:	2a0c      	cmp	r2, #12
 8014c78:	60e1      	str	r1, [r4, #12]
 8014c7a:	6122      	str	r2, [r4, #16]
 8014c7c:	d1ef      	bne.n	8014c5e <validate_structure+0x106>
 8014c7e:	6963      	ldr	r3, [r4, #20]
 8014c80:	1c5a      	adds	r2, r3, #1
 8014c82:	0791      	lsls	r1, r2, #30
 8014c84:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8014c88:	d137      	bne.n	8014cfa <validate_structure+0x1a2>
 8014c8a:	fb92 f1f0 	sdiv	r1, r2, r0
 8014c8e:	fb00 2211 	mls	r2, r0, r1, r2
 8014c92:	2a00      	cmp	r2, #0
 8014c94:	d133      	bne.n	8014cfe <validate_structure+0x1a6>
 8014c96:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8014c9a:	fb93 f2f5 	sdiv	r2, r3, r5
 8014c9e:	fb05 3312 	mls	r3, r5, r2, r3
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	bf14      	ite	ne
 8014ca6:	231c      	movne	r3, #28
 8014ca8:	231d      	moveq	r3, #29
 8014caa:	e7d8      	b.n	8014c5e <validate_structure+0x106>
 8014cac:	6921      	ldr	r1, [r4, #16]
 8014cae:	3901      	subs	r1, #1
 8014cb0:	6121      	str	r1, [r4, #16]
 8014cb2:	3101      	adds	r1, #1
 8014cb4:	d114      	bne.n	8014ce0 <validate_structure+0x188>
 8014cb6:	6963      	ldr	r3, [r4, #20]
 8014cb8:	1e5a      	subs	r2, r3, #1
 8014cba:	0791      	lsls	r1, r2, #30
 8014cbc:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8014cc0:	d117      	bne.n	8014cf2 <validate_structure+0x19a>
 8014cc2:	fb92 f1f0 	sdiv	r1, r2, r0
 8014cc6:	fb00 2211 	mls	r2, r0, r1, r2
 8014cca:	b9a2      	cbnz	r2, 8014cf6 <validate_structure+0x19e>
 8014ccc:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8014cd0:	fb93 f2f5 	sdiv	r2, r3, r5
 8014cd4:	fb05 3312 	mls	r3, r5, r2, r3
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	bf14      	ite	ne
 8014cdc:	231c      	movne	r3, #28
 8014cde:	231d      	moveq	r3, #29
 8014ce0:	6922      	ldr	r2, [r4, #16]
 8014ce2:	2a01      	cmp	r2, #1
 8014ce4:	bf14      	ite	ne
 8014ce6:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8014cea:	461a      	moveq	r2, r3
 8014cec:	4462      	add	r2, ip
 8014cee:	60e2      	str	r2, [r4, #12]
 8014cf0:	e7a5      	b.n	8014c3e <validate_structure+0xe6>
 8014cf2:	231c      	movs	r3, #28
 8014cf4:	e7f4      	b.n	8014ce0 <validate_structure+0x188>
 8014cf6:	231d      	movs	r3, #29
 8014cf8:	e7f2      	b.n	8014ce0 <validate_structure+0x188>
 8014cfa:	231c      	movs	r3, #28
 8014cfc:	e7af      	b.n	8014c5e <validate_structure+0x106>
 8014cfe:	231d      	movs	r3, #29
 8014d00:	e7ad      	b.n	8014c5e <validate_structure+0x106>
 8014d02:	bf00      	nop
 8014d04:	08017bb8 	.word	0x08017bb8

08014d08 <mktime>:
 8014d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d0c:	b085      	sub	sp, #20
 8014d0e:	4607      	mov	r7, r0
 8014d10:	f000 ffe6 	bl	8015ce0 <__gettzinfo>
 8014d14:	4681      	mov	r9, r0
 8014d16:	4638      	mov	r0, r7
 8014d18:	f7ff ff1e 	bl	8014b58 <validate_structure>
 8014d1c:	e9d7 4000 	ldrd	r4, r0, [r7]
 8014d20:	233c      	movs	r3, #60	; 0x3c
 8014d22:	fb03 4400 	mla	r4, r3, r0, r4
 8014d26:	68b8      	ldr	r0, [r7, #8]
 8014d28:	4abc      	ldr	r2, [pc, #752]	; (801501c <mktime+0x314>)
 8014d2a:	697e      	ldr	r6, [r7, #20]
 8014d2c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8014d30:	fb03 4400 	mla	r4, r3, r0, r4
 8014d34:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8014d38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8014d3c:	3d01      	subs	r5, #1
 8014d3e:	2b01      	cmp	r3, #1
 8014d40:	4415      	add	r5, r2
 8014d42:	dd11      	ble.n	8014d68 <mktime+0x60>
 8014d44:	07b1      	lsls	r1, r6, #30
 8014d46:	d10f      	bne.n	8014d68 <mktime+0x60>
 8014d48:	2264      	movs	r2, #100	; 0x64
 8014d4a:	fb96 f3f2 	sdiv	r3, r6, r2
 8014d4e:	fb02 6313 	mls	r3, r2, r3, r6
 8014d52:	b943      	cbnz	r3, 8014d66 <mktime+0x5e>
 8014d54:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8014d58:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8014d5c:	fb93 f1f2 	sdiv	r1, r3, r2
 8014d60:	fb02 3311 	mls	r3, r2, r1, r3
 8014d64:	b903      	cbnz	r3, 8014d68 <mktime+0x60>
 8014d66:	3501      	adds	r5, #1
 8014d68:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8014d6c:	3310      	adds	r3, #16
 8014d6e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8014d72:	4293      	cmp	r3, r2
 8014d74:	61fd      	str	r5, [r7, #28]
 8014d76:	f200 815d 	bhi.w	8015034 <mktime+0x32c>
 8014d7a:	2e46      	cmp	r6, #70	; 0x46
 8014d7c:	dd71      	ble.n	8014e62 <mktime+0x15a>
 8014d7e:	2346      	movs	r3, #70	; 0x46
 8014d80:	f240 1c6d 	movw	ip, #365	; 0x16d
 8014d84:	2164      	movs	r1, #100	; 0x64
 8014d86:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8014d8a:	079a      	lsls	r2, r3, #30
 8014d8c:	d163      	bne.n	8014e56 <mktime+0x14e>
 8014d8e:	fb93 f2f1 	sdiv	r2, r3, r1
 8014d92:	fb01 3212 	mls	r2, r1, r2, r3
 8014d96:	2a00      	cmp	r2, #0
 8014d98:	d160      	bne.n	8014e5c <mktime+0x154>
 8014d9a:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8014d9e:	fb92 fef0 	sdiv	lr, r2, r0
 8014da2:	fb00 221e 	mls	r2, r0, lr, r2
 8014da6:	2a00      	cmp	r2, #0
 8014da8:	bf14      	ite	ne
 8014daa:	4662      	movne	r2, ip
 8014dac:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8014db0:	3301      	adds	r3, #1
 8014db2:	429e      	cmp	r6, r3
 8014db4:	4415      	add	r5, r2
 8014db6:	d1e8      	bne.n	8014d8a <mktime+0x82>
 8014db8:	4b99      	ldr	r3, [pc, #612]	; (8015020 <mktime+0x318>)
 8014dba:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8014dbe:	fbc5 4803 	smlal	r4, r8, r5, r3
 8014dc2:	f000 fc8f 	bl	80156e4 <__tz_lock>
 8014dc6:	f000 fc99 	bl	80156fc <_tzset_unlocked>
 8014dca:	4b96      	ldr	r3, [pc, #600]	; (8015024 <mktime+0x31c>)
 8014dcc:	f8d3 b000 	ldr.w	fp, [r3]
 8014dd0:	f1bb 0f00 	cmp.w	fp, #0
 8014dd4:	d039      	beq.n	8014e4a <mktime+0x142>
 8014dd6:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8014dda:	6978      	ldr	r0, [r7, #20]
 8014ddc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014de0:	f1bb 0f01 	cmp.w	fp, #1
 8014de4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8014de8:	46da      	mov	sl, fp
 8014dea:	bfa8      	it	ge
 8014dec:	f04f 0a01 	movge.w	sl, #1
 8014df0:	4283      	cmp	r3, r0
 8014df2:	d178      	bne.n	8014ee6 <mktime+0x1de>
 8014df4:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8014df8:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8014dfc:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8014e00:	1a5b      	subs	r3, r3, r1
 8014e02:	9302      	str	r3, [sp, #8]
 8014e04:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8014e08:	9303      	str	r3, [sp, #12]
 8014e0a:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8014e0e:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8014e12:	9301      	str	r3, [sp, #4]
 8014e14:	ebb3 0c02 	subs.w	ip, r3, r2
 8014e18:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 8014e1c:	4564      	cmp	r4, ip
 8014e1e:	eb78 0300 	sbcs.w	r3, r8, r0
 8014e22:	da66      	bge.n	8014ef2 <mktime+0x1ea>
 8014e24:	f8d9 3000 	ldr.w	r3, [r9]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d06f      	beq.n	8014f0c <mktime+0x204>
 8014e2c:	9b02      	ldr	r3, [sp, #8]
 8014e2e:	429c      	cmp	r4, r3
 8014e30:	9b03      	ldr	r3, [sp, #12]
 8014e32:	eb78 0303 	sbcs.w	r3, r8, r3
 8014e36:	db03      	blt.n	8014e40 <mktime+0x138>
 8014e38:	4564      	cmp	r4, ip
 8014e3a:	eb78 0300 	sbcs.w	r3, r8, r0
 8014e3e:	db6b      	blt.n	8014f18 <mktime+0x210>
 8014e40:	f1bb 0f00 	cmp.w	fp, #0
 8014e44:	f04f 0b00 	mov.w	fp, #0
 8014e48:	da6b      	bge.n	8014f22 <mktime+0x21a>
 8014e4a:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8014e4e:	190c      	adds	r4, r1, r4
 8014e50:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8014e54:	e0a9      	b.n	8014faa <mktime+0x2a2>
 8014e56:	f240 126d 	movw	r2, #365	; 0x16d
 8014e5a:	e7a9      	b.n	8014db0 <mktime+0xa8>
 8014e5c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8014e60:	e7a6      	b.n	8014db0 <mktime+0xa8>
 8014e62:	d0a9      	beq.n	8014db8 <mktime+0xb0>
 8014e64:	2345      	movs	r3, #69	; 0x45
 8014e66:	f240 1c6d 	movw	ip, #365	; 0x16d
 8014e6a:	2164      	movs	r1, #100	; 0x64
 8014e6c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8014e70:	e012      	b.n	8014e98 <mktime+0x190>
 8014e72:	bb62      	cbnz	r2, 8014ece <mktime+0x1c6>
 8014e74:	fb93 f2f1 	sdiv	r2, r3, r1
 8014e78:	fb01 3212 	mls	r2, r1, r2, r3
 8014e7c:	bb52      	cbnz	r2, 8014ed4 <mktime+0x1cc>
 8014e7e:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8014e82:	fb92 fef0 	sdiv	lr, r2, r0
 8014e86:	fb00 221e 	mls	r2, r0, lr, r2
 8014e8a:	2a00      	cmp	r2, #0
 8014e8c:	bf14      	ite	ne
 8014e8e:	4662      	movne	r2, ip
 8014e90:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8014e94:	1aad      	subs	r5, r5, r2
 8014e96:	3b01      	subs	r3, #1
 8014e98:	429e      	cmp	r6, r3
 8014e9a:	f003 0203 	and.w	r2, r3, #3
 8014e9e:	dbe8      	blt.n	8014e72 <mktime+0x16a>
 8014ea0:	b9da      	cbnz	r2, 8014eda <mktime+0x1d2>
 8014ea2:	2264      	movs	r2, #100	; 0x64
 8014ea4:	fb96 f3f2 	sdiv	r3, r6, r2
 8014ea8:	fb02 6313 	mls	r3, r2, r3, r6
 8014eac:	b9c3      	cbnz	r3, 8014ee0 <mktime+0x1d8>
 8014eae:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8014eb2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8014eb6:	fb93 f1f2 	sdiv	r1, r3, r2
 8014eba:	fb02 3311 	mls	r3, r2, r1, r3
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	f240 136d 	movw	r3, #365	; 0x16d
 8014ec4:	bf08      	it	eq
 8014ec6:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8014eca:	1aed      	subs	r5, r5, r3
 8014ecc:	e774      	b.n	8014db8 <mktime+0xb0>
 8014ece:	f240 126d 	movw	r2, #365	; 0x16d
 8014ed2:	e7df      	b.n	8014e94 <mktime+0x18c>
 8014ed4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8014ed8:	e7dc      	b.n	8014e94 <mktime+0x18c>
 8014eda:	f240 136d 	movw	r3, #365	; 0x16d
 8014ede:	e7f4      	b.n	8014eca <mktime+0x1c2>
 8014ee0:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8014ee4:	e7f1      	b.n	8014eca <mktime+0x1c2>
 8014ee6:	f000 fb53 	bl	8015590 <__tzcalc_limits>
 8014eea:	2800      	cmp	r0, #0
 8014eec:	d182      	bne.n	8014df4 <mktime+0xec>
 8014eee:	46d3      	mov	fp, sl
 8014ef0:	e050      	b.n	8014f94 <mktime+0x28c>
 8014ef2:	9b01      	ldr	r3, [sp, #4]
 8014ef4:	1a5b      	subs	r3, r3, r1
 8014ef6:	9301      	str	r3, [sp, #4]
 8014ef8:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8014efc:	eb6e 0e03 	sbc.w	lr, lr, r3
 8014f00:	9b01      	ldr	r3, [sp, #4]
 8014f02:	429c      	cmp	r4, r3
 8014f04:	eb78 030e 	sbcs.w	r3, r8, lr
 8014f08:	dbf1      	blt.n	8014eee <mktime+0x1e6>
 8014f0a:	e78b      	b.n	8014e24 <mktime+0x11c>
 8014f0c:	9b02      	ldr	r3, [sp, #8]
 8014f0e:	429c      	cmp	r4, r3
 8014f10:	9b03      	ldr	r3, [sp, #12]
 8014f12:	eb78 0303 	sbcs.w	r3, r8, r3
 8014f16:	db8f      	blt.n	8014e38 <mktime+0x130>
 8014f18:	f1bb 0f00 	cmp.w	fp, #0
 8014f1c:	db3e      	blt.n	8014f9c <mktime+0x294>
 8014f1e:	f04f 0b01 	mov.w	fp, #1
 8014f22:	ea8a 0a0b 	eor.w	sl, sl, fp
 8014f26:	f1ba 0f01 	cmp.w	sl, #1
 8014f2a:	d133      	bne.n	8014f94 <mktime+0x28c>
 8014f2c:	f1bb 0f00 	cmp.w	fp, #0
 8014f30:	d04e      	beq.n	8014fd0 <mktime+0x2c8>
 8014f32:	1a52      	subs	r2, r2, r1
 8014f34:	683b      	ldr	r3, [r7, #0]
 8014f36:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8014f3a:	4413      	add	r3, r2
 8014f3c:	1914      	adds	r4, r2, r4
 8014f3e:	603b      	str	r3, [r7, #0]
 8014f40:	4638      	mov	r0, r7
 8014f42:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8014f46:	f7ff fe07 	bl	8014b58 <validate_structure>
 8014f4a:	68fa      	ldr	r2, [r7, #12]
 8014f4c:	ebb2 020a 	subs.w	r2, r2, sl
 8014f50:	d020      	beq.n	8014f94 <mktime+0x28c>
 8014f52:	2a01      	cmp	r2, #1
 8014f54:	dc3e      	bgt.n	8014fd4 <mktime+0x2cc>
 8014f56:	1c90      	adds	r0, r2, #2
 8014f58:	bfd8      	it	le
 8014f5a:	2201      	movle	r2, #1
 8014f5c:	69fb      	ldr	r3, [r7, #28]
 8014f5e:	18d3      	adds	r3, r2, r3
 8014f60:	4415      	add	r5, r2
 8014f62:	d540      	bpl.n	8014fe6 <mktime+0x2de>
 8014f64:	1e73      	subs	r3, r6, #1
 8014f66:	0799      	lsls	r1, r3, #30
 8014f68:	d137      	bne.n	8014fda <mktime+0x2d2>
 8014f6a:	2264      	movs	r2, #100	; 0x64
 8014f6c:	fb93 f1f2 	sdiv	r1, r3, r2
 8014f70:	fb02 3311 	mls	r3, r2, r1, r3
 8014f74:	bba3      	cbnz	r3, 8014fe0 <mktime+0x2d8>
 8014f76:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8014f7a:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8014f7e:	fb96 f2f3 	sdiv	r2, r6, r3
 8014f82:	fb03 6612 	mls	r6, r3, r2, r6
 8014f86:	2e00      	cmp	r6, #0
 8014f88:	f240 136d 	movw	r3, #365	; 0x16d
 8014f8c:	bf18      	it	ne
 8014f8e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8014f92:	61fb      	str	r3, [r7, #28]
 8014f94:	f1bb 0f01 	cmp.w	fp, #1
 8014f98:	f47f af57 	bne.w	8014e4a <mktime+0x142>
 8014f9c:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8014fa0:	190c      	adds	r4, r1, r4
 8014fa2:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8014fa6:	f04f 0b01 	mov.w	fp, #1
 8014faa:	f000 fba1 	bl	80156f0 <__tz_unlock>
 8014fae:	3504      	adds	r5, #4
 8014fb0:	2307      	movs	r3, #7
 8014fb2:	fb95 f3f3 	sdiv	r3, r5, r3
 8014fb6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8014fba:	1aed      	subs	r5, r5, r3
 8014fbc:	bf48      	it	mi
 8014fbe:	3507      	addmi	r5, #7
 8014fc0:	f8c7 b020 	str.w	fp, [r7, #32]
 8014fc4:	61bd      	str	r5, [r7, #24]
 8014fc6:	4620      	mov	r0, r4
 8014fc8:	4641      	mov	r1, r8
 8014fca:	b005      	add	sp, #20
 8014fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fd0:	1a8a      	subs	r2, r1, r2
 8014fd2:	e7af      	b.n	8014f34 <mktime+0x22c>
 8014fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8014fd8:	e7c0      	b.n	8014f5c <mktime+0x254>
 8014fda:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8014fde:	e7d8      	b.n	8014f92 <mktime+0x28a>
 8014fe0:	f240 136d 	movw	r3, #365	; 0x16d
 8014fe4:	e7d5      	b.n	8014f92 <mktime+0x28a>
 8014fe6:	07b2      	lsls	r2, r6, #30
 8014fe8:	d11e      	bne.n	8015028 <mktime+0x320>
 8014fea:	2164      	movs	r1, #100	; 0x64
 8014fec:	fb96 f2f1 	sdiv	r2, r6, r1
 8014ff0:	fb01 6212 	mls	r2, r1, r2, r6
 8014ff4:	b9da      	cbnz	r2, 801502e <mktime+0x326>
 8014ff6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8014ffa:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8014ffe:	fb96 f1f2 	sdiv	r1, r6, r2
 8015002:	fb02 6611 	mls	r6, r2, r1, r6
 8015006:	2e00      	cmp	r6, #0
 8015008:	f240 126d 	movw	r2, #365	; 0x16d
 801500c:	bf08      	it	eq
 801500e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8015012:	4293      	cmp	r3, r2
 8015014:	bfa8      	it	ge
 8015016:	1a9b      	subge	r3, r3, r2
 8015018:	e7bb      	b.n	8014f92 <mktime+0x28a>
 801501a:	bf00      	nop
 801501c:	08017be8 	.word	0x08017be8
 8015020:	00015180 	.word	0x00015180
 8015024:	2000e8f8 	.word	0x2000e8f8
 8015028:	f240 126d 	movw	r2, #365	; 0x16d
 801502c:	e7f1      	b.n	8015012 <mktime+0x30a>
 801502e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8015032:	e7ee      	b.n	8015012 <mktime+0x30a>
 8015034:	f04f 34ff 	mov.w	r4, #4294967295
 8015038:	46a0      	mov	r8, r4
 801503a:	e7c4      	b.n	8014fc6 <mktime+0x2be>

0801503c <_free_r>:
 801503c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801503e:	2900      	cmp	r1, #0
 8015040:	d044      	beq.n	80150cc <_free_r+0x90>
 8015042:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015046:	9001      	str	r0, [sp, #4]
 8015048:	2b00      	cmp	r3, #0
 801504a:	f1a1 0404 	sub.w	r4, r1, #4
 801504e:	bfb8      	it	lt
 8015050:	18e4      	addlt	r4, r4, r3
 8015052:	f000 fe5b 	bl	8015d0c <__malloc_lock>
 8015056:	4a1e      	ldr	r2, [pc, #120]	; (80150d0 <_free_r+0x94>)
 8015058:	9801      	ldr	r0, [sp, #4]
 801505a:	6813      	ldr	r3, [r2, #0]
 801505c:	b933      	cbnz	r3, 801506c <_free_r+0x30>
 801505e:	6063      	str	r3, [r4, #4]
 8015060:	6014      	str	r4, [r2, #0]
 8015062:	b003      	add	sp, #12
 8015064:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015068:	f000 be56 	b.w	8015d18 <__malloc_unlock>
 801506c:	42a3      	cmp	r3, r4
 801506e:	d908      	bls.n	8015082 <_free_r+0x46>
 8015070:	6825      	ldr	r5, [r4, #0]
 8015072:	1961      	adds	r1, r4, r5
 8015074:	428b      	cmp	r3, r1
 8015076:	bf01      	itttt	eq
 8015078:	6819      	ldreq	r1, [r3, #0]
 801507a:	685b      	ldreq	r3, [r3, #4]
 801507c:	1949      	addeq	r1, r1, r5
 801507e:	6021      	streq	r1, [r4, #0]
 8015080:	e7ed      	b.n	801505e <_free_r+0x22>
 8015082:	461a      	mov	r2, r3
 8015084:	685b      	ldr	r3, [r3, #4]
 8015086:	b10b      	cbz	r3, 801508c <_free_r+0x50>
 8015088:	42a3      	cmp	r3, r4
 801508a:	d9fa      	bls.n	8015082 <_free_r+0x46>
 801508c:	6811      	ldr	r1, [r2, #0]
 801508e:	1855      	adds	r5, r2, r1
 8015090:	42a5      	cmp	r5, r4
 8015092:	d10b      	bne.n	80150ac <_free_r+0x70>
 8015094:	6824      	ldr	r4, [r4, #0]
 8015096:	4421      	add	r1, r4
 8015098:	1854      	adds	r4, r2, r1
 801509a:	42a3      	cmp	r3, r4
 801509c:	6011      	str	r1, [r2, #0]
 801509e:	d1e0      	bne.n	8015062 <_free_r+0x26>
 80150a0:	681c      	ldr	r4, [r3, #0]
 80150a2:	685b      	ldr	r3, [r3, #4]
 80150a4:	6053      	str	r3, [r2, #4]
 80150a6:	4421      	add	r1, r4
 80150a8:	6011      	str	r1, [r2, #0]
 80150aa:	e7da      	b.n	8015062 <_free_r+0x26>
 80150ac:	d902      	bls.n	80150b4 <_free_r+0x78>
 80150ae:	230c      	movs	r3, #12
 80150b0:	6003      	str	r3, [r0, #0]
 80150b2:	e7d6      	b.n	8015062 <_free_r+0x26>
 80150b4:	6825      	ldr	r5, [r4, #0]
 80150b6:	1961      	adds	r1, r4, r5
 80150b8:	428b      	cmp	r3, r1
 80150ba:	bf04      	itt	eq
 80150bc:	6819      	ldreq	r1, [r3, #0]
 80150be:	685b      	ldreq	r3, [r3, #4]
 80150c0:	6063      	str	r3, [r4, #4]
 80150c2:	bf04      	itt	eq
 80150c4:	1949      	addeq	r1, r1, r5
 80150c6:	6021      	streq	r1, [r4, #0]
 80150c8:	6054      	str	r4, [r2, #4]
 80150ca:	e7ca      	b.n	8015062 <_free_r+0x26>
 80150cc:	b003      	add	sp, #12
 80150ce:	bd30      	pop	{r4, r5, pc}
 80150d0:	2000e8d0 	.word	0x2000e8d0

080150d4 <sbrk_aligned>:
 80150d4:	b570      	push	{r4, r5, r6, lr}
 80150d6:	4e0e      	ldr	r6, [pc, #56]	; (8015110 <sbrk_aligned+0x3c>)
 80150d8:	460c      	mov	r4, r1
 80150da:	6831      	ldr	r1, [r6, #0]
 80150dc:	4605      	mov	r5, r0
 80150de:	b911      	cbnz	r1, 80150e6 <sbrk_aligned+0x12>
 80150e0:	f000 f8f6 	bl	80152d0 <_sbrk_r>
 80150e4:	6030      	str	r0, [r6, #0]
 80150e6:	4621      	mov	r1, r4
 80150e8:	4628      	mov	r0, r5
 80150ea:	f000 f8f1 	bl	80152d0 <_sbrk_r>
 80150ee:	1c43      	adds	r3, r0, #1
 80150f0:	d00a      	beq.n	8015108 <sbrk_aligned+0x34>
 80150f2:	1cc4      	adds	r4, r0, #3
 80150f4:	f024 0403 	bic.w	r4, r4, #3
 80150f8:	42a0      	cmp	r0, r4
 80150fa:	d007      	beq.n	801510c <sbrk_aligned+0x38>
 80150fc:	1a21      	subs	r1, r4, r0
 80150fe:	4628      	mov	r0, r5
 8015100:	f000 f8e6 	bl	80152d0 <_sbrk_r>
 8015104:	3001      	adds	r0, #1
 8015106:	d101      	bne.n	801510c <sbrk_aligned+0x38>
 8015108:	f04f 34ff 	mov.w	r4, #4294967295
 801510c:	4620      	mov	r0, r4
 801510e:	bd70      	pop	{r4, r5, r6, pc}
 8015110:	2000e8d4 	.word	0x2000e8d4

08015114 <_malloc_r>:
 8015114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015118:	1ccd      	adds	r5, r1, #3
 801511a:	f025 0503 	bic.w	r5, r5, #3
 801511e:	3508      	adds	r5, #8
 8015120:	2d0c      	cmp	r5, #12
 8015122:	bf38      	it	cc
 8015124:	250c      	movcc	r5, #12
 8015126:	2d00      	cmp	r5, #0
 8015128:	4607      	mov	r7, r0
 801512a:	db01      	blt.n	8015130 <_malloc_r+0x1c>
 801512c:	42a9      	cmp	r1, r5
 801512e:	d905      	bls.n	801513c <_malloc_r+0x28>
 8015130:	230c      	movs	r3, #12
 8015132:	603b      	str	r3, [r7, #0]
 8015134:	2600      	movs	r6, #0
 8015136:	4630      	mov	r0, r6
 8015138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801513c:	4e2e      	ldr	r6, [pc, #184]	; (80151f8 <_malloc_r+0xe4>)
 801513e:	f000 fde5 	bl	8015d0c <__malloc_lock>
 8015142:	6833      	ldr	r3, [r6, #0]
 8015144:	461c      	mov	r4, r3
 8015146:	bb34      	cbnz	r4, 8015196 <_malloc_r+0x82>
 8015148:	4629      	mov	r1, r5
 801514a:	4638      	mov	r0, r7
 801514c:	f7ff ffc2 	bl	80150d4 <sbrk_aligned>
 8015150:	1c43      	adds	r3, r0, #1
 8015152:	4604      	mov	r4, r0
 8015154:	d14d      	bne.n	80151f2 <_malloc_r+0xde>
 8015156:	6834      	ldr	r4, [r6, #0]
 8015158:	4626      	mov	r6, r4
 801515a:	2e00      	cmp	r6, #0
 801515c:	d140      	bne.n	80151e0 <_malloc_r+0xcc>
 801515e:	6823      	ldr	r3, [r4, #0]
 8015160:	4631      	mov	r1, r6
 8015162:	4638      	mov	r0, r7
 8015164:	eb04 0803 	add.w	r8, r4, r3
 8015168:	f000 f8b2 	bl	80152d0 <_sbrk_r>
 801516c:	4580      	cmp	r8, r0
 801516e:	d13a      	bne.n	80151e6 <_malloc_r+0xd2>
 8015170:	6821      	ldr	r1, [r4, #0]
 8015172:	3503      	adds	r5, #3
 8015174:	1a6d      	subs	r5, r5, r1
 8015176:	f025 0503 	bic.w	r5, r5, #3
 801517a:	3508      	adds	r5, #8
 801517c:	2d0c      	cmp	r5, #12
 801517e:	bf38      	it	cc
 8015180:	250c      	movcc	r5, #12
 8015182:	4629      	mov	r1, r5
 8015184:	4638      	mov	r0, r7
 8015186:	f7ff ffa5 	bl	80150d4 <sbrk_aligned>
 801518a:	3001      	adds	r0, #1
 801518c:	d02b      	beq.n	80151e6 <_malloc_r+0xd2>
 801518e:	6823      	ldr	r3, [r4, #0]
 8015190:	442b      	add	r3, r5
 8015192:	6023      	str	r3, [r4, #0]
 8015194:	e00e      	b.n	80151b4 <_malloc_r+0xa0>
 8015196:	6822      	ldr	r2, [r4, #0]
 8015198:	1b52      	subs	r2, r2, r5
 801519a:	d41e      	bmi.n	80151da <_malloc_r+0xc6>
 801519c:	2a0b      	cmp	r2, #11
 801519e:	d916      	bls.n	80151ce <_malloc_r+0xba>
 80151a0:	1961      	adds	r1, r4, r5
 80151a2:	42a3      	cmp	r3, r4
 80151a4:	6025      	str	r5, [r4, #0]
 80151a6:	bf18      	it	ne
 80151a8:	6059      	strne	r1, [r3, #4]
 80151aa:	6863      	ldr	r3, [r4, #4]
 80151ac:	bf08      	it	eq
 80151ae:	6031      	streq	r1, [r6, #0]
 80151b0:	5162      	str	r2, [r4, r5]
 80151b2:	604b      	str	r3, [r1, #4]
 80151b4:	4638      	mov	r0, r7
 80151b6:	f104 060b 	add.w	r6, r4, #11
 80151ba:	f000 fdad 	bl	8015d18 <__malloc_unlock>
 80151be:	f026 0607 	bic.w	r6, r6, #7
 80151c2:	1d23      	adds	r3, r4, #4
 80151c4:	1af2      	subs	r2, r6, r3
 80151c6:	d0b6      	beq.n	8015136 <_malloc_r+0x22>
 80151c8:	1b9b      	subs	r3, r3, r6
 80151ca:	50a3      	str	r3, [r4, r2]
 80151cc:	e7b3      	b.n	8015136 <_malloc_r+0x22>
 80151ce:	6862      	ldr	r2, [r4, #4]
 80151d0:	42a3      	cmp	r3, r4
 80151d2:	bf0c      	ite	eq
 80151d4:	6032      	streq	r2, [r6, #0]
 80151d6:	605a      	strne	r2, [r3, #4]
 80151d8:	e7ec      	b.n	80151b4 <_malloc_r+0xa0>
 80151da:	4623      	mov	r3, r4
 80151dc:	6864      	ldr	r4, [r4, #4]
 80151de:	e7b2      	b.n	8015146 <_malloc_r+0x32>
 80151e0:	4634      	mov	r4, r6
 80151e2:	6876      	ldr	r6, [r6, #4]
 80151e4:	e7b9      	b.n	801515a <_malloc_r+0x46>
 80151e6:	230c      	movs	r3, #12
 80151e8:	603b      	str	r3, [r7, #0]
 80151ea:	4638      	mov	r0, r7
 80151ec:	f000 fd94 	bl	8015d18 <__malloc_unlock>
 80151f0:	e7a1      	b.n	8015136 <_malloc_r+0x22>
 80151f2:	6025      	str	r5, [r4, #0]
 80151f4:	e7de      	b.n	80151b4 <_malloc_r+0xa0>
 80151f6:	bf00      	nop
 80151f8:	2000e8d0 	.word	0x2000e8d0

080151fc <cleanup_glue>:
 80151fc:	b538      	push	{r3, r4, r5, lr}
 80151fe:	460c      	mov	r4, r1
 8015200:	6809      	ldr	r1, [r1, #0]
 8015202:	4605      	mov	r5, r0
 8015204:	b109      	cbz	r1, 801520a <cleanup_glue+0xe>
 8015206:	f7ff fff9 	bl	80151fc <cleanup_glue>
 801520a:	4621      	mov	r1, r4
 801520c:	4628      	mov	r0, r5
 801520e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015212:	f7ff bf13 	b.w	801503c <_free_r>
	...

08015218 <_reclaim_reent>:
 8015218:	4b2c      	ldr	r3, [pc, #176]	; (80152cc <_reclaim_reent+0xb4>)
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	4283      	cmp	r3, r0
 801521e:	b570      	push	{r4, r5, r6, lr}
 8015220:	4604      	mov	r4, r0
 8015222:	d051      	beq.n	80152c8 <_reclaim_reent+0xb0>
 8015224:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8015226:	b143      	cbz	r3, 801523a <_reclaim_reent+0x22>
 8015228:	68db      	ldr	r3, [r3, #12]
 801522a:	2b00      	cmp	r3, #0
 801522c:	d14a      	bne.n	80152c4 <_reclaim_reent+0xac>
 801522e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015230:	6819      	ldr	r1, [r3, #0]
 8015232:	b111      	cbz	r1, 801523a <_reclaim_reent+0x22>
 8015234:	4620      	mov	r0, r4
 8015236:	f7ff ff01 	bl	801503c <_free_r>
 801523a:	6961      	ldr	r1, [r4, #20]
 801523c:	b111      	cbz	r1, 8015244 <_reclaim_reent+0x2c>
 801523e:	4620      	mov	r0, r4
 8015240:	f7ff fefc 	bl	801503c <_free_r>
 8015244:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015246:	b111      	cbz	r1, 801524e <_reclaim_reent+0x36>
 8015248:	4620      	mov	r0, r4
 801524a:	f7ff fef7 	bl	801503c <_free_r>
 801524e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015250:	b111      	cbz	r1, 8015258 <_reclaim_reent+0x40>
 8015252:	4620      	mov	r0, r4
 8015254:	f7ff fef2 	bl	801503c <_free_r>
 8015258:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801525a:	b111      	cbz	r1, 8015262 <_reclaim_reent+0x4a>
 801525c:	4620      	mov	r0, r4
 801525e:	f7ff feed 	bl	801503c <_free_r>
 8015262:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8015264:	b111      	cbz	r1, 801526c <_reclaim_reent+0x54>
 8015266:	4620      	mov	r0, r4
 8015268:	f7ff fee8 	bl	801503c <_free_r>
 801526c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801526e:	b111      	cbz	r1, 8015276 <_reclaim_reent+0x5e>
 8015270:	4620      	mov	r0, r4
 8015272:	f7ff fee3 	bl	801503c <_free_r>
 8015276:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8015278:	b111      	cbz	r1, 8015280 <_reclaim_reent+0x68>
 801527a:	4620      	mov	r0, r4
 801527c:	f7ff fede 	bl	801503c <_free_r>
 8015280:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015282:	b111      	cbz	r1, 801528a <_reclaim_reent+0x72>
 8015284:	4620      	mov	r0, r4
 8015286:	f7ff fed9 	bl	801503c <_free_r>
 801528a:	69a3      	ldr	r3, [r4, #24]
 801528c:	b1e3      	cbz	r3, 80152c8 <_reclaim_reent+0xb0>
 801528e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015290:	4620      	mov	r0, r4
 8015292:	4798      	blx	r3
 8015294:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8015296:	b1b9      	cbz	r1, 80152c8 <_reclaim_reent+0xb0>
 8015298:	4620      	mov	r0, r4
 801529a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801529e:	f7ff bfad 	b.w	80151fc <cleanup_glue>
 80152a2:	5949      	ldr	r1, [r1, r5]
 80152a4:	b941      	cbnz	r1, 80152b8 <_reclaim_reent+0xa0>
 80152a6:	3504      	adds	r5, #4
 80152a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80152aa:	2d80      	cmp	r5, #128	; 0x80
 80152ac:	68d9      	ldr	r1, [r3, #12]
 80152ae:	d1f8      	bne.n	80152a2 <_reclaim_reent+0x8a>
 80152b0:	4620      	mov	r0, r4
 80152b2:	f7ff fec3 	bl	801503c <_free_r>
 80152b6:	e7ba      	b.n	801522e <_reclaim_reent+0x16>
 80152b8:	680e      	ldr	r6, [r1, #0]
 80152ba:	4620      	mov	r0, r4
 80152bc:	f7ff febe 	bl	801503c <_free_r>
 80152c0:	4631      	mov	r1, r6
 80152c2:	e7ef      	b.n	80152a4 <_reclaim_reent+0x8c>
 80152c4:	2500      	movs	r5, #0
 80152c6:	e7ef      	b.n	80152a8 <_reclaim_reent+0x90>
 80152c8:	bd70      	pop	{r4, r5, r6, pc}
 80152ca:	bf00      	nop
 80152cc:	200002b4 	.word	0x200002b4

080152d0 <_sbrk_r>:
 80152d0:	b538      	push	{r3, r4, r5, lr}
 80152d2:	4d06      	ldr	r5, [pc, #24]	; (80152ec <_sbrk_r+0x1c>)
 80152d4:	2300      	movs	r3, #0
 80152d6:	4604      	mov	r4, r0
 80152d8:	4608      	mov	r0, r1
 80152da:	602b      	str	r3, [r5, #0]
 80152dc:	f7ed ffa4 	bl	8003228 <_sbrk>
 80152e0:	1c43      	adds	r3, r0, #1
 80152e2:	d102      	bne.n	80152ea <_sbrk_r+0x1a>
 80152e4:	682b      	ldr	r3, [r5, #0]
 80152e6:	b103      	cbz	r3, 80152ea <_sbrk_r+0x1a>
 80152e8:	6023      	str	r3, [r4, #0]
 80152ea:	bd38      	pop	{r3, r4, r5, pc}
 80152ec:	2000e8d8 	.word	0x2000e8d8

080152f0 <siprintf>:
 80152f0:	b40e      	push	{r1, r2, r3}
 80152f2:	b500      	push	{lr}
 80152f4:	b09c      	sub	sp, #112	; 0x70
 80152f6:	ab1d      	add	r3, sp, #116	; 0x74
 80152f8:	9002      	str	r0, [sp, #8]
 80152fa:	9006      	str	r0, [sp, #24]
 80152fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015300:	4809      	ldr	r0, [pc, #36]	; (8015328 <siprintf+0x38>)
 8015302:	9107      	str	r1, [sp, #28]
 8015304:	9104      	str	r1, [sp, #16]
 8015306:	4909      	ldr	r1, [pc, #36]	; (801532c <siprintf+0x3c>)
 8015308:	f853 2b04 	ldr.w	r2, [r3], #4
 801530c:	9105      	str	r1, [sp, #20]
 801530e:	6800      	ldr	r0, [r0, #0]
 8015310:	9301      	str	r3, [sp, #4]
 8015312:	a902      	add	r1, sp, #8
 8015314:	f000 fd62 	bl	8015ddc <_svfiprintf_r>
 8015318:	9b02      	ldr	r3, [sp, #8]
 801531a:	2200      	movs	r2, #0
 801531c:	701a      	strb	r2, [r3, #0]
 801531e:	b01c      	add	sp, #112	; 0x70
 8015320:	f85d eb04 	ldr.w	lr, [sp], #4
 8015324:	b003      	add	sp, #12
 8015326:	4770      	bx	lr
 8015328:	200002b4 	.word	0x200002b4
 801532c:	ffff0208 	.word	0xffff0208

08015330 <__sread>:
 8015330:	b510      	push	{r4, lr}
 8015332:	460c      	mov	r4, r1
 8015334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015338:	f001 f93e 	bl	80165b8 <_read_r>
 801533c:	2800      	cmp	r0, #0
 801533e:	bfab      	itete	ge
 8015340:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015342:	89a3      	ldrhlt	r3, [r4, #12]
 8015344:	181b      	addge	r3, r3, r0
 8015346:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801534a:	bfac      	ite	ge
 801534c:	6563      	strge	r3, [r4, #84]	; 0x54
 801534e:	81a3      	strhlt	r3, [r4, #12]
 8015350:	bd10      	pop	{r4, pc}

08015352 <__seofread>:
 8015352:	2000      	movs	r0, #0
 8015354:	4770      	bx	lr

08015356 <__swrite>:
 8015356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801535a:	461f      	mov	r7, r3
 801535c:	898b      	ldrh	r3, [r1, #12]
 801535e:	05db      	lsls	r3, r3, #23
 8015360:	4605      	mov	r5, r0
 8015362:	460c      	mov	r4, r1
 8015364:	4616      	mov	r6, r2
 8015366:	d505      	bpl.n	8015374 <__swrite+0x1e>
 8015368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801536c:	2302      	movs	r3, #2
 801536e:	2200      	movs	r2, #0
 8015370:	f000 fcba 	bl	8015ce8 <_lseek_r>
 8015374:	89a3      	ldrh	r3, [r4, #12]
 8015376:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801537a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801537e:	81a3      	strh	r3, [r4, #12]
 8015380:	4632      	mov	r2, r6
 8015382:	463b      	mov	r3, r7
 8015384:	4628      	mov	r0, r5
 8015386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801538a:	f000 bb3d 	b.w	8015a08 <_write_r>

0801538e <__sseek>:
 801538e:	b510      	push	{r4, lr}
 8015390:	460c      	mov	r4, r1
 8015392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015396:	f000 fca7 	bl	8015ce8 <_lseek_r>
 801539a:	1c43      	adds	r3, r0, #1
 801539c:	89a3      	ldrh	r3, [r4, #12]
 801539e:	bf15      	itete	ne
 80153a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80153a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80153a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80153aa:	81a3      	strheq	r3, [r4, #12]
 80153ac:	bf18      	it	ne
 80153ae:	81a3      	strhne	r3, [r4, #12]
 80153b0:	bd10      	pop	{r4, pc}

080153b2 <__sclose>:
 80153b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153b6:	f000 bb57 	b.w	8015a68 <_close_r>
	...

080153bc <strtok>:
 80153bc:	4b16      	ldr	r3, [pc, #88]	; (8015418 <strtok+0x5c>)
 80153be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80153c0:	681e      	ldr	r6, [r3, #0]
 80153c2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80153c4:	4605      	mov	r5, r0
 80153c6:	b9fc      	cbnz	r4, 8015408 <strtok+0x4c>
 80153c8:	2050      	movs	r0, #80	; 0x50
 80153ca:	9101      	str	r1, [sp, #4]
 80153cc:	f7ff fb9e 	bl	8014b0c <malloc>
 80153d0:	9901      	ldr	r1, [sp, #4]
 80153d2:	65b0      	str	r0, [r6, #88]	; 0x58
 80153d4:	4602      	mov	r2, r0
 80153d6:	b920      	cbnz	r0, 80153e2 <strtok+0x26>
 80153d8:	4b10      	ldr	r3, [pc, #64]	; (801541c <strtok+0x60>)
 80153da:	4811      	ldr	r0, [pc, #68]	; (8015420 <strtok+0x64>)
 80153dc:	2157      	movs	r1, #87	; 0x57
 80153de:	f000 fb25 	bl	8015a2c <__assert_func>
 80153e2:	e9c0 4400 	strd	r4, r4, [r0]
 80153e6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80153ea:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80153ee:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80153f2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80153f6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80153fa:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80153fe:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8015402:	6184      	str	r4, [r0, #24]
 8015404:	7704      	strb	r4, [r0, #28]
 8015406:	6244      	str	r4, [r0, #36]	; 0x24
 8015408:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801540a:	2301      	movs	r3, #1
 801540c:	4628      	mov	r0, r5
 801540e:	b002      	add	sp, #8
 8015410:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015414:	f000 b806 	b.w	8015424 <__strtok_r>
 8015418:	200002b4 	.word	0x200002b4
 801541c:	08017c18 	.word	0x08017c18
 8015420:	08017c2f 	.word	0x08017c2f

08015424 <__strtok_r>:
 8015424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015426:	b908      	cbnz	r0, 801542c <__strtok_r+0x8>
 8015428:	6810      	ldr	r0, [r2, #0]
 801542a:	b188      	cbz	r0, 8015450 <__strtok_r+0x2c>
 801542c:	4604      	mov	r4, r0
 801542e:	4620      	mov	r0, r4
 8015430:	f814 5b01 	ldrb.w	r5, [r4], #1
 8015434:	460f      	mov	r7, r1
 8015436:	f817 6b01 	ldrb.w	r6, [r7], #1
 801543a:	b91e      	cbnz	r6, 8015444 <__strtok_r+0x20>
 801543c:	b965      	cbnz	r5, 8015458 <__strtok_r+0x34>
 801543e:	6015      	str	r5, [r2, #0]
 8015440:	4628      	mov	r0, r5
 8015442:	e005      	b.n	8015450 <__strtok_r+0x2c>
 8015444:	42b5      	cmp	r5, r6
 8015446:	d1f6      	bne.n	8015436 <__strtok_r+0x12>
 8015448:	2b00      	cmp	r3, #0
 801544a:	d1f0      	bne.n	801542e <__strtok_r+0xa>
 801544c:	6014      	str	r4, [r2, #0]
 801544e:	7003      	strb	r3, [r0, #0]
 8015450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015452:	461c      	mov	r4, r3
 8015454:	e00c      	b.n	8015470 <__strtok_r+0x4c>
 8015456:	b915      	cbnz	r5, 801545e <__strtok_r+0x3a>
 8015458:	f814 3b01 	ldrb.w	r3, [r4], #1
 801545c:	460e      	mov	r6, r1
 801545e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8015462:	42ab      	cmp	r3, r5
 8015464:	d1f7      	bne.n	8015456 <__strtok_r+0x32>
 8015466:	2b00      	cmp	r3, #0
 8015468:	d0f3      	beq.n	8015452 <__strtok_r+0x2e>
 801546a:	2300      	movs	r3, #0
 801546c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8015470:	6014      	str	r4, [r2, #0]
 8015472:	e7ed      	b.n	8015450 <__strtok_r+0x2c>

08015474 <_strtol_l.constprop.0>:
 8015474:	2b01      	cmp	r3, #1
 8015476:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801547a:	d001      	beq.n	8015480 <_strtol_l.constprop.0+0xc>
 801547c:	2b24      	cmp	r3, #36	; 0x24
 801547e:	d906      	bls.n	801548e <_strtol_l.constprop.0+0x1a>
 8015480:	f7ff fa1e 	bl	80148c0 <__errno>
 8015484:	2316      	movs	r3, #22
 8015486:	6003      	str	r3, [r0, #0]
 8015488:	2000      	movs	r0, #0
 801548a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801548e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8015574 <_strtol_l.constprop.0+0x100>
 8015492:	460d      	mov	r5, r1
 8015494:	462e      	mov	r6, r5
 8015496:	f815 4b01 	ldrb.w	r4, [r5], #1
 801549a:	f814 700c 	ldrb.w	r7, [r4, ip]
 801549e:	f017 0708 	ands.w	r7, r7, #8
 80154a2:	d1f7      	bne.n	8015494 <_strtol_l.constprop.0+0x20>
 80154a4:	2c2d      	cmp	r4, #45	; 0x2d
 80154a6:	d132      	bne.n	801550e <_strtol_l.constprop.0+0x9a>
 80154a8:	782c      	ldrb	r4, [r5, #0]
 80154aa:	2701      	movs	r7, #1
 80154ac:	1cb5      	adds	r5, r6, #2
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d05b      	beq.n	801556a <_strtol_l.constprop.0+0xf6>
 80154b2:	2b10      	cmp	r3, #16
 80154b4:	d109      	bne.n	80154ca <_strtol_l.constprop.0+0x56>
 80154b6:	2c30      	cmp	r4, #48	; 0x30
 80154b8:	d107      	bne.n	80154ca <_strtol_l.constprop.0+0x56>
 80154ba:	782c      	ldrb	r4, [r5, #0]
 80154bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80154c0:	2c58      	cmp	r4, #88	; 0x58
 80154c2:	d14d      	bne.n	8015560 <_strtol_l.constprop.0+0xec>
 80154c4:	786c      	ldrb	r4, [r5, #1]
 80154c6:	2310      	movs	r3, #16
 80154c8:	3502      	adds	r5, #2
 80154ca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80154ce:	f108 38ff 	add.w	r8, r8, #4294967295
 80154d2:	f04f 0c00 	mov.w	ip, #0
 80154d6:	fbb8 f9f3 	udiv	r9, r8, r3
 80154da:	4666      	mov	r6, ip
 80154dc:	fb03 8a19 	mls	sl, r3, r9, r8
 80154e0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80154e4:	f1be 0f09 	cmp.w	lr, #9
 80154e8:	d816      	bhi.n	8015518 <_strtol_l.constprop.0+0xa4>
 80154ea:	4674      	mov	r4, lr
 80154ec:	42a3      	cmp	r3, r4
 80154ee:	dd24      	ble.n	801553a <_strtol_l.constprop.0+0xc6>
 80154f0:	f1bc 0f00 	cmp.w	ip, #0
 80154f4:	db1e      	blt.n	8015534 <_strtol_l.constprop.0+0xc0>
 80154f6:	45b1      	cmp	r9, r6
 80154f8:	d31c      	bcc.n	8015534 <_strtol_l.constprop.0+0xc0>
 80154fa:	d101      	bne.n	8015500 <_strtol_l.constprop.0+0x8c>
 80154fc:	45a2      	cmp	sl, r4
 80154fe:	db19      	blt.n	8015534 <_strtol_l.constprop.0+0xc0>
 8015500:	fb06 4603 	mla	r6, r6, r3, r4
 8015504:	f04f 0c01 	mov.w	ip, #1
 8015508:	f815 4b01 	ldrb.w	r4, [r5], #1
 801550c:	e7e8      	b.n	80154e0 <_strtol_l.constprop.0+0x6c>
 801550e:	2c2b      	cmp	r4, #43	; 0x2b
 8015510:	bf04      	itt	eq
 8015512:	782c      	ldrbeq	r4, [r5, #0]
 8015514:	1cb5      	addeq	r5, r6, #2
 8015516:	e7ca      	b.n	80154ae <_strtol_l.constprop.0+0x3a>
 8015518:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801551c:	f1be 0f19 	cmp.w	lr, #25
 8015520:	d801      	bhi.n	8015526 <_strtol_l.constprop.0+0xb2>
 8015522:	3c37      	subs	r4, #55	; 0x37
 8015524:	e7e2      	b.n	80154ec <_strtol_l.constprop.0+0x78>
 8015526:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801552a:	f1be 0f19 	cmp.w	lr, #25
 801552e:	d804      	bhi.n	801553a <_strtol_l.constprop.0+0xc6>
 8015530:	3c57      	subs	r4, #87	; 0x57
 8015532:	e7db      	b.n	80154ec <_strtol_l.constprop.0+0x78>
 8015534:	f04f 3cff 	mov.w	ip, #4294967295
 8015538:	e7e6      	b.n	8015508 <_strtol_l.constprop.0+0x94>
 801553a:	f1bc 0f00 	cmp.w	ip, #0
 801553e:	da05      	bge.n	801554c <_strtol_l.constprop.0+0xd8>
 8015540:	2322      	movs	r3, #34	; 0x22
 8015542:	6003      	str	r3, [r0, #0]
 8015544:	4646      	mov	r6, r8
 8015546:	b942      	cbnz	r2, 801555a <_strtol_l.constprop.0+0xe6>
 8015548:	4630      	mov	r0, r6
 801554a:	e79e      	b.n	801548a <_strtol_l.constprop.0+0x16>
 801554c:	b107      	cbz	r7, 8015550 <_strtol_l.constprop.0+0xdc>
 801554e:	4276      	negs	r6, r6
 8015550:	2a00      	cmp	r2, #0
 8015552:	d0f9      	beq.n	8015548 <_strtol_l.constprop.0+0xd4>
 8015554:	f1bc 0f00 	cmp.w	ip, #0
 8015558:	d000      	beq.n	801555c <_strtol_l.constprop.0+0xe8>
 801555a:	1e69      	subs	r1, r5, #1
 801555c:	6011      	str	r1, [r2, #0]
 801555e:	e7f3      	b.n	8015548 <_strtol_l.constprop.0+0xd4>
 8015560:	2430      	movs	r4, #48	; 0x30
 8015562:	2b00      	cmp	r3, #0
 8015564:	d1b1      	bne.n	80154ca <_strtol_l.constprop.0+0x56>
 8015566:	2308      	movs	r3, #8
 8015568:	e7af      	b.n	80154ca <_strtol_l.constprop.0+0x56>
 801556a:	2c30      	cmp	r4, #48	; 0x30
 801556c:	d0a5      	beq.n	80154ba <_strtol_l.constprop.0+0x46>
 801556e:	230a      	movs	r3, #10
 8015570:	e7ab      	b.n	80154ca <_strtol_l.constprop.0+0x56>
 8015572:	bf00      	nop
 8015574:	08017d05 	.word	0x08017d05

08015578 <_strtol_r>:
 8015578:	f7ff bf7c 	b.w	8015474 <_strtol_l.constprop.0>

0801557c <strtol>:
 801557c:	4613      	mov	r3, r2
 801557e:	460a      	mov	r2, r1
 8015580:	4601      	mov	r1, r0
 8015582:	4802      	ldr	r0, [pc, #8]	; (801558c <strtol+0x10>)
 8015584:	6800      	ldr	r0, [r0, #0]
 8015586:	f7ff bf75 	b.w	8015474 <_strtol_l.constprop.0>
 801558a:	bf00      	nop
 801558c:	200002b4 	.word	0x200002b4

08015590 <__tzcalc_limits>:
 8015590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015594:	4605      	mov	r5, r0
 8015596:	f000 fba3 	bl	8015ce0 <__gettzinfo>
 801559a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801559e:	429d      	cmp	r5, r3
 80155a0:	f340 8099 	ble.w	80156d6 <__tzcalc_limits+0x146>
 80155a4:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 80155a8:	18ac      	adds	r4, r5, r2
 80155aa:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 80155ae:	f240 126d 	movw	r2, #365	; 0x16d
 80155b2:	10a4      	asrs	r4, r4, #2
 80155b4:	fb02 4403 	mla	r4, r2, r3, r4
 80155b8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80155bc:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 80155c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80155c4:	441c      	add	r4, r3
 80155c6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80155ca:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 80155ce:	fb95 fcf3 	sdiv	ip, r5, r3
 80155d2:	fb03 5c1c 	mls	ip, r3, ip, r5
 80155d6:	186a      	adds	r2, r5, r1
 80155d8:	fabc f68c 	clz	r6, ip
 80155dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80155e0:	f005 0303 	and.w	r3, r5, #3
 80155e4:	4414      	add	r4, r2
 80155e6:	2264      	movs	r2, #100	; 0x64
 80155e8:	6045      	str	r5, [r0, #4]
 80155ea:	fb95 f7f2 	sdiv	r7, r5, r2
 80155ee:	0976      	lsrs	r6, r6, #5
 80155f0:	fb02 5717 	mls	r7, r2, r7, r5
 80155f4:	4601      	mov	r1, r0
 80155f6:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80155fa:	9300      	str	r3, [sp, #0]
 80155fc:	f04f 0a07 	mov.w	sl, #7
 8015600:	7a0d      	ldrb	r5, [r1, #8]
 8015602:	694b      	ldr	r3, [r1, #20]
 8015604:	2d4a      	cmp	r5, #74	; 0x4a
 8015606:	d12d      	bne.n	8015664 <__tzcalc_limits+0xd4>
 8015608:	9a00      	ldr	r2, [sp, #0]
 801560a:	eb04 0e03 	add.w	lr, r4, r3
 801560e:	b902      	cbnz	r2, 8015612 <__tzcalc_limits+0x82>
 8015610:	b917      	cbnz	r7, 8015618 <__tzcalc_limits+0x88>
 8015612:	f1bc 0f00 	cmp.w	ip, #0
 8015616:	d123      	bne.n	8015660 <__tzcalc_limits+0xd0>
 8015618:	2b3b      	cmp	r3, #59	; 0x3b
 801561a:	bfd4      	ite	le
 801561c:	2300      	movle	r3, #0
 801561e:	2301      	movgt	r3, #1
 8015620:	4473      	add	r3, lr
 8015622:	3b01      	subs	r3, #1
 8015624:	698d      	ldr	r5, [r1, #24]
 8015626:	4a2d      	ldr	r2, [pc, #180]	; (80156dc <__tzcalc_limits+0x14c>)
 8015628:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 801562c:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8015630:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8015632:	18ed      	adds	r5, r5, r3
 8015634:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8015638:	e9c1 5308 	strd	r5, r3, [r1, #32]
 801563c:	3128      	adds	r1, #40	; 0x28
 801563e:	458b      	cmp	fp, r1
 8015640:	d1de      	bne.n	8015600 <__tzcalc_limits+0x70>
 8015642:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 8015646:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 801564a:	428c      	cmp	r4, r1
 801564c:	eb72 0303 	sbcs.w	r3, r2, r3
 8015650:	bfb4      	ite	lt
 8015652:	2301      	movlt	r3, #1
 8015654:	2300      	movge	r3, #0
 8015656:	6003      	str	r3, [r0, #0]
 8015658:	2001      	movs	r0, #1
 801565a:	b003      	add	sp, #12
 801565c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015660:	2300      	movs	r3, #0
 8015662:	e7dd      	b.n	8015620 <__tzcalc_limits+0x90>
 8015664:	2d44      	cmp	r5, #68	; 0x44
 8015666:	d101      	bne.n	801566c <__tzcalc_limits+0xdc>
 8015668:	4423      	add	r3, r4
 801566a:	e7db      	b.n	8015624 <__tzcalc_limits+0x94>
 801566c:	9a00      	ldr	r2, [sp, #0]
 801566e:	bb62      	cbnz	r2, 80156ca <__tzcalc_limits+0x13a>
 8015670:	2f00      	cmp	r7, #0
 8015672:	bf0c      	ite	eq
 8015674:	4635      	moveq	r5, r6
 8015676:	2501      	movne	r5, #1
 8015678:	68ca      	ldr	r2, [r1, #12]
 801567a:	9201      	str	r2, [sp, #4]
 801567c:	4a18      	ldr	r2, [pc, #96]	; (80156e0 <__tzcalc_limits+0x150>)
 801567e:	f04f 0930 	mov.w	r9, #48	; 0x30
 8015682:	fb09 2505 	mla	r5, r9, r5, r2
 8015686:	46a6      	mov	lr, r4
 8015688:	f04f 0800 	mov.w	r8, #0
 801568c:	3d04      	subs	r5, #4
 801568e:	9a01      	ldr	r2, [sp, #4]
 8015690:	f108 0801 	add.w	r8, r8, #1
 8015694:	4542      	cmp	r2, r8
 8015696:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 801569a:	dc18      	bgt.n	80156ce <__tzcalc_limits+0x13e>
 801569c:	f10e 0504 	add.w	r5, lr, #4
 80156a0:	fb95 f8fa 	sdiv	r8, r5, sl
 80156a4:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 80156a8:	eba5 0808 	sub.w	r8, r5, r8
 80156ac:	ebb3 0808 	subs.w	r8, r3, r8
 80156b0:	690b      	ldr	r3, [r1, #16]
 80156b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80156b6:	bf48      	it	mi
 80156b8:	f108 0807 	addmi.w	r8, r8, #7
 80156bc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80156c0:	4443      	add	r3, r8
 80156c2:	454b      	cmp	r3, r9
 80156c4:	da05      	bge.n	80156d2 <__tzcalc_limits+0x142>
 80156c6:	4473      	add	r3, lr
 80156c8:	e7ac      	b.n	8015624 <__tzcalc_limits+0x94>
 80156ca:	4635      	mov	r5, r6
 80156cc:	e7d4      	b.n	8015678 <__tzcalc_limits+0xe8>
 80156ce:	44ce      	add	lr, r9
 80156d0:	e7dd      	b.n	801568e <__tzcalc_limits+0xfe>
 80156d2:	3b07      	subs	r3, #7
 80156d4:	e7f5      	b.n	80156c2 <__tzcalc_limits+0x132>
 80156d6:	2000      	movs	r0, #0
 80156d8:	e7bf      	b.n	801565a <__tzcalc_limits+0xca>
 80156da:	bf00      	nop
 80156dc:	00015180 	.word	0x00015180
 80156e0:	08017e08 	.word	0x08017e08

080156e4 <__tz_lock>:
 80156e4:	4801      	ldr	r0, [pc, #4]	; (80156ec <__tz_lock+0x8>)
 80156e6:	f7ff ba0c 	b.w	8014b02 <__retarget_lock_acquire>
 80156ea:	bf00      	nop
 80156ec:	2000e8cc 	.word	0x2000e8cc

080156f0 <__tz_unlock>:
 80156f0:	4801      	ldr	r0, [pc, #4]	; (80156f8 <__tz_unlock+0x8>)
 80156f2:	f7ff ba08 	b.w	8014b06 <__retarget_lock_release>
 80156f6:	bf00      	nop
 80156f8:	2000e8cc 	.word	0x2000e8cc

080156fc <_tzset_unlocked>:
 80156fc:	4b01      	ldr	r3, [pc, #4]	; (8015704 <_tzset_unlocked+0x8>)
 80156fe:	6818      	ldr	r0, [r3, #0]
 8015700:	f000 b802 	b.w	8015708 <_tzset_unlocked_r>
 8015704:	200002b4 	.word	0x200002b4

08015708 <_tzset_unlocked_r>:
 8015708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801570c:	b08d      	sub	sp, #52	; 0x34
 801570e:	4607      	mov	r7, r0
 8015710:	f000 fae6 	bl	8015ce0 <__gettzinfo>
 8015714:	49b0      	ldr	r1, [pc, #704]	; (80159d8 <_tzset_unlocked_r+0x2d0>)
 8015716:	4eb1      	ldr	r6, [pc, #708]	; (80159dc <_tzset_unlocked_r+0x2d4>)
 8015718:	4605      	mov	r5, r0
 801571a:	4638      	mov	r0, r7
 801571c:	f000 fad8 	bl	8015cd0 <_getenv_r>
 8015720:	4604      	mov	r4, r0
 8015722:	b970      	cbnz	r0, 8015742 <_tzset_unlocked_r+0x3a>
 8015724:	4bae      	ldr	r3, [pc, #696]	; (80159e0 <_tzset_unlocked_r+0x2d8>)
 8015726:	4aaf      	ldr	r2, [pc, #700]	; (80159e4 <_tzset_unlocked_r+0x2dc>)
 8015728:	6018      	str	r0, [r3, #0]
 801572a:	4baf      	ldr	r3, [pc, #700]	; (80159e8 <_tzset_unlocked_r+0x2e0>)
 801572c:	6018      	str	r0, [r3, #0]
 801572e:	4baf      	ldr	r3, [pc, #700]	; (80159ec <_tzset_unlocked_r+0x2e4>)
 8015730:	6830      	ldr	r0, [r6, #0]
 8015732:	e9c3 2200 	strd	r2, r2, [r3]
 8015736:	f7ff f9f1 	bl	8014b1c <free>
 801573a:	6034      	str	r4, [r6, #0]
 801573c:	b00d      	add	sp, #52	; 0x34
 801573e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015742:	6831      	ldr	r1, [r6, #0]
 8015744:	2900      	cmp	r1, #0
 8015746:	d162      	bne.n	801580e <_tzset_unlocked_r+0x106>
 8015748:	6830      	ldr	r0, [r6, #0]
 801574a:	f7ff f9e7 	bl	8014b1c <free>
 801574e:	4620      	mov	r0, r4
 8015750:	f7ea fd48 	bl	80001e4 <strlen>
 8015754:	1c41      	adds	r1, r0, #1
 8015756:	4638      	mov	r0, r7
 8015758:	f7ff fcdc 	bl	8015114 <_malloc_r>
 801575c:	6030      	str	r0, [r6, #0]
 801575e:	2800      	cmp	r0, #0
 8015760:	d15a      	bne.n	8015818 <_tzset_unlocked_r+0x110>
 8015762:	7823      	ldrb	r3, [r4, #0]
 8015764:	4aa2      	ldr	r2, [pc, #648]	; (80159f0 <_tzset_unlocked_r+0x2e8>)
 8015766:	49a3      	ldr	r1, [pc, #652]	; (80159f4 <_tzset_unlocked_r+0x2ec>)
 8015768:	2b3a      	cmp	r3, #58	; 0x3a
 801576a:	bf08      	it	eq
 801576c:	3401      	addeq	r4, #1
 801576e:	ae0a      	add	r6, sp, #40	; 0x28
 8015770:	4633      	mov	r3, r6
 8015772:	4620      	mov	r0, r4
 8015774:	f000 ff32 	bl	80165dc <siscanf>
 8015778:	2800      	cmp	r0, #0
 801577a:	dddf      	ble.n	801573c <_tzset_unlocked_r+0x34>
 801577c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801577e:	18e7      	adds	r7, r4, r3
 8015780:	5ce3      	ldrb	r3, [r4, r3]
 8015782:	2b2d      	cmp	r3, #45	; 0x2d
 8015784:	d14c      	bne.n	8015820 <_tzset_unlocked_r+0x118>
 8015786:	3701      	adds	r7, #1
 8015788:	f04f 38ff 	mov.w	r8, #4294967295
 801578c:	f10d 0a20 	add.w	sl, sp, #32
 8015790:	f10d 0b1e 	add.w	fp, sp, #30
 8015794:	2400      	movs	r4, #0
 8015796:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801579a:	4997      	ldr	r1, [pc, #604]	; (80159f8 <_tzset_unlocked_r+0x2f0>)
 801579c:	9603      	str	r6, [sp, #12]
 801579e:	f8cd b000 	str.w	fp, [sp]
 80157a2:	4633      	mov	r3, r6
 80157a4:	aa07      	add	r2, sp, #28
 80157a6:	4638      	mov	r0, r7
 80157a8:	f8ad 401e 	strh.w	r4, [sp, #30]
 80157ac:	f8ad 4020 	strh.w	r4, [sp, #32]
 80157b0:	f000 ff14 	bl	80165dc <siscanf>
 80157b4:	42a0      	cmp	r0, r4
 80157b6:	ddc1      	ble.n	801573c <_tzset_unlocked_r+0x34>
 80157b8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80157bc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80157c0:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8015a04 <_tzset_unlocked_r+0x2fc>
 80157c4:	213c      	movs	r1, #60	; 0x3c
 80157c6:	fb01 3302 	mla	r3, r1, r2, r3
 80157ca:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80157ce:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80157d2:	fb01 3302 	mla	r3, r1, r2, r3
 80157d6:	fb08 f303 	mul.w	r3, r8, r3
 80157da:	f8df 8210 	ldr.w	r8, [pc, #528]	; 80159ec <_tzset_unlocked_r+0x2e4>
 80157de:	62ab      	str	r3, [r5, #40]	; 0x28
 80157e0:	4b83      	ldr	r3, [pc, #524]	; (80159f0 <_tzset_unlocked_r+0x2e8>)
 80157e2:	f8c8 3000 	str.w	r3, [r8]
 80157e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157e8:	4982      	ldr	r1, [pc, #520]	; (80159f4 <_tzset_unlocked_r+0x2ec>)
 80157ea:	441f      	add	r7, r3
 80157ec:	464a      	mov	r2, r9
 80157ee:	4633      	mov	r3, r6
 80157f0:	4638      	mov	r0, r7
 80157f2:	f000 fef3 	bl	80165dc <siscanf>
 80157f6:	42a0      	cmp	r0, r4
 80157f8:	dc18      	bgt.n	801582c <_tzset_unlocked_r+0x124>
 80157fa:	f8d8 3000 	ldr.w	r3, [r8]
 80157fe:	f8c8 3004 	str.w	r3, [r8, #4]
 8015802:	4b77      	ldr	r3, [pc, #476]	; (80159e0 <_tzset_unlocked_r+0x2d8>)
 8015804:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8015806:	601a      	str	r2, [r3, #0]
 8015808:	4b77      	ldr	r3, [pc, #476]	; (80159e8 <_tzset_unlocked_r+0x2e0>)
 801580a:	601c      	str	r4, [r3, #0]
 801580c:	e796      	b.n	801573c <_tzset_unlocked_r+0x34>
 801580e:	f7ea fcdf 	bl	80001d0 <strcmp>
 8015812:	2800      	cmp	r0, #0
 8015814:	d198      	bne.n	8015748 <_tzset_unlocked_r+0x40>
 8015816:	e791      	b.n	801573c <_tzset_unlocked_r+0x34>
 8015818:	4621      	mov	r1, r4
 801581a:	f000 ff0b 	bl	8016634 <strcpy>
 801581e:	e7a0      	b.n	8015762 <_tzset_unlocked_r+0x5a>
 8015820:	2b2b      	cmp	r3, #43	; 0x2b
 8015822:	bf08      	it	eq
 8015824:	3701      	addeq	r7, #1
 8015826:	f04f 0801 	mov.w	r8, #1
 801582a:	e7af      	b.n	801578c <_tzset_unlocked_r+0x84>
 801582c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801582e:	f8c8 9004 	str.w	r9, [r8, #4]
 8015832:	18fc      	adds	r4, r7, r3
 8015834:	5cfb      	ldrb	r3, [r7, r3]
 8015836:	2b2d      	cmp	r3, #45	; 0x2d
 8015838:	f040 808b 	bne.w	8015952 <_tzset_unlocked_r+0x24a>
 801583c:	3401      	adds	r4, #1
 801583e:	f04f 37ff 	mov.w	r7, #4294967295
 8015842:	2300      	movs	r3, #0
 8015844:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015848:	f8ad 301e 	strh.w	r3, [sp, #30]
 801584c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015850:	930a      	str	r3, [sp, #40]	; 0x28
 8015852:	e9cd a602 	strd	sl, r6, [sp, #8]
 8015856:	e9cd b600 	strd	fp, r6, [sp]
 801585a:	4967      	ldr	r1, [pc, #412]	; (80159f8 <_tzset_unlocked_r+0x2f0>)
 801585c:	4633      	mov	r3, r6
 801585e:	aa07      	add	r2, sp, #28
 8015860:	4620      	mov	r0, r4
 8015862:	f000 febb 	bl	80165dc <siscanf>
 8015866:	2800      	cmp	r0, #0
 8015868:	dc78      	bgt.n	801595c <_tzset_unlocked_r+0x254>
 801586a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801586c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8015870:	652b      	str	r3, [r5, #80]	; 0x50
 8015872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015874:	462f      	mov	r7, r5
 8015876:	441c      	add	r4, r3
 8015878:	f04f 0900 	mov.w	r9, #0
 801587c:	7823      	ldrb	r3, [r4, #0]
 801587e:	2b2c      	cmp	r3, #44	; 0x2c
 8015880:	bf08      	it	eq
 8015882:	3401      	addeq	r4, #1
 8015884:	f894 8000 	ldrb.w	r8, [r4]
 8015888:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801588c:	d178      	bne.n	8015980 <_tzset_unlocked_r+0x278>
 801588e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8015892:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8015896:	ab09      	add	r3, sp, #36	; 0x24
 8015898:	9300      	str	r3, [sp, #0]
 801589a:	4958      	ldr	r1, [pc, #352]	; (80159fc <_tzset_unlocked_r+0x2f4>)
 801589c:	9603      	str	r6, [sp, #12]
 801589e:	4633      	mov	r3, r6
 80158a0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80158a4:	4620      	mov	r0, r4
 80158a6:	f000 fe99 	bl	80165dc <siscanf>
 80158aa:	2803      	cmp	r0, #3
 80158ac:	f47f af46 	bne.w	801573c <_tzset_unlocked_r+0x34>
 80158b0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80158b4:	1e4b      	subs	r3, r1, #1
 80158b6:	2b0b      	cmp	r3, #11
 80158b8:	f63f af40 	bhi.w	801573c <_tzset_unlocked_r+0x34>
 80158bc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80158c0:	1e53      	subs	r3, r2, #1
 80158c2:	2b04      	cmp	r3, #4
 80158c4:	f63f af3a 	bhi.w	801573c <_tzset_unlocked_r+0x34>
 80158c8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80158cc:	2b06      	cmp	r3, #6
 80158ce:	f63f af35 	bhi.w	801573c <_tzset_unlocked_r+0x34>
 80158d2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80158d6:	f887 8008 	strb.w	r8, [r7, #8]
 80158da:	617b      	str	r3, [r7, #20]
 80158dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158de:	eb04 0803 	add.w	r8, r4, r3
 80158e2:	2302      	movs	r3, #2
 80158e4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80158e8:	2300      	movs	r3, #0
 80158ea:	f8ad 301e 	strh.w	r3, [sp, #30]
 80158ee:	f8ad 3020 	strh.w	r3, [sp, #32]
 80158f2:	930a      	str	r3, [sp, #40]	; 0x28
 80158f4:	f898 3000 	ldrb.w	r3, [r8]
 80158f8:	2b2f      	cmp	r3, #47	; 0x2f
 80158fa:	d109      	bne.n	8015910 <_tzset_unlocked_r+0x208>
 80158fc:	e9cd a602 	strd	sl, r6, [sp, #8]
 8015900:	e9cd b600 	strd	fp, r6, [sp]
 8015904:	493e      	ldr	r1, [pc, #248]	; (8015a00 <_tzset_unlocked_r+0x2f8>)
 8015906:	4633      	mov	r3, r6
 8015908:	aa07      	add	r2, sp, #28
 801590a:	4640      	mov	r0, r8
 801590c:	f000 fe66 	bl	80165dc <siscanf>
 8015910:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8015914:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015918:	213c      	movs	r1, #60	; 0x3c
 801591a:	fb01 3302 	mla	r3, r1, r2, r3
 801591e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8015922:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8015926:	fb01 3302 	mla	r3, r1, r2, r3
 801592a:	61bb      	str	r3, [r7, #24]
 801592c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801592e:	3728      	adds	r7, #40	; 0x28
 8015930:	4444      	add	r4, r8
 8015932:	f1b9 0f00 	cmp.w	r9, #0
 8015936:	d020      	beq.n	801597a <_tzset_unlocked_r+0x272>
 8015938:	6868      	ldr	r0, [r5, #4]
 801593a:	f7ff fe29 	bl	8015590 <__tzcalc_limits>
 801593e:	4b28      	ldr	r3, [pc, #160]	; (80159e0 <_tzset_unlocked_r+0x2d8>)
 8015940:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8015942:	601a      	str	r2, [r3, #0]
 8015944:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8015946:	1a9b      	subs	r3, r3, r2
 8015948:	4a27      	ldr	r2, [pc, #156]	; (80159e8 <_tzset_unlocked_r+0x2e0>)
 801594a:	bf18      	it	ne
 801594c:	2301      	movne	r3, #1
 801594e:	6013      	str	r3, [r2, #0]
 8015950:	e6f4      	b.n	801573c <_tzset_unlocked_r+0x34>
 8015952:	2b2b      	cmp	r3, #43	; 0x2b
 8015954:	bf08      	it	eq
 8015956:	3401      	addeq	r4, #1
 8015958:	2701      	movs	r7, #1
 801595a:	e772      	b.n	8015842 <_tzset_unlocked_r+0x13a>
 801595c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8015960:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015964:	213c      	movs	r1, #60	; 0x3c
 8015966:	fb01 3302 	mla	r3, r1, r2, r3
 801596a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801596e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8015972:	fb01 3302 	mla	r3, r1, r2, r3
 8015976:	437b      	muls	r3, r7
 8015978:	e77a      	b.n	8015870 <_tzset_unlocked_r+0x168>
 801597a:	f04f 0901 	mov.w	r9, #1
 801597e:	e77d      	b.n	801587c <_tzset_unlocked_r+0x174>
 8015980:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8015984:	bf06      	itte	eq
 8015986:	3401      	addeq	r4, #1
 8015988:	4643      	moveq	r3, r8
 801598a:	2344      	movne	r3, #68	; 0x44
 801598c:	220a      	movs	r2, #10
 801598e:	a90b      	add	r1, sp, #44	; 0x2c
 8015990:	4620      	mov	r0, r4
 8015992:	9305      	str	r3, [sp, #20]
 8015994:	f000 fede 	bl	8016754 <strtoul>
 8015998:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801599c:	9b05      	ldr	r3, [sp, #20]
 801599e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80159a2:	45a0      	cmp	r8, r4
 80159a4:	d114      	bne.n	80159d0 <_tzset_unlocked_r+0x2c8>
 80159a6:	234d      	movs	r3, #77	; 0x4d
 80159a8:	f1b9 0f00 	cmp.w	r9, #0
 80159ac:	d107      	bne.n	80159be <_tzset_unlocked_r+0x2b6>
 80159ae:	722b      	strb	r3, [r5, #8]
 80159b0:	2103      	movs	r1, #3
 80159b2:	2302      	movs	r3, #2
 80159b4:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80159b8:	f8c5 9014 	str.w	r9, [r5, #20]
 80159bc:	e791      	b.n	80158e2 <_tzset_unlocked_r+0x1da>
 80159be:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80159c2:	220b      	movs	r2, #11
 80159c4:	2301      	movs	r3, #1
 80159c6:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80159ca:	2300      	movs	r3, #0
 80159cc:	63eb      	str	r3, [r5, #60]	; 0x3c
 80159ce:	e788      	b.n	80158e2 <_tzset_unlocked_r+0x1da>
 80159d0:	b280      	uxth	r0, r0
 80159d2:	723b      	strb	r3, [r7, #8]
 80159d4:	6178      	str	r0, [r7, #20]
 80159d6:	e784      	b.n	80158e2 <_tzset_unlocked_r+0x1da>
 80159d8:	08017c8c 	.word	0x08017c8c
 80159dc:	2000e8f4 	.word	0x2000e8f4
 80159e0:	2000e8fc 	.word	0x2000e8fc
 80159e4:	08017c8f 	.word	0x08017c8f
 80159e8:	2000e8f8 	.word	0x2000e8f8
 80159ec:	20000318 	.word	0x20000318
 80159f0:	2000e8e7 	.word	0x2000e8e7
 80159f4:	08017c93 	.word	0x08017c93
 80159f8:	08017cb6 	.word	0x08017cb6
 80159fc:	08017ca2 	.word	0x08017ca2
 8015a00:	08017cb5 	.word	0x08017cb5
 8015a04:	2000e8dc 	.word	0x2000e8dc

08015a08 <_write_r>:
 8015a08:	b538      	push	{r3, r4, r5, lr}
 8015a0a:	4d07      	ldr	r5, [pc, #28]	; (8015a28 <_write_r+0x20>)
 8015a0c:	4604      	mov	r4, r0
 8015a0e:	4608      	mov	r0, r1
 8015a10:	4611      	mov	r1, r2
 8015a12:	2200      	movs	r2, #0
 8015a14:	602a      	str	r2, [r5, #0]
 8015a16:	461a      	mov	r2, r3
 8015a18:	f7ed fbb5 	bl	8003186 <_write>
 8015a1c:	1c43      	adds	r3, r0, #1
 8015a1e:	d102      	bne.n	8015a26 <_write_r+0x1e>
 8015a20:	682b      	ldr	r3, [r5, #0]
 8015a22:	b103      	cbz	r3, 8015a26 <_write_r+0x1e>
 8015a24:	6023      	str	r3, [r4, #0]
 8015a26:	bd38      	pop	{r3, r4, r5, pc}
 8015a28:	2000e8d8 	.word	0x2000e8d8

08015a2c <__assert_func>:
 8015a2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015a2e:	4614      	mov	r4, r2
 8015a30:	461a      	mov	r2, r3
 8015a32:	4b09      	ldr	r3, [pc, #36]	; (8015a58 <__assert_func+0x2c>)
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	4605      	mov	r5, r0
 8015a38:	68d8      	ldr	r0, [r3, #12]
 8015a3a:	b14c      	cbz	r4, 8015a50 <__assert_func+0x24>
 8015a3c:	4b07      	ldr	r3, [pc, #28]	; (8015a5c <__assert_func+0x30>)
 8015a3e:	9100      	str	r1, [sp, #0]
 8015a40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015a44:	4906      	ldr	r1, [pc, #24]	; (8015a60 <__assert_func+0x34>)
 8015a46:	462b      	mov	r3, r5
 8015a48:	f000 f8f4 	bl	8015c34 <fiprintf>
 8015a4c:	f000 ff4c 	bl	80168e8 <abort>
 8015a50:	4b04      	ldr	r3, [pc, #16]	; (8015a64 <__assert_func+0x38>)
 8015a52:	461c      	mov	r4, r3
 8015a54:	e7f3      	b.n	8015a3e <__assert_func+0x12>
 8015a56:	bf00      	nop
 8015a58:	200002b4 	.word	0x200002b4
 8015a5c:	08017cc8 	.word	0x08017cc8
 8015a60:	08017cd5 	.word	0x08017cd5
 8015a64:	08017d03 	.word	0x08017d03

08015a68 <_close_r>:
 8015a68:	b538      	push	{r3, r4, r5, lr}
 8015a6a:	4d06      	ldr	r5, [pc, #24]	; (8015a84 <_close_r+0x1c>)
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	4604      	mov	r4, r0
 8015a70:	4608      	mov	r0, r1
 8015a72:	602b      	str	r3, [r5, #0]
 8015a74:	f7ed fba3 	bl	80031be <_close>
 8015a78:	1c43      	adds	r3, r0, #1
 8015a7a:	d102      	bne.n	8015a82 <_close_r+0x1a>
 8015a7c:	682b      	ldr	r3, [r5, #0]
 8015a7e:	b103      	cbz	r3, 8015a82 <_close_r+0x1a>
 8015a80:	6023      	str	r3, [r4, #0]
 8015a82:	bd38      	pop	{r3, r4, r5, pc}
 8015a84:	2000e8d8 	.word	0x2000e8d8

08015a88 <div>:
 8015a88:	2900      	cmp	r1, #0
 8015a8a:	b510      	push	{r4, lr}
 8015a8c:	fb91 f4f2 	sdiv	r4, r1, r2
 8015a90:	fb02 1314 	mls	r3, r2, r4, r1
 8015a94:	db06      	blt.n	8015aa4 <div+0x1c>
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	da01      	bge.n	8015a9e <div+0x16>
 8015a9a:	3401      	adds	r4, #1
 8015a9c:	1a9b      	subs	r3, r3, r2
 8015a9e:	e9c0 4300 	strd	r4, r3, [r0]
 8015aa2:	bd10      	pop	{r4, pc}
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	bfc4      	itt	gt
 8015aa8:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8015aac:	189b      	addgt	r3, r3, r2
 8015aae:	e7f6      	b.n	8015a9e <div+0x16>

08015ab0 <__sflush_r>:
 8015ab0:	898a      	ldrh	r2, [r1, #12]
 8015ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ab6:	4605      	mov	r5, r0
 8015ab8:	0710      	lsls	r0, r2, #28
 8015aba:	460c      	mov	r4, r1
 8015abc:	d458      	bmi.n	8015b70 <__sflush_r+0xc0>
 8015abe:	684b      	ldr	r3, [r1, #4]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	dc05      	bgt.n	8015ad0 <__sflush_r+0x20>
 8015ac4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	dc02      	bgt.n	8015ad0 <__sflush_r+0x20>
 8015aca:	2000      	movs	r0, #0
 8015acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ad0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015ad2:	2e00      	cmp	r6, #0
 8015ad4:	d0f9      	beq.n	8015aca <__sflush_r+0x1a>
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015adc:	682f      	ldr	r7, [r5, #0]
 8015ade:	602b      	str	r3, [r5, #0]
 8015ae0:	d032      	beq.n	8015b48 <__sflush_r+0x98>
 8015ae2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015ae4:	89a3      	ldrh	r3, [r4, #12]
 8015ae6:	075a      	lsls	r2, r3, #29
 8015ae8:	d505      	bpl.n	8015af6 <__sflush_r+0x46>
 8015aea:	6863      	ldr	r3, [r4, #4]
 8015aec:	1ac0      	subs	r0, r0, r3
 8015aee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015af0:	b10b      	cbz	r3, 8015af6 <__sflush_r+0x46>
 8015af2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015af4:	1ac0      	subs	r0, r0, r3
 8015af6:	2300      	movs	r3, #0
 8015af8:	4602      	mov	r2, r0
 8015afa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015afc:	6a21      	ldr	r1, [r4, #32]
 8015afe:	4628      	mov	r0, r5
 8015b00:	47b0      	blx	r6
 8015b02:	1c43      	adds	r3, r0, #1
 8015b04:	89a3      	ldrh	r3, [r4, #12]
 8015b06:	d106      	bne.n	8015b16 <__sflush_r+0x66>
 8015b08:	6829      	ldr	r1, [r5, #0]
 8015b0a:	291d      	cmp	r1, #29
 8015b0c:	d82c      	bhi.n	8015b68 <__sflush_r+0xb8>
 8015b0e:	4a2a      	ldr	r2, [pc, #168]	; (8015bb8 <__sflush_r+0x108>)
 8015b10:	40ca      	lsrs	r2, r1
 8015b12:	07d6      	lsls	r6, r2, #31
 8015b14:	d528      	bpl.n	8015b68 <__sflush_r+0xb8>
 8015b16:	2200      	movs	r2, #0
 8015b18:	6062      	str	r2, [r4, #4]
 8015b1a:	04d9      	lsls	r1, r3, #19
 8015b1c:	6922      	ldr	r2, [r4, #16]
 8015b1e:	6022      	str	r2, [r4, #0]
 8015b20:	d504      	bpl.n	8015b2c <__sflush_r+0x7c>
 8015b22:	1c42      	adds	r2, r0, #1
 8015b24:	d101      	bne.n	8015b2a <__sflush_r+0x7a>
 8015b26:	682b      	ldr	r3, [r5, #0]
 8015b28:	b903      	cbnz	r3, 8015b2c <__sflush_r+0x7c>
 8015b2a:	6560      	str	r0, [r4, #84]	; 0x54
 8015b2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015b2e:	602f      	str	r7, [r5, #0]
 8015b30:	2900      	cmp	r1, #0
 8015b32:	d0ca      	beq.n	8015aca <__sflush_r+0x1a>
 8015b34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015b38:	4299      	cmp	r1, r3
 8015b3a:	d002      	beq.n	8015b42 <__sflush_r+0x92>
 8015b3c:	4628      	mov	r0, r5
 8015b3e:	f7ff fa7d 	bl	801503c <_free_r>
 8015b42:	2000      	movs	r0, #0
 8015b44:	6360      	str	r0, [r4, #52]	; 0x34
 8015b46:	e7c1      	b.n	8015acc <__sflush_r+0x1c>
 8015b48:	6a21      	ldr	r1, [r4, #32]
 8015b4a:	2301      	movs	r3, #1
 8015b4c:	4628      	mov	r0, r5
 8015b4e:	47b0      	blx	r6
 8015b50:	1c41      	adds	r1, r0, #1
 8015b52:	d1c7      	bne.n	8015ae4 <__sflush_r+0x34>
 8015b54:	682b      	ldr	r3, [r5, #0]
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d0c4      	beq.n	8015ae4 <__sflush_r+0x34>
 8015b5a:	2b1d      	cmp	r3, #29
 8015b5c:	d001      	beq.n	8015b62 <__sflush_r+0xb2>
 8015b5e:	2b16      	cmp	r3, #22
 8015b60:	d101      	bne.n	8015b66 <__sflush_r+0xb6>
 8015b62:	602f      	str	r7, [r5, #0]
 8015b64:	e7b1      	b.n	8015aca <__sflush_r+0x1a>
 8015b66:	89a3      	ldrh	r3, [r4, #12]
 8015b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b6c:	81a3      	strh	r3, [r4, #12]
 8015b6e:	e7ad      	b.n	8015acc <__sflush_r+0x1c>
 8015b70:	690f      	ldr	r7, [r1, #16]
 8015b72:	2f00      	cmp	r7, #0
 8015b74:	d0a9      	beq.n	8015aca <__sflush_r+0x1a>
 8015b76:	0793      	lsls	r3, r2, #30
 8015b78:	680e      	ldr	r6, [r1, #0]
 8015b7a:	bf08      	it	eq
 8015b7c:	694b      	ldreq	r3, [r1, #20]
 8015b7e:	600f      	str	r7, [r1, #0]
 8015b80:	bf18      	it	ne
 8015b82:	2300      	movne	r3, #0
 8015b84:	eba6 0807 	sub.w	r8, r6, r7
 8015b88:	608b      	str	r3, [r1, #8]
 8015b8a:	f1b8 0f00 	cmp.w	r8, #0
 8015b8e:	dd9c      	ble.n	8015aca <__sflush_r+0x1a>
 8015b90:	6a21      	ldr	r1, [r4, #32]
 8015b92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015b94:	4643      	mov	r3, r8
 8015b96:	463a      	mov	r2, r7
 8015b98:	4628      	mov	r0, r5
 8015b9a:	47b0      	blx	r6
 8015b9c:	2800      	cmp	r0, #0
 8015b9e:	dc06      	bgt.n	8015bae <__sflush_r+0xfe>
 8015ba0:	89a3      	ldrh	r3, [r4, #12]
 8015ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ba6:	81a3      	strh	r3, [r4, #12]
 8015ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8015bac:	e78e      	b.n	8015acc <__sflush_r+0x1c>
 8015bae:	4407      	add	r7, r0
 8015bb0:	eba8 0800 	sub.w	r8, r8, r0
 8015bb4:	e7e9      	b.n	8015b8a <__sflush_r+0xda>
 8015bb6:	bf00      	nop
 8015bb8:	20400001 	.word	0x20400001

08015bbc <_fflush_r>:
 8015bbc:	b538      	push	{r3, r4, r5, lr}
 8015bbe:	690b      	ldr	r3, [r1, #16]
 8015bc0:	4605      	mov	r5, r0
 8015bc2:	460c      	mov	r4, r1
 8015bc4:	b913      	cbnz	r3, 8015bcc <_fflush_r+0x10>
 8015bc6:	2500      	movs	r5, #0
 8015bc8:	4628      	mov	r0, r5
 8015bca:	bd38      	pop	{r3, r4, r5, pc}
 8015bcc:	b118      	cbz	r0, 8015bd6 <_fflush_r+0x1a>
 8015bce:	6983      	ldr	r3, [r0, #24]
 8015bd0:	b90b      	cbnz	r3, 8015bd6 <_fflush_r+0x1a>
 8015bd2:	f7fe fed3 	bl	801497c <__sinit>
 8015bd6:	4b14      	ldr	r3, [pc, #80]	; (8015c28 <_fflush_r+0x6c>)
 8015bd8:	429c      	cmp	r4, r3
 8015bda:	d11b      	bne.n	8015c14 <_fflush_r+0x58>
 8015bdc:	686c      	ldr	r4, [r5, #4]
 8015bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d0ef      	beq.n	8015bc6 <_fflush_r+0xa>
 8015be6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015be8:	07d0      	lsls	r0, r2, #31
 8015bea:	d404      	bmi.n	8015bf6 <_fflush_r+0x3a>
 8015bec:	0599      	lsls	r1, r3, #22
 8015bee:	d402      	bmi.n	8015bf6 <_fflush_r+0x3a>
 8015bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015bf2:	f7fe ff87 	bl	8014b04 <__retarget_lock_acquire_recursive>
 8015bf6:	4628      	mov	r0, r5
 8015bf8:	4621      	mov	r1, r4
 8015bfa:	f7ff ff59 	bl	8015ab0 <__sflush_r>
 8015bfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015c00:	07da      	lsls	r2, r3, #31
 8015c02:	4605      	mov	r5, r0
 8015c04:	d4e0      	bmi.n	8015bc8 <_fflush_r+0xc>
 8015c06:	89a3      	ldrh	r3, [r4, #12]
 8015c08:	059b      	lsls	r3, r3, #22
 8015c0a:	d4dd      	bmi.n	8015bc8 <_fflush_r+0xc>
 8015c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015c0e:	f7fe ff7b 	bl	8014b08 <__retarget_lock_release_recursive>
 8015c12:	e7d9      	b.n	8015bc8 <_fflush_r+0xc>
 8015c14:	4b05      	ldr	r3, [pc, #20]	; (8015c2c <_fflush_r+0x70>)
 8015c16:	429c      	cmp	r4, r3
 8015c18:	d101      	bne.n	8015c1e <_fflush_r+0x62>
 8015c1a:	68ac      	ldr	r4, [r5, #8]
 8015c1c:	e7df      	b.n	8015bde <_fflush_r+0x22>
 8015c1e:	4b04      	ldr	r3, [pc, #16]	; (8015c30 <_fflush_r+0x74>)
 8015c20:	429c      	cmp	r4, r3
 8015c22:	bf08      	it	eq
 8015c24:	68ec      	ldreq	r4, [r5, #12]
 8015c26:	e7da      	b.n	8015bde <_fflush_r+0x22>
 8015c28:	08017b74 	.word	0x08017b74
 8015c2c:	08017b94 	.word	0x08017b94
 8015c30:	08017b54 	.word	0x08017b54

08015c34 <fiprintf>:
 8015c34:	b40e      	push	{r1, r2, r3}
 8015c36:	b503      	push	{r0, r1, lr}
 8015c38:	4601      	mov	r1, r0
 8015c3a:	ab03      	add	r3, sp, #12
 8015c3c:	4805      	ldr	r0, [pc, #20]	; (8015c54 <fiprintf+0x20>)
 8015c3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c42:	6800      	ldr	r0, [r0, #0]
 8015c44:	9301      	str	r3, [sp, #4]
 8015c46:	f000 f9f3 	bl	8016030 <_vfiprintf_r>
 8015c4a:	b002      	add	sp, #8
 8015c4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015c50:	b003      	add	sp, #12
 8015c52:	4770      	bx	lr
 8015c54:	200002b4 	.word	0x200002b4

08015c58 <_findenv_r>:
 8015c58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c5c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8015ccc <_findenv_r+0x74>
 8015c60:	4607      	mov	r7, r0
 8015c62:	4689      	mov	r9, r1
 8015c64:	4616      	mov	r6, r2
 8015c66:	f000 fe47 	bl	80168f8 <__env_lock>
 8015c6a:	f8da 4000 	ldr.w	r4, [sl]
 8015c6e:	b134      	cbz	r4, 8015c7e <_findenv_r+0x26>
 8015c70:	464b      	mov	r3, r9
 8015c72:	4698      	mov	r8, r3
 8015c74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015c78:	b13a      	cbz	r2, 8015c8a <_findenv_r+0x32>
 8015c7a:	2a3d      	cmp	r2, #61	; 0x3d
 8015c7c:	d1f9      	bne.n	8015c72 <_findenv_r+0x1a>
 8015c7e:	4638      	mov	r0, r7
 8015c80:	f000 fe40 	bl	8016904 <__env_unlock>
 8015c84:	2000      	movs	r0, #0
 8015c86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c8a:	eba8 0809 	sub.w	r8, r8, r9
 8015c8e:	46a3      	mov	fp, r4
 8015c90:	f854 0b04 	ldr.w	r0, [r4], #4
 8015c94:	2800      	cmp	r0, #0
 8015c96:	d0f2      	beq.n	8015c7e <_findenv_r+0x26>
 8015c98:	4642      	mov	r2, r8
 8015c9a:	4649      	mov	r1, r9
 8015c9c:	f000 fcd2 	bl	8016644 <strncmp>
 8015ca0:	2800      	cmp	r0, #0
 8015ca2:	d1f4      	bne.n	8015c8e <_findenv_r+0x36>
 8015ca4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015ca8:	eb03 0508 	add.w	r5, r3, r8
 8015cac:	f813 3008 	ldrb.w	r3, [r3, r8]
 8015cb0:	2b3d      	cmp	r3, #61	; 0x3d
 8015cb2:	d1ec      	bne.n	8015c8e <_findenv_r+0x36>
 8015cb4:	f8da 3000 	ldr.w	r3, [sl]
 8015cb8:	ebab 0303 	sub.w	r3, fp, r3
 8015cbc:	109b      	asrs	r3, r3, #2
 8015cbe:	4638      	mov	r0, r7
 8015cc0:	6033      	str	r3, [r6, #0]
 8015cc2:	f000 fe1f 	bl	8016904 <__env_unlock>
 8015cc6:	1c68      	adds	r0, r5, #1
 8015cc8:	e7dd      	b.n	8015c86 <_findenv_r+0x2e>
 8015cca:	bf00      	nop
 8015ccc:	20000230 	.word	0x20000230

08015cd0 <_getenv_r>:
 8015cd0:	b507      	push	{r0, r1, r2, lr}
 8015cd2:	aa01      	add	r2, sp, #4
 8015cd4:	f7ff ffc0 	bl	8015c58 <_findenv_r>
 8015cd8:	b003      	add	sp, #12
 8015cda:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08015ce0 <__gettzinfo>:
 8015ce0:	4800      	ldr	r0, [pc, #0]	; (8015ce4 <__gettzinfo+0x4>)
 8015ce2:	4770      	bx	lr
 8015ce4:	20000320 	.word	0x20000320

08015ce8 <_lseek_r>:
 8015ce8:	b538      	push	{r3, r4, r5, lr}
 8015cea:	4d07      	ldr	r5, [pc, #28]	; (8015d08 <_lseek_r+0x20>)
 8015cec:	4604      	mov	r4, r0
 8015cee:	4608      	mov	r0, r1
 8015cf0:	4611      	mov	r1, r2
 8015cf2:	2200      	movs	r2, #0
 8015cf4:	602a      	str	r2, [r5, #0]
 8015cf6:	461a      	mov	r2, r3
 8015cf8:	f7ed fa88 	bl	800320c <_lseek>
 8015cfc:	1c43      	adds	r3, r0, #1
 8015cfe:	d102      	bne.n	8015d06 <_lseek_r+0x1e>
 8015d00:	682b      	ldr	r3, [r5, #0]
 8015d02:	b103      	cbz	r3, 8015d06 <_lseek_r+0x1e>
 8015d04:	6023      	str	r3, [r4, #0]
 8015d06:	bd38      	pop	{r3, r4, r5, pc}
 8015d08:	2000e8d8 	.word	0x2000e8d8

08015d0c <__malloc_lock>:
 8015d0c:	4801      	ldr	r0, [pc, #4]	; (8015d14 <__malloc_lock+0x8>)
 8015d0e:	f7fe bef9 	b.w	8014b04 <__retarget_lock_acquire_recursive>
 8015d12:	bf00      	nop
 8015d14:	2000e8c9 	.word	0x2000e8c9

08015d18 <__malloc_unlock>:
 8015d18:	4801      	ldr	r0, [pc, #4]	; (8015d20 <__malloc_unlock+0x8>)
 8015d1a:	f7fe bef5 	b.w	8014b08 <__retarget_lock_release_recursive>
 8015d1e:	bf00      	nop
 8015d20:	2000e8c9 	.word	0x2000e8c9

08015d24 <__ssputs_r>:
 8015d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d28:	688e      	ldr	r6, [r1, #8]
 8015d2a:	429e      	cmp	r6, r3
 8015d2c:	4682      	mov	sl, r0
 8015d2e:	460c      	mov	r4, r1
 8015d30:	4690      	mov	r8, r2
 8015d32:	461f      	mov	r7, r3
 8015d34:	d838      	bhi.n	8015da8 <__ssputs_r+0x84>
 8015d36:	898a      	ldrh	r2, [r1, #12]
 8015d38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015d3c:	d032      	beq.n	8015da4 <__ssputs_r+0x80>
 8015d3e:	6825      	ldr	r5, [r4, #0]
 8015d40:	6909      	ldr	r1, [r1, #16]
 8015d42:	eba5 0901 	sub.w	r9, r5, r1
 8015d46:	6965      	ldr	r5, [r4, #20]
 8015d48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015d4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015d50:	3301      	adds	r3, #1
 8015d52:	444b      	add	r3, r9
 8015d54:	106d      	asrs	r5, r5, #1
 8015d56:	429d      	cmp	r5, r3
 8015d58:	bf38      	it	cc
 8015d5a:	461d      	movcc	r5, r3
 8015d5c:	0553      	lsls	r3, r2, #21
 8015d5e:	d531      	bpl.n	8015dc4 <__ssputs_r+0xa0>
 8015d60:	4629      	mov	r1, r5
 8015d62:	f7ff f9d7 	bl	8015114 <_malloc_r>
 8015d66:	4606      	mov	r6, r0
 8015d68:	b950      	cbnz	r0, 8015d80 <__ssputs_r+0x5c>
 8015d6a:	230c      	movs	r3, #12
 8015d6c:	f8ca 3000 	str.w	r3, [sl]
 8015d70:	89a3      	ldrh	r3, [r4, #12]
 8015d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015d76:	81a3      	strh	r3, [r4, #12]
 8015d78:	f04f 30ff 	mov.w	r0, #4294967295
 8015d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d80:	6921      	ldr	r1, [r4, #16]
 8015d82:	464a      	mov	r2, r9
 8015d84:	f7fe fed2 	bl	8014b2c <memcpy>
 8015d88:	89a3      	ldrh	r3, [r4, #12]
 8015d8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d92:	81a3      	strh	r3, [r4, #12]
 8015d94:	6126      	str	r6, [r4, #16]
 8015d96:	6165      	str	r5, [r4, #20]
 8015d98:	444e      	add	r6, r9
 8015d9a:	eba5 0509 	sub.w	r5, r5, r9
 8015d9e:	6026      	str	r6, [r4, #0]
 8015da0:	60a5      	str	r5, [r4, #8]
 8015da2:	463e      	mov	r6, r7
 8015da4:	42be      	cmp	r6, r7
 8015da6:	d900      	bls.n	8015daa <__ssputs_r+0x86>
 8015da8:	463e      	mov	r6, r7
 8015daa:	6820      	ldr	r0, [r4, #0]
 8015dac:	4632      	mov	r2, r6
 8015dae:	4641      	mov	r1, r8
 8015db0:	f000 fe14 	bl	80169dc <memmove>
 8015db4:	68a3      	ldr	r3, [r4, #8]
 8015db6:	1b9b      	subs	r3, r3, r6
 8015db8:	60a3      	str	r3, [r4, #8]
 8015dba:	6823      	ldr	r3, [r4, #0]
 8015dbc:	4433      	add	r3, r6
 8015dbe:	6023      	str	r3, [r4, #0]
 8015dc0:	2000      	movs	r0, #0
 8015dc2:	e7db      	b.n	8015d7c <__ssputs_r+0x58>
 8015dc4:	462a      	mov	r2, r5
 8015dc6:	f000 fe23 	bl	8016a10 <_realloc_r>
 8015dca:	4606      	mov	r6, r0
 8015dcc:	2800      	cmp	r0, #0
 8015dce:	d1e1      	bne.n	8015d94 <__ssputs_r+0x70>
 8015dd0:	6921      	ldr	r1, [r4, #16]
 8015dd2:	4650      	mov	r0, sl
 8015dd4:	f7ff f932 	bl	801503c <_free_r>
 8015dd8:	e7c7      	b.n	8015d6a <__ssputs_r+0x46>
	...

08015ddc <_svfiprintf_r>:
 8015ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015de0:	4698      	mov	r8, r3
 8015de2:	898b      	ldrh	r3, [r1, #12]
 8015de4:	061b      	lsls	r3, r3, #24
 8015de6:	b09d      	sub	sp, #116	; 0x74
 8015de8:	4607      	mov	r7, r0
 8015dea:	460d      	mov	r5, r1
 8015dec:	4614      	mov	r4, r2
 8015dee:	d50e      	bpl.n	8015e0e <_svfiprintf_r+0x32>
 8015df0:	690b      	ldr	r3, [r1, #16]
 8015df2:	b963      	cbnz	r3, 8015e0e <_svfiprintf_r+0x32>
 8015df4:	2140      	movs	r1, #64	; 0x40
 8015df6:	f7ff f98d 	bl	8015114 <_malloc_r>
 8015dfa:	6028      	str	r0, [r5, #0]
 8015dfc:	6128      	str	r0, [r5, #16]
 8015dfe:	b920      	cbnz	r0, 8015e0a <_svfiprintf_r+0x2e>
 8015e00:	230c      	movs	r3, #12
 8015e02:	603b      	str	r3, [r7, #0]
 8015e04:	f04f 30ff 	mov.w	r0, #4294967295
 8015e08:	e0d1      	b.n	8015fae <_svfiprintf_r+0x1d2>
 8015e0a:	2340      	movs	r3, #64	; 0x40
 8015e0c:	616b      	str	r3, [r5, #20]
 8015e0e:	2300      	movs	r3, #0
 8015e10:	9309      	str	r3, [sp, #36]	; 0x24
 8015e12:	2320      	movs	r3, #32
 8015e14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015e18:	f8cd 800c 	str.w	r8, [sp, #12]
 8015e1c:	2330      	movs	r3, #48	; 0x30
 8015e1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015fc8 <_svfiprintf_r+0x1ec>
 8015e22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015e26:	f04f 0901 	mov.w	r9, #1
 8015e2a:	4623      	mov	r3, r4
 8015e2c:	469a      	mov	sl, r3
 8015e2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e32:	b10a      	cbz	r2, 8015e38 <_svfiprintf_r+0x5c>
 8015e34:	2a25      	cmp	r2, #37	; 0x25
 8015e36:	d1f9      	bne.n	8015e2c <_svfiprintf_r+0x50>
 8015e38:	ebba 0b04 	subs.w	fp, sl, r4
 8015e3c:	d00b      	beq.n	8015e56 <_svfiprintf_r+0x7a>
 8015e3e:	465b      	mov	r3, fp
 8015e40:	4622      	mov	r2, r4
 8015e42:	4629      	mov	r1, r5
 8015e44:	4638      	mov	r0, r7
 8015e46:	f7ff ff6d 	bl	8015d24 <__ssputs_r>
 8015e4a:	3001      	adds	r0, #1
 8015e4c:	f000 80aa 	beq.w	8015fa4 <_svfiprintf_r+0x1c8>
 8015e50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015e52:	445a      	add	r2, fp
 8015e54:	9209      	str	r2, [sp, #36]	; 0x24
 8015e56:	f89a 3000 	ldrb.w	r3, [sl]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	f000 80a2 	beq.w	8015fa4 <_svfiprintf_r+0x1c8>
 8015e60:	2300      	movs	r3, #0
 8015e62:	f04f 32ff 	mov.w	r2, #4294967295
 8015e66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015e6a:	f10a 0a01 	add.w	sl, sl, #1
 8015e6e:	9304      	str	r3, [sp, #16]
 8015e70:	9307      	str	r3, [sp, #28]
 8015e72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015e76:	931a      	str	r3, [sp, #104]	; 0x68
 8015e78:	4654      	mov	r4, sl
 8015e7a:	2205      	movs	r2, #5
 8015e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e80:	4851      	ldr	r0, [pc, #324]	; (8015fc8 <_svfiprintf_r+0x1ec>)
 8015e82:	f7ea f9bd 	bl	8000200 <memchr>
 8015e86:	9a04      	ldr	r2, [sp, #16]
 8015e88:	b9d8      	cbnz	r0, 8015ec2 <_svfiprintf_r+0xe6>
 8015e8a:	06d0      	lsls	r0, r2, #27
 8015e8c:	bf44      	itt	mi
 8015e8e:	2320      	movmi	r3, #32
 8015e90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015e94:	0711      	lsls	r1, r2, #28
 8015e96:	bf44      	itt	mi
 8015e98:	232b      	movmi	r3, #43	; 0x2b
 8015e9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015e9e:	f89a 3000 	ldrb.w	r3, [sl]
 8015ea2:	2b2a      	cmp	r3, #42	; 0x2a
 8015ea4:	d015      	beq.n	8015ed2 <_svfiprintf_r+0xf6>
 8015ea6:	9a07      	ldr	r2, [sp, #28]
 8015ea8:	4654      	mov	r4, sl
 8015eaa:	2000      	movs	r0, #0
 8015eac:	f04f 0c0a 	mov.w	ip, #10
 8015eb0:	4621      	mov	r1, r4
 8015eb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015eb6:	3b30      	subs	r3, #48	; 0x30
 8015eb8:	2b09      	cmp	r3, #9
 8015eba:	d94e      	bls.n	8015f5a <_svfiprintf_r+0x17e>
 8015ebc:	b1b0      	cbz	r0, 8015eec <_svfiprintf_r+0x110>
 8015ebe:	9207      	str	r2, [sp, #28]
 8015ec0:	e014      	b.n	8015eec <_svfiprintf_r+0x110>
 8015ec2:	eba0 0308 	sub.w	r3, r0, r8
 8015ec6:	fa09 f303 	lsl.w	r3, r9, r3
 8015eca:	4313      	orrs	r3, r2
 8015ecc:	9304      	str	r3, [sp, #16]
 8015ece:	46a2      	mov	sl, r4
 8015ed0:	e7d2      	b.n	8015e78 <_svfiprintf_r+0x9c>
 8015ed2:	9b03      	ldr	r3, [sp, #12]
 8015ed4:	1d19      	adds	r1, r3, #4
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	9103      	str	r1, [sp, #12]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	bfbb      	ittet	lt
 8015ede:	425b      	neglt	r3, r3
 8015ee0:	f042 0202 	orrlt.w	r2, r2, #2
 8015ee4:	9307      	strge	r3, [sp, #28]
 8015ee6:	9307      	strlt	r3, [sp, #28]
 8015ee8:	bfb8      	it	lt
 8015eea:	9204      	strlt	r2, [sp, #16]
 8015eec:	7823      	ldrb	r3, [r4, #0]
 8015eee:	2b2e      	cmp	r3, #46	; 0x2e
 8015ef0:	d10c      	bne.n	8015f0c <_svfiprintf_r+0x130>
 8015ef2:	7863      	ldrb	r3, [r4, #1]
 8015ef4:	2b2a      	cmp	r3, #42	; 0x2a
 8015ef6:	d135      	bne.n	8015f64 <_svfiprintf_r+0x188>
 8015ef8:	9b03      	ldr	r3, [sp, #12]
 8015efa:	1d1a      	adds	r2, r3, #4
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	9203      	str	r2, [sp, #12]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	bfb8      	it	lt
 8015f04:	f04f 33ff 	movlt.w	r3, #4294967295
 8015f08:	3402      	adds	r4, #2
 8015f0a:	9305      	str	r3, [sp, #20]
 8015f0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015fd8 <_svfiprintf_r+0x1fc>
 8015f10:	7821      	ldrb	r1, [r4, #0]
 8015f12:	2203      	movs	r2, #3
 8015f14:	4650      	mov	r0, sl
 8015f16:	f7ea f973 	bl	8000200 <memchr>
 8015f1a:	b140      	cbz	r0, 8015f2e <_svfiprintf_r+0x152>
 8015f1c:	2340      	movs	r3, #64	; 0x40
 8015f1e:	eba0 000a 	sub.w	r0, r0, sl
 8015f22:	fa03 f000 	lsl.w	r0, r3, r0
 8015f26:	9b04      	ldr	r3, [sp, #16]
 8015f28:	4303      	orrs	r3, r0
 8015f2a:	3401      	adds	r4, #1
 8015f2c:	9304      	str	r3, [sp, #16]
 8015f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f32:	4826      	ldr	r0, [pc, #152]	; (8015fcc <_svfiprintf_r+0x1f0>)
 8015f34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015f38:	2206      	movs	r2, #6
 8015f3a:	f7ea f961 	bl	8000200 <memchr>
 8015f3e:	2800      	cmp	r0, #0
 8015f40:	d038      	beq.n	8015fb4 <_svfiprintf_r+0x1d8>
 8015f42:	4b23      	ldr	r3, [pc, #140]	; (8015fd0 <_svfiprintf_r+0x1f4>)
 8015f44:	bb1b      	cbnz	r3, 8015f8e <_svfiprintf_r+0x1b2>
 8015f46:	9b03      	ldr	r3, [sp, #12]
 8015f48:	3307      	adds	r3, #7
 8015f4a:	f023 0307 	bic.w	r3, r3, #7
 8015f4e:	3308      	adds	r3, #8
 8015f50:	9303      	str	r3, [sp, #12]
 8015f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f54:	4433      	add	r3, r6
 8015f56:	9309      	str	r3, [sp, #36]	; 0x24
 8015f58:	e767      	b.n	8015e2a <_svfiprintf_r+0x4e>
 8015f5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8015f5e:	460c      	mov	r4, r1
 8015f60:	2001      	movs	r0, #1
 8015f62:	e7a5      	b.n	8015eb0 <_svfiprintf_r+0xd4>
 8015f64:	2300      	movs	r3, #0
 8015f66:	3401      	adds	r4, #1
 8015f68:	9305      	str	r3, [sp, #20]
 8015f6a:	4619      	mov	r1, r3
 8015f6c:	f04f 0c0a 	mov.w	ip, #10
 8015f70:	4620      	mov	r0, r4
 8015f72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015f76:	3a30      	subs	r2, #48	; 0x30
 8015f78:	2a09      	cmp	r2, #9
 8015f7a:	d903      	bls.n	8015f84 <_svfiprintf_r+0x1a8>
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d0c5      	beq.n	8015f0c <_svfiprintf_r+0x130>
 8015f80:	9105      	str	r1, [sp, #20]
 8015f82:	e7c3      	b.n	8015f0c <_svfiprintf_r+0x130>
 8015f84:	fb0c 2101 	mla	r1, ip, r1, r2
 8015f88:	4604      	mov	r4, r0
 8015f8a:	2301      	movs	r3, #1
 8015f8c:	e7f0      	b.n	8015f70 <_svfiprintf_r+0x194>
 8015f8e:	ab03      	add	r3, sp, #12
 8015f90:	9300      	str	r3, [sp, #0]
 8015f92:	462a      	mov	r2, r5
 8015f94:	4b0f      	ldr	r3, [pc, #60]	; (8015fd4 <_svfiprintf_r+0x1f8>)
 8015f96:	a904      	add	r1, sp, #16
 8015f98:	4638      	mov	r0, r7
 8015f9a:	f3af 8000 	nop.w
 8015f9e:	1c42      	adds	r2, r0, #1
 8015fa0:	4606      	mov	r6, r0
 8015fa2:	d1d6      	bne.n	8015f52 <_svfiprintf_r+0x176>
 8015fa4:	89ab      	ldrh	r3, [r5, #12]
 8015fa6:	065b      	lsls	r3, r3, #25
 8015fa8:	f53f af2c 	bmi.w	8015e04 <_svfiprintf_r+0x28>
 8015fac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015fae:	b01d      	add	sp, #116	; 0x74
 8015fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fb4:	ab03      	add	r3, sp, #12
 8015fb6:	9300      	str	r3, [sp, #0]
 8015fb8:	462a      	mov	r2, r5
 8015fba:	4b06      	ldr	r3, [pc, #24]	; (8015fd4 <_svfiprintf_r+0x1f8>)
 8015fbc:	a904      	add	r1, sp, #16
 8015fbe:	4638      	mov	r0, r7
 8015fc0:	f000 f9d4 	bl	801636c <_printf_i>
 8015fc4:	e7eb      	b.n	8015f9e <_svfiprintf_r+0x1c2>
 8015fc6:	bf00      	nop
 8015fc8:	08017e68 	.word	0x08017e68
 8015fcc:	08017e72 	.word	0x08017e72
 8015fd0:	00000000 	.word	0x00000000
 8015fd4:	08015d25 	.word	0x08015d25
 8015fd8:	08017e6e 	.word	0x08017e6e

08015fdc <__sfputc_r>:
 8015fdc:	6893      	ldr	r3, [r2, #8]
 8015fde:	3b01      	subs	r3, #1
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	b410      	push	{r4}
 8015fe4:	6093      	str	r3, [r2, #8]
 8015fe6:	da08      	bge.n	8015ffa <__sfputc_r+0x1e>
 8015fe8:	6994      	ldr	r4, [r2, #24]
 8015fea:	42a3      	cmp	r3, r4
 8015fec:	db01      	blt.n	8015ff2 <__sfputc_r+0x16>
 8015fee:	290a      	cmp	r1, #10
 8015ff0:	d103      	bne.n	8015ffa <__sfputc_r+0x1e>
 8015ff2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ff6:	f000 bbb7 	b.w	8016768 <__swbuf_r>
 8015ffa:	6813      	ldr	r3, [r2, #0]
 8015ffc:	1c58      	adds	r0, r3, #1
 8015ffe:	6010      	str	r0, [r2, #0]
 8016000:	7019      	strb	r1, [r3, #0]
 8016002:	4608      	mov	r0, r1
 8016004:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016008:	4770      	bx	lr

0801600a <__sfputs_r>:
 801600a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801600c:	4606      	mov	r6, r0
 801600e:	460f      	mov	r7, r1
 8016010:	4614      	mov	r4, r2
 8016012:	18d5      	adds	r5, r2, r3
 8016014:	42ac      	cmp	r4, r5
 8016016:	d101      	bne.n	801601c <__sfputs_r+0x12>
 8016018:	2000      	movs	r0, #0
 801601a:	e007      	b.n	801602c <__sfputs_r+0x22>
 801601c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016020:	463a      	mov	r2, r7
 8016022:	4630      	mov	r0, r6
 8016024:	f7ff ffda 	bl	8015fdc <__sfputc_r>
 8016028:	1c43      	adds	r3, r0, #1
 801602a:	d1f3      	bne.n	8016014 <__sfputs_r+0xa>
 801602c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016030 <_vfiprintf_r>:
 8016030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016034:	460d      	mov	r5, r1
 8016036:	b09d      	sub	sp, #116	; 0x74
 8016038:	4614      	mov	r4, r2
 801603a:	4698      	mov	r8, r3
 801603c:	4606      	mov	r6, r0
 801603e:	b118      	cbz	r0, 8016048 <_vfiprintf_r+0x18>
 8016040:	6983      	ldr	r3, [r0, #24]
 8016042:	b90b      	cbnz	r3, 8016048 <_vfiprintf_r+0x18>
 8016044:	f7fe fc9a 	bl	801497c <__sinit>
 8016048:	4b89      	ldr	r3, [pc, #548]	; (8016270 <_vfiprintf_r+0x240>)
 801604a:	429d      	cmp	r5, r3
 801604c:	d11b      	bne.n	8016086 <_vfiprintf_r+0x56>
 801604e:	6875      	ldr	r5, [r6, #4]
 8016050:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016052:	07d9      	lsls	r1, r3, #31
 8016054:	d405      	bmi.n	8016062 <_vfiprintf_r+0x32>
 8016056:	89ab      	ldrh	r3, [r5, #12]
 8016058:	059a      	lsls	r2, r3, #22
 801605a:	d402      	bmi.n	8016062 <_vfiprintf_r+0x32>
 801605c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801605e:	f7fe fd51 	bl	8014b04 <__retarget_lock_acquire_recursive>
 8016062:	89ab      	ldrh	r3, [r5, #12]
 8016064:	071b      	lsls	r3, r3, #28
 8016066:	d501      	bpl.n	801606c <_vfiprintf_r+0x3c>
 8016068:	692b      	ldr	r3, [r5, #16]
 801606a:	b9eb      	cbnz	r3, 80160a8 <_vfiprintf_r+0x78>
 801606c:	4629      	mov	r1, r5
 801606e:	4630      	mov	r0, r6
 8016070:	f000 fbcc 	bl	801680c <__swsetup_r>
 8016074:	b1c0      	cbz	r0, 80160a8 <_vfiprintf_r+0x78>
 8016076:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016078:	07dc      	lsls	r4, r3, #31
 801607a:	d50e      	bpl.n	801609a <_vfiprintf_r+0x6a>
 801607c:	f04f 30ff 	mov.w	r0, #4294967295
 8016080:	b01d      	add	sp, #116	; 0x74
 8016082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016086:	4b7b      	ldr	r3, [pc, #492]	; (8016274 <_vfiprintf_r+0x244>)
 8016088:	429d      	cmp	r5, r3
 801608a:	d101      	bne.n	8016090 <_vfiprintf_r+0x60>
 801608c:	68b5      	ldr	r5, [r6, #8]
 801608e:	e7df      	b.n	8016050 <_vfiprintf_r+0x20>
 8016090:	4b79      	ldr	r3, [pc, #484]	; (8016278 <_vfiprintf_r+0x248>)
 8016092:	429d      	cmp	r5, r3
 8016094:	bf08      	it	eq
 8016096:	68f5      	ldreq	r5, [r6, #12]
 8016098:	e7da      	b.n	8016050 <_vfiprintf_r+0x20>
 801609a:	89ab      	ldrh	r3, [r5, #12]
 801609c:	0598      	lsls	r0, r3, #22
 801609e:	d4ed      	bmi.n	801607c <_vfiprintf_r+0x4c>
 80160a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80160a2:	f7fe fd31 	bl	8014b08 <__retarget_lock_release_recursive>
 80160a6:	e7e9      	b.n	801607c <_vfiprintf_r+0x4c>
 80160a8:	2300      	movs	r3, #0
 80160aa:	9309      	str	r3, [sp, #36]	; 0x24
 80160ac:	2320      	movs	r3, #32
 80160ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80160b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80160b6:	2330      	movs	r3, #48	; 0x30
 80160b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801627c <_vfiprintf_r+0x24c>
 80160bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80160c0:	f04f 0901 	mov.w	r9, #1
 80160c4:	4623      	mov	r3, r4
 80160c6:	469a      	mov	sl, r3
 80160c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80160cc:	b10a      	cbz	r2, 80160d2 <_vfiprintf_r+0xa2>
 80160ce:	2a25      	cmp	r2, #37	; 0x25
 80160d0:	d1f9      	bne.n	80160c6 <_vfiprintf_r+0x96>
 80160d2:	ebba 0b04 	subs.w	fp, sl, r4
 80160d6:	d00b      	beq.n	80160f0 <_vfiprintf_r+0xc0>
 80160d8:	465b      	mov	r3, fp
 80160da:	4622      	mov	r2, r4
 80160dc:	4629      	mov	r1, r5
 80160de:	4630      	mov	r0, r6
 80160e0:	f7ff ff93 	bl	801600a <__sfputs_r>
 80160e4:	3001      	adds	r0, #1
 80160e6:	f000 80aa 	beq.w	801623e <_vfiprintf_r+0x20e>
 80160ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80160ec:	445a      	add	r2, fp
 80160ee:	9209      	str	r2, [sp, #36]	; 0x24
 80160f0:	f89a 3000 	ldrb.w	r3, [sl]
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	f000 80a2 	beq.w	801623e <_vfiprintf_r+0x20e>
 80160fa:	2300      	movs	r3, #0
 80160fc:	f04f 32ff 	mov.w	r2, #4294967295
 8016100:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016104:	f10a 0a01 	add.w	sl, sl, #1
 8016108:	9304      	str	r3, [sp, #16]
 801610a:	9307      	str	r3, [sp, #28]
 801610c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016110:	931a      	str	r3, [sp, #104]	; 0x68
 8016112:	4654      	mov	r4, sl
 8016114:	2205      	movs	r2, #5
 8016116:	f814 1b01 	ldrb.w	r1, [r4], #1
 801611a:	4858      	ldr	r0, [pc, #352]	; (801627c <_vfiprintf_r+0x24c>)
 801611c:	f7ea f870 	bl	8000200 <memchr>
 8016120:	9a04      	ldr	r2, [sp, #16]
 8016122:	b9d8      	cbnz	r0, 801615c <_vfiprintf_r+0x12c>
 8016124:	06d1      	lsls	r1, r2, #27
 8016126:	bf44      	itt	mi
 8016128:	2320      	movmi	r3, #32
 801612a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801612e:	0713      	lsls	r3, r2, #28
 8016130:	bf44      	itt	mi
 8016132:	232b      	movmi	r3, #43	; 0x2b
 8016134:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016138:	f89a 3000 	ldrb.w	r3, [sl]
 801613c:	2b2a      	cmp	r3, #42	; 0x2a
 801613e:	d015      	beq.n	801616c <_vfiprintf_r+0x13c>
 8016140:	9a07      	ldr	r2, [sp, #28]
 8016142:	4654      	mov	r4, sl
 8016144:	2000      	movs	r0, #0
 8016146:	f04f 0c0a 	mov.w	ip, #10
 801614a:	4621      	mov	r1, r4
 801614c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016150:	3b30      	subs	r3, #48	; 0x30
 8016152:	2b09      	cmp	r3, #9
 8016154:	d94e      	bls.n	80161f4 <_vfiprintf_r+0x1c4>
 8016156:	b1b0      	cbz	r0, 8016186 <_vfiprintf_r+0x156>
 8016158:	9207      	str	r2, [sp, #28]
 801615a:	e014      	b.n	8016186 <_vfiprintf_r+0x156>
 801615c:	eba0 0308 	sub.w	r3, r0, r8
 8016160:	fa09 f303 	lsl.w	r3, r9, r3
 8016164:	4313      	orrs	r3, r2
 8016166:	9304      	str	r3, [sp, #16]
 8016168:	46a2      	mov	sl, r4
 801616a:	e7d2      	b.n	8016112 <_vfiprintf_r+0xe2>
 801616c:	9b03      	ldr	r3, [sp, #12]
 801616e:	1d19      	adds	r1, r3, #4
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	9103      	str	r1, [sp, #12]
 8016174:	2b00      	cmp	r3, #0
 8016176:	bfbb      	ittet	lt
 8016178:	425b      	neglt	r3, r3
 801617a:	f042 0202 	orrlt.w	r2, r2, #2
 801617e:	9307      	strge	r3, [sp, #28]
 8016180:	9307      	strlt	r3, [sp, #28]
 8016182:	bfb8      	it	lt
 8016184:	9204      	strlt	r2, [sp, #16]
 8016186:	7823      	ldrb	r3, [r4, #0]
 8016188:	2b2e      	cmp	r3, #46	; 0x2e
 801618a:	d10c      	bne.n	80161a6 <_vfiprintf_r+0x176>
 801618c:	7863      	ldrb	r3, [r4, #1]
 801618e:	2b2a      	cmp	r3, #42	; 0x2a
 8016190:	d135      	bne.n	80161fe <_vfiprintf_r+0x1ce>
 8016192:	9b03      	ldr	r3, [sp, #12]
 8016194:	1d1a      	adds	r2, r3, #4
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	9203      	str	r2, [sp, #12]
 801619a:	2b00      	cmp	r3, #0
 801619c:	bfb8      	it	lt
 801619e:	f04f 33ff 	movlt.w	r3, #4294967295
 80161a2:	3402      	adds	r4, #2
 80161a4:	9305      	str	r3, [sp, #20]
 80161a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801628c <_vfiprintf_r+0x25c>
 80161aa:	7821      	ldrb	r1, [r4, #0]
 80161ac:	2203      	movs	r2, #3
 80161ae:	4650      	mov	r0, sl
 80161b0:	f7ea f826 	bl	8000200 <memchr>
 80161b4:	b140      	cbz	r0, 80161c8 <_vfiprintf_r+0x198>
 80161b6:	2340      	movs	r3, #64	; 0x40
 80161b8:	eba0 000a 	sub.w	r0, r0, sl
 80161bc:	fa03 f000 	lsl.w	r0, r3, r0
 80161c0:	9b04      	ldr	r3, [sp, #16]
 80161c2:	4303      	orrs	r3, r0
 80161c4:	3401      	adds	r4, #1
 80161c6:	9304      	str	r3, [sp, #16]
 80161c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161cc:	482c      	ldr	r0, [pc, #176]	; (8016280 <_vfiprintf_r+0x250>)
 80161ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80161d2:	2206      	movs	r2, #6
 80161d4:	f7ea f814 	bl	8000200 <memchr>
 80161d8:	2800      	cmp	r0, #0
 80161da:	d03f      	beq.n	801625c <_vfiprintf_r+0x22c>
 80161dc:	4b29      	ldr	r3, [pc, #164]	; (8016284 <_vfiprintf_r+0x254>)
 80161de:	bb1b      	cbnz	r3, 8016228 <_vfiprintf_r+0x1f8>
 80161e0:	9b03      	ldr	r3, [sp, #12]
 80161e2:	3307      	adds	r3, #7
 80161e4:	f023 0307 	bic.w	r3, r3, #7
 80161e8:	3308      	adds	r3, #8
 80161ea:	9303      	str	r3, [sp, #12]
 80161ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161ee:	443b      	add	r3, r7
 80161f0:	9309      	str	r3, [sp, #36]	; 0x24
 80161f2:	e767      	b.n	80160c4 <_vfiprintf_r+0x94>
 80161f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80161f8:	460c      	mov	r4, r1
 80161fa:	2001      	movs	r0, #1
 80161fc:	e7a5      	b.n	801614a <_vfiprintf_r+0x11a>
 80161fe:	2300      	movs	r3, #0
 8016200:	3401      	adds	r4, #1
 8016202:	9305      	str	r3, [sp, #20]
 8016204:	4619      	mov	r1, r3
 8016206:	f04f 0c0a 	mov.w	ip, #10
 801620a:	4620      	mov	r0, r4
 801620c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016210:	3a30      	subs	r2, #48	; 0x30
 8016212:	2a09      	cmp	r2, #9
 8016214:	d903      	bls.n	801621e <_vfiprintf_r+0x1ee>
 8016216:	2b00      	cmp	r3, #0
 8016218:	d0c5      	beq.n	80161a6 <_vfiprintf_r+0x176>
 801621a:	9105      	str	r1, [sp, #20]
 801621c:	e7c3      	b.n	80161a6 <_vfiprintf_r+0x176>
 801621e:	fb0c 2101 	mla	r1, ip, r1, r2
 8016222:	4604      	mov	r4, r0
 8016224:	2301      	movs	r3, #1
 8016226:	e7f0      	b.n	801620a <_vfiprintf_r+0x1da>
 8016228:	ab03      	add	r3, sp, #12
 801622a:	9300      	str	r3, [sp, #0]
 801622c:	462a      	mov	r2, r5
 801622e:	4b16      	ldr	r3, [pc, #88]	; (8016288 <_vfiprintf_r+0x258>)
 8016230:	a904      	add	r1, sp, #16
 8016232:	4630      	mov	r0, r6
 8016234:	f3af 8000 	nop.w
 8016238:	4607      	mov	r7, r0
 801623a:	1c78      	adds	r0, r7, #1
 801623c:	d1d6      	bne.n	80161ec <_vfiprintf_r+0x1bc>
 801623e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016240:	07d9      	lsls	r1, r3, #31
 8016242:	d405      	bmi.n	8016250 <_vfiprintf_r+0x220>
 8016244:	89ab      	ldrh	r3, [r5, #12]
 8016246:	059a      	lsls	r2, r3, #22
 8016248:	d402      	bmi.n	8016250 <_vfiprintf_r+0x220>
 801624a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801624c:	f7fe fc5c 	bl	8014b08 <__retarget_lock_release_recursive>
 8016250:	89ab      	ldrh	r3, [r5, #12]
 8016252:	065b      	lsls	r3, r3, #25
 8016254:	f53f af12 	bmi.w	801607c <_vfiprintf_r+0x4c>
 8016258:	9809      	ldr	r0, [sp, #36]	; 0x24
 801625a:	e711      	b.n	8016080 <_vfiprintf_r+0x50>
 801625c:	ab03      	add	r3, sp, #12
 801625e:	9300      	str	r3, [sp, #0]
 8016260:	462a      	mov	r2, r5
 8016262:	4b09      	ldr	r3, [pc, #36]	; (8016288 <_vfiprintf_r+0x258>)
 8016264:	a904      	add	r1, sp, #16
 8016266:	4630      	mov	r0, r6
 8016268:	f000 f880 	bl	801636c <_printf_i>
 801626c:	e7e4      	b.n	8016238 <_vfiprintf_r+0x208>
 801626e:	bf00      	nop
 8016270:	08017b74 	.word	0x08017b74
 8016274:	08017b94 	.word	0x08017b94
 8016278:	08017b54 	.word	0x08017b54
 801627c:	08017e68 	.word	0x08017e68
 8016280:	08017e72 	.word	0x08017e72
 8016284:	00000000 	.word	0x00000000
 8016288:	0801600b 	.word	0x0801600b
 801628c:	08017e6e 	.word	0x08017e6e

08016290 <_printf_common>:
 8016290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016294:	4616      	mov	r6, r2
 8016296:	4699      	mov	r9, r3
 8016298:	688a      	ldr	r2, [r1, #8]
 801629a:	690b      	ldr	r3, [r1, #16]
 801629c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80162a0:	4293      	cmp	r3, r2
 80162a2:	bfb8      	it	lt
 80162a4:	4613      	movlt	r3, r2
 80162a6:	6033      	str	r3, [r6, #0]
 80162a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80162ac:	4607      	mov	r7, r0
 80162ae:	460c      	mov	r4, r1
 80162b0:	b10a      	cbz	r2, 80162b6 <_printf_common+0x26>
 80162b2:	3301      	adds	r3, #1
 80162b4:	6033      	str	r3, [r6, #0]
 80162b6:	6823      	ldr	r3, [r4, #0]
 80162b8:	0699      	lsls	r1, r3, #26
 80162ba:	bf42      	ittt	mi
 80162bc:	6833      	ldrmi	r3, [r6, #0]
 80162be:	3302      	addmi	r3, #2
 80162c0:	6033      	strmi	r3, [r6, #0]
 80162c2:	6825      	ldr	r5, [r4, #0]
 80162c4:	f015 0506 	ands.w	r5, r5, #6
 80162c8:	d106      	bne.n	80162d8 <_printf_common+0x48>
 80162ca:	f104 0a19 	add.w	sl, r4, #25
 80162ce:	68e3      	ldr	r3, [r4, #12]
 80162d0:	6832      	ldr	r2, [r6, #0]
 80162d2:	1a9b      	subs	r3, r3, r2
 80162d4:	42ab      	cmp	r3, r5
 80162d6:	dc26      	bgt.n	8016326 <_printf_common+0x96>
 80162d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80162dc:	1e13      	subs	r3, r2, #0
 80162de:	6822      	ldr	r2, [r4, #0]
 80162e0:	bf18      	it	ne
 80162e2:	2301      	movne	r3, #1
 80162e4:	0692      	lsls	r2, r2, #26
 80162e6:	d42b      	bmi.n	8016340 <_printf_common+0xb0>
 80162e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80162ec:	4649      	mov	r1, r9
 80162ee:	4638      	mov	r0, r7
 80162f0:	47c0      	blx	r8
 80162f2:	3001      	adds	r0, #1
 80162f4:	d01e      	beq.n	8016334 <_printf_common+0xa4>
 80162f6:	6823      	ldr	r3, [r4, #0]
 80162f8:	68e5      	ldr	r5, [r4, #12]
 80162fa:	6832      	ldr	r2, [r6, #0]
 80162fc:	f003 0306 	and.w	r3, r3, #6
 8016300:	2b04      	cmp	r3, #4
 8016302:	bf08      	it	eq
 8016304:	1aad      	subeq	r5, r5, r2
 8016306:	68a3      	ldr	r3, [r4, #8]
 8016308:	6922      	ldr	r2, [r4, #16]
 801630a:	bf0c      	ite	eq
 801630c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016310:	2500      	movne	r5, #0
 8016312:	4293      	cmp	r3, r2
 8016314:	bfc4      	itt	gt
 8016316:	1a9b      	subgt	r3, r3, r2
 8016318:	18ed      	addgt	r5, r5, r3
 801631a:	2600      	movs	r6, #0
 801631c:	341a      	adds	r4, #26
 801631e:	42b5      	cmp	r5, r6
 8016320:	d11a      	bne.n	8016358 <_printf_common+0xc8>
 8016322:	2000      	movs	r0, #0
 8016324:	e008      	b.n	8016338 <_printf_common+0xa8>
 8016326:	2301      	movs	r3, #1
 8016328:	4652      	mov	r2, sl
 801632a:	4649      	mov	r1, r9
 801632c:	4638      	mov	r0, r7
 801632e:	47c0      	blx	r8
 8016330:	3001      	adds	r0, #1
 8016332:	d103      	bne.n	801633c <_printf_common+0xac>
 8016334:	f04f 30ff 	mov.w	r0, #4294967295
 8016338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801633c:	3501      	adds	r5, #1
 801633e:	e7c6      	b.n	80162ce <_printf_common+0x3e>
 8016340:	18e1      	adds	r1, r4, r3
 8016342:	1c5a      	adds	r2, r3, #1
 8016344:	2030      	movs	r0, #48	; 0x30
 8016346:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801634a:	4422      	add	r2, r4
 801634c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016350:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016354:	3302      	adds	r3, #2
 8016356:	e7c7      	b.n	80162e8 <_printf_common+0x58>
 8016358:	2301      	movs	r3, #1
 801635a:	4622      	mov	r2, r4
 801635c:	4649      	mov	r1, r9
 801635e:	4638      	mov	r0, r7
 8016360:	47c0      	blx	r8
 8016362:	3001      	adds	r0, #1
 8016364:	d0e6      	beq.n	8016334 <_printf_common+0xa4>
 8016366:	3601      	adds	r6, #1
 8016368:	e7d9      	b.n	801631e <_printf_common+0x8e>
	...

0801636c <_printf_i>:
 801636c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016370:	7e0f      	ldrb	r7, [r1, #24]
 8016372:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016374:	2f78      	cmp	r7, #120	; 0x78
 8016376:	4691      	mov	r9, r2
 8016378:	4680      	mov	r8, r0
 801637a:	460c      	mov	r4, r1
 801637c:	469a      	mov	sl, r3
 801637e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8016382:	d807      	bhi.n	8016394 <_printf_i+0x28>
 8016384:	2f62      	cmp	r7, #98	; 0x62
 8016386:	d80a      	bhi.n	801639e <_printf_i+0x32>
 8016388:	2f00      	cmp	r7, #0
 801638a:	f000 80d8 	beq.w	801653e <_printf_i+0x1d2>
 801638e:	2f58      	cmp	r7, #88	; 0x58
 8016390:	f000 80a3 	beq.w	80164da <_printf_i+0x16e>
 8016394:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016398:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801639c:	e03a      	b.n	8016414 <_printf_i+0xa8>
 801639e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80163a2:	2b15      	cmp	r3, #21
 80163a4:	d8f6      	bhi.n	8016394 <_printf_i+0x28>
 80163a6:	a101      	add	r1, pc, #4	; (adr r1, 80163ac <_printf_i+0x40>)
 80163a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80163ac:	08016405 	.word	0x08016405
 80163b0:	08016419 	.word	0x08016419
 80163b4:	08016395 	.word	0x08016395
 80163b8:	08016395 	.word	0x08016395
 80163bc:	08016395 	.word	0x08016395
 80163c0:	08016395 	.word	0x08016395
 80163c4:	08016419 	.word	0x08016419
 80163c8:	08016395 	.word	0x08016395
 80163cc:	08016395 	.word	0x08016395
 80163d0:	08016395 	.word	0x08016395
 80163d4:	08016395 	.word	0x08016395
 80163d8:	08016525 	.word	0x08016525
 80163dc:	08016449 	.word	0x08016449
 80163e0:	08016507 	.word	0x08016507
 80163e4:	08016395 	.word	0x08016395
 80163e8:	08016395 	.word	0x08016395
 80163ec:	08016547 	.word	0x08016547
 80163f0:	08016395 	.word	0x08016395
 80163f4:	08016449 	.word	0x08016449
 80163f8:	08016395 	.word	0x08016395
 80163fc:	08016395 	.word	0x08016395
 8016400:	0801650f 	.word	0x0801650f
 8016404:	682b      	ldr	r3, [r5, #0]
 8016406:	1d1a      	adds	r2, r3, #4
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	602a      	str	r2, [r5, #0]
 801640c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016410:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016414:	2301      	movs	r3, #1
 8016416:	e0a3      	b.n	8016560 <_printf_i+0x1f4>
 8016418:	6820      	ldr	r0, [r4, #0]
 801641a:	6829      	ldr	r1, [r5, #0]
 801641c:	0606      	lsls	r6, r0, #24
 801641e:	f101 0304 	add.w	r3, r1, #4
 8016422:	d50a      	bpl.n	801643a <_printf_i+0xce>
 8016424:	680e      	ldr	r6, [r1, #0]
 8016426:	602b      	str	r3, [r5, #0]
 8016428:	2e00      	cmp	r6, #0
 801642a:	da03      	bge.n	8016434 <_printf_i+0xc8>
 801642c:	232d      	movs	r3, #45	; 0x2d
 801642e:	4276      	negs	r6, r6
 8016430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016434:	485e      	ldr	r0, [pc, #376]	; (80165b0 <_printf_i+0x244>)
 8016436:	230a      	movs	r3, #10
 8016438:	e019      	b.n	801646e <_printf_i+0x102>
 801643a:	680e      	ldr	r6, [r1, #0]
 801643c:	602b      	str	r3, [r5, #0]
 801643e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016442:	bf18      	it	ne
 8016444:	b236      	sxthne	r6, r6
 8016446:	e7ef      	b.n	8016428 <_printf_i+0xbc>
 8016448:	682b      	ldr	r3, [r5, #0]
 801644a:	6820      	ldr	r0, [r4, #0]
 801644c:	1d19      	adds	r1, r3, #4
 801644e:	6029      	str	r1, [r5, #0]
 8016450:	0601      	lsls	r1, r0, #24
 8016452:	d501      	bpl.n	8016458 <_printf_i+0xec>
 8016454:	681e      	ldr	r6, [r3, #0]
 8016456:	e002      	b.n	801645e <_printf_i+0xf2>
 8016458:	0646      	lsls	r6, r0, #25
 801645a:	d5fb      	bpl.n	8016454 <_printf_i+0xe8>
 801645c:	881e      	ldrh	r6, [r3, #0]
 801645e:	4854      	ldr	r0, [pc, #336]	; (80165b0 <_printf_i+0x244>)
 8016460:	2f6f      	cmp	r7, #111	; 0x6f
 8016462:	bf0c      	ite	eq
 8016464:	2308      	moveq	r3, #8
 8016466:	230a      	movne	r3, #10
 8016468:	2100      	movs	r1, #0
 801646a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801646e:	6865      	ldr	r5, [r4, #4]
 8016470:	60a5      	str	r5, [r4, #8]
 8016472:	2d00      	cmp	r5, #0
 8016474:	bfa2      	ittt	ge
 8016476:	6821      	ldrge	r1, [r4, #0]
 8016478:	f021 0104 	bicge.w	r1, r1, #4
 801647c:	6021      	strge	r1, [r4, #0]
 801647e:	b90e      	cbnz	r6, 8016484 <_printf_i+0x118>
 8016480:	2d00      	cmp	r5, #0
 8016482:	d04d      	beq.n	8016520 <_printf_i+0x1b4>
 8016484:	4615      	mov	r5, r2
 8016486:	fbb6 f1f3 	udiv	r1, r6, r3
 801648a:	fb03 6711 	mls	r7, r3, r1, r6
 801648e:	5dc7      	ldrb	r7, [r0, r7]
 8016490:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016494:	4637      	mov	r7, r6
 8016496:	42bb      	cmp	r3, r7
 8016498:	460e      	mov	r6, r1
 801649a:	d9f4      	bls.n	8016486 <_printf_i+0x11a>
 801649c:	2b08      	cmp	r3, #8
 801649e:	d10b      	bne.n	80164b8 <_printf_i+0x14c>
 80164a0:	6823      	ldr	r3, [r4, #0]
 80164a2:	07de      	lsls	r6, r3, #31
 80164a4:	d508      	bpl.n	80164b8 <_printf_i+0x14c>
 80164a6:	6923      	ldr	r3, [r4, #16]
 80164a8:	6861      	ldr	r1, [r4, #4]
 80164aa:	4299      	cmp	r1, r3
 80164ac:	bfde      	ittt	le
 80164ae:	2330      	movle	r3, #48	; 0x30
 80164b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80164b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80164b8:	1b52      	subs	r2, r2, r5
 80164ba:	6122      	str	r2, [r4, #16]
 80164bc:	f8cd a000 	str.w	sl, [sp]
 80164c0:	464b      	mov	r3, r9
 80164c2:	aa03      	add	r2, sp, #12
 80164c4:	4621      	mov	r1, r4
 80164c6:	4640      	mov	r0, r8
 80164c8:	f7ff fee2 	bl	8016290 <_printf_common>
 80164cc:	3001      	adds	r0, #1
 80164ce:	d14c      	bne.n	801656a <_printf_i+0x1fe>
 80164d0:	f04f 30ff 	mov.w	r0, #4294967295
 80164d4:	b004      	add	sp, #16
 80164d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164da:	4835      	ldr	r0, [pc, #212]	; (80165b0 <_printf_i+0x244>)
 80164dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80164e0:	6829      	ldr	r1, [r5, #0]
 80164e2:	6823      	ldr	r3, [r4, #0]
 80164e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80164e8:	6029      	str	r1, [r5, #0]
 80164ea:	061d      	lsls	r5, r3, #24
 80164ec:	d514      	bpl.n	8016518 <_printf_i+0x1ac>
 80164ee:	07df      	lsls	r7, r3, #31
 80164f0:	bf44      	itt	mi
 80164f2:	f043 0320 	orrmi.w	r3, r3, #32
 80164f6:	6023      	strmi	r3, [r4, #0]
 80164f8:	b91e      	cbnz	r6, 8016502 <_printf_i+0x196>
 80164fa:	6823      	ldr	r3, [r4, #0]
 80164fc:	f023 0320 	bic.w	r3, r3, #32
 8016500:	6023      	str	r3, [r4, #0]
 8016502:	2310      	movs	r3, #16
 8016504:	e7b0      	b.n	8016468 <_printf_i+0xfc>
 8016506:	6823      	ldr	r3, [r4, #0]
 8016508:	f043 0320 	orr.w	r3, r3, #32
 801650c:	6023      	str	r3, [r4, #0]
 801650e:	2378      	movs	r3, #120	; 0x78
 8016510:	4828      	ldr	r0, [pc, #160]	; (80165b4 <_printf_i+0x248>)
 8016512:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016516:	e7e3      	b.n	80164e0 <_printf_i+0x174>
 8016518:	0659      	lsls	r1, r3, #25
 801651a:	bf48      	it	mi
 801651c:	b2b6      	uxthmi	r6, r6
 801651e:	e7e6      	b.n	80164ee <_printf_i+0x182>
 8016520:	4615      	mov	r5, r2
 8016522:	e7bb      	b.n	801649c <_printf_i+0x130>
 8016524:	682b      	ldr	r3, [r5, #0]
 8016526:	6826      	ldr	r6, [r4, #0]
 8016528:	6961      	ldr	r1, [r4, #20]
 801652a:	1d18      	adds	r0, r3, #4
 801652c:	6028      	str	r0, [r5, #0]
 801652e:	0635      	lsls	r5, r6, #24
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	d501      	bpl.n	8016538 <_printf_i+0x1cc>
 8016534:	6019      	str	r1, [r3, #0]
 8016536:	e002      	b.n	801653e <_printf_i+0x1d2>
 8016538:	0670      	lsls	r0, r6, #25
 801653a:	d5fb      	bpl.n	8016534 <_printf_i+0x1c8>
 801653c:	8019      	strh	r1, [r3, #0]
 801653e:	2300      	movs	r3, #0
 8016540:	6123      	str	r3, [r4, #16]
 8016542:	4615      	mov	r5, r2
 8016544:	e7ba      	b.n	80164bc <_printf_i+0x150>
 8016546:	682b      	ldr	r3, [r5, #0]
 8016548:	1d1a      	adds	r2, r3, #4
 801654a:	602a      	str	r2, [r5, #0]
 801654c:	681d      	ldr	r5, [r3, #0]
 801654e:	6862      	ldr	r2, [r4, #4]
 8016550:	2100      	movs	r1, #0
 8016552:	4628      	mov	r0, r5
 8016554:	f7e9 fe54 	bl	8000200 <memchr>
 8016558:	b108      	cbz	r0, 801655e <_printf_i+0x1f2>
 801655a:	1b40      	subs	r0, r0, r5
 801655c:	6060      	str	r0, [r4, #4]
 801655e:	6863      	ldr	r3, [r4, #4]
 8016560:	6123      	str	r3, [r4, #16]
 8016562:	2300      	movs	r3, #0
 8016564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016568:	e7a8      	b.n	80164bc <_printf_i+0x150>
 801656a:	6923      	ldr	r3, [r4, #16]
 801656c:	462a      	mov	r2, r5
 801656e:	4649      	mov	r1, r9
 8016570:	4640      	mov	r0, r8
 8016572:	47d0      	blx	sl
 8016574:	3001      	adds	r0, #1
 8016576:	d0ab      	beq.n	80164d0 <_printf_i+0x164>
 8016578:	6823      	ldr	r3, [r4, #0]
 801657a:	079b      	lsls	r3, r3, #30
 801657c:	d413      	bmi.n	80165a6 <_printf_i+0x23a>
 801657e:	68e0      	ldr	r0, [r4, #12]
 8016580:	9b03      	ldr	r3, [sp, #12]
 8016582:	4298      	cmp	r0, r3
 8016584:	bfb8      	it	lt
 8016586:	4618      	movlt	r0, r3
 8016588:	e7a4      	b.n	80164d4 <_printf_i+0x168>
 801658a:	2301      	movs	r3, #1
 801658c:	4632      	mov	r2, r6
 801658e:	4649      	mov	r1, r9
 8016590:	4640      	mov	r0, r8
 8016592:	47d0      	blx	sl
 8016594:	3001      	adds	r0, #1
 8016596:	d09b      	beq.n	80164d0 <_printf_i+0x164>
 8016598:	3501      	adds	r5, #1
 801659a:	68e3      	ldr	r3, [r4, #12]
 801659c:	9903      	ldr	r1, [sp, #12]
 801659e:	1a5b      	subs	r3, r3, r1
 80165a0:	42ab      	cmp	r3, r5
 80165a2:	dcf2      	bgt.n	801658a <_printf_i+0x21e>
 80165a4:	e7eb      	b.n	801657e <_printf_i+0x212>
 80165a6:	2500      	movs	r5, #0
 80165a8:	f104 0619 	add.w	r6, r4, #25
 80165ac:	e7f5      	b.n	801659a <_printf_i+0x22e>
 80165ae:	bf00      	nop
 80165b0:	08017e79 	.word	0x08017e79
 80165b4:	08017e8a 	.word	0x08017e8a

080165b8 <_read_r>:
 80165b8:	b538      	push	{r3, r4, r5, lr}
 80165ba:	4d07      	ldr	r5, [pc, #28]	; (80165d8 <_read_r+0x20>)
 80165bc:	4604      	mov	r4, r0
 80165be:	4608      	mov	r0, r1
 80165c0:	4611      	mov	r1, r2
 80165c2:	2200      	movs	r2, #0
 80165c4:	602a      	str	r2, [r5, #0]
 80165c6:	461a      	mov	r2, r3
 80165c8:	f7ec fdc0 	bl	800314c <_read>
 80165cc:	1c43      	adds	r3, r0, #1
 80165ce:	d102      	bne.n	80165d6 <_read_r+0x1e>
 80165d0:	682b      	ldr	r3, [r5, #0]
 80165d2:	b103      	cbz	r3, 80165d6 <_read_r+0x1e>
 80165d4:	6023      	str	r3, [r4, #0]
 80165d6:	bd38      	pop	{r3, r4, r5, pc}
 80165d8:	2000e8d8 	.word	0x2000e8d8

080165dc <siscanf>:
 80165dc:	b40e      	push	{r1, r2, r3}
 80165de:	b510      	push	{r4, lr}
 80165e0:	b09f      	sub	sp, #124	; 0x7c
 80165e2:	ac21      	add	r4, sp, #132	; 0x84
 80165e4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80165e8:	f854 2b04 	ldr.w	r2, [r4], #4
 80165ec:	9201      	str	r2, [sp, #4]
 80165ee:	f8ad 101c 	strh.w	r1, [sp, #28]
 80165f2:	9004      	str	r0, [sp, #16]
 80165f4:	9008      	str	r0, [sp, #32]
 80165f6:	f7e9 fdf5 	bl	80001e4 <strlen>
 80165fa:	4b0c      	ldr	r3, [pc, #48]	; (801662c <siscanf+0x50>)
 80165fc:	9005      	str	r0, [sp, #20]
 80165fe:	9009      	str	r0, [sp, #36]	; 0x24
 8016600:	930d      	str	r3, [sp, #52]	; 0x34
 8016602:	480b      	ldr	r0, [pc, #44]	; (8016630 <siscanf+0x54>)
 8016604:	9a01      	ldr	r2, [sp, #4]
 8016606:	6800      	ldr	r0, [r0, #0]
 8016608:	9403      	str	r4, [sp, #12]
 801660a:	2300      	movs	r3, #0
 801660c:	9311      	str	r3, [sp, #68]	; 0x44
 801660e:	9316      	str	r3, [sp, #88]	; 0x58
 8016610:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016614:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016618:	a904      	add	r1, sp, #16
 801661a:	4623      	mov	r3, r4
 801661c:	f000 fa82 	bl	8016b24 <__ssvfiscanf_r>
 8016620:	b01f      	add	sp, #124	; 0x7c
 8016622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016626:	b003      	add	sp, #12
 8016628:	4770      	bx	lr
 801662a:	bf00      	nop
 801662c:	08015353 	.word	0x08015353
 8016630:	200002b4 	.word	0x200002b4

08016634 <strcpy>:
 8016634:	4603      	mov	r3, r0
 8016636:	f811 2b01 	ldrb.w	r2, [r1], #1
 801663a:	f803 2b01 	strb.w	r2, [r3], #1
 801663e:	2a00      	cmp	r2, #0
 8016640:	d1f9      	bne.n	8016636 <strcpy+0x2>
 8016642:	4770      	bx	lr

08016644 <strncmp>:
 8016644:	b510      	push	{r4, lr}
 8016646:	b17a      	cbz	r2, 8016668 <strncmp+0x24>
 8016648:	4603      	mov	r3, r0
 801664a:	3901      	subs	r1, #1
 801664c:	1884      	adds	r4, r0, r2
 801664e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016652:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016656:	4290      	cmp	r0, r2
 8016658:	d101      	bne.n	801665e <strncmp+0x1a>
 801665a:	42a3      	cmp	r3, r4
 801665c:	d101      	bne.n	8016662 <strncmp+0x1e>
 801665e:	1a80      	subs	r0, r0, r2
 8016660:	bd10      	pop	{r4, pc}
 8016662:	2800      	cmp	r0, #0
 8016664:	d1f3      	bne.n	801664e <strncmp+0xa>
 8016666:	e7fa      	b.n	801665e <strncmp+0x1a>
 8016668:	4610      	mov	r0, r2
 801666a:	e7f9      	b.n	8016660 <strncmp+0x1c>

0801666c <_strtoul_l.constprop.0>:
 801666c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016670:	4f36      	ldr	r7, [pc, #216]	; (801674c <_strtoul_l.constprop.0+0xe0>)
 8016672:	4686      	mov	lr, r0
 8016674:	460d      	mov	r5, r1
 8016676:	4628      	mov	r0, r5
 8016678:	f815 4b01 	ldrb.w	r4, [r5], #1
 801667c:	5de6      	ldrb	r6, [r4, r7]
 801667e:	f016 0608 	ands.w	r6, r6, #8
 8016682:	d1f8      	bne.n	8016676 <_strtoul_l.constprop.0+0xa>
 8016684:	2c2d      	cmp	r4, #45	; 0x2d
 8016686:	d12f      	bne.n	80166e8 <_strtoul_l.constprop.0+0x7c>
 8016688:	782c      	ldrb	r4, [r5, #0]
 801668a:	2601      	movs	r6, #1
 801668c:	1c85      	adds	r5, r0, #2
 801668e:	2b00      	cmp	r3, #0
 8016690:	d057      	beq.n	8016742 <_strtoul_l.constprop.0+0xd6>
 8016692:	2b10      	cmp	r3, #16
 8016694:	d109      	bne.n	80166aa <_strtoul_l.constprop.0+0x3e>
 8016696:	2c30      	cmp	r4, #48	; 0x30
 8016698:	d107      	bne.n	80166aa <_strtoul_l.constprop.0+0x3e>
 801669a:	7828      	ldrb	r0, [r5, #0]
 801669c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80166a0:	2858      	cmp	r0, #88	; 0x58
 80166a2:	d149      	bne.n	8016738 <_strtoul_l.constprop.0+0xcc>
 80166a4:	786c      	ldrb	r4, [r5, #1]
 80166a6:	2310      	movs	r3, #16
 80166a8:	3502      	adds	r5, #2
 80166aa:	f04f 38ff 	mov.w	r8, #4294967295
 80166ae:	2700      	movs	r7, #0
 80166b0:	fbb8 f8f3 	udiv	r8, r8, r3
 80166b4:	fb03 f908 	mul.w	r9, r3, r8
 80166b8:	ea6f 0909 	mvn.w	r9, r9
 80166bc:	4638      	mov	r0, r7
 80166be:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80166c2:	f1bc 0f09 	cmp.w	ip, #9
 80166c6:	d814      	bhi.n	80166f2 <_strtoul_l.constprop.0+0x86>
 80166c8:	4664      	mov	r4, ip
 80166ca:	42a3      	cmp	r3, r4
 80166cc:	dd22      	ble.n	8016714 <_strtoul_l.constprop.0+0xa8>
 80166ce:	2f00      	cmp	r7, #0
 80166d0:	db1d      	blt.n	801670e <_strtoul_l.constprop.0+0xa2>
 80166d2:	4580      	cmp	r8, r0
 80166d4:	d31b      	bcc.n	801670e <_strtoul_l.constprop.0+0xa2>
 80166d6:	d101      	bne.n	80166dc <_strtoul_l.constprop.0+0x70>
 80166d8:	45a1      	cmp	r9, r4
 80166da:	db18      	blt.n	801670e <_strtoul_l.constprop.0+0xa2>
 80166dc:	fb00 4003 	mla	r0, r0, r3, r4
 80166e0:	2701      	movs	r7, #1
 80166e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80166e6:	e7ea      	b.n	80166be <_strtoul_l.constprop.0+0x52>
 80166e8:	2c2b      	cmp	r4, #43	; 0x2b
 80166ea:	bf04      	itt	eq
 80166ec:	782c      	ldrbeq	r4, [r5, #0]
 80166ee:	1c85      	addeq	r5, r0, #2
 80166f0:	e7cd      	b.n	801668e <_strtoul_l.constprop.0+0x22>
 80166f2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80166f6:	f1bc 0f19 	cmp.w	ip, #25
 80166fa:	d801      	bhi.n	8016700 <_strtoul_l.constprop.0+0x94>
 80166fc:	3c37      	subs	r4, #55	; 0x37
 80166fe:	e7e4      	b.n	80166ca <_strtoul_l.constprop.0+0x5e>
 8016700:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8016704:	f1bc 0f19 	cmp.w	ip, #25
 8016708:	d804      	bhi.n	8016714 <_strtoul_l.constprop.0+0xa8>
 801670a:	3c57      	subs	r4, #87	; 0x57
 801670c:	e7dd      	b.n	80166ca <_strtoul_l.constprop.0+0x5e>
 801670e:	f04f 37ff 	mov.w	r7, #4294967295
 8016712:	e7e6      	b.n	80166e2 <_strtoul_l.constprop.0+0x76>
 8016714:	2f00      	cmp	r7, #0
 8016716:	da07      	bge.n	8016728 <_strtoul_l.constprop.0+0xbc>
 8016718:	2322      	movs	r3, #34	; 0x22
 801671a:	f8ce 3000 	str.w	r3, [lr]
 801671e:	f04f 30ff 	mov.w	r0, #4294967295
 8016722:	b932      	cbnz	r2, 8016732 <_strtoul_l.constprop.0+0xc6>
 8016724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016728:	b106      	cbz	r6, 801672c <_strtoul_l.constprop.0+0xc0>
 801672a:	4240      	negs	r0, r0
 801672c:	2a00      	cmp	r2, #0
 801672e:	d0f9      	beq.n	8016724 <_strtoul_l.constprop.0+0xb8>
 8016730:	b107      	cbz	r7, 8016734 <_strtoul_l.constprop.0+0xc8>
 8016732:	1e69      	subs	r1, r5, #1
 8016734:	6011      	str	r1, [r2, #0]
 8016736:	e7f5      	b.n	8016724 <_strtoul_l.constprop.0+0xb8>
 8016738:	2430      	movs	r4, #48	; 0x30
 801673a:	2b00      	cmp	r3, #0
 801673c:	d1b5      	bne.n	80166aa <_strtoul_l.constprop.0+0x3e>
 801673e:	2308      	movs	r3, #8
 8016740:	e7b3      	b.n	80166aa <_strtoul_l.constprop.0+0x3e>
 8016742:	2c30      	cmp	r4, #48	; 0x30
 8016744:	d0a9      	beq.n	801669a <_strtoul_l.constprop.0+0x2e>
 8016746:	230a      	movs	r3, #10
 8016748:	e7af      	b.n	80166aa <_strtoul_l.constprop.0+0x3e>
 801674a:	bf00      	nop
 801674c:	08017d05 	.word	0x08017d05

08016750 <_strtoul_r>:
 8016750:	f7ff bf8c 	b.w	801666c <_strtoul_l.constprop.0>

08016754 <strtoul>:
 8016754:	4613      	mov	r3, r2
 8016756:	460a      	mov	r2, r1
 8016758:	4601      	mov	r1, r0
 801675a:	4802      	ldr	r0, [pc, #8]	; (8016764 <strtoul+0x10>)
 801675c:	6800      	ldr	r0, [r0, #0]
 801675e:	f7ff bf85 	b.w	801666c <_strtoul_l.constprop.0>
 8016762:	bf00      	nop
 8016764:	200002b4 	.word	0x200002b4

08016768 <__swbuf_r>:
 8016768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801676a:	460e      	mov	r6, r1
 801676c:	4614      	mov	r4, r2
 801676e:	4605      	mov	r5, r0
 8016770:	b118      	cbz	r0, 801677a <__swbuf_r+0x12>
 8016772:	6983      	ldr	r3, [r0, #24]
 8016774:	b90b      	cbnz	r3, 801677a <__swbuf_r+0x12>
 8016776:	f7fe f901 	bl	801497c <__sinit>
 801677a:	4b21      	ldr	r3, [pc, #132]	; (8016800 <__swbuf_r+0x98>)
 801677c:	429c      	cmp	r4, r3
 801677e:	d12b      	bne.n	80167d8 <__swbuf_r+0x70>
 8016780:	686c      	ldr	r4, [r5, #4]
 8016782:	69a3      	ldr	r3, [r4, #24]
 8016784:	60a3      	str	r3, [r4, #8]
 8016786:	89a3      	ldrh	r3, [r4, #12]
 8016788:	071a      	lsls	r2, r3, #28
 801678a:	d52f      	bpl.n	80167ec <__swbuf_r+0x84>
 801678c:	6923      	ldr	r3, [r4, #16]
 801678e:	b36b      	cbz	r3, 80167ec <__swbuf_r+0x84>
 8016790:	6923      	ldr	r3, [r4, #16]
 8016792:	6820      	ldr	r0, [r4, #0]
 8016794:	1ac0      	subs	r0, r0, r3
 8016796:	6963      	ldr	r3, [r4, #20]
 8016798:	b2f6      	uxtb	r6, r6
 801679a:	4283      	cmp	r3, r0
 801679c:	4637      	mov	r7, r6
 801679e:	dc04      	bgt.n	80167aa <__swbuf_r+0x42>
 80167a0:	4621      	mov	r1, r4
 80167a2:	4628      	mov	r0, r5
 80167a4:	f7ff fa0a 	bl	8015bbc <_fflush_r>
 80167a8:	bb30      	cbnz	r0, 80167f8 <__swbuf_r+0x90>
 80167aa:	68a3      	ldr	r3, [r4, #8]
 80167ac:	3b01      	subs	r3, #1
 80167ae:	60a3      	str	r3, [r4, #8]
 80167b0:	6823      	ldr	r3, [r4, #0]
 80167b2:	1c5a      	adds	r2, r3, #1
 80167b4:	6022      	str	r2, [r4, #0]
 80167b6:	701e      	strb	r6, [r3, #0]
 80167b8:	6963      	ldr	r3, [r4, #20]
 80167ba:	3001      	adds	r0, #1
 80167bc:	4283      	cmp	r3, r0
 80167be:	d004      	beq.n	80167ca <__swbuf_r+0x62>
 80167c0:	89a3      	ldrh	r3, [r4, #12]
 80167c2:	07db      	lsls	r3, r3, #31
 80167c4:	d506      	bpl.n	80167d4 <__swbuf_r+0x6c>
 80167c6:	2e0a      	cmp	r6, #10
 80167c8:	d104      	bne.n	80167d4 <__swbuf_r+0x6c>
 80167ca:	4621      	mov	r1, r4
 80167cc:	4628      	mov	r0, r5
 80167ce:	f7ff f9f5 	bl	8015bbc <_fflush_r>
 80167d2:	b988      	cbnz	r0, 80167f8 <__swbuf_r+0x90>
 80167d4:	4638      	mov	r0, r7
 80167d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167d8:	4b0a      	ldr	r3, [pc, #40]	; (8016804 <__swbuf_r+0x9c>)
 80167da:	429c      	cmp	r4, r3
 80167dc:	d101      	bne.n	80167e2 <__swbuf_r+0x7a>
 80167de:	68ac      	ldr	r4, [r5, #8]
 80167e0:	e7cf      	b.n	8016782 <__swbuf_r+0x1a>
 80167e2:	4b09      	ldr	r3, [pc, #36]	; (8016808 <__swbuf_r+0xa0>)
 80167e4:	429c      	cmp	r4, r3
 80167e6:	bf08      	it	eq
 80167e8:	68ec      	ldreq	r4, [r5, #12]
 80167ea:	e7ca      	b.n	8016782 <__swbuf_r+0x1a>
 80167ec:	4621      	mov	r1, r4
 80167ee:	4628      	mov	r0, r5
 80167f0:	f000 f80c 	bl	801680c <__swsetup_r>
 80167f4:	2800      	cmp	r0, #0
 80167f6:	d0cb      	beq.n	8016790 <__swbuf_r+0x28>
 80167f8:	f04f 37ff 	mov.w	r7, #4294967295
 80167fc:	e7ea      	b.n	80167d4 <__swbuf_r+0x6c>
 80167fe:	bf00      	nop
 8016800:	08017b74 	.word	0x08017b74
 8016804:	08017b94 	.word	0x08017b94
 8016808:	08017b54 	.word	0x08017b54

0801680c <__swsetup_r>:
 801680c:	4b32      	ldr	r3, [pc, #200]	; (80168d8 <__swsetup_r+0xcc>)
 801680e:	b570      	push	{r4, r5, r6, lr}
 8016810:	681d      	ldr	r5, [r3, #0]
 8016812:	4606      	mov	r6, r0
 8016814:	460c      	mov	r4, r1
 8016816:	b125      	cbz	r5, 8016822 <__swsetup_r+0x16>
 8016818:	69ab      	ldr	r3, [r5, #24]
 801681a:	b913      	cbnz	r3, 8016822 <__swsetup_r+0x16>
 801681c:	4628      	mov	r0, r5
 801681e:	f7fe f8ad 	bl	801497c <__sinit>
 8016822:	4b2e      	ldr	r3, [pc, #184]	; (80168dc <__swsetup_r+0xd0>)
 8016824:	429c      	cmp	r4, r3
 8016826:	d10f      	bne.n	8016848 <__swsetup_r+0x3c>
 8016828:	686c      	ldr	r4, [r5, #4]
 801682a:	89a3      	ldrh	r3, [r4, #12]
 801682c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016830:	0719      	lsls	r1, r3, #28
 8016832:	d42c      	bmi.n	801688e <__swsetup_r+0x82>
 8016834:	06dd      	lsls	r5, r3, #27
 8016836:	d411      	bmi.n	801685c <__swsetup_r+0x50>
 8016838:	2309      	movs	r3, #9
 801683a:	6033      	str	r3, [r6, #0]
 801683c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016840:	81a3      	strh	r3, [r4, #12]
 8016842:	f04f 30ff 	mov.w	r0, #4294967295
 8016846:	e03e      	b.n	80168c6 <__swsetup_r+0xba>
 8016848:	4b25      	ldr	r3, [pc, #148]	; (80168e0 <__swsetup_r+0xd4>)
 801684a:	429c      	cmp	r4, r3
 801684c:	d101      	bne.n	8016852 <__swsetup_r+0x46>
 801684e:	68ac      	ldr	r4, [r5, #8]
 8016850:	e7eb      	b.n	801682a <__swsetup_r+0x1e>
 8016852:	4b24      	ldr	r3, [pc, #144]	; (80168e4 <__swsetup_r+0xd8>)
 8016854:	429c      	cmp	r4, r3
 8016856:	bf08      	it	eq
 8016858:	68ec      	ldreq	r4, [r5, #12]
 801685a:	e7e6      	b.n	801682a <__swsetup_r+0x1e>
 801685c:	0758      	lsls	r0, r3, #29
 801685e:	d512      	bpl.n	8016886 <__swsetup_r+0x7a>
 8016860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016862:	b141      	cbz	r1, 8016876 <__swsetup_r+0x6a>
 8016864:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016868:	4299      	cmp	r1, r3
 801686a:	d002      	beq.n	8016872 <__swsetup_r+0x66>
 801686c:	4630      	mov	r0, r6
 801686e:	f7fe fbe5 	bl	801503c <_free_r>
 8016872:	2300      	movs	r3, #0
 8016874:	6363      	str	r3, [r4, #52]	; 0x34
 8016876:	89a3      	ldrh	r3, [r4, #12]
 8016878:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801687c:	81a3      	strh	r3, [r4, #12]
 801687e:	2300      	movs	r3, #0
 8016880:	6063      	str	r3, [r4, #4]
 8016882:	6923      	ldr	r3, [r4, #16]
 8016884:	6023      	str	r3, [r4, #0]
 8016886:	89a3      	ldrh	r3, [r4, #12]
 8016888:	f043 0308 	orr.w	r3, r3, #8
 801688c:	81a3      	strh	r3, [r4, #12]
 801688e:	6923      	ldr	r3, [r4, #16]
 8016890:	b94b      	cbnz	r3, 80168a6 <__swsetup_r+0x9a>
 8016892:	89a3      	ldrh	r3, [r4, #12]
 8016894:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801689c:	d003      	beq.n	80168a6 <__swsetup_r+0x9a>
 801689e:	4621      	mov	r1, r4
 80168a0:	4630      	mov	r0, r6
 80168a2:	f000 f85b 	bl	801695c <__smakebuf_r>
 80168a6:	89a0      	ldrh	r0, [r4, #12]
 80168a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80168ac:	f010 0301 	ands.w	r3, r0, #1
 80168b0:	d00a      	beq.n	80168c8 <__swsetup_r+0xbc>
 80168b2:	2300      	movs	r3, #0
 80168b4:	60a3      	str	r3, [r4, #8]
 80168b6:	6963      	ldr	r3, [r4, #20]
 80168b8:	425b      	negs	r3, r3
 80168ba:	61a3      	str	r3, [r4, #24]
 80168bc:	6923      	ldr	r3, [r4, #16]
 80168be:	b943      	cbnz	r3, 80168d2 <__swsetup_r+0xc6>
 80168c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80168c4:	d1ba      	bne.n	801683c <__swsetup_r+0x30>
 80168c6:	bd70      	pop	{r4, r5, r6, pc}
 80168c8:	0781      	lsls	r1, r0, #30
 80168ca:	bf58      	it	pl
 80168cc:	6963      	ldrpl	r3, [r4, #20]
 80168ce:	60a3      	str	r3, [r4, #8]
 80168d0:	e7f4      	b.n	80168bc <__swsetup_r+0xb0>
 80168d2:	2000      	movs	r0, #0
 80168d4:	e7f7      	b.n	80168c6 <__swsetup_r+0xba>
 80168d6:	bf00      	nop
 80168d8:	200002b4 	.word	0x200002b4
 80168dc:	08017b74 	.word	0x08017b74
 80168e0:	08017b94 	.word	0x08017b94
 80168e4:	08017b54 	.word	0x08017b54

080168e8 <abort>:
 80168e8:	b508      	push	{r3, lr}
 80168ea:	2006      	movs	r0, #6
 80168ec:	f000 fc44 	bl	8017178 <raise>
 80168f0:	2001      	movs	r0, #1
 80168f2:	f7ec fc21 	bl	8003138 <_exit>
	...

080168f8 <__env_lock>:
 80168f8:	4801      	ldr	r0, [pc, #4]	; (8016900 <__env_lock+0x8>)
 80168fa:	f7fe b903 	b.w	8014b04 <__retarget_lock_acquire_recursive>
 80168fe:	bf00      	nop
 8016900:	2000e8c8 	.word	0x2000e8c8

08016904 <__env_unlock>:
 8016904:	4801      	ldr	r0, [pc, #4]	; (801690c <__env_unlock+0x8>)
 8016906:	f7fe b8ff 	b.w	8014b08 <__retarget_lock_release_recursive>
 801690a:	bf00      	nop
 801690c:	2000e8c8 	.word	0x2000e8c8

08016910 <__swhatbuf_r>:
 8016910:	b570      	push	{r4, r5, r6, lr}
 8016912:	460e      	mov	r6, r1
 8016914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016918:	2900      	cmp	r1, #0
 801691a:	b096      	sub	sp, #88	; 0x58
 801691c:	4614      	mov	r4, r2
 801691e:	461d      	mov	r5, r3
 8016920:	da08      	bge.n	8016934 <__swhatbuf_r+0x24>
 8016922:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016926:	2200      	movs	r2, #0
 8016928:	602a      	str	r2, [r5, #0]
 801692a:	061a      	lsls	r2, r3, #24
 801692c:	d410      	bmi.n	8016950 <__swhatbuf_r+0x40>
 801692e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016932:	e00e      	b.n	8016952 <__swhatbuf_r+0x42>
 8016934:	466a      	mov	r2, sp
 8016936:	f000 fc75 	bl	8017224 <_fstat_r>
 801693a:	2800      	cmp	r0, #0
 801693c:	dbf1      	blt.n	8016922 <__swhatbuf_r+0x12>
 801693e:	9a01      	ldr	r2, [sp, #4]
 8016940:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016944:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016948:	425a      	negs	r2, r3
 801694a:	415a      	adcs	r2, r3
 801694c:	602a      	str	r2, [r5, #0]
 801694e:	e7ee      	b.n	801692e <__swhatbuf_r+0x1e>
 8016950:	2340      	movs	r3, #64	; 0x40
 8016952:	2000      	movs	r0, #0
 8016954:	6023      	str	r3, [r4, #0]
 8016956:	b016      	add	sp, #88	; 0x58
 8016958:	bd70      	pop	{r4, r5, r6, pc}
	...

0801695c <__smakebuf_r>:
 801695c:	898b      	ldrh	r3, [r1, #12]
 801695e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016960:	079d      	lsls	r5, r3, #30
 8016962:	4606      	mov	r6, r0
 8016964:	460c      	mov	r4, r1
 8016966:	d507      	bpl.n	8016978 <__smakebuf_r+0x1c>
 8016968:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801696c:	6023      	str	r3, [r4, #0]
 801696e:	6123      	str	r3, [r4, #16]
 8016970:	2301      	movs	r3, #1
 8016972:	6163      	str	r3, [r4, #20]
 8016974:	b002      	add	sp, #8
 8016976:	bd70      	pop	{r4, r5, r6, pc}
 8016978:	ab01      	add	r3, sp, #4
 801697a:	466a      	mov	r2, sp
 801697c:	f7ff ffc8 	bl	8016910 <__swhatbuf_r>
 8016980:	9900      	ldr	r1, [sp, #0]
 8016982:	4605      	mov	r5, r0
 8016984:	4630      	mov	r0, r6
 8016986:	f7fe fbc5 	bl	8015114 <_malloc_r>
 801698a:	b948      	cbnz	r0, 80169a0 <__smakebuf_r+0x44>
 801698c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016990:	059a      	lsls	r2, r3, #22
 8016992:	d4ef      	bmi.n	8016974 <__smakebuf_r+0x18>
 8016994:	f023 0303 	bic.w	r3, r3, #3
 8016998:	f043 0302 	orr.w	r3, r3, #2
 801699c:	81a3      	strh	r3, [r4, #12]
 801699e:	e7e3      	b.n	8016968 <__smakebuf_r+0xc>
 80169a0:	4b0d      	ldr	r3, [pc, #52]	; (80169d8 <__smakebuf_r+0x7c>)
 80169a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80169a4:	89a3      	ldrh	r3, [r4, #12]
 80169a6:	6020      	str	r0, [r4, #0]
 80169a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80169ac:	81a3      	strh	r3, [r4, #12]
 80169ae:	9b00      	ldr	r3, [sp, #0]
 80169b0:	6163      	str	r3, [r4, #20]
 80169b2:	9b01      	ldr	r3, [sp, #4]
 80169b4:	6120      	str	r0, [r4, #16]
 80169b6:	b15b      	cbz	r3, 80169d0 <__smakebuf_r+0x74>
 80169b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80169bc:	4630      	mov	r0, r6
 80169be:	f000 fc43 	bl	8017248 <_isatty_r>
 80169c2:	b128      	cbz	r0, 80169d0 <__smakebuf_r+0x74>
 80169c4:	89a3      	ldrh	r3, [r4, #12]
 80169c6:	f023 0303 	bic.w	r3, r3, #3
 80169ca:	f043 0301 	orr.w	r3, r3, #1
 80169ce:	81a3      	strh	r3, [r4, #12]
 80169d0:	89a0      	ldrh	r0, [r4, #12]
 80169d2:	4305      	orrs	r5, r0
 80169d4:	81a5      	strh	r5, [r4, #12]
 80169d6:	e7cd      	b.n	8016974 <__smakebuf_r+0x18>
 80169d8:	08014915 	.word	0x08014915

080169dc <memmove>:
 80169dc:	4288      	cmp	r0, r1
 80169de:	b510      	push	{r4, lr}
 80169e0:	eb01 0402 	add.w	r4, r1, r2
 80169e4:	d902      	bls.n	80169ec <memmove+0x10>
 80169e6:	4284      	cmp	r4, r0
 80169e8:	4623      	mov	r3, r4
 80169ea:	d807      	bhi.n	80169fc <memmove+0x20>
 80169ec:	1e43      	subs	r3, r0, #1
 80169ee:	42a1      	cmp	r1, r4
 80169f0:	d008      	beq.n	8016a04 <memmove+0x28>
 80169f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80169f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80169fa:	e7f8      	b.n	80169ee <memmove+0x12>
 80169fc:	4402      	add	r2, r0
 80169fe:	4601      	mov	r1, r0
 8016a00:	428a      	cmp	r2, r1
 8016a02:	d100      	bne.n	8016a06 <memmove+0x2a>
 8016a04:	bd10      	pop	{r4, pc}
 8016a06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016a0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016a0e:	e7f7      	b.n	8016a00 <memmove+0x24>

08016a10 <_realloc_r>:
 8016a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a14:	4680      	mov	r8, r0
 8016a16:	4614      	mov	r4, r2
 8016a18:	460e      	mov	r6, r1
 8016a1a:	b921      	cbnz	r1, 8016a26 <_realloc_r+0x16>
 8016a1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a20:	4611      	mov	r1, r2
 8016a22:	f7fe bb77 	b.w	8015114 <_malloc_r>
 8016a26:	b92a      	cbnz	r2, 8016a34 <_realloc_r+0x24>
 8016a28:	f7fe fb08 	bl	801503c <_free_r>
 8016a2c:	4625      	mov	r5, r4
 8016a2e:	4628      	mov	r0, r5
 8016a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a34:	f000 fc18 	bl	8017268 <_malloc_usable_size_r>
 8016a38:	4284      	cmp	r4, r0
 8016a3a:	4607      	mov	r7, r0
 8016a3c:	d802      	bhi.n	8016a44 <_realloc_r+0x34>
 8016a3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016a42:	d812      	bhi.n	8016a6a <_realloc_r+0x5a>
 8016a44:	4621      	mov	r1, r4
 8016a46:	4640      	mov	r0, r8
 8016a48:	f7fe fb64 	bl	8015114 <_malloc_r>
 8016a4c:	4605      	mov	r5, r0
 8016a4e:	2800      	cmp	r0, #0
 8016a50:	d0ed      	beq.n	8016a2e <_realloc_r+0x1e>
 8016a52:	42bc      	cmp	r4, r7
 8016a54:	4622      	mov	r2, r4
 8016a56:	4631      	mov	r1, r6
 8016a58:	bf28      	it	cs
 8016a5a:	463a      	movcs	r2, r7
 8016a5c:	f7fe f866 	bl	8014b2c <memcpy>
 8016a60:	4631      	mov	r1, r6
 8016a62:	4640      	mov	r0, r8
 8016a64:	f7fe faea 	bl	801503c <_free_r>
 8016a68:	e7e1      	b.n	8016a2e <_realloc_r+0x1e>
 8016a6a:	4635      	mov	r5, r6
 8016a6c:	e7df      	b.n	8016a2e <_realloc_r+0x1e>

08016a6e <_sungetc_r>:
 8016a6e:	b538      	push	{r3, r4, r5, lr}
 8016a70:	1c4b      	adds	r3, r1, #1
 8016a72:	4614      	mov	r4, r2
 8016a74:	d103      	bne.n	8016a7e <_sungetc_r+0x10>
 8016a76:	f04f 35ff 	mov.w	r5, #4294967295
 8016a7a:	4628      	mov	r0, r5
 8016a7c:	bd38      	pop	{r3, r4, r5, pc}
 8016a7e:	8993      	ldrh	r3, [r2, #12]
 8016a80:	f023 0320 	bic.w	r3, r3, #32
 8016a84:	8193      	strh	r3, [r2, #12]
 8016a86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016a88:	6852      	ldr	r2, [r2, #4]
 8016a8a:	b2cd      	uxtb	r5, r1
 8016a8c:	b18b      	cbz	r3, 8016ab2 <_sungetc_r+0x44>
 8016a8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016a90:	4293      	cmp	r3, r2
 8016a92:	dd08      	ble.n	8016aa6 <_sungetc_r+0x38>
 8016a94:	6823      	ldr	r3, [r4, #0]
 8016a96:	1e5a      	subs	r2, r3, #1
 8016a98:	6022      	str	r2, [r4, #0]
 8016a9a:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016a9e:	6863      	ldr	r3, [r4, #4]
 8016aa0:	3301      	adds	r3, #1
 8016aa2:	6063      	str	r3, [r4, #4]
 8016aa4:	e7e9      	b.n	8016a7a <_sungetc_r+0xc>
 8016aa6:	4621      	mov	r1, r4
 8016aa8:	f000 fb82 	bl	80171b0 <__submore>
 8016aac:	2800      	cmp	r0, #0
 8016aae:	d0f1      	beq.n	8016a94 <_sungetc_r+0x26>
 8016ab0:	e7e1      	b.n	8016a76 <_sungetc_r+0x8>
 8016ab2:	6921      	ldr	r1, [r4, #16]
 8016ab4:	6823      	ldr	r3, [r4, #0]
 8016ab6:	b151      	cbz	r1, 8016ace <_sungetc_r+0x60>
 8016ab8:	4299      	cmp	r1, r3
 8016aba:	d208      	bcs.n	8016ace <_sungetc_r+0x60>
 8016abc:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016ac0:	42a9      	cmp	r1, r5
 8016ac2:	d104      	bne.n	8016ace <_sungetc_r+0x60>
 8016ac4:	3b01      	subs	r3, #1
 8016ac6:	3201      	adds	r2, #1
 8016ac8:	6023      	str	r3, [r4, #0]
 8016aca:	6062      	str	r2, [r4, #4]
 8016acc:	e7d5      	b.n	8016a7a <_sungetc_r+0xc>
 8016ace:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016ad2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ad6:	6363      	str	r3, [r4, #52]	; 0x34
 8016ad8:	2303      	movs	r3, #3
 8016ada:	63a3      	str	r3, [r4, #56]	; 0x38
 8016adc:	4623      	mov	r3, r4
 8016ade:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016ae2:	6023      	str	r3, [r4, #0]
 8016ae4:	2301      	movs	r3, #1
 8016ae6:	e7dc      	b.n	8016aa2 <_sungetc_r+0x34>

08016ae8 <__ssrefill_r>:
 8016ae8:	b510      	push	{r4, lr}
 8016aea:	460c      	mov	r4, r1
 8016aec:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016aee:	b169      	cbz	r1, 8016b0c <__ssrefill_r+0x24>
 8016af0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016af4:	4299      	cmp	r1, r3
 8016af6:	d001      	beq.n	8016afc <__ssrefill_r+0x14>
 8016af8:	f7fe faa0 	bl	801503c <_free_r>
 8016afc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016afe:	6063      	str	r3, [r4, #4]
 8016b00:	2000      	movs	r0, #0
 8016b02:	6360      	str	r0, [r4, #52]	; 0x34
 8016b04:	b113      	cbz	r3, 8016b0c <__ssrefill_r+0x24>
 8016b06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016b08:	6023      	str	r3, [r4, #0]
 8016b0a:	bd10      	pop	{r4, pc}
 8016b0c:	6923      	ldr	r3, [r4, #16]
 8016b0e:	6023      	str	r3, [r4, #0]
 8016b10:	2300      	movs	r3, #0
 8016b12:	6063      	str	r3, [r4, #4]
 8016b14:	89a3      	ldrh	r3, [r4, #12]
 8016b16:	f043 0320 	orr.w	r3, r3, #32
 8016b1a:	81a3      	strh	r3, [r4, #12]
 8016b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8016b20:	e7f3      	b.n	8016b0a <__ssrefill_r+0x22>
	...

08016b24 <__ssvfiscanf_r>:
 8016b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b28:	460c      	mov	r4, r1
 8016b2a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8016b2e:	2100      	movs	r1, #0
 8016b30:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8016b34:	49a6      	ldr	r1, [pc, #664]	; (8016dd0 <__ssvfiscanf_r+0x2ac>)
 8016b36:	91a0      	str	r1, [sp, #640]	; 0x280
 8016b38:	f10d 0804 	add.w	r8, sp, #4
 8016b3c:	49a5      	ldr	r1, [pc, #660]	; (8016dd4 <__ssvfiscanf_r+0x2b0>)
 8016b3e:	4fa6      	ldr	r7, [pc, #664]	; (8016dd8 <__ssvfiscanf_r+0x2b4>)
 8016b40:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8016ddc <__ssvfiscanf_r+0x2b8>
 8016b44:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016b48:	4606      	mov	r6, r0
 8016b4a:	91a1      	str	r1, [sp, #644]	; 0x284
 8016b4c:	9300      	str	r3, [sp, #0]
 8016b4e:	7813      	ldrb	r3, [r2, #0]
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	f000 815a 	beq.w	8016e0a <__ssvfiscanf_r+0x2e6>
 8016b56:	5dd9      	ldrb	r1, [r3, r7]
 8016b58:	f011 0108 	ands.w	r1, r1, #8
 8016b5c:	f102 0501 	add.w	r5, r2, #1
 8016b60:	d019      	beq.n	8016b96 <__ssvfiscanf_r+0x72>
 8016b62:	6863      	ldr	r3, [r4, #4]
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	dd0f      	ble.n	8016b88 <__ssvfiscanf_r+0x64>
 8016b68:	6823      	ldr	r3, [r4, #0]
 8016b6a:	781a      	ldrb	r2, [r3, #0]
 8016b6c:	5cba      	ldrb	r2, [r7, r2]
 8016b6e:	0712      	lsls	r2, r2, #28
 8016b70:	d401      	bmi.n	8016b76 <__ssvfiscanf_r+0x52>
 8016b72:	462a      	mov	r2, r5
 8016b74:	e7eb      	b.n	8016b4e <__ssvfiscanf_r+0x2a>
 8016b76:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016b78:	3201      	adds	r2, #1
 8016b7a:	9245      	str	r2, [sp, #276]	; 0x114
 8016b7c:	6862      	ldr	r2, [r4, #4]
 8016b7e:	3301      	adds	r3, #1
 8016b80:	3a01      	subs	r2, #1
 8016b82:	6062      	str	r2, [r4, #4]
 8016b84:	6023      	str	r3, [r4, #0]
 8016b86:	e7ec      	b.n	8016b62 <__ssvfiscanf_r+0x3e>
 8016b88:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016b8a:	4621      	mov	r1, r4
 8016b8c:	4630      	mov	r0, r6
 8016b8e:	4798      	blx	r3
 8016b90:	2800      	cmp	r0, #0
 8016b92:	d0e9      	beq.n	8016b68 <__ssvfiscanf_r+0x44>
 8016b94:	e7ed      	b.n	8016b72 <__ssvfiscanf_r+0x4e>
 8016b96:	2b25      	cmp	r3, #37	; 0x25
 8016b98:	d012      	beq.n	8016bc0 <__ssvfiscanf_r+0x9c>
 8016b9a:	469a      	mov	sl, r3
 8016b9c:	6863      	ldr	r3, [r4, #4]
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	f340 8091 	ble.w	8016cc6 <__ssvfiscanf_r+0x1a2>
 8016ba4:	6822      	ldr	r2, [r4, #0]
 8016ba6:	7813      	ldrb	r3, [r2, #0]
 8016ba8:	4553      	cmp	r3, sl
 8016baa:	f040 812e 	bne.w	8016e0a <__ssvfiscanf_r+0x2e6>
 8016bae:	6863      	ldr	r3, [r4, #4]
 8016bb0:	3b01      	subs	r3, #1
 8016bb2:	6063      	str	r3, [r4, #4]
 8016bb4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8016bb6:	3201      	adds	r2, #1
 8016bb8:	3301      	adds	r3, #1
 8016bba:	6022      	str	r2, [r4, #0]
 8016bbc:	9345      	str	r3, [sp, #276]	; 0x114
 8016bbe:	e7d8      	b.n	8016b72 <__ssvfiscanf_r+0x4e>
 8016bc0:	9141      	str	r1, [sp, #260]	; 0x104
 8016bc2:	9143      	str	r1, [sp, #268]	; 0x10c
 8016bc4:	7853      	ldrb	r3, [r2, #1]
 8016bc6:	2b2a      	cmp	r3, #42	; 0x2a
 8016bc8:	bf02      	ittt	eq
 8016bca:	2310      	moveq	r3, #16
 8016bcc:	1c95      	addeq	r5, r2, #2
 8016bce:	9341      	streq	r3, [sp, #260]	; 0x104
 8016bd0:	220a      	movs	r2, #10
 8016bd2:	46aa      	mov	sl, r5
 8016bd4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8016bd8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8016bdc:	2b09      	cmp	r3, #9
 8016bde:	d91d      	bls.n	8016c1c <__ssvfiscanf_r+0xf8>
 8016be0:	487e      	ldr	r0, [pc, #504]	; (8016ddc <__ssvfiscanf_r+0x2b8>)
 8016be2:	2203      	movs	r2, #3
 8016be4:	f7e9 fb0c 	bl	8000200 <memchr>
 8016be8:	b140      	cbz	r0, 8016bfc <__ssvfiscanf_r+0xd8>
 8016bea:	2301      	movs	r3, #1
 8016bec:	eba0 0009 	sub.w	r0, r0, r9
 8016bf0:	fa03 f000 	lsl.w	r0, r3, r0
 8016bf4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016bf6:	4318      	orrs	r0, r3
 8016bf8:	9041      	str	r0, [sp, #260]	; 0x104
 8016bfa:	4655      	mov	r5, sl
 8016bfc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016c00:	2b78      	cmp	r3, #120	; 0x78
 8016c02:	d806      	bhi.n	8016c12 <__ssvfiscanf_r+0xee>
 8016c04:	2b57      	cmp	r3, #87	; 0x57
 8016c06:	d810      	bhi.n	8016c2a <__ssvfiscanf_r+0x106>
 8016c08:	2b25      	cmp	r3, #37	; 0x25
 8016c0a:	d0c6      	beq.n	8016b9a <__ssvfiscanf_r+0x76>
 8016c0c:	d856      	bhi.n	8016cbc <__ssvfiscanf_r+0x198>
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d064      	beq.n	8016cdc <__ssvfiscanf_r+0x1b8>
 8016c12:	2303      	movs	r3, #3
 8016c14:	9347      	str	r3, [sp, #284]	; 0x11c
 8016c16:	230a      	movs	r3, #10
 8016c18:	9342      	str	r3, [sp, #264]	; 0x108
 8016c1a:	e071      	b.n	8016d00 <__ssvfiscanf_r+0x1dc>
 8016c1c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8016c1e:	fb02 1103 	mla	r1, r2, r3, r1
 8016c22:	3930      	subs	r1, #48	; 0x30
 8016c24:	9143      	str	r1, [sp, #268]	; 0x10c
 8016c26:	4655      	mov	r5, sl
 8016c28:	e7d3      	b.n	8016bd2 <__ssvfiscanf_r+0xae>
 8016c2a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8016c2e:	2a20      	cmp	r2, #32
 8016c30:	d8ef      	bhi.n	8016c12 <__ssvfiscanf_r+0xee>
 8016c32:	a101      	add	r1, pc, #4	; (adr r1, 8016c38 <__ssvfiscanf_r+0x114>)
 8016c34:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016c38:	08016ceb 	.word	0x08016ceb
 8016c3c:	08016c13 	.word	0x08016c13
 8016c40:	08016c13 	.word	0x08016c13
 8016c44:	08016d49 	.word	0x08016d49
 8016c48:	08016c13 	.word	0x08016c13
 8016c4c:	08016c13 	.word	0x08016c13
 8016c50:	08016c13 	.word	0x08016c13
 8016c54:	08016c13 	.word	0x08016c13
 8016c58:	08016c13 	.word	0x08016c13
 8016c5c:	08016c13 	.word	0x08016c13
 8016c60:	08016c13 	.word	0x08016c13
 8016c64:	08016d5f 	.word	0x08016d5f
 8016c68:	08016d35 	.word	0x08016d35
 8016c6c:	08016cc3 	.word	0x08016cc3
 8016c70:	08016cc3 	.word	0x08016cc3
 8016c74:	08016cc3 	.word	0x08016cc3
 8016c78:	08016c13 	.word	0x08016c13
 8016c7c:	08016d39 	.word	0x08016d39
 8016c80:	08016c13 	.word	0x08016c13
 8016c84:	08016c13 	.word	0x08016c13
 8016c88:	08016c13 	.word	0x08016c13
 8016c8c:	08016c13 	.word	0x08016c13
 8016c90:	08016d6f 	.word	0x08016d6f
 8016c94:	08016d41 	.word	0x08016d41
 8016c98:	08016ce3 	.word	0x08016ce3
 8016c9c:	08016c13 	.word	0x08016c13
 8016ca0:	08016c13 	.word	0x08016c13
 8016ca4:	08016d6b 	.word	0x08016d6b
 8016ca8:	08016c13 	.word	0x08016c13
 8016cac:	08016d35 	.word	0x08016d35
 8016cb0:	08016c13 	.word	0x08016c13
 8016cb4:	08016c13 	.word	0x08016c13
 8016cb8:	08016ceb 	.word	0x08016ceb
 8016cbc:	3b45      	subs	r3, #69	; 0x45
 8016cbe:	2b02      	cmp	r3, #2
 8016cc0:	d8a7      	bhi.n	8016c12 <__ssvfiscanf_r+0xee>
 8016cc2:	2305      	movs	r3, #5
 8016cc4:	e01b      	b.n	8016cfe <__ssvfiscanf_r+0x1da>
 8016cc6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016cc8:	4621      	mov	r1, r4
 8016cca:	4630      	mov	r0, r6
 8016ccc:	4798      	blx	r3
 8016cce:	2800      	cmp	r0, #0
 8016cd0:	f43f af68 	beq.w	8016ba4 <__ssvfiscanf_r+0x80>
 8016cd4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016cd6:	2800      	cmp	r0, #0
 8016cd8:	f040 808d 	bne.w	8016df6 <__ssvfiscanf_r+0x2d2>
 8016cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8016ce0:	e08f      	b.n	8016e02 <__ssvfiscanf_r+0x2de>
 8016ce2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016ce4:	f042 0220 	orr.w	r2, r2, #32
 8016ce8:	9241      	str	r2, [sp, #260]	; 0x104
 8016cea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016cec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016cf0:	9241      	str	r2, [sp, #260]	; 0x104
 8016cf2:	2210      	movs	r2, #16
 8016cf4:	2b6f      	cmp	r3, #111	; 0x6f
 8016cf6:	9242      	str	r2, [sp, #264]	; 0x108
 8016cf8:	bf34      	ite	cc
 8016cfa:	2303      	movcc	r3, #3
 8016cfc:	2304      	movcs	r3, #4
 8016cfe:	9347      	str	r3, [sp, #284]	; 0x11c
 8016d00:	6863      	ldr	r3, [r4, #4]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	dd42      	ble.n	8016d8c <__ssvfiscanf_r+0x268>
 8016d06:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016d08:	0659      	lsls	r1, r3, #25
 8016d0a:	d404      	bmi.n	8016d16 <__ssvfiscanf_r+0x1f2>
 8016d0c:	6823      	ldr	r3, [r4, #0]
 8016d0e:	781a      	ldrb	r2, [r3, #0]
 8016d10:	5cba      	ldrb	r2, [r7, r2]
 8016d12:	0712      	lsls	r2, r2, #28
 8016d14:	d441      	bmi.n	8016d9a <__ssvfiscanf_r+0x276>
 8016d16:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8016d18:	2b02      	cmp	r3, #2
 8016d1a:	dc50      	bgt.n	8016dbe <__ssvfiscanf_r+0x29a>
 8016d1c:	466b      	mov	r3, sp
 8016d1e:	4622      	mov	r2, r4
 8016d20:	a941      	add	r1, sp, #260	; 0x104
 8016d22:	4630      	mov	r0, r6
 8016d24:	f000 f876 	bl	8016e14 <_scanf_chars>
 8016d28:	2801      	cmp	r0, #1
 8016d2a:	d06e      	beq.n	8016e0a <__ssvfiscanf_r+0x2e6>
 8016d2c:	2802      	cmp	r0, #2
 8016d2e:	f47f af20 	bne.w	8016b72 <__ssvfiscanf_r+0x4e>
 8016d32:	e7cf      	b.n	8016cd4 <__ssvfiscanf_r+0x1b0>
 8016d34:	220a      	movs	r2, #10
 8016d36:	e7dd      	b.n	8016cf4 <__ssvfiscanf_r+0x1d0>
 8016d38:	2300      	movs	r3, #0
 8016d3a:	9342      	str	r3, [sp, #264]	; 0x108
 8016d3c:	2303      	movs	r3, #3
 8016d3e:	e7de      	b.n	8016cfe <__ssvfiscanf_r+0x1da>
 8016d40:	2308      	movs	r3, #8
 8016d42:	9342      	str	r3, [sp, #264]	; 0x108
 8016d44:	2304      	movs	r3, #4
 8016d46:	e7da      	b.n	8016cfe <__ssvfiscanf_r+0x1da>
 8016d48:	4629      	mov	r1, r5
 8016d4a:	4640      	mov	r0, r8
 8016d4c:	f000 f9b4 	bl	80170b8 <__sccl>
 8016d50:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d56:	9341      	str	r3, [sp, #260]	; 0x104
 8016d58:	4605      	mov	r5, r0
 8016d5a:	2301      	movs	r3, #1
 8016d5c:	e7cf      	b.n	8016cfe <__ssvfiscanf_r+0x1da>
 8016d5e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d64:	9341      	str	r3, [sp, #260]	; 0x104
 8016d66:	2300      	movs	r3, #0
 8016d68:	e7c9      	b.n	8016cfe <__ssvfiscanf_r+0x1da>
 8016d6a:	2302      	movs	r3, #2
 8016d6c:	e7c7      	b.n	8016cfe <__ssvfiscanf_r+0x1da>
 8016d6e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8016d70:	06c3      	lsls	r3, r0, #27
 8016d72:	f53f aefe 	bmi.w	8016b72 <__ssvfiscanf_r+0x4e>
 8016d76:	9b00      	ldr	r3, [sp, #0]
 8016d78:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016d7a:	1d19      	adds	r1, r3, #4
 8016d7c:	9100      	str	r1, [sp, #0]
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	f010 0f01 	tst.w	r0, #1
 8016d84:	bf14      	ite	ne
 8016d86:	801a      	strhne	r2, [r3, #0]
 8016d88:	601a      	streq	r2, [r3, #0]
 8016d8a:	e6f2      	b.n	8016b72 <__ssvfiscanf_r+0x4e>
 8016d8c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016d8e:	4621      	mov	r1, r4
 8016d90:	4630      	mov	r0, r6
 8016d92:	4798      	blx	r3
 8016d94:	2800      	cmp	r0, #0
 8016d96:	d0b6      	beq.n	8016d06 <__ssvfiscanf_r+0x1e2>
 8016d98:	e79c      	b.n	8016cd4 <__ssvfiscanf_r+0x1b0>
 8016d9a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016d9c:	3201      	adds	r2, #1
 8016d9e:	9245      	str	r2, [sp, #276]	; 0x114
 8016da0:	6862      	ldr	r2, [r4, #4]
 8016da2:	3a01      	subs	r2, #1
 8016da4:	2a00      	cmp	r2, #0
 8016da6:	6062      	str	r2, [r4, #4]
 8016da8:	dd02      	ble.n	8016db0 <__ssvfiscanf_r+0x28c>
 8016daa:	3301      	adds	r3, #1
 8016dac:	6023      	str	r3, [r4, #0]
 8016dae:	e7ad      	b.n	8016d0c <__ssvfiscanf_r+0x1e8>
 8016db0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016db2:	4621      	mov	r1, r4
 8016db4:	4630      	mov	r0, r6
 8016db6:	4798      	blx	r3
 8016db8:	2800      	cmp	r0, #0
 8016dba:	d0a7      	beq.n	8016d0c <__ssvfiscanf_r+0x1e8>
 8016dbc:	e78a      	b.n	8016cd4 <__ssvfiscanf_r+0x1b0>
 8016dbe:	2b04      	cmp	r3, #4
 8016dc0:	dc0e      	bgt.n	8016de0 <__ssvfiscanf_r+0x2bc>
 8016dc2:	466b      	mov	r3, sp
 8016dc4:	4622      	mov	r2, r4
 8016dc6:	a941      	add	r1, sp, #260	; 0x104
 8016dc8:	4630      	mov	r0, r6
 8016dca:	f000 f87d 	bl	8016ec8 <_scanf_i>
 8016dce:	e7ab      	b.n	8016d28 <__ssvfiscanf_r+0x204>
 8016dd0:	08016a6f 	.word	0x08016a6f
 8016dd4:	08016ae9 	.word	0x08016ae9
 8016dd8:	08017d05 	.word	0x08017d05
 8016ddc:	08017e6e 	.word	0x08017e6e
 8016de0:	4b0b      	ldr	r3, [pc, #44]	; (8016e10 <__ssvfiscanf_r+0x2ec>)
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	f43f aec5 	beq.w	8016b72 <__ssvfiscanf_r+0x4e>
 8016de8:	466b      	mov	r3, sp
 8016dea:	4622      	mov	r2, r4
 8016dec:	a941      	add	r1, sp, #260	; 0x104
 8016dee:	4630      	mov	r0, r6
 8016df0:	f3af 8000 	nop.w
 8016df4:	e798      	b.n	8016d28 <__ssvfiscanf_r+0x204>
 8016df6:	89a3      	ldrh	r3, [r4, #12]
 8016df8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016dfc:	bf18      	it	ne
 8016dfe:	f04f 30ff 	movne.w	r0, #4294967295
 8016e02:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8016e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e0a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016e0c:	e7f9      	b.n	8016e02 <__ssvfiscanf_r+0x2de>
 8016e0e:	bf00      	nop
 8016e10:	00000000 	.word	0x00000000

08016e14 <_scanf_chars>:
 8016e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e18:	4615      	mov	r5, r2
 8016e1a:	688a      	ldr	r2, [r1, #8]
 8016e1c:	4680      	mov	r8, r0
 8016e1e:	460c      	mov	r4, r1
 8016e20:	b932      	cbnz	r2, 8016e30 <_scanf_chars+0x1c>
 8016e22:	698a      	ldr	r2, [r1, #24]
 8016e24:	2a00      	cmp	r2, #0
 8016e26:	bf0c      	ite	eq
 8016e28:	2201      	moveq	r2, #1
 8016e2a:	f04f 32ff 	movne.w	r2, #4294967295
 8016e2e:	608a      	str	r2, [r1, #8]
 8016e30:	6822      	ldr	r2, [r4, #0]
 8016e32:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8016ec4 <_scanf_chars+0xb0>
 8016e36:	06d1      	lsls	r1, r2, #27
 8016e38:	bf5f      	itttt	pl
 8016e3a:	681a      	ldrpl	r2, [r3, #0]
 8016e3c:	1d11      	addpl	r1, r2, #4
 8016e3e:	6019      	strpl	r1, [r3, #0]
 8016e40:	6816      	ldrpl	r6, [r2, #0]
 8016e42:	2700      	movs	r7, #0
 8016e44:	69a0      	ldr	r0, [r4, #24]
 8016e46:	b188      	cbz	r0, 8016e6c <_scanf_chars+0x58>
 8016e48:	2801      	cmp	r0, #1
 8016e4a:	d107      	bne.n	8016e5c <_scanf_chars+0x48>
 8016e4c:	682a      	ldr	r2, [r5, #0]
 8016e4e:	7811      	ldrb	r1, [r2, #0]
 8016e50:	6962      	ldr	r2, [r4, #20]
 8016e52:	5c52      	ldrb	r2, [r2, r1]
 8016e54:	b952      	cbnz	r2, 8016e6c <_scanf_chars+0x58>
 8016e56:	2f00      	cmp	r7, #0
 8016e58:	d031      	beq.n	8016ebe <_scanf_chars+0xaa>
 8016e5a:	e022      	b.n	8016ea2 <_scanf_chars+0x8e>
 8016e5c:	2802      	cmp	r0, #2
 8016e5e:	d120      	bne.n	8016ea2 <_scanf_chars+0x8e>
 8016e60:	682b      	ldr	r3, [r5, #0]
 8016e62:	781b      	ldrb	r3, [r3, #0]
 8016e64:	f813 3009 	ldrb.w	r3, [r3, r9]
 8016e68:	071b      	lsls	r3, r3, #28
 8016e6a:	d41a      	bmi.n	8016ea2 <_scanf_chars+0x8e>
 8016e6c:	6823      	ldr	r3, [r4, #0]
 8016e6e:	06da      	lsls	r2, r3, #27
 8016e70:	bf5e      	ittt	pl
 8016e72:	682b      	ldrpl	r3, [r5, #0]
 8016e74:	781b      	ldrbpl	r3, [r3, #0]
 8016e76:	f806 3b01 	strbpl.w	r3, [r6], #1
 8016e7a:	682a      	ldr	r2, [r5, #0]
 8016e7c:	686b      	ldr	r3, [r5, #4]
 8016e7e:	3201      	adds	r2, #1
 8016e80:	602a      	str	r2, [r5, #0]
 8016e82:	68a2      	ldr	r2, [r4, #8]
 8016e84:	3b01      	subs	r3, #1
 8016e86:	3a01      	subs	r2, #1
 8016e88:	606b      	str	r3, [r5, #4]
 8016e8a:	3701      	adds	r7, #1
 8016e8c:	60a2      	str	r2, [r4, #8]
 8016e8e:	b142      	cbz	r2, 8016ea2 <_scanf_chars+0x8e>
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	dcd7      	bgt.n	8016e44 <_scanf_chars+0x30>
 8016e94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016e98:	4629      	mov	r1, r5
 8016e9a:	4640      	mov	r0, r8
 8016e9c:	4798      	blx	r3
 8016e9e:	2800      	cmp	r0, #0
 8016ea0:	d0d0      	beq.n	8016e44 <_scanf_chars+0x30>
 8016ea2:	6823      	ldr	r3, [r4, #0]
 8016ea4:	f013 0310 	ands.w	r3, r3, #16
 8016ea8:	d105      	bne.n	8016eb6 <_scanf_chars+0xa2>
 8016eaa:	68e2      	ldr	r2, [r4, #12]
 8016eac:	3201      	adds	r2, #1
 8016eae:	60e2      	str	r2, [r4, #12]
 8016eb0:	69a2      	ldr	r2, [r4, #24]
 8016eb2:	b102      	cbz	r2, 8016eb6 <_scanf_chars+0xa2>
 8016eb4:	7033      	strb	r3, [r6, #0]
 8016eb6:	6923      	ldr	r3, [r4, #16]
 8016eb8:	443b      	add	r3, r7
 8016eba:	6123      	str	r3, [r4, #16]
 8016ebc:	2000      	movs	r0, #0
 8016ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ec2:	bf00      	nop
 8016ec4:	08017d05 	.word	0x08017d05

08016ec8 <_scanf_i>:
 8016ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ecc:	4698      	mov	r8, r3
 8016ece:	4b76      	ldr	r3, [pc, #472]	; (80170a8 <_scanf_i+0x1e0>)
 8016ed0:	460c      	mov	r4, r1
 8016ed2:	4682      	mov	sl, r0
 8016ed4:	4616      	mov	r6, r2
 8016ed6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016eda:	b087      	sub	sp, #28
 8016edc:	ab03      	add	r3, sp, #12
 8016ede:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016ee2:	4b72      	ldr	r3, [pc, #456]	; (80170ac <_scanf_i+0x1e4>)
 8016ee4:	69a1      	ldr	r1, [r4, #24]
 8016ee6:	4a72      	ldr	r2, [pc, #456]	; (80170b0 <_scanf_i+0x1e8>)
 8016ee8:	2903      	cmp	r1, #3
 8016eea:	bf18      	it	ne
 8016eec:	461a      	movne	r2, r3
 8016eee:	68a3      	ldr	r3, [r4, #8]
 8016ef0:	9201      	str	r2, [sp, #4]
 8016ef2:	1e5a      	subs	r2, r3, #1
 8016ef4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016ef8:	bf88      	it	hi
 8016efa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016efe:	4627      	mov	r7, r4
 8016f00:	bf82      	ittt	hi
 8016f02:	eb03 0905 	addhi.w	r9, r3, r5
 8016f06:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016f0a:	60a3      	strhi	r3, [r4, #8]
 8016f0c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016f10:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8016f14:	bf98      	it	ls
 8016f16:	f04f 0900 	movls.w	r9, #0
 8016f1a:	6023      	str	r3, [r4, #0]
 8016f1c:	463d      	mov	r5, r7
 8016f1e:	f04f 0b00 	mov.w	fp, #0
 8016f22:	6831      	ldr	r1, [r6, #0]
 8016f24:	ab03      	add	r3, sp, #12
 8016f26:	7809      	ldrb	r1, [r1, #0]
 8016f28:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8016f2c:	2202      	movs	r2, #2
 8016f2e:	f7e9 f967 	bl	8000200 <memchr>
 8016f32:	b328      	cbz	r0, 8016f80 <_scanf_i+0xb8>
 8016f34:	f1bb 0f01 	cmp.w	fp, #1
 8016f38:	d159      	bne.n	8016fee <_scanf_i+0x126>
 8016f3a:	6862      	ldr	r2, [r4, #4]
 8016f3c:	b92a      	cbnz	r2, 8016f4a <_scanf_i+0x82>
 8016f3e:	6822      	ldr	r2, [r4, #0]
 8016f40:	2308      	movs	r3, #8
 8016f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016f46:	6063      	str	r3, [r4, #4]
 8016f48:	6022      	str	r2, [r4, #0]
 8016f4a:	6822      	ldr	r2, [r4, #0]
 8016f4c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8016f50:	6022      	str	r2, [r4, #0]
 8016f52:	68a2      	ldr	r2, [r4, #8]
 8016f54:	1e51      	subs	r1, r2, #1
 8016f56:	60a1      	str	r1, [r4, #8]
 8016f58:	b192      	cbz	r2, 8016f80 <_scanf_i+0xb8>
 8016f5a:	6832      	ldr	r2, [r6, #0]
 8016f5c:	1c51      	adds	r1, r2, #1
 8016f5e:	6031      	str	r1, [r6, #0]
 8016f60:	7812      	ldrb	r2, [r2, #0]
 8016f62:	f805 2b01 	strb.w	r2, [r5], #1
 8016f66:	6872      	ldr	r2, [r6, #4]
 8016f68:	3a01      	subs	r2, #1
 8016f6a:	2a00      	cmp	r2, #0
 8016f6c:	6072      	str	r2, [r6, #4]
 8016f6e:	dc07      	bgt.n	8016f80 <_scanf_i+0xb8>
 8016f70:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8016f74:	4631      	mov	r1, r6
 8016f76:	4650      	mov	r0, sl
 8016f78:	4790      	blx	r2
 8016f7a:	2800      	cmp	r0, #0
 8016f7c:	f040 8085 	bne.w	801708a <_scanf_i+0x1c2>
 8016f80:	f10b 0b01 	add.w	fp, fp, #1
 8016f84:	f1bb 0f03 	cmp.w	fp, #3
 8016f88:	d1cb      	bne.n	8016f22 <_scanf_i+0x5a>
 8016f8a:	6863      	ldr	r3, [r4, #4]
 8016f8c:	b90b      	cbnz	r3, 8016f92 <_scanf_i+0xca>
 8016f8e:	230a      	movs	r3, #10
 8016f90:	6063      	str	r3, [r4, #4]
 8016f92:	6863      	ldr	r3, [r4, #4]
 8016f94:	4947      	ldr	r1, [pc, #284]	; (80170b4 <_scanf_i+0x1ec>)
 8016f96:	6960      	ldr	r0, [r4, #20]
 8016f98:	1ac9      	subs	r1, r1, r3
 8016f9a:	f000 f88d 	bl	80170b8 <__sccl>
 8016f9e:	f04f 0b00 	mov.w	fp, #0
 8016fa2:	68a3      	ldr	r3, [r4, #8]
 8016fa4:	6822      	ldr	r2, [r4, #0]
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d03d      	beq.n	8017026 <_scanf_i+0x15e>
 8016faa:	6831      	ldr	r1, [r6, #0]
 8016fac:	6960      	ldr	r0, [r4, #20]
 8016fae:	f891 c000 	ldrb.w	ip, [r1]
 8016fb2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016fb6:	2800      	cmp	r0, #0
 8016fb8:	d035      	beq.n	8017026 <_scanf_i+0x15e>
 8016fba:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8016fbe:	d124      	bne.n	801700a <_scanf_i+0x142>
 8016fc0:	0510      	lsls	r0, r2, #20
 8016fc2:	d522      	bpl.n	801700a <_scanf_i+0x142>
 8016fc4:	f10b 0b01 	add.w	fp, fp, #1
 8016fc8:	f1b9 0f00 	cmp.w	r9, #0
 8016fcc:	d003      	beq.n	8016fd6 <_scanf_i+0x10e>
 8016fce:	3301      	adds	r3, #1
 8016fd0:	f109 39ff 	add.w	r9, r9, #4294967295
 8016fd4:	60a3      	str	r3, [r4, #8]
 8016fd6:	6873      	ldr	r3, [r6, #4]
 8016fd8:	3b01      	subs	r3, #1
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	6073      	str	r3, [r6, #4]
 8016fde:	dd1b      	ble.n	8017018 <_scanf_i+0x150>
 8016fe0:	6833      	ldr	r3, [r6, #0]
 8016fe2:	3301      	adds	r3, #1
 8016fe4:	6033      	str	r3, [r6, #0]
 8016fe6:	68a3      	ldr	r3, [r4, #8]
 8016fe8:	3b01      	subs	r3, #1
 8016fea:	60a3      	str	r3, [r4, #8]
 8016fec:	e7d9      	b.n	8016fa2 <_scanf_i+0xda>
 8016fee:	f1bb 0f02 	cmp.w	fp, #2
 8016ff2:	d1ae      	bne.n	8016f52 <_scanf_i+0x8a>
 8016ff4:	6822      	ldr	r2, [r4, #0]
 8016ff6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8016ffa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8016ffe:	d1bf      	bne.n	8016f80 <_scanf_i+0xb8>
 8017000:	2310      	movs	r3, #16
 8017002:	6063      	str	r3, [r4, #4]
 8017004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017008:	e7a2      	b.n	8016f50 <_scanf_i+0x88>
 801700a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801700e:	6022      	str	r2, [r4, #0]
 8017010:	780b      	ldrb	r3, [r1, #0]
 8017012:	f805 3b01 	strb.w	r3, [r5], #1
 8017016:	e7de      	b.n	8016fd6 <_scanf_i+0x10e>
 8017018:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801701c:	4631      	mov	r1, r6
 801701e:	4650      	mov	r0, sl
 8017020:	4798      	blx	r3
 8017022:	2800      	cmp	r0, #0
 8017024:	d0df      	beq.n	8016fe6 <_scanf_i+0x11e>
 8017026:	6823      	ldr	r3, [r4, #0]
 8017028:	05db      	lsls	r3, r3, #23
 801702a:	d50d      	bpl.n	8017048 <_scanf_i+0x180>
 801702c:	42bd      	cmp	r5, r7
 801702e:	d909      	bls.n	8017044 <_scanf_i+0x17c>
 8017030:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017034:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017038:	4632      	mov	r2, r6
 801703a:	4650      	mov	r0, sl
 801703c:	4798      	blx	r3
 801703e:	f105 39ff 	add.w	r9, r5, #4294967295
 8017042:	464d      	mov	r5, r9
 8017044:	42bd      	cmp	r5, r7
 8017046:	d02d      	beq.n	80170a4 <_scanf_i+0x1dc>
 8017048:	6822      	ldr	r2, [r4, #0]
 801704a:	f012 0210 	ands.w	r2, r2, #16
 801704e:	d113      	bne.n	8017078 <_scanf_i+0x1b0>
 8017050:	702a      	strb	r2, [r5, #0]
 8017052:	6863      	ldr	r3, [r4, #4]
 8017054:	9e01      	ldr	r6, [sp, #4]
 8017056:	4639      	mov	r1, r7
 8017058:	4650      	mov	r0, sl
 801705a:	47b0      	blx	r6
 801705c:	6821      	ldr	r1, [r4, #0]
 801705e:	f8d8 3000 	ldr.w	r3, [r8]
 8017062:	f011 0f20 	tst.w	r1, #32
 8017066:	d013      	beq.n	8017090 <_scanf_i+0x1c8>
 8017068:	1d1a      	adds	r2, r3, #4
 801706a:	f8c8 2000 	str.w	r2, [r8]
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	6018      	str	r0, [r3, #0]
 8017072:	68e3      	ldr	r3, [r4, #12]
 8017074:	3301      	adds	r3, #1
 8017076:	60e3      	str	r3, [r4, #12]
 8017078:	1bed      	subs	r5, r5, r7
 801707a:	44ab      	add	fp, r5
 801707c:	6925      	ldr	r5, [r4, #16]
 801707e:	445d      	add	r5, fp
 8017080:	6125      	str	r5, [r4, #16]
 8017082:	2000      	movs	r0, #0
 8017084:	b007      	add	sp, #28
 8017086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801708a:	f04f 0b00 	mov.w	fp, #0
 801708e:	e7ca      	b.n	8017026 <_scanf_i+0x15e>
 8017090:	1d1a      	adds	r2, r3, #4
 8017092:	f8c8 2000 	str.w	r2, [r8]
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	f011 0f01 	tst.w	r1, #1
 801709c:	bf14      	ite	ne
 801709e:	8018      	strhne	r0, [r3, #0]
 80170a0:	6018      	streq	r0, [r3, #0]
 80170a2:	e7e6      	b.n	8017072 <_scanf_i+0x1aa>
 80170a4:	2001      	movs	r0, #1
 80170a6:	e7ed      	b.n	8017084 <_scanf_i+0x1bc>
 80170a8:	080176e8 	.word	0x080176e8
 80170ac:	08016751 	.word	0x08016751
 80170b0:	08015579 	.word	0x08015579
 80170b4:	08017eb4 	.word	0x08017eb4

080170b8 <__sccl>:
 80170b8:	b570      	push	{r4, r5, r6, lr}
 80170ba:	780b      	ldrb	r3, [r1, #0]
 80170bc:	4604      	mov	r4, r0
 80170be:	2b5e      	cmp	r3, #94	; 0x5e
 80170c0:	bf0b      	itete	eq
 80170c2:	784b      	ldrbeq	r3, [r1, #1]
 80170c4:	1c48      	addne	r0, r1, #1
 80170c6:	1c88      	addeq	r0, r1, #2
 80170c8:	2200      	movne	r2, #0
 80170ca:	bf08      	it	eq
 80170cc:	2201      	moveq	r2, #1
 80170ce:	1e61      	subs	r1, r4, #1
 80170d0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80170d4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80170d8:	42a9      	cmp	r1, r5
 80170da:	d1fb      	bne.n	80170d4 <__sccl+0x1c>
 80170dc:	b90b      	cbnz	r3, 80170e2 <__sccl+0x2a>
 80170de:	3801      	subs	r0, #1
 80170e0:	bd70      	pop	{r4, r5, r6, pc}
 80170e2:	f082 0201 	eor.w	r2, r2, #1
 80170e6:	54e2      	strb	r2, [r4, r3]
 80170e8:	4605      	mov	r5, r0
 80170ea:	4628      	mov	r0, r5
 80170ec:	f810 1b01 	ldrb.w	r1, [r0], #1
 80170f0:	292d      	cmp	r1, #45	; 0x2d
 80170f2:	d006      	beq.n	8017102 <__sccl+0x4a>
 80170f4:	295d      	cmp	r1, #93	; 0x5d
 80170f6:	d0f3      	beq.n	80170e0 <__sccl+0x28>
 80170f8:	b909      	cbnz	r1, 80170fe <__sccl+0x46>
 80170fa:	4628      	mov	r0, r5
 80170fc:	e7f0      	b.n	80170e0 <__sccl+0x28>
 80170fe:	460b      	mov	r3, r1
 8017100:	e7f1      	b.n	80170e6 <__sccl+0x2e>
 8017102:	786e      	ldrb	r6, [r5, #1]
 8017104:	2e5d      	cmp	r6, #93	; 0x5d
 8017106:	d0fa      	beq.n	80170fe <__sccl+0x46>
 8017108:	42b3      	cmp	r3, r6
 801710a:	dcf8      	bgt.n	80170fe <__sccl+0x46>
 801710c:	3502      	adds	r5, #2
 801710e:	4619      	mov	r1, r3
 8017110:	3101      	adds	r1, #1
 8017112:	428e      	cmp	r6, r1
 8017114:	5462      	strb	r2, [r4, r1]
 8017116:	dcfb      	bgt.n	8017110 <__sccl+0x58>
 8017118:	1af1      	subs	r1, r6, r3
 801711a:	3901      	subs	r1, #1
 801711c:	1c58      	adds	r0, r3, #1
 801711e:	42b3      	cmp	r3, r6
 8017120:	bfa8      	it	ge
 8017122:	2100      	movge	r1, #0
 8017124:	1843      	adds	r3, r0, r1
 8017126:	e7e0      	b.n	80170ea <__sccl+0x32>

08017128 <_raise_r>:
 8017128:	291f      	cmp	r1, #31
 801712a:	b538      	push	{r3, r4, r5, lr}
 801712c:	4604      	mov	r4, r0
 801712e:	460d      	mov	r5, r1
 8017130:	d904      	bls.n	801713c <_raise_r+0x14>
 8017132:	2316      	movs	r3, #22
 8017134:	6003      	str	r3, [r0, #0]
 8017136:	f04f 30ff 	mov.w	r0, #4294967295
 801713a:	bd38      	pop	{r3, r4, r5, pc}
 801713c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801713e:	b112      	cbz	r2, 8017146 <_raise_r+0x1e>
 8017140:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017144:	b94b      	cbnz	r3, 801715a <_raise_r+0x32>
 8017146:	4620      	mov	r0, r4
 8017148:	f000 f830 	bl	80171ac <_getpid_r>
 801714c:	462a      	mov	r2, r5
 801714e:	4601      	mov	r1, r0
 8017150:	4620      	mov	r0, r4
 8017152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017156:	f000 b817 	b.w	8017188 <_kill_r>
 801715a:	2b01      	cmp	r3, #1
 801715c:	d00a      	beq.n	8017174 <_raise_r+0x4c>
 801715e:	1c59      	adds	r1, r3, #1
 8017160:	d103      	bne.n	801716a <_raise_r+0x42>
 8017162:	2316      	movs	r3, #22
 8017164:	6003      	str	r3, [r0, #0]
 8017166:	2001      	movs	r0, #1
 8017168:	e7e7      	b.n	801713a <_raise_r+0x12>
 801716a:	2400      	movs	r4, #0
 801716c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017170:	4628      	mov	r0, r5
 8017172:	4798      	blx	r3
 8017174:	2000      	movs	r0, #0
 8017176:	e7e0      	b.n	801713a <_raise_r+0x12>

08017178 <raise>:
 8017178:	4b02      	ldr	r3, [pc, #8]	; (8017184 <raise+0xc>)
 801717a:	4601      	mov	r1, r0
 801717c:	6818      	ldr	r0, [r3, #0]
 801717e:	f7ff bfd3 	b.w	8017128 <_raise_r>
 8017182:	bf00      	nop
 8017184:	200002b4 	.word	0x200002b4

08017188 <_kill_r>:
 8017188:	b538      	push	{r3, r4, r5, lr}
 801718a:	4d07      	ldr	r5, [pc, #28]	; (80171a8 <_kill_r+0x20>)
 801718c:	2300      	movs	r3, #0
 801718e:	4604      	mov	r4, r0
 8017190:	4608      	mov	r0, r1
 8017192:	4611      	mov	r1, r2
 8017194:	602b      	str	r3, [r5, #0]
 8017196:	f7eb ffbf 	bl	8003118 <_kill>
 801719a:	1c43      	adds	r3, r0, #1
 801719c:	d102      	bne.n	80171a4 <_kill_r+0x1c>
 801719e:	682b      	ldr	r3, [r5, #0]
 80171a0:	b103      	cbz	r3, 80171a4 <_kill_r+0x1c>
 80171a2:	6023      	str	r3, [r4, #0]
 80171a4:	bd38      	pop	{r3, r4, r5, pc}
 80171a6:	bf00      	nop
 80171a8:	2000e8d8 	.word	0x2000e8d8

080171ac <_getpid_r>:
 80171ac:	f7eb bfac 	b.w	8003108 <_getpid>

080171b0 <__submore>:
 80171b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171b4:	460c      	mov	r4, r1
 80171b6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80171b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80171bc:	4299      	cmp	r1, r3
 80171be:	d11d      	bne.n	80171fc <__submore+0x4c>
 80171c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80171c4:	f7fd ffa6 	bl	8015114 <_malloc_r>
 80171c8:	b918      	cbnz	r0, 80171d2 <__submore+0x22>
 80171ca:	f04f 30ff 	mov.w	r0, #4294967295
 80171ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80171d6:	63a3      	str	r3, [r4, #56]	; 0x38
 80171d8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80171dc:	6360      	str	r0, [r4, #52]	; 0x34
 80171de:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80171e2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80171e6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80171ea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80171ee:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80171f2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80171f6:	6020      	str	r0, [r4, #0]
 80171f8:	2000      	movs	r0, #0
 80171fa:	e7e8      	b.n	80171ce <__submore+0x1e>
 80171fc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80171fe:	0077      	lsls	r7, r6, #1
 8017200:	463a      	mov	r2, r7
 8017202:	f7ff fc05 	bl	8016a10 <_realloc_r>
 8017206:	4605      	mov	r5, r0
 8017208:	2800      	cmp	r0, #0
 801720a:	d0de      	beq.n	80171ca <__submore+0x1a>
 801720c:	eb00 0806 	add.w	r8, r0, r6
 8017210:	4601      	mov	r1, r0
 8017212:	4632      	mov	r2, r6
 8017214:	4640      	mov	r0, r8
 8017216:	f7fd fc89 	bl	8014b2c <memcpy>
 801721a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801721e:	f8c4 8000 	str.w	r8, [r4]
 8017222:	e7e9      	b.n	80171f8 <__submore+0x48>

08017224 <_fstat_r>:
 8017224:	b538      	push	{r3, r4, r5, lr}
 8017226:	4d07      	ldr	r5, [pc, #28]	; (8017244 <_fstat_r+0x20>)
 8017228:	2300      	movs	r3, #0
 801722a:	4604      	mov	r4, r0
 801722c:	4608      	mov	r0, r1
 801722e:	4611      	mov	r1, r2
 8017230:	602b      	str	r3, [r5, #0]
 8017232:	f7eb ffd0 	bl	80031d6 <_fstat>
 8017236:	1c43      	adds	r3, r0, #1
 8017238:	d102      	bne.n	8017240 <_fstat_r+0x1c>
 801723a:	682b      	ldr	r3, [r5, #0]
 801723c:	b103      	cbz	r3, 8017240 <_fstat_r+0x1c>
 801723e:	6023      	str	r3, [r4, #0]
 8017240:	bd38      	pop	{r3, r4, r5, pc}
 8017242:	bf00      	nop
 8017244:	2000e8d8 	.word	0x2000e8d8

08017248 <_isatty_r>:
 8017248:	b538      	push	{r3, r4, r5, lr}
 801724a:	4d06      	ldr	r5, [pc, #24]	; (8017264 <_isatty_r+0x1c>)
 801724c:	2300      	movs	r3, #0
 801724e:	4604      	mov	r4, r0
 8017250:	4608      	mov	r0, r1
 8017252:	602b      	str	r3, [r5, #0]
 8017254:	f7eb ffcf 	bl	80031f6 <_isatty>
 8017258:	1c43      	adds	r3, r0, #1
 801725a:	d102      	bne.n	8017262 <_isatty_r+0x1a>
 801725c:	682b      	ldr	r3, [r5, #0]
 801725e:	b103      	cbz	r3, 8017262 <_isatty_r+0x1a>
 8017260:	6023      	str	r3, [r4, #0]
 8017262:	bd38      	pop	{r3, r4, r5, pc}
 8017264:	2000e8d8 	.word	0x2000e8d8

08017268 <_malloc_usable_size_r>:
 8017268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801726c:	1f18      	subs	r0, r3, #4
 801726e:	2b00      	cmp	r3, #0
 8017270:	bfbc      	itt	lt
 8017272:	580b      	ldrlt	r3, [r1, r0]
 8017274:	18c0      	addlt	r0, r0, r3
 8017276:	4770      	bx	lr

08017278 <_init>:
 8017278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801727a:	bf00      	nop
 801727c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801727e:	bc08      	pop	{r3}
 8017280:	469e      	mov	lr, r3
 8017282:	4770      	bx	lr

08017284 <_fini>:
 8017284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017286:	bf00      	nop
 8017288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801728a:	bc08      	pop	{r3}
 801728c:	469e      	mov	lr, r3
 801728e:	4770      	bx	lr
