
icListen_SD9_USB_R_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac94  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  0800ae84  0800ae84  0001ae84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b014  0800b014  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b014  0800b014  0001b014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b01c  0800b01c  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b01c  0800b01c  0001b01c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b020  0800b020  0001b020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800b024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003b4c  2000009c  0800b0c0  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003be8  0800b0c0  00023be8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021d43  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f66  00000000  00000000  00041e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa8  00000000  00000000  00046d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018c0  00000000  00000000  00048818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025225  00000000  00000000  0004a0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f36a  00000000  00000000  0006f2fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca6cd  00000000  00000000  0008e667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00158d34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072e0  00000000  00000000  00158d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	2000009c 	.word	0x2000009c
 800020c:	00000000 	.word	0x00000000
 8000210:	0800ae6c 	.word	0x0800ae6c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000a0 	.word	0x200000a0
 800022c:	0800ae6c 	.word	0x0800ae6c

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b976 	b.w	8000534 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14d      	bne.n	800030c <__udivmoddi4+0xac>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d968      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b152      	cbz	r2, 8000292 <__udivmoddi4+0x32>
 800027c:	fa01 f302 	lsl.w	r3, r1, r2
 8000280:	f1c2 0120 	rsb	r1, r2, #32
 8000284:	fa20 f101 	lsr.w	r1, r0, r1
 8000288:	fa0c fc02 	lsl.w	ip, ip, r2
 800028c:	ea41 0803 	orr.w	r8, r1, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000296:	fbb8 f7f1 	udiv	r7, r8, r1
 800029a:	fa1f fe8c 	uxth.w	lr, ip
 800029e:	fb01 8817 	mls	r8, r1, r7, r8
 80002a2:	fb07 f00e 	mul.w	r0, r7, lr
 80002a6:	0c23      	lsrs	r3, r4, #16
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	4298      	cmp	r0, r3
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x66>
 80002b0:	eb1c 0303 	adds.w	r3, ip, r3
 80002b4:	f107 35ff 	add.w	r5, r7, #4294967295
 80002b8:	f080 811e 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002bc:	4298      	cmp	r0, r3
 80002be:	f240 811b 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c2:	3f02      	subs	r7, #2
 80002c4:	4463      	add	r3, ip
 80002c6:	1a1b      	subs	r3, r3, r0
 80002c8:	fbb3 f0f1 	udiv	r0, r3, r1
 80002cc:	fb01 3310 	mls	r3, r1, r0, r3
 80002d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002da:	45a6      	cmp	lr, r4
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x94>
 80002de:	eb1c 0404 	adds.w	r4, ip, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8109 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8106 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002f0:	4464      	add	r4, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	2100      	movs	r1, #0
 80002f6:	eba4 040e 	sub.w	r4, r4, lr
 80002fa:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa8>
 8000300:	2300      	movs	r3, #0
 8000302:	40d4      	lsrs	r4, r2
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	428b      	cmp	r3, r1
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0xc2>
 8000310:	2e00      	cmp	r6, #0
 8000312:	f000 80ee 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000316:	2100      	movs	r1, #0
 8000318:	e9c6 0500 	strd	r0, r5, [r6]
 800031c:	4608      	mov	r0, r1
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	42ab      	cmp	r3, r5
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80fc 	bhi.w	800052c <__udivmoddi4+0x2cc>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb65 0303 	sbc.w	r3, r5, r3
 800033a:	2001      	movs	r0, #1
 800033c:	4698      	mov	r8, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0e2      	beq.n	8000308 <__udivmoddi4+0xa8>
 8000342:	e9c6 4800 	strd	r4, r8, [r6]
 8000346:	e7df      	b.n	8000308 <__udivmoddi4+0xa8>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8091 	bne.w	8000478 <__udivmoddi4+0x218>
 8000356:	eba1 000c 	sub.w	r0, r1, ip
 800035a:	2101      	movs	r1, #1
 800035c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000360:	fa1f fe8c 	uxth.w	lr, ip
 8000364:	fbb0 f3f7 	udiv	r3, r0, r7
 8000368:	fb07 0013 	mls	r0, r7, r3, r0
 800036c:	0c25      	lsrs	r5, r4, #16
 800036e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	42a8      	cmp	r0, r5
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0505 	adds.w	r5, ip, r5
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	42a8      	cmp	r0, r5
 8000386:	f200 80ce 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 800038a:	4643      	mov	r3, r8
 800038c:	1a2d      	subs	r5, r5, r0
 800038e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000392:	fb07 5510 	mls	r5, r7, r0, r5
 8000396:	fb0e fe00 	mul.w	lr, lr, r0
 800039a:	b2a4      	uxth	r4, r4
 800039c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80b6 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 80003b4:	4628      	mov	r0, r5
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79e      	b.n	80002fe <__udivmoddi4+0x9e>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa25 fa07 	lsr.w	sl, r5, r7
 80003d2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d6:	fbba f8f9 	udiv	r8, sl, r9
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	fb09 aa18 	mls	sl, r9, r8, sl
 80003e2:	408d      	lsls	r5, r1
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	431d      	orrs	r5, r3
 80003ea:	fa00 f301 	lsl.w	r3, r0, r1
 80003ee:	fb08 f00e 	mul.w	r0, r8, lr
 80003f2:	0c2c      	lsrs	r4, r5, #16
 80003f4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003f8:	42a0      	cmp	r0, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	42a0      	cmp	r0, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1a24      	subs	r4, r4, r0
 800041a:	fbb4 f0f9 	udiv	r0, r4, r9
 800041e:	fb09 4410 	mls	r4, r9, r0, r4
 8000422:	fb00 fe0e 	mul.w	lr, r0, lr
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f100 35ff 	add.w	r5, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9502 	umull	r9, r5, r0, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2d0>
 800045c:	ebb3 0208 	subs.w	r2, r3, r8
 8000460:	eb64 040e 	sbc.w	r4, r4, lr
 8000464:	fa22 f301 	lsr.w	r3, r2, r1
 8000468:	fa04 f707 	lsl.w	r7, r4, r7
 800046c:	431f      	orrs	r7, r3
 800046e:	40cc      	lsrs	r4, r1
 8000470:	e9c6 7400 	strd	r7, r4, [r6]
 8000474:	2100      	movs	r1, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa8>
 8000478:	fa0c fc02 	lsl.w	ip, ip, r2
 800047c:	f1c2 0120 	rsb	r1, r2, #32
 8000480:	fa25 f301 	lsr.w	r3, r5, r1
 8000484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000488:	fa20 f101 	lsr.w	r1, r0, r1
 800048c:	4095      	lsls	r5, r2
 800048e:	430d      	orrs	r5, r1
 8000490:	fbb3 f1f7 	udiv	r1, r3, r7
 8000494:	fb07 3311 	mls	r3, r7, r1, r3
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	0c28      	lsrs	r0, r5, #16
 800049e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004a2:	fb01 f30e 	mul.w	r3, r1, lr
 80004a6:	4283      	cmp	r3, r0
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0000 	adds.w	r0, ip, r0
 80004b2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	4283      	cmp	r3, r0
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3902      	subs	r1, #2
 80004be:	4460      	add	r0, ip
 80004c0:	1ac0      	subs	r0, r0, r3
 80004c2:	fbb0 f3f7 	udiv	r3, r0, r7
 80004c6:	fb07 0013 	mls	r0, r7, r3, r0
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004d0:	fb03 f00e 	mul.w	r0, r3, lr
 80004d4:	42a8      	cmp	r0, r5
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0505 	adds.w	r5, ip, r5
 80004dc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	42a8      	cmp	r0, r5
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4465      	add	r5, ip
 80004ea:	1a28      	subs	r0, r5, r0
 80004ec:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e707      	b.n	8000308 <__udivmoddi4+0xa8>
 80004f8:	462f      	mov	r7, r5
 80004fa:	e6e4      	b.n	80002c6 <__udivmoddi4+0x66>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f9      	b.n	80002f4 <__udivmoddi4+0x94>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4643      	mov	r3, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4628      	mov	r0, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4641      	mov	r1, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	4464      	add	r4, ip
 8000522:	3802      	subs	r0, #2
 8000524:	e747      	b.n	80003b6 <__udivmoddi4+0x156>
 8000526:	3b02      	subs	r3, #2
 8000528:	4465      	add	r5, ip
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x12c>
 800052c:	4608      	mov	r0, r1
 800052e:	e706      	b.n	800033e <__udivmoddi4+0xde>
 8000530:	4631      	mov	r1, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa8>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	4a06      	ldr	r2, [pc, #24]	; (8000560 <vApplicationGetIdleTaskMemory+0x28>)
 8000548:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	4a05      	ldr	r2, [pc, #20]	; (8000564 <vApplicationGetIdleTaskMemory+0x2c>)
 800054e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2280      	movs	r2, #128	; 0x80
 8000554:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000556:	bf00      	nop
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr
 8000560:	200000b8 	.word	0x200000b8
 8000564:	2000016c 	.word	0x2000016c

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b5b0      	push	{r4, r5, r7, lr}
 800056a:	b09a      	sub	sp, #104	; 0x68
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fc7d 	bl	8000e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f861 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f977 	bl	8000868 <MX_GPIO_Init>
  MX_SPI1_Init();
 800057a:	f000 f8c7 	bl	800070c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800057e:	f000 f949 	bl	8000814 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000582:	f000 f8f9 	bl	8000778 <MX_TIM2_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of AppliEvent */
  osMessageQDef(AppliEvent, 16, uint16_t);
 8000586:	4b24      	ldr	r3, [pc, #144]	; (8000618 <main+0xb0>)
 8000588:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800058c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800058e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  AppliEventHandle = osMessageCreate(osMessageQ(AppliEvent), NULL);
 8000592:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000596:	2100      	movs	r1, #0
 8000598:	4618      	mov	r0, r3
 800059a:	f007 fe12 	bl	80081c2 <osMessageCreate>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a1e      	ldr	r2, [pc, #120]	; (800061c <main+0xb4>)
 80005a2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005a4:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <main+0xb8>)
 80005a6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80005aa:	461d      	mov	r5, r3
 80005ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f007 fd9f 	bl	8008102 <osThreadCreate>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a17      	ldr	r2, [pc, #92]	; (8000624 <main+0xbc>)
 80005c8:	6013      	str	r3, [r2, #0]

  /* definition and creation of storage_t */
  osThreadDef(storage_t, storage_f, osPriorityNormal, 0, 512);
 80005ca:	4b17      	ldr	r3, [pc, #92]	; (8000628 <main+0xc0>)
 80005cc:	f107 0420 	add.w	r4, r7, #32
 80005d0:	461d      	mov	r5, r3
 80005d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  storage_tHandle = osThreadCreate(osThread(storage_t), NULL);
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f007 fd8c 	bl	8008102 <osThreadCreate>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a0f      	ldr	r2, [pc, #60]	; (800062c <main+0xc4>)
 80005ee:	6013      	str	r3, [r2, #0]

  /* definition and creation of sensor_t */
  osThreadDef(sensor_t, sensor_f, osPriorityNormal, 0, 128);
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <main+0xc8>)
 80005f2:	1d3c      	adds	r4, r7, #4
 80005f4:	461d      	mov	r5, r3
 80005f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sensor_tHandle = osThreadCreate(osThread(sensor_t), NULL);
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f007 fd7b 	bl	8008102 <osThreadCreate>
 800060c:	4603      	mov	r3, r0
 800060e:	4a09      	ldr	r2, [pc, #36]	; (8000634 <main+0xcc>)
 8000610:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000612:	f007 fd6f 	bl	80080f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000616:	e7fe      	b.n	8000616 <main+0xae>
 8000618:	0800aea8 	.word	0x0800aea8
 800061c:	2000045c 	.word	0x2000045c
 8000620:	0800aeb8 	.word	0x0800aeb8
 8000624:	20000450 	.word	0x20000450
 8000628:	0800aed4 	.word	0x0800aed4
 800062c:	20000454 	.word	0x20000454
 8000630:	0800aef0 	.word	0x0800aef0
 8000634:	20000458 	.word	0x20000458

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b09c      	sub	sp, #112	; 0x70
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000642:	2238      	movs	r2, #56	; 0x38
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f00a faa6 	bl	800ab98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2220      	movs	r2, #32
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f00a fa98 	bl	800ab98 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000668:	2301      	movs	r3, #1
 800066a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800066c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000670:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8000672:	2304      	movs	r3, #4
 8000674:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000676:	2301      	movs	r3, #1
 8000678:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 800067a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000680:	2302      	movs	r3, #2
 8000682:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000688:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800068a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800068e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8000690:	2302      	movs	r3, #2
 8000692:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8000694:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000698:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV2;
 800069a:	2310      	movs	r3, #16
 800069c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 fcd0 	bl	8003048 <HAL_RCC_OscConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80006ae:	f000 f9d7 	bl	8000a60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	230f      	movs	r3, #15
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	2302      	movs	r3, #2
 80006b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006cc:	2102      	movs	r1, #2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 ffd0 	bl	8003674 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006da:	f000 f9c1 	bl	8000a60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80006de:	2310      	movs	r3, #16
 80006e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 80006e2:	2300      	movs	r3, #0
 80006e4:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4618      	mov	r0, r3
 80006ea:	f003 fa0b 	bl	8003b04 <HAL_RCCEx_PeriphCLKConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006f4:	f000 f9b4 	bl	8000a60 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <SystemClock_Config+0xd0>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	601a      	str	r2, [r3, #0]
}
 80006fe:	bf00      	nop
 8000700:	3770      	adds	r7, #112	; 0x70
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	42420070 	.word	0x42420070

0800070c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000710:	4b17      	ldr	r3, [pc, #92]	; (8000770 <MX_SPI1_Init+0x64>)
 8000712:	4a18      	ldr	r2, [pc, #96]	; (8000774 <MX_SPI1_Init+0x68>)
 8000714:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_SPI1_Init+0x64>)
 8000718:	f44f 7282 	mov.w	r2, #260	; 0x104
 800071c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_SPI1_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_SPI1_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_SPI1_Init+0x64>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_SPI1_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_SPI1_Init+0x64>)
 8000738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800073c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_SPI1_Init+0x64>)
 8000740:	2208      	movs	r2, #8
 8000742:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <MX_SPI1_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_SPI1_Init+0x64>)
 800074c:	2200      	movs	r2, #0
 800074e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <MX_SPI1_Init+0x64>)
 8000752:	2200      	movs	r2, #0
 8000754:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_SPI1_Init+0x64>)
 8000758:	220a      	movs	r2, #10
 800075a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <MX_SPI1_Init+0x64>)
 800075e:	f003 fb03 	bl	8003d68 <HAL_SPI_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000768:	f000 f97a 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	2000036c 	.word	0x2000036c
 8000774:	40013000 	.word	0x40013000

08000778 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077e:	f107 0308 	add.w	r3, r7, #8
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078c:	463b      	mov	r3, r7
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000794:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <MX_TIM2_Init+0x98>)
 8000796:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800079a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39999;
 800079c:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <MX_TIM2_Init+0x98>)
 800079e:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80007a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a4:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_TIM2_Init+0x98>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007aa:	4b19      	ldr	r3, [pc, #100]	; (8000810 <MX_TIM2_Init+0x98>)
 80007ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_TIM2_Init+0x98>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b8:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_TIM2_Init+0x98>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007be:	4814      	ldr	r0, [pc, #80]	; (8000810 <MX_TIM2_Init+0x98>)
 80007c0:	f003 fc59 	bl	8004076 <HAL_TIM_Base_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80007ca:	f000 f949 	bl	8000a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007d4:	f107 0308 	add.w	r3, r7, #8
 80007d8:	4619      	mov	r1, r3
 80007da:	480d      	ldr	r0, [pc, #52]	; (8000810 <MX_TIM2_Init+0x98>)
 80007dc:	f003 fdfc 	bl	80043d8 <HAL_TIM_ConfigClockSource>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80007e6:	f000 f93b 	bl	8000a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007f2:	463b      	mov	r3, r7
 80007f4:	4619      	mov	r1, r3
 80007f6:	4806      	ldr	r0, [pc, #24]	; (8000810 <MX_TIM2_Init+0x98>)
 80007f8:	f003 ffd8 	bl	80047ac <HAL_TIMEx_MasterConfigSynchronization>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000802:	f000 f92d 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200003c4 	.word	0x200003c4

08000814 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_USART1_UART_Init+0x4c>)
 800081a:	4a12      	ldr	r2, [pc, #72]	; (8000864 <MX_USART1_UART_Init+0x50>)
 800081c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <MX_USART1_UART_Init+0x4c>)
 8000820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000824:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_USART1_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_USART1_UART_Init+0x4c>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_USART1_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_USART1_UART_Init+0x4c>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_USART1_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_USART1_UART_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_USART1_UART_Init+0x4c>)
 800084c:	f004 f826 	bl	800489c <HAL_UART_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000856:	f000 f903 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	2000040c 	.word	0x2000040c
 8000864:	40013800 	.word	0x40013800

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 0310 	add.w	r3, r7, #16
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087c:	4b36      	ldr	r3, [pc, #216]	; (8000958 <MX_GPIO_Init+0xf0>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	4a35      	ldr	r2, [pc, #212]	; (8000958 <MX_GPIO_Init+0xf0>)
 8000882:	f043 0320 	orr.w	r3, r3, #32
 8000886:	6193      	str	r3, [r2, #24]
 8000888:	4b33      	ldr	r3, [pc, #204]	; (8000958 <MX_GPIO_Init+0xf0>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	f003 0320 	and.w	r3, r3, #32
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000894:	4b30      	ldr	r3, [pc, #192]	; (8000958 <MX_GPIO_Init+0xf0>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	4a2f      	ldr	r2, [pc, #188]	; (8000958 <MX_GPIO_Init+0xf0>)
 800089a:	f043 0310 	orr.w	r3, r3, #16
 800089e:	6193      	str	r3, [r2, #24]
 80008a0:	4b2d      	ldr	r3, [pc, #180]	; (8000958 <MX_GPIO_Init+0xf0>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	f003 0310 	and.w	r3, r3, #16
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ac:	4b2a      	ldr	r3, [pc, #168]	; (8000958 <MX_GPIO_Init+0xf0>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	4a29      	ldr	r2, [pc, #164]	; (8000958 <MX_GPIO_Init+0xf0>)
 80008b2:	f043 0304 	orr.w	r3, r3, #4
 80008b6:	6193      	str	r3, [r2, #24]
 80008b8:	4b27      	ldr	r3, [pc, #156]	; (8000958 <MX_GPIO_Init+0xf0>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f003 0304 	and.w	r3, r3, #4
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c4:	4b24      	ldr	r3, [pc, #144]	; (8000958 <MX_GPIO_Init+0xf0>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a23      	ldr	r2, [pc, #140]	; (8000958 <MX_GPIO_Init+0xf0>)
 80008ca:	f043 0308 	orr.w	r3, r3, #8
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b21      	ldr	r3, [pc, #132]	; (8000958 <MX_GPIO_Init+0xf0>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f003 0308 	and.w	r3, r3, #8
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_SD3_GPIO_Port, SS_SD3_Pin, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	2102      	movs	r1, #2
 80008e0:	481e      	ldr	r0, [pc, #120]	; (800095c <MX_GPIO_Init+0xf4>)
 80008e2:	f000 febf 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin, GPIO_PIN_SET);
 80008e6:	2201      	movs	r2, #1
 80008e8:	2186      	movs	r1, #134	; 0x86
 80008ea:	481d      	ldr	r0, [pc, #116]	; (8000960 <MX_GPIO_Init+0xf8>)
 80008ec:	f000 feba 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_VBUS_GPIO_Port, USB_VBUS_Pin, GPIO_PIN_RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2101      	movs	r1, #1
 80008f4:	481b      	ldr	r0, [pc, #108]	; (8000964 <MX_GPIO_Init+0xfc>)
 80008f6:	f000 feb5 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SS_SD3_Pin */
  GPIO_InitStruct.Pin = SS_SD3_Pin;
 80008fa:	2302      	movs	r3, #2
 80008fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2302      	movs	r3, #2
 8000908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SS_SD3_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 0310 	add.w	r3, r7, #16
 800090e:	4619      	mov	r1, r3
 8000910:	4812      	ldr	r0, [pc, #72]	; (800095c <MX_GPIO_Init+0xf4>)
 8000912:	f000 fd23 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : SS_SD1_Pin SS_SD2_Pin SS_SD4_Pin */
  GPIO_InitStruct.Pin = SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin;
 8000916:	2386      	movs	r3, #134	; 0x86
 8000918:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2302      	movs	r3, #2
 8000924:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 0310 	add.w	r3, r7, #16
 800092a:	4619      	mov	r1, r3
 800092c:	480c      	ldr	r0, [pc, #48]	; (8000960 <MX_GPIO_Init+0xf8>)
 800092e:	f000 fd15 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000932:	2301      	movs	r3, #1
 8000934:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2302      	movs	r3, #2
 8000940:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 0310 	add.w	r3, r7, #16
 8000946:	4619      	mov	r1, r3
 8000948:	4806      	ldr	r0, [pc, #24]	; (8000964 <MX_GPIO_Init+0xfc>)
 800094a:	f000 fd07 	bl	800135c <HAL_GPIO_Init>

}
 800094e:	bf00      	nop
 8000950:	3720      	adds	r7, #32
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40021000 	.word	0x40021000
 800095c:	40011000 	.word	0x40011000
 8000960:	40010800 	.word	0x40010800
 8000964:	40010c00 	.word	0x40010c00

08000968 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_IT(&huart1,uart_tx_msg,1);
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr

0800097a <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000982:	f009 fded 	bl	800a560 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000986:	2001      	movs	r0, #1
 8000988:	f007 fc07 	bl	800819a <osDelay>
 800098c:	e7fb      	b.n	8000986 <StartDefaultTask+0xc>

0800098e <storage_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_storage_f */
void storage_f(void const * argument)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b082      	sub	sp, #8
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN storage_f */
  //MX_FATFS_Init();
  osDelay(2000);
 8000996:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800099a:	f007 fbfe 	bl	800819a <osDelay>

  /* Infinite loop */
  for(;;)
  {
	//readDir();
    osDelay(200);
 800099e:	20c8      	movs	r0, #200	; 0xc8
 80009a0:	f007 fbfb 	bl	800819a <osDelay>
 80009a4:	e7fb      	b.n	800099e <storage_f+0x10>
	...

080009a8 <sensor_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensor_f */
void sensor_f(void const * argument)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensor_f */
  /* Infinite loop */
  /* USER CODE BEGIN 5 */

  MX_USB_HOST_Init();
 80009b0:	f009 fdd6 	bl	800a560 <MX_USB_HOST_Init>
  HAL_UART_Transmit(&huart1,(uint8_t*)"USB Start\r",10,100);
 80009b4:	2364      	movs	r3, #100	; 0x64
 80009b6:	220a      	movs	r2, #10
 80009b8:	491a      	ldr	r1, [pc, #104]	; (8000a24 <sensor_f+0x7c>)
 80009ba:	481b      	ldr	r0, [pc, #108]	; (8000a28 <sensor_f+0x80>)
 80009bc:	f003 ffbb 	bl	8004936 <HAL_UART_Transmit>

  osEvent event;
  /* Infinite loop */
  for(;;)
  {
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 80009c0:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <sensor_f+0x84>)
 80009c2:	6819      	ldr	r1, [r3, #0]
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	f04f 32ff 	mov.w	r2, #4294967295
 80009cc:	4618      	mov	r0, r3
 80009ce:	f007 fc61 	bl	8008294 <osMessageGet>

	  if(event.status == osEventMessage)
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	2b10      	cmp	r3, #16
 80009d6:	d120      	bne.n	8000a1a <sensor_f+0x72>
	  {
		switch(event.value.v)
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	2b03      	cmp	r3, #3
 80009dc:	d006      	beq.n	80009ec <sensor_f+0x44>
 80009de:	2b03      	cmp	r3, #3
 80009e0:	d81d      	bhi.n	8000a1e <sensor_f+0x76>
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d012      	beq.n	8000a0c <sensor_f+0x64>
 80009e6:	2b02      	cmp	r3, #2
 80009e8:	d007      	beq.n	80009fa <sensor_f+0x52>
		 case APPLICATION_START:
		   HAL_UART_Transmit(&huart1,"st",2,100);
		 break;

		 default:
		 break;
 80009ea:	e018      	b.n	8000a1e <sensor_f+0x76>
		  HAL_UART_Transmit(&huart1,"ds",2,100);
 80009ec:	2364      	movs	r3, #100	; 0x64
 80009ee:	2202      	movs	r2, #2
 80009f0:	490f      	ldr	r1, [pc, #60]	; (8000a30 <sensor_f+0x88>)
 80009f2:	480d      	ldr	r0, [pc, #52]	; (8000a28 <sensor_f+0x80>)
 80009f4:	f003 ff9f 	bl	8004936 <HAL_UART_Transmit>
		 break;
 80009f8:	e012      	b.n	8000a20 <sensor_f+0x78>
		   HAL_UART_Transmit(&huart1,"rd",2,100);
 80009fa:	2364      	movs	r3, #100	; 0x64
 80009fc:	2202      	movs	r2, #2
 80009fe:	490d      	ldr	r1, [pc, #52]	; (8000a34 <sensor_f+0x8c>)
 8000a00:	4809      	ldr	r0, [pc, #36]	; (8000a28 <sensor_f+0x80>)
 8000a02:	f003 ff98 	bl	8004936 <HAL_UART_Transmit>
		   send_function();
 8000a06:	f009 fd71 	bl	800a4ec <send_function>
		 break;
 8000a0a:	e009      	b.n	8000a20 <sensor_f+0x78>
		   HAL_UART_Transmit(&huart1,"st",2,100);
 8000a0c:	2364      	movs	r3, #100	; 0x64
 8000a0e:	2202      	movs	r2, #2
 8000a10:	4909      	ldr	r1, [pc, #36]	; (8000a38 <sensor_f+0x90>)
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <sensor_f+0x80>)
 8000a14:	f003 ff8f 	bl	8004936 <HAL_UART_Transmit>
		 break;
 8000a18:	e002      	b.n	8000a20 <sensor_f+0x78>
		 }
	   }
 8000a1a:	bf00      	nop
 8000a1c:	e7d0      	b.n	80009c0 <sensor_f+0x18>
		 break;
 8000a1e:	bf00      	nop
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 8000a20:	e7ce      	b.n	80009c0 <sensor_f+0x18>
 8000a22:	bf00      	nop
 8000a24:	0800af20 	.word	0x0800af20
 8000a28:	2000040c 	.word	0x2000040c
 8000a2c:	2000045c 	.word	0x2000045c
 8000a30:	0800af2c 	.word	0x0800af2c
 8000a34:	0800af30 	.word	0x0800af30
 8000a38:	0800af34 	.word	0x0800af34

08000a3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d101      	bne.n	8000a52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a4e:	f000 fa23 	bl	8000e98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40012c00 	.word	0x40012c00

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <Error_Handler+0x8>
	...

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a72:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <HAL_MspInit+0x68>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	4a17      	ldr	r2, [pc, #92]	; (8000ad4 <HAL_MspInit+0x68>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6193      	str	r3, [r2, #24]
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <HAL_MspInit+0x68>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_MspInit+0x68>)
 8000a8c:	69db      	ldr	r3, [r3, #28]
 8000a8e:	4a11      	ldr	r2, [pc, #68]	; (8000ad4 <HAL_MspInit+0x68>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a94:	61d3      	str	r3, [r2, #28]
 8000a96:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <HAL_MspInit+0x68>)
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	210f      	movs	r1, #15
 8000aa6:	f06f 0001 	mvn.w	r0, #1
 8000aaa:	f000 faea 	bl	8001082 <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <HAL_MspInit+0x6c>)
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <HAL_MspInit+0x6c>)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aca:	bf00      	nop
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	40010000 	.word	0x40010000

08000adc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a26      	ldr	r2, [pc, #152]	; (8000b90 <HAL_SPI_MspInit+0xb4>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d145      	bne.n	8000b88 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000afc:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <HAL_SPI_MspInit+0xb8>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a24      	ldr	r2, [pc, #144]	; (8000b94 <HAL_SPI_MspInit+0xb8>)
 8000b02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <HAL_SPI_MspInit+0xb8>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b14:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <HAL_SPI_MspInit+0xb8>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	4a1e      	ldr	r2, [pc, #120]	; (8000b94 <HAL_SPI_MspInit+0xb8>)
 8000b1a:	f043 0308 	orr.w	r3, r3, #8
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <HAL_SPI_MspInit+0xb8>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f003 0308 	and.w	r3, r3, #8
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000b2c:	2328      	movs	r3, #40	; 0x28
 8000b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4816      	ldr	r0, [pc, #88]	; (8000b98 <HAL_SPI_MspInit+0xbc>)
 8000b40:	f000 fc0c 	bl	800135c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b44:	2310      	movs	r3, #16
 8000b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	4810      	ldr	r0, [pc, #64]	; (8000b98 <HAL_SPI_MspInit+0xbc>)
 8000b58:	f000 fc00 	bl	800135c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <HAL_SPI_MspInit+0xc0>)
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
 8000b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b64:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
 8000b72:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <HAL_SPI_MspInit+0xc0>)
 8000b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b76:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2105      	movs	r1, #5
 8000b7c:	2023      	movs	r0, #35	; 0x23
 8000b7e:	f000 fa80 	bl	8001082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000b82:	2023      	movs	r0, #35	; 0x23
 8000b84:	f000 fa99 	bl	80010ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b88:	bf00      	nop
 8000b8a:	3728      	adds	r7, #40	; 0x28
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40013000 	.word	0x40013000
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40010c00 	.word	0x40010c00
 8000b9c:	40010000 	.word	0x40010000

08000ba0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bb0:	d10b      	bne.n	8000bca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <HAL_TIM_Base_MspInit+0x34>)
 8000bb4:	69db      	ldr	r3, [r3, #28]
 8000bb6:	4a07      	ldr	r2, [pc, #28]	; (8000bd4 <HAL_TIM_Base_MspInit+0x34>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	61d3      	str	r3, [r2, #28]
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <HAL_TIM_Base_MspInit+0x34>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bca:	bf00      	nop
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a20      	ldr	r2, [pc, #128]	; (8000c74 <HAL_UART_MspInit+0x9c>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d139      	bne.n	8000c6c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bf8:	4b1f      	ldr	r3, [pc, #124]	; (8000c78 <HAL_UART_MspInit+0xa0>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	4a1e      	ldr	r2, [pc, #120]	; (8000c78 <HAL_UART_MspInit+0xa0>)
 8000bfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c02:	6193      	str	r3, [r2, #24]
 8000c04:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <HAL_UART_MspInit+0xa0>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <HAL_UART_MspInit+0xa0>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	4a18      	ldr	r2, [pc, #96]	; (8000c78 <HAL_UART_MspInit+0xa0>)
 8000c16:	f043 0304 	orr.w	r3, r3, #4
 8000c1a:	6193      	str	r3, [r2, #24]
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <HAL_UART_MspInit+0xa0>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c32:	2303      	movs	r3, #3
 8000c34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	f107 0310 	add.w	r3, r7, #16
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480f      	ldr	r0, [pc, #60]	; (8000c7c <HAL_UART_MspInit+0xa4>)
 8000c3e:	f000 fb8d 	bl	800135c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c50:	f107 0310 	add.w	r3, r7, #16
 8000c54:	4619      	mov	r1, r3
 8000c56:	4809      	ldr	r0, [pc, #36]	; (8000c7c <HAL_UART_MspInit+0xa4>)
 8000c58:	f000 fb80 	bl	800135c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2105      	movs	r1, #5
 8000c60:	2025      	movs	r0, #37	; 0x25
 8000c62:	f000 fa0e 	bl	8001082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c66:	2025      	movs	r0, #37	; 0x25
 8000c68:	f000 fa27 	bl	80010ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c6c:	bf00      	nop
 8000c6e:	3720      	adds	r7, #32
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40013800 	.word	0x40013800
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40010800 	.word	0x40010800

08000c80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08c      	sub	sp, #48	; 0x30
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000c90:	2200      	movs	r2, #0
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	2019      	movs	r0, #25
 8000c96:	f000 f9f4 	bl	8001082 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000c9a:	2019      	movs	r0, #25
 8000c9c:	f000 fa0d 	bl	80010ba <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ca0:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <HAL_InitTick+0x9c>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a1d      	ldr	r2, [pc, #116]	; (8000d1c <HAL_InitTick+0x9c>)
 8000ca6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <HAL_InitTick+0x9c>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cb8:	f107 0210 	add.w	r2, r7, #16
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4611      	mov	r1, r2
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f002 fed0 	bl	8003a68 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000cc8:	f002 feba 	bl	8003a40 <HAL_RCC_GetPCLK2Freq>
 8000ccc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd0:	4a13      	ldr	r2, [pc, #76]	; (8000d20 <HAL_InitTick+0xa0>)
 8000cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd6:	0c9b      	lsrs	r3, r3, #18
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <HAL_InitTick+0xa4>)
 8000cde:	4a12      	ldr	r2, [pc, #72]	; (8000d28 <HAL_InitTick+0xa8>)
 8000ce0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <HAL_InitTick+0xa4>)
 8000ce4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ce8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cea:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <HAL_InitTick+0xa4>)
 8000cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <HAL_InitTick+0xa4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_InitTick+0xa4>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000cfc:	4809      	ldr	r0, [pc, #36]	; (8000d24 <HAL_InitTick+0xa4>)
 8000cfe:	f003 f9ba 	bl	8004076 <HAL_TIM_Base_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d104      	bne.n	8000d12 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d08:	4806      	ldr	r0, [pc, #24]	; (8000d24 <HAL_InitTick+0xa4>)
 8000d0a:	f003 fa03 	bl	8004114 <HAL_TIM_Base_Start_IT>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	e000      	b.n	8000d14 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3730      	adds	r7, #48	; 0x30
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	431bde83 	.word	0x431bde83
 8000d24:	20000460 	.word	0x20000460
 8000d28:	40012c00 	.word	0x40012c00

08000d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <NMI_Handler+0x4>

08000d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <HardFault_Handler+0x4>

08000d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <MemManage_Handler+0x4>

08000d3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <BusFault_Handler+0x4>

08000d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <UsageFault_Handler+0x4>

08000d4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr
	...

08000d58 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <TIM1_UP_IRQHandler+0x10>)
 8000d5e:	f003 fa33 	bl	80041c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000460 	.word	0x20000460

08000d6c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000d70:	4802      	ldr	r0, [pc, #8]	; (8000d7c <SPI1_IRQHandler+0x10>)
 8000d72:	f003 f87d 	bl	8003e70 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2000036c 	.word	0x2000036c

08000d80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d84:	4802      	ldr	r0, [pc, #8]	; (8000d90 <USART1_IRQHandler+0x10>)
 8000d86:	f003 fead 	bl	8004ae4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	2000040c 	.word	0x2000040c

08000d94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <OTG_FS_IRQHandler+0x10>)
 8000d9a:	f000 fee1 	bl	8001b60 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200038d4 	.word	0x200038d4

08000da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db0:	4a14      	ldr	r2, [pc, #80]	; (8000e04 <_sbrk+0x5c>)
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <_sbrk+0x60>)
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <_sbrk+0x64>)
 8000dc6:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <_sbrk+0x68>)
 8000dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d207      	bcs.n	8000de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd8:	f009 fe94 	bl	800ab04 <__errno>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	220c      	movs	r2, #12
 8000de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295
 8000de6:	e009      	b.n	8000dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <_sbrk+0x64>)
 8000df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20010000 	.word	0x20010000
 8000e08:	00000400 	.word	0x00000400
 8000e0c:	200004a8 	.word	0x200004a8
 8000e10:	20003be8 	.word	0x20003be8

08000e14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e20:	480c      	ldr	r0, [pc, #48]	; (8000e54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e22:	490d      	ldr	r1, [pc, #52]	; (8000e58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e24:	4a0d      	ldr	r2, [pc, #52]	; (8000e5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e38:	4c0a      	ldr	r4, [pc, #40]	; (8000e64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e46:	f7ff ffe5 	bl	8000e14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f009 fe61 	bl	800ab10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e4e:	f7ff fb8b 	bl	8000568 <main>
  bx lr
 8000e52:	4770      	bx	lr
  ldr r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e58:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8000e5c:	0800b024 	.word	0x0800b024
  ldr r2, =_sbss
 8000e60:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8000e64:	20003be8 	.word	0x20003be8

08000e68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC1_2_IRQHandler>
	...

08000e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <HAL_Init+0x28>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a07      	ldr	r2, [pc, #28]	; (8000e94 <HAL_Init+0x28>)
 8000e76:	f043 0310 	orr.w	r3, r3, #16
 8000e7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	f000 f8f5 	bl	800106c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e82:	200f      	movs	r0, #15
 8000e84:	f7ff fefc 	bl	8000c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e88:	f7ff fdf0 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40022000 	.word	0x40022000

08000e98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <HAL_IncTick+0x1c>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <HAL_IncTick+0x20>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a03      	ldr	r2, [pc, #12]	; (8000eb8 <HAL_IncTick+0x20>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr
 8000eb4:	20000008 	.word	0x20000008
 8000eb8:	200004ac 	.word	0x200004ac

08000ebc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec0:	4b02      	ldr	r3, [pc, #8]	; (8000ecc <HAL_GetTick+0x10>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr
 8000ecc:	200004ac 	.word	0x200004ac

08000ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed8:	f7ff fff0 	bl	8000ebc <HAL_GetTick>
 8000edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee8:	d005      	beq.n	8000ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <HAL_Delay+0x44>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ef6:	bf00      	nop
 8000ef8:	f7ff ffe0 	bl	8000ebc <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d8f7      	bhi.n	8000ef8 <HAL_Delay+0x28>
  {
  }
}
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000008 	.word	0x20000008

08000f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f34:	4013      	ands	r3, r2
 8000f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4a:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	60d3      	str	r3, [r2, #12]
}
 8000f50:	bf00      	nop
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <__NVIC_GetPriorityGrouping+0x18>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	0a1b      	lsrs	r3, r3, #8
 8000f6a:	f003 0307 	and.w	r3, r3, #7
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	db0b      	blt.n	8000fa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	f003 021f 	and.w	r2, r3, #31
 8000f94:	4906      	ldr	r1, [pc, #24]	; (8000fb0 <__NVIC_EnableIRQ+0x34>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	095b      	lsrs	r3, r3, #5
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	e000e100 	.word	0xe000e100

08000fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	db0a      	blt.n	8000fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	490c      	ldr	r1, [pc, #48]	; (8001000 <__NVIC_SetPriority+0x4c>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	0112      	lsls	r2, r2, #4
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fdc:	e00a      	b.n	8000ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4908      	ldr	r1, [pc, #32]	; (8001004 <__NVIC_SetPriority+0x50>)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	f003 030f 	and.w	r3, r3, #15
 8000fea:	3b04      	subs	r3, #4
 8000fec:	0112      	lsls	r2, r2, #4
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	761a      	strb	r2, [r3, #24]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000e100 	.word	0xe000e100
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	; 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f1c3 0307 	rsb	r3, r3, #7
 8001022:	2b04      	cmp	r3, #4
 8001024:	bf28      	it	cs
 8001026:	2304      	movcs	r3, #4
 8001028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3304      	adds	r3, #4
 800102e:	2b06      	cmp	r3, #6
 8001030:	d902      	bls.n	8001038 <NVIC_EncodePriority+0x30>
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3b03      	subs	r3, #3
 8001036:	e000      	b.n	800103a <NVIC_EncodePriority+0x32>
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	f04f 32ff 	mov.w	r2, #4294967295
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43da      	mvns	r2, r3
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	401a      	ands	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001050:	f04f 31ff 	mov.w	r1, #4294967295
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa01 f303 	lsl.w	r3, r1, r3
 800105a:	43d9      	mvns	r1, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	4313      	orrs	r3, r2
         );
}
 8001062:	4618      	mov	r0, r3
 8001064:	3724      	adds	r7, #36	; 0x24
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ff4f 	bl	8000f18 <__NVIC_SetPriorityGrouping>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001082:	b580      	push	{r7, lr}
 8001084:	b086      	sub	sp, #24
 8001086:	af00      	add	r7, sp, #0
 8001088:	4603      	mov	r3, r0
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001094:	f7ff ff64 	bl	8000f60 <__NVIC_GetPriorityGrouping>
 8001098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	68b9      	ldr	r1, [r7, #8]
 800109e:	6978      	ldr	r0, [r7, #20]
 80010a0:	f7ff ffb2 	bl	8001008 <NVIC_EncodePriority>
 80010a4:	4602      	mov	r2, r0
 80010a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff81 	bl	8000fb4 <__NVIC_SetPriority>
}
 80010b2:	bf00      	nop
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff57 	bl	8000f7c <__NVIC_EnableIRQ>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b085      	sub	sp, #20
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d008      	beq.n	80010fe <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2204      	movs	r2, #4
 80010f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e020      	b.n	8001140 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 020e 	bic.w	r2, r2, #14
 800110c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f022 0201 	bic.w	r2, r2, #1
 800111c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001126:	2101      	movs	r1, #1
 8001128:	fa01 f202 	lsl.w	r2, r1, r2
 800112c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800113e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr
	...

0800114c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001154:	2300      	movs	r3, #0
 8001156:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800115e:	2b02      	cmp	r3, #2
 8001160:	d005      	beq.n	800116e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2204      	movs	r2, #4
 8001166:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	73fb      	strb	r3, [r7, #15]
 800116c:	e0d6      	b.n	800131c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 020e 	bic.w	r2, r2, #14
 800117c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 0201 	bic.w	r2, r2, #1
 800118c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	4b64      	ldr	r3, [pc, #400]	; (8001328 <HAL_DMA_Abort_IT+0x1dc>)
 8001196:	429a      	cmp	r2, r3
 8001198:	d958      	bls.n	800124c <HAL_DMA_Abort_IT+0x100>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a63      	ldr	r2, [pc, #396]	; (800132c <HAL_DMA_Abort_IT+0x1e0>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d04f      	beq.n	8001244 <HAL_DMA_Abort_IT+0xf8>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a61      	ldr	r2, [pc, #388]	; (8001330 <HAL_DMA_Abort_IT+0x1e4>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d048      	beq.n	8001240 <HAL_DMA_Abort_IT+0xf4>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a60      	ldr	r2, [pc, #384]	; (8001334 <HAL_DMA_Abort_IT+0x1e8>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d040      	beq.n	800123a <HAL_DMA_Abort_IT+0xee>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a5e      	ldr	r2, [pc, #376]	; (8001338 <HAL_DMA_Abort_IT+0x1ec>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d038      	beq.n	8001234 <HAL_DMA_Abort_IT+0xe8>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a5d      	ldr	r2, [pc, #372]	; (800133c <HAL_DMA_Abort_IT+0x1f0>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d030      	beq.n	800122e <HAL_DMA_Abort_IT+0xe2>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a5b      	ldr	r2, [pc, #364]	; (8001340 <HAL_DMA_Abort_IT+0x1f4>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d028      	beq.n	8001228 <HAL_DMA_Abort_IT+0xdc>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a53      	ldr	r2, [pc, #332]	; (8001328 <HAL_DMA_Abort_IT+0x1dc>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d020      	beq.n	8001222 <HAL_DMA_Abort_IT+0xd6>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a57      	ldr	r2, [pc, #348]	; (8001344 <HAL_DMA_Abort_IT+0x1f8>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d019      	beq.n	800121e <HAL_DMA_Abort_IT+0xd2>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a56      	ldr	r2, [pc, #344]	; (8001348 <HAL_DMA_Abort_IT+0x1fc>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d012      	beq.n	800121a <HAL_DMA_Abort_IT+0xce>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a54      	ldr	r2, [pc, #336]	; (800134c <HAL_DMA_Abort_IT+0x200>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d00a      	beq.n	8001214 <HAL_DMA_Abort_IT+0xc8>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a53      	ldr	r2, [pc, #332]	; (8001350 <HAL_DMA_Abort_IT+0x204>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d102      	bne.n	800120e <HAL_DMA_Abort_IT+0xc2>
 8001208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120c:	e01b      	b.n	8001246 <HAL_DMA_Abort_IT+0xfa>
 800120e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001212:	e018      	b.n	8001246 <HAL_DMA_Abort_IT+0xfa>
 8001214:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001218:	e015      	b.n	8001246 <HAL_DMA_Abort_IT+0xfa>
 800121a:	2310      	movs	r3, #16
 800121c:	e013      	b.n	8001246 <HAL_DMA_Abort_IT+0xfa>
 800121e:	2301      	movs	r3, #1
 8001220:	e011      	b.n	8001246 <HAL_DMA_Abort_IT+0xfa>
 8001222:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001226:	e00e      	b.n	8001246 <HAL_DMA_Abort_IT+0xfa>
 8001228:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800122c:	e00b      	b.n	8001246 <HAL_DMA_Abort_IT+0xfa>
 800122e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001232:	e008      	b.n	8001246 <HAL_DMA_Abort_IT+0xfa>
 8001234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001238:	e005      	b.n	8001246 <HAL_DMA_Abort_IT+0xfa>
 800123a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800123e:	e002      	b.n	8001246 <HAL_DMA_Abort_IT+0xfa>
 8001240:	2310      	movs	r3, #16
 8001242:	e000      	b.n	8001246 <HAL_DMA_Abort_IT+0xfa>
 8001244:	2301      	movs	r3, #1
 8001246:	4a43      	ldr	r2, [pc, #268]	; (8001354 <HAL_DMA_Abort_IT+0x208>)
 8001248:	6053      	str	r3, [r2, #4]
 800124a:	e057      	b.n	80012fc <HAL_DMA_Abort_IT+0x1b0>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a36      	ldr	r2, [pc, #216]	; (800132c <HAL_DMA_Abort_IT+0x1e0>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d04f      	beq.n	80012f6 <HAL_DMA_Abort_IT+0x1aa>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a35      	ldr	r2, [pc, #212]	; (8001330 <HAL_DMA_Abort_IT+0x1e4>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d048      	beq.n	80012f2 <HAL_DMA_Abort_IT+0x1a6>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a33      	ldr	r2, [pc, #204]	; (8001334 <HAL_DMA_Abort_IT+0x1e8>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d040      	beq.n	80012ec <HAL_DMA_Abort_IT+0x1a0>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a32      	ldr	r2, [pc, #200]	; (8001338 <HAL_DMA_Abort_IT+0x1ec>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d038      	beq.n	80012e6 <HAL_DMA_Abort_IT+0x19a>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a30      	ldr	r2, [pc, #192]	; (800133c <HAL_DMA_Abort_IT+0x1f0>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d030      	beq.n	80012e0 <HAL_DMA_Abort_IT+0x194>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a2f      	ldr	r2, [pc, #188]	; (8001340 <HAL_DMA_Abort_IT+0x1f4>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d028      	beq.n	80012da <HAL_DMA_Abort_IT+0x18e>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a26      	ldr	r2, [pc, #152]	; (8001328 <HAL_DMA_Abort_IT+0x1dc>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d020      	beq.n	80012d4 <HAL_DMA_Abort_IT+0x188>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a2b      	ldr	r2, [pc, #172]	; (8001344 <HAL_DMA_Abort_IT+0x1f8>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d019      	beq.n	80012d0 <HAL_DMA_Abort_IT+0x184>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a29      	ldr	r2, [pc, #164]	; (8001348 <HAL_DMA_Abort_IT+0x1fc>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d012      	beq.n	80012cc <HAL_DMA_Abort_IT+0x180>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a28      	ldr	r2, [pc, #160]	; (800134c <HAL_DMA_Abort_IT+0x200>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d00a      	beq.n	80012c6 <HAL_DMA_Abort_IT+0x17a>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a26      	ldr	r2, [pc, #152]	; (8001350 <HAL_DMA_Abort_IT+0x204>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d102      	bne.n	80012c0 <HAL_DMA_Abort_IT+0x174>
 80012ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012be:	e01b      	b.n	80012f8 <HAL_DMA_Abort_IT+0x1ac>
 80012c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012c4:	e018      	b.n	80012f8 <HAL_DMA_Abort_IT+0x1ac>
 80012c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ca:	e015      	b.n	80012f8 <HAL_DMA_Abort_IT+0x1ac>
 80012cc:	2310      	movs	r3, #16
 80012ce:	e013      	b.n	80012f8 <HAL_DMA_Abort_IT+0x1ac>
 80012d0:	2301      	movs	r3, #1
 80012d2:	e011      	b.n	80012f8 <HAL_DMA_Abort_IT+0x1ac>
 80012d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012d8:	e00e      	b.n	80012f8 <HAL_DMA_Abort_IT+0x1ac>
 80012da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012de:	e00b      	b.n	80012f8 <HAL_DMA_Abort_IT+0x1ac>
 80012e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e4:	e008      	b.n	80012f8 <HAL_DMA_Abort_IT+0x1ac>
 80012e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ea:	e005      	b.n	80012f8 <HAL_DMA_Abort_IT+0x1ac>
 80012ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f0:	e002      	b.n	80012f8 <HAL_DMA_Abort_IT+0x1ac>
 80012f2:	2310      	movs	r3, #16
 80012f4:	e000      	b.n	80012f8 <HAL_DMA_Abort_IT+0x1ac>
 80012f6:	2301      	movs	r3, #1
 80012f8:	4a17      	ldr	r2, [pc, #92]	; (8001358 <HAL_DMA_Abort_IT+0x20c>)
 80012fa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2201      	movs	r2, #1
 8001300:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	4798      	blx	r3
    } 
  }
  return status;
 800131c:	7bfb      	ldrb	r3, [r7, #15]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40020080 	.word	0x40020080
 800132c:	40020008 	.word	0x40020008
 8001330:	4002001c 	.word	0x4002001c
 8001334:	40020030 	.word	0x40020030
 8001338:	40020044 	.word	0x40020044
 800133c:	40020058 	.word	0x40020058
 8001340:	4002006c 	.word	0x4002006c
 8001344:	40020408 	.word	0x40020408
 8001348:	4002041c 	.word	0x4002041c
 800134c:	40020430 	.word	0x40020430
 8001350:	40020444 	.word	0x40020444
 8001354:	40020400 	.word	0x40020400
 8001358:	40020000 	.word	0x40020000

0800135c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800135c:	b480      	push	{r7}
 800135e:	b08b      	sub	sp, #44	; 0x2c
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800136e:	e169      	b.n	8001644 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001370:	2201      	movs	r2, #1
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	69fa      	ldr	r2, [r7, #28]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	429a      	cmp	r2, r3
 800138a:	f040 8158 	bne.w	800163e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	4a9a      	ldr	r2, [pc, #616]	; (80015fc <HAL_GPIO_Init+0x2a0>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d05e      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
 8001398:	4a98      	ldr	r2, [pc, #608]	; (80015fc <HAL_GPIO_Init+0x2a0>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d875      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 800139e:	4a98      	ldr	r2, [pc, #608]	; (8001600 <HAL_GPIO_Init+0x2a4>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d058      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
 80013a4:	4a96      	ldr	r2, [pc, #600]	; (8001600 <HAL_GPIO_Init+0x2a4>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d86f      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 80013aa:	4a96      	ldr	r2, [pc, #600]	; (8001604 <HAL_GPIO_Init+0x2a8>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d052      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
 80013b0:	4a94      	ldr	r2, [pc, #592]	; (8001604 <HAL_GPIO_Init+0x2a8>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d869      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 80013b6:	4a94      	ldr	r2, [pc, #592]	; (8001608 <HAL_GPIO_Init+0x2ac>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d04c      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
 80013bc:	4a92      	ldr	r2, [pc, #584]	; (8001608 <HAL_GPIO_Init+0x2ac>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d863      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 80013c2:	4a92      	ldr	r2, [pc, #584]	; (800160c <HAL_GPIO_Init+0x2b0>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d046      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
 80013c8:	4a90      	ldr	r2, [pc, #576]	; (800160c <HAL_GPIO_Init+0x2b0>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d85d      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 80013ce:	2b12      	cmp	r3, #18
 80013d0:	d82a      	bhi.n	8001428 <HAL_GPIO_Init+0xcc>
 80013d2:	2b12      	cmp	r3, #18
 80013d4:	d859      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 80013d6:	a201      	add	r2, pc, #4	; (adr r2, 80013dc <HAL_GPIO_Init+0x80>)
 80013d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013dc:	08001457 	.word	0x08001457
 80013e0:	08001431 	.word	0x08001431
 80013e4:	08001443 	.word	0x08001443
 80013e8:	08001485 	.word	0x08001485
 80013ec:	0800148b 	.word	0x0800148b
 80013f0:	0800148b 	.word	0x0800148b
 80013f4:	0800148b 	.word	0x0800148b
 80013f8:	0800148b 	.word	0x0800148b
 80013fc:	0800148b 	.word	0x0800148b
 8001400:	0800148b 	.word	0x0800148b
 8001404:	0800148b 	.word	0x0800148b
 8001408:	0800148b 	.word	0x0800148b
 800140c:	0800148b 	.word	0x0800148b
 8001410:	0800148b 	.word	0x0800148b
 8001414:	0800148b 	.word	0x0800148b
 8001418:	0800148b 	.word	0x0800148b
 800141c:	0800148b 	.word	0x0800148b
 8001420:	08001439 	.word	0x08001439
 8001424:	0800144d 	.word	0x0800144d
 8001428:	4a79      	ldr	r2, [pc, #484]	; (8001610 <HAL_GPIO_Init+0x2b4>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d013      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800142e:	e02c      	b.n	800148a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	623b      	str	r3, [r7, #32]
          break;
 8001436:	e029      	b.n	800148c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	3304      	adds	r3, #4
 800143e:	623b      	str	r3, [r7, #32]
          break;
 8001440:	e024      	b.n	800148c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	3308      	adds	r3, #8
 8001448:	623b      	str	r3, [r7, #32]
          break;
 800144a:	e01f      	b.n	800148c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	330c      	adds	r3, #12
 8001452:	623b      	str	r3, [r7, #32]
          break;
 8001454:	e01a      	b.n	800148c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d102      	bne.n	8001464 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800145e:	2304      	movs	r3, #4
 8001460:	623b      	str	r3, [r7, #32]
          break;
 8001462:	e013      	b.n	800148c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d105      	bne.n	8001478 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800146c:	2308      	movs	r3, #8
 800146e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69fa      	ldr	r2, [r7, #28]
 8001474:	611a      	str	r2, [r3, #16]
          break;
 8001476:	e009      	b.n	800148c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001478:	2308      	movs	r3, #8
 800147a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69fa      	ldr	r2, [r7, #28]
 8001480:	615a      	str	r2, [r3, #20]
          break;
 8001482:	e003      	b.n	800148c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
          break;
 8001488:	e000      	b.n	800148c <HAL_GPIO_Init+0x130>
          break;
 800148a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	2bff      	cmp	r3, #255	; 0xff
 8001490:	d801      	bhi.n	8001496 <HAL_GPIO_Init+0x13a>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	e001      	b.n	800149a <HAL_GPIO_Init+0x13e>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3304      	adds	r3, #4
 800149a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	2bff      	cmp	r3, #255	; 0xff
 80014a0:	d802      	bhi.n	80014a8 <HAL_GPIO_Init+0x14c>
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	e002      	b.n	80014ae <HAL_GPIO_Init+0x152>
 80014a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014aa:	3b08      	subs	r3, #8
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	210f      	movs	r1, #15
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	fa01 f303 	lsl.w	r3, r1, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	401a      	ands	r2, r3
 80014c0:	6a39      	ldr	r1, [r7, #32]
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	fa01 f303 	lsl.w	r3, r1, r3
 80014c8:	431a      	orrs	r2, r3
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 80b1 	beq.w	800163e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014dc:	4b4d      	ldr	r3, [pc, #308]	; (8001614 <HAL_GPIO_Init+0x2b8>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	4a4c      	ldr	r2, [pc, #304]	; (8001614 <HAL_GPIO_Init+0x2b8>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6193      	str	r3, [r2, #24]
 80014e8:	4b4a      	ldr	r3, [pc, #296]	; (8001614 <HAL_GPIO_Init+0x2b8>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014f4:	4a48      	ldr	r2, [pc, #288]	; (8001618 <HAL_GPIO_Init+0x2bc>)
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001500:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	220f      	movs	r2, #15
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	4013      	ands	r3, r2
 8001516:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a40      	ldr	r2, [pc, #256]	; (800161c <HAL_GPIO_Init+0x2c0>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d013      	beq.n	8001548 <HAL_GPIO_Init+0x1ec>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a3f      	ldr	r2, [pc, #252]	; (8001620 <HAL_GPIO_Init+0x2c4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d00d      	beq.n	8001544 <HAL_GPIO_Init+0x1e8>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a3e      	ldr	r2, [pc, #248]	; (8001624 <HAL_GPIO_Init+0x2c8>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d007      	beq.n	8001540 <HAL_GPIO_Init+0x1e4>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a3d      	ldr	r2, [pc, #244]	; (8001628 <HAL_GPIO_Init+0x2cc>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d101      	bne.n	800153c <HAL_GPIO_Init+0x1e0>
 8001538:	2303      	movs	r3, #3
 800153a:	e006      	b.n	800154a <HAL_GPIO_Init+0x1ee>
 800153c:	2304      	movs	r3, #4
 800153e:	e004      	b.n	800154a <HAL_GPIO_Init+0x1ee>
 8001540:	2302      	movs	r3, #2
 8001542:	e002      	b.n	800154a <HAL_GPIO_Init+0x1ee>
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <HAL_GPIO_Init+0x1ee>
 8001548:	2300      	movs	r3, #0
 800154a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800154c:	f002 0203 	and.w	r2, r2, #3
 8001550:	0092      	lsls	r2, r2, #2
 8001552:	4093      	lsls	r3, r2
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	4313      	orrs	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800155a:	492f      	ldr	r1, [pc, #188]	; (8001618 <HAL_GPIO_Init+0x2bc>)
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	3302      	adds	r3, #2
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d006      	beq.n	8001582 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001574:	4b2d      	ldr	r3, [pc, #180]	; (800162c <HAL_GPIO_Init+0x2d0>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	492c      	ldr	r1, [pc, #176]	; (800162c <HAL_GPIO_Init+0x2d0>)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	600b      	str	r3, [r1, #0]
 8001580:	e006      	b.n	8001590 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001582:	4b2a      	ldr	r3, [pc, #168]	; (800162c <HAL_GPIO_Init+0x2d0>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	43db      	mvns	r3, r3
 800158a:	4928      	ldr	r1, [pc, #160]	; (800162c <HAL_GPIO_Init+0x2d0>)
 800158c:	4013      	ands	r3, r2
 800158e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d006      	beq.n	80015aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800159c:	4b23      	ldr	r3, [pc, #140]	; (800162c <HAL_GPIO_Init+0x2d0>)
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	4922      	ldr	r1, [pc, #136]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	604b      	str	r3, [r1, #4]
 80015a8:	e006      	b.n	80015b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015aa:	4b20      	ldr	r3, [pc, #128]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	491e      	ldr	r1, [pc, #120]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d006      	beq.n	80015d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015c4:	4b19      	ldr	r3, [pc, #100]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	4918      	ldr	r1, [pc, #96]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	608b      	str	r3, [r1, #8]
 80015d0:	e006      	b.n	80015e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	43db      	mvns	r3, r3
 80015da:	4914      	ldr	r1, [pc, #80]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015dc:	4013      	ands	r3, r2
 80015de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d021      	beq.n	8001630 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	490e      	ldr	r1, [pc, #56]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	60cb      	str	r3, [r1, #12]
 80015f8:	e021      	b.n	800163e <HAL_GPIO_Init+0x2e2>
 80015fa:	bf00      	nop
 80015fc:	10320000 	.word	0x10320000
 8001600:	10310000 	.word	0x10310000
 8001604:	10220000 	.word	0x10220000
 8001608:	10210000 	.word	0x10210000
 800160c:	10120000 	.word	0x10120000
 8001610:	10110000 	.word	0x10110000
 8001614:	40021000 	.word	0x40021000
 8001618:	40010000 	.word	0x40010000
 800161c:	40010800 	.word	0x40010800
 8001620:	40010c00 	.word	0x40010c00
 8001624:	40011000 	.word	0x40011000
 8001628:	40011400 	.word	0x40011400
 800162c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_GPIO_Init+0x304>)
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	43db      	mvns	r3, r3
 8001638:	4909      	ldr	r1, [pc, #36]	; (8001660 <HAL_GPIO_Init+0x304>)
 800163a:	4013      	ands	r3, r2
 800163c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	3301      	adds	r3, #1
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	fa22 f303 	lsr.w	r3, r2, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	f47f ae8e 	bne.w	8001370 <HAL_GPIO_Init+0x14>
  }
}
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	372c      	adds	r7, #44	; 0x2c
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	40010400 	.word	0x40010400

08001664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]
 8001670:	4613      	mov	r3, r2
 8001672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001674:	787b      	ldrb	r3, [r7, #1]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800167a:	887a      	ldrh	r2, [r7, #2]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001680:	e003      	b.n	800168a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001682:	887b      	ldrh	r3, [r7, #2]
 8001684:	041a      	lsls	r2, r3, #16
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	611a      	str	r2, [r3, #16]
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001696:	b08f      	sub	sp, #60	; 0x3c
 8001698:	af0a      	add	r7, sp, #40	; 0x28
 800169a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e054      	b.n	8001750 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d106      	bne.n	80016c6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f008 ffb5 	bl	800a630 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2203      	movs	r2, #3
 80016ca:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d102      	bne.n	80016e0 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f003 fe1f 	bl	8005328 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	687e      	ldr	r6, [r7, #4]
 80016f2:	466d      	mov	r5, sp
 80016f4:	f106 0410 	add.w	r4, r6, #16
 80016f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001700:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001704:	e885 0003 	stmia.w	r5, {r0, r1}
 8001708:	1d33      	adds	r3, r6, #4
 800170a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800170c:	6838      	ldr	r0, [r7, #0]
 800170e:	f003 fdd9 	bl	80052c4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2101      	movs	r1, #1
 8001718:	4618      	mov	r0, r3
 800171a:	f003 fe15 	bl	8005348 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	687e      	ldr	r6, [r7, #4]
 8001726:	466d      	mov	r5, sp
 8001728:	f106 0410 	add.w	r4, r6, #16
 800172c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800172e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001732:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001734:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001738:	e885 0003 	stmia.w	r5, {r0, r1}
 800173c:	1d33      	adds	r3, r6, #4
 800173e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001740:	6838      	ldr	r0, [r7, #0]
 8001742:	f003 ff73 	bl	800562c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001758 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001758:	b590      	push	{r4, r7, lr}
 800175a:	b089      	sub	sp, #36	; 0x24
 800175c:	af04      	add	r7, sp, #16
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	4608      	mov	r0, r1
 8001762:	4611      	mov	r1, r2
 8001764:	461a      	mov	r2, r3
 8001766:	4603      	mov	r3, r0
 8001768:	70fb      	strb	r3, [r7, #3]
 800176a:	460b      	mov	r3, r1
 800176c:	70bb      	strb	r3, [r7, #2]
 800176e:	4613      	mov	r3, r2
 8001770:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001778:	2b01      	cmp	r3, #1
 800177a:	d101      	bne.n	8001780 <HAL_HCD_HC_Init+0x28>
 800177c:	2302      	movs	r3, #2
 800177e:	e076      	b.n	800186e <HAL_HCD_HC_Init+0x116>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001788:	78fb      	ldrb	r3, [r7, #3]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	212c      	movs	r1, #44	; 0x2c
 800178e:	fb01 f303 	mul.w	r3, r1, r3
 8001792:	4413      	add	r3, r2
 8001794:	333d      	adds	r3, #61	; 0x3d
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	212c      	movs	r1, #44	; 0x2c
 80017a0:	fb01 f303 	mul.w	r3, r1, r3
 80017a4:	4413      	add	r3, r2
 80017a6:	3338      	adds	r3, #56	; 0x38
 80017a8:	787a      	ldrb	r2, [r7, #1]
 80017aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80017ac:	78fb      	ldrb	r3, [r7, #3]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	212c      	movs	r1, #44	; 0x2c
 80017b2:	fb01 f303 	mul.w	r3, r1, r3
 80017b6:	4413      	add	r3, r2
 80017b8:	3340      	adds	r3, #64	; 0x40
 80017ba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80017bc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80017be:	78fb      	ldrb	r3, [r7, #3]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	212c      	movs	r1, #44	; 0x2c
 80017c4:	fb01 f303 	mul.w	r3, r1, r3
 80017c8:	4413      	add	r3, r2
 80017ca:	3339      	adds	r3, #57	; 0x39
 80017cc:	78fa      	ldrb	r2, [r7, #3]
 80017ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80017d0:	78fb      	ldrb	r3, [r7, #3]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	212c      	movs	r1, #44	; 0x2c
 80017d6:	fb01 f303 	mul.w	r3, r1, r3
 80017da:	4413      	add	r3, r2
 80017dc:	333f      	adds	r3, #63	; 0x3f
 80017de:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80017e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80017e4:	78fb      	ldrb	r3, [r7, #3]
 80017e6:	78ba      	ldrb	r2, [r7, #2]
 80017e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80017ec:	b2d0      	uxtb	r0, r2
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	212c      	movs	r1, #44	; 0x2c
 80017f2:	fb01 f303 	mul.w	r3, r1, r3
 80017f6:	4413      	add	r3, r2
 80017f8:	333a      	adds	r3, #58	; 0x3a
 80017fa:	4602      	mov	r2, r0
 80017fc:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80017fe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001802:	2b00      	cmp	r3, #0
 8001804:	da09      	bge.n	800181a <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001806:	78fb      	ldrb	r3, [r7, #3]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	212c      	movs	r1, #44	; 0x2c
 800180c:	fb01 f303 	mul.w	r3, r1, r3
 8001810:	4413      	add	r3, r2
 8001812:	333b      	adds	r3, #59	; 0x3b
 8001814:	2201      	movs	r2, #1
 8001816:	701a      	strb	r2, [r3, #0]
 8001818:	e008      	b.n	800182c <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	212c      	movs	r1, #44	; 0x2c
 8001820:	fb01 f303 	mul.w	r3, r1, r3
 8001824:	4413      	add	r3, r2
 8001826:	333b      	adds	r3, #59	; 0x3b
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	212c      	movs	r1, #44	; 0x2c
 8001832:	fb01 f303 	mul.w	r3, r1, r3
 8001836:	4413      	add	r3, r2
 8001838:	333c      	adds	r3, #60	; 0x3c
 800183a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800183e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6818      	ldr	r0, [r3, #0]
 8001844:	787c      	ldrb	r4, [r7, #1]
 8001846:	78ba      	ldrb	r2, [r7, #2]
 8001848:	78f9      	ldrb	r1, [r7, #3]
 800184a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800184c:	9302      	str	r3, [sp, #8]
 800184e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001852:	9301      	str	r3, [sp, #4]
 8001854:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	4623      	mov	r3, r4
 800185c:	f004 f81e 	bl	800589c <USB_HC_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800186c:	7bfb      	ldrb	r3, [r7, #15]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	bd90      	pop	{r4, r7, pc}

08001876 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b084      	sub	sp, #16
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	460b      	mov	r3, r1
 8001880:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800188c:	2b01      	cmp	r3, #1
 800188e:	d101      	bne.n	8001894 <HAL_HCD_HC_Halt+0x1e>
 8001890:	2302      	movs	r3, #2
 8001892:	e00f      	b.n	80018b4 <HAL_HCD_HC_Halt+0x3e>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	78fa      	ldrb	r2, [r7, #3]
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f004 f9f9 	bl	8005c9c <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	4608      	mov	r0, r1
 80018c6:	4611      	mov	r1, r2
 80018c8:	461a      	mov	r2, r3
 80018ca:	4603      	mov	r3, r0
 80018cc:	70fb      	strb	r3, [r7, #3]
 80018ce:	460b      	mov	r3, r1
 80018d0:	70bb      	strb	r3, [r7, #2]
 80018d2:	4613      	mov	r3, r2
 80018d4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	212c      	movs	r1, #44	; 0x2c
 80018dc:	fb01 f303 	mul.w	r3, r1, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	333b      	adds	r3, #59	; 0x3b
 80018e4:	78ba      	ldrb	r2, [r7, #2]
 80018e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	212c      	movs	r1, #44	; 0x2c
 80018ee:	fb01 f303 	mul.w	r3, r1, r3
 80018f2:	4413      	add	r3, r2
 80018f4:	333f      	adds	r3, #63	; 0x3f
 80018f6:	787a      	ldrb	r2, [r7, #1]
 80018f8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80018fa:	7c3b      	ldrb	r3, [r7, #16]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d112      	bne.n	8001926 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	212c      	movs	r1, #44	; 0x2c
 8001906:	fb01 f303 	mul.w	r3, r1, r3
 800190a:	4413      	add	r3, r2
 800190c:	3342      	adds	r3, #66	; 0x42
 800190e:	2203      	movs	r2, #3
 8001910:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001912:	78fb      	ldrb	r3, [r7, #3]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	212c      	movs	r1, #44	; 0x2c
 8001918:	fb01 f303 	mul.w	r3, r1, r3
 800191c:	4413      	add	r3, r2
 800191e:	333d      	adds	r3, #61	; 0x3d
 8001920:	7f3a      	ldrb	r2, [r7, #28]
 8001922:	701a      	strb	r2, [r3, #0]
 8001924:	e008      	b.n	8001938 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001926:	78fb      	ldrb	r3, [r7, #3]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	212c      	movs	r1, #44	; 0x2c
 800192c:	fb01 f303 	mul.w	r3, r1, r3
 8001930:	4413      	add	r3, r2
 8001932:	3342      	adds	r3, #66	; 0x42
 8001934:	2202      	movs	r2, #2
 8001936:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001938:	787b      	ldrb	r3, [r7, #1]
 800193a:	2b03      	cmp	r3, #3
 800193c:	f200 80c6 	bhi.w	8001acc <HAL_HCD_HC_SubmitRequest+0x210>
 8001940:	a201      	add	r2, pc, #4	; (adr r2, 8001948 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001946:	bf00      	nop
 8001948:	08001959 	.word	0x08001959
 800194c:	08001ab9 	.word	0x08001ab9
 8001950:	080019bd 	.word	0x080019bd
 8001954:	08001a3b 	.word	0x08001a3b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001958:	7c3b      	ldrb	r3, [r7, #16]
 800195a:	2b01      	cmp	r3, #1
 800195c:	f040 80b8 	bne.w	8001ad0 <HAL_HCD_HC_SubmitRequest+0x214>
 8001960:	78bb      	ldrb	r3, [r7, #2]
 8001962:	2b00      	cmp	r3, #0
 8001964:	f040 80b4 	bne.w	8001ad0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001968:	8b3b      	ldrh	r3, [r7, #24]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d108      	bne.n	8001980 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800196e:	78fb      	ldrb	r3, [r7, #3]
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	212c      	movs	r1, #44	; 0x2c
 8001974:	fb01 f303 	mul.w	r3, r1, r3
 8001978:	4413      	add	r3, r2
 800197a:	3355      	adds	r3, #85	; 0x55
 800197c:	2201      	movs	r2, #1
 800197e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	212c      	movs	r1, #44	; 0x2c
 8001986:	fb01 f303 	mul.w	r3, r1, r3
 800198a:	4413      	add	r3, r2
 800198c:	3355      	adds	r3, #85	; 0x55
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d109      	bne.n	80019a8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	212c      	movs	r1, #44	; 0x2c
 800199a:	fb01 f303 	mul.w	r3, r1, r3
 800199e:	4413      	add	r3, r2
 80019a0:	3342      	adds	r3, #66	; 0x42
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019a6:	e093      	b.n	8001ad0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	212c      	movs	r1, #44	; 0x2c
 80019ae:	fb01 f303 	mul.w	r3, r1, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	3342      	adds	r3, #66	; 0x42
 80019b6:	2202      	movs	r2, #2
 80019b8:	701a      	strb	r2, [r3, #0]
      break;
 80019ba:	e089      	b.n	8001ad0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80019bc:	78bb      	ldrb	r3, [r7, #2]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d11d      	bne.n	80019fe <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	212c      	movs	r1, #44	; 0x2c
 80019c8:	fb01 f303 	mul.w	r3, r1, r3
 80019cc:	4413      	add	r3, r2
 80019ce:	3355      	adds	r3, #85	; 0x55
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d109      	bne.n	80019ea <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019d6:	78fb      	ldrb	r3, [r7, #3]
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	212c      	movs	r1, #44	; 0x2c
 80019dc:	fb01 f303 	mul.w	r3, r1, r3
 80019e0:	4413      	add	r3, r2
 80019e2:	3342      	adds	r3, #66	; 0x42
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80019e8:	e073      	b.n	8001ad2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019ea:	78fb      	ldrb	r3, [r7, #3]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	212c      	movs	r1, #44	; 0x2c
 80019f0:	fb01 f303 	mul.w	r3, r1, r3
 80019f4:	4413      	add	r3, r2
 80019f6:	3342      	adds	r3, #66	; 0x42
 80019f8:	2202      	movs	r2, #2
 80019fa:	701a      	strb	r2, [r3, #0]
      break;
 80019fc:	e069      	b.n	8001ad2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019fe:	78fb      	ldrb	r3, [r7, #3]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	212c      	movs	r1, #44	; 0x2c
 8001a04:	fb01 f303 	mul.w	r3, r1, r3
 8001a08:	4413      	add	r3, r2
 8001a0a:	3354      	adds	r3, #84	; 0x54
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d109      	bne.n	8001a26 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a12:	78fb      	ldrb	r3, [r7, #3]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	212c      	movs	r1, #44	; 0x2c
 8001a18:	fb01 f303 	mul.w	r3, r1, r3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	3342      	adds	r3, #66	; 0x42
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
      break;
 8001a24:	e055      	b.n	8001ad2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a26:	78fb      	ldrb	r3, [r7, #3]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	212c      	movs	r1, #44	; 0x2c
 8001a2c:	fb01 f303 	mul.w	r3, r1, r3
 8001a30:	4413      	add	r3, r2
 8001a32:	3342      	adds	r3, #66	; 0x42
 8001a34:	2202      	movs	r2, #2
 8001a36:	701a      	strb	r2, [r3, #0]
      break;
 8001a38:	e04b      	b.n	8001ad2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001a3a:	78bb      	ldrb	r3, [r7, #2]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d11d      	bne.n	8001a7c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	212c      	movs	r1, #44	; 0x2c
 8001a46:	fb01 f303 	mul.w	r3, r1, r3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3355      	adds	r3, #85	; 0x55
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d109      	bne.n	8001a68 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a54:	78fb      	ldrb	r3, [r7, #3]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	212c      	movs	r1, #44	; 0x2c
 8001a5a:	fb01 f303 	mul.w	r3, r1, r3
 8001a5e:	4413      	add	r3, r2
 8001a60:	3342      	adds	r3, #66	; 0x42
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a66:	e034      	b.n	8001ad2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	212c      	movs	r1, #44	; 0x2c
 8001a6e:	fb01 f303 	mul.w	r3, r1, r3
 8001a72:	4413      	add	r3, r2
 8001a74:	3342      	adds	r3, #66	; 0x42
 8001a76:	2202      	movs	r2, #2
 8001a78:	701a      	strb	r2, [r3, #0]
      break;
 8001a7a:	e02a      	b.n	8001ad2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	212c      	movs	r1, #44	; 0x2c
 8001a82:	fb01 f303 	mul.w	r3, r1, r3
 8001a86:	4413      	add	r3, r2
 8001a88:	3354      	adds	r3, #84	; 0x54
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d109      	bne.n	8001aa4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a90:	78fb      	ldrb	r3, [r7, #3]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	212c      	movs	r1, #44	; 0x2c
 8001a96:	fb01 f303 	mul.w	r3, r1, r3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3342      	adds	r3, #66	; 0x42
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	701a      	strb	r2, [r3, #0]
      break;
 8001aa2:	e016      	b.n	8001ad2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aa4:	78fb      	ldrb	r3, [r7, #3]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	212c      	movs	r1, #44	; 0x2c
 8001aaa:	fb01 f303 	mul.w	r3, r1, r3
 8001aae:	4413      	add	r3, r2
 8001ab0:	3342      	adds	r3, #66	; 0x42
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	701a      	strb	r2, [r3, #0]
      break;
 8001ab6:	e00c      	b.n	8001ad2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	212c      	movs	r1, #44	; 0x2c
 8001abe:	fb01 f303 	mul.w	r3, r1, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3342      	adds	r3, #66	; 0x42
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
      break;
 8001aca:	e002      	b.n	8001ad2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001acc:	bf00      	nop
 8001ace:	e000      	b.n	8001ad2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001ad0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	212c      	movs	r1, #44	; 0x2c
 8001ad8:	fb01 f303 	mul.w	r3, r1, r3
 8001adc:	4413      	add	r3, r2
 8001ade:	3344      	adds	r3, #68	; 0x44
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001ae4:	78fb      	ldrb	r3, [r7, #3]
 8001ae6:	8b3a      	ldrh	r2, [r7, #24]
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	202c      	movs	r0, #44	; 0x2c
 8001aec:	fb00 f303 	mul.w	r3, r0, r3
 8001af0:	440b      	add	r3, r1
 8001af2:	334c      	adds	r3, #76	; 0x4c
 8001af4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	212c      	movs	r1, #44	; 0x2c
 8001afc:	fb01 f303 	mul.w	r3, r1, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	3360      	adds	r3, #96	; 0x60
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	212c      	movs	r1, #44	; 0x2c
 8001b0e:	fb01 f303 	mul.w	r3, r1, r3
 8001b12:	4413      	add	r3, r2
 8001b14:	3350      	adds	r3, #80	; 0x50
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b1a:	78fb      	ldrb	r3, [r7, #3]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	212c      	movs	r1, #44	; 0x2c
 8001b20:	fb01 f303 	mul.w	r3, r1, r3
 8001b24:	4413      	add	r3, r2
 8001b26:	3339      	adds	r3, #57	; 0x39
 8001b28:	78fa      	ldrb	r2, [r7, #3]
 8001b2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001b2c:	78fb      	ldrb	r3, [r7, #3]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	212c      	movs	r1, #44	; 0x2c
 8001b32:	fb01 f303 	mul.w	r3, r1, r3
 8001b36:	4413      	add	r3, r2
 8001b38:	3361      	adds	r3, #97	; 0x61
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6818      	ldr	r0, [r3, #0]
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	222c      	movs	r2, #44	; 0x2c
 8001b46:	fb02 f303 	mul.w	r3, r2, r3
 8001b4a:	3338      	adds	r3, #56	; 0x38
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	4413      	add	r3, r2
 8001b50:	4619      	mov	r1, r3
 8001b52:	f003 ff9b 	bl	8005a8c <USB_HC_StartXfer>
 8001b56:	4603      	mov	r3, r0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 fd18 	bl	80055ac <USB_GetMode>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	f040 80ef 	bne.w	8001d62 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f003 fcfd 	bl	8005588 <USB_ReadInterrupts>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 80e5 	beq.w	8001d60 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f003 fcf4 	bl	8005588 <USB_ReadInterrupts>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001baa:	d104      	bne.n	8001bb6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001bb4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f003 fce4 	bl	8005588 <USB_ReadInterrupts>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bca:	d104      	bne.n	8001bd6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001bd4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f003 fcd4 	bl	8005588 <USB_ReadInterrupts>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001be6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001bea:	d104      	bne.n	8001bf6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bf4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f003 fcc4 	bl	8005588 <USB_ReadInterrupts>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d103      	bne.n	8001c12 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2202      	movs	r2, #2
 8001c10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f003 fcb6 	bl	8005588 <USB_ReadInterrupts>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c26:	d115      	bne.n	8001c54 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c30:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d108      	bne.n	8001c54 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f008 fd34 	bl	800a6b0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f003 fd62 	bl	8005718 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f003 fc95 	bl	8005588 <USB_ReadInterrupts>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c68:	d102      	bne.n	8001c70 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f001 f978 	bl	8002f60 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f003 fc87 	bl	8005588 <USB_ReadInterrupts>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d106      	bne.n	8001c92 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f008 fcf7 	bl	800a678 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2208      	movs	r2, #8
 8001c90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f003 fc76 	bl	8005588 <USB_ReadInterrupts>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	2b10      	cmp	r3, #16
 8001ca4:	d101      	bne.n	8001caa <HAL_HCD_IRQHandler+0x14a>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <HAL_HCD_IRQHandler+0x14c>
 8001caa:	2300      	movs	r3, #0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d012      	beq.n	8001cd6 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	699a      	ldr	r2, [r3, #24]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0210 	bic.w	r2, r2, #16
 8001cbe:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f001 f87b 	bl	8002dbc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	699a      	ldr	r2, [r3, #24]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f042 0210 	orr.w	r2, r2, #16
 8001cd4:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f003 fc54 	bl	8005588 <USB_ReadInterrupts>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001cea:	d13a      	bne.n	8001d62 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f003 ffc3 	bl	8005c7c <USB_HC_ReadInterrupt>
 8001cf6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	e025      	b.n	8001d4a <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f003 030f 	and.w	r3, r3, #15
 8001d04:	68ba      	ldr	r2, [r7, #8]
 8001d06:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d018      	beq.n	8001d44 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	015a      	lsls	r2, r3, #5
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4413      	add	r3, r2
 8001d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d28:	d106      	bne.n	8001d38 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	4619      	mov	r1, r3
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f8a9 	bl	8001e88 <HCD_HC_IN_IRQHandler>
 8001d36:	e005      	b.n	8001d44 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 fca2 	bl	8002688 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	3301      	adds	r3, #1
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d3d4      	bcc.n	8001cfe <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d5c:	615a      	str	r2, [r3, #20]
 8001d5e:	e000      	b.n	8001d62 <HAL_HCD_IRQHandler+0x202>
      return;
 8001d60:	bf00      	nop
    }
  }
}
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d101      	bne.n	8001d7e <HAL_HCD_Start+0x16>
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	e013      	b.n	8001da6 <HAL_HCD_Start+0x3e>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f003 fd26 	bl	80057de <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f003 fab6 	bl	8005308 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d101      	bne.n	8001dc4 <HAL_HCD_Stop+0x16>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e00d      	b.n	8001de0 <HAL_HCD_Stop+0x32>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f004 f87e 	bl	8005ed2 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f003 fcc8 	bl	800578a <USB_ResetPort>
 8001dfa:	4603      	mov	r3, r0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	212c      	movs	r1, #44	; 0x2c
 8001e16:	fb01 f303 	mul.w	r3, r1, r3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3360      	adds	r3, #96	; 0x60
 8001e1e:	781b      	ldrb	r3, [r3, #0]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr

08001e2a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	460b      	mov	r3, r1
 8001e34:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001e36:	78fb      	ldrb	r3, [r7, #3]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	212c      	movs	r1, #44	; 0x2c
 8001e3c:	fb01 f303 	mul.w	r3, r1, r3
 8001e40:	4413      	add	r3, r2
 8001e42:	3350      	adds	r3, #80	; 0x50
 8001e44:	681b      	ldr	r3, [r3, #0]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f003 fd0c 	bl	800587a <USB_GetCurrentFrame>
 8001e62:	4603      	mov	r3, r0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f003 fce8 	bl	800584e <USB_GetHostSpeed>
 8001e7e:	4603      	mov	r3, r0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e9e:	78fb      	ldrb	r3, [r7, #3]
 8001ea0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	015a      	lsls	r2, r3, #5
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d119      	bne.n	8001eec <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	015a      	lsls	r2, r3, #5
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	015a      	lsls	r2, r3, #5
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	0151      	lsls	r1, r2, #5
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	440a      	add	r2, r1
 8001ee0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	60d3      	str	r3, [r2, #12]
 8001eea:	e101      	b.n	80020f0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	015a      	lsls	r2, r3, #5
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f02:	d12b      	bne.n	8001f5c <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	015a      	lsls	r2, r3, #5
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f10:	461a      	mov	r2, r3
 8001f12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f16:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	212c      	movs	r1, #44	; 0x2c
 8001f1e:	fb01 f303 	mul.w	r3, r1, r3
 8001f22:	4413      	add	r3, r2
 8001f24:	3361      	adds	r3, #97	; 0x61
 8001f26:	2207      	movs	r2, #7
 8001f28:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	015a      	lsls	r2, r3, #5
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4413      	add	r3, r2
 8001f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	0151      	lsls	r1, r2, #5
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	440a      	add	r2, r1
 8001f40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f44:	f043 0302 	orr.w	r3, r3, #2
 8001f48:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	4611      	mov	r1, r2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f003 fea1 	bl	8005c9c <USB_HC_Halt>
 8001f5a:	e0c9      	b.n	80020f0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	015a      	lsls	r2, r3, #5
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 0320 	and.w	r3, r3, #32
 8001f6e:	2b20      	cmp	r3, #32
 8001f70:	d109      	bne.n	8001f86 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	015a      	lsls	r2, r3, #5
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4413      	add	r3, r2
 8001f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7e:	461a      	mov	r2, r3
 8001f80:	2320      	movs	r3, #32
 8001f82:	6093      	str	r3, [r2, #8]
 8001f84:	e0b4      	b.n	80020f0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	015a      	lsls	r2, r3, #5
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 0308 	and.w	r3, r3, #8
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d133      	bne.n	8002004 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	015a      	lsls	r2, r3, #5
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	0151      	lsls	r1, r2, #5
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	440a      	add	r2, r1
 8001fb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fb6:	f043 0302 	orr.w	r3, r3, #2
 8001fba:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	212c      	movs	r1, #44	; 0x2c
 8001fc2:	fb01 f303 	mul.w	r3, r1, r3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3361      	adds	r3, #97	; 0x61
 8001fca:	2205      	movs	r2, #5
 8001fcc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	015a      	lsls	r2, r3, #5
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fda:	461a      	mov	r2, r3
 8001fdc:	2310      	movs	r3, #16
 8001fde:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	015a      	lsls	r2, r3, #5
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fec:	461a      	mov	r2, r3
 8001fee:	2308      	movs	r3, #8
 8001ff0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f003 fe4d 	bl	8005c9c <USB_HC_Halt>
 8002002:	e075      	b.n	80020f0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	015a      	lsls	r2, r3, #5
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4413      	add	r3, r2
 800200c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800201a:	d134      	bne.n	8002086 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	015a      	lsls	r2, r3, #5
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	4413      	add	r3, r2
 8002024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	0151      	lsls	r1, r2, #5
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	440a      	add	r2, r1
 8002032:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002036:	f043 0302 	orr.w	r3, r3, #2
 800203a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	212c      	movs	r1, #44	; 0x2c
 8002042:	fb01 f303 	mul.w	r3, r1, r3
 8002046:	4413      	add	r3, r2
 8002048:	3361      	adds	r3, #97	; 0x61
 800204a:	2208      	movs	r2, #8
 800204c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	015a      	lsls	r2, r3, #5
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4413      	add	r3, r2
 8002056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205a:	461a      	mov	r2, r3
 800205c:	2310      	movs	r3, #16
 800205e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	015a      	lsls	r2, r3, #5
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4413      	add	r3, r2
 8002068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206c:	461a      	mov	r2, r3
 800206e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002072:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	4611      	mov	r1, r2
 800207e:	4618      	mov	r0, r3
 8002080:	f003 fe0c 	bl	8005c9c <USB_HC_Halt>
 8002084:	e034      	b.n	80020f0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	015a      	lsls	r2, r3, #5
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4413      	add	r3, r2
 800208e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002098:	2b80      	cmp	r3, #128	; 0x80
 800209a:	d129      	bne.n	80020f0 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	015a      	lsls	r2, r3, #5
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4413      	add	r3, r2
 80020a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	0151      	lsls	r1, r2, #5
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	440a      	add	r2, r1
 80020b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020b6:	f043 0302 	orr.w	r3, r3, #2
 80020ba:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	212c      	movs	r1, #44	; 0x2c
 80020c2:	fb01 f303 	mul.w	r3, r1, r3
 80020c6:	4413      	add	r3, r2
 80020c8:	3361      	adds	r3, #97	; 0x61
 80020ca:	2206      	movs	r2, #6
 80020cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f003 fddf 	bl	8005c9c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	015a      	lsls	r2, r3, #5
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4413      	add	r3, r2
 80020e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ea:	461a      	mov	r2, r3
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002102:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002106:	d122      	bne.n	800214e <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4413      	add	r3, r2
 8002110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	0151      	lsls	r1, r2, #5
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	440a      	add	r2, r1
 800211e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002122:	f043 0302 	orr.w	r3, r3, #2
 8002126:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	4611      	mov	r1, r2
 8002132:	4618      	mov	r0, r3
 8002134:	f003 fdb2 	bl	8005c9c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	015a      	lsls	r2, r3, #5
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4413      	add	r3, r2
 8002140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002144:	461a      	mov	r2, r3
 8002146:	f44f 7300 	mov.w	r3, #512	; 0x200
 800214a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800214c:	e298      	b.n	8002680 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	015a      	lsls	r2, r3, #5
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4413      	add	r3, r2
 8002156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b01      	cmp	r3, #1
 8002162:	f040 80fd 	bne.w	8002360 <HCD_HC_IN_IRQHandler+0x4d8>
    hhcd->hc[ch_num].state = HC_XFRC;
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	212c      	movs	r1, #44	; 0x2c
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	4413      	add	r3, r2
 8002172:	3361      	adds	r3, #97	; 0x61
 8002174:	2201      	movs	r2, #1
 8002176:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	212c      	movs	r1, #44	; 0x2c
 800217e:	fb01 f303 	mul.w	r3, r1, r3
 8002182:	4413      	add	r3, r2
 8002184:	335c      	adds	r3, #92	; 0x5c
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4413      	add	r3, r2
 8002192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002196:	461a      	mov	r2, r3
 8002198:	2301      	movs	r3, #1
 800219a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	212c      	movs	r1, #44	; 0x2c
 80021a2:	fb01 f303 	mul.w	r3, r1, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	333f      	adds	r3, #63	; 0x3f
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d009      	beq.n	80021c4 <HCD_HC_IN_IRQHandler+0x33c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	212c      	movs	r1, #44	; 0x2c
 80021b6:	fb01 f303 	mul.w	r3, r1, r3
 80021ba:	4413      	add	r3, r2
 80021bc:	333f      	adds	r3, #63	; 0x3f
 80021be:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d121      	bne.n	8002208 <HCD_HC_IN_IRQHandler+0x380>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	015a      	lsls	r2, r3, #5
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	0151      	lsls	r1, r2, #5
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	440a      	add	r2, r1
 80021da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021de:	f043 0302 	orr.w	r3, r3, #2
 80021e2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	4611      	mov	r1, r2
 80021ee:	4618      	mov	r0, r3
 80021f0:	f003 fd54 	bl	8005c9c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	015a      	lsls	r2, r3, #5
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002200:	461a      	mov	r2, r3
 8002202:	2310      	movs	r3, #16
 8002204:	6093      	str	r3, [r2, #8]
 8002206:	e066      	b.n	80022d6 <HCD_HC_IN_IRQHandler+0x44e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	212c      	movs	r1, #44	; 0x2c
 800220e:	fb01 f303 	mul.w	r3, r1, r3
 8002212:	4413      	add	r3, r2
 8002214:	333f      	adds	r3, #63	; 0x3f
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b03      	cmp	r3, #3
 800221a:	d127      	bne.n	800226c <HCD_HC_IN_IRQHandler+0x3e4>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	015a      	lsls	r2, r3, #5
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4413      	add	r3, r2
 8002224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	0151      	lsls	r1, r2, #5
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	440a      	add	r2, r1
 8002232:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002236:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800223a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	212c      	movs	r1, #44	; 0x2c
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	4413      	add	r3, r2
 8002248:	3360      	adds	r3, #96	; 0x60
 800224a:	2201      	movs	r2, #1
 800224c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	b2d9      	uxtb	r1, r3
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	202c      	movs	r0, #44	; 0x2c
 8002258:	fb00 f303 	mul.w	r3, r0, r3
 800225c:	4413      	add	r3, r2
 800225e:	3360      	adds	r3, #96	; 0x60
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f008 fa31 	bl	800a6cc <HAL_HCD_HC_NotifyURBChange_Callback>
 800226a:	e034      	b.n	80022d6 <HCD_HC_IN_IRQHandler+0x44e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	212c      	movs	r1, #44	; 0x2c
 8002272:	fb01 f303 	mul.w	r3, r1, r3
 8002276:	4413      	add	r3, r2
 8002278:	333f      	adds	r3, #63	; 0x3f
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d12a      	bne.n	80022d6 <HCD_HC_IN_IRQHandler+0x44e>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	212c      	movs	r1, #44	; 0x2c
 8002286:	fb01 f303 	mul.w	r3, r1, r3
 800228a:	4413      	add	r3, r2
 800228c:	3360      	adds	r3, #96	; 0x60
 800228e:	2201      	movs	r2, #1
 8002290:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	212c      	movs	r1, #44	; 0x2c
 8002298:	fb01 f303 	mul.w	r3, r1, r3
 800229c:	4413      	add	r3, r2
 800229e:	3354      	adds	r3, #84	; 0x54
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	f083 0301 	eor.w	r3, r3, #1
 80022a6:	b2d8      	uxtb	r0, r3
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	212c      	movs	r1, #44	; 0x2c
 80022ae:	fb01 f303 	mul.w	r3, r1, r3
 80022b2:	4413      	add	r3, r2
 80022b4:	3354      	adds	r3, #84	; 0x54
 80022b6:	4602      	mov	r2, r0
 80022b8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	b2d9      	uxtb	r1, r3
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	202c      	movs	r0, #44	; 0x2c
 80022c4:	fb00 f303 	mul.w	r3, r0, r3
 80022c8:	4413      	add	r3, r2
 80022ca:	3360      	adds	r3, #96	; 0x60
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f008 f9fb 	bl	800a6cc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d12b      	bne.n	8002336 <HCD_HC_IN_IRQHandler+0x4ae>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	212c      	movs	r1, #44	; 0x2c
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	3348      	adds	r3, #72	; 0x48
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	202c      	movs	r0, #44	; 0x2c
 80022f4:	fb00 f202 	mul.w	r2, r0, r2
 80022f8:	440a      	add	r2, r1
 80022fa:	3240      	adds	r2, #64	; 0x40
 80022fc:	8812      	ldrh	r2, [r2, #0]
 80022fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 81ba 	beq.w	8002680 <HCD_HC_IN_IRQHandler+0x7f8>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	212c      	movs	r1, #44	; 0x2c
 8002312:	fb01 f303 	mul.w	r3, r1, r3
 8002316:	4413      	add	r3, r2
 8002318:	3354      	adds	r3, #84	; 0x54
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	f083 0301 	eor.w	r3, r3, #1
 8002320:	b2d8      	uxtb	r0, r3
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	212c      	movs	r1, #44	; 0x2c
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	4413      	add	r3, r2
 800232e:	3354      	adds	r3, #84	; 0x54
 8002330:	4602      	mov	r2, r0
 8002332:	701a      	strb	r2, [r3, #0]
}
 8002334:	e1a4      	b.n	8002680 <HCD_HC_IN_IRQHandler+0x7f8>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	212c      	movs	r1, #44	; 0x2c
 800233c:	fb01 f303 	mul.w	r3, r1, r3
 8002340:	4413      	add	r3, r2
 8002342:	3354      	adds	r3, #84	; 0x54
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	f083 0301 	eor.w	r3, r3, #1
 800234a:	b2d8      	uxtb	r0, r3
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	212c      	movs	r1, #44	; 0x2c
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	4413      	add	r3, r2
 8002358:	3354      	adds	r3, #84	; 0x54
 800235a:	4602      	mov	r2, r0
 800235c:	701a      	strb	r2, [r3, #0]
}
 800235e:	e18f      	b.n	8002680 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	015a      	lsls	r2, r3, #5
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4413      	add	r3, r2
 8002368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b02      	cmp	r3, #2
 8002374:	f040 8106 	bne.w	8002584 <HCD_HC_IN_IRQHandler+0x6fc>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	015a      	lsls	r2, r3, #5
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4413      	add	r3, r2
 8002380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	0151      	lsls	r1, r2, #5
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	440a      	add	r2, r1
 800238e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002392:	f023 0302 	bic.w	r3, r3, #2
 8002396:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	212c      	movs	r1, #44	; 0x2c
 800239e:	fb01 f303 	mul.w	r3, r1, r3
 80023a2:	4413      	add	r3, r2
 80023a4:	3361      	adds	r3, #97	; 0x61
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d109      	bne.n	80023c0 <HCD_HC_IN_IRQHandler+0x538>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	212c      	movs	r1, #44	; 0x2c
 80023b2:	fb01 f303 	mul.w	r3, r1, r3
 80023b6:	4413      	add	r3, r2
 80023b8:	3360      	adds	r3, #96	; 0x60
 80023ba:	2201      	movs	r2, #1
 80023bc:	701a      	strb	r2, [r3, #0]
 80023be:	e0c9      	b.n	8002554 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	212c      	movs	r1, #44	; 0x2c
 80023c6:	fb01 f303 	mul.w	r3, r1, r3
 80023ca:	4413      	add	r3, r2
 80023cc:	3361      	adds	r3, #97	; 0x61
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b05      	cmp	r3, #5
 80023d2:	d109      	bne.n	80023e8 <HCD_HC_IN_IRQHandler+0x560>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	212c      	movs	r1, #44	; 0x2c
 80023da:	fb01 f303 	mul.w	r3, r1, r3
 80023de:	4413      	add	r3, r2
 80023e0:	3360      	adds	r3, #96	; 0x60
 80023e2:	2205      	movs	r2, #5
 80023e4:	701a      	strb	r2, [r3, #0]
 80023e6:	e0b5      	b.n	8002554 <HCD_HC_IN_IRQHandler+0x6cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	212c      	movs	r1, #44	; 0x2c
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
 80023f2:	4413      	add	r3, r2
 80023f4:	3361      	adds	r3, #97	; 0x61
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b06      	cmp	r3, #6
 80023fa:	d009      	beq.n	8002410 <HCD_HC_IN_IRQHandler+0x588>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	212c      	movs	r1, #44	; 0x2c
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	4413      	add	r3, r2
 8002408:	3361      	adds	r3, #97	; 0x61
 800240a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800240c:	2b08      	cmp	r3, #8
 800240e:	d150      	bne.n	80024b2 <HCD_HC_IN_IRQHandler+0x62a>
      hhcd->hc[ch_num].ErrCnt++;
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	212c      	movs	r1, #44	; 0x2c
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	4413      	add	r3, r2
 800241c:	335c      	adds	r3, #92	; 0x5c
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	202c      	movs	r0, #44	; 0x2c
 8002428:	fb00 f303 	mul.w	r3, r0, r3
 800242c:	440b      	add	r3, r1
 800242e:	335c      	adds	r3, #92	; 0x5c
 8002430:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	212c      	movs	r1, #44	; 0x2c
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	4413      	add	r3, r2
 800243e:	335c      	adds	r3, #92	; 0x5c
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d912      	bls.n	800246c <HCD_HC_IN_IRQHandler+0x5e4>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	212c      	movs	r1, #44	; 0x2c
 800244c:	fb01 f303 	mul.w	r3, r1, r3
 8002450:	4413      	add	r3, r2
 8002452:	335c      	adds	r3, #92	; 0x5c
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	212c      	movs	r1, #44	; 0x2c
 800245e:	fb01 f303 	mul.w	r3, r1, r3
 8002462:	4413      	add	r3, r2
 8002464:	3360      	adds	r3, #96	; 0x60
 8002466:	2204      	movs	r2, #4
 8002468:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800246a:	e073      	b.n	8002554 <HCD_HC_IN_IRQHandler+0x6cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	212c      	movs	r1, #44	; 0x2c
 8002472:	fb01 f303 	mul.w	r3, r1, r3
 8002476:	4413      	add	r3, r2
 8002478:	3360      	adds	r3, #96	; 0x60
 800247a:	2202      	movs	r2, #2
 800247c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	015a      	lsls	r2, r3, #5
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4413      	add	r3, r2
 8002486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002494:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800249c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	015a      	lsls	r2, r3, #5
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024aa:	461a      	mov	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024b0:	e050      	b.n	8002554 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	212c      	movs	r1, #44	; 0x2c
 80024b8:	fb01 f303 	mul.w	r3, r1, r3
 80024bc:	4413      	add	r3, r2
 80024be:	3361      	adds	r3, #97	; 0x61
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d122      	bne.n	800250c <HCD_HC_IN_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	212c      	movs	r1, #44	; 0x2c
 80024cc:	fb01 f303 	mul.w	r3, r1, r3
 80024d0:	4413      	add	r3, r2
 80024d2:	3360      	adds	r3, #96	; 0x60
 80024d4:	2202      	movs	r2, #2
 80024d6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024ee:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024f6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	015a      	lsls	r2, r3, #5
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4413      	add	r3, r2
 8002500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002504:	461a      	mov	r2, r3
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e023      	b.n	8002554 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	212c      	movs	r1, #44	; 0x2c
 8002512:	fb01 f303 	mul.w	r3, r1, r3
 8002516:	4413      	add	r3, r2
 8002518:	3361      	adds	r3, #97	; 0x61
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b07      	cmp	r3, #7
 800251e:	d119      	bne.n	8002554 <HCD_HC_IN_IRQHandler+0x6cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	212c      	movs	r1, #44	; 0x2c
 8002526:	fb01 f303 	mul.w	r3, r1, r3
 800252a:	4413      	add	r3, r2
 800252c:	335c      	adds	r3, #92	; 0x5c
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	202c      	movs	r0, #44	; 0x2c
 8002538:	fb00 f303 	mul.w	r3, r0, r3
 800253c:	440b      	add	r3, r1
 800253e:	335c      	adds	r3, #92	; 0x5c
 8002540:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	212c      	movs	r1, #44	; 0x2c
 8002548:	fb01 f303 	mul.w	r3, r1, r3
 800254c:	4413      	add	r3, r2
 800254e:	3360      	adds	r3, #96	; 0x60
 8002550:	2204      	movs	r2, #4
 8002552:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	015a      	lsls	r2, r3, #5
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	4413      	add	r3, r2
 800255c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002560:	461a      	mov	r2, r3
 8002562:	2302      	movs	r3, #2
 8002564:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	b2d9      	uxtb	r1, r3
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	202c      	movs	r0, #44	; 0x2c
 8002570:	fb00 f303 	mul.w	r3, r0, r3
 8002574:	4413      	add	r3, r2
 8002576:	3360      	adds	r3, #96	; 0x60
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	461a      	mov	r2, r3
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f008 f8a5 	bl	800a6cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002582:	e07d      	b.n	8002680 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	015a      	lsls	r2, r3, #5
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	4413      	add	r3, r2
 800258c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b10      	cmp	r3, #16
 8002598:	d172      	bne.n	8002680 <HCD_HC_IN_IRQHandler+0x7f8>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	212c      	movs	r1, #44	; 0x2c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	333f      	adds	r3, #63	; 0x3f
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d121      	bne.n	80025f2 <HCD_HC_IN_IRQHandler+0x76a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	212c      	movs	r1, #44	; 0x2c
 80025b4:	fb01 f303 	mul.w	r3, r1, r3
 80025b8:	4413      	add	r3, r2
 80025ba:	335c      	adds	r3, #92	; 0x5c
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	015a      	lsls	r2, r3, #5
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	4413      	add	r3, r2
 80025c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	0151      	lsls	r1, r2, #5
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	440a      	add	r2, r1
 80025d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025da:	f043 0302 	orr.w	r3, r3, #2
 80025de:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	4611      	mov	r1, r2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f003 fb56 	bl	8005c9c <USB_HC_Halt>
 80025f0:	e03d      	b.n	800266e <HCD_HC_IN_IRQHandler+0x7e6>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	212c      	movs	r1, #44	; 0x2c
 80025f8:	fb01 f303 	mul.w	r3, r1, r3
 80025fc:	4413      	add	r3, r2
 80025fe:	333f      	adds	r3, #63	; 0x3f
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d009      	beq.n	800261a <HCD_HC_IN_IRQHandler+0x792>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	212c      	movs	r1, #44	; 0x2c
 800260c:	fb01 f303 	mul.w	r3, r1, r3
 8002610:	4413      	add	r3, r2
 8002612:	333f      	adds	r3, #63	; 0x3f
 8002614:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002616:	2b02      	cmp	r3, #2
 8002618:	d129      	bne.n	800266e <HCD_HC_IN_IRQHandler+0x7e6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	212c      	movs	r1, #44	; 0x2c
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	4413      	add	r3, r2
 8002626:	335c      	adds	r3, #92	; 0x5c
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	212c      	movs	r1, #44	; 0x2c
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4413      	add	r3, r2
 8002638:	3361      	adds	r3, #97	; 0x61
 800263a:	2203      	movs	r2, #3
 800263c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	015a      	lsls	r2, r3, #5
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4413      	add	r3, r2
 8002646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	0151      	lsls	r1, r2, #5
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	440a      	add	r2, r1
 8002654:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002658:	f043 0302 	orr.w	r3, r3, #2
 800265c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f003 fb17 	bl	8005c9c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	015a      	lsls	r2, r3, #5
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4413      	add	r3, r2
 8002676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267a:	461a      	mov	r2, r3
 800267c:	2310      	movs	r3, #16
 800267e:	6093      	str	r3, [r2, #8]
}
 8002680:	bf00      	nop
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800269e:	78fb      	ldrb	r3, [r7, #3]
 80026a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	015a      	lsls	r2, r3, #5
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	4413      	add	r3, r2
 80026aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d119      	bne.n	80026ec <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c4:	461a      	mov	r2, r3
 80026c6:	2304      	movs	r3, #4
 80026c8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	0151      	lsls	r1, r2, #5
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	440a      	add	r2, r1
 80026e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026e4:	f043 0302 	orr.w	r3, r3, #2
 80026e8:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80026ea:	e363      	b.n	8002db4 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0320 	and.w	r3, r3, #32
 80026fe:	2b20      	cmp	r3, #32
 8002700:	d13e      	bne.n	8002780 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	4413      	add	r3, r2
 800270a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270e:	461a      	mov	r2, r3
 8002710:	2320      	movs	r3, #32
 8002712:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	212c      	movs	r1, #44	; 0x2c
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	4413      	add	r3, r2
 8002720:	333d      	adds	r3, #61	; 0x3d
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b01      	cmp	r3, #1
 8002726:	f040 8345 	bne.w	8002db4 <HCD_HC_OUT_IRQHandler+0x72c>
      hhcd->hc[ch_num].do_ping = 0U;
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	212c      	movs	r1, #44	; 0x2c
 8002730:	fb01 f303 	mul.w	r3, r1, r3
 8002734:	4413      	add	r3, r2
 8002736:	333d      	adds	r3, #61	; 0x3d
 8002738:	2200      	movs	r2, #0
 800273a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	212c      	movs	r1, #44	; 0x2c
 8002742:	fb01 f303 	mul.w	r3, r1, r3
 8002746:	4413      	add	r3, r2
 8002748:	3360      	adds	r3, #96	; 0x60
 800274a:	2202      	movs	r2, #2
 800274c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	015a      	lsls	r2, r3, #5
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	4413      	add	r3, r2
 8002756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	0151      	lsls	r1, r2, #5
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	440a      	add	r2, r1
 8002764:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002768:	f043 0302 	orr.w	r3, r3, #2
 800276c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	4611      	mov	r1, r2
 8002778:	4618      	mov	r0, r3
 800277a:	f003 fa8f 	bl	8005c9c <USB_HC_Halt>
}
 800277e:	e319      	b.n	8002db4 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	4413      	add	r3, r2
 8002788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002796:	d122      	bne.n	80027de <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	0151      	lsls	r1, r2, #5
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	440a      	add	r2, r1
 80027ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027b2:	f043 0302 	orr.w	r3, r3, #2
 80027b6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f003 fa6a 	bl	8005c9c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d4:	461a      	mov	r2, r3
 80027d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027da:	6093      	str	r3, [r2, #8]
}
 80027dc:	e2ea      	b.n	8002db4 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d150      	bne.n	8002896 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	212c      	movs	r1, #44	; 0x2c
 80027fa:	fb01 f303 	mul.w	r3, r1, r3
 80027fe:	4413      	add	r3, r2
 8002800:	335c      	adds	r3, #92	; 0x5c
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	4413      	add	r3, r2
 800280e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002818:	2b40      	cmp	r3, #64	; 0x40
 800281a:	d111      	bne.n	8002840 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	212c      	movs	r1, #44	; 0x2c
 8002822:	fb01 f303 	mul.w	r3, r1, r3
 8002826:	4413      	add	r3, r2
 8002828:	333d      	adds	r3, #61	; 0x3d
 800282a:	2201      	movs	r2, #1
 800282c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	015a      	lsls	r2, r3, #5
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	4413      	add	r3, r2
 8002836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283a:	461a      	mov	r2, r3
 800283c:	2340      	movs	r3, #64	; 0x40
 800283e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	4413      	add	r3, r2
 8002848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	0151      	lsls	r1, r2, #5
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	440a      	add	r2, r1
 8002856:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800285a:	f043 0302 	orr.w	r3, r3, #2
 800285e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	4611      	mov	r1, r2
 800286a:	4618      	mov	r0, r3
 800286c:	f003 fa16 	bl	8005c9c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	4413      	add	r3, r2
 8002878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287c:	461a      	mov	r2, r3
 800287e:	2301      	movs	r3, #1
 8002880:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	212c      	movs	r1, #44	; 0x2c
 8002888:	fb01 f303 	mul.w	r3, r1, r3
 800288c:	4413      	add	r3, r2
 800288e:	3361      	adds	r3, #97	; 0x61
 8002890:	2201      	movs	r2, #1
 8002892:	701a      	strb	r2, [r3, #0]
}
 8002894:	e28e      	b.n	8002db4 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	4413      	add	r3, r2
 800289e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a8:	2b40      	cmp	r3, #64	; 0x40
 80028aa:	d13c      	bne.n	8002926 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	212c      	movs	r1, #44	; 0x2c
 80028b2:	fb01 f303 	mul.w	r3, r1, r3
 80028b6:	4413      	add	r3, r2
 80028b8:	3361      	adds	r3, #97	; 0x61
 80028ba:	2204      	movs	r2, #4
 80028bc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	212c      	movs	r1, #44	; 0x2c
 80028c4:	fb01 f303 	mul.w	r3, r1, r3
 80028c8:	4413      	add	r3, r2
 80028ca:	333d      	adds	r3, #61	; 0x3d
 80028cc:	2201      	movs	r2, #1
 80028ce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	212c      	movs	r1, #44	; 0x2c
 80028d6:	fb01 f303 	mul.w	r3, r1, r3
 80028da:	4413      	add	r3, r2
 80028dc:	335c      	adds	r3, #92	; 0x5c
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	0151      	lsls	r1, r2, #5
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	440a      	add	r2, r1
 80028f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028fc:	f043 0302 	orr.w	r3, r3, #2
 8002900:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f003 f9c5 	bl	8005c9c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	015a      	lsls	r2, r3, #5
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	4413      	add	r3, r2
 800291a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291e:	461a      	mov	r2, r3
 8002920:	2340      	movs	r3, #64	; 0x40
 8002922:	6093      	str	r3, [r2, #8]
}
 8002924:	e246      	b.n	8002db4 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	015a      	lsls	r2, r3, #5
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	4413      	add	r3, r2
 800292e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	2b08      	cmp	r3, #8
 800293a:	d12a      	bne.n	8002992 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	4413      	add	r3, r2
 8002944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002948:	461a      	mov	r2, r3
 800294a:	2308      	movs	r3, #8
 800294c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	015a      	lsls	r2, r3, #5
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	4413      	add	r3, r2
 8002956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	0151      	lsls	r1, r2, #5
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	440a      	add	r2, r1
 8002964:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002968:	f043 0302 	orr.w	r3, r3, #2
 800296c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f003 f98f 	bl	8005c9c <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	212c      	movs	r1, #44	; 0x2c
 8002984:	fb01 f303 	mul.w	r3, r1, r3
 8002988:	4413      	add	r3, r2
 800298a:	3361      	adds	r3, #97	; 0x61
 800298c:	2205      	movs	r2, #5
 800298e:	701a      	strb	r2, [r3, #0]
}
 8002990:	e210      	b.n	8002db4 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	4413      	add	r3, r2
 800299a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 0310 	and.w	r3, r3, #16
 80029a4:	2b10      	cmp	r3, #16
 80029a6:	d133      	bne.n	8002a10 <HCD_HC_OUT_IRQHandler+0x388>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	212c      	movs	r1, #44	; 0x2c
 80029ae:	fb01 f303 	mul.w	r3, r1, r3
 80029b2:	4413      	add	r3, r2
 80029b4:	335c      	adds	r3, #92	; 0x5c
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	212c      	movs	r1, #44	; 0x2c
 80029c0:	fb01 f303 	mul.w	r3, r1, r3
 80029c4:	4413      	add	r3, r2
 80029c6:	3361      	adds	r3, #97	; 0x61
 80029c8:	2203      	movs	r2, #3
 80029ca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	0151      	lsls	r1, r2, #5
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	440a      	add	r2, r1
 80029e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029e6:	f043 0302 	orr.w	r3, r3, #2
 80029ea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	4611      	mov	r1, r2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f003 f950 	bl	8005c9c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a08:	461a      	mov	r2, r3
 8002a0a:	2310      	movs	r3, #16
 8002a0c:	6093      	str	r3, [r2, #8]
}
 8002a0e:	e1d1      	b.n	8002db4 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a22:	2b80      	cmp	r3, #128	; 0x80
 8002a24:	d12a      	bne.n	8002a7c <HCD_HC_OUT_IRQHandler+0x3f4>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	212c      	movs	r1, #44	; 0x2c
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	4413      	add	r3, r2
 8002a32:	3361      	adds	r3, #97	; 0x61
 8002a34:	2206      	movs	r2, #6
 8002a36:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	0151      	lsls	r1, r2, #5
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	440a      	add	r2, r1
 8002a4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a52:	f043 0302 	orr.w	r3, r3, #2
 8002a56:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	4611      	mov	r1, r2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f003 f91a 	bl	8005c9c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a74:	461a      	mov	r2, r3
 8002a76:	2380      	movs	r3, #128	; 0x80
 8002a78:	6093      	str	r3, [r2, #8]
}
 8002a7a:	e19b      	b.n	8002db4 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a92:	d134      	bne.n	8002afe <HCD_HC_OUT_IRQHandler+0x476>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	0151      	lsls	r1, r2, #5
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	440a      	add	r2, r1
 8002aaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002aae:	f043 0302 	orr.w	r3, r3, #2
 8002ab2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	4611      	mov	r1, r2
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f003 f8ec 	bl	8005c9c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	2310      	movs	r3, #16
 8002ad4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ae8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	212c      	movs	r1, #44	; 0x2c
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	3361      	adds	r3, #97	; 0x61
 8002af8:	2208      	movs	r2, #8
 8002afa:	701a      	strb	r2, [r3, #0]
}
 8002afc:	e15a      	b.n	8002db4 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	015a      	lsls	r2, r3, #5
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	4413      	add	r3, r2
 8002b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	f040 814f 	bne.w	8002db4 <HCD_HC_OUT_IRQHandler+0x72c>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	015a      	lsls	r2, r3, #5
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	0151      	lsls	r1, r2, #5
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	440a      	add	r2, r1
 8002b2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b30:	f023 0302 	bic.w	r3, r3, #2
 8002b34:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	212c      	movs	r1, #44	; 0x2c
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	4413      	add	r3, r2
 8002b42:	3361      	adds	r3, #97	; 0x61
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d17d      	bne.n	8002c46 <HCD_HC_OUT_IRQHandler+0x5be>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	212c      	movs	r1, #44	; 0x2c
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	3360      	adds	r3, #96	; 0x60
 8002b58:	2201      	movs	r2, #1
 8002b5a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	212c      	movs	r1, #44	; 0x2c
 8002b62:	fb01 f303 	mul.w	r3, r1, r3
 8002b66:	4413      	add	r3, r2
 8002b68:	333f      	adds	r3, #63	; 0x3f
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d00a      	beq.n	8002b86 <HCD_HC_OUT_IRQHandler+0x4fe>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	212c      	movs	r1, #44	; 0x2c
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	333f      	adds	r3, #63	; 0x3f
 8002b7e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	f040 8100 	bne.w	8002d86 <HCD_HC_OUT_IRQHandler+0x6fe>
        if (hhcd->Init.dma_enable == 0U)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d113      	bne.n	8002bb6 <HCD_HC_OUT_IRQHandler+0x52e>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	212c      	movs	r1, #44	; 0x2c
 8002b94:	fb01 f303 	mul.w	r3, r1, r3
 8002b98:	4413      	add	r3, r2
 8002b9a:	3355      	adds	r3, #85	; 0x55
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	f083 0301 	eor.w	r3, r3, #1
 8002ba2:	b2d8      	uxtb	r0, r3
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	212c      	movs	r1, #44	; 0x2c
 8002baa:	fb01 f303 	mul.w	r3, r1, r3
 8002bae:	4413      	add	r3, r2
 8002bb0:	3355      	adds	r3, #85	; 0x55
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	f040 80e3 	bne.w	8002d86 <HCD_HC_OUT_IRQHandler+0x6fe>
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	212c      	movs	r1, #44	; 0x2c
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	334c      	adds	r3, #76	; 0x4c
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 80d8 	beq.w	8002d86 <HCD_HC_OUT_IRQHandler+0x6fe>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	212c      	movs	r1, #44	; 0x2c
 8002bdc:	fb01 f303 	mul.w	r3, r1, r3
 8002be0:	4413      	add	r3, r2
 8002be2:	334c      	adds	r3, #76	; 0x4c
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	202c      	movs	r0, #44	; 0x2c
 8002bec:	fb00 f202 	mul.w	r2, r0, r2
 8002bf0:	440a      	add	r2, r1
 8002bf2:	3240      	adds	r2, #64	; 0x40
 8002bf4:	8812      	ldrh	r2, [r2, #0]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	202c      	movs	r0, #44	; 0x2c
 8002c00:	fb00 f202 	mul.w	r2, r0, r2
 8002c04:	440a      	add	r2, r1
 8002c06:	3240      	adds	r2, #64	; 0x40
 8002c08:	8812      	ldrh	r2, [r2, #0]
 8002c0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 80b5 	beq.w	8002d86 <HCD_HC_OUT_IRQHandler+0x6fe>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	212c      	movs	r1, #44	; 0x2c
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	3355      	adds	r3, #85	; 0x55
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	f083 0301 	eor.w	r3, r3, #1
 8002c30:	b2d8      	uxtb	r0, r3
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	212c      	movs	r1, #44	; 0x2c
 8002c38:	fb01 f303 	mul.w	r3, r1, r3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3355      	adds	r3, #85	; 0x55
 8002c40:	4602      	mov	r2, r0
 8002c42:	701a      	strb	r2, [r3, #0]
 8002c44:	e09f      	b.n	8002d86 <HCD_HC_OUT_IRQHandler+0x6fe>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	212c      	movs	r1, #44	; 0x2c
 8002c4c:	fb01 f303 	mul.w	r3, r1, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	3361      	adds	r3, #97	; 0x61
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d109      	bne.n	8002c6e <HCD_HC_OUT_IRQHandler+0x5e6>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	212c      	movs	r1, #44	; 0x2c
 8002c60:	fb01 f303 	mul.w	r3, r1, r3
 8002c64:	4413      	add	r3, r2
 8002c66:	3360      	adds	r3, #96	; 0x60
 8002c68:	2202      	movs	r2, #2
 8002c6a:	701a      	strb	r2, [r3, #0]
 8002c6c:	e08b      	b.n	8002d86 <HCD_HC_OUT_IRQHandler+0x6fe>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	212c      	movs	r1, #44	; 0x2c
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	3361      	adds	r3, #97	; 0x61
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d109      	bne.n	8002c96 <HCD_HC_OUT_IRQHandler+0x60e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	212c      	movs	r1, #44	; 0x2c
 8002c88:	fb01 f303 	mul.w	r3, r1, r3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3360      	adds	r3, #96	; 0x60
 8002c90:	2202      	movs	r2, #2
 8002c92:	701a      	strb	r2, [r3, #0]
 8002c94:	e077      	b.n	8002d86 <HCD_HC_OUT_IRQHandler+0x6fe>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	212c      	movs	r1, #44	; 0x2c
 8002c9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3361      	adds	r3, #97	; 0x61
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b05      	cmp	r3, #5
 8002ca8:	d109      	bne.n	8002cbe <HCD_HC_OUT_IRQHandler+0x636>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	212c      	movs	r1, #44	; 0x2c
 8002cb0:	fb01 f303 	mul.w	r3, r1, r3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3360      	adds	r3, #96	; 0x60
 8002cb8:	2205      	movs	r2, #5
 8002cba:	701a      	strb	r2, [r3, #0]
 8002cbc:	e063      	b.n	8002d86 <HCD_HC_OUT_IRQHandler+0x6fe>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	212c      	movs	r1, #44	; 0x2c
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	3361      	adds	r3, #97	; 0x61
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b06      	cmp	r3, #6
 8002cd0:	d009      	beq.n	8002ce6 <HCD_HC_OUT_IRQHandler+0x65e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	212c      	movs	r1, #44	; 0x2c
 8002cd8:	fb01 f303 	mul.w	r3, r1, r3
 8002cdc:	4413      	add	r3, r2
 8002cde:	3361      	adds	r3, #97	; 0x61
 8002ce0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d14f      	bne.n	8002d86 <HCD_HC_OUT_IRQHandler+0x6fe>
      hhcd->hc[ch_num].ErrCnt++;
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	212c      	movs	r1, #44	; 0x2c
 8002cec:	fb01 f303 	mul.w	r3, r1, r3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	335c      	adds	r3, #92	; 0x5c
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	202c      	movs	r0, #44	; 0x2c
 8002cfe:	fb00 f303 	mul.w	r3, r0, r3
 8002d02:	440b      	add	r3, r1
 8002d04:	335c      	adds	r3, #92	; 0x5c
 8002d06:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	212c      	movs	r1, #44	; 0x2c
 8002d0e:	fb01 f303 	mul.w	r3, r1, r3
 8002d12:	4413      	add	r3, r2
 8002d14:	335c      	adds	r3, #92	; 0x5c
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d912      	bls.n	8002d42 <HCD_HC_OUT_IRQHandler+0x6ba>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	212c      	movs	r1, #44	; 0x2c
 8002d22:	fb01 f303 	mul.w	r3, r1, r3
 8002d26:	4413      	add	r3, r2
 8002d28:	335c      	adds	r3, #92	; 0x5c
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	212c      	movs	r1, #44	; 0x2c
 8002d34:	fb01 f303 	mul.w	r3, r1, r3
 8002d38:	4413      	add	r3, r2
 8002d3a:	3360      	adds	r3, #96	; 0x60
 8002d3c:	2204      	movs	r2, #4
 8002d3e:	701a      	strb	r2, [r3, #0]
 8002d40:	e021      	b.n	8002d86 <HCD_HC_OUT_IRQHandler+0x6fe>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	212c      	movs	r1, #44	; 0x2c
 8002d48:	fb01 f303 	mul.w	r3, r1, r3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3360      	adds	r3, #96	; 0x60
 8002d50:	2202      	movs	r2, #2
 8002d52:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	015a      	lsls	r2, r3, #5
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d6a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d72:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d80:	461a      	mov	r2, r3
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d92:	461a      	mov	r2, r3
 8002d94:	2302      	movs	r3, #2
 8002d96:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	b2d9      	uxtb	r1, r3
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	202c      	movs	r0, #44	; 0x2c
 8002da2:	fb00 f303 	mul.w	r3, r0, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	3360      	adds	r3, #96	; 0x60
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f007 fc8c 	bl	800a6cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002db4:	bf00      	nop
 8002db6:	3720      	adds	r7, #32
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08a      	sub	sp, #40	; 0x28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	f003 030f 	and.w	r3, r3, #15
 8002ddc:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	0c5b      	lsrs	r3, r3, #17
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	091b      	lsrs	r3, r3, #4
 8002dec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002df0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d004      	beq.n	8002e02 <HCD_RXQLVL_IRQHandler+0x46>
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	2b05      	cmp	r3, #5
 8002dfc:	f000 80a9 	beq.w	8002f52 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e00:	e0aa      	b.n	8002f58 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 80a6 	beq.w	8002f56 <HCD_RXQLVL_IRQHandler+0x19a>
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	212c      	movs	r1, #44	; 0x2c
 8002e10:	fb01 f303 	mul.w	r3, r1, r3
 8002e14:	4413      	add	r3, r2
 8002e16:	3344      	adds	r3, #68	; 0x44
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 809b 	beq.w	8002f56 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	212c      	movs	r1, #44	; 0x2c
 8002e26:	fb01 f303 	mul.w	r3, r1, r3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3350      	adds	r3, #80	; 0x50
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	441a      	add	r2, r3
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	202c      	movs	r0, #44	; 0x2c
 8002e3a:	fb00 f303 	mul.w	r3, r0, r3
 8002e3e:	440b      	add	r3, r1
 8002e40:	334c      	adds	r3, #76	; 0x4c
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d87a      	bhi.n	8002f3e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6818      	ldr	r0, [r3, #0]
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	212c      	movs	r1, #44	; 0x2c
 8002e52:	fb01 f303 	mul.w	r3, r1, r3
 8002e56:	4413      	add	r3, r2
 8002e58:	3344      	adds	r3, #68	; 0x44
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	b292      	uxth	r2, r2
 8002e60:	4619      	mov	r1, r3
 8002e62:	f002 fb3a 	bl	80054da <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	212c      	movs	r1, #44	; 0x2c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	3344      	adds	r3, #68	; 0x44
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	441a      	add	r2, r3
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	202c      	movs	r0, #44	; 0x2c
 8002e80:	fb00 f303 	mul.w	r3, r0, r3
 8002e84:	440b      	add	r3, r1
 8002e86:	3344      	adds	r3, #68	; 0x44
 8002e88:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	212c      	movs	r1, #44	; 0x2c
 8002e90:	fb01 f303 	mul.w	r3, r1, r3
 8002e94:	4413      	add	r3, r2
 8002e96:	3350      	adds	r3, #80	; 0x50
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	441a      	add	r2, r3
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	202c      	movs	r0, #44	; 0x2c
 8002ea4:	fb00 f303 	mul.w	r3, r0, r3
 8002ea8:	440b      	add	r3, r1
 8002eaa:	3350      	adds	r3, #80	; 0x50
 8002eac:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	0cdb      	lsrs	r3, r3, #19
 8002ebe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ec2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	212c      	movs	r1, #44	; 0x2c
 8002eca:	fb01 f303 	mul.w	r3, r1, r3
 8002ece:	4413      	add	r3, r2
 8002ed0:	3340      	adds	r3, #64	; 0x40
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d13c      	bne.n	8002f56 <HCD_RXQLVL_IRQHandler+0x19a>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d039      	beq.n	8002f56 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	015a      	lsls	r2, r3, #5
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ef8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f00:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0e:	461a      	mov	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	212c      	movs	r1, #44	; 0x2c
 8002f1a:	fb01 f303 	mul.w	r3, r1, r3
 8002f1e:	4413      	add	r3, r2
 8002f20:	3354      	adds	r3, #84	; 0x54
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	f083 0301 	eor.w	r3, r3, #1
 8002f28:	b2d8      	uxtb	r0, r3
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	212c      	movs	r1, #44	; 0x2c
 8002f30:	fb01 f303 	mul.w	r3, r1, r3
 8002f34:	4413      	add	r3, r2
 8002f36:	3354      	adds	r3, #84	; 0x54
 8002f38:	4602      	mov	r2, r0
 8002f3a:	701a      	strb	r2, [r3, #0]
      break;
 8002f3c:	e00b      	b.n	8002f56 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	212c      	movs	r1, #44	; 0x2c
 8002f44:	fb01 f303 	mul.w	r3, r1, r3
 8002f48:	4413      	add	r3, r2
 8002f4a:	3360      	adds	r3, #96	; 0x60
 8002f4c:	2204      	movs	r2, #4
 8002f4e:	701a      	strb	r2, [r3, #0]
      break;
 8002f50:	e001      	b.n	8002f56 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002f52:	bf00      	nop
 8002f54:	e000      	b.n	8002f58 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002f56:	bf00      	nop
  }
}
 8002f58:	bf00      	nop
 8002f5a:	3728      	adds	r7, #40	; 0x28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f8c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d10b      	bne.n	8002fb0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d102      	bne.n	8002fa8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f007 fb76 	bl	800a694 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	f043 0302 	orr.w	r3, r3, #2
 8002fae:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d132      	bne.n	8003020 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	f043 0308 	orr.w	r3, r3, #8
 8002fc0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d126      	bne.n	800301a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d113      	bne.n	8002ffc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002fda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fde:	d106      	bne.n	8002fee <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2102      	movs	r1, #2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f002 fb96 	bl	8005718 <USB_InitFSLSPClkSel>
 8002fec:	e011      	b.n	8003012 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f002 fb8f 	bl	8005718 <USB_InitFSLSPClkSel>
 8002ffa:	e00a      	b.n	8003012 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d106      	bne.n	8003012 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800300a:	461a      	mov	r2, r3
 800300c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003010:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f007 fb6c 	bl	800a6f0 <HAL_HCD_PortEnabled_Callback>
 8003018:	e002      	b.n	8003020 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f007 fb76 	bl	800a70c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 0320 	and.w	r3, r3, #32
 8003026:	2b20      	cmp	r3, #32
 8003028:	d103      	bne.n	8003032 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	f043 0320 	orr.w	r3, r3, #32
 8003030:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003038:	461a      	mov	r2, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	6013      	str	r3, [r2, #0]
}
 800303e:	bf00      	nop
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e304      	b.n	8003664 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 8087 	beq.w	8003176 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003068:	4b92      	ldr	r3, [pc, #584]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 030c 	and.w	r3, r3, #12
 8003070:	2b04      	cmp	r3, #4
 8003072:	d00c      	beq.n	800308e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003074:	4b8f      	ldr	r3, [pc, #572]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 030c 	and.w	r3, r3, #12
 800307c:	2b08      	cmp	r3, #8
 800307e:	d112      	bne.n	80030a6 <HAL_RCC_OscConfig+0x5e>
 8003080:	4b8c      	ldr	r3, [pc, #560]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800308c:	d10b      	bne.n	80030a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800308e:	4b89      	ldr	r3, [pc, #548]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d06c      	beq.n	8003174 <HAL_RCC_OscConfig+0x12c>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d168      	bne.n	8003174 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e2de      	b.n	8003664 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ae:	d106      	bne.n	80030be <HAL_RCC_OscConfig+0x76>
 80030b0:	4b80      	ldr	r3, [pc, #512]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a7f      	ldr	r2, [pc, #508]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 80030b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	e02e      	b.n	800311c <HAL_RCC_OscConfig+0xd4>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10c      	bne.n	80030e0 <HAL_RCC_OscConfig+0x98>
 80030c6:	4b7b      	ldr	r3, [pc, #492]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a7a      	ldr	r2, [pc, #488]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	4b78      	ldr	r3, [pc, #480]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a77      	ldr	r2, [pc, #476]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 80030d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e01d      	b.n	800311c <HAL_RCC_OscConfig+0xd4>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e8:	d10c      	bne.n	8003104 <HAL_RCC_OscConfig+0xbc>
 80030ea:	4b72      	ldr	r3, [pc, #456]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a71      	ldr	r2, [pc, #452]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 80030f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	4b6f      	ldr	r3, [pc, #444]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a6e      	ldr	r2, [pc, #440]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	e00b      	b.n	800311c <HAL_RCC_OscConfig+0xd4>
 8003104:	4b6b      	ldr	r3, [pc, #428]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a6a      	ldr	r2, [pc, #424]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 800310a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	4b68      	ldr	r3, [pc, #416]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a67      	ldr	r2, [pc, #412]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 8003116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800311a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d013      	beq.n	800314c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003124:	f7fd feca 	bl	8000ebc <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800312c:	f7fd fec6 	bl	8000ebc <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b64      	cmp	r3, #100	; 0x64
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e292      	b.n	8003664 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313e:	4b5d      	ldr	r3, [pc, #372]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCC_OscConfig+0xe4>
 800314a:	e014      	b.n	8003176 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314c:	f7fd feb6 	bl	8000ebc <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003154:	f7fd feb2 	bl	8000ebc <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b64      	cmp	r3, #100	; 0x64
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e27e      	b.n	8003664 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003166:	4b53      	ldr	r3, [pc, #332]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x10c>
 8003172:	e000      	b.n	8003176 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d063      	beq.n	800324a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003182:	4b4c      	ldr	r3, [pc, #304]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f003 030c 	and.w	r3, r3, #12
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00b      	beq.n	80031a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800318e:	4b49      	ldr	r3, [pc, #292]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f003 030c 	and.w	r3, r3, #12
 8003196:	2b08      	cmp	r3, #8
 8003198:	d11c      	bne.n	80031d4 <HAL_RCC_OscConfig+0x18c>
 800319a:	4b46      	ldr	r3, [pc, #280]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d116      	bne.n	80031d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a6:	4b43      	ldr	r3, [pc, #268]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d005      	beq.n	80031be <HAL_RCC_OscConfig+0x176>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d001      	beq.n	80031be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e252      	b.n	8003664 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031be:	4b3d      	ldr	r3, [pc, #244]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	4939      	ldr	r1, [pc, #228]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d2:	e03a      	b.n	800324a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d020      	beq.n	800321e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031dc:	4b36      	ldr	r3, [pc, #216]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 80031de:	2201      	movs	r2, #1
 80031e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e2:	f7fd fe6b 	bl	8000ebc <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ea:	f7fd fe67 	bl	8000ebc <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e233      	b.n	8003664 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fc:	4b2d      	ldr	r3, [pc, #180]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d0f0      	beq.n	80031ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003208:	4b2a      	ldr	r3, [pc, #168]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4927      	ldr	r1, [pc, #156]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 8003218:	4313      	orrs	r3, r2
 800321a:	600b      	str	r3, [r1, #0]
 800321c:	e015      	b.n	800324a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800321e:	4b26      	ldr	r3, [pc, #152]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003224:	f7fd fe4a 	bl	8000ebc <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800322c:	f7fd fe46 	bl	8000ebc <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e212      	b.n	8003664 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800323e:	4b1d      	ldr	r3, [pc, #116]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f0      	bne.n	800322c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b00      	cmp	r3, #0
 8003254:	d03a      	beq.n	80032cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d019      	beq.n	8003292 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800325e:	4b17      	ldr	r3, [pc, #92]	; (80032bc <HAL_RCC_OscConfig+0x274>)
 8003260:	2201      	movs	r2, #1
 8003262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003264:	f7fd fe2a 	bl	8000ebc <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800326c:	f7fd fe26 	bl	8000ebc <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e1f2      	b.n	8003664 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800327e:	4b0d      	ldr	r3, [pc, #52]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800328a:	2001      	movs	r0, #1
 800328c:	f000 fc1c 	bl	8003ac8 <RCC_Delay>
 8003290:	e01c      	b.n	80032cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003292:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <HAL_RCC_OscConfig+0x274>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003298:	f7fd fe10 	bl	8000ebc <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800329e:	e00f      	b.n	80032c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032a0:	f7fd fe0c 	bl	8000ebc <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d908      	bls.n	80032c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e1d8      	b.n	8003664 <HAL_RCC_OscConfig+0x61c>
 80032b2:	bf00      	nop
 80032b4:	40021000 	.word	0x40021000
 80032b8:	42420000 	.word	0x42420000
 80032bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c0:	4b9b      	ldr	r3, [pc, #620]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1e9      	bne.n	80032a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 80a6 	beq.w	8003426 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032da:	2300      	movs	r3, #0
 80032dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032de:	4b94      	ldr	r3, [pc, #592]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10d      	bne.n	8003306 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ea:	4b91      	ldr	r3, [pc, #580]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	4a90      	ldr	r2, [pc, #576]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 80032f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f4:	61d3      	str	r3, [r2, #28]
 80032f6:	4b8e      	ldr	r3, [pc, #568]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fe:	60bb      	str	r3, [r7, #8]
 8003300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003302:	2301      	movs	r3, #1
 8003304:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003306:	4b8b      	ldr	r3, [pc, #556]	; (8003534 <HAL_RCC_OscConfig+0x4ec>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330e:	2b00      	cmp	r3, #0
 8003310:	d118      	bne.n	8003344 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003312:	4b88      	ldr	r3, [pc, #544]	; (8003534 <HAL_RCC_OscConfig+0x4ec>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a87      	ldr	r2, [pc, #540]	; (8003534 <HAL_RCC_OscConfig+0x4ec>)
 8003318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800331c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800331e:	f7fd fdcd 	bl	8000ebc <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003324:	e008      	b.n	8003338 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003326:	f7fd fdc9 	bl	8000ebc <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b64      	cmp	r3, #100	; 0x64
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e195      	b.n	8003664 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003338:	4b7e      	ldr	r3, [pc, #504]	; (8003534 <HAL_RCC_OscConfig+0x4ec>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0f0      	beq.n	8003326 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d106      	bne.n	800335a <HAL_RCC_OscConfig+0x312>
 800334c:	4b78      	ldr	r3, [pc, #480]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	4a77      	ldr	r2, [pc, #476]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	6213      	str	r3, [r2, #32]
 8003358:	e02d      	b.n	80033b6 <HAL_RCC_OscConfig+0x36e>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10c      	bne.n	800337c <HAL_RCC_OscConfig+0x334>
 8003362:	4b73      	ldr	r3, [pc, #460]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	4a72      	ldr	r2, [pc, #456]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 8003368:	f023 0301 	bic.w	r3, r3, #1
 800336c:	6213      	str	r3, [r2, #32]
 800336e:	4b70      	ldr	r3, [pc, #448]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	4a6f      	ldr	r2, [pc, #444]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 8003374:	f023 0304 	bic.w	r3, r3, #4
 8003378:	6213      	str	r3, [r2, #32]
 800337a:	e01c      	b.n	80033b6 <HAL_RCC_OscConfig+0x36e>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	2b05      	cmp	r3, #5
 8003382:	d10c      	bne.n	800339e <HAL_RCC_OscConfig+0x356>
 8003384:	4b6a      	ldr	r3, [pc, #424]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	4a69      	ldr	r2, [pc, #420]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 800338a:	f043 0304 	orr.w	r3, r3, #4
 800338e:	6213      	str	r3, [r2, #32]
 8003390:	4b67      	ldr	r3, [pc, #412]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	4a66      	ldr	r2, [pc, #408]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 8003396:	f043 0301 	orr.w	r3, r3, #1
 800339a:	6213      	str	r3, [r2, #32]
 800339c:	e00b      	b.n	80033b6 <HAL_RCC_OscConfig+0x36e>
 800339e:	4b64      	ldr	r3, [pc, #400]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	4a63      	ldr	r2, [pc, #396]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 80033a4:	f023 0301 	bic.w	r3, r3, #1
 80033a8:	6213      	str	r3, [r2, #32]
 80033aa:	4b61      	ldr	r3, [pc, #388]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	4a60      	ldr	r2, [pc, #384]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 80033b0:	f023 0304 	bic.w	r3, r3, #4
 80033b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d015      	beq.n	80033ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033be:	f7fd fd7d 	bl	8000ebc <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c4:	e00a      	b.n	80033dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c6:	f7fd fd79 	bl	8000ebc <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e143      	b.n	8003664 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033dc:	4b54      	ldr	r3, [pc, #336]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0ee      	beq.n	80033c6 <HAL_RCC_OscConfig+0x37e>
 80033e8:	e014      	b.n	8003414 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ea:	f7fd fd67 	bl	8000ebc <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f0:	e00a      	b.n	8003408 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f2:	f7fd fd63 	bl	8000ebc <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003400:	4293      	cmp	r3, r2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e12d      	b.n	8003664 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003408:	4b49      	ldr	r3, [pc, #292]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1ee      	bne.n	80033f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003414:	7dfb      	ldrb	r3, [r7, #23]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d105      	bne.n	8003426 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800341a:	4b45      	ldr	r3, [pc, #276]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	4a44      	ldr	r2, [pc, #272]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 8003420:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003424:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 808c 	beq.w	8003548 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003430:	4b3f      	ldr	r3, [pc, #252]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800343c:	d10e      	bne.n	800345c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800343e:	4b3c      	ldr	r3, [pc, #240]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003446:	2b08      	cmp	r3, #8
 8003448:	d108      	bne.n	800345c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800344a:	4b39      	ldr	r3, [pc, #228]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 800344c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003456:	d101      	bne.n	800345c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e103      	b.n	8003664 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	2b02      	cmp	r3, #2
 8003462:	d14e      	bne.n	8003502 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003464:	4b32      	ldr	r3, [pc, #200]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d009      	beq.n	8003484 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8003470:	4b2f      	ldr	r3, [pc, #188]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800347c:	429a      	cmp	r2, r3
 800347e:	d001      	beq.n	8003484 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e0ef      	b.n	8003664 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003484:	4b2c      	ldr	r3, [pc, #176]	; (8003538 <HAL_RCC_OscConfig+0x4f0>)
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348a:	f7fd fd17 	bl	8000ebc <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003492:	f7fd fd13 	bl	8000ebc <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b64      	cmp	r3, #100	; 0x64
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e0df      	b.n	8003664 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80034a4:	4b22      	ldr	r3, [pc, #136]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1f0      	bne.n	8003492 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80034b0:	4b1f      	ldr	r3, [pc, #124]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034bc:	491c      	ldr	r1, [pc, #112]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80034c2:	4b1b      	ldr	r3, [pc, #108]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	4918      	ldr	r1, [pc, #96]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80034d4:	4b18      	ldr	r3, [pc, #96]	; (8003538 <HAL_RCC_OscConfig+0x4f0>)
 80034d6:	2201      	movs	r2, #1
 80034d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034da:	f7fd fcef 	bl	8000ebc <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80034e2:	f7fd fceb 	bl	8000ebc <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b64      	cmp	r3, #100	; 0x64
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e0b7      	b.n	8003664 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80034f4:	4b0e      	ldr	r3, [pc, #56]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0f0      	beq.n	80034e2 <HAL_RCC_OscConfig+0x49a>
 8003500:	e022      	b.n	8003548 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8003502:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	4a0a      	ldr	r2, [pc, #40]	; (8003530 <HAL_RCC_OscConfig+0x4e8>)
 8003508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800350c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800350e:	4b0a      	ldr	r3, [pc, #40]	; (8003538 <HAL_RCC_OscConfig+0x4f0>)
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003514:	f7fd fcd2 	bl	8000ebc <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800351a:	e00f      	b.n	800353c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800351c:	f7fd fcce 	bl	8000ebc <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b64      	cmp	r3, #100	; 0x64
 8003528:	d908      	bls.n	800353c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e09a      	b.n	8003664 <HAL_RCC_OscConfig+0x61c>
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000
 8003534:	40007000 	.word	0x40007000
 8003538:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800353c:	4b4b      	ldr	r3, [pc, #300]	; (800366c <HAL_RCC_OscConfig+0x624>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1e9      	bne.n	800351c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 8088 	beq.w	8003662 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003552:	4b46      	ldr	r3, [pc, #280]	; (800366c <HAL_RCC_OscConfig+0x624>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 030c 	and.w	r3, r3, #12
 800355a:	2b08      	cmp	r3, #8
 800355c:	d068      	beq.n	8003630 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d14d      	bne.n	8003602 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003566:	4b42      	ldr	r3, [pc, #264]	; (8003670 <HAL_RCC_OscConfig+0x628>)
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356c:	f7fd fca6 	bl	8000ebc <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003574:	f7fd fca2 	bl	8000ebc <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e06e      	b.n	8003664 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003586:	4b39      	ldr	r3, [pc, #228]	; (800366c <HAL_RCC_OscConfig+0x624>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800359a:	d10f      	bne.n	80035bc <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800359c:	4b33      	ldr	r3, [pc, #204]	; (800366c <HAL_RCC_OscConfig+0x624>)
 800359e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	4931      	ldr	r1, [pc, #196]	; (800366c <HAL_RCC_OscConfig+0x624>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035aa:	4b30      	ldr	r3, [pc, #192]	; (800366c <HAL_RCC_OscConfig+0x624>)
 80035ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ae:	f023 020f 	bic.w	r2, r3, #15
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	492d      	ldr	r1, [pc, #180]	; (800366c <HAL_RCC_OscConfig+0x624>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035bc:	4b2b      	ldr	r3, [pc, #172]	; (800366c <HAL_RCC_OscConfig+0x624>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035cc:	430b      	orrs	r3, r1
 80035ce:	4927      	ldr	r1, [pc, #156]	; (800366c <HAL_RCC_OscConfig+0x624>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035d4:	4b26      	ldr	r3, [pc, #152]	; (8003670 <HAL_RCC_OscConfig+0x628>)
 80035d6:	2201      	movs	r2, #1
 80035d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035da:	f7fd fc6f 	bl	8000ebc <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e2:	f7fd fc6b 	bl	8000ebc <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e037      	b.n	8003664 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035f4:	4b1d      	ldr	r3, [pc, #116]	; (800366c <HAL_RCC_OscConfig+0x624>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0f0      	beq.n	80035e2 <HAL_RCC_OscConfig+0x59a>
 8003600:	e02f      	b.n	8003662 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003602:	4b1b      	ldr	r3, [pc, #108]	; (8003670 <HAL_RCC_OscConfig+0x628>)
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003608:	f7fd fc58 	bl	8000ebc <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003610:	f7fd fc54 	bl	8000ebc <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e020      	b.n	8003664 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003622:	4b12      	ldr	r3, [pc, #72]	; (800366c <HAL_RCC_OscConfig+0x624>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0x5c8>
 800362e:	e018      	b.n	8003662 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e013      	b.n	8003664 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800363c:	4b0b      	ldr	r3, [pc, #44]	; (800366c <HAL_RCC_OscConfig+0x624>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	429a      	cmp	r2, r3
 800364e:	d106      	bne.n	800365e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365a:	429a      	cmp	r2, r3
 800365c:	d001      	beq.n	8003662 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40021000 	.word	0x40021000
 8003670:	42420060 	.word	0x42420060

08003674 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e0d0      	b.n	800382a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003688:	4b6a      	ldr	r3, [pc, #424]	; (8003834 <HAL_RCC_ClockConfig+0x1c0>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d910      	bls.n	80036b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003696:	4b67      	ldr	r3, [pc, #412]	; (8003834 <HAL_RCC_ClockConfig+0x1c0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f023 0207 	bic.w	r2, r3, #7
 800369e:	4965      	ldr	r1, [pc, #404]	; (8003834 <HAL_RCC_ClockConfig+0x1c0>)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a6:	4b63      	ldr	r3, [pc, #396]	; (8003834 <HAL_RCC_ClockConfig+0x1c0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d001      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0b8      	b.n	800382a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d020      	beq.n	8003706 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036d0:	4b59      	ldr	r3, [pc, #356]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	4a58      	ldr	r2, [pc, #352]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80036d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d005      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036e8:	4b53      	ldr	r3, [pc, #332]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	4a52      	ldr	r2, [pc, #328]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80036ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80036f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f4:	4b50      	ldr	r3, [pc, #320]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	494d      	ldr	r1, [pc, #308]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 8003702:	4313      	orrs	r3, r2
 8003704:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d040      	beq.n	8003794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d107      	bne.n	800372a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371a:	4b47      	ldr	r3, [pc, #284]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d115      	bne.n	8003752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e07f      	b.n	800382a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b02      	cmp	r3, #2
 8003730:	d107      	bne.n	8003742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003732:	4b41      	ldr	r3, [pc, #260]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d109      	bne.n	8003752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e073      	b.n	800382a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003742:	4b3d      	ldr	r3, [pc, #244]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e06b      	b.n	800382a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003752:	4b39      	ldr	r3, [pc, #228]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f023 0203 	bic.w	r2, r3, #3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	4936      	ldr	r1, [pc, #216]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 8003760:	4313      	orrs	r3, r2
 8003762:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003764:	f7fd fbaa 	bl	8000ebc <HAL_GetTick>
 8003768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800376a:	e00a      	b.n	8003782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800376c:	f7fd fba6 	bl	8000ebc <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	f241 3288 	movw	r2, #5000	; 0x1388
 800377a:	4293      	cmp	r3, r2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e053      	b.n	800382a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003782:	4b2d      	ldr	r3, [pc, #180]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f003 020c 	and.w	r2, r3, #12
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	429a      	cmp	r2, r3
 8003792:	d1eb      	bne.n	800376c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003794:	4b27      	ldr	r3, [pc, #156]	; (8003834 <HAL_RCC_ClockConfig+0x1c0>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d210      	bcs.n	80037c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a2:	4b24      	ldr	r3, [pc, #144]	; (8003834 <HAL_RCC_ClockConfig+0x1c0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f023 0207 	bic.w	r2, r3, #7
 80037aa:	4922      	ldr	r1, [pc, #136]	; (8003834 <HAL_RCC_ClockConfig+0x1c0>)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b2:	4b20      	ldr	r3, [pc, #128]	; (8003834 <HAL_RCC_ClockConfig+0x1c0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d001      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e032      	b.n	800382a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d0:	4b19      	ldr	r3, [pc, #100]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4916      	ldr	r1, [pc, #88]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d009      	beq.n	8003802 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037ee:	4b12      	ldr	r3, [pc, #72]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	490e      	ldr	r1, [pc, #56]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003802:	f000 f821 	bl	8003848 <HAL_RCC_GetSysClockFreq>
 8003806:	4602      	mov	r2, r0
 8003808:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	091b      	lsrs	r3, r3, #4
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	490a      	ldr	r1, [pc, #40]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 8003814:	5ccb      	ldrb	r3, [r1, r3]
 8003816:	fa22 f303 	lsr.w	r3, r2, r3
 800381a:	4a09      	ldr	r2, [pc, #36]	; (8003840 <HAL_RCC_ClockConfig+0x1cc>)
 800381c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800381e:	4b09      	ldr	r3, [pc, #36]	; (8003844 <HAL_RCC_ClockConfig+0x1d0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f7fd fa2c 	bl	8000c80 <HAL_InitTick>

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40022000 	.word	0x40022000
 8003838:	40021000 	.word	0x40021000
 800383c:	0800af9c 	.word	0x0800af9c
 8003840:	20000000 	.word	0x20000000
 8003844:	20000004 	.word	0x20000004

08003848 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800384c:	b099      	sub	sp, #100	; 0x64
 800384e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8003850:	4b66      	ldr	r3, [pc, #408]	; (80039ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003852:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8003856:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003858:	c407      	stmia	r4!, {r0, r1, r2}
 800385a:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800385c:	4b64      	ldr	r3, [pc, #400]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800385e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8003862:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003864:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003868:	2300      	movs	r3, #0
 800386a:	657b      	str	r3, [r7, #84]	; 0x54
 800386c:	2300      	movs	r3, #0
 800386e:	653b      	str	r3, [r7, #80]	; 0x50
 8003870:	2300      	movs	r3, #0
 8003872:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003874:	2300      	movs	r3, #0
 8003876:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t sysclockfreq = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	65bb      	str	r3, [r7, #88]	; 0x58
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003880:	2300      	movs	r3, #0
 8003882:	647b      	str	r3, [r7, #68]	; 0x44
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003884:	4b5b      	ldr	r3, [pc, #364]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800388a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800388c:	f003 030c 	and.w	r3, r3, #12
 8003890:	2b04      	cmp	r3, #4
 8003892:	d002      	beq.n	800389a <HAL_RCC_GetSysClockFreq+0x52>
 8003894:	2b08      	cmp	r3, #8
 8003896:	d003      	beq.n	80038a0 <HAL_RCC_GetSysClockFreq+0x58>
 8003898:	e09f      	b.n	80039da <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800389a:	4b57      	ldr	r3, [pc, #348]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x1b0>)
 800389c:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 800389e:	e09f      	b.n	80039e0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038a2:	0c9b      	lsrs	r3, r3, #18
 80038a4:	f003 030f 	and.w	r3, r3, #15
 80038a8:	3340      	adds	r3, #64	; 0x40
 80038aa:	f107 0220 	add.w	r2, r7, #32
 80038ae:	4413      	add	r3, r2
 80038b0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80038b4:	64fb      	str	r3, [r7, #76]	; 0x4c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 8084 	beq.w	80039ca <HAL_RCC_GetSysClockFreq+0x182>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80038c2:	4b4c      	ldr	r3, [pc, #304]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80038c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	3340      	adds	r3, #64	; 0x40
 80038cc:	f107 0220 	add.w	r2, r7, #32
 80038d0:	4413      	add	r3, r2
 80038d2:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80038d6:	653b      	str	r3, [r7, #80]	; 0x50
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80038d8:	4b46      	ldr	r3, [pc, #280]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d060      	beq.n	80039a6 <HAL_RCC_GetSysClockFreq+0x15e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80038e4:	4b43      	ldr	r3, [pc, #268]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	091b      	lsrs	r3, r3, #4
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	3301      	adds	r3, #1
 80038f0:	64bb      	str	r3, [r7, #72]	; 0x48
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80038f2:	4b40      	ldr	r3, [pc, #256]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80038f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f6:	0a1b      	lsrs	r3, r3, #8
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	3302      	adds	r3, #2
 80038fe:	647b      	str	r3, [r7, #68]	; 0x44
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8003900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003902:	2200      	movs	r2, #0
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	617a      	str	r2, [r7, #20]
 8003908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800390a:	2200      	movs	r2, #0
 800390c:	61bb      	str	r3, [r7, #24]
 800390e:	61fa      	str	r2, [r7, #28]
 8003910:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003914:	4622      	mov	r2, r4
 8003916:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800391a:	4684      	mov	ip, r0
 800391c:	fb0c f202 	mul.w	r2, ip, r2
 8003920:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003924:	468c      	mov	ip, r1
 8003926:	4618      	mov	r0, r3
 8003928:	4621      	mov	r1, r4
 800392a:	4603      	mov	r3, r0
 800392c:	fb03 f30c 	mul.w	r3, r3, ip
 8003930:	4413      	add	r3, r2
 8003932:	4602      	mov	r2, r0
 8003934:	69b9      	ldr	r1, [r7, #24]
 8003936:	fba2 8901 	umull	r8, r9, r2, r1
 800393a:	444b      	add	r3, r9
 800393c:	4699      	mov	r9, r3
 800393e:	4b2e      	ldr	r3, [pc, #184]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x1b0>)
 8003940:	fb03 f209 	mul.w	r2, r3, r9
 8003944:	2300      	movs	r3, #0
 8003946:	fb03 f308 	mul.w	r3, r3, r8
 800394a:	4413      	add	r3, r2
 800394c:	4a2a      	ldr	r2, [pc, #168]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x1b0>)
 800394e:	fba8 ab02 	umull	sl, fp, r8, r2
 8003952:	445b      	add	r3, fp
 8003954:	469b      	mov	fp, r3
 8003956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003958:	2200      	movs	r2, #0
 800395a:	60bb      	str	r3, [r7, #8]
 800395c:	60fa      	str	r2, [r7, #12]
 800395e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003960:	2200      	movs	r2, #0
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	607a      	str	r2, [r7, #4]
 8003966:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800396a:	4622      	mov	r2, r4
 800396c:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003970:	4641      	mov	r1, r8
 8003972:	fb01 f202 	mul.w	r2, r1, r2
 8003976:	46cc      	mov	ip, r9
 8003978:	4618      	mov	r0, r3
 800397a:	4621      	mov	r1, r4
 800397c:	4603      	mov	r3, r0
 800397e:	fb03 f30c 	mul.w	r3, r3, ip
 8003982:	4413      	add	r3, r2
 8003984:	4602      	mov	r2, r0
 8003986:	4641      	mov	r1, r8
 8003988:	fba2 5601 	umull	r5, r6, r2, r1
 800398c:	4433      	add	r3, r6
 800398e:	461e      	mov	r6, r3
 8003990:	462a      	mov	r2, r5
 8003992:	4633      	mov	r3, r6
 8003994:	4650      	mov	r0, sl
 8003996:	4659      	mov	r1, fp
 8003998:	f7fc fc4a 	bl	8000230 <__aeabi_uldivmod>
 800399c:	4602      	mov	r2, r0
 800399e:	460b      	mov	r3, r1
 80039a0:	4613      	mov	r3, r2
 80039a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039a4:	e007      	b.n	80039b6 <HAL_RCC_GetSysClockFreq+0x16e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80039a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a8:	4a13      	ldr	r2, [pc, #76]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x1b0>)
 80039aa:	fb03 f202 	mul.w	r2, r3, r2
 80039ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b4:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80039b6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80039ba:	461a      	mov	r2, r3
 80039bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039be:	4293      	cmp	r3, r2
 80039c0:	d108      	bne.n	80039d4 <HAL_RCC_GetSysClockFreq+0x18c>
        {
          pllclk = pllclk / 2;
 80039c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039c4:	085b      	lsrs	r3, r3, #1
 80039c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039c8:	e004      	b.n	80039d4 <HAL_RCC_GetSysClockFreq+0x18c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039cc:	4a0b      	ldr	r2, [pc, #44]	; (80039fc <HAL_RCC_GetSysClockFreq+0x1b4>)
 80039ce:	fb02 f303 	mul.w	r3, r2, r3
 80039d2:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
      sysclockfreq = pllclk;
 80039d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039d6:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 80039d8:	e002      	b.n	80039e0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039da:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039dc:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 80039de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3764      	adds	r7, #100	; 0x64
 80039e6:	46bd      	mov	sp, r7
 80039e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039ec:	0800af38 	.word	0x0800af38
 80039f0:	0800af48 	.word	0x0800af48
 80039f4:	40021000 	.word	0x40021000
 80039f8:	00989680 	.word	0x00989680
 80039fc:	003d0900 	.word	0x003d0900
 8003a00:	007a1200 	.word	0x007a1200

08003a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a08:	4b02      	ldr	r3, [pc, #8]	; (8003a14 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr
 8003a14:	20000000 	.word	0x20000000

08003a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a1c:	f7ff fff2 	bl	8003a04 <HAL_RCC_GetHCLKFreq>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	0a1b      	lsrs	r3, r3, #8
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	4903      	ldr	r1, [pc, #12]	; (8003a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a2e:	5ccb      	ldrb	r3, [r1, r3]
 8003a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	0800afac 	.word	0x0800afac

08003a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a44:	f7ff ffde 	bl	8003a04 <HAL_RCC_GetHCLKFreq>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	0adb      	lsrs	r3, r3, #11
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	4903      	ldr	r1, [pc, #12]	; (8003a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a56:	5ccb      	ldrb	r3, [r1, r3]
 8003a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40021000 	.word	0x40021000
 8003a64:	0800afac 	.word	0x0800afac

08003a68 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	220f      	movs	r2, #15
 8003a76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a78:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <HAL_RCC_GetClockConfig+0x58>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 0203 	and.w	r2, r3, #3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a84:	4b0e      	ldr	r3, [pc, #56]	; (8003ac0 <HAL_RCC_GetClockConfig+0x58>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a90:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <HAL_RCC_GetClockConfig+0x58>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003a9c:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <HAL_RCC_GetClockConfig+0x58>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	08db      	lsrs	r3, r3, #3
 8003aa2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003aaa:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0207 	and.w	r2, r3, #7
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	40022000 	.word	0x40022000

08003ac8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ad0:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <RCC_Delay+0x34>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a0a      	ldr	r2, [pc, #40]	; (8003b00 <RCC_Delay+0x38>)
 8003ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ada:	0a5b      	lsrs	r3, r3, #9
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	fb02 f303 	mul.w	r3, r2, r3
 8003ae2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ae4:	bf00      	nop
  }
  while (Delay --);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	1e5a      	subs	r2, r3, #1
 8003aea:	60fa      	str	r2, [r7, #12]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1f9      	bne.n	8003ae4 <RCC_Delay+0x1c>
}
 8003af0:	bf00      	nop
 8003af2:	bf00      	nop
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr
 8003afc:	20000000 	.word	0x20000000
 8003b00:	10624dd3 	.word	0x10624dd3

08003b04 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	2300      	movs	r3, #0
 8003b12:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d07d      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b24:	2300      	movs	r3, #0
 8003b26:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b28:	4b8b      	ldr	r3, [pc, #556]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10d      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b34:	4b88      	ldr	r3, [pc, #544]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	4a87      	ldr	r2, [pc, #540]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b3e:	61d3      	str	r3, [r2, #28]
 8003b40:	4b85      	ldr	r3, [pc, #532]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b50:	4b82      	ldr	r3, [pc, #520]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d118      	bne.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b5c:	4b7f      	ldr	r3, [pc, #508]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a7e      	ldr	r2, [pc, #504]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b68:	f7fd f9a8 	bl	8000ebc <HAL_GetTick>
 8003b6c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6e:	e008      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b70:	f7fd f9a4 	bl	8000ebc <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b64      	cmp	r3, #100	; 0x64
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e0e5      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b82:	4b76      	ldr	r3, [pc, #472]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f0      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b8e:	4b72      	ldr	r3, [pc, #456]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b96:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d02e      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d027      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bac:	4b6a      	ldr	r3, [pc, #424]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bb6:	4b6a      	ldr	r3, [pc, #424]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003bb8:	2201      	movs	r2, #1
 8003bba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bbc:	4b68      	ldr	r3, [pc, #416]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bc2:	4a65      	ldr	r2, [pc, #404]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d014      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd2:	f7fd f973 	bl	8000ebc <HAL_GetTick>
 8003bd6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd8:	e00a      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bda:	f7fd f96f 	bl	8000ebc <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e0ae      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf0:	4b59      	ldr	r3, [pc, #356]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0ee      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bfc:	4b56      	ldr	r3, [pc, #344]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	4953      	ldr	r1, [pc, #332]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c0e:	7efb      	ldrb	r3, [r7, #27]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d105      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c14:	4b50      	ldr	r3, [pc, #320]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	4a4f      	ldr	r2, [pc, #316]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d008      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c2c:	4b4a      	ldr	r3, [pc, #296]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	4947      	ldr	r1, [pc, #284]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d008      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003c4a:	4b43      	ldr	r3, [pc, #268]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	4940      	ldr	r1, [pc, #256]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d008      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8003c68:	4b3b      	ldr	r3, [pc, #236]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	4938      	ldr	r1, [pc, #224]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8003c7a:	4b37      	ldr	r3, [pc, #220]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d105      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8003c86:	4b34      	ldr	r3, [pc, #208]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8003c92:	2301      	movs	r3, #1
 8003c94:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d148      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8003c9c:	4b2e      	ldr	r3, [pc, #184]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d138      	bne.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003ca8:	4b2b      	ldr	r3, [pc, #172]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d009      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8003cb4:	4b28      	ldr	r3, [pc, #160]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d001      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e042      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8003cc8:	4b23      	ldr	r3, [pc, #140]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	4920      	ldr	r1, [pc, #128]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8003cda:	4b1f      	ldr	r3, [pc, #124]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cde:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	491c      	ldr	r1, [pc, #112]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8003cec:	4b1d      	ldr	r3, [pc, #116]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cee:	2201      	movs	r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf2:	f7fd f8e3 	bl	8000ebc <HAL_GetTick>
 8003cf6:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003cfa:	f7fd f8df 	bl	8000ebc <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b64      	cmp	r3, #100	; 0x64
 8003d06:	d901      	bls.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e020      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d0c:	4b12      	ldr	r3, [pc, #72]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0f0      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003d18:	e009      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8003d1a:	4b0f      	ldr	r3, [pc, #60]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d001      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e00f      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0310 	and.w	r3, r3, #16
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d008      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d3a:	4b07      	ldr	r3, [pc, #28]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	4904      	ldr	r1, [pc, #16]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3720      	adds	r7, #32
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	40007000 	.word	0x40007000
 8003d60:	42420440 	.word	0x42420440
 8003d64:	42420070 	.word	0x42420070

08003d68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e076      	b.n	8003e68 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d108      	bne.n	8003d94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d8a:	d009      	beq.n	8003da0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	61da      	str	r2, [r3, #28]
 8003d92:	e005      	b.n	8003da0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d106      	bne.n	8003dc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7fc fe8e 	bl	8000adc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dd6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e24:	ea42 0103 	orr.w	r1, r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	0c1a      	lsrs	r2, r3, #16
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f002 0204 	and.w	r2, r2, #4
 8003e46:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	69da      	ldr	r2, [r3, #28]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e56:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b088      	sub	sp, #32
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	099b      	lsrs	r3, r3, #6
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10f      	bne.n	8003eb4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	099b      	lsrs	r3, r3, #6
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d004      	beq.n	8003eb4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	4798      	blx	r3
    return;
 8003eb2:	e0be      	b.n	8004032 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	085b      	lsrs	r3, r3, #1
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00a      	beq.n	8003ed6 <HAL_SPI_IRQHandler+0x66>
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	09db      	lsrs	r3, r3, #7
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d004      	beq.n	8003ed6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	4798      	blx	r3
    return;
 8003ed4:	e0ad      	b.n	8004032 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	095b      	lsrs	r3, r3, #5
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d106      	bne.n	8003ef0 <HAL_SPI_IRQHandler+0x80>
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	099b      	lsrs	r3, r3, #6
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 80a1 	beq.w	8004032 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 809a 	beq.w	8004032 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	099b      	lsrs	r3, r3, #6
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d023      	beq.n	8003f52 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b03      	cmp	r3, #3
 8003f14:	d011      	beq.n	8003f3a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1a:	f043 0204 	orr.w	r2, r3, #4
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f22:	2300      	movs	r3, #0
 8003f24:	617b      	str	r3, [r7, #20]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	e00b      	b.n	8003f52 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	613b      	str	r3, [r7, #16]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	613b      	str	r3, [r7, #16]
 8003f4e:	693b      	ldr	r3, [r7, #16]
        return;
 8003f50:	e06f      	b.n	8004032 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	095b      	lsrs	r3, r3, #5
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d014      	beq.n	8003f88 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f62:	f043 0201 	orr.w	r2, r3, #1
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d04f      	beq.n	8004030 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f9e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d104      	bne.n	8003fbc <HAL_SPI_IRQHandler+0x14c>
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d034      	beq.n	8004026 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0203 	bic.w	r2, r2, #3
 8003fca:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d011      	beq.n	8003ff8 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd8:	4a17      	ldr	r2, [pc, #92]	; (8004038 <HAL_SPI_IRQHandler+0x1c8>)
 8003fda:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fd f8b3 	bl	800114c <HAL_DMA_Abort_IT>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d005      	beq.n	8003ff8 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d016      	beq.n	800402e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004004:	4a0c      	ldr	r2, [pc, #48]	; (8004038 <HAL_SPI_IRQHandler+0x1c8>)
 8004006:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800400c:	4618      	mov	r0, r3
 800400e:	f7fd f89d 	bl	800114c <HAL_DMA_Abort_IT>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00a      	beq.n	800402e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004024:	e003      	b.n	800402e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f808 	bl	800403c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800402c:	e000      	b.n	8004030 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800402e:	bf00      	nop
    return;
 8004030:	bf00      	nop
  }
}
 8004032:	3720      	adds	r7, #32
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	0800404f 	.word	0x0800404f

0800403c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	bc80      	pop	{r7}
 800404c:	4770      	bx	lr

0800404e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b084      	sub	sp, #16
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f7ff ffe7 	bl	800403c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800406e:	bf00      	nop
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b082      	sub	sp, #8
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e041      	b.n	800410c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d106      	bne.n	80040a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7fc fd7f 	bl	8000ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2202      	movs	r2, #2
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3304      	adds	r3, #4
 80040b2:	4619      	mov	r1, r3
 80040b4:	4610      	mov	r0, r2
 80040b6:	f000 fa77 	bl	80045a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b01      	cmp	r3, #1
 8004126:	d001      	beq.n	800412c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e03f      	b.n	80041ac <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0201 	orr.w	r2, r2, #1
 8004142:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a1b      	ldr	r2, [pc, #108]	; (80041b8 <HAL_TIM_Base_Start_IT+0xa4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d013      	beq.n	8004176 <HAL_TIM_Base_Start_IT+0x62>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004156:	d00e      	beq.n	8004176 <HAL_TIM_Base_Start_IT+0x62>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a17      	ldr	r2, [pc, #92]	; (80041bc <HAL_TIM_Base_Start_IT+0xa8>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d009      	beq.n	8004176 <HAL_TIM_Base_Start_IT+0x62>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a16      	ldr	r2, [pc, #88]	; (80041c0 <HAL_TIM_Base_Start_IT+0xac>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d004      	beq.n	8004176 <HAL_TIM_Base_Start_IT+0x62>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a14      	ldr	r2, [pc, #80]	; (80041c4 <HAL_TIM_Base_Start_IT+0xb0>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d111      	bne.n	800419a <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2b06      	cmp	r3, #6
 8004186:	d010      	beq.n	80041aa <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f042 0201 	orr.w	r2, r2, #1
 8004196:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004198:	e007      	b.n	80041aa <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f042 0201 	orr.w	r2, r2, #1
 80041a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bc80      	pop	{r7}
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40012c00 	.word	0x40012c00
 80041bc:	40000400 	.word	0x40000400
 80041c0:	40000800 	.word	0x40000800
 80041c4:	40000c00 	.word	0x40000c00

080041c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d122      	bne.n	8004224 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d11b      	bne.n	8004224 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f06f 0202 	mvn.w	r2, #2
 80041f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f9b1 	bl	8004572 <HAL_TIM_IC_CaptureCallback>
 8004210:	e005      	b.n	800421e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f9a4 	bl	8004560 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f9b3 	bl	8004584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f003 0304 	and.w	r3, r3, #4
 800422e:	2b04      	cmp	r3, #4
 8004230:	d122      	bne.n	8004278 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b04      	cmp	r3, #4
 800423e:	d11b      	bne.n	8004278 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f06f 0204 	mvn.w	r2, #4
 8004248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2202      	movs	r2, #2
 800424e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f987 	bl	8004572 <HAL_TIM_IC_CaptureCallback>
 8004264:	e005      	b.n	8004272 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f97a 	bl	8004560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f989 	bl	8004584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b08      	cmp	r3, #8
 8004284:	d122      	bne.n	80042cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b08      	cmp	r3, #8
 8004292:	d11b      	bne.n	80042cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f06f 0208 	mvn.w	r2, #8
 800429c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2204      	movs	r2, #4
 80042a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f95d 	bl	8004572 <HAL_TIM_IC_CaptureCallback>
 80042b8:	e005      	b.n	80042c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f950 	bl	8004560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f95f 	bl	8004584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f003 0310 	and.w	r3, r3, #16
 80042d6:	2b10      	cmp	r3, #16
 80042d8:	d122      	bne.n	8004320 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f003 0310 	and.w	r3, r3, #16
 80042e4:	2b10      	cmp	r3, #16
 80042e6:	d11b      	bne.n	8004320 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f06f 0210 	mvn.w	r2, #16
 80042f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2208      	movs	r2, #8
 80042f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f933 	bl	8004572 <HAL_TIM_IC_CaptureCallback>
 800430c:	e005      	b.n	800431a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f926 	bl	8004560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f935 	bl	8004584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b01      	cmp	r3, #1
 800432c:	d10e      	bne.n	800434c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b01      	cmp	r3, #1
 800433a:	d107      	bne.n	800434c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f06f 0201 	mvn.w	r2, #1
 8004344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7fc fb78 	bl	8000a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004356:	2b80      	cmp	r3, #128	; 0x80
 8004358:	d10e      	bne.n	8004378 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004364:	2b80      	cmp	r3, #128	; 0x80
 8004366:	d107      	bne.n	8004378 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 fa89 	bl	800488a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004382:	2b40      	cmp	r3, #64	; 0x40
 8004384:	d10e      	bne.n	80043a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004390:	2b40      	cmp	r3, #64	; 0x40
 8004392:	d107      	bne.n	80043a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800439c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f8f9 	bl	8004596 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b20      	cmp	r3, #32
 80043b0:	d10e      	bne.n	80043d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f003 0320 	and.w	r3, r3, #32
 80043bc:	2b20      	cmp	r3, #32
 80043be:	d107      	bne.n	80043d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f06f 0220 	mvn.w	r2, #32
 80043c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 fa54 	bl	8004878 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043d0:	bf00      	nop
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d101      	bne.n	80043f0 <HAL_TIM_ConfigClockSource+0x18>
 80043ec:	2302      	movs	r3, #2
 80043ee:	e0b3      	b.n	8004558 <HAL_TIM_ConfigClockSource+0x180>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800440e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004416:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004428:	d03e      	beq.n	80044a8 <HAL_TIM_ConfigClockSource+0xd0>
 800442a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800442e:	f200 8087 	bhi.w	8004540 <HAL_TIM_ConfigClockSource+0x168>
 8004432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004436:	f000 8085 	beq.w	8004544 <HAL_TIM_ConfigClockSource+0x16c>
 800443a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800443e:	d87f      	bhi.n	8004540 <HAL_TIM_ConfigClockSource+0x168>
 8004440:	2b70      	cmp	r3, #112	; 0x70
 8004442:	d01a      	beq.n	800447a <HAL_TIM_ConfigClockSource+0xa2>
 8004444:	2b70      	cmp	r3, #112	; 0x70
 8004446:	d87b      	bhi.n	8004540 <HAL_TIM_ConfigClockSource+0x168>
 8004448:	2b60      	cmp	r3, #96	; 0x60
 800444a:	d050      	beq.n	80044ee <HAL_TIM_ConfigClockSource+0x116>
 800444c:	2b60      	cmp	r3, #96	; 0x60
 800444e:	d877      	bhi.n	8004540 <HAL_TIM_ConfigClockSource+0x168>
 8004450:	2b50      	cmp	r3, #80	; 0x50
 8004452:	d03c      	beq.n	80044ce <HAL_TIM_ConfigClockSource+0xf6>
 8004454:	2b50      	cmp	r3, #80	; 0x50
 8004456:	d873      	bhi.n	8004540 <HAL_TIM_ConfigClockSource+0x168>
 8004458:	2b40      	cmp	r3, #64	; 0x40
 800445a:	d058      	beq.n	800450e <HAL_TIM_ConfigClockSource+0x136>
 800445c:	2b40      	cmp	r3, #64	; 0x40
 800445e:	d86f      	bhi.n	8004540 <HAL_TIM_ConfigClockSource+0x168>
 8004460:	2b30      	cmp	r3, #48	; 0x30
 8004462:	d064      	beq.n	800452e <HAL_TIM_ConfigClockSource+0x156>
 8004464:	2b30      	cmp	r3, #48	; 0x30
 8004466:	d86b      	bhi.n	8004540 <HAL_TIM_ConfigClockSource+0x168>
 8004468:	2b20      	cmp	r3, #32
 800446a:	d060      	beq.n	800452e <HAL_TIM_ConfigClockSource+0x156>
 800446c:	2b20      	cmp	r3, #32
 800446e:	d867      	bhi.n	8004540 <HAL_TIM_ConfigClockSource+0x168>
 8004470:	2b00      	cmp	r3, #0
 8004472:	d05c      	beq.n	800452e <HAL_TIM_ConfigClockSource+0x156>
 8004474:	2b10      	cmp	r3, #16
 8004476:	d05a      	beq.n	800452e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004478:	e062      	b.n	8004540 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6818      	ldr	r0, [r3, #0]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	6899      	ldr	r1, [r3, #8]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f000 f970 	bl	800476e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800449c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	609a      	str	r2, [r3, #8]
      break;
 80044a6:	e04e      	b.n	8004546 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6818      	ldr	r0, [r3, #0]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	6899      	ldr	r1, [r3, #8]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f000 f959 	bl	800476e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689a      	ldr	r2, [r3, #8]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044ca:	609a      	str	r2, [r3, #8]
      break;
 80044cc:	e03b      	b.n	8004546 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6818      	ldr	r0, [r3, #0]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	6859      	ldr	r1, [r3, #4]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	461a      	mov	r2, r3
 80044dc:	f000 f8d0 	bl	8004680 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2150      	movs	r1, #80	; 0x50
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 f927 	bl	800473a <TIM_ITRx_SetConfig>
      break;
 80044ec:	e02b      	b.n	8004546 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6818      	ldr	r0, [r3, #0]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	6859      	ldr	r1, [r3, #4]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	461a      	mov	r2, r3
 80044fc:	f000 f8ee 	bl	80046dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2160      	movs	r1, #96	; 0x60
 8004506:	4618      	mov	r0, r3
 8004508:	f000 f917 	bl	800473a <TIM_ITRx_SetConfig>
      break;
 800450c:	e01b      	b.n	8004546 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	6859      	ldr	r1, [r3, #4]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	461a      	mov	r2, r3
 800451c:	f000 f8b0 	bl	8004680 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2140      	movs	r1, #64	; 0x40
 8004526:	4618      	mov	r0, r3
 8004528:	f000 f907 	bl	800473a <TIM_ITRx_SetConfig>
      break;
 800452c:	e00b      	b.n	8004546 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4619      	mov	r1, r3
 8004538:	4610      	mov	r0, r2
 800453a:	f000 f8fe 	bl	800473a <TIM_ITRx_SetConfig>
        break;
 800453e:	e002      	b.n	8004546 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004540:	bf00      	nop
 8004542:	e000      	b.n	8004546 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004544:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	bc80      	pop	{r7}
 8004570:	4770      	bx	lr

08004572 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	bc80      	pop	{r7}
 8004582:	4770      	bx	lr

08004584 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	bc80      	pop	{r7}
 8004594:	4770      	bx	lr

08004596 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bc80      	pop	{r7}
 80045a6:	4770      	bx	lr

080045a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a2d      	ldr	r2, [pc, #180]	; (8004670 <TIM_Base_SetConfig+0xc8>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d00f      	beq.n	80045e0 <TIM_Base_SetConfig+0x38>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c6:	d00b      	beq.n	80045e0 <TIM_Base_SetConfig+0x38>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a2a      	ldr	r2, [pc, #168]	; (8004674 <TIM_Base_SetConfig+0xcc>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d007      	beq.n	80045e0 <TIM_Base_SetConfig+0x38>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a29      	ldr	r2, [pc, #164]	; (8004678 <TIM_Base_SetConfig+0xd0>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d003      	beq.n	80045e0 <TIM_Base_SetConfig+0x38>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a28      	ldr	r2, [pc, #160]	; (800467c <TIM_Base_SetConfig+0xd4>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d108      	bne.n	80045f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a1e      	ldr	r2, [pc, #120]	; (8004670 <TIM_Base_SetConfig+0xc8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d00f      	beq.n	800461a <TIM_Base_SetConfig+0x72>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004600:	d00b      	beq.n	800461a <TIM_Base_SetConfig+0x72>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a1b      	ldr	r2, [pc, #108]	; (8004674 <TIM_Base_SetConfig+0xcc>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d007      	beq.n	800461a <TIM_Base_SetConfig+0x72>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a1a      	ldr	r2, [pc, #104]	; (8004678 <TIM_Base_SetConfig+0xd0>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d003      	beq.n	800461a <TIM_Base_SetConfig+0x72>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a19      	ldr	r2, [pc, #100]	; (800467c <TIM_Base_SetConfig+0xd4>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d108      	bne.n	800462c <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	4313      	orrs	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	4313      	orrs	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a07      	ldr	r2, [pc, #28]	; (8004670 <TIM_Base_SetConfig+0xc8>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d103      	bne.n	8004660 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	615a      	str	r2, [r3, #20]
}
 8004666:	bf00      	nop
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	bc80      	pop	{r7}
 800466e:	4770      	bx	lr
 8004670:	40012c00 	.word	0x40012c00
 8004674:	40000400 	.word	0x40000400
 8004678:	40000800 	.word	0x40000800
 800467c:	40000c00 	.word	0x40000c00

08004680 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004680:	b480      	push	{r7}
 8004682:	b087      	sub	sp, #28
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	f023 0201 	bic.w	r2, r3, #1
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f023 030a 	bic.w	r3, r3, #10
 80046bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	621a      	str	r2, [r3, #32]
}
 80046d2:	bf00      	nop
 80046d4:	371c      	adds	r7, #28
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr

080046dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	f023 0210 	bic.w	r2, r3, #16
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004706:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	031b      	lsls	r3, r3, #12
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	4313      	orrs	r3, r2
 8004710:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004718:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	621a      	str	r2, [r3, #32]
}
 8004730:	bf00      	nop
 8004732:	371c      	adds	r7, #28
 8004734:	46bd      	mov	sp, r7
 8004736:	bc80      	pop	{r7}
 8004738:	4770      	bx	lr

0800473a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800473a:	b480      	push	{r7}
 800473c:	b085      	sub	sp, #20
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
 8004742:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004750:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4313      	orrs	r3, r2
 8004758:	f043 0307 	orr.w	r3, r3, #7
 800475c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	609a      	str	r2, [r3, #8]
}
 8004764:	bf00      	nop
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr

0800476e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800476e:	b480      	push	{r7}
 8004770:	b087      	sub	sp, #28
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	607a      	str	r2, [r7, #4]
 800477a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004788:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	021a      	lsls	r2, r3, #8
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	431a      	orrs	r2, r3
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	4313      	orrs	r3, r2
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	4313      	orrs	r3, r2
 800479a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	609a      	str	r2, [r3, #8]
}
 80047a2:	bf00      	nop
 80047a4:	371c      	adds	r7, #28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr

080047ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d101      	bne.n	80047c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047c0:	2302      	movs	r3, #2
 80047c2:	e04b      	b.n	800485c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a19      	ldr	r2, [pc, #100]	; (8004868 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d013      	beq.n	8004830 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004810:	d00e      	beq.n	8004830 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a15      	ldr	r2, [pc, #84]	; (800486c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d009      	beq.n	8004830 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a13      	ldr	r2, [pc, #76]	; (8004870 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d004      	beq.n	8004830 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a12      	ldr	r2, [pc, #72]	; (8004874 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d10c      	bne.n	800484a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004836:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	4313      	orrs	r3, r2
 8004840:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	bc80      	pop	{r7}
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	40012c00 	.word	0x40012c00
 800486c:	40000400 	.word	0x40000400
 8004870:	40000800 	.word	0x40000800
 8004874:	40000c00 	.word	0x40000c00

08004878 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	bc80      	pop	{r7}
 8004888:	4770      	bx	lr

0800488a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr

0800489c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e03f      	b.n	800492e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d106      	bne.n	80048c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7fc f988 	bl	8000bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2224      	movs	r2, #36	; 0x24
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 fc61 	bl	80051a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	695a      	ldr	r2, [r3, #20]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2220      	movs	r2, #32
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b08a      	sub	sp, #40	; 0x28
 800493a:	af02      	add	r7, sp, #8
 800493c:	60f8      	str	r0, [r7, #12]
 800493e:	60b9      	str	r1, [r7, #8]
 8004940:	603b      	str	r3, [r7, #0]
 8004942:	4613      	mov	r3, r2
 8004944:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004946:	2300      	movs	r3, #0
 8004948:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b20      	cmp	r3, #32
 8004954:	d17c      	bne.n	8004a50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <HAL_UART_Transmit+0x2c>
 800495c:	88fb      	ldrh	r3, [r7, #6]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e075      	b.n	8004a52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800496c:	2b01      	cmp	r3, #1
 800496e:	d101      	bne.n	8004974 <HAL_UART_Transmit+0x3e>
 8004970:	2302      	movs	r3, #2
 8004972:	e06e      	b.n	8004a52 <HAL_UART_Transmit+0x11c>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2221      	movs	r2, #33	; 0x21
 8004986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800498a:	f7fc fa97 	bl	8000ebc <HAL_GetTick>
 800498e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	88fa      	ldrh	r2, [r7, #6]
 8004994:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	88fa      	ldrh	r2, [r7, #6]
 800499a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a4:	d108      	bne.n	80049b8 <HAL_UART_Transmit+0x82>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d104      	bne.n	80049b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80049ae:	2300      	movs	r3, #0
 80049b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	61bb      	str	r3, [r7, #24]
 80049b6:	e003      	b.n	80049c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049bc:	2300      	movs	r3, #0
 80049be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80049c8:	e02a      	b.n	8004a20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2200      	movs	r2, #0
 80049d2:	2180      	movs	r1, #128	; 0x80
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 fa4c 	bl	8004e72 <UART_WaitOnFlagUntilTimeout>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e036      	b.n	8004a52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10b      	bne.n	8004a02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	881b      	ldrh	r3, [r3, #0]
 80049ee:	461a      	mov	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	3302      	adds	r3, #2
 80049fe:	61bb      	str	r3, [r7, #24]
 8004a00:	e007      	b.n	8004a12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	781a      	ldrb	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1cf      	bne.n	80049ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	2200      	movs	r2, #0
 8004a32:	2140      	movs	r1, #64	; 0x40
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 fa1c 	bl	8004e72 <UART_WaitOnFlagUntilTimeout>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e006      	b.n	8004a52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2220      	movs	r2, #32
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	e000      	b.n	8004a52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a50:	2302      	movs	r3, #2
  }
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3720      	adds	r7, #32
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b085      	sub	sp, #20
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	60f8      	str	r0, [r7, #12]
 8004a62:	60b9      	str	r1, [r7, #8]
 8004a64:	4613      	mov	r3, r2
 8004a66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b20      	cmp	r3, #32
 8004a72:	d130      	bne.n	8004ad6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <HAL_UART_Transmit_IT+0x26>
 8004a7a:	88fb      	ldrh	r3, [r7, #6]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e029      	b.n	8004ad8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d101      	bne.n	8004a92 <HAL_UART_Transmit_IT+0x38>
 8004a8e:	2302      	movs	r3, #2
 8004a90:	e022      	b.n	8004ad8 <HAL_UART_Transmit_IT+0x7e>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	88fa      	ldrh	r2, [r7, #6]
 8004aa4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	88fa      	ldrh	r2, [r7, #6]
 8004aaa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2221      	movs	r2, #33	; 0x21
 8004ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68da      	ldr	r2, [r3, #12]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ad0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	e000      	b.n	8004ad8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004ad6:	2302      	movs	r3, #2
  }
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bc80      	pop	{r7}
 8004ae0:	4770      	bx	lr
	...

08004ae4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b08a      	sub	sp, #40	; 0x28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10d      	bne.n	8004b36 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	f003 0320 	and.w	r3, r3, #32
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d008      	beq.n	8004b36 <HAL_UART_IRQHandler+0x52>
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	f003 0320 	and.w	r3, r3, #32
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fa90 	bl	8005054 <UART_Receive_IT>
      return;
 8004b34:	e17b      	b.n	8004e2e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 80b1 	beq.w	8004ca0 <HAL_UART_IRQHandler+0x1bc>
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d105      	bne.n	8004b54 <HAL_UART_IRQHandler+0x70>
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 80a6 	beq.w	8004ca0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00a      	beq.n	8004b74 <HAL_UART_IRQHandler+0x90>
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6c:	f043 0201 	orr.w	r2, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	f003 0304 	and.w	r3, r3, #4
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <HAL_UART_IRQHandler+0xb0>
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d005      	beq.n	8004b94 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8c:	f043 0202 	orr.w	r2, r3, #2
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <HAL_UART_IRQHandler+0xd0>
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d005      	beq.n	8004bb4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bac:	f043 0204 	orr.w	r2, r3, #4
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00f      	beq.n	8004bde <HAL_UART_IRQHandler+0xfa>
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	f003 0320 	and.w	r3, r3, #32
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d104      	bne.n	8004bd2 <HAL_UART_IRQHandler+0xee>
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d005      	beq.n	8004bde <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd6:	f043 0208 	orr.w	r2, r3, #8
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 811e 	beq.w	8004e24 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d007      	beq.n	8004c02 <HAL_UART_IRQHandler+0x11e>
 8004bf2:	6a3b      	ldr	r3, [r7, #32]
 8004bf4:	f003 0320 	and.w	r3, r3, #32
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d002      	beq.n	8004c02 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 fa29 	bl	8005054 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	bf14      	ite	ne
 8004c10:	2301      	movne	r3, #1
 8004c12:	2300      	moveq	r3, #0
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1c:	f003 0308 	and.w	r3, r3, #8
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d102      	bne.n	8004c2a <HAL_UART_IRQHandler+0x146>
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d031      	beq.n	8004c8e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f96b 	bl	8004f06 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d023      	beq.n	8004c86 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695a      	ldr	r2, [r3, #20]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c4c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d013      	beq.n	8004c7e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5a:	4a76      	ldr	r2, [pc, #472]	; (8004e34 <HAL_UART_IRQHandler+0x350>)
 8004c5c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fc fa72 	bl	800114c <HAL_DMA_Abort_IT>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d016      	beq.n	8004c9c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c78:	4610      	mov	r0, r2
 8004c7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c7c:	e00e      	b.n	8004c9c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f8e3 	bl	8004e4a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c84:	e00a      	b.n	8004c9c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f8df 	bl	8004e4a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c8c:	e006      	b.n	8004c9c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f8db 	bl	8004e4a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004c9a:	e0c3      	b.n	8004e24 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c9c:	bf00      	nop
    return;
 8004c9e:	e0c1      	b.n	8004e24 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	f040 80a1 	bne.w	8004dec <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	f003 0310 	and.w	r3, r3, #16
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 809b 	beq.w	8004dec <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	f003 0310 	and.w	r3, r3, #16
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 8095 	beq.w	8004dec <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60fb      	str	r3, [r7, #12]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d04e      	beq.n	8004d84 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004cf0:	8a3b      	ldrh	r3, [r7, #16]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 8098 	beq.w	8004e28 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cfc:	8a3a      	ldrh	r2, [r7, #16]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	f080 8092 	bcs.w	8004e28 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	8a3a      	ldrh	r2, [r7, #16]
 8004d08:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	2b20      	cmp	r3, #32
 8004d12:	d02b      	beq.n	8004d6c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68da      	ldr	r2, [r3, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d22:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	695a      	ldr	r2, [r3, #20]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0201 	bic.w	r2, r2, #1
 8004d32:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	695a      	ldr	r2, [r3, #20]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d42:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0210 	bic.w	r2, r2, #16
 8004d60:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fc f9b5 	bl	80010d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f86d 	bl	8004e5c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004d82:	e051      	b.n	8004e28 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d047      	beq.n	8004e2c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004d9c:	8a7b      	ldrh	r3, [r7, #18]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d044      	beq.n	8004e2c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68da      	ldr	r2, [r3, #12]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004db0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	695a      	ldr	r2, [r3, #20]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0201 	bic.w	r2, r2, #1
 8004dc0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0210 	bic.w	r2, r2, #16
 8004dde:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004de0:	8a7b      	ldrh	r3, [r7, #18]
 8004de2:	4619      	mov	r1, r3
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f839 	bl	8004e5c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004dea:	e01f      	b.n	8004e2c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d008      	beq.n	8004e08 <HAL_UART_IRQHandler+0x324>
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f8c0 	bl	8004f86 <UART_Transmit_IT>
    return;
 8004e06:	e012      	b.n	8004e2e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00d      	beq.n	8004e2e <HAL_UART_IRQHandler+0x34a>
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d008      	beq.n	8004e2e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f901 	bl	8005024 <UART_EndTransmit_IT>
    return;
 8004e22:	e004      	b.n	8004e2e <HAL_UART_IRQHandler+0x34a>
    return;
 8004e24:	bf00      	nop
 8004e26:	e002      	b.n	8004e2e <HAL_UART_IRQHandler+0x34a>
      return;
 8004e28:	bf00      	nop
 8004e2a:	e000      	b.n	8004e2e <HAL_UART_IRQHandler+0x34a>
      return;
 8004e2c:	bf00      	nop
  }
}
 8004e2e:	3728      	adds	r7, #40	; 0x28
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	08004f5f 	.word	0x08004f5f

08004e38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bc80      	pop	{r7}
 8004e48:	4770      	bx	lr

08004e4a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e52:	bf00      	nop
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bc80      	pop	{r7}
 8004e5a:	4770      	bx	lr

08004e5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	460b      	mov	r3, r1
 8004e66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc80      	pop	{r7}
 8004e70:	4770      	bx	lr

08004e72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b084      	sub	sp, #16
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	60f8      	str	r0, [r7, #12]
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	603b      	str	r3, [r7, #0]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e82:	e02c      	b.n	8004ede <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8a:	d028      	beq.n	8004ede <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d007      	beq.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e92:	f7fc f813 	bl	8000ebc <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d21d      	bcs.n	8004ede <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68da      	ldr	r2, [r3, #12]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004eb0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	695a      	ldr	r2, [r3, #20]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 0201 	bic.w	r2, r2, #1
 8004ec0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e00f      	b.n	8004efe <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	bf0c      	ite	eq
 8004eee:	2301      	moveq	r3, #1
 8004ef0:	2300      	movne	r3, #0
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	79fb      	ldrb	r3, [r7, #7]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d0c3      	beq.n	8004e84 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f1c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	695a      	ldr	r2, [r3, #20]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0201 	bic.w	r2, r2, #1
 8004f2c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d107      	bne.n	8004f46 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68da      	ldr	r2, [r3, #12]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 0210 	bic.w	r2, r2, #16
 8004f44:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bc80      	pop	{r7}
 8004f5c:	4770      	bx	lr

08004f5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b084      	sub	sp, #16
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f7ff ff66 	bl	8004e4a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f7e:	bf00      	nop
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b085      	sub	sp, #20
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b21      	cmp	r3, #33	; 0x21
 8004f98:	d13e      	bne.n	8005018 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fa2:	d114      	bne.n	8004fce <UART_Transmit_IT+0x48>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d110      	bne.n	8004fce <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	881b      	ldrh	r3, [r3, #0]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fc0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	1c9a      	adds	r2, r3, #2
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	621a      	str	r2, [r3, #32]
 8004fcc:	e008      	b.n	8004fe0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	1c59      	adds	r1, r3, #1
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6211      	str	r1, [r2, #32]
 8004fd8:	781a      	ldrb	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	4619      	mov	r1, r3
 8004fee:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10f      	bne.n	8005014 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005002:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68da      	ldr	r2, [r3, #12]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005012:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005014:	2300      	movs	r3, #0
 8005016:	e000      	b.n	800501a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005018:	2302      	movs	r3, #2
  }
}
 800501a:	4618      	mov	r0, r3
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr

08005024 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800503a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2220      	movs	r2, #32
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f7ff fef7 	bl	8004e38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b22      	cmp	r3, #34	; 0x22
 8005066:	f040 8099 	bne.w	800519c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005072:	d117      	bne.n	80050a4 <UART_Receive_IT+0x50>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d113      	bne.n	80050a4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800507c:	2300      	movs	r3, #0
 800507e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005084:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	b29b      	uxth	r3, r3
 800508e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005092:	b29a      	uxth	r2, r3
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509c:	1c9a      	adds	r2, r3, #2
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	629a      	str	r2, [r3, #40]	; 0x28
 80050a2:	e026      	b.n	80050f2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a8:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80050aa:	2300      	movs	r3, #0
 80050ac:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050b6:	d007      	beq.n	80050c8 <UART_Receive_IT+0x74>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10a      	bne.n	80050d6 <UART_Receive_IT+0x82>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d106      	bne.n	80050d6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	701a      	strb	r2, [r3, #0]
 80050d4:	e008      	b.n	80050e8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050e2:	b2da      	uxtb	r2, r3
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ec:	1c5a      	adds	r2, r3, #1
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	3b01      	subs	r3, #1
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	4619      	mov	r1, r3
 8005100:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005102:	2b00      	cmp	r3, #0
 8005104:	d148      	bne.n	8005198 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 0220 	bic.w	r2, r2, #32
 8005114:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005124:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	695a      	ldr	r2, [r3, #20]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 0201 	bic.w	r2, r2, #1
 8005134:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2220      	movs	r2, #32
 800513a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005142:	2b01      	cmp	r3, #1
 8005144:	d123      	bne.n	800518e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 0210 	bic.w	r2, r2, #16
 800515a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0310 	and.w	r3, r3, #16
 8005166:	2b10      	cmp	r3, #16
 8005168:	d10a      	bne.n	8005180 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800516a:	2300      	movs	r3, #0
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005184:	4619      	mov	r1, r3
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7ff fe68 	bl	8004e5c <HAL_UARTEx_RxEventCallback>
 800518c:	e002      	b.n	8005194 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7fb fbea 	bl	8000968 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005194:	2300      	movs	r3, #0
 8005196:	e002      	b.n	800519e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005198:	2300      	movs	r3, #0
 800519a:	e000      	b.n	800519e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800519c:	2302      	movs	r3, #2
  }
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3718      	adds	r7, #24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
	...

080051a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689a      	ldr	r2, [r3, #8]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	431a      	orrs	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80051e2:	f023 030c 	bic.w	r3, r3, #12
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6812      	ldr	r2, [r2, #0]
 80051ea:	68b9      	ldr	r1, [r7, #8]
 80051ec:	430b      	orrs	r3, r1
 80051ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	699a      	ldr	r2, [r3, #24]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a2c      	ldr	r2, [pc, #176]	; (80052bc <UART_SetConfig+0x114>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d103      	bne.n	8005218 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005210:	f7fe fc16 	bl	8003a40 <HAL_RCC_GetPCLK2Freq>
 8005214:	60f8      	str	r0, [r7, #12]
 8005216:	e002      	b.n	800521e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005218:	f7fe fbfe 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 800521c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	4613      	mov	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	009a      	lsls	r2, r3, #2
 8005228:	441a      	add	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	fbb2 f3f3 	udiv	r3, r2, r3
 8005234:	4a22      	ldr	r2, [pc, #136]	; (80052c0 <UART_SetConfig+0x118>)
 8005236:	fba2 2303 	umull	r2, r3, r2, r3
 800523a:	095b      	lsrs	r3, r3, #5
 800523c:	0119      	lsls	r1, r3, #4
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	4613      	mov	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	009a      	lsls	r2, r3, #2
 8005248:	441a      	add	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	fbb2 f2f3 	udiv	r2, r2, r3
 8005254:	4b1a      	ldr	r3, [pc, #104]	; (80052c0 <UART_SetConfig+0x118>)
 8005256:	fba3 0302 	umull	r0, r3, r3, r2
 800525a:	095b      	lsrs	r3, r3, #5
 800525c:	2064      	movs	r0, #100	; 0x64
 800525e:	fb00 f303 	mul.w	r3, r0, r3
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	011b      	lsls	r3, r3, #4
 8005266:	3332      	adds	r3, #50	; 0x32
 8005268:	4a15      	ldr	r2, [pc, #84]	; (80052c0 <UART_SetConfig+0x118>)
 800526a:	fba2 2303 	umull	r2, r3, r2, r3
 800526e:	095b      	lsrs	r3, r3, #5
 8005270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005274:	4419      	add	r1, r3
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	4613      	mov	r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	009a      	lsls	r2, r3, #2
 8005280:	441a      	add	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	fbb2 f2f3 	udiv	r2, r2, r3
 800528c:	4b0c      	ldr	r3, [pc, #48]	; (80052c0 <UART_SetConfig+0x118>)
 800528e:	fba3 0302 	umull	r0, r3, r3, r2
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	2064      	movs	r0, #100	; 0x64
 8005296:	fb00 f303 	mul.w	r3, r0, r3
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	011b      	lsls	r3, r3, #4
 800529e:	3332      	adds	r3, #50	; 0x32
 80052a0:	4a07      	ldr	r2, [pc, #28]	; (80052c0 <UART_SetConfig+0x118>)
 80052a2:	fba2 2303 	umull	r2, r3, r2, r3
 80052a6:	095b      	lsrs	r3, r3, #5
 80052a8:	f003 020f 	and.w	r2, r3, #15
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	440a      	add	r2, r1
 80052b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80052b4:	bf00      	nop
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	40013800 	.word	0x40013800
 80052c0:	51eb851f 	.word	0x51eb851f

080052c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052c4:	b084      	sub	sp, #16
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b084      	sub	sp, #16
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	f107 001c 	add.w	r0, r7, #28
 80052d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f970 	bl	80055c8 <USB_CoreReset>
 80052e8:	4603      	mov	r3, r0
 80052ea:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	639a      	str	r2, [r3, #56]	; 0x38

  return ret;
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005304:	b004      	add	sp, #16
 8005306:	4770      	bx	lr

08005308 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f043 0201 	orr.w	r2, r3, #1
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	bc80      	pop	{r7}
 8005326:	4770      	bx	lr

08005328 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f023 0201 	bic.w	r2, r3, #1
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	bc80      	pop	{r7}
 8005346:	4770      	bx	lr

08005348 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	460b      	mov	r3, r1
 8005352:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d115      	bne.n	8005396 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005376:	2001      	movs	r0, #1
 8005378:	f7fb fdaa 	bl	8000ed0 <HAL_Delay>
      ms++;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	3301      	adds	r3, #1
 8005380:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f912 	bl	80055ac <USB_GetMode>
 8005388:	4603      	mov	r3, r0
 800538a:	2b01      	cmp	r3, #1
 800538c:	d01e      	beq.n	80053cc <USB_SetCurrentMode+0x84>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2b31      	cmp	r3, #49	; 0x31
 8005392:	d9f0      	bls.n	8005376 <USB_SetCurrentMode+0x2e>
 8005394:	e01a      	b.n	80053cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005396:	78fb      	ldrb	r3, [r7, #3]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d115      	bne.n	80053c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053a8:	2001      	movs	r0, #1
 80053aa:	f7fb fd91 	bl	8000ed0 <HAL_Delay>
      ms++;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	3301      	adds	r3, #1
 80053b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f8f9 	bl	80055ac <USB_GetMode>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d005      	beq.n	80053cc <USB_SetCurrentMode+0x84>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2b31      	cmp	r3, #49	; 0x31
 80053c4:	d9f0      	bls.n	80053a8 <USB_SetCurrentMode+0x60>
 80053c6:	e001      	b.n	80053cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e005      	b.n	80053d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2b32      	cmp	r3, #50	; 0x32
 80053d0:	d101      	bne.n	80053d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e000      	b.n	80053d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80053ea:	2300      	movs	r3, #0
 80053ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	019b      	lsls	r3, r3, #6
 80053f2:	f043 0220 	orr.w	r2, r3, #32
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	3301      	adds	r3, #1
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4a08      	ldr	r2, [pc, #32]	; (8005424 <USB_FlushTxFifo+0x44>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d901      	bls.n	800540c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e006      	b.n	800541a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f003 0320 	and.w	r3, r3, #32
 8005414:	2b20      	cmp	r3, #32
 8005416:	d0f0      	beq.n	80053fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	bc80      	pop	{r7}
 8005422:	4770      	bx	lr
 8005424:	00030d40 	.word	0x00030d40

08005428 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005430:	2300      	movs	r3, #0
 8005432:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2210      	movs	r2, #16
 8005438:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	3301      	adds	r3, #1
 800543e:	60fb      	str	r3, [r7, #12]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4a08      	ldr	r2, [pc, #32]	; (8005464 <USB_FlushRxFifo+0x3c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d901      	bls.n	800544c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e006      	b.n	800545a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	f003 0310 	and.w	r3, r3, #16
 8005454:	2b10      	cmp	r3, #16
 8005456:	d0f0      	beq.n	800543a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	bc80      	pop	{r7}
 8005462:	4770      	bx	lr
 8005464:	00030d40 	.word	0x00030d40

08005468 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005468:	b480      	push	{r7}
 800546a:	b089      	sub	sp, #36	; 0x24
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	4611      	mov	r1, r2
 8005474:	461a      	mov	r2, r3
 8005476:	460b      	mov	r3, r1
 8005478:	71fb      	strb	r3, [r7, #7]
 800547a:	4613      	mov	r3, r2
 800547c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005486:	88bb      	ldrh	r3, [r7, #4]
 8005488:	3303      	adds	r3, #3
 800548a:	089b      	lsrs	r3, r3, #2
 800548c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800548e:	2300      	movs	r3, #0
 8005490:	61bb      	str	r3, [r7, #24]
 8005492:	e018      	b.n	80054c6 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005494:	79fb      	ldrb	r3, [r7, #7]
 8005496:	031a      	lsls	r2, r3, #12
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	4413      	add	r3, r2
 800549c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054a0:	461a      	mov	r2, r3
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6013      	str	r3, [r2, #0]
    pSrc++;
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	3301      	adds	r3, #1
 80054ac:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	3301      	adds	r3, #1
 80054b2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	3301      	adds	r3, #1
 80054b8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	3301      	adds	r3, #1
 80054be:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	3301      	adds	r3, #1
 80054c4:	61bb      	str	r3, [r7, #24]
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d3e2      	bcc.n	8005494 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3724      	adds	r7, #36	; 0x24
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bc80      	pop	{r7}
 80054d8:	4770      	bx	lr

080054da <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80054da:	b480      	push	{r7}
 80054dc:	b08b      	sub	sp, #44	; 0x2c
 80054de:	af00      	add	r7, sp, #0
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	4613      	mov	r3, r2
 80054e6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80054f0:	88fb      	ldrh	r3, [r7, #6]
 80054f2:	089b      	lsrs	r3, r3, #2
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80054f8:	88fb      	ldrh	r3, [r7, #6]
 80054fa:	f003 0303 	and.w	r3, r3, #3
 80054fe:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005500:	2300      	movs	r3, #0
 8005502:	623b      	str	r3, [r7, #32]
 8005504:	e014      	b.n	8005530 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	601a      	str	r2, [r3, #0]
    pDest++;
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	3301      	adds	r3, #1
 8005516:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	3301      	adds	r3, #1
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	3301      	adds	r3, #1
 8005522:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	3301      	adds	r3, #1
 8005528:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	3301      	adds	r3, #1
 800552e:	623b      	str	r3, [r7, #32]
 8005530:	6a3a      	ldr	r2, [r7, #32]
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	429a      	cmp	r2, r3
 8005536:	d3e6      	bcc.n	8005506 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005538:	8bfb      	ldrh	r3, [r7, #30]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d01e      	beq.n	800557c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005548:	461a      	mov	r2, r3
 800554a:	f107 0310 	add.w	r3, r7, #16
 800554e:	6812      	ldr	r2, [r2, #0]
 8005550:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	b2db      	uxtb	r3, r3
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	fa22 f303 	lsr.w	r3, r2, r3
 800555e:	b2da      	uxtb	r2, r3
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	701a      	strb	r2, [r3, #0]
      i++;
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	3301      	adds	r3, #1
 8005568:	623b      	str	r3, [r7, #32]
      pDest++;
 800556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556c:	3301      	adds	r3, #1
 800556e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005570:	8bfb      	ldrh	r3, [r7, #30]
 8005572:	3b01      	subs	r3, #1
 8005574:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005576:	8bfb      	ldrh	r3, [r7, #30]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1ea      	bne.n	8005552 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800557e:	4618      	mov	r0, r3
 8005580:	372c      	adds	r7, #44	; 0x2c
 8005582:	46bd      	mov	sp, r7
 8005584:	bc80      	pop	{r7}
 8005586:	4770      	bx	lr

08005588 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	4013      	ands	r3, r2
 800559e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80055a0:	68fb      	ldr	r3, [r7, #12]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bc80      	pop	{r7}
 80055aa:	4770      	bx	lr

080055ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	f003 0301 	and.w	r3, r3, #1
}
 80055bc:	4618      	mov	r0, r3
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bc80      	pop	{r7}
 80055c4:	4770      	bx	lr
	...

080055c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	3301      	adds	r3, #1
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4a12      	ldr	r2, [pc, #72]	; (8005628 <USB_CoreReset+0x60>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d901      	bls.n	80055e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e01b      	b.n	800561e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	daf2      	bge.n	80055d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	f043 0201 	orr.w	r2, r3, #1
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	3301      	adds	r3, #1
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	4a08      	ldr	r2, [pc, #32]	; (8005628 <USB_CoreReset+0x60>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d901      	bls.n	8005610 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e006      	b.n	800561e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b01      	cmp	r3, #1
 800561a:	d0f0      	beq.n	80055fe <USB_CoreReset+0x36>

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	bc80      	pop	{r7}
 8005626:	4770      	bx	lr
 8005628:	00030d40 	.word	0x00030d40

0800562c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800562c:	b084      	sub	sp, #16
 800562e:	b580      	push	{r7, lr}
 8005630:	b084      	sub	sp, #16
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	f107 001c 	add.w	r0, r7, #28
 800563a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005648:	461a      	mov	r2, r3
 800564a:	2300      	movs	r3, #0
 800564c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSASEN);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005652:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSBSEN);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	639a      	str	r2, [r3, #56]	; 0x38
  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005674:	f023 0304 	bic.w	r3, r3, #4
 8005678:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800567a:	2110      	movs	r1, #16
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f7ff feaf 	bl	80053e0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7ff fed0 	bl	8005428 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005688:	2300      	movs	r3, #0
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	e015      	b.n	80056ba <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	4413      	add	r3, r2
 8005696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800569a:	461a      	mov	r2, r3
 800569c:	f04f 33ff 	mov.w	r3, #4294967295
 80056a0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ae:	461a      	mov	r2, r3
 80056b0:	2300      	movs	r3, #0
 80056b2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	3301      	adds	r3, #1
 80056b8:	60fb      	str	r3, [r7, #12]
 80056ba:	6a3b      	ldr	r3, [r7, #32]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d3e5      	bcc.n	800568e <USB_HostInit+0x62>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f04f 32ff 	mov.w	r2, #4294967295
 80056ce:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2280      	movs	r2, #128	; 0x80
 80056d4:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a0c      	ldr	r2, [pc, #48]	; (800570c <USB_HostInit+0xe0>)
 80056da:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a0c      	ldr	r2, [pc, #48]	; (8005710 <USB_HostInit+0xe4>)
 80056e0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	f043 0210 	orr.w	r2, r3, #16
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699a      	ldr	r2, [r3, #24]
 80056f4:	4b07      	ldr	r3, [pc, #28]	; (8005714 <USB_HostInit+0xe8>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005708:	b004      	add	sp, #16
 800570a:	4770      	bx	lr
 800570c:	00600080 	.word	0x00600080
 8005710:	004000e0 	.word	0x004000e0
 8005714:	a3200008 	.word	0xa3200008

08005718 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	460b      	mov	r3, r1
 8005722:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005736:	f023 0303 	bic.w	r3, r3, #3
 800573a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	78fb      	ldrb	r3, [r7, #3]
 8005746:	f003 0303 	and.w	r3, r3, #3
 800574a:	68f9      	ldr	r1, [r7, #12]
 800574c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005750:	4313      	orrs	r3, r2
 8005752:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005754:	78fb      	ldrb	r3, [r7, #3]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d107      	bne.n	800576a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005760:	461a      	mov	r2, r3
 8005762:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005766:	6053      	str	r3, [r2, #4]
 8005768:	e009      	b.n	800577e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800576a:	78fb      	ldrb	r3, [r7, #3]
 800576c:	2b02      	cmp	r3, #2
 800576e:	d106      	bne.n	800577e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005776:	461a      	mov	r2, r3
 8005778:	f241 7370 	movw	r3, #6000	; 0x1770
 800577c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	bc80      	pop	{r7}
 8005788:	4770      	bx	lr

0800578a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b084      	sub	sp, #16
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005796:	2300      	movs	r3, #0
 8005798:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80057aa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80057b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057b8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80057ba:	2064      	movs	r0, #100	; 0x64
 80057bc:	f7fb fb88 	bl	8000ed0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80057c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057cc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80057ce:	200a      	movs	r0, #10
 80057d0:	f7fb fb7e 	bl	8000ed0 <HAL_Delay>

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80057de:	b480      	push	{r7}
 80057e0:	b085      	sub	sp, #20
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	460b      	mov	r3, r1
 80057e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80057ee:	2300      	movs	r3, #0
 80057f0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005802:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d109      	bne.n	8005822 <USB_DriveVbus+0x44>
 800580e:	78fb      	ldrb	r3, [r7, #3]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d106      	bne.n	8005822 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800581c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005820:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800582c:	d109      	bne.n	8005842 <USB_DriveVbus+0x64>
 800582e:	78fb      	ldrb	r3, [r7, #3]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d106      	bne.n	8005842 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800583c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005840:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	bc80      	pop	{r7}
 800584c:	4770      	bx	lr

0800584e <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800584e:	b480      	push	{r7}
 8005850:	b085      	sub	sp, #20
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800585a:	2300      	movs	r3, #0
 800585c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	0c5b      	lsrs	r3, r3, #17
 800586c:	f003 0303 	and.w	r3, r3, #3
}
 8005870:	4618      	mov	r0, r3
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	bc80      	pop	{r7}
 8005878:	4770      	bx	lr

0800587a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800587a:	b480      	push	{r7}
 800587c:	b085      	sub	sp, #20
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	b29b      	uxth	r3, r3
}
 8005890:	4618      	mov	r0, r3
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	bc80      	pop	{r7}
 8005898:	4770      	bx	lr
	...

0800589c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b088      	sub	sp, #32
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	4608      	mov	r0, r1
 80058a6:	4611      	mov	r1, r2
 80058a8:	461a      	mov	r2, r3
 80058aa:	4603      	mov	r3, r0
 80058ac:	70fb      	strb	r3, [r7, #3]
 80058ae:	460b      	mov	r3, r1
 80058b0:	70bb      	strb	r3, [r7, #2]
 80058b2:	4613      	mov	r3, r2
 80058b4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80058be:	78fb      	ldrb	r3, [r7, #3]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ca:	461a      	mov	r2, r3
 80058cc:	f04f 33ff 	mov.w	r3, #4294967295
 80058d0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80058d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80058d6:	2b03      	cmp	r3, #3
 80058d8:	d867      	bhi.n	80059aa <USB_HC_Init+0x10e>
 80058da:	a201      	add	r2, pc, #4	; (adr r2, 80058e0 <USB_HC_Init+0x44>)
 80058dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e0:	080058f1 	.word	0x080058f1
 80058e4:	0800596d 	.word	0x0800596d
 80058e8:	080058f1 	.word	0x080058f1
 80058ec:	0800592f 	.word	0x0800592f
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80058f0:	78fb      	ldrb	r3, [r7, #3]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058fc:	461a      	mov	r2, r3
 80058fe:	f240 439d 	movw	r3, #1181	; 0x49d
 8005902:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005904:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005908:	2b00      	cmp	r3, #0
 800590a:	da51      	bge.n	80059b0 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800590c:	78fb      	ldrb	r3, [r7, #3]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	4413      	add	r3, r2
 8005914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	78fa      	ldrb	r2, [r7, #3]
 800591c:	0151      	lsls	r1, r2, #5
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	440a      	add	r2, r1
 8005922:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800592a:	60d3      	str	r3, [r2, #12]
      }
      break;
 800592c:	e040      	b.n	80059b0 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800592e:	78fb      	ldrb	r3, [r7, #3]
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	4413      	add	r3, r2
 8005936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800593a:	461a      	mov	r2, r3
 800593c:	f240 639d 	movw	r3, #1693	; 0x69d
 8005940:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005942:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005946:	2b00      	cmp	r3, #0
 8005948:	da34      	bge.n	80059b4 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800594a:	78fb      	ldrb	r3, [r7, #3]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	4413      	add	r3, r2
 8005952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	78fa      	ldrb	r2, [r7, #3]
 800595a:	0151      	lsls	r1, r2, #5
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	440a      	add	r2, r1
 8005960:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005968:	60d3      	str	r3, [r2, #12]
      }

      break;
 800596a:	e023      	b.n	80059b4 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800596c:	78fb      	ldrb	r3, [r7, #3]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	4413      	add	r3, r2
 8005974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005978:	461a      	mov	r2, r3
 800597a:	f240 2325 	movw	r3, #549	; 0x225
 800597e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005980:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005984:	2b00      	cmp	r3, #0
 8005986:	da17      	bge.n	80059b8 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005988:	78fb      	ldrb	r3, [r7, #3]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	4413      	add	r3, r2
 8005990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	78fa      	ldrb	r2, [r7, #3]
 8005998:	0151      	lsls	r1, r2, #5
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	440a      	add	r2, r1
 800599e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059a2:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80059a6:	60d3      	str	r3, [r2, #12]
      }
      break;
 80059a8:	e006      	b.n	80059b8 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	77fb      	strb	r3, [r7, #31]
      break;
 80059ae:	e004      	b.n	80059ba <USB_HC_Init+0x11e>
      break;
 80059b0:	bf00      	nop
 80059b2:	e002      	b.n	80059ba <USB_HC_Init+0x11e>
      break;
 80059b4:	bf00      	nop
 80059b6:	e000      	b.n	80059ba <USB_HC_Init+0x11e>
      break;
 80059b8:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059c0:	699a      	ldr	r2, [r3, #24]
 80059c2:	78fb      	ldrb	r3, [r7, #3]
 80059c4:	f003 030f 	and.w	r3, r3, #15
 80059c8:	2101      	movs	r1, #1
 80059ca:	fa01 f303 	lsl.w	r3, r1, r3
 80059ce:	6939      	ldr	r1, [r7, #16]
 80059d0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80059d4:	4313      	orrs	r3, r2
 80059d6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80059e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	da03      	bge.n	80059f4 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80059ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059f0:	61bb      	str	r3, [r7, #24]
 80059f2:	e001      	b.n	80059f8 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f7ff ff28 	bl	800584e <USB_GetHostSpeed>
 80059fe:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005a00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d106      	bne.n	8005a16 <USB_HC_Init+0x17a>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d003      	beq.n	8005a16 <USB_HC_Init+0x17a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005a0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	e001      	b.n	8005a1a <USB_HC_Init+0x17e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a1a:	787b      	ldrb	r3, [r7, #1]
 8005a1c:	059b      	lsls	r3, r3, #22
 8005a1e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005a22:	78bb      	ldrb	r3, [r7, #2]
 8005a24:	02db      	lsls	r3, r3, #11
 8005a26:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a2a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005a2c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a30:	049b      	lsls	r3, r3, #18
 8005a32:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005a36:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005a38:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005a3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005a3e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a44:	78fb      	ldrb	r3, [r7, #3]
 8005a46:	0159      	lsls	r1, r3, #5
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	440b      	add	r3, r1
 8005a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a50:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a56:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005a58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a5c:	2b03      	cmp	r3, #3
 8005a5e:	d10f      	bne.n	8005a80 <USB_HC_Init+0x1e4>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005a60:	78fb      	ldrb	r3, [r7, #3]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	78fa      	ldrb	r2, [r7, #3]
 8005a70:	0151      	lsls	r1, r2, #5
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	440a      	add	r2, r1
 8005a76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a7e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005a80:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3720      	adds	r7, #32
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop

08005a8c <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b088      	sub	sp, #32
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	785b      	ldrb	r3, [r3, #1]
 8005a9e:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005aa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005aa4:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d018      	beq.n	8005ae0 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	683a      	ldr	r2, [r7, #0]
 8005ab4:	8912      	ldrh	r2, [r2, #8]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	8912      	ldrh	r2, [r2, #8]
 8005abe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ac2:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8005ac4:	8bfa      	ldrh	r2, [r7, #30]
 8005ac6:	8a7b      	ldrh	r3, [r7, #18]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d90b      	bls.n	8005ae4 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8005acc:	8a7b      	ldrh	r3, [r7, #18]
 8005ace:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ad0:	8bfb      	ldrh	r3, [r7, #30]
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	8912      	ldrh	r2, [r2, #8]
 8005ad6:	fb03 f202 	mul.w	r2, r3, r2
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	611a      	str	r2, [r3, #16]
 8005ade:	e001      	b.n	8005ae4 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	78db      	ldrb	r3, [r3, #3]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d007      	beq.n	8005afc <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005aec:	8bfb      	ldrh	r3, [r7, #30]
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	8912      	ldrh	r2, [r2, #8]
 8005af2:	fb03 f202 	mul.w	r2, r3, r2
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	611a      	str	r2, [r3, #16]
 8005afa:	e003      	b.n	8005b04 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	695a      	ldr	r2, [r3, #20]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b0c:	8bfb      	ldrh	r3, [r7, #30]
 8005b0e:	04d9      	lsls	r1, r3, #19
 8005b10:	4b59      	ldr	r3, [pc, #356]	; (8005c78 <USB_HC_StartXfer+0x1ec>)
 8005b12:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b14:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	7a9b      	ldrb	r3, [r3, #10]
 8005b1a:	075b      	lsls	r3, r3, #29
 8005b1c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b20:	6979      	ldr	r1, [r7, #20]
 8005b22:	0148      	lsls	r0, r1, #5
 8005b24:	69b9      	ldr	r1, [r7, #24]
 8005b26:	4401      	add	r1, r0
 8005b28:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b2c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b2e:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f003 0301 	and.w	r3, r3, #1
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	bf0c      	ite	eq
 8005b40:	2301      	moveq	r3, #1
 8005b42:	2300      	movne	r3, #0
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	0151      	lsls	r1, r2, #5
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	440a      	add	r2, r1
 8005b5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b62:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b66:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	7c7b      	ldrb	r3, [r7, #17]
 8005b78:	075b      	lsls	r3, r3, #29
 8005b7a:	6979      	ldr	r1, [r7, #20]
 8005b7c:	0148      	lsls	r0, r1, #5
 8005b7e:	69b9      	ldr	r1, [r7, #24]
 8005b80:	4401      	add	r1, r0
 8005b82:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005b86:	4313      	orrs	r3, r2
 8005b88:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ba0:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	78db      	ldrb	r3, [r3, #3]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d004      	beq.n	8005bb4 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bb0:	60bb      	str	r3, [r7, #8]
 8005bb2:	e003      	b.n	8005bbc <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bba:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bc2:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	78db      	ldrb	r3, [r3, #3]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d147      	bne.n	8005c6e <USB_HC_StartXfer+0x1e2>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d043      	beq.n	8005c6e <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	79db      	ldrb	r3, [r3, #7]
 8005bea:	2b03      	cmp	r3, #3
 8005bec:	d830      	bhi.n	8005c50 <USB_HC_StartXfer+0x1c4>
 8005bee:	a201      	add	r2, pc, #4	; (adr r2, 8005bf4 <USB_HC_StartXfer+0x168>)
 8005bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf4:	08005c05 	.word	0x08005c05
 8005bf8:	08005c29 	.word	0x08005c29
 8005bfc:	08005c05 	.word	0x08005c05
 8005c00:	08005c29 	.word	0x08005c29
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	3303      	adds	r3, #3
 8005c0a:	089b      	lsrs	r3, r3, #2
 8005c0c:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005c0e:	89fa      	ldrh	r2, [r7, #14]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d91c      	bls.n	8005c54 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	f043 0220 	orr.w	r2, r3, #32
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	619a      	str	r2, [r3, #24]
        }
        break;
 8005c26:	e015      	b.n	8005c54 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	3303      	adds	r3, #3
 8005c2e:	089b      	lsrs	r3, r3, #2
 8005c30:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005c32:	89fa      	ldrh	r2, [r7, #14]
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d90a      	bls.n	8005c58 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005c4e:	e003      	b.n	8005c58 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 8005c50:	bf00      	nop
 8005c52:	e002      	b.n	8005c5a <USB_HC_StartXfer+0x1ce>
        break;
 8005c54:	bf00      	nop
 8005c56:	e000      	b.n	8005c5a <USB_HC_StartXfer+0x1ce>
        break;
 8005c58:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	68d9      	ldr	r1, [r3, #12]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	785a      	ldrb	r2, [r3, #1]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f7ff fbfd 	bl	8005468 <USB_WritePacket>
  }

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3720      	adds	r7, #32
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	1ff80000 	.word	0x1ff80000

08005c7c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	b29b      	uxth	r3, r3
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bc80      	pop	{r7}
 8005c9a:	4770      	bx	lr

08005c9c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b089      	sub	sp, #36	; 0x24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005cac:	78fb      	ldrb	r3, [r7, #3]
 8005cae:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	0c9b      	lsrs	r3, r3, #18
 8005cc4:	f003 0303 	and.w	r3, r3, #3
 8005cc8:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	0fdb      	lsrs	r3, r3, #31
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f003 0320 	and.w	r3, r3, #32
 8005ce8:	2b20      	cmp	r3, #32
 8005cea:	d104      	bne.n	8005cf6 <USB_HC_Halt+0x5a>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	e0e8      	b.n	8005ec8 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d002      	beq.n	8005d02 <USB_HC_Halt+0x66>
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d173      	bne.n	8005dea <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	0151      	lsls	r1, r2, #5
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	440a      	add	r2, r1
 8005d18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d20:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f040 80cb 	bne.w	8005ec6 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d143      	bne.n	8005dc4 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	0151      	lsls	r1, r2, #5
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	440a      	add	r2, r1
 8005d52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d5a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	0151      	lsls	r1, r2, #5
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	440a      	add	r2, r1
 8005d72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d7a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	0151      	lsls	r1, r2, #5
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	440a      	add	r2, r1
 8005d92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d9a:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	61fb      	str	r3, [r7, #28]
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005da8:	d81d      	bhi.n	8005de6 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dc0:	d0ec      	beq.n	8005d9c <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005dc2:	e080      	b.n	8005ec6 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	0151      	lsls	r1, r2, #5
 8005dd6:	69ba      	ldr	r2, [r7, #24]
 8005dd8:	440a      	add	r2, r1
 8005dda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005de2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005de4:	e06f      	b.n	8005ec6 <USB_HC_Halt+0x22a>
            break;
 8005de6:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005de8:	e06d      	b.n	8005ec6 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e08:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d143      	bne.n	8005ea2 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	0151      	lsls	r1, r2, #5
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	440a      	add	r2, r1
 8005e30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e38:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	0151      	lsls	r1, r2, #5
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	440a      	add	r2, r1
 8005e50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e58:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	0151      	lsls	r1, r2, #5
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	440a      	add	r2, r1
 8005e70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e78:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	61fb      	str	r3, [r7, #28]
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e86:	d81d      	bhi.n	8005ec4 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e9e:	d0ec      	beq.n	8005e7a <USB_HC_Halt+0x1de>
 8005ea0:	e011      	b.n	8005ec6 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	0151      	lsls	r1, r2, #5
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	440a      	add	r2, r1
 8005eb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ebc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ec0:	6013      	str	r3, [r2, #0]
 8005ec2:	e000      	b.n	8005ec6 <USB_HC_Halt+0x22a>
          break;
 8005ec4:	bf00      	nop
    }
  }

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3724      	adds	r7, #36	; 0x24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bc80      	pop	{r7}
 8005ed0:	4770      	bx	lr

08005ed2 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b086      	sub	sp, #24
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7ff fa20 	bl	8005328 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005ee8:	2110      	movs	r1, #16
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7ff fa78 	bl	80053e0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f7ff fa99 	bl	8005428 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	613b      	str	r3, [r7, #16]
 8005efa:	e01f      	b.n	8005f3c <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f12:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f1a:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f22:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f30:	461a      	mov	r2, r3
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	613b      	str	r3, [r7, #16]
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	2b0f      	cmp	r3, #15
 8005f40:	d9dc      	bls.n	8005efc <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005f42:	2300      	movs	r3, #0
 8005f44:	613b      	str	r3, [r7, #16]
 8005f46:	e034      	b.n	8005fb2 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f5e:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f66:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f6e:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	3301      	adds	r3, #1
 8005f86:	617b      	str	r3, [r7, #20]
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f8e:	d80c      	bhi.n	8005faa <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fa6:	d0ec      	beq.n	8005f82 <USB_StopHost+0xb0>
 8005fa8:	e000      	b.n	8005fac <USB_StopHost+0xda>
        break;
 8005faa:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	613b      	str	r3, [r7, #16]
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	2b0f      	cmp	r3, #15
 8005fb6:	d9c7      	bls.n	8005f48 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fc4:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fcc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3718      	adds	r7, #24
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005fd8:	b590      	push	{r4, r7, lr}
 8005fda:	b089      	sub	sp, #36	; 0x24
 8005fdc:	af04      	add	r7, sp, #16
 8005fde:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	2102      	movs	r1, #2
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fd0e 	bl	8006a08 <USBH_FindInterface>
 8005fec:	4603      	mov	r3, r0
 8005fee:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005ff0:	7bfb      	ldrb	r3, [r7, #15]
 8005ff2:	2bff      	cmp	r3, #255	; 0xff
 8005ff4:	d002      	beq.n	8005ffc <USBH_CDC_InterfaceInit+0x24>
 8005ff6:	7bfb      	ldrb	r3, [r7, #15]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d901      	bls.n	8006000 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	e13d      	b.n	800627c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006000:	7bfb      	ldrb	r3, [r7, #15]
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fce4 	bl	80069d2 <USBH_SelectInterface>
 800600a:	4603      	mov	r3, r0
 800600c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800600e:	7bbb      	ldrb	r3, [r7, #14]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006014:	2302      	movs	r3, #2
 8006016:	e131      	b.n	800627c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800601e:	2050      	movs	r0, #80	; 0x50
 8006020:	f004 fd9c 	bl	800ab5c <malloc>
 8006024:	4603      	mov	r3, r0
 8006026:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800602e:	69db      	ldr	r3, [r3, #28]
 8006030:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d101      	bne.n	800603c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006038:	2302      	movs	r3, #2
 800603a:	e11f      	b.n	800627c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800603c:	2250      	movs	r2, #80	; 0x50
 800603e:	2100      	movs	r1, #0
 8006040:	68b8      	ldr	r0, [r7, #8]
 8006042:	f004 fda9 	bl	800ab98 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006046:	7bfb      	ldrb	r3, [r7, #15]
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	211a      	movs	r1, #26
 800604c:	fb01 f303 	mul.w	r3, r1, r3
 8006050:	4413      	add	r3, r2
 8006052:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	b25b      	sxtb	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	da15      	bge.n	800608a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800605e:	7bfb      	ldrb	r3, [r7, #15]
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	211a      	movs	r1, #26
 8006064:	fb01 f303 	mul.w	r3, r1, r3
 8006068:	4413      	add	r3, r2
 800606a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800606e:	781a      	ldrb	r2, [r3, #0]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006074:	7bfb      	ldrb	r3, [r7, #15]
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	211a      	movs	r1, #26
 800607a:	fb01 f303 	mul.w	r3, r1, r3
 800607e:	4413      	add	r3, r2
 8006080:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006084:	881a      	ldrh	r2, [r3, #0]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	785b      	ldrb	r3, [r3, #1]
 800608e:	4619      	mov	r1, r3
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f001 ffa6 	bl	8007fe2 <USBH_AllocPipe>
 8006096:	4603      	mov	r3, r0
 8006098:	461a      	mov	r2, r3
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	7819      	ldrb	r1, [r3, #0]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	7858      	ldrb	r0, [r3, #1]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	8952      	ldrh	r2, [r2, #10]
 80060b6:	9202      	str	r2, [sp, #8]
 80060b8:	2203      	movs	r2, #3
 80060ba:	9201      	str	r2, [sp, #4]
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	4623      	mov	r3, r4
 80060c0:	4602      	mov	r2, r0
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f001 ff5e 	bl	8007f84 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	2200      	movs	r2, #0
 80060ce:	4619      	mov	r1, r3
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f004 fc95 	bl	800aa00 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80060d6:	2300      	movs	r3, #0
 80060d8:	2200      	movs	r2, #0
 80060da:	210a      	movs	r1, #10
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 fc93 	bl	8006a08 <USBH_FindInterface>
 80060e2:	4603      	mov	r3, r0
 80060e4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
 80060e8:	2bff      	cmp	r3, #255	; 0xff
 80060ea:	d002      	beq.n	80060f2 <USBH_CDC_InterfaceInit+0x11a>
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d901      	bls.n	80060f6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80060f2:	2302      	movs	r3, #2
 80060f4:	e0c2      	b.n	800627c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80060f6:	7bfb      	ldrb	r3, [r7, #15]
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	211a      	movs	r1, #26
 80060fc:	fb01 f303 	mul.w	r3, r1, r3
 8006100:	4413      	add	r3, r2
 8006102:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	b25b      	sxtb	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	da16      	bge.n	800613c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800610e:	7bfb      	ldrb	r3, [r7, #15]
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	211a      	movs	r1, #26
 8006114:	fb01 f303 	mul.w	r3, r1, r3
 8006118:	4413      	add	r3, r2
 800611a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800611e:	781a      	ldrb	r2, [r3, #0]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006124:	7bfb      	ldrb	r3, [r7, #15]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	211a      	movs	r1, #26
 800612a:	fb01 f303 	mul.w	r3, r1, r3
 800612e:	4413      	add	r3, r2
 8006130:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006134:	881a      	ldrh	r2, [r3, #0]
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	835a      	strh	r2, [r3, #26]
 800613a:	e015      	b.n	8006168 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	211a      	movs	r1, #26
 8006142:	fb01 f303 	mul.w	r3, r1, r3
 8006146:	4413      	add	r3, r2
 8006148:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800614c:	781a      	ldrb	r2, [r3, #0]
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006152:	7bfb      	ldrb	r3, [r7, #15]
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	211a      	movs	r1, #26
 8006158:	fb01 f303 	mul.w	r3, r1, r3
 800615c:	4413      	add	r3, r2
 800615e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006162:	881a      	ldrh	r2, [r3, #0]
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006168:	7bfb      	ldrb	r3, [r7, #15]
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	211a      	movs	r1, #26
 800616e:	fb01 f303 	mul.w	r3, r1, r3
 8006172:	4413      	add	r3, r2
 8006174:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	b25b      	sxtb	r3, r3
 800617c:	2b00      	cmp	r3, #0
 800617e:	da16      	bge.n	80061ae <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006180:	7bfb      	ldrb	r3, [r7, #15]
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	211a      	movs	r1, #26
 8006186:	fb01 f303 	mul.w	r3, r1, r3
 800618a:	4413      	add	r3, r2
 800618c:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006190:	781a      	ldrb	r2, [r3, #0]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006196:	7bfb      	ldrb	r3, [r7, #15]
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	211a      	movs	r1, #26
 800619c:	fb01 f303 	mul.w	r3, r1, r3
 80061a0:	4413      	add	r3, r2
 80061a2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80061a6:	881a      	ldrh	r2, [r3, #0]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	835a      	strh	r2, [r3, #26]
 80061ac:	e015      	b.n	80061da <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	211a      	movs	r1, #26
 80061b4:	fb01 f303 	mul.w	r3, r1, r3
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80061be:	781a      	ldrb	r2, [r3, #0]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80061c4:	7bfb      	ldrb	r3, [r7, #15]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	211a      	movs	r1, #26
 80061ca:	fb01 f303 	mul.w	r3, r1, r3
 80061ce:	4413      	add	r3, r2
 80061d0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80061d4:	881a      	ldrh	r2, [r3, #0]
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	7b9b      	ldrb	r3, [r3, #14]
 80061de:	4619      	mov	r1, r3
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f001 fefe 	bl	8007fe2 <USBH_AllocPipe>
 80061e6:	4603      	mov	r3, r0
 80061e8:	461a      	mov	r2, r3
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	7bdb      	ldrb	r3, [r3, #15]
 80061f2:	4619      	mov	r1, r3
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f001 fef4 	bl	8007fe2 <USBH_AllocPipe>
 80061fa:	4603      	mov	r3, r0
 80061fc:	461a      	mov	r2, r3
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	7b59      	ldrb	r1, [r3, #13]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	7b98      	ldrb	r0, [r3, #14]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	8b12      	ldrh	r2, [r2, #24]
 800621a:	9202      	str	r2, [sp, #8]
 800621c:	2202      	movs	r2, #2
 800621e:	9201      	str	r2, [sp, #4]
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	4623      	mov	r3, r4
 8006224:	4602      	mov	r2, r0
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f001 feac 	bl	8007f84 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	7b19      	ldrb	r1, [r3, #12]
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	7bd8      	ldrb	r0, [r3, #15]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	8b52      	ldrh	r2, [r2, #26]
 8006244:	9202      	str	r2, [sp, #8]
 8006246:	2202      	movs	r2, #2
 8006248:	9201      	str	r2, [sp, #4]
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	4623      	mov	r3, r4
 800624e:	4602      	mov	r2, r0
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f001 fe97 	bl	8007f84 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	7b5b      	ldrb	r3, [r3, #13]
 8006262:	2200      	movs	r2, #0
 8006264:	4619      	mov	r1, r3
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f004 fbca 	bl	800aa00 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	7b1b      	ldrb	r3, [r3, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	4619      	mov	r1, r3
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f004 fbc3 	bl	800aa00 <USBH_LL_SetToggle>

  return USBH_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	bd90      	pop	{r4, r7, pc}

08006284 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006292:	69db      	ldr	r3, [r3, #28]
 8006294:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00e      	beq.n	80062bc <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f001 fe8c 	bl	8007fc2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	4619      	mov	r1, r3
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f001 feb7 	bl	8008024 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	7b1b      	ldrb	r3, [r3, #12]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00e      	beq.n	80062e2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	7b1b      	ldrb	r3, [r3, #12]
 80062c8:	4619      	mov	r1, r3
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f001 fe79 	bl	8007fc2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	7b1b      	ldrb	r3, [r3, #12]
 80062d4:	4619      	mov	r1, r3
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f001 fea4 	bl	8008024 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	7b5b      	ldrb	r3, [r3, #13]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00e      	beq.n	8006308 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	7b5b      	ldrb	r3, [r3, #13]
 80062ee:	4619      	mov	r1, r3
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f001 fe66 	bl	8007fc2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	7b5b      	ldrb	r3, [r3, #13]
 80062fa:	4619      	mov	r1, r3
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f001 fe91 	bl	8008024 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800630e:	69db      	ldr	r3, [r3, #28]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00b      	beq.n	800632c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	4618      	mov	r0, r3
 800631e:	f004 fc25 	bl	800ab6c <free>
    phost->pActiveClass->pData = 0U;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006328:	2200      	movs	r2, #0
 800632a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b084      	sub	sp, #16
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800633e:	2302      	movs	r3, #2
 8006340:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	3340      	adds	r3, #64	; 0x40
 8006350:	4619      	mov	r1, r3
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f8b0 	bl	80064b8 <GetLineCoding>
 8006358:	4603      	mov	r3, r0
 800635a:	73fb      	strb	r3, [r7, #15]
  if (status == USBH_OK)
 800635c:	7bfb      	ldrb	r3, [r7, #15]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d105      	bne.n	800636e <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006368:	2102      	movs	r1, #2
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	4798      	blx	r3
  }
  return status;
 800636e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006380:	2301      	movs	r3, #1
 8006382:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006384:	2300      	movs	r3, #0
 8006386:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800638e:	69db      	ldr	r3, [r3, #28]
 8006390:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006398:	2b04      	cmp	r3, #4
 800639a:	d877      	bhi.n	800648c <USBH_CDC_Process+0x114>
 800639c:	a201      	add	r2, pc, #4	; (adr r2, 80063a4 <USBH_CDC_Process+0x2c>)
 800639e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a2:	bf00      	nop
 80063a4:	080063b9 	.word	0x080063b9
 80063a8:	080063bf 	.word	0x080063bf
 80063ac:	080063ef 	.word	0x080063ef
 80063b0:	08006463 	.word	0x08006463
 80063b4:	08006471 	.word	0x08006471
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80063b8:	2300      	movs	r3, #0
 80063ba:	73fb      	strb	r3, [r7, #15]
      break;
 80063bc:	e06d      	b.n	800649a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063c2:	4619      	mov	r1, r3
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f896 	bl	80064f6 <SetLineCoding>
 80063ca:	4603      	mov	r3, r0
 80063cc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80063ce:	7bbb      	ldrb	r3, [r7, #14]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d104      	bne.n	80063de <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2202      	movs	r2, #2
 80063d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80063dc:	e058      	b.n	8006490 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80063de:	7bbb      	ldrb	r3, [r7, #14]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d055      	beq.n	8006490 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2204      	movs	r2, #4
 80063e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80063ec:	e050      	b.n	8006490 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	3340      	adds	r3, #64	; 0x40
 80063f2:	4619      	mov	r1, r3
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f85f 	bl	80064b8 <GetLineCoding>
 80063fa:	4603      	mov	r3, r0
 80063fc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80063fe:	7bbb      	ldrb	r3, [r7, #14]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d126      	bne.n	8006452 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006416:	791b      	ldrb	r3, [r3, #4]
 8006418:	429a      	cmp	r2, r3
 800641a:	d13b      	bne.n	8006494 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006426:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006428:	429a      	cmp	r2, r3
 800642a:	d133      	bne.n	8006494 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006436:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006438:	429a      	cmp	r2, r3
 800643a:	d12b      	bne.n	8006494 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006444:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006446:	429a      	cmp	r2, r3
 8006448:	d124      	bne.n	8006494 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f9e1 	bl	8006812 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006450:	e020      	b.n	8006494 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006452:	7bbb      	ldrb	r3, [r7, #14]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d01d      	beq.n	8006494 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2204      	movs	r2, #4
 800645c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006460:	e018      	b.n	8006494 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f8da 	bl	800661c <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f969 	bl	8006740 <CDC_ProcessReception>
      break;
 800646e:	e014      	b.n	800649a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006470:	2100      	movs	r1, #0
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f001 f877 	bl	8007566 <USBH_ClrFeature>
 8006478:	4603      	mov	r3, r0
 800647a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800647c:	7bbb      	ldrb	r3, [r7, #14]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10a      	bne.n	8006498 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE ;
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800648a:	e005      	b.n	8006498 <USBH_CDC_Process+0x120>

    default:
      break;
 800648c:	bf00      	nop
 800648e:	e004      	b.n	800649a <USBH_CDC_Process+0x122>
      break;
 8006490:	bf00      	nop
 8006492:	e002      	b.n	800649a <USBH_CDC_Process+0x122>
      break;
 8006494:	bf00      	nop
 8006496:	e000      	b.n	800649a <USBH_CDC_Process+0x122>
      break;
 8006498:	bf00      	nop

  }

  return status;
 800649a:	7bfb      	ldrb	r3, [r7, #15]
}
 800649c:	4618      	mov	r0, r3
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bc80      	pop	{r7}
 80064b6:	4770      	bx	lr

080064b8 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	22a1      	movs	r2, #161	; 0xa1
 80064c6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2221      	movs	r2, #33	; 0x21
 80064cc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2207      	movs	r2, #7
 80064de:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	2207      	movs	r2, #7
 80064e4:	4619      	mov	r1, r3
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f001 fa18 	bl	800791c <USBH_CtlReq>
 80064ec:	4603      	mov	r3, r0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b082      	sub	sp, #8
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2221      	movs	r2, #33	; 0x21
 8006504:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2220      	movs	r2, #32
 800650a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2207      	movs	r2, #7
 800651c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2207      	movs	r2, #7
 8006522:	4619      	mov	r1, r3
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f001 f9f9 	bl	800791c <USBH_CtlReq>
 800652a:	4603      	mov	r3, r0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3708      	adds	r7, #8
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <USBH_CDC_Transmit>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Transmit(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006540:	2301      	movs	r3, #1
 8006542:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006554:	2b00      	cmp	r3, #0
 8006556:	d004      	beq.n	8006562 <USBH_CDC_Transmit+0x2e>
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800655e:	2b03      	cmp	r3, #3
 8006560:	d11d      	bne.n	800659e <USBH_CDC_Transmit+0x6a>
  {
    CDC_Handle->pTxData = pbuff;
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	61da      	str	r2, [r3, #28]
    CDC_Handle->TxDataLength = length;
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	625a      	str	r2, [r3, #36]	; 0x24
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	2203      	movs	r2, #3
 8006572:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	2201      	movs	r2, #1
 800657a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    Status = USBH_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2204      	movs	r2, #4
 8006586:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8006596:	2200      	movs	r2, #0
 8006598:	4619      	mov	r1, r3
 800659a:	f001 fe3b 	bl	8008214 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }
  return Status;
 800659e:	7dfb      	ldrb	r3, [r7, #23]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3718      	adds	r7, #24
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <USBH_CDC_Receive>:
* @brief  This function prepares the state before issuing the class specific commands
* @param  None
* @retval None
*/
USBH_StatusTypeDef  USBH_CDC_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80065b4:	2301      	movs	r3, #1
 80065b6:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065be:	69db      	ldr	r3, [r3, #28]
 80065c0:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d004      	beq.n	80065d6 <USBH_CDC_Receive+0x2e>
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80065d2:	2b03      	cmp	r3, #3
 80065d4:	d11d      	bne.n	8006612 <USBH_CDC_Receive+0x6a>
  {
    CDC_Handle->pRxData = pbuff;
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	621a      	str	r2, [r3, #32]
    CDC_Handle->RxDataLength = length;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	629a      	str	r2, [r3, #40]	; 0x28
    CDC_Handle->state = CDC_TRANSFER_DATA;
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	2203      	movs	r2, #3
 80065e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	2203      	movs	r2, #3
 80065ee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    Status = USBH_OK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2204      	movs	r2, #4
 80065fa:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800660a:	2200      	movs	r2, #0
 800660c:	4619      	mov	r1, r3
 800660e:	f001 fe01 	bl	8008214 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }
  return Status;
 8006612:	7dfb      	ldrb	r3, [r7, #23]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3718      	adds	r7, #24
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af02      	add	r7, sp, #8
 8006622:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800662a:	69db      	ldr	r3, [r3, #28]
 800662c:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800662e:	2300      	movs	r3, #0
 8006630:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006638:	2b01      	cmp	r3, #1
 800663a:	d002      	beq.n	8006642 <CDC_ProcessTransmission+0x26>
 800663c:	2b02      	cmp	r3, #2
 800663e:	d023      	beq.n	8006688 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006640:	e07a      	b.n	8006738 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	8b12      	ldrh	r2, [r2, #24]
 800664a:	4293      	cmp	r3, r2
 800664c:	d90b      	bls.n	8006666 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	69d9      	ldr	r1, [r3, #28]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	8b1a      	ldrh	r2, [r3, #24]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	7b5b      	ldrb	r3, [r3, #13]
 800665a:	2001      	movs	r0, #1
 800665c:	9000      	str	r0, [sp, #0]
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f001 fc4d 	bl	8007efe <USBH_BulkSendData>
 8006664:	e00b      	b.n	800667e <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800666e:	b29a      	uxth	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	7b5b      	ldrb	r3, [r3, #13]
 8006674:	2001      	movs	r0, #1
 8006676:	9000      	str	r0, [sp, #0]
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f001 fc40 	bl	8007efe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2202      	movs	r2, #2
 8006682:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006686:	e057      	b.n	8006738 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	7b5b      	ldrb	r3, [r3, #13]
 800668c:	4619      	mov	r1, r3
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f004 f98c 	bl	800a9ac <USBH_LL_GetURBState>
 8006694:	4603      	mov	r3, r0
 8006696:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006698:	7afb      	ldrb	r3, [r7, #11]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d136      	bne.n	800670c <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	8b12      	ldrh	r2, [r2, #24]
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d90e      	bls.n	80066c8 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	8b12      	ldrh	r2, [r2, #24]
 80066b2:	1a9a      	subs	r2, r3, r2
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	69db      	ldr	r3, [r3, #28]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	8b12      	ldrh	r2, [r2, #24]
 80066c0:	441a      	add	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	61da      	str	r2, [r3, #28]
 80066c6:	e002      	b.n	80066ce <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d004      	beq.n	80066e0 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80066de:	e006      	b.n	80066ee <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f003 ff13 	bl	800a514 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2204      	movs	r2, #4
 80066f2:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8006702:	2200      	movs	r2, #0
 8006704:	4619      	mov	r1, r3
 8006706:	f001 fd85 	bl	8008214 <osMessagePut>
      break;
 800670a:	e014      	b.n	8006736 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800670c:	7afb      	ldrb	r3, [r7, #11]
 800670e:	2b02      	cmp	r3, #2
 8006710:	d111      	bne.n	8006736 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2204      	movs	r2, #4
 800671e:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800672e:	2200      	movs	r2, #0
 8006730:	4619      	mov	r1, r3
 8006732:	f001 fd6f 	bl	8008214 <osMessagePut>
      break;
 8006736:	bf00      	nop
  }
}
 8006738:	bf00      	nop
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006752:	2300      	movs	r3, #0
 8006754:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800675c:	2b03      	cmp	r3, #3
 800675e:	d002      	beq.n	8006766 <CDC_ProcessReception+0x26>
 8006760:	2b04      	cmp	r3, #4
 8006762:	d00e      	beq.n	8006782 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006764:	e051      	b.n	800680a <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	6a19      	ldr	r1, [r3, #32]
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	8b5a      	ldrh	r2, [r3, #26]
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	7b1b      	ldrb	r3, [r3, #12]
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f001 fbe8 	bl	8007f48 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	2204      	movs	r2, #4
 800677c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006780:	e043      	b.n	800680a <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	7b1b      	ldrb	r3, [r3, #12]
 8006786:	4619      	mov	r1, r3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f004 f90f 	bl	800a9ac <USBH_LL_GetURBState>
 800678e:	4603      	mov	r3, r0
 8006790:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006792:	7cfb      	ldrb	r3, [r7, #19]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d137      	bne.n	8006808 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	7b1b      	ldrb	r3, [r3, #12]
 800679c:	4619      	mov	r1, r3
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f004 f872 	bl	800a888 <USBH_LL_GetLastXferSize>
 80067a4:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d016      	beq.n	80067de <CDC_ProcessReception+0x9e>
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	8b5b      	ldrh	r3, [r3, #26]
 80067b4:	461a      	mov	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d910      	bls.n	80067de <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	1ad2      	subs	r2, r2, r3
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	6a1a      	ldr	r2, [r3, #32]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	441a      	add	r2, r3
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	2203      	movs	r2, #3
 80067d8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80067dc:	e006      	b.n	80067ec <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f003 fea4 	bl	800a534 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2204      	movs	r2, #4
 80067f0:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8006800:	2200      	movs	r2, #0
 8006802:	4619      	mov	r1, r3
 8006804:	f001 fd06 	bl	8008214 <osMessagePut>
      break;
 8006808:	bf00      	nop
  }
}
 800680a:	bf00      	nop
 800680c:	3718      	adds	r7, #24
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006812:	b480      	push	{r7}
 8006814:	b083      	sub	sp, #12
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800681a:	bf00      	nop
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	bc80      	pop	{r7}
 8006822:	4770      	bx	lr

08006824 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006824:	b5b0      	push	{r4, r5, r7, lr}
 8006826:	b090      	sub	sp, #64	; 0x40
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	4613      	mov	r3, r2
 8006830:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d101      	bne.n	800683c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006838:	2302      	movs	r3, #2
 800683a:	e04d      	b.n	80068d8 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	79fa      	ldrb	r2, [r7, #7]
 8006840:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 f847 	bl	80068e8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

  /* Assign User process */
  if (pUsrFunc != NULL)
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d003      	beq.n	8006888 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8006888:	4b15      	ldr	r3, [pc, #84]	; (80068e0 <USBH_Init+0xbc>)
 800688a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800688e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006890:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8006894:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006898:	2100      	movs	r1, #0
 800689a:	4618      	mov	r0, r3
 800689c:	f001 fc91 	bl	80081c2 <osMessageCreate>
 80068a0:	4602      	mov	r2, r0
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 80068a8:	4b0e      	ldr	r3, [pc, #56]	; (80068e4 <USBH_Init+0xc0>)
 80068aa:	f107 0414 	add.w	r4, r7, #20
 80068ae:	461d      	mov	r5, r3
 80068b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80068b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 80068bc:	f107 0314 	add.w	r3, r7, #20
 80068c0:	68f9      	ldr	r1, [r7, #12]
 80068c2:	4618      	mov	r0, r3
 80068c4:	f001 fc1d 	bl	8008102 <osThreadCreate>
 80068c8:	4602      	mov	r2, r0
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f003 ff29 	bl	800a728 <USBH_LL_Init>

  return USBH_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3740      	adds	r7, #64	; 0x40
 80068dc:	46bd      	mov	sp, r7
 80068de:	bdb0      	pop	{r4, r5, r7, pc}
 80068e0:	0800af68 	.word	0x0800af68
 80068e4:	0800af78 	.word	0x0800af78

080068e8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80068f0:	2300      	movs	r3, #0
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80068f4:	2300      	movs	r3, #0
 80068f6:	60fb      	str	r3, [r7, #12]
 80068f8:	e009      	b.n	800690e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	33e0      	adds	r3, #224	; 0xe0
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	2200      	movs	r2, #0
 8006906:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	3301      	adds	r3, #1
 800690c:	60fb      	str	r3, [r7, #12]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2b0e      	cmp	r3, #14
 8006912:	d9f2      	bls.n	80068fa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006914:	2300      	movs	r3, #0
 8006916:	60fb      	str	r3, [r7, #12]
 8006918:	e009      	b.n	800692e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	4413      	add	r3, r2
 8006920:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006924:	2200      	movs	r2, #0
 8006926:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	3301      	adds	r3, #1
 800692c:	60fb      	str	r3, [r7, #12]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006934:	d3f1      	bcc.n	800691a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2240      	movs	r2, #64	; 0x40
 800695a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	bc80      	pop	{r7}
 800697c:	4770      	bx	lr

0800697e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800697e:	b480      	push	{r7}
 8006980:	b085      	sub	sp, #20
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006988:	2300      	movs	r3, #0
 800698a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d017      	beq.n	80069c2 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006998:	2b01      	cmp	r3, #1
 800699a:	d80f      	bhi.n	80069bc <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80069a2:	1c59      	adds	r1, r3, #1
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	33dc      	adds	r3, #220	; 0xdc
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4413      	add	r3, r2
 80069b2:	683a      	ldr	r2, [r7, #0]
 80069b4:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80069b6:	2300      	movs	r3, #0
 80069b8:	73fb      	strb	r3, [r7, #15]
 80069ba:	e004      	b.n	80069c6 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80069bc:	2302      	movs	r3, #2
 80069be:	73fb      	strb	r3, [r7, #15]
 80069c0:	e001      	b.n	80069c6 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80069c2:	2302      	movs	r3, #2
 80069c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80069c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3714      	adds	r7, #20
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bc80      	pop	{r7}
 80069d0:	4770      	bx	lr

080069d2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b085      	sub	sp, #20
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	460b      	mov	r3, r1
 80069dc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 80069e8:	78fa      	ldrb	r2, [r7, #3]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d204      	bcs.n	80069f8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	78fa      	ldrb	r2, [r7, #3]
 80069f2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 80069f6:	e001      	b.n	80069fc <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80069f8:	2302      	movs	r3, #2
 80069fa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bc80      	pop	{r7}
 8006a06:	4770      	bx	lr

08006a08 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b087      	sub	sp, #28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	4608      	mov	r0, r1
 8006a12:	4611      	mov	r1, r2
 8006a14:	461a      	mov	r2, r3
 8006a16:	4603      	mov	r3, r0
 8006a18:	70fb      	strb	r3, [r7, #3]
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	70bb      	strb	r3, [r7, #2]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006a22:	2300      	movs	r3, #0
 8006a24:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006a26:	2300      	movs	r3, #0
 8006a28:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f203 3336 	addw	r3, r3, #822	; 0x336
 8006a30:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006a32:	e025      	b.n	8006a80 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006a34:	7dfb      	ldrb	r3, [r7, #23]
 8006a36:	221a      	movs	r2, #26
 8006a38:	fb02 f303 	mul.w	r3, r2, r3
 8006a3c:	3308      	adds	r3, #8
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	4413      	add	r3, r2
 8006a42:	3302      	adds	r3, #2
 8006a44:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	795b      	ldrb	r3, [r3, #5]
 8006a4a:	78fa      	ldrb	r2, [r7, #3]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d002      	beq.n	8006a56 <USBH_FindInterface+0x4e>
 8006a50:	78fb      	ldrb	r3, [r7, #3]
 8006a52:	2bff      	cmp	r3, #255	; 0xff
 8006a54:	d111      	bne.n	8006a7a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006a5a:	78ba      	ldrb	r2, [r7, #2]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d002      	beq.n	8006a66 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a60:	78bb      	ldrb	r3, [r7, #2]
 8006a62:	2bff      	cmp	r3, #255	; 0xff
 8006a64:	d109      	bne.n	8006a7a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a6a:	787a      	ldrb	r2, [r7, #1]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d002      	beq.n	8006a76 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006a70:	787b      	ldrb	r3, [r7, #1]
 8006a72:	2bff      	cmp	r3, #255	; 0xff
 8006a74:	d101      	bne.n	8006a7a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006a76:	7dfb      	ldrb	r3, [r7, #23]
 8006a78:	e006      	b.n	8006a88 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006a7a:	7dfb      	ldrb	r3, [r7, #23]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006a80:	7dfb      	ldrb	r3, [r7, #23]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d9d6      	bls.n	8006a34 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006a86:	23ff      	movs	r3, #255	; 0xff
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	371c      	adds	r7, #28
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bc80      	pop	{r7}
 8006a90:	4770      	bx	lr

08006a92 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b082      	sub	sp, #8
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f003 fe7c 	bl	800a798 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006aa0:	2101      	movs	r1, #1
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f003 ff95 	bl	800a9d2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3708      	adds	r7, #8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b088      	sub	sp, #32
 8006ab8:	af04      	add	r7, sp, #16
 8006aba:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006abc:	2302      	movs	r3, #2
 8006abe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d102      	bne.n	8006ad6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2203      	movs	r2, #3
 8006ad4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b0b      	cmp	r3, #11
 8006ade:	f200 81e4 	bhi.w	8006eaa <USBH_Process+0x3f6>
 8006ae2:	a201      	add	r2, pc, #4	; (adr r2, 8006ae8 <USBH_Process+0x34>)
 8006ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae8:	08006b19 	.word	0x08006b19
 8006aec:	08006b57 	.word	0x08006b57
 8006af0:	08006b6b 	.word	0x08006b6b
 8006af4:	08006e29 	.word	0x08006e29
 8006af8:	08006eab 	.word	0x08006eab
 8006afc:	08006c2b 	.word	0x08006c2b
 8006b00:	08006dc3 	.word	0x08006dc3
 8006b04:	08006c5b 	.word	0x08006c5b
 8006b08:	08006c97 	.word	0x08006c97
 8006b0c:	08006cd1 	.word	0x08006cd1
 8006b10:	08006d19 	.word	0x08006d19
 8006b14:	08006e11 	.word	0x08006e11
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 81c4 	beq.w	8006eae <USBH_Process+0x3fa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006b2c:	20c8      	movs	r0, #200	; 0xc8
 8006b2e:	f003 ff96 	bl	800aa5e <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f003 fe8d 	bl	800a852 <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	4619      	mov	r1, r3
 8006b50:	f001 fb60 	bl	8008214 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006b54:	e1ab      	b.n	8006eae <USBH_Process+0x3fa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	f040 81a8 	bne.w	8006eb2 <USBH_Process+0x3fe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->gState = HOST_DEV_ATTACHED;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2202      	movs	r2, #2
 8006b66:	701a      	strb	r2, [r3, #0]
      }
      break;
 8006b68:	e1a3      	b.n	8006eb2 <USBH_Process+0x3fe>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d005      	beq.n	8006b80 <USBH_Process+0xcc>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006b7a:	2104      	movs	r1, #4
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006b80:	2064      	movs	r0, #100	; 0x64
 8006b82:	f003 ff6c 	bl	800aa5e <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f003 fe3c 	bl	800a804 <USBH_LL_GetSpeed>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	461a      	mov	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2205      	movs	r2, #5
 8006b9a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f001 fa1f 	bl	8007fe2 <USBH_AllocPipe>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006bac:	2180      	movs	r1, #128	; 0x80
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f001 fa17 	bl	8007fe2 <USBH_AllocPipe>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	711a      	strb	r2, [r3, #4]


      /* Open Control pipes */
      USBH_OpenPipe(phost,
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	7919      	ldrb	r1, [r3, #4]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_in,
                    0x80U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 8006bd0:	b292      	uxth	r2, r2
 8006bd2:	9202      	str	r2, [sp, #8]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	9201      	str	r2, [sp, #4]
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2280      	movs	r2, #128	; 0x80
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f001 f9d0 	bl	8007f84 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost,
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	7959      	ldrb	r1, [r3, #5]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_out,
                    0x00U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 8006bf8:	b292      	uxth	r2, r2
 8006bfa:	9202      	str	r2, [sp, #8]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	9201      	str	r2, [sp, #4]
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	4603      	mov	r3, r0
 8006c04:	2200      	movs	r2, #0
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f001 f9bc 	bl	8007f84 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8006c20:	2200      	movs	r2, #0
 8006c22:	4619      	mov	r1, r3
 8006c24:	f001 faf6 	bl	8008214 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c28:	e14c      	b.n	8006ec4 <USBH_Process+0x410>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      if (USBH_HandleEnum(phost) == USBH_OK)
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f950 	bl	8006ed0 <USBH_HandleEnum>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f040 813f 	bne.w	8006eb6 <USBH_Process+0x402>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d103      	bne.n	8006c52 <USBH_Process+0x19e>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2208      	movs	r2, #8
 8006c4e:	701a      	strb	r2, [r3, #0]
        {
          phost->gState = HOST_INPUT;
        }

      }
      break;
 8006c50:	e131      	b.n	8006eb6 <USBH_Process+0x402>
          phost->gState = HOST_INPUT;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2207      	movs	r2, #7
 8006c56:	701a      	strb	r2, [r3, #0]
      break;
 8006c58:	e12d      	b.n	8006eb6 <USBH_Process+0x402>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 812a 	beq.w	8006eba <USBH_Process+0x406>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006c6c:	2101      	movs	r1, #1
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2208      	movs	r2, #8
 8006c76:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2205      	movs	r2, #5
 8006c7c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	4619      	mov	r1, r3
 8006c90:	f001 fac0 	bl	8008214 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006c94:	e111      	b.n	8006eba <USBH_Process+0x406>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fc19 	bl	80074d8 <USBH_SetCfg>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d102      	bne.n	8006cb2 <USBH_Process+0x1fe>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2209      	movs	r2, #9
 8006cb0:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	4619      	mov	r1, r3
 8006cca:	f001 faa3 	bl	8008214 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006cce:	e0f9      	b.n	8006ec4 <USBH_Process+0x410>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006cd6:	f003 0320 	and.w	r3, r3, #32
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00a      	beq.n	8006cf4 <USBH_Process+0x240>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006cde:	2101      	movs	r1, #1
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fc1c 	bl	800751e <USBH_SetFeature>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d106      	bne.n	8006cfa <USBH_Process+0x246>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	220a      	movs	r2, #10
 8006cf0:	701a      	strb	r2, [r3, #0]
 8006cf2:	e002      	b.n	8006cfa <USBH_Process+0x246>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	220a      	movs	r2, #10
 8006cf8:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8006d0e:	2200      	movs	r2, #0
 8006d10:	4619      	mov	r1, r3
 8006d12:	f001 fa7f 	bl	8008214 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006d16:	e0d5      	b.n	8006ec4 <USBH_Process+0x410>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d040      	beq.n	8006da4 <USBH_Process+0x2f0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	73fb      	strb	r3, [r7, #15]
 8006d2e:	e017      	b.n	8006d60 <USBH_Process+0x2ac>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006d30:	7bfb      	ldrb	r3, [r7, #15]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	33dc      	adds	r3, #220	; 0xdc
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	4413      	add	r3, r2
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	791a      	ldrb	r2, [r3, #4]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 3345 	ldrb.w	r3, [r3, #837]	; 0x345
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d108      	bne.n	8006d5a <USBH_Process+0x2a6>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	33dc      	adds	r3, #220	; 0xdc
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	685a      	ldr	r2, [r3, #4]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006d5a:	7bfb      	ldrb	r3, [r7, #15]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	73fb      	strb	r3, [r7, #15]
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d9e4      	bls.n	8006d30 <USBH_Process+0x27c>
          }
        }

        if (phost->pActiveClass != NULL)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d016      	beq.n	8006d9e <USBH_Process+0x2ea>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	4798      	blx	r3
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d109      	bne.n	8006d96 <USBH_Process+0x2e2>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2206      	movs	r2, #6
 8006d86:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006d8e:	2103      	movs	r1, #3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	4798      	blx	r3
 8006d94:	e006      	b.n	8006da4 <USBH_Process+0x2f0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	220d      	movs	r2, #13
 8006d9a:	701a      	strb	r2, [r3, #0]
 8006d9c:	e002      	b.n	8006da4 <USBH_Process+0x2f0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	220d      	movs	r2, #13
 8006da2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2205      	movs	r2, #5
 8006da8:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8006db8:	2200      	movs	r2, #0
 8006dba:	4619      	mov	r1, r3
 8006dbc:	f001 fa2a 	bl	8008214 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006dc0:	e080      	b.n	8006ec4 <USBH_Process+0x410>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00f      	beq.n	8006dec <USBH_Process+0x338>
      {
        status = phost->pActiveClass->Requests(phost);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	4798      	blx	r3
 8006dd8:	4603      	mov	r3, r0
 8006dda:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006ddc:	7bbb      	ldrb	r3, [r7, #14]
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d16c      	bne.n	8006ebe <USBH_Process+0x40a>
        {
          phost->gState = HOST_CLASS;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	220b      	movs	r2, #11
 8006de8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006dea:	e068      	b.n	8006ebe <USBH_Process+0x40a>
        phost->gState = HOST_ABORT_STATE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	220d      	movs	r2, #13
 8006df0:	701a      	strb	r2, [r3, #0]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2205      	movs	r2, #5
 8006df6:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8006e06:	2200      	movs	r2, #0
 8006e08:	4619      	mov	r1, r3
 8006e0a:	f001 fa03 	bl	8008214 <osMessagePut>
      break;
 8006e0e:	e056      	b.n	8006ebe <USBH_Process+0x40a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d053      	beq.n	8006ec2 <USBH_Process+0x40e>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	4798      	blx	r3
      }
      break;
 8006e26:	e04c      	b.n	8006ec2 <USBH_Process+0x40e>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

      DeInitStateMachine(phost);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f7ff fd59 	bl	80068e8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d009      	beq.n	8006e54 <USBH_Process+0x3a0>
      {
        phost->pActiveClass->DeInit(phost);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d005      	beq.n	8006e6a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006e64:	2105      	movs	r1, #5
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d107      	bne.n	8006e86 <USBH_Process+0x3d2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7ff fe07 	bl	8006a92 <USBH_Start>
 8006e84:	e002      	b.n	8006e8c <USBH_Process+0x3d8>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f003 fc86 	bl	800a798 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	f001 f9b6 	bl	8008214 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ea8:	e00c      	b.n	8006ec4 <USBH_Process+0x410>

    case HOST_ABORT_STATE:
    default :
      break;
 8006eaa:	bf00      	nop
 8006eac:	e00a      	b.n	8006ec4 <USBH_Process+0x410>
      break;
 8006eae:	bf00      	nop
 8006eb0:	e008      	b.n	8006ec4 <USBH_Process+0x410>
      break;
 8006eb2:	bf00      	nop
 8006eb4:	e006      	b.n	8006ec4 <USBH_Process+0x410>
      break;
 8006eb6:	bf00      	nop
 8006eb8:	e004      	b.n	8006ec4 <USBH_Process+0x410>
    break;
 8006eba:	bf00      	nop
 8006ebc:	e002      	b.n	8006ec4 <USBH_Process+0x410>
      break;
 8006ebe:	bf00      	nop
 8006ec0:	e000      	b.n	8006ec4 <USBH_Process+0x410>
      break;
 8006ec2:	bf00      	nop
  }
  return USBH_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop

08006ed0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b088      	sub	sp, #32
 8006ed4:	af04      	add	r7, sp, #16
 8006ed6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	785b      	ldrb	r3, [r3, #1]
 8006ee0:	2b07      	cmp	r3, #7
 8006ee2:	f200 8132 	bhi.w	800714a <USBH_HandleEnum+0x27a>
 8006ee6:	a201      	add	r2, pc, #4	; (adr r2, 8006eec <USBH_HandleEnum+0x1c>)
 8006ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eec:	08006f0d 	.word	0x08006f0d
 8006ef0:	08006f7f 	.word	0x08006f7f
 8006ef4:	08006f97 	.word	0x08006f97
 8006ef8:	0800700d 	.word	0x0800700d
 8006efc:	08007025 	.word	0x08007025
 8006f00:	08007043 	.word	0x08007043
 8006f04:	080070af 	.word	0x080070af
 8006f08:	080070ff 	.word	0x080070ff
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      if (USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8006f0c:	2108      	movs	r1, #8
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fa12 	bl	8007338 <USBH_Get_DevDesc>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f040 8119 	bne.w	800714e <USBH_HandleEnum+0x27e>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 232b 	ldrb.w	r2, [r3, #811]	; 0x32b
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost,
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	7919      	ldrb	r1, [r3, #4]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8006f40:	b292      	uxth	r2, r2
 8006f42:	9202      	str	r2, [sp, #8]
 8006f44:	2200      	movs	r2, #0
 8006f46:	9201      	str	r2, [sp, #4]
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2280      	movs	r2, #128	; 0x80
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f001 f818 	bl	8007f84 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	7959      	ldrb	r1, [r3, #5]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8006f68:	b292      	uxth	r2, r2
 8006f6a:	9202      	str	r2, [sp, #8]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	9201      	str	r2, [sp, #4]
 8006f70:	9300      	str	r3, [sp, #0]
 8006f72:	4603      	mov	r3, r0
 8006f74:	2200      	movs	r2, #0
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f001 f804 	bl	8007f84 <USBH_OpenPipe>
      }
      break;
 8006f7c:	e0e7      	b.n	800714e <USBH_HandleEnum+0x27e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      if (USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE) == USBH_OK)
 8006f7e:	2112      	movs	r1, #18
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f9d9 	bl	8007338 <USBH_Get_DevDesc>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f040 80e2 	bne.w	8007152 <USBH_HandleEnum+0x282>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2202      	movs	r2, #2
 8006f92:	705a      	strb	r2, [r3, #1]

      }
      break;
 8006f94:	e0dd      	b.n	8007152 <USBH_HandleEnum+0x282>

    case ENUM_SET_ADDR:
      /* set address */
      if (USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8006f96:	2101      	movs	r1, #1
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 fa79 	bl	8007490 <USBH_SetAddress>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f040 80d8 	bne.w	8007156 <USBH_HandleEnum+0x286>
      {
        USBH_Delay(2U);
 8006fa6:	2002      	movs	r0, #2
 8006fa8:	f003 fd59 	bl	800aa5e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2203      	movs	r2, #3
 8006fb8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost,
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	7919      	ldrb	r1, [r3, #4]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8006fce:	b292      	uxth	r2, r2
 8006fd0:	9202      	str	r2, [sp, #8]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	9201      	str	r2, [sp, #4]
 8006fd6:	9300      	str	r3, [sp, #0]
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2280      	movs	r2, #128	; 0x80
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 ffd1 	bl	8007f84 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	7959      	ldrb	r1, [r3, #5]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8006ff6:	b292      	uxth	r2, r2
 8006ff8:	9202      	str	r2, [sp, #8]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	9201      	str	r2, [sp, #4]
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	4603      	mov	r3, r0
 8007002:	2200      	movs	r2, #0
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 ffbd 	bl	8007f84 <USBH_OpenPipe>
      }
      break;
 800700a:	e0a4      	b.n	8007156 <USBH_HandleEnum+0x286>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      if (USBH_Get_CfgDesc(phost,
 800700c:	2109      	movs	r1, #9
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f9ba 	bl	8007388 <USBH_Get_CfgDesc>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	f040 809f 	bne.w	800715a <USBH_HandleEnum+0x28a>
                           USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2204      	movs	r2, #4
 8007020:	705a      	strb	r2, [r3, #1]
      }
      break;
 8007022:	e09a      	b.n	800715a <USBH_HandleEnum+0x28a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      if (USBH_Get_CfgDesc(phost,
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
 800702a:	4619      	mov	r1, r3
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f9ab 	bl	8007388 <USBH_Get_CfgDesc>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	f040 8092 	bne.w	800715e <USBH_HandleEnum+0x28e>
                           phost->device.CfgDesc.wTotalLength) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2205      	movs	r2, #5
 800703e:	705a      	strb	r2, [r3, #1]
      }
      break;
 8007040:	e08d      	b.n	800715e <USBH_HandleEnum+0x28e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8007048:	2b00      	cmp	r3, #0
 800704a:	d01e      	beq.n	800708a <USBH_HandleEnum+0x1ba>
      {
        /* Check that Manufacturer String is available */

        if (USBH_Get_StringDesc(phost,
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                                phost->device.DevDesc.iManufacturer,
                                phost->device.Data,
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 8007058:	23ff      	movs	r3, #255	; 0xff
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f9b8 	bl	80073d0 <USBH_Get_StringDesc>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d17d      	bne.n	8007162 <USBH_HandleEnum+0x292>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2206      	movs	r2, #6
 800706a:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2205      	movs	r2, #5
 8007070:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007080:	2200      	movs	r2, #0
 8007082:	4619      	mov	r1, r3
 8007084:	f001 f8c6 	bl	8008214 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007088:	e06b      	b.n	8007162 <USBH_HandleEnum+0x292>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2206      	movs	r2, #6
 800708e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2205      	movs	r2, #5
 8007094:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80070a4:	2200      	movs	r2, #0
 80070a6:	4619      	mov	r1, r3
 80070a8:	f001 f8b4 	bl	8008214 <osMessagePut>
      break;
 80070ac:	e059      	b.n	8007162 <USBH_HandleEnum+0x292>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d010      	beq.n	80070da <USBH_HandleEnum+0x20a>
      {
        /* Check that Product string is available */
        if (USBH_Get_StringDesc(phost,
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 1333 	ldrb.w	r1, [r3, #819]	; 0x333
                                phost->device.DevDesc.iProduct,
                                phost->device.Data,
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 80070c4:	23ff      	movs	r3, #255	; 0xff
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f982 	bl	80073d0 <USBH_Get_StringDesc>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d149      	bne.n	8007166 <USBH_HandleEnum+0x296>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2207      	movs	r2, #7
 80070d6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80070d8:	e045      	b.n	8007166 <USBH_HandleEnum+0x296>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2207      	movs	r2, #7
 80070de:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2205      	movs	r2, #5
 80070e4:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80070f4:	2200      	movs	r2, #0
 80070f6:	4619      	mov	r1, r3
 80070f8:	f001 f88c 	bl	8008214 <osMessagePut>
      break;
 80070fc:	e033      	b.n	8007166 <USBH_HandleEnum+0x296>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00f      	beq.n	8007128 <USBH_HandleEnum+0x258>
      {
        /* Check that Serial number string is available */
        if (USBH_Get_StringDesc(phost,
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                phost->device.DevDesc.iSerialNumber,
                                phost->device.Data,
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 8007114:	23ff      	movs	r3, #255	; 0xff
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f95a 	bl	80073d0 <USBH_Get_StringDesc>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d123      	bne.n	800716a <USBH_HandleEnum+0x29a>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	73fb      	strb	r3, [r7, #15]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007126:	e020      	b.n	800716a <USBH_HandleEnum+0x29a>
        Status = USBH_OK;
 8007128:	2300      	movs	r3, #0
 800712a:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2205      	movs	r2, #5
 8007130:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007140:	2200      	movs	r2, #0
 8007142:	4619      	mov	r1, r3
 8007144:	f001 f866 	bl	8008214 <osMessagePut>
      break;
 8007148:	e00f      	b.n	800716a <USBH_HandleEnum+0x29a>

    default:
      break;
 800714a:	bf00      	nop
 800714c:	e00e      	b.n	800716c <USBH_HandleEnum+0x29c>
      break;
 800714e:	bf00      	nop
 8007150:	e00c      	b.n	800716c <USBH_HandleEnum+0x29c>
      break;
 8007152:	bf00      	nop
 8007154:	e00a      	b.n	800716c <USBH_HandleEnum+0x29c>
      break;
 8007156:	bf00      	nop
 8007158:	e008      	b.n	800716c <USBH_HandleEnum+0x29c>
      break;
 800715a:	bf00      	nop
 800715c:	e006      	b.n	800716c <USBH_HandleEnum+0x29c>
      break;
 800715e:	bf00      	nop
 8007160:	e004      	b.n	800716c <USBH_HandleEnum+0x29c>
      break;
 8007162:	bf00      	nop
 8007164:	e002      	b.n	800716c <USBH_HandleEnum+0x29c>
      break;
 8007166:	bf00      	nop
 8007168:	e000      	b.n	800716c <USBH_HandleEnum+0x29c>
      break;
 800716a:	bf00      	nop
  }
  return Status;
 800716c:	7bfb      	ldrb	r3, [r7, #15]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop

08007178 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	683a      	ldr	r2, [r7, #0]
 8007186:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800718a:	bf00      	nop
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	bc80      	pop	{r7}
 8007192:	4770      	bx	lr

08007194 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071a2:	1c5a      	adds	r2, r3, #1
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f804 	bl	80071b8 <USBH_HandleSof>
}
 80071b0:	bf00      	nop
 80071b2:	3708      	adds	r7, #8
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	2b0b      	cmp	r3, #11
 80071c8:	d10a      	bne.n	80071e0 <USBH_HandleSof+0x28>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d005      	beq.n	80071e0 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	4798      	blx	r3
  }
}
 80071e0:	bf00      	nop
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800720c:	2200      	movs	r2, #0
 800720e:	4619      	mov	r1, r3
 8007210:	f001 f800 	bl	8008214 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007214:	bf00      	nop
}
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  return;
 800722c:	bf00      	nop
}
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	bc80      	pop	{r7}
 8007234:	4770      	bx	lr

08007236 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b082      	sub	sp, #8
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2201      	movs	r2, #1
 800725a:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800726a:	2200      	movs	r2, #0
 800726c:	4619      	mov	r1, r3
 800726e:	f000 ffd1 	bl	8008214 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_connected = 0U;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.PortEnabled = 0U;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  /* Stop Host */
  USBH_LL_Stop(phost);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f003 fa96 	bl	800a7ce <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	791b      	ldrb	r3, [r3, #4]
 80072a6:	4619      	mov	r1, r3
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 febb 	bl	8008024 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	795b      	ldrb	r3, [r3, #5]
 80072b2:	4619      	mov	r1, r3
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 feb5 	bl	8008024 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2201      	movs	r2, #1
 80072be:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80072ce:	2200      	movs	r2, #0
 80072d0:	4619      	mov	r1, r3
 80072d2:	f000 ff9f 	bl	8008214 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3708      	adds	r7, #8
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b086      	sub	sp, #24
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 13d4 	ldr.w	r1, [r3, #980]	; 0x3d4
 80072ee:	f107 030c 	add.w	r3, r7, #12
 80072f2:	f04f 32ff 	mov.w	r2, #4294967295
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 ffcc 	bl	8008294 <osMessageGet>
    if (event.status == osEventMessage)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2b10      	cmp	r3, #16
 8007300:	d1f2      	bne.n	80072e8 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7ff fbd6 	bl	8006ab4 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8007308:	e7ee      	b.n	80072e8 <USBH_Process_OS+0x8>

0800730a <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b082      	sub	sp, #8
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2201      	movs	r2, #1
 8007316:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007326:	2200      	movs	r2, #0
 8007328:	4619      	mov	r1, r3
 800732a:	f000 ff73 	bl	8008214 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b086      	sub	sp, #24
 800733c:	af02      	add	r7, sp, #8
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	460b      	mov	r3, r1
 8007342:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800734a:	78fb      	ldrb	r3, [r7, #3]
 800734c:	b29b      	uxth	r3, r3
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	4613      	mov	r3, r2
 8007352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007356:	2100      	movs	r1, #0
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 f864 	bl	8007426 <USBH_GetDescriptor>
 800735e:	4603      	mov	r3, r0
 8007360:	73fb      	strb	r3, [r7, #15]
 8007362:	7bfb      	ldrb	r3, [r7, #15]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10a      	bne.n	800737e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f503 7049 	add.w	r0, r3, #804	; 0x324
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007374:	78fa      	ldrb	r2, [r7, #3]
 8007376:	b292      	uxth	r2, r2
 8007378:	4619      	mov	r1, r3
 800737a:	f000 f918 	bl	80075ae <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800737e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007380:	4618      	mov	r0, r3
 8007382:	3710      	adds	r7, #16
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af02      	add	r7, sp, #8
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	460b      	mov	r3, r1
 8007392:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;

#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	331c      	adds	r3, #28
 8007398:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800739a:	887b      	ldrh	r3, [r7, #2]
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073a4:	2100      	movs	r1, #0
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f83d 	bl	8007426 <USBH_GetDescriptor>
 80073ac:	4603      	mov	r3, r0
 80073ae:	72fb      	strb	r3, [r7, #11]
 80073b0:	7afb      	ldrb	r3, [r7, #11]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d107      	bne.n	80073c6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f203 3336 	addw	r3, r3, #822	; 0x336
 80073bc:	887a      	ldrh	r2, [r7, #2]
 80073be:	68f9      	ldr	r1, [r7, #12]
 80073c0:	4618      	mov	r0, r3
 80073c2:	f000 f963 	bl	800768c <USBH_ParseCfgDesc>
  }

  return status;
 80073c6:	7afb      	ldrb	r3, [r7, #11]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3710      	adds	r7, #16
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b088      	sub	sp, #32
 80073d4:	af02      	add	r7, sp, #8
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	607a      	str	r2, [r7, #4]
 80073da:	461a      	mov	r2, r3
 80073dc:	460b      	mov	r3, r1
 80073de:	72fb      	strb	r3, [r7, #11]
 80073e0:	4613      	mov	r3, r2
 80073e2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80073e4:	7afb      	ldrb	r3, [r7, #11]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80073ec:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80073f4:	893b      	ldrh	r3, [r7, #8]
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	460b      	mov	r3, r1
 80073fa:	2100      	movs	r1, #0
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f000 f812 	bl	8007426 <USBH_GetDescriptor>
 8007402:	4603      	mov	r3, r0
 8007404:	75fb      	strb	r3, [r7, #23]
 8007406:	7dfb      	ldrb	r3, [r7, #23]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d107      	bne.n	800741c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007412:	893a      	ldrh	r2, [r7, #8]
 8007414:	6879      	ldr	r1, [r7, #4]
 8007416:	4618      	mov	r0, r3
 8007418:	f000 fa34 	bl	8007884 <USBH_ParseStringDesc>
  }

  return status;
 800741c:	7dfb      	ldrb	r3, [r7, #23]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3718      	adds	r7, #24
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b084      	sub	sp, #16
 800742a:	af00      	add	r7, sp, #0
 800742c:	60f8      	str	r0, [r7, #12]
 800742e:	607b      	str	r3, [r7, #4]
 8007430:	460b      	mov	r3, r1
 8007432:	72fb      	strb	r3, [r7, #11]
 8007434:	4613      	mov	r3, r2
 8007436:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	789b      	ldrb	r3, [r3, #2]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d11c      	bne.n	800747a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007440:	7afb      	ldrb	r3, [r7, #11]
 8007442:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007446:	b2da      	uxtb	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2206      	movs	r2, #6
 8007450:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	893a      	ldrh	r2, [r7, #8]
 8007456:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007458:	893b      	ldrh	r3, [r7, #8]
 800745a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800745e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007462:	d104      	bne.n	800746e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f240 4209 	movw	r2, #1033	; 0x409
 800746a:	829a      	strh	r2, [r3, #20]
 800746c:	e002      	b.n	8007474 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	8b3a      	ldrh	r2, [r7, #24]
 8007478:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800747a:	8b3b      	ldrh	r3, [r7, #24]
 800747c:	461a      	mov	r2, r3
 800747e:	6879      	ldr	r1, [r7, #4]
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f000 fa4b 	bl	800791c <USBH_CtlReq>
 8007486:	4603      	mov	r3, r0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	460b      	mov	r3, r1
 800749a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	789b      	ldrb	r3, [r3, #2]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d10f      	bne.n	80074c4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2205      	movs	r2, #5
 80074ae:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80074b0:	78fb      	ldrb	r3, [r7, #3]
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80074c4:	2200      	movs	r2, #0
 80074c6:	2100      	movs	r1, #0
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fa27 	bl	800791c <USBH_CtlReq>
 80074ce:	4603      	mov	r3, r0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3708      	adds	r7, #8
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	460b      	mov	r3, r1
 80074e2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	789b      	ldrb	r3, [r3, #2]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d10e      	bne.n	800750a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2209      	movs	r2, #9
 80074f6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	887a      	ldrh	r2, [r7, #2]
 80074fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800750a:	2200      	movs	r2, #0
 800750c:	2100      	movs	r1, #0
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fa04 	bl	800791c <USBH_CtlReq>
 8007514:	4603      	mov	r3, r0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b082      	sub	sp, #8
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
 8007526:	460b      	mov	r3, r1
 8007528:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	789b      	ldrb	r3, [r3, #2]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d10f      	bne.n	8007552 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2203      	movs	r2, #3
 800753c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800753e:	78fb      	ldrb	r3, [r7, #3]
 8007540:	b29a      	uxth	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007552:	2200      	movs	r2, #0
 8007554:	2100      	movs	r1, #0
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f9e0 	bl	800791c <USBH_CtlReq>
 800755c:	4603      	mov	r3, r0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3708      	adds	r7, #8
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b082      	sub	sp, #8
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
 800756e:	460b      	mov	r3, r1
 8007570:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	789b      	ldrb	r3, [r3, #2]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d10f      	bne.n	800759a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2202      	movs	r2, #2
 800757e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800758c:	78fb      	ldrb	r3, [r7, #3]
 800758e:	b29a      	uxth	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800759a:	2200      	movs	r2, #0
 800759c:	2100      	movs	r1, #0
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 f9bc 	bl	800791c <USBH_CtlReq>
 80075a4:	4603      	mov	r3, r0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3708      	adds	r7, #8
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b085      	sub	sp, #20
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	60f8      	str	r0, [r7, #12]
 80075b6:	60b9      	str	r1, [r7, #8]
 80075b8:	4613      	mov	r3, r2
 80075ba:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	781a      	ldrb	r2, [r3, #0]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	785a      	ldrb	r2, [r3, #1]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	3302      	adds	r3, #2
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	3303      	adds	r3, #3
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	b29b      	uxth	r3, r3
 80075dc:	021b      	lsls	r3, r3, #8
 80075de:	b29b      	uxth	r3, r3
 80075e0:	4313      	orrs	r3, r2
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	791a      	ldrb	r2, [r3, #4]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	795a      	ldrb	r2, [r3, #5]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	799a      	ldrb	r2, [r3, #6]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	79da      	ldrb	r2, [r3, #7]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007608:	88fb      	ldrh	r3, [r7, #6]
 800760a:	2b08      	cmp	r3, #8
 800760c:	d939      	bls.n	8007682 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	3308      	adds	r3, #8
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	b29a      	uxth	r2, r3
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	3309      	adds	r3, #9
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	b29b      	uxth	r3, r3
 800761e:	021b      	lsls	r3, r3, #8
 8007620:	b29b      	uxth	r3, r3
 8007622:	4313      	orrs	r3, r2
 8007624:	b29a      	uxth	r2, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	330a      	adds	r3, #10
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	b29a      	uxth	r2, r3
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	330b      	adds	r3, #11
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	b29b      	uxth	r3, r3
 800763a:	021b      	lsls	r3, r3, #8
 800763c:	b29b      	uxth	r3, r3
 800763e:	4313      	orrs	r3, r2
 8007640:	b29a      	uxth	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	330c      	adds	r3, #12
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	b29a      	uxth	r2, r3
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	330d      	adds	r3, #13
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	b29b      	uxth	r3, r3
 8007656:	021b      	lsls	r3, r3, #8
 8007658:	b29b      	uxth	r3, r3
 800765a:	4313      	orrs	r3, r2
 800765c:	b29a      	uxth	r2, r3
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	7b9a      	ldrb	r2, [r3, #14]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	7bda      	ldrb	r2, [r3, #15]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	7c1a      	ldrb	r2, [r3, #16]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	7c5a      	ldrb	r2, [r3, #17]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	745a      	strb	r2, [r3, #17]
  }
}
 8007682:	bf00      	nop
 8007684:	3714      	adds	r7, #20
 8007686:	46bd      	mov	sp, r7
 8007688:	bc80      	pop	{r7}
 800768a:	4770      	bx	lr

0800768c <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b08a      	sub	sp, #40	; 0x28
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	4613      	mov	r3, r2
 8007698:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800769e:	2300      	movs	r3, #0
 80076a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80076a4:	2300      	movs	r3, #0
 80076a6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	781a      	ldrb	r2, [r3, #0]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	785a      	ldrb	r2, [r3, #1]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	3302      	adds	r3, #2
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	3303      	adds	r3, #3
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	021b      	lsls	r3, r3, #8
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	4313      	orrs	r3, r2
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	791a      	ldrb	r2, [r3, #4]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	795a      	ldrb	r2, [r3, #5]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	799a      	ldrb	r2, [r3, #6]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	79da      	ldrb	r2, [r3, #7]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	7a1a      	ldrb	r2, [r3, #8]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007702:	88fb      	ldrh	r3, [r7, #6]
 8007704:	2b09      	cmp	r3, #9
 8007706:	d95f      	bls.n	80077c8 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007708:	2309      	movs	r3, #9
 800770a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800770c:	2300      	movs	r3, #0
 800770e:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007710:	e051      	b.n	80077b6 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007712:	f107 0316 	add.w	r3, r7, #22
 8007716:	4619      	mov	r1, r3
 8007718:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800771a:	f000 f8e5 	bl	80078e8 <USBH_GetNextDesc>
 800771e:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007722:	785b      	ldrb	r3, [r3, #1]
 8007724:	2b04      	cmp	r3, #4
 8007726:	d146      	bne.n	80077b6 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007728:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800772c:	221a      	movs	r2, #26
 800772e:	fb02 f303 	mul.w	r3, r2, r3
 8007732:	3308      	adds	r3, #8
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	4413      	add	r3, r2
 8007738:	3302      	adds	r3, #2
 800773a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800773c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800773e:	69f8      	ldr	r0, [r7, #28]
 8007740:	f000 f846 	bl	80077d0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007744:	2300      	movs	r3, #0
 8007746:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800774a:	2300      	movs	r3, #0
 800774c:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800774e:	e022      	b.n	8007796 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007750:	f107 0316 	add.w	r3, r7, #22
 8007754:	4619      	mov	r1, r3
 8007756:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007758:	f000 f8c6 	bl	80078e8 <USBH_GetNextDesc>
 800775c:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800775e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007760:	785b      	ldrb	r3, [r3, #1]
 8007762:	2b05      	cmp	r3, #5
 8007764:	d117      	bne.n	8007796 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007766:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800776a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800776e:	3201      	adds	r2, #1
 8007770:	00d2      	lsls	r2, r2, #3
 8007772:	211a      	movs	r1, #26
 8007774:	fb01 f303 	mul.w	r3, r1, r3
 8007778:	4413      	add	r3, r2
 800777a:	3308      	adds	r3, #8
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	4413      	add	r3, r2
 8007780:	3304      	adds	r3, #4
 8007782:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007784:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007786:	69b8      	ldr	r0, [r7, #24]
 8007788:	f000 f850 	bl	800782c <USBH_ParseEPDesc>
            ep_ix++;
 800778c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007790:	3301      	adds	r3, #1
 8007792:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	791b      	ldrb	r3, [r3, #4]
 800779a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800779e:	429a      	cmp	r2, r3
 80077a0:	d204      	bcs.n	80077ac <USBH_ParseCfgDesc+0x120>
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	885a      	ldrh	r2, [r3, #2]
 80077a6:	8afb      	ldrh	r3, [r7, #22]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d8d1      	bhi.n	8007750 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80077ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077b0:	3301      	adds	r3, #1
 80077b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80077b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d804      	bhi.n	80077c8 <USBH_ParseCfgDesc+0x13c>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	885a      	ldrh	r2, [r3, #2]
 80077c2:	8afb      	ldrh	r3, [r7, #22]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d8a4      	bhi.n	8007712 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80077c8:	bf00      	nop
 80077ca:	3728      	adds	r7, #40	; 0x28
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	781a      	ldrb	r2, [r3, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	785a      	ldrb	r2, [r3, #1]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	789a      	ldrb	r2, [r3, #2]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	78da      	ldrb	r2, [r3, #3]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	791a      	ldrb	r2, [r3, #4]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	795a      	ldrb	r2, [r3, #5]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	799a      	ldrb	r2, [r3, #6]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	79da      	ldrb	r2, [r3, #7]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	7a1a      	ldrb	r2, [r3, #8]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	721a      	strb	r2, [r3, #8]
}
 8007822:	bf00      	nop
 8007824:	370c      	adds	r7, #12
 8007826:	46bd      	mov	sp, r7
 8007828:	bc80      	pop	{r7}
 800782a:	4770      	bx	lr

0800782c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	781a      	ldrb	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	785a      	ldrb	r2, [r3, #1]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	789a      	ldrb	r2, [r3, #2]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	78da      	ldrb	r2, [r3, #3]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	3304      	adds	r3, #4
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	b29a      	uxth	r2, r3
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	3305      	adds	r3, #5
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	b29b      	uxth	r3, r3
 8007866:	021b      	lsls	r3, r3, #8
 8007868:	b29b      	uxth	r3, r3
 800786a:	4313      	orrs	r3, r2
 800786c:	b29a      	uxth	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	799a      	ldrb	r2, [r3, #6]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	719a      	strb	r2, [r3, #6]
}
 800787a:	bf00      	nop
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	bc80      	pop	{r7}
 8007882:	4770      	bx	lr

08007884 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007884:	b480      	push	{r7}
 8007886:	b087      	sub	sp, #28
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	4613      	mov	r3, r2
 8007890:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	3301      	adds	r3, #1
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	2b03      	cmp	r3, #3
 800789a:	d120      	bne.n	80078de <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	1e9a      	subs	r2, r3, #2
 80078a2:	88fb      	ldrh	r3, [r7, #6]
 80078a4:	4293      	cmp	r3, r2
 80078a6:	bf28      	it	cs
 80078a8:	4613      	movcs	r3, r2
 80078aa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	3302      	adds	r3, #2
 80078b0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80078b2:	2300      	movs	r3, #0
 80078b4:	82fb      	strh	r3, [r7, #22]
 80078b6:	e00b      	b.n	80078d0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80078b8:	8afb      	ldrh	r3, [r7, #22]
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	4413      	add	r3, r2
 80078be:	781a      	ldrb	r2, [r3, #0]
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	3301      	adds	r3, #1
 80078c8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80078ca:	8afb      	ldrh	r3, [r7, #22]
 80078cc:	3302      	adds	r3, #2
 80078ce:	82fb      	strh	r3, [r7, #22]
 80078d0:	8afa      	ldrh	r2, [r7, #22]
 80078d2:	8abb      	ldrh	r3, [r7, #20]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d3ef      	bcc.n	80078b8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	2200      	movs	r2, #0
 80078dc:	701a      	strb	r2, [r3, #0]
  }
}
 80078de:	bf00      	nop
 80078e0:	371c      	adds	r7, #28
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bc80      	pop	{r7}
 80078e6:	4770      	bx	lr

080078e8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	881a      	ldrh	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	4413      	add	r3, r2
 80078fe:	b29a      	uxth	r2, r3
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4413      	add	r3, r2
 800790e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007910:	68fb      	ldr	r3, [r7, #12]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	bc80      	pop	{r7}
 800791a:	4770      	bx	lr

0800791c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b086      	sub	sp, #24
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	4613      	mov	r3, r2
 8007928:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800792a:	2301      	movs	r3, #1
 800792c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	789b      	ldrb	r3, [r3, #2]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d002      	beq.n	800793c <USBH_CtlReq+0x20>
 8007936:	2b02      	cmp	r3, #2
 8007938:	d01d      	beq.n	8007976 <USBH_CtlReq+0x5a>
        }
      }
      break;

    default:
      break;
 800793a:	e042      	b.n	80079c2 <USBH_CtlReq+0xa6>
      phost->Control.buff = buff;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	88fa      	ldrh	r2, [r7, #6]
 8007946:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2201      	movs	r2, #1
 800794c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2202      	movs	r2, #2
 8007952:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007954:	2301      	movs	r3, #1
 8007956:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2203      	movs	r2, #3
 800795c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800796c:	2200      	movs	r2, #0
 800796e:	4619      	mov	r1, r3
 8007970:	f000 fc50 	bl	8008214 <osMessagePut>
      break;
 8007974:	e025      	b.n	80079c2 <USBH_CtlReq+0xa6>
      status = USBH_HandleControl(phost);
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f000 f828 	bl	80079cc <USBH_HandleControl>
 800797c:	4603      	mov	r3, r0
 800797e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8007980:	7dfb      	ldrb	r3, [r7, #23]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d108      	bne.n	8007998 <USBH_CtlReq+0x7c>
        phost->RequestState = CMD_SEND;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2201      	movs	r2, #1
 800798a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2200      	movs	r2, #0
 8007990:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007992:	2300      	movs	r3, #0
 8007994:	75fb      	strb	r3, [r7, #23]
      break;
 8007996:	e013      	b.n	80079c0 <USBH_CtlReq+0xa4>
      else if (status == USBH_NOT_SUPPORTED)
 8007998:	7dfb      	ldrb	r3, [r7, #23]
 800799a:	2b03      	cmp	r3, #3
 800799c:	d108      	bne.n	80079b0 <USBH_CtlReq+0x94>
        phost->RequestState = CMD_SEND;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2201      	movs	r2, #1
 80079a2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80079aa:	2303      	movs	r3, #3
 80079ac:	75fb      	strb	r3, [r7, #23]
      break;
 80079ae:	e007      	b.n	80079c0 <USBH_CtlReq+0xa4>
        if (status == USBH_FAIL)
 80079b0:	7dfb      	ldrb	r3, [r7, #23]
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d104      	bne.n	80079c0 <USBH_CtlReq+0xa4>
          phost->RequestState = CMD_SEND;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2201      	movs	r2, #1
 80079ba:	709a      	strb	r2, [r3, #2]
          status = USBH_FAIL;
 80079bc:	2302      	movs	r3, #2
 80079be:	75fb      	strb	r3, [r7, #23]
      break;
 80079c0:	bf00      	nop
  }
  return status;
 80079c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3718      	adds	r7, #24
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b086      	sub	sp, #24
 80079d0:	af02      	add	r7, sp, #8
 80079d2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80079d4:	2301      	movs	r3, #1
 80079d6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80079d8:	2300      	movs	r3, #0
 80079da:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	7e1b      	ldrb	r3, [r3, #24]
 80079e0:	3b01      	subs	r3, #1
 80079e2:	2b0a      	cmp	r3, #10
 80079e4:	f200 821d 	bhi.w	8007e22 <USBH_HandleControl+0x456>
 80079e8:	a201      	add	r2, pc, #4	; (adr r2, 80079f0 <USBH_HandleControl+0x24>)
 80079ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ee:	bf00      	nop
 80079f0:	08007a1d 	.word	0x08007a1d
 80079f4:	08007a37 	.word	0x08007a37
 80079f8:	08007ad9 	.word	0x08007ad9
 80079fc:	08007aff 	.word	0x08007aff
 8007a00:	08007b8b 	.word	0x08007b8b
 8007a04:	08007bb5 	.word	0x08007bb5
 8007a08:	08007c77 	.word	0x08007c77
 8007a0c:	08007c99 	.word	0x08007c99
 8007a10:	08007d2b 	.word	0x08007d2b
 8007a14:	08007d51 	.word	0x08007d51
 8007a18:	08007de3 	.word	0x08007de3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f103 0110 	add.w	r1, r3, #16
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	795b      	ldrb	r3, [r3, #5]
 8007a26:	461a      	mov	r2, r3
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fa0b 	bl	8007e44 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2202      	movs	r2, #2
 8007a32:	761a      	strb	r2, [r3, #24]
      break;
 8007a34:	e200      	b.n	8007e38 <USBH_HandleControl+0x46c>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	795b      	ldrb	r3, [r3, #5]
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f002 ffb5 	bl	800a9ac <USBH_LL_GetURBState>
 8007a42:	4603      	mov	r3, r0
 8007a44:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007a46:	7bbb      	ldrb	r3, [r7, #14]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d12c      	bne.n	8007aa6 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	7c1b      	ldrb	r3, [r3, #16]
 8007a50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a54:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	8adb      	ldrh	r3, [r3, #22]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00a      	beq.n	8007a74 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007a5e:	7b7b      	ldrb	r3, [r7, #13]
 8007a60:	2b80      	cmp	r3, #128	; 0x80
 8007a62:	d103      	bne.n	8007a6c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2203      	movs	r2, #3
 8007a68:	761a      	strb	r2, [r3, #24]
 8007a6a:	e00d      	b.n	8007a88 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2205      	movs	r2, #5
 8007a70:	761a      	strb	r2, [r3, #24]
 8007a72:	e009      	b.n	8007a88 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8007a74:	7b7b      	ldrb	r3, [r7, #13]
 8007a76:	2b80      	cmp	r3, #128	; 0x80
 8007a78:	d103      	bne.n	8007a82 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2209      	movs	r2, #9
 8007a7e:	761a      	strb	r2, [r3, #24]
 8007a80:	e002      	b.n	8007a88 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2207      	movs	r2, #7
 8007a86:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2203      	movs	r2, #3
 8007a8c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	f000 fbb8 	bl	8008214 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007aa4:	e1bf      	b.n	8007e26 <USBH_HandleControl+0x45a>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007aa6:	7bbb      	ldrb	r3, [r7, #14]
 8007aa8:	2b04      	cmp	r3, #4
 8007aaa:	d003      	beq.n	8007ab4 <USBH_HandleControl+0xe8>
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	f040 81b9 	bne.w	8007e26 <USBH_HandleControl+0x45a>
          phost->Control.state = CTRL_ERROR;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	220b      	movs	r2, #11
 8007ab8:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2203      	movs	r2, #3
 8007abe:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007ace:	2200      	movs	r2, #0
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	f000 fb9f 	bl	8008214 <osMessagePut>
      break;
 8007ad6:	e1a6      	b.n	8007e26 <USBH_HandleControl+0x45a>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6899      	ldr	r1, [r3, #8]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	899a      	ldrh	r2, [r3, #12]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	791b      	ldrb	r3, [r3, #4]
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f9e6 	bl	8007ec2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2204      	movs	r2, #4
 8007afa:	761a      	strb	r2, [r3, #24]
      break;
 8007afc:	e19c      	b.n	8007e38 <USBH_HandleControl+0x46c>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	791b      	ldrb	r3, [r3, #4]
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f002 ff51 	bl	800a9ac <USBH_LL_GetURBState>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007b0e:	7bbb      	ldrb	r3, [r7, #14]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d110      	bne.n	8007b36 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2209      	movs	r2, #9
 8007b18:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2203      	movs	r2, #3
 8007b1e:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007b2e:	2200      	movs	r2, #0
 8007b30:	4619      	mov	r1, r3
 8007b32:	f000 fb6f 	bl	8008214 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
 8007b38:	2b05      	cmp	r3, #5
 8007b3a:	d110      	bne.n	8007b5e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2203      	movs	r2, #3
 8007b44:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007b54:	2200      	movs	r2, #0
 8007b56:	4619      	mov	r1, r3
 8007b58:	f000 fb5c 	bl	8008214 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007b5c:	e165      	b.n	8007e2a <USBH_HandleControl+0x45e>
        if (URB_Status == USBH_URB_ERROR)
 8007b5e:	7bbb      	ldrb	r3, [r7, #14]
 8007b60:	2b04      	cmp	r3, #4
 8007b62:	f040 8162 	bne.w	8007e2a <USBH_HandleControl+0x45e>
          phost->Control.state = CTRL_ERROR;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	220b      	movs	r2, #11
 8007b6a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2203      	movs	r2, #3
 8007b70:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007b80:	2200      	movs	r2, #0
 8007b82:	4619      	mov	r1, r3
 8007b84:	f000 fb46 	bl	8008214 <osMessagePut>
      break;
 8007b88:	e14f      	b.n	8007e2a <USBH_HandleControl+0x45e>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6899      	ldr	r1, [r3, #8]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	899a      	ldrh	r2, [r3, #12]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	795b      	ldrb	r3, [r3, #5]
 8007b96:	2001      	movs	r0, #1
 8007b98:	9000      	str	r0, [sp, #0]
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f96c 	bl	8007e78 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2206      	movs	r2, #6
 8007bb0:	761a      	strb	r2, [r3, #24]
      break;
 8007bb2:	e141      	b.n	8007e38 <USBH_HandleControl+0x46c>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	795b      	ldrb	r3, [r3, #5]
 8007bb8:	4619      	mov	r1, r3
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f002 fef6 	bl	800a9ac <USBH_LL_GetURBState>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007bc4:	7bbb      	ldrb	r3, [r7, #14]
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d111      	bne.n	8007bee <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2207      	movs	r2, #7
 8007bce:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2203      	movs	r2, #3
 8007bd4:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007be4:	2200      	movs	r2, #0
 8007be6:	4619      	mov	r1, r3
 8007be8:	f000 fb14 	bl	8008214 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007bec:	e11f      	b.n	8007e2e <USBH_HandleControl+0x462>
      else if (URB_Status == USBH_URB_STALL)
 8007bee:	7bbb      	ldrb	r3, [r7, #14]
 8007bf0:	2b05      	cmp	r3, #5
 8007bf2:	d113      	bne.n	8007c1c <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	220c      	movs	r2, #12
 8007bf8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2203      	movs	r2, #3
 8007c02:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007c12:	2200      	movs	r2, #0
 8007c14:	4619      	mov	r1, r3
 8007c16:	f000 fafd 	bl	8008214 <osMessagePut>
      break;
 8007c1a:	e108      	b.n	8007e2e <USBH_HandleControl+0x462>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007c1c:	7bbb      	ldrb	r3, [r7, #14]
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d111      	bne.n	8007c46 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2205      	movs	r2, #5
 8007c26:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2203      	movs	r2, #3
 8007c2c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	4619      	mov	r1, r3
 8007c40:	f000 fae8 	bl	8008214 <osMessagePut>
      break;
 8007c44:	e0f3      	b.n	8007e2e <USBH_HandleControl+0x462>
        if (URB_Status == USBH_URB_ERROR)
 8007c46:	7bbb      	ldrb	r3, [r7, #14]
 8007c48:	2b04      	cmp	r3, #4
 8007c4a:	f040 80f0 	bne.w	8007e2e <USBH_HandleControl+0x462>
          phost->Control.state = CTRL_ERROR;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	220b      	movs	r2, #11
 8007c52:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007c54:	2302      	movs	r3, #2
 8007c56:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2203      	movs	r2, #3
 8007c5c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	4619      	mov	r1, r3
 8007c70:	f000 fad0 	bl	8008214 <osMessagePut>
      break;
 8007c74:	e0db      	b.n	8007e2e <USBH_HandleControl+0x462>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	791b      	ldrb	r3, [r3, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f91f 	bl	8007ec2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c8a:	b29a      	uxth	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2208      	movs	r2, #8
 8007c94:	761a      	strb	r2, [r3, #24]

      break;
 8007c96:	e0cf      	b.n	8007e38 <USBH_HandleControl+0x46c>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	791b      	ldrb	r3, [r3, #4]
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f002 fe84 	bl	800a9ac <USBH_LL_GetURBState>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ca8:	7bbb      	ldrb	r3, [r7, #14]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d113      	bne.n	8007cd6 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	220d      	movs	r2, #13
 8007cb2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2203      	movs	r2, #3
 8007cbc:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007ccc:	2200      	movs	r2, #0
 8007cce:	4619      	mov	r1, r3
 8007cd0:	f000 faa0 	bl	8008214 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007cd4:	e0ad      	b.n	8007e32 <USBH_HandleControl+0x466>
      else if (URB_Status == USBH_URB_ERROR)
 8007cd6:	7bbb      	ldrb	r3, [r7, #14]
 8007cd8:	2b04      	cmp	r3, #4
 8007cda:	d111      	bne.n	8007d00 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	220b      	movs	r2, #11
 8007ce0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2203      	movs	r2, #3
 8007ce6:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	f000 fa8b 	bl	8008214 <osMessagePut>
      break;
 8007cfe:	e098      	b.n	8007e32 <USBH_HandleControl+0x466>
        if (URB_Status == USBH_URB_STALL)
 8007d00:	7bbb      	ldrb	r3, [r7, #14]
 8007d02:	2b05      	cmp	r3, #5
 8007d04:	f040 8095 	bne.w	8007e32 <USBH_HandleControl+0x466>
          status = USBH_NOT_SUPPORTED;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2203      	movs	r2, #3
 8007d10:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007d20:	2200      	movs	r2, #0
 8007d22:	4619      	mov	r1, r3
 8007d24:	f000 fa76 	bl	8008214 <osMessagePut>
      break;
 8007d28:	e083      	b.n	8007e32 <USBH_HandleControl+0x466>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	795b      	ldrb	r3, [r3, #5]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	9200      	str	r2, [sp, #0]
 8007d32:	2200      	movs	r2, #0
 8007d34:	2100      	movs	r1, #0
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 f89e 	bl	8007e78 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	220a      	movs	r2, #10
 8007d4c:	761a      	strb	r2, [r3, #24]
      break;
 8007d4e:	e073      	b.n	8007e38 <USBH_HandleControl+0x46c>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	795b      	ldrb	r3, [r3, #5]
 8007d54:	4619      	mov	r1, r3
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f002 fe28 	bl	800a9ac <USBH_LL_GetURBState>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007d60:	7bbb      	ldrb	r3, [r7, #14]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d113      	bne.n	8007d8e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8007d66:	2300      	movs	r3, #0
 8007d68:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	220d      	movs	r2, #13
 8007d6e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2203      	movs	r2, #3
 8007d74:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007d84:	2200      	movs	r2, #0
 8007d86:	4619      	mov	r1, r3
 8007d88:	f000 fa44 	bl	8008214 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007d8c:	e053      	b.n	8007e36 <USBH_HandleControl+0x46a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007d8e:	7bbb      	ldrb	r3, [r7, #14]
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d111      	bne.n	8007db8 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2209      	movs	r2, #9
 8007d98:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2203      	movs	r2, #3
 8007d9e:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007dae:	2200      	movs	r2, #0
 8007db0:	4619      	mov	r1, r3
 8007db2:	f000 fa2f 	bl	8008214 <osMessagePut>
      break;
 8007db6:	e03e      	b.n	8007e36 <USBH_HandleControl+0x46a>
        if (URB_Status == USBH_URB_ERROR)
 8007db8:	7bbb      	ldrb	r3, [r7, #14]
 8007dba:	2b04      	cmp	r3, #4
 8007dbc:	d13b      	bne.n	8007e36 <USBH_HandleControl+0x46a>
          phost->Control.state = CTRL_ERROR;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	220b      	movs	r2, #11
 8007dc2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2203      	movs	r2, #3
 8007dc8:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007dd8:	2200      	movs	r2, #0
 8007dda:	4619      	mov	r1, r3
 8007ddc:	f000 fa1a 	bl	8008214 <osMessagePut>
      break;
 8007de0:	e029      	b.n	8007e36 <USBH_HandleControl+0x46a>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	7e5b      	ldrb	r3, [r3, #25]
 8007de6:	3301      	adds	r3, #1
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	765a      	strb	r2, [r3, #25]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	7e5b      	ldrb	r3, [r3, #25]
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d806      	bhi.n	8007e04 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	709a      	strb	r2, [r3, #2]
        phost->Control.errorcount = 0U;
        USBH_ErrLog("Control error: Device not responding");
        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007e02:	e019      	b.n	8007e38 <USBH_HandleControl+0x46c>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007e0a:	2106      	movs	r1, #6
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	765a      	strb	r2, [r3, #25]
        phost->gState = HOST_IDLE;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007e1c:	2302      	movs	r3, #2
 8007e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e20:	e00a      	b.n	8007e38 <USBH_HandleControl+0x46c>

    default:
      break;
 8007e22:	bf00      	nop
 8007e24:	e008      	b.n	8007e38 <USBH_HandleControl+0x46c>
      break;
 8007e26:	bf00      	nop
 8007e28:	e006      	b.n	8007e38 <USBH_HandleControl+0x46c>
      break;
 8007e2a:	bf00      	nop
 8007e2c:	e004      	b.n	8007e38 <USBH_HandleControl+0x46c>
      break;
 8007e2e:	bf00      	nop
 8007e30:	e002      	b.n	8007e38 <USBH_HandleControl+0x46c>
      break;
 8007e32:	bf00      	nop
 8007e34:	e000      	b.n	8007e38 <USBH_HandleControl+0x46c>
      break;
 8007e36:	bf00      	nop
  }

  return status;
 8007e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop

08007e44 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b088      	sub	sp, #32
 8007e48:	af04      	add	r7, sp, #16
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	4613      	mov	r3, r2
 8007e50:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007e52:	79f9      	ldrb	r1, [r7, #7]
 8007e54:	2300      	movs	r3, #0
 8007e56:	9303      	str	r3, [sp, #12]
 8007e58:	2308      	movs	r3, #8
 8007e5a:	9302      	str	r3, [sp, #8]
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	9301      	str	r3, [sp, #4]
 8007e60:	2300      	movs	r3, #0
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	2300      	movs	r3, #0
 8007e66:	2200      	movs	r2, #0
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f002 fd6e 	bl	800a94a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b088      	sub	sp, #32
 8007e7c:	af04      	add	r7, sp, #16
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	4611      	mov	r1, r2
 8007e84:	461a      	mov	r2, r3
 8007e86:	460b      	mov	r3, r1
 8007e88:	80fb      	strh	r3, [r7, #6]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d001      	beq.n	8007e9c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007e9c:	7979      	ldrb	r1, [r7, #5]
 8007e9e:	7e3b      	ldrb	r3, [r7, #24]
 8007ea0:	9303      	str	r3, [sp, #12]
 8007ea2:	88fb      	ldrh	r3, [r7, #6]
 8007ea4:	9302      	str	r3, [sp, #8]
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	9301      	str	r3, [sp, #4]
 8007eaa:	2301      	movs	r3, #1
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	2300      	movs	r3, #0
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	f002 fd49 	bl	800a94a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b088      	sub	sp, #32
 8007ec6:	af04      	add	r7, sp, #16
 8007ec8:	60f8      	str	r0, [r7, #12]
 8007eca:	60b9      	str	r1, [r7, #8]
 8007ecc:	4611      	mov	r1, r2
 8007ece:	461a      	mov	r2, r3
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	80fb      	strh	r3, [r7, #6]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007ed8:	7979      	ldrb	r1, [r7, #5]
 8007eda:	2300      	movs	r3, #0
 8007edc:	9303      	str	r3, [sp, #12]
 8007ede:	88fb      	ldrh	r3, [r7, #6]
 8007ee0:	9302      	str	r3, [sp, #8]
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	9301      	str	r3, [sp, #4]
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	2300      	movs	r3, #0
 8007eec:	2201      	movs	r2, #1
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f002 fd2b 	bl	800a94a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007ef4:	2300      	movs	r3, #0

}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b088      	sub	sp, #32
 8007f02:	af04      	add	r7, sp, #16
 8007f04:	60f8      	str	r0, [r7, #12]
 8007f06:	60b9      	str	r1, [r7, #8]
 8007f08:	4611      	mov	r1, r2
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	80fb      	strh	r3, [r7, #6]
 8007f10:	4613      	mov	r3, r2
 8007f12:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d001      	beq.n	8007f22 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007f22:	7979      	ldrb	r1, [r7, #5]
 8007f24:	7e3b      	ldrb	r3, [r7, #24]
 8007f26:	9303      	str	r3, [sp, #12]
 8007f28:	88fb      	ldrh	r3, [r7, #6]
 8007f2a:	9302      	str	r3, [sp, #8]
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	9301      	str	r3, [sp, #4]
 8007f30:	2301      	movs	r3, #1
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	2302      	movs	r3, #2
 8007f36:	2200      	movs	r2, #0
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f002 fd06 	bl	800a94a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b088      	sub	sp, #32
 8007f4c:	af04      	add	r7, sp, #16
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	4611      	mov	r1, r2
 8007f54:	461a      	mov	r2, r3
 8007f56:	460b      	mov	r3, r1
 8007f58:	80fb      	strh	r3, [r7, #6]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007f5e:	7979      	ldrb	r1, [r7, #5]
 8007f60:	2300      	movs	r3, #0
 8007f62:	9303      	str	r3, [sp, #12]
 8007f64:	88fb      	ldrh	r3, [r7, #6]
 8007f66:	9302      	str	r3, [sp, #8]
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	9301      	str	r3, [sp, #4]
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	9300      	str	r3, [sp, #0]
 8007f70:	2302      	movs	r3, #2
 8007f72:	2201      	movs	r2, #1
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f002 fce8 	bl	800a94a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af04      	add	r7, sp, #16
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	4608      	mov	r0, r1
 8007f8e:	4611      	mov	r1, r2
 8007f90:	461a      	mov	r2, r3
 8007f92:	4603      	mov	r3, r0
 8007f94:	70fb      	strb	r3, [r7, #3]
 8007f96:	460b      	mov	r3, r1
 8007f98:	70bb      	strb	r3, [r7, #2]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007f9e:	7878      	ldrb	r0, [r7, #1]
 8007fa0:	78ba      	ldrb	r2, [r7, #2]
 8007fa2:	78f9      	ldrb	r1, [r7, #3]
 8007fa4:	8b3b      	ldrh	r3, [r7, #24]
 8007fa6:	9302      	str	r3, [sp, #8]
 8007fa8:	7d3b      	ldrb	r3, [r7, #20]
 8007faa:	9301      	str	r3, [sp, #4]
 8007fac:	7c3b      	ldrb	r3, [r7, #16]
 8007fae:	9300      	str	r3, [sp, #0]
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f002 fc7b 	bl	800a8ae <USBH_LL_OpenPipe>

  return USBH_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b082      	sub	sp, #8
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
 8007fca:	460b      	mov	r3, r1
 8007fcc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007fce:	78fb      	ldrb	r3, [r7, #3]
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f002 fc9a 	bl	800a90c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b084      	sub	sp, #16
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	460b      	mov	r3, r1
 8007fec:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f835 	bl	800805e <USBH_GetFreePipe>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007ff8:	89fb      	ldrh	r3, [r7, #14]
 8007ffa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d00a      	beq.n	8008018 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008002:	78fa      	ldrb	r2, [r7, #3]
 8008004:	89fb      	ldrh	r3, [r7, #14]
 8008006:	f003 030f 	and.w	r3, r3, #15
 800800a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800800e:	6879      	ldr	r1, [r7, #4]
 8008010:	33e0      	adds	r3, #224	; 0xe0
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	440b      	add	r3, r1
 8008016:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008018:	89fb      	ldrh	r3, [r7, #14]
 800801a:	b2db      	uxtb	r3, r3
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	460b      	mov	r3, r1
 800802e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008030:	78fb      	ldrb	r3, [r7, #3]
 8008032:	2b0a      	cmp	r3, #10
 8008034:	d80d      	bhi.n	8008052 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008036:	78fb      	ldrb	r3, [r7, #3]
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	33e0      	adds	r3, #224	; 0xe0
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4413      	add	r3, r2
 8008040:	685a      	ldr	r2, [r3, #4]
 8008042:	78fb      	ldrb	r3, [r7, #3]
 8008044:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008048:	6879      	ldr	r1, [r7, #4]
 800804a:	33e0      	adds	r3, #224	; 0xe0
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	440b      	add	r3, r1
 8008050:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	bc80      	pop	{r7}
 800805c:	4770      	bx	lr

0800805e <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800805e:	b480      	push	{r7}
 8008060:	b085      	sub	sp, #20
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008066:	2300      	movs	r3, #0
 8008068:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800806a:	2300      	movs	r3, #0
 800806c:	73fb      	strb	r3, [r7, #15]
 800806e:	e00f      	b.n	8008090 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008070:	7bfb      	ldrb	r3, [r7, #15]
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	33e0      	adds	r3, #224	; 0xe0
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4413      	add	r3, r2
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008080:	2b00      	cmp	r3, #0
 8008082:	d102      	bne.n	800808a <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008084:	7bfb      	ldrb	r3, [r7, #15]
 8008086:	b29b      	uxth	r3, r3
 8008088:	e007      	b.n	800809a <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800808a:	7bfb      	ldrb	r3, [r7, #15]
 800808c:	3301      	adds	r3, #1
 800808e:	73fb      	strb	r3, [r7, #15]
 8008090:	7bfb      	ldrb	r3, [r7, #15]
 8008092:	2b0a      	cmp	r3, #10
 8008094:	d9ec      	bls.n	8008070 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008096:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800809a:	4618      	mov	r0, r3
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	bc80      	pop	{r7}
 80080a2:	4770      	bx	lr

080080a4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	4603      	mov	r3, r0
 80080ac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80080ae:	2300      	movs	r3, #0
 80080b0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80080b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80080b6:	2b84      	cmp	r3, #132	; 0x84
 80080b8:	d005      	beq.n	80080c6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80080ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	4413      	add	r3, r2
 80080c2:	3303      	adds	r3, #3
 80080c4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80080c6:	68fb      	ldr	r3, [r7, #12]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3714      	adds	r7, #20
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bc80      	pop	{r7}
 80080d0:	4770      	bx	lr

080080d2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80080d2:	b480      	push	{r7}
 80080d4:	b083      	sub	sp, #12
 80080d6:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080d8:	f3ef 8305 	mrs	r3, IPSR
 80080dc:	607b      	str	r3, [r7, #4]
  return(result);
 80080de:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	bf14      	ite	ne
 80080e4:	2301      	movne	r3, #1
 80080e6:	2300      	moveq	r3, #0
 80080e8:	b2db      	uxtb	r3, r3
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	370c      	adds	r7, #12
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bc80      	pop	{r7}
 80080f2:	4770      	bx	lr

080080f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80080f8:	f001 f908 	bl	800930c <vTaskStartScheduler>
  
  return osOK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	bd80      	pop	{r7, pc}

08008102 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008102:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008104:	b089      	sub	sp, #36	; 0x24
 8008106:	af04      	add	r7, sp, #16
 8008108:	6078      	str	r0, [r7, #4]
 800810a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	695b      	ldr	r3, [r3, #20]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d020      	beq.n	8008156 <osThreadCreate+0x54>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d01c      	beq.n	8008156 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685c      	ldr	r4, [r3, #4]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681d      	ldr	r5, [r3, #0]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	691e      	ldr	r6, [r3, #16]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800812e:	4618      	mov	r0, r3
 8008130:	f7ff ffb8 	bl	80080a4 <makeFreeRtosPriority>
 8008134:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800813e:	9202      	str	r2, [sp, #8]
 8008140:	9301      	str	r3, [sp, #4]
 8008142:	9100      	str	r1, [sp, #0]
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	4632      	mov	r2, r6
 8008148:	4629      	mov	r1, r5
 800814a:	4620      	mov	r0, r4
 800814c:	f000 ff08 	bl	8008f60 <xTaskCreateStatic>
 8008150:	4603      	mov	r3, r0
 8008152:	60fb      	str	r3, [r7, #12]
 8008154:	e01c      	b.n	8008190 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	685c      	ldr	r4, [r3, #4]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008162:	b29e      	uxth	r6, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800816a:	4618      	mov	r0, r3
 800816c:	f7ff ff9a 	bl	80080a4 <makeFreeRtosPriority>
 8008170:	4602      	mov	r2, r0
 8008172:	f107 030c 	add.w	r3, r7, #12
 8008176:	9301      	str	r3, [sp, #4]
 8008178:	9200      	str	r2, [sp, #0]
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	4632      	mov	r2, r6
 800817e:	4629      	mov	r1, r5
 8008180:	4620      	mov	r0, r4
 8008182:	f000 ff49 	bl	8009018 <xTaskCreate>
 8008186:	4603      	mov	r3, r0
 8008188:	2b01      	cmp	r3, #1
 800818a:	d001      	beq.n	8008190 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800818c:	2300      	movs	r3, #0
 800818e:	e000      	b.n	8008192 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008190:	68fb      	ldr	r3, [r7, #12]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3714      	adds	r7, #20
 8008196:	46bd      	mov	sp, r7
 8008198:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800819a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b084      	sub	sp, #16
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d001      	beq.n	80081b0 <osDelay+0x16>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	e000      	b.n	80081b2 <osDelay+0x18>
 80081b0:	2301      	movs	r3, #1
 80081b2:	4618      	mov	r0, r3
 80081b4:	f001 f876 	bl	80092a4 <vTaskDelay>
  
  return osOK;
 80081b8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80081c2:	b590      	push	{r4, r7, lr}
 80081c4:	b085      	sub	sp, #20
 80081c6:	af02      	add	r7, sp, #8
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d011      	beq.n	80081f8 <osMessageCreate+0x36>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00d      	beq.n	80081f8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6818      	ldr	r0, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6859      	ldr	r1, [r3, #4]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	689a      	ldr	r2, [r3, #8]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	2400      	movs	r4, #0
 80081ee:	9400      	str	r4, [sp, #0]
 80081f0:	f000 f9dc 	bl	80085ac <xQueueGenericCreateStatic>
 80081f4:	4603      	mov	r3, r0
 80081f6:	e008      	b.n	800820a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6818      	ldr	r0, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	4619      	mov	r1, r3
 8008204:	f000 fa49 	bl	800869a <xQueueGenericCreate>
 8008208:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800820a:	4618      	mov	r0, r3
 800820c:	370c      	adds	r7, #12
 800820e:	46bd      	mov	sp, r7
 8008210:	bd90      	pop	{r4, r7, pc}
	...

08008214 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b086      	sub	sp, #24
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008220:	2300      	movs	r3, #0
 8008222:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d101      	bne.n	8008232 <osMessagePut+0x1e>
    ticks = 1;
 800822e:	2301      	movs	r3, #1
 8008230:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008232:	f7ff ff4e 	bl	80080d2 <inHandlerMode>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d018      	beq.n	800826e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800823c:	f107 0210 	add.w	r2, r7, #16
 8008240:	f107 0108 	add.w	r1, r7, #8
 8008244:	2300      	movs	r3, #0
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f000 fb82 	bl	8008950 <xQueueGenericSendFromISR>
 800824c:	4603      	mov	r3, r0
 800824e:	2b01      	cmp	r3, #1
 8008250:	d001      	beq.n	8008256 <osMessagePut+0x42>
      return osErrorOS;
 8008252:	23ff      	movs	r3, #255	; 0xff
 8008254:	e018      	b.n	8008288 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d014      	beq.n	8008286 <osMessagePut+0x72>
 800825c:	4b0c      	ldr	r3, [pc, #48]	; (8008290 <osMessagePut+0x7c>)
 800825e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008262:	601a      	str	r2, [r3, #0]
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	f3bf 8f6f 	isb	sy
 800826c:	e00b      	b.n	8008286 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800826e:	f107 0108 	add.w	r1, r7, #8
 8008272:	2300      	movs	r3, #0
 8008274:	697a      	ldr	r2, [r7, #20]
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f000 fa6c 	bl	8008754 <xQueueGenericSend>
 800827c:	4603      	mov	r3, r0
 800827e:	2b01      	cmp	r3, #1
 8008280:	d001      	beq.n	8008286 <osMessagePut+0x72>
      return osErrorOS;
 8008282:	23ff      	movs	r3, #255	; 0xff
 8008284:	e000      	b.n	8008288 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3718      	adds	r7, #24
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	e000ed04 	.word	0xe000ed04

08008294 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008294:	b590      	push	{r4, r7, lr}
 8008296:	b08b      	sub	sp, #44	; 0x2c
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80082a4:	2300      	movs	r3, #0
 80082a6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10a      	bne.n	80082c4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80082ae:	2380      	movs	r3, #128	; 0x80
 80082b0:	617b      	str	r3, [r7, #20]
    return event;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	461c      	mov	r4, r3
 80082b6:	f107 0314 	add.w	r3, r7, #20
 80082ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80082be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80082c2:	e054      	b.n	800836e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80082c4:	2300      	movs	r3, #0
 80082c6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80082c8:	2300      	movs	r3, #0
 80082ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082d2:	d103      	bne.n	80082dc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80082d4:	f04f 33ff 	mov.w	r3, #4294967295
 80082d8:	627b      	str	r3, [r7, #36]	; 0x24
 80082da:	e009      	b.n	80082f0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d006      	beq.n	80082f0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80082e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d101      	bne.n	80082f0 <osMessageGet+0x5c>
      ticks = 1;
 80082ec:	2301      	movs	r3, #1
 80082ee:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80082f0:	f7ff feef 	bl	80080d2 <inHandlerMode>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d01c      	beq.n	8008334 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80082fa:	f107 0220 	add.w	r2, r7, #32
 80082fe:	f107 0314 	add.w	r3, r7, #20
 8008302:	3304      	adds	r3, #4
 8008304:	4619      	mov	r1, r3
 8008306:	68b8      	ldr	r0, [r7, #8]
 8008308:	f000 fc9a 	bl	8008c40 <xQueueReceiveFromISR>
 800830c:	4603      	mov	r3, r0
 800830e:	2b01      	cmp	r3, #1
 8008310:	d102      	bne.n	8008318 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008312:	2310      	movs	r3, #16
 8008314:	617b      	str	r3, [r7, #20]
 8008316:	e001      	b.n	800831c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008318:	2300      	movs	r3, #0
 800831a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800831c:	6a3b      	ldr	r3, [r7, #32]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d01d      	beq.n	800835e <osMessageGet+0xca>
 8008322:	4b15      	ldr	r3, [pc, #84]	; (8008378 <osMessageGet+0xe4>)
 8008324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008328:	601a      	str	r2, [r3, #0]
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	e014      	b.n	800835e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008334:	f107 0314 	add.w	r3, r7, #20
 8008338:	3304      	adds	r3, #4
 800833a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800833c:	4619      	mov	r1, r3
 800833e:	68b8      	ldr	r0, [r7, #8]
 8008340:	f000 fb9e 	bl	8008a80 <xQueueReceive>
 8008344:	4603      	mov	r3, r0
 8008346:	2b01      	cmp	r3, #1
 8008348:	d102      	bne.n	8008350 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800834a:	2310      	movs	r3, #16
 800834c:	617b      	str	r3, [r7, #20]
 800834e:	e006      	b.n	800835e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008352:	2b00      	cmp	r3, #0
 8008354:	d101      	bne.n	800835a <osMessageGet+0xc6>
 8008356:	2300      	movs	r3, #0
 8008358:	e000      	b.n	800835c <osMessageGet+0xc8>
 800835a:	2340      	movs	r3, #64	; 0x40
 800835c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	461c      	mov	r4, r3
 8008362:	f107 0314 	add.w	r3, r7, #20
 8008366:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800836a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	372c      	adds	r7, #44	; 0x2c
 8008372:	46bd      	mov	sp, r7
 8008374:	bd90      	pop	{r4, r7, pc}
 8008376:	bf00      	nop
 8008378:	e000ed04 	.word	0xe000ed04

0800837c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f103 0208 	add.w	r2, r3, #8
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f04f 32ff 	mov.w	r2, #4294967295
 8008394:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f103 0208 	add.w	r2, r3, #8
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f103 0208 	add.w	r2, r3, #8
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80083b0:	bf00      	nop
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bc80      	pop	{r7}
 80083b8:	4770      	bx	lr

080083ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80083ba:	b480      	push	{r7}
 80083bc:	b083      	sub	sp, #12
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80083c8:	bf00      	nop
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bc80      	pop	{r7}
 80083d0:	4770      	bx	lr

080083d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80083d2:	b480      	push	{r7}
 80083d4:	b085      	sub	sp, #20
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
 80083da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	689a      	ldr	r2, [r3, #8]
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	683a      	ldr	r2, [r7, #0]
 80083f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	683a      	ldr	r2, [r7, #0]
 80083fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	1c5a      	adds	r2, r3, #1
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	601a      	str	r2, [r3, #0]
}
 800840e:	bf00      	nop
 8008410:	3714      	adds	r7, #20
 8008412:	46bd      	mov	sp, r7
 8008414:	bc80      	pop	{r7}
 8008416:	4770      	bx	lr

08008418 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008418:	b480      	push	{r7}
 800841a:	b085      	sub	sp, #20
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800842e:	d103      	bne.n	8008438 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	60fb      	str	r3, [r7, #12]
 8008436:	e00c      	b.n	8008452 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	3308      	adds	r3, #8
 800843c:	60fb      	str	r3, [r7, #12]
 800843e:	e002      	b.n	8008446 <vListInsert+0x2e>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	60fb      	str	r3, [r7, #12]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68ba      	ldr	r2, [r7, #8]
 800844e:	429a      	cmp	r2, r3
 8008450:	d2f6      	bcs.n	8008440 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	685a      	ldr	r2, [r3, #4]
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	683a      	ldr	r2, [r7, #0]
 8008460:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	68fa      	ldr	r2, [r7, #12]
 8008466:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	683a      	ldr	r2, [r7, #0]
 800846c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	1c5a      	adds	r2, r3, #1
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	601a      	str	r2, [r3, #0]
}
 800847e:	bf00      	nop
 8008480:	3714      	adds	r7, #20
 8008482:	46bd      	mov	sp, r7
 8008484:	bc80      	pop	{r7}
 8008486:	4770      	bx	lr

08008488 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	6892      	ldr	r2, [r2, #8]
 800849e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	6852      	ldr	r2, [r2, #4]
 80084a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d103      	bne.n	80084bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	689a      	ldr	r2, [r3, #8]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	1e5a      	subs	r2, r3, #1
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3714      	adds	r7, #20
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bc80      	pop	{r7}
 80084d8:	4770      	bx	lr
	...

080084dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10a      	bne.n	8008506 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80084f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f4:	f383 8811 	msr	BASEPRI, r3
 80084f8:	f3bf 8f6f 	isb	sy
 80084fc:	f3bf 8f4f 	dsb	sy
 8008500:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008502:	bf00      	nop
 8008504:	e7fe      	b.n	8008504 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008506:	f001 fd19 	bl	8009f3c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008512:	68f9      	ldr	r1, [r7, #12]
 8008514:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008516:	fb01 f303 	mul.w	r3, r1, r3
 800851a:	441a      	add	r2, r3
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008536:	3b01      	subs	r3, #1
 8008538:	68f9      	ldr	r1, [r7, #12]
 800853a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800853c:	fb01 f303 	mul.w	r3, r1, r3
 8008540:	441a      	add	r2, r3
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	22ff      	movs	r2, #255	; 0xff
 800854a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	22ff      	movs	r2, #255	; 0xff
 8008552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d114      	bne.n	8008586 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d01a      	beq.n	800859a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	3310      	adds	r3, #16
 8008568:	4618      	mov	r0, r3
 800856a:	f001 f927 	bl	80097bc <xTaskRemoveFromEventList>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d012      	beq.n	800859a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008574:	4b0c      	ldr	r3, [pc, #48]	; (80085a8 <xQueueGenericReset+0xcc>)
 8008576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800857a:	601a      	str	r2, [r3, #0]
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	f3bf 8f6f 	isb	sy
 8008584:	e009      	b.n	800859a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	3310      	adds	r3, #16
 800858a:	4618      	mov	r0, r3
 800858c:	f7ff fef6 	bl	800837c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	3324      	adds	r3, #36	; 0x24
 8008594:	4618      	mov	r0, r3
 8008596:	f7ff fef1 	bl	800837c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800859a:	f001 fcff 	bl	8009f9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800859e:	2301      	movs	r3, #1
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	e000ed04 	.word	0xe000ed04

080085ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b08e      	sub	sp, #56	; 0x38
 80085b0:	af02      	add	r7, sp, #8
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
 80085b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d10a      	bne.n	80085d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80085c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c4:	f383 8811 	msr	BASEPRI, r3
 80085c8:	f3bf 8f6f 	isb	sy
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80085d2:	bf00      	nop
 80085d4:	e7fe      	b.n	80085d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10a      	bne.n	80085f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80085dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e0:	f383 8811 	msr	BASEPRI, r3
 80085e4:	f3bf 8f6f 	isb	sy
 80085e8:	f3bf 8f4f 	dsb	sy
 80085ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80085ee:	bf00      	nop
 80085f0:	e7fe      	b.n	80085f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d002      	beq.n	80085fe <xQueueGenericCreateStatic+0x52>
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d001      	beq.n	8008602 <xQueueGenericCreateStatic+0x56>
 80085fe:	2301      	movs	r3, #1
 8008600:	e000      	b.n	8008604 <xQueueGenericCreateStatic+0x58>
 8008602:	2300      	movs	r3, #0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d10a      	bne.n	800861e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860c:	f383 8811 	msr	BASEPRI, r3
 8008610:	f3bf 8f6f 	isb	sy
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	623b      	str	r3, [r7, #32]
}
 800861a:	bf00      	nop
 800861c:	e7fe      	b.n	800861c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d102      	bne.n	800862a <xQueueGenericCreateStatic+0x7e>
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d101      	bne.n	800862e <xQueueGenericCreateStatic+0x82>
 800862a:	2301      	movs	r3, #1
 800862c:	e000      	b.n	8008630 <xQueueGenericCreateStatic+0x84>
 800862e:	2300      	movs	r3, #0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d10a      	bne.n	800864a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008638:	f383 8811 	msr	BASEPRI, r3
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	61fb      	str	r3, [r7, #28]
}
 8008646:	bf00      	nop
 8008648:	e7fe      	b.n	8008648 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800864a:	2348      	movs	r3, #72	; 0x48
 800864c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	2b48      	cmp	r3, #72	; 0x48
 8008652:	d00a      	beq.n	800866a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008658:	f383 8811 	msr	BASEPRI, r3
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	61bb      	str	r3, [r7, #24]
}
 8008666:	bf00      	nop
 8008668:	e7fe      	b.n	8008668 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800866e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00d      	beq.n	8008690 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008676:	2201      	movs	r2, #1
 8008678:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800867c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	4613      	mov	r3, r2
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	68b9      	ldr	r1, [r7, #8]
 800868a:	68f8      	ldr	r0, [r7, #12]
 800868c:	f000 f843 	bl	8008716 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008692:	4618      	mov	r0, r3
 8008694:	3730      	adds	r7, #48	; 0x30
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800869a:	b580      	push	{r7, lr}
 800869c:	b08a      	sub	sp, #40	; 0x28
 800869e:	af02      	add	r7, sp, #8
 80086a0:	60f8      	str	r0, [r7, #12]
 80086a2:	60b9      	str	r1, [r7, #8]
 80086a4:	4613      	mov	r3, r2
 80086a6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d10a      	bne.n	80086c4 <xQueueGenericCreate+0x2a>
	__asm volatile
 80086ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	613b      	str	r3, [r7, #16]
}
 80086c0:	bf00      	nop
 80086c2:	e7fe      	b.n	80086c2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d102      	bne.n	80086d0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80086ca:	2300      	movs	r3, #0
 80086cc:	61fb      	str	r3, [r7, #28]
 80086ce:	e004      	b.n	80086da <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	fb02 f303 	mul.w	r3, r2, r3
 80086d8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	3348      	adds	r3, #72	; 0x48
 80086de:	4618      	mov	r0, r3
 80086e0:	f001 fd2c 	bl	800a13c <pvPortMalloc>
 80086e4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00f      	beq.n	800870c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	3348      	adds	r3, #72	; 0x48
 80086f0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086fa:	79fa      	ldrb	r2, [r7, #7]
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	9300      	str	r3, [sp, #0]
 8008700:	4613      	mov	r3, r2
 8008702:	697a      	ldr	r2, [r7, #20]
 8008704:	68b9      	ldr	r1, [r7, #8]
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f000 f805 	bl	8008716 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800870c:	69bb      	ldr	r3, [r7, #24]
	}
 800870e:	4618      	mov	r0, r3
 8008710:	3720      	adds	r7, #32
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b084      	sub	sp, #16
 800871a:	af00      	add	r7, sp, #0
 800871c:	60f8      	str	r0, [r7, #12]
 800871e:	60b9      	str	r1, [r7, #8]
 8008720:	607a      	str	r2, [r7, #4]
 8008722:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d103      	bne.n	8008732 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	69ba      	ldr	r2, [r7, #24]
 800872e:	601a      	str	r2, [r3, #0]
 8008730:	e002      	b.n	8008738 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008744:	2101      	movs	r1, #1
 8008746:	69b8      	ldr	r0, [r7, #24]
 8008748:	f7ff fec8 	bl	80084dc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800874c:	bf00      	nop
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b08e      	sub	sp, #56	; 0x38
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]
 8008760:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008762:	2300      	movs	r3, #0
 8008764:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800876a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876c:	2b00      	cmp	r3, #0
 800876e:	d10a      	bne.n	8008786 <xQueueGenericSend+0x32>
	__asm volatile
 8008770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008774:	f383 8811 	msr	BASEPRI, r3
 8008778:	f3bf 8f6f 	isb	sy
 800877c:	f3bf 8f4f 	dsb	sy
 8008780:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008782:	bf00      	nop
 8008784:	e7fe      	b.n	8008784 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d103      	bne.n	8008794 <xQueueGenericSend+0x40>
 800878c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008790:	2b00      	cmp	r3, #0
 8008792:	d101      	bne.n	8008798 <xQueueGenericSend+0x44>
 8008794:	2301      	movs	r3, #1
 8008796:	e000      	b.n	800879a <xQueueGenericSend+0x46>
 8008798:	2300      	movs	r3, #0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d10a      	bne.n	80087b4 <xQueueGenericSend+0x60>
	__asm volatile
 800879e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80087b0:	bf00      	nop
 80087b2:	e7fe      	b.n	80087b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d103      	bne.n	80087c2 <xQueueGenericSend+0x6e>
 80087ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d101      	bne.n	80087c6 <xQueueGenericSend+0x72>
 80087c2:	2301      	movs	r3, #1
 80087c4:	e000      	b.n	80087c8 <xQueueGenericSend+0x74>
 80087c6:	2300      	movs	r3, #0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d10a      	bne.n	80087e2 <xQueueGenericSend+0x8e>
	__asm volatile
 80087cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	623b      	str	r3, [r7, #32]
}
 80087de:	bf00      	nop
 80087e0:	e7fe      	b.n	80087e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087e2:	f001 f9af 	bl	8009b44 <xTaskGetSchedulerState>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d102      	bne.n	80087f2 <xQueueGenericSend+0x9e>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d101      	bne.n	80087f6 <xQueueGenericSend+0xa2>
 80087f2:	2301      	movs	r3, #1
 80087f4:	e000      	b.n	80087f8 <xQueueGenericSend+0xa4>
 80087f6:	2300      	movs	r3, #0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10a      	bne.n	8008812 <xQueueGenericSend+0xbe>
	__asm volatile
 80087fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008800:	f383 8811 	msr	BASEPRI, r3
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	f3bf 8f4f 	dsb	sy
 800880c:	61fb      	str	r3, [r7, #28]
}
 800880e:	bf00      	nop
 8008810:	e7fe      	b.n	8008810 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008812:	f001 fb93 	bl	8009f3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800881a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800881e:	429a      	cmp	r2, r3
 8008820:	d302      	bcc.n	8008828 <xQueueGenericSend+0xd4>
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	2b02      	cmp	r3, #2
 8008826:	d129      	bne.n	800887c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008828:	683a      	ldr	r2, [r7, #0]
 800882a:	68b9      	ldr	r1, [r7, #8]
 800882c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800882e:	f000 fa87 	bl	8008d40 <prvCopyDataToQueue>
 8008832:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008838:	2b00      	cmp	r3, #0
 800883a:	d010      	beq.n	800885e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800883c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883e:	3324      	adds	r3, #36	; 0x24
 8008840:	4618      	mov	r0, r3
 8008842:	f000 ffbb 	bl	80097bc <xTaskRemoveFromEventList>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d013      	beq.n	8008874 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800884c:	4b3f      	ldr	r3, [pc, #252]	; (800894c <xQueueGenericSend+0x1f8>)
 800884e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008852:	601a      	str	r2, [r3, #0]
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	e00a      	b.n	8008874 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800885e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008860:	2b00      	cmp	r3, #0
 8008862:	d007      	beq.n	8008874 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008864:	4b39      	ldr	r3, [pc, #228]	; (800894c <xQueueGenericSend+0x1f8>)
 8008866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800886a:	601a      	str	r2, [r3, #0]
 800886c:	f3bf 8f4f 	dsb	sy
 8008870:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008874:	f001 fb92 	bl	8009f9c <vPortExitCritical>
				return pdPASS;
 8008878:	2301      	movs	r3, #1
 800887a:	e063      	b.n	8008944 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d103      	bne.n	800888a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008882:	f001 fb8b 	bl	8009f9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008886:	2300      	movs	r3, #0
 8008888:	e05c      	b.n	8008944 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800888a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888c:	2b00      	cmp	r3, #0
 800888e:	d106      	bne.n	800889e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008890:	f107 0314 	add.w	r3, r7, #20
 8008894:	4618      	mov	r0, r3
 8008896:	f000 fff3 	bl	8009880 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800889a:	2301      	movs	r3, #1
 800889c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800889e:	f001 fb7d 	bl	8009f9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088a2:	f000 fd9d 	bl	80093e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088a6:	f001 fb49 	bl	8009f3c <vPortEnterCritical>
 80088aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088b0:	b25b      	sxtb	r3, r3
 80088b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b6:	d103      	bne.n	80088c0 <xQueueGenericSend+0x16c>
 80088b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ba:	2200      	movs	r2, #0
 80088bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088c6:	b25b      	sxtb	r3, r3
 80088c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088cc:	d103      	bne.n	80088d6 <xQueueGenericSend+0x182>
 80088ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088d6:	f001 fb61 	bl	8009f9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088da:	1d3a      	adds	r2, r7, #4
 80088dc:	f107 0314 	add.w	r3, r7, #20
 80088e0:	4611      	mov	r1, r2
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 ffe2 	bl	80098ac <xTaskCheckForTimeOut>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d124      	bne.n	8008938 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80088ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088f0:	f000 fb1e 	bl	8008f30 <prvIsQueueFull>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d018      	beq.n	800892c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80088fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fc:	3310      	adds	r3, #16
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	4611      	mov	r1, r2
 8008902:	4618      	mov	r0, r3
 8008904:	f000 ff36 	bl	8009774 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008908:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800890a:	f000 faa9 	bl	8008e60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800890e:	f000 fd75 	bl	80093fc <xTaskResumeAll>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	f47f af7c 	bne.w	8008812 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800891a:	4b0c      	ldr	r3, [pc, #48]	; (800894c <xQueueGenericSend+0x1f8>)
 800891c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008920:	601a      	str	r2, [r3, #0]
 8008922:	f3bf 8f4f 	dsb	sy
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	e772      	b.n	8008812 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800892c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800892e:	f000 fa97 	bl	8008e60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008932:	f000 fd63 	bl	80093fc <xTaskResumeAll>
 8008936:	e76c      	b.n	8008812 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008938:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800893a:	f000 fa91 	bl	8008e60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800893e:	f000 fd5d 	bl	80093fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008942:	2300      	movs	r3, #0
		}
	}
}
 8008944:	4618      	mov	r0, r3
 8008946:	3738      	adds	r7, #56	; 0x38
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	e000ed04 	.word	0xe000ed04

08008950 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b08e      	sub	sp, #56	; 0x38
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	607a      	str	r2, [r7, #4]
 800895c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008964:	2b00      	cmp	r3, #0
 8008966:	d10a      	bne.n	800897e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896c:	f383 8811 	msr	BASEPRI, r3
 8008970:	f3bf 8f6f 	isb	sy
 8008974:	f3bf 8f4f 	dsb	sy
 8008978:	627b      	str	r3, [r7, #36]	; 0x24
}
 800897a:	bf00      	nop
 800897c:	e7fe      	b.n	800897c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d103      	bne.n	800898c <xQueueGenericSendFromISR+0x3c>
 8008984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008988:	2b00      	cmp	r3, #0
 800898a:	d101      	bne.n	8008990 <xQueueGenericSendFromISR+0x40>
 800898c:	2301      	movs	r3, #1
 800898e:	e000      	b.n	8008992 <xQueueGenericSendFromISR+0x42>
 8008990:	2300      	movs	r3, #0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d10a      	bne.n	80089ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899a:	f383 8811 	msr	BASEPRI, r3
 800899e:	f3bf 8f6f 	isb	sy
 80089a2:	f3bf 8f4f 	dsb	sy
 80089a6:	623b      	str	r3, [r7, #32]
}
 80089a8:	bf00      	nop
 80089aa:	e7fe      	b.n	80089aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d103      	bne.n	80089ba <xQueueGenericSendFromISR+0x6a>
 80089b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d101      	bne.n	80089be <xQueueGenericSendFromISR+0x6e>
 80089ba:	2301      	movs	r3, #1
 80089bc:	e000      	b.n	80089c0 <xQueueGenericSendFromISR+0x70>
 80089be:	2300      	movs	r3, #0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10a      	bne.n	80089da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80089c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c8:	f383 8811 	msr	BASEPRI, r3
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	f3bf 8f4f 	dsb	sy
 80089d4:	61fb      	str	r3, [r7, #28]
}
 80089d6:	bf00      	nop
 80089d8:	e7fe      	b.n	80089d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089da:	f001 fb71 	bl	800a0c0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80089de:	f3ef 8211 	mrs	r2, BASEPRI
 80089e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e6:	f383 8811 	msr	BASEPRI, r3
 80089ea:	f3bf 8f6f 	isb	sy
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	61ba      	str	r2, [r7, #24]
 80089f4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80089f6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d302      	bcc.n	8008a0c <xQueueGenericSendFromISR+0xbc>
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d12c      	bne.n	8008a66 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	68b9      	ldr	r1, [r7, #8]
 8008a1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a1c:	f000 f990 	bl	8008d40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a20:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a28:	d112      	bne.n	8008a50 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d016      	beq.n	8008a60 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a34:	3324      	adds	r3, #36	; 0x24
 8008a36:	4618      	mov	r0, r3
 8008a38:	f000 fec0 	bl	80097bc <xTaskRemoveFromEventList>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00e      	beq.n	8008a60 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00b      	beq.n	8008a60 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	601a      	str	r2, [r3, #0]
 8008a4e:	e007      	b.n	8008a60 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a54:	3301      	adds	r3, #1
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	b25a      	sxtb	r2, r3
 8008a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008a60:	2301      	movs	r3, #1
 8008a62:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008a64:	e001      	b.n	8008a6a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a66:	2300      	movs	r3, #0
 8008a68:	637b      	str	r3, [r7, #52]	; 0x34
 8008a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a74:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3738      	adds	r7, #56	; 0x38
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b08c      	sub	sp, #48	; 0x30
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d10a      	bne.n	8008ab0 <xQueueReceive+0x30>
	__asm volatile
 8008a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9e:	f383 8811 	msr	BASEPRI, r3
 8008aa2:	f3bf 8f6f 	isb	sy
 8008aa6:	f3bf 8f4f 	dsb	sy
 8008aaa:	623b      	str	r3, [r7, #32]
}
 8008aac:	bf00      	nop
 8008aae:	e7fe      	b.n	8008aae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d103      	bne.n	8008abe <xQueueReceive+0x3e>
 8008ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d101      	bne.n	8008ac2 <xQueueReceive+0x42>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e000      	b.n	8008ac4 <xQueueReceive+0x44>
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d10a      	bne.n	8008ade <xQueueReceive+0x5e>
	__asm volatile
 8008ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	61fb      	str	r3, [r7, #28]
}
 8008ada:	bf00      	nop
 8008adc:	e7fe      	b.n	8008adc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ade:	f001 f831 	bl	8009b44 <xTaskGetSchedulerState>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d102      	bne.n	8008aee <xQueueReceive+0x6e>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d101      	bne.n	8008af2 <xQueueReceive+0x72>
 8008aee:	2301      	movs	r3, #1
 8008af0:	e000      	b.n	8008af4 <xQueueReceive+0x74>
 8008af2:	2300      	movs	r3, #0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d10a      	bne.n	8008b0e <xQueueReceive+0x8e>
	__asm volatile
 8008af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afc:	f383 8811 	msr	BASEPRI, r3
 8008b00:	f3bf 8f6f 	isb	sy
 8008b04:	f3bf 8f4f 	dsb	sy
 8008b08:	61bb      	str	r3, [r7, #24]
}
 8008b0a:	bf00      	nop
 8008b0c:	e7fe      	b.n	8008b0c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b0e:	f001 fa15 	bl	8009f3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b16:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d01f      	beq.n	8008b5e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b1e:	68b9      	ldr	r1, [r7, #8]
 8008b20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b22:	f000 f977 	bl	8008e14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b28:	1e5a      	subs	r2, r3, #1
 8008b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b30:	691b      	ldr	r3, [r3, #16]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00f      	beq.n	8008b56 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b38:	3310      	adds	r3, #16
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 fe3e 	bl	80097bc <xTaskRemoveFromEventList>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d007      	beq.n	8008b56 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b46:	4b3d      	ldr	r3, [pc, #244]	; (8008c3c <xQueueReceive+0x1bc>)
 8008b48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b4c:	601a      	str	r2, [r3, #0]
 8008b4e:	f3bf 8f4f 	dsb	sy
 8008b52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b56:	f001 fa21 	bl	8009f9c <vPortExitCritical>
				return pdPASS;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e069      	b.n	8008c32 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d103      	bne.n	8008b6c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b64:	f001 fa1a 	bl	8009f9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	e062      	b.n	8008c32 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d106      	bne.n	8008b80 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b72:	f107 0310 	add.w	r3, r7, #16
 8008b76:	4618      	mov	r0, r3
 8008b78:	f000 fe82 	bl	8009880 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b80:	f001 fa0c 	bl	8009f9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b84:	f000 fc2c 	bl	80093e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b88:	f001 f9d8 	bl	8009f3c <vPortEnterCritical>
 8008b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b92:	b25b      	sxtb	r3, r3
 8008b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b98:	d103      	bne.n	8008ba2 <xQueueReceive+0x122>
 8008b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ba8:	b25b      	sxtb	r3, r3
 8008baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bae:	d103      	bne.n	8008bb8 <xQueueReceive+0x138>
 8008bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bb8:	f001 f9f0 	bl	8009f9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008bbc:	1d3a      	adds	r2, r7, #4
 8008bbe:	f107 0310 	add.w	r3, r7, #16
 8008bc2:	4611      	mov	r1, r2
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f000 fe71 	bl	80098ac <xTaskCheckForTimeOut>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d123      	bne.n	8008c18 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bd2:	f000 f997 	bl	8008f04 <prvIsQueueEmpty>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d017      	beq.n	8008c0c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bde:	3324      	adds	r3, #36	; 0x24
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	4611      	mov	r1, r2
 8008be4:	4618      	mov	r0, r3
 8008be6:	f000 fdc5 	bl	8009774 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008bea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bec:	f000 f938 	bl	8008e60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008bf0:	f000 fc04 	bl	80093fc <xTaskResumeAll>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d189      	bne.n	8008b0e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008bfa:	4b10      	ldr	r3, [pc, #64]	; (8008c3c <xQueueReceive+0x1bc>)
 8008bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c00:	601a      	str	r2, [r3, #0]
 8008c02:	f3bf 8f4f 	dsb	sy
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	e780      	b.n	8008b0e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008c0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c0e:	f000 f927 	bl	8008e60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c12:	f000 fbf3 	bl	80093fc <xTaskResumeAll>
 8008c16:	e77a      	b.n	8008b0e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008c18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c1a:	f000 f921 	bl	8008e60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c1e:	f000 fbed 	bl	80093fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c24:	f000 f96e 	bl	8008f04 <prvIsQueueEmpty>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	f43f af6f 	beq.w	8008b0e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3730      	adds	r7, #48	; 0x30
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	e000ed04 	.word	0xe000ed04

08008c40 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b08e      	sub	sp, #56	; 0x38
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10a      	bne.n	8008c6c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	623b      	str	r3, [r7, #32]
}
 8008c68:	bf00      	nop
 8008c6a:	e7fe      	b.n	8008c6a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d103      	bne.n	8008c7a <xQueueReceiveFromISR+0x3a>
 8008c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d101      	bne.n	8008c7e <xQueueReceiveFromISR+0x3e>
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e000      	b.n	8008c80 <xQueueReceiveFromISR+0x40>
 8008c7e:	2300      	movs	r3, #0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d10a      	bne.n	8008c9a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c88:	f383 8811 	msr	BASEPRI, r3
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	f3bf 8f4f 	dsb	sy
 8008c94:	61fb      	str	r3, [r7, #28]
}
 8008c96:	bf00      	nop
 8008c98:	e7fe      	b.n	8008c98 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c9a:	f001 fa11 	bl	800a0c0 <vPortValidateInterruptPriority>
	__asm volatile
 8008c9e:	f3ef 8211 	mrs	r2, BASEPRI
 8008ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca6:	f383 8811 	msr	BASEPRI, r3
 8008caa:	f3bf 8f6f 	isb	sy
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	61ba      	str	r2, [r7, #24]
 8008cb4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008cb6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cbe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d02f      	beq.n	8008d26 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ccc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008cd0:	68b9      	ldr	r1, [r7, #8]
 8008cd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cd4:	f000 f89e 	bl	8008e14 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cda:	1e5a      	subs	r2, r3, #1
 8008cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cde:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008ce0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce8:	d112      	bne.n	8008d10 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d016      	beq.n	8008d20 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf4:	3310      	adds	r3, #16
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f000 fd60 	bl	80097bc <xTaskRemoveFromEventList>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00e      	beq.n	8008d20 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d00b      	beq.n	8008d20 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	601a      	str	r2, [r3, #0]
 8008d0e:	e007      	b.n	8008d20 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008d10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d14:	3301      	adds	r3, #1
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	b25a      	sxtb	r2, r3
 8008d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008d20:	2301      	movs	r3, #1
 8008d22:	637b      	str	r3, [r7, #52]	; 0x34
 8008d24:	e001      	b.n	8008d2a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008d26:	2300      	movs	r3, #0
 8008d28:	637b      	str	r3, [r7, #52]	; 0x34
 8008d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	f383 8811 	msr	BASEPRI, r3
}
 8008d34:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3738      	adds	r7, #56	; 0x38
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d10d      	bne.n	8008d7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d14d      	bne.n	8008e02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f000 ff08 	bl	8009b80 <xTaskPriorityDisinherit>
 8008d70:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2200      	movs	r2, #0
 8008d76:	605a      	str	r2, [r3, #4]
 8008d78:	e043      	b.n	8008e02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d119      	bne.n	8008db4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6898      	ldr	r0, [r3, #8]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d88:	461a      	mov	r2, r3
 8008d8a:	68b9      	ldr	r1, [r7, #8]
 8008d8c:	f001 fef6 	bl	800ab7c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	689a      	ldr	r2, [r3, #8]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d98:	441a      	add	r2, r3
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	689a      	ldr	r2, [r3, #8]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d32b      	bcc.n	8008e02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	609a      	str	r2, [r3, #8]
 8008db2:	e026      	b.n	8008e02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	68d8      	ldr	r0, [r3, #12]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	68b9      	ldr	r1, [r7, #8]
 8008dc0:	f001 fedc 	bl	800ab7c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	68da      	ldr	r2, [r3, #12]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dcc:	425b      	negs	r3, r3
 8008dce:	441a      	add	r2, r3
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	68da      	ldr	r2, [r3, #12]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d207      	bcs.n	8008df0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	685a      	ldr	r2, [r3, #4]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de8:	425b      	negs	r3, r3
 8008dea:	441a      	add	r2, r3
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d105      	bne.n	8008e02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d002      	beq.n	8008e02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	1c5a      	adds	r2, r3, #1
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008e0a:	697b      	ldr	r3, [r7, #20]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3718      	adds	r7, #24
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d018      	beq.n	8008e58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	68da      	ldr	r2, [r3, #12]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2e:	441a      	add	r2, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	68da      	ldr	r2, [r3, #12]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d303      	bcc.n	8008e48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	68d9      	ldr	r1, [r3, #12]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e50:	461a      	mov	r2, r3
 8008e52:	6838      	ldr	r0, [r7, #0]
 8008e54:	f001 fe92 	bl	800ab7c <memcpy>
	}
}
 8008e58:	bf00      	nop
 8008e5a:	3708      	adds	r7, #8
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008e68:	f001 f868 	bl	8009f3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e74:	e011      	b.n	8008e9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d012      	beq.n	8008ea4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	3324      	adds	r3, #36	; 0x24
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 fc9a 	bl	80097bc <xTaskRemoveFromEventList>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d001      	beq.n	8008e92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008e8e:	f000 fd6f 	bl	8009970 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008e92:	7bfb      	ldrb	r3, [r7, #15]
 8008e94:	3b01      	subs	r3, #1
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	dce9      	bgt.n	8008e76 <prvUnlockQueue+0x16>
 8008ea2:	e000      	b.n	8008ea6 <prvUnlockQueue+0x46>
					break;
 8008ea4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	22ff      	movs	r2, #255	; 0xff
 8008eaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008eae:	f001 f875 	bl	8009f9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008eb2:	f001 f843 	bl	8009f3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ebc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ebe:	e011      	b.n	8008ee4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d012      	beq.n	8008eee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	3310      	adds	r3, #16
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f000 fc75 	bl	80097bc <xTaskRemoveFromEventList>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d001      	beq.n	8008edc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008ed8:	f000 fd4a 	bl	8009970 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008edc:	7bbb      	ldrb	r3, [r7, #14]
 8008ede:	3b01      	subs	r3, #1
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ee4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	dce9      	bgt.n	8008ec0 <prvUnlockQueue+0x60>
 8008eec:	e000      	b.n	8008ef0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008eee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	22ff      	movs	r2, #255	; 0xff
 8008ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008ef8:	f001 f850 	bl	8009f9c <vPortExitCritical>
}
 8008efc:	bf00      	nop
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f0c:	f001 f816 	bl	8009f3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d102      	bne.n	8008f1e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	60fb      	str	r3, [r7, #12]
 8008f1c:	e001      	b.n	8008f22 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f22:	f001 f83b 	bl	8009f9c <vPortExitCritical>

	return xReturn;
 8008f26:	68fb      	ldr	r3, [r7, #12]
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3710      	adds	r7, #16
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f38:	f001 f800 	bl	8009f3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d102      	bne.n	8008f4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	60fb      	str	r3, [r7, #12]
 8008f4c:	e001      	b.n	8008f52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f52:	f001 f823 	bl	8009f9c <vPortExitCritical>

	return xReturn;
 8008f56:	68fb      	ldr	r3, [r7, #12]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b08e      	sub	sp, #56	; 0x38
 8008f64:	af04      	add	r7, sp, #16
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	607a      	str	r2, [r7, #4]
 8008f6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10a      	bne.n	8008f8a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f78:	f383 8811 	msr	BASEPRI, r3
 8008f7c:	f3bf 8f6f 	isb	sy
 8008f80:	f3bf 8f4f 	dsb	sy
 8008f84:	623b      	str	r3, [r7, #32]
}
 8008f86:	bf00      	nop
 8008f88:	e7fe      	b.n	8008f88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d10a      	bne.n	8008fa6 <xTaskCreateStatic+0x46>
	__asm volatile
 8008f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f94:	f383 8811 	msr	BASEPRI, r3
 8008f98:	f3bf 8f6f 	isb	sy
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	61fb      	str	r3, [r7, #28]
}
 8008fa2:	bf00      	nop
 8008fa4:	e7fe      	b.n	8008fa4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008fa6:	23b4      	movs	r3, #180	; 0xb4
 8008fa8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	2bb4      	cmp	r3, #180	; 0xb4
 8008fae:	d00a      	beq.n	8008fc6 <xTaskCreateStatic+0x66>
	__asm volatile
 8008fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb4:	f383 8811 	msr	BASEPRI, r3
 8008fb8:	f3bf 8f6f 	isb	sy
 8008fbc:	f3bf 8f4f 	dsb	sy
 8008fc0:	61bb      	str	r3, [r7, #24]
}
 8008fc2:	bf00      	nop
 8008fc4:	e7fe      	b.n	8008fc4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d01e      	beq.n	800900a <xTaskCreateStatic+0xaa>
 8008fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d01b      	beq.n	800900a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fda:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fde:	2202      	movs	r2, #2
 8008fe0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	9303      	str	r3, [sp, #12]
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fea:	9302      	str	r3, [sp, #8]
 8008fec:	f107 0314 	add.w	r3, r7, #20
 8008ff0:	9301      	str	r3, [sp, #4]
 8008ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff4:	9300      	str	r3, [sp, #0]
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	68b9      	ldr	r1, [r7, #8]
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f000 f851 	bl	80090a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009002:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009004:	f000 f8e4 	bl	80091d0 <prvAddNewTaskToReadyList>
 8009008:	e001      	b.n	800900e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800900a:	2300      	movs	r3, #0
 800900c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800900e:	697b      	ldr	r3, [r7, #20]
	}
 8009010:	4618      	mov	r0, r3
 8009012:	3728      	adds	r7, #40	; 0x28
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009018:	b580      	push	{r7, lr}
 800901a:	b08c      	sub	sp, #48	; 0x30
 800901c:	af04      	add	r7, sp, #16
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	603b      	str	r3, [r7, #0]
 8009024:	4613      	mov	r3, r2
 8009026:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009028:	88fb      	ldrh	r3, [r7, #6]
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	4618      	mov	r0, r3
 800902e:	f001 f885 	bl	800a13c <pvPortMalloc>
 8009032:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00e      	beq.n	8009058 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800903a:	20b4      	movs	r0, #180	; 0xb4
 800903c:	f001 f87e 	bl	800a13c <pvPortMalloc>
 8009040:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d003      	beq.n	8009050 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	697a      	ldr	r2, [r7, #20]
 800904c:	631a      	str	r2, [r3, #48]	; 0x30
 800904e:	e005      	b.n	800905c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009050:	6978      	ldr	r0, [r7, #20]
 8009052:	f001 f937 	bl	800a2c4 <vPortFree>
 8009056:	e001      	b.n	800905c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009058:	2300      	movs	r3, #0
 800905a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d017      	beq.n	8009092 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	2200      	movs	r2, #0
 8009066:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800906a:	88fa      	ldrh	r2, [r7, #6]
 800906c:	2300      	movs	r3, #0
 800906e:	9303      	str	r3, [sp, #12]
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	9302      	str	r3, [sp, #8]
 8009074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009076:	9301      	str	r3, [sp, #4]
 8009078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	68b9      	ldr	r1, [r7, #8]
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	f000 f80f 	bl	80090a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009086:	69f8      	ldr	r0, [r7, #28]
 8009088:	f000 f8a2 	bl	80091d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800908c:	2301      	movs	r3, #1
 800908e:	61bb      	str	r3, [r7, #24]
 8009090:	e002      	b.n	8009098 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009092:	f04f 33ff 	mov.w	r3, #4294967295
 8009096:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009098:	69bb      	ldr	r3, [r7, #24]
	}
 800909a:	4618      	mov	r0, r3
 800909c:	3720      	adds	r7, #32
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
	...

080090a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b088      	sub	sp, #32
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	607a      	str	r2, [r7, #4]
 80090b0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80090b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80090bc:	3b01      	subs	r3, #1
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	4413      	add	r3, r2
 80090c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80090c4:	69bb      	ldr	r3, [r7, #24]
 80090c6:	f023 0307 	bic.w	r3, r3, #7
 80090ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	f003 0307 	and.w	r3, r3, #7
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00a      	beq.n	80090ec <prvInitialiseNewTask+0x48>
	__asm volatile
 80090d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090da:	f383 8811 	msr	BASEPRI, r3
 80090de:	f3bf 8f6f 	isb	sy
 80090e2:	f3bf 8f4f 	dsb	sy
 80090e6:	617b      	str	r3, [r7, #20]
}
 80090e8:	bf00      	nop
 80090ea:	e7fe      	b.n	80090ea <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090ec:	2300      	movs	r3, #0
 80090ee:	61fb      	str	r3, [r7, #28]
 80090f0:	e012      	b.n	8009118 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80090f2:	68ba      	ldr	r2, [r7, #8]
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	4413      	add	r3, r2
 80090f8:	7819      	ldrb	r1, [r3, #0]
 80090fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	4413      	add	r3, r2
 8009100:	3334      	adds	r3, #52	; 0x34
 8009102:	460a      	mov	r2, r1
 8009104:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009106:	68ba      	ldr	r2, [r7, #8]
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	4413      	add	r3, r2
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d006      	beq.n	8009120 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	3301      	adds	r3, #1
 8009116:	61fb      	str	r3, [r7, #28]
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	2b0f      	cmp	r3, #15
 800911c:	d9e9      	bls.n	80090f2 <prvInitialiseNewTask+0x4e>
 800911e:	e000      	b.n	8009122 <prvInitialiseNewTask+0x7e>
		{
			break;
 8009120:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009124:	2200      	movs	r2, #0
 8009126:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800912a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912c:	2b06      	cmp	r3, #6
 800912e:	d901      	bls.n	8009134 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009130:	2306      	movs	r3, #6
 8009132:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009138:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800913a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800913e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009142:	2200      	movs	r2, #0
 8009144:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009148:	3304      	adds	r3, #4
 800914a:	4618      	mov	r0, r3
 800914c:	f7ff f935 	bl	80083ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009152:	3318      	adds	r3, #24
 8009154:	4618      	mov	r0, r3
 8009156:	f7ff f930 	bl	80083ba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800915a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800915e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009162:	f1c3 0207 	rsb	r2, r3, #7
 8009166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009168:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800916a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800916e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009172:	2200      	movs	r2, #0
 8009174:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917a:	2200      	movs	r2, #0
 800917c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009182:	334c      	adds	r3, #76	; 0x4c
 8009184:	2260      	movs	r2, #96	; 0x60
 8009186:	2100      	movs	r1, #0
 8009188:	4618      	mov	r0, r3
 800918a:	f001 fd05 	bl	800ab98 <memset>
 800918e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009190:	4a0c      	ldr	r2, [pc, #48]	; (80091c4 <prvInitialiseNewTask+0x120>)
 8009192:	651a      	str	r2, [r3, #80]	; 0x50
 8009194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009196:	4a0c      	ldr	r2, [pc, #48]	; (80091c8 <prvInitialiseNewTask+0x124>)
 8009198:	655a      	str	r2, [r3, #84]	; 0x54
 800919a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919c:	4a0b      	ldr	r2, [pc, #44]	; (80091cc <prvInitialiseNewTask+0x128>)
 800919e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80091a0:	683a      	ldr	r2, [r7, #0]
 80091a2:	68f9      	ldr	r1, [r7, #12]
 80091a4:	69b8      	ldr	r0, [r7, #24]
 80091a6:	f000 fdd7 	bl	8009d58 <pxPortInitialiseStack>
 80091aa:	4602      	mov	r2, r0
 80091ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ae:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80091b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d002      	beq.n	80091bc <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80091b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091bc:	bf00      	nop
 80091be:	3720      	adds	r7, #32
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	0800afd4 	.word	0x0800afd4
 80091c8:	0800aff4 	.word	0x0800aff4
 80091cc:	0800afb4 	.word	0x0800afb4

080091d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80091d8:	f000 feb0 	bl	8009f3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80091dc:	4b2a      	ldr	r3, [pc, #168]	; (8009288 <prvAddNewTaskToReadyList+0xb8>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	3301      	adds	r3, #1
 80091e2:	4a29      	ldr	r2, [pc, #164]	; (8009288 <prvAddNewTaskToReadyList+0xb8>)
 80091e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80091e6:	4b29      	ldr	r3, [pc, #164]	; (800928c <prvAddNewTaskToReadyList+0xbc>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d109      	bne.n	8009202 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80091ee:	4a27      	ldr	r2, [pc, #156]	; (800928c <prvAddNewTaskToReadyList+0xbc>)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80091f4:	4b24      	ldr	r3, [pc, #144]	; (8009288 <prvAddNewTaskToReadyList+0xb8>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d110      	bne.n	800921e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80091fc:	f000 fbdc 	bl	80099b8 <prvInitialiseTaskLists>
 8009200:	e00d      	b.n	800921e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009202:	4b23      	ldr	r3, [pc, #140]	; (8009290 <prvAddNewTaskToReadyList+0xc0>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d109      	bne.n	800921e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800920a:	4b20      	ldr	r3, [pc, #128]	; (800928c <prvAddNewTaskToReadyList+0xbc>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009214:	429a      	cmp	r2, r3
 8009216:	d802      	bhi.n	800921e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009218:	4a1c      	ldr	r2, [pc, #112]	; (800928c <prvAddNewTaskToReadyList+0xbc>)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800921e:	4b1d      	ldr	r3, [pc, #116]	; (8009294 <prvAddNewTaskToReadyList+0xc4>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	3301      	adds	r3, #1
 8009224:	4a1b      	ldr	r2, [pc, #108]	; (8009294 <prvAddNewTaskToReadyList+0xc4>)
 8009226:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922c:	2201      	movs	r2, #1
 800922e:	409a      	lsls	r2, r3
 8009230:	4b19      	ldr	r3, [pc, #100]	; (8009298 <prvAddNewTaskToReadyList+0xc8>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4313      	orrs	r3, r2
 8009236:	4a18      	ldr	r2, [pc, #96]	; (8009298 <prvAddNewTaskToReadyList+0xc8>)
 8009238:	6013      	str	r3, [r2, #0]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800923e:	4613      	mov	r3, r2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	4413      	add	r3, r2
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	4a15      	ldr	r2, [pc, #84]	; (800929c <prvAddNewTaskToReadyList+0xcc>)
 8009248:	441a      	add	r2, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	3304      	adds	r3, #4
 800924e:	4619      	mov	r1, r3
 8009250:	4610      	mov	r0, r2
 8009252:	f7ff f8be 	bl	80083d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009256:	f000 fea1 	bl	8009f9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800925a:	4b0d      	ldr	r3, [pc, #52]	; (8009290 <prvAddNewTaskToReadyList+0xc0>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00e      	beq.n	8009280 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009262:	4b0a      	ldr	r3, [pc, #40]	; (800928c <prvAddNewTaskToReadyList+0xbc>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926c:	429a      	cmp	r2, r3
 800926e:	d207      	bcs.n	8009280 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009270:	4b0b      	ldr	r3, [pc, #44]	; (80092a0 <prvAddNewTaskToReadyList+0xd0>)
 8009272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009276:	601a      	str	r2, [r3, #0]
 8009278:	f3bf 8f4f 	dsb	sy
 800927c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009280:	bf00      	nop
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	200005b0 	.word	0x200005b0
 800928c:	200004b0 	.word	0x200004b0
 8009290:	200005bc 	.word	0x200005bc
 8009294:	200005cc 	.word	0x200005cc
 8009298:	200005b8 	.word	0x200005b8
 800929c:	200004b4 	.word	0x200004b4
 80092a0:	e000ed04 	.word	0xe000ed04

080092a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80092ac:	2300      	movs	r3, #0
 80092ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d017      	beq.n	80092e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80092b6:	4b13      	ldr	r3, [pc, #76]	; (8009304 <vTaskDelay+0x60>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00a      	beq.n	80092d4 <vTaskDelay+0x30>
	__asm volatile
 80092be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c2:	f383 8811 	msr	BASEPRI, r3
 80092c6:	f3bf 8f6f 	isb	sy
 80092ca:	f3bf 8f4f 	dsb	sy
 80092ce:	60bb      	str	r3, [r7, #8]
}
 80092d0:	bf00      	nop
 80092d2:	e7fe      	b.n	80092d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80092d4:	f000 f884 	bl	80093e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80092d8:	2100      	movs	r1, #0
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 fcd6 	bl	8009c8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80092e0:	f000 f88c 	bl	80093fc <xTaskResumeAll>
 80092e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d107      	bne.n	80092fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80092ec:	4b06      	ldr	r3, [pc, #24]	; (8009308 <vTaskDelay+0x64>)
 80092ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092f2:	601a      	str	r2, [r3, #0]
 80092f4:	f3bf 8f4f 	dsb	sy
 80092f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80092fc:	bf00      	nop
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	200005d8 	.word	0x200005d8
 8009308:	e000ed04 	.word	0xe000ed04

0800930c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b08a      	sub	sp, #40	; 0x28
 8009310:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009312:	2300      	movs	r3, #0
 8009314:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009316:	2300      	movs	r3, #0
 8009318:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800931a:	463a      	mov	r2, r7
 800931c:	1d39      	adds	r1, r7, #4
 800931e:	f107 0308 	add.w	r3, r7, #8
 8009322:	4618      	mov	r0, r3
 8009324:	f7f7 f908 	bl	8000538 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009328:	6839      	ldr	r1, [r7, #0]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	9202      	str	r2, [sp, #8]
 8009330:	9301      	str	r3, [sp, #4]
 8009332:	2300      	movs	r3, #0
 8009334:	9300      	str	r3, [sp, #0]
 8009336:	2300      	movs	r3, #0
 8009338:	460a      	mov	r2, r1
 800933a:	4921      	ldr	r1, [pc, #132]	; (80093c0 <vTaskStartScheduler+0xb4>)
 800933c:	4821      	ldr	r0, [pc, #132]	; (80093c4 <vTaskStartScheduler+0xb8>)
 800933e:	f7ff fe0f 	bl	8008f60 <xTaskCreateStatic>
 8009342:	4603      	mov	r3, r0
 8009344:	4a20      	ldr	r2, [pc, #128]	; (80093c8 <vTaskStartScheduler+0xbc>)
 8009346:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009348:	4b1f      	ldr	r3, [pc, #124]	; (80093c8 <vTaskStartScheduler+0xbc>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d002      	beq.n	8009356 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009350:	2301      	movs	r3, #1
 8009352:	617b      	str	r3, [r7, #20]
 8009354:	e001      	b.n	800935a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009356:	2300      	movs	r3, #0
 8009358:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	2b01      	cmp	r3, #1
 800935e:	d11b      	bne.n	8009398 <vTaskStartScheduler+0x8c>
	__asm volatile
 8009360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009364:	f383 8811 	msr	BASEPRI, r3
 8009368:	f3bf 8f6f 	isb	sy
 800936c:	f3bf 8f4f 	dsb	sy
 8009370:	613b      	str	r3, [r7, #16]
}
 8009372:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009374:	4b15      	ldr	r3, [pc, #84]	; (80093cc <vTaskStartScheduler+0xc0>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	334c      	adds	r3, #76	; 0x4c
 800937a:	4a15      	ldr	r2, [pc, #84]	; (80093d0 <vTaskStartScheduler+0xc4>)
 800937c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800937e:	4b15      	ldr	r3, [pc, #84]	; (80093d4 <vTaskStartScheduler+0xc8>)
 8009380:	f04f 32ff 	mov.w	r2, #4294967295
 8009384:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009386:	4b14      	ldr	r3, [pc, #80]	; (80093d8 <vTaskStartScheduler+0xcc>)
 8009388:	2201      	movs	r2, #1
 800938a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800938c:	4b13      	ldr	r3, [pc, #76]	; (80093dc <vTaskStartScheduler+0xd0>)
 800938e:	2200      	movs	r2, #0
 8009390:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009392:	f000 fd61 	bl	8009e58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009396:	e00e      	b.n	80093b6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800939e:	d10a      	bne.n	80093b6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80093a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a4:	f383 8811 	msr	BASEPRI, r3
 80093a8:	f3bf 8f6f 	isb	sy
 80093ac:	f3bf 8f4f 	dsb	sy
 80093b0:	60fb      	str	r3, [r7, #12]
}
 80093b2:	bf00      	nop
 80093b4:	e7fe      	b.n	80093b4 <vTaskStartScheduler+0xa8>
}
 80093b6:	bf00      	nop
 80093b8:	3718      	adds	r7, #24
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	0800af94 	.word	0x0800af94
 80093c4:	08009989 	.word	0x08009989
 80093c8:	200005d4 	.word	0x200005d4
 80093cc:	200004b0 	.word	0x200004b0
 80093d0:	20000038 	.word	0x20000038
 80093d4:	200005d0 	.word	0x200005d0
 80093d8:	200005bc 	.word	0x200005bc
 80093dc:	200005b4 	.word	0x200005b4

080093e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80093e0:	b480      	push	{r7}
 80093e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80093e4:	4b04      	ldr	r3, [pc, #16]	; (80093f8 <vTaskSuspendAll+0x18>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	3301      	adds	r3, #1
 80093ea:	4a03      	ldr	r2, [pc, #12]	; (80093f8 <vTaskSuspendAll+0x18>)
 80093ec:	6013      	str	r3, [r2, #0]
}
 80093ee:	bf00      	nop
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bc80      	pop	{r7}
 80093f4:	4770      	bx	lr
 80093f6:	bf00      	nop
 80093f8:	200005d8 	.word	0x200005d8

080093fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009402:	2300      	movs	r3, #0
 8009404:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009406:	2300      	movs	r3, #0
 8009408:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800940a:	4b41      	ldr	r3, [pc, #260]	; (8009510 <xTaskResumeAll+0x114>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d10a      	bne.n	8009428 <xTaskResumeAll+0x2c>
	__asm volatile
 8009412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009416:	f383 8811 	msr	BASEPRI, r3
 800941a:	f3bf 8f6f 	isb	sy
 800941e:	f3bf 8f4f 	dsb	sy
 8009422:	603b      	str	r3, [r7, #0]
}
 8009424:	bf00      	nop
 8009426:	e7fe      	b.n	8009426 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009428:	f000 fd88 	bl	8009f3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800942c:	4b38      	ldr	r3, [pc, #224]	; (8009510 <xTaskResumeAll+0x114>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	3b01      	subs	r3, #1
 8009432:	4a37      	ldr	r2, [pc, #220]	; (8009510 <xTaskResumeAll+0x114>)
 8009434:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009436:	4b36      	ldr	r3, [pc, #216]	; (8009510 <xTaskResumeAll+0x114>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d161      	bne.n	8009502 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800943e:	4b35      	ldr	r3, [pc, #212]	; (8009514 <xTaskResumeAll+0x118>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d05d      	beq.n	8009502 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009446:	e02e      	b.n	80094a6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009448:	4b33      	ldr	r3, [pc, #204]	; (8009518 <xTaskResumeAll+0x11c>)
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	3318      	adds	r3, #24
 8009454:	4618      	mov	r0, r3
 8009456:	f7ff f817 	bl	8008488 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	3304      	adds	r3, #4
 800945e:	4618      	mov	r0, r3
 8009460:	f7ff f812 	bl	8008488 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009468:	2201      	movs	r2, #1
 800946a:	409a      	lsls	r2, r3
 800946c:	4b2b      	ldr	r3, [pc, #172]	; (800951c <xTaskResumeAll+0x120>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4313      	orrs	r3, r2
 8009472:	4a2a      	ldr	r2, [pc, #168]	; (800951c <xTaskResumeAll+0x120>)
 8009474:	6013      	str	r3, [r2, #0]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800947a:	4613      	mov	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	4413      	add	r3, r2
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	4a27      	ldr	r2, [pc, #156]	; (8009520 <xTaskResumeAll+0x124>)
 8009484:	441a      	add	r2, r3
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	3304      	adds	r3, #4
 800948a:	4619      	mov	r1, r3
 800948c:	4610      	mov	r0, r2
 800948e:	f7fe ffa0 	bl	80083d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009496:	4b23      	ldr	r3, [pc, #140]	; (8009524 <xTaskResumeAll+0x128>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800949c:	429a      	cmp	r2, r3
 800949e:	d302      	bcc.n	80094a6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80094a0:	4b21      	ldr	r3, [pc, #132]	; (8009528 <xTaskResumeAll+0x12c>)
 80094a2:	2201      	movs	r2, #1
 80094a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094a6:	4b1c      	ldr	r3, [pc, #112]	; (8009518 <xTaskResumeAll+0x11c>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d1cc      	bne.n	8009448 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d001      	beq.n	80094b8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80094b4:	f000 fb22 	bl	8009afc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80094b8:	4b1c      	ldr	r3, [pc, #112]	; (800952c <xTaskResumeAll+0x130>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d010      	beq.n	80094e6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80094c4:	f000 f836 	bl	8009534 <xTaskIncrementTick>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d002      	beq.n	80094d4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80094ce:	4b16      	ldr	r3, [pc, #88]	; (8009528 <xTaskResumeAll+0x12c>)
 80094d0:	2201      	movs	r2, #1
 80094d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	3b01      	subs	r3, #1
 80094d8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d1f1      	bne.n	80094c4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80094e0:	4b12      	ldr	r3, [pc, #72]	; (800952c <xTaskResumeAll+0x130>)
 80094e2:	2200      	movs	r2, #0
 80094e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80094e6:	4b10      	ldr	r3, [pc, #64]	; (8009528 <xTaskResumeAll+0x12c>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d009      	beq.n	8009502 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80094ee:	2301      	movs	r3, #1
 80094f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80094f2:	4b0f      	ldr	r3, [pc, #60]	; (8009530 <xTaskResumeAll+0x134>)
 80094f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094f8:	601a      	str	r2, [r3, #0]
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009502:	f000 fd4b 	bl	8009f9c <vPortExitCritical>

	return xAlreadyYielded;
 8009506:	68bb      	ldr	r3, [r7, #8]
}
 8009508:	4618      	mov	r0, r3
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	200005d8 	.word	0x200005d8
 8009514:	200005b0 	.word	0x200005b0
 8009518:	20000570 	.word	0x20000570
 800951c:	200005b8 	.word	0x200005b8
 8009520:	200004b4 	.word	0x200004b4
 8009524:	200004b0 	.word	0x200004b0
 8009528:	200005c4 	.word	0x200005c4
 800952c:	200005c0 	.word	0x200005c0
 8009530:	e000ed04 	.word	0xe000ed04

08009534 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b086      	sub	sp, #24
 8009538:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800953a:	2300      	movs	r3, #0
 800953c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800953e:	4b51      	ldr	r3, [pc, #324]	; (8009684 <xTaskIncrementTick+0x150>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	f040 808d 	bne.w	8009662 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009548:	4b4f      	ldr	r3, [pc, #316]	; (8009688 <xTaskIncrementTick+0x154>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	3301      	adds	r3, #1
 800954e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009550:	4a4d      	ldr	r2, [pc, #308]	; (8009688 <xTaskIncrementTick+0x154>)
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d120      	bne.n	800959e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800955c:	4b4b      	ldr	r3, [pc, #300]	; (800968c <xTaskIncrementTick+0x158>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d00a      	beq.n	800957c <xTaskIncrementTick+0x48>
	__asm volatile
 8009566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956a:	f383 8811 	msr	BASEPRI, r3
 800956e:	f3bf 8f6f 	isb	sy
 8009572:	f3bf 8f4f 	dsb	sy
 8009576:	603b      	str	r3, [r7, #0]
}
 8009578:	bf00      	nop
 800957a:	e7fe      	b.n	800957a <xTaskIncrementTick+0x46>
 800957c:	4b43      	ldr	r3, [pc, #268]	; (800968c <xTaskIncrementTick+0x158>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	60fb      	str	r3, [r7, #12]
 8009582:	4b43      	ldr	r3, [pc, #268]	; (8009690 <xTaskIncrementTick+0x15c>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a41      	ldr	r2, [pc, #260]	; (800968c <xTaskIncrementTick+0x158>)
 8009588:	6013      	str	r3, [r2, #0]
 800958a:	4a41      	ldr	r2, [pc, #260]	; (8009690 <xTaskIncrementTick+0x15c>)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6013      	str	r3, [r2, #0]
 8009590:	4b40      	ldr	r3, [pc, #256]	; (8009694 <xTaskIncrementTick+0x160>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	3301      	adds	r3, #1
 8009596:	4a3f      	ldr	r2, [pc, #252]	; (8009694 <xTaskIncrementTick+0x160>)
 8009598:	6013      	str	r3, [r2, #0]
 800959a:	f000 faaf 	bl	8009afc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800959e:	4b3e      	ldr	r3, [pc, #248]	; (8009698 <xTaskIncrementTick+0x164>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	693a      	ldr	r2, [r7, #16]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d34d      	bcc.n	8009644 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095a8:	4b38      	ldr	r3, [pc, #224]	; (800968c <xTaskIncrementTick+0x158>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d101      	bne.n	80095b6 <xTaskIncrementTick+0x82>
 80095b2:	2301      	movs	r3, #1
 80095b4:	e000      	b.n	80095b8 <xTaskIncrementTick+0x84>
 80095b6:	2300      	movs	r3, #0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d004      	beq.n	80095c6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095bc:	4b36      	ldr	r3, [pc, #216]	; (8009698 <xTaskIncrementTick+0x164>)
 80095be:	f04f 32ff 	mov.w	r2, #4294967295
 80095c2:	601a      	str	r2, [r3, #0]
					break;
 80095c4:	e03e      	b.n	8009644 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80095c6:	4b31      	ldr	r3, [pc, #196]	; (800968c <xTaskIncrementTick+0x158>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80095d6:	693a      	ldr	r2, [r7, #16]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d203      	bcs.n	80095e6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80095de:	4a2e      	ldr	r2, [pc, #184]	; (8009698 <xTaskIncrementTick+0x164>)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6013      	str	r3, [r2, #0]
						break;
 80095e4:	e02e      	b.n	8009644 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	3304      	adds	r3, #4
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7fe ff4c 	bl	8008488 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d004      	beq.n	8009602 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	3318      	adds	r3, #24
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7fe ff43 	bl	8008488 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009606:	2201      	movs	r2, #1
 8009608:	409a      	lsls	r2, r3
 800960a:	4b24      	ldr	r3, [pc, #144]	; (800969c <xTaskIncrementTick+0x168>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4313      	orrs	r3, r2
 8009610:	4a22      	ldr	r2, [pc, #136]	; (800969c <xTaskIncrementTick+0x168>)
 8009612:	6013      	str	r3, [r2, #0]
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009618:	4613      	mov	r3, r2
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	4413      	add	r3, r2
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	4a1f      	ldr	r2, [pc, #124]	; (80096a0 <xTaskIncrementTick+0x16c>)
 8009622:	441a      	add	r2, r3
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	3304      	adds	r3, #4
 8009628:	4619      	mov	r1, r3
 800962a:	4610      	mov	r0, r2
 800962c:	f7fe fed1 	bl	80083d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009634:	4b1b      	ldr	r3, [pc, #108]	; (80096a4 <xTaskIncrementTick+0x170>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800963a:	429a      	cmp	r2, r3
 800963c:	d3b4      	bcc.n	80095a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800963e:	2301      	movs	r3, #1
 8009640:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009642:	e7b1      	b.n	80095a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009644:	4b17      	ldr	r3, [pc, #92]	; (80096a4 <xTaskIncrementTick+0x170>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800964a:	4915      	ldr	r1, [pc, #84]	; (80096a0 <xTaskIncrementTick+0x16c>)
 800964c:	4613      	mov	r3, r2
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	4413      	add	r3, r2
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	440b      	add	r3, r1
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d907      	bls.n	800966c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800965c:	2301      	movs	r3, #1
 800965e:	617b      	str	r3, [r7, #20]
 8009660:	e004      	b.n	800966c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009662:	4b11      	ldr	r3, [pc, #68]	; (80096a8 <xTaskIncrementTick+0x174>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	3301      	adds	r3, #1
 8009668:	4a0f      	ldr	r2, [pc, #60]	; (80096a8 <xTaskIncrementTick+0x174>)
 800966a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800966c:	4b0f      	ldr	r3, [pc, #60]	; (80096ac <xTaskIncrementTick+0x178>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8009674:	2301      	movs	r3, #1
 8009676:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009678:	697b      	ldr	r3, [r7, #20]
}
 800967a:	4618      	mov	r0, r3
 800967c:	3718      	adds	r7, #24
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	200005d8 	.word	0x200005d8
 8009688:	200005b4 	.word	0x200005b4
 800968c:	20000568 	.word	0x20000568
 8009690:	2000056c 	.word	0x2000056c
 8009694:	200005c8 	.word	0x200005c8
 8009698:	200005d0 	.word	0x200005d0
 800969c:	200005b8 	.word	0x200005b8
 80096a0:	200004b4 	.word	0x200004b4
 80096a4:	200004b0 	.word	0x200004b0
 80096a8:	200005c0 	.word	0x200005c0
 80096ac:	200005c4 	.word	0x200005c4

080096b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80096b0:	b480      	push	{r7}
 80096b2:	b087      	sub	sp, #28
 80096b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80096b6:	4b29      	ldr	r3, [pc, #164]	; (800975c <vTaskSwitchContext+0xac>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d003      	beq.n	80096c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80096be:	4b28      	ldr	r3, [pc, #160]	; (8009760 <vTaskSwitchContext+0xb0>)
 80096c0:	2201      	movs	r2, #1
 80096c2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80096c4:	e044      	b.n	8009750 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80096c6:	4b26      	ldr	r3, [pc, #152]	; (8009760 <vTaskSwitchContext+0xb0>)
 80096c8:	2200      	movs	r2, #0
 80096ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80096cc:	4b25      	ldr	r3, [pc, #148]	; (8009764 <vTaskSwitchContext+0xb4>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	fab3 f383 	clz	r3, r3
 80096d8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80096da:	7afb      	ldrb	r3, [r7, #11]
 80096dc:	f1c3 031f 	rsb	r3, r3, #31
 80096e0:	617b      	str	r3, [r7, #20]
 80096e2:	4921      	ldr	r1, [pc, #132]	; (8009768 <vTaskSwitchContext+0xb8>)
 80096e4:	697a      	ldr	r2, [r7, #20]
 80096e6:	4613      	mov	r3, r2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	4413      	add	r3, r2
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	440b      	add	r3, r1
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d10a      	bne.n	800970c <vTaskSwitchContext+0x5c>
	__asm volatile
 80096f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fa:	f383 8811 	msr	BASEPRI, r3
 80096fe:	f3bf 8f6f 	isb	sy
 8009702:	f3bf 8f4f 	dsb	sy
 8009706:	607b      	str	r3, [r7, #4]
}
 8009708:	bf00      	nop
 800970a:	e7fe      	b.n	800970a <vTaskSwitchContext+0x5a>
 800970c:	697a      	ldr	r2, [r7, #20]
 800970e:	4613      	mov	r3, r2
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	4413      	add	r3, r2
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	4a14      	ldr	r2, [pc, #80]	; (8009768 <vTaskSwitchContext+0xb8>)
 8009718:	4413      	add	r3, r2
 800971a:	613b      	str	r3, [r7, #16]
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	685a      	ldr	r2, [r3, #4]
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	605a      	str	r2, [r3, #4]
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	685a      	ldr	r2, [r3, #4]
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	3308      	adds	r3, #8
 800972e:	429a      	cmp	r2, r3
 8009730:	d104      	bne.n	800973c <vTaskSwitchContext+0x8c>
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	685a      	ldr	r2, [r3, #4]
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	605a      	str	r2, [r3, #4]
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	4a0a      	ldr	r2, [pc, #40]	; (800976c <vTaskSwitchContext+0xbc>)
 8009744:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009746:	4b09      	ldr	r3, [pc, #36]	; (800976c <vTaskSwitchContext+0xbc>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	334c      	adds	r3, #76	; 0x4c
 800974c:	4a08      	ldr	r2, [pc, #32]	; (8009770 <vTaskSwitchContext+0xc0>)
 800974e:	6013      	str	r3, [r2, #0]
}
 8009750:	bf00      	nop
 8009752:	371c      	adds	r7, #28
 8009754:	46bd      	mov	sp, r7
 8009756:	bc80      	pop	{r7}
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	200005d8 	.word	0x200005d8
 8009760:	200005c4 	.word	0x200005c4
 8009764:	200005b8 	.word	0x200005b8
 8009768:	200004b4 	.word	0x200004b4
 800976c:	200004b0 	.word	0x200004b0
 8009770:	20000038 	.word	0x20000038

08009774 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d10a      	bne.n	800979a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009788:	f383 8811 	msr	BASEPRI, r3
 800978c:	f3bf 8f6f 	isb	sy
 8009790:	f3bf 8f4f 	dsb	sy
 8009794:	60fb      	str	r3, [r7, #12]
}
 8009796:	bf00      	nop
 8009798:	e7fe      	b.n	8009798 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800979a:	4b07      	ldr	r3, [pc, #28]	; (80097b8 <vTaskPlaceOnEventList+0x44>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	3318      	adds	r3, #24
 80097a0:	4619      	mov	r1, r3
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f7fe fe38 	bl	8008418 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80097a8:	2101      	movs	r1, #1
 80097aa:	6838      	ldr	r0, [r7, #0]
 80097ac:	f000 fa6e 	bl	8009c8c <prvAddCurrentTaskToDelayedList>
}
 80097b0:	bf00      	nop
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	200004b0 	.word	0x200004b0

080097bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b086      	sub	sp, #24
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d10a      	bne.n	80097e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80097d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d6:	f383 8811 	msr	BASEPRI, r3
 80097da:	f3bf 8f6f 	isb	sy
 80097de:	f3bf 8f4f 	dsb	sy
 80097e2:	60fb      	str	r3, [r7, #12]
}
 80097e4:	bf00      	nop
 80097e6:	e7fe      	b.n	80097e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	3318      	adds	r3, #24
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7fe fe4b 	bl	8008488 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097f2:	4b1d      	ldr	r3, [pc, #116]	; (8009868 <xTaskRemoveFromEventList+0xac>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d11c      	bne.n	8009834 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	3304      	adds	r3, #4
 80097fe:	4618      	mov	r0, r3
 8009800:	f7fe fe42 	bl	8008488 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009808:	2201      	movs	r2, #1
 800980a:	409a      	lsls	r2, r3
 800980c:	4b17      	ldr	r3, [pc, #92]	; (800986c <xTaskRemoveFromEventList+0xb0>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4313      	orrs	r3, r2
 8009812:	4a16      	ldr	r2, [pc, #88]	; (800986c <xTaskRemoveFromEventList+0xb0>)
 8009814:	6013      	str	r3, [r2, #0]
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800981a:	4613      	mov	r3, r2
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	4413      	add	r3, r2
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	4a13      	ldr	r2, [pc, #76]	; (8009870 <xTaskRemoveFromEventList+0xb4>)
 8009824:	441a      	add	r2, r3
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	3304      	adds	r3, #4
 800982a:	4619      	mov	r1, r3
 800982c:	4610      	mov	r0, r2
 800982e:	f7fe fdd0 	bl	80083d2 <vListInsertEnd>
 8009832:	e005      	b.n	8009840 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	3318      	adds	r3, #24
 8009838:	4619      	mov	r1, r3
 800983a:	480e      	ldr	r0, [pc, #56]	; (8009874 <xTaskRemoveFromEventList+0xb8>)
 800983c:	f7fe fdc9 	bl	80083d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009844:	4b0c      	ldr	r3, [pc, #48]	; (8009878 <xTaskRemoveFromEventList+0xbc>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984a:	429a      	cmp	r2, r3
 800984c:	d905      	bls.n	800985a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800984e:	2301      	movs	r3, #1
 8009850:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009852:	4b0a      	ldr	r3, [pc, #40]	; (800987c <xTaskRemoveFromEventList+0xc0>)
 8009854:	2201      	movs	r2, #1
 8009856:	601a      	str	r2, [r3, #0]
 8009858:	e001      	b.n	800985e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800985a:	2300      	movs	r3, #0
 800985c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800985e:	697b      	ldr	r3, [r7, #20]
}
 8009860:	4618      	mov	r0, r3
 8009862:	3718      	adds	r7, #24
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	200005d8 	.word	0x200005d8
 800986c:	200005b8 	.word	0x200005b8
 8009870:	200004b4 	.word	0x200004b4
 8009874:	20000570 	.word	0x20000570
 8009878:	200004b0 	.word	0x200004b0
 800987c:	200005c4 	.word	0x200005c4

08009880 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009888:	4b06      	ldr	r3, [pc, #24]	; (80098a4 <vTaskInternalSetTimeOutState+0x24>)
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009890:	4b05      	ldr	r3, [pc, #20]	; (80098a8 <vTaskInternalSetTimeOutState+0x28>)
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	605a      	str	r2, [r3, #4]
}
 8009898:	bf00      	nop
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	bc80      	pop	{r7}
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	200005c8 	.word	0x200005c8
 80098a8:	200005b4 	.word	0x200005b4

080098ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b088      	sub	sp, #32
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d10a      	bne.n	80098d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80098bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c0:	f383 8811 	msr	BASEPRI, r3
 80098c4:	f3bf 8f6f 	isb	sy
 80098c8:	f3bf 8f4f 	dsb	sy
 80098cc:	613b      	str	r3, [r7, #16]
}
 80098ce:	bf00      	nop
 80098d0:	e7fe      	b.n	80098d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d10a      	bne.n	80098ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80098d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098dc:	f383 8811 	msr	BASEPRI, r3
 80098e0:	f3bf 8f6f 	isb	sy
 80098e4:	f3bf 8f4f 	dsb	sy
 80098e8:	60fb      	str	r3, [r7, #12]
}
 80098ea:	bf00      	nop
 80098ec:	e7fe      	b.n	80098ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80098ee:	f000 fb25 	bl	8009f3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80098f2:	4b1d      	ldr	r3, [pc, #116]	; (8009968 <xTaskCheckForTimeOut+0xbc>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	69ba      	ldr	r2, [r7, #24]
 80098fe:	1ad3      	subs	r3, r2, r3
 8009900:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990a:	d102      	bne.n	8009912 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800990c:	2300      	movs	r3, #0
 800990e:	61fb      	str	r3, [r7, #28]
 8009910:	e023      	b.n	800995a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	4b15      	ldr	r3, [pc, #84]	; (800996c <xTaskCheckForTimeOut+0xc0>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	429a      	cmp	r2, r3
 800991c:	d007      	beq.n	800992e <xTaskCheckForTimeOut+0x82>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	69ba      	ldr	r2, [r7, #24]
 8009924:	429a      	cmp	r2, r3
 8009926:	d302      	bcc.n	800992e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009928:	2301      	movs	r3, #1
 800992a:	61fb      	str	r3, [r7, #28]
 800992c:	e015      	b.n	800995a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	697a      	ldr	r2, [r7, #20]
 8009934:	429a      	cmp	r2, r3
 8009936:	d20b      	bcs.n	8009950 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	1ad2      	subs	r2, r2, r3
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f7ff ff9b 	bl	8009880 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800994a:	2300      	movs	r3, #0
 800994c:	61fb      	str	r3, [r7, #28]
 800994e:	e004      	b.n	800995a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	2200      	movs	r2, #0
 8009954:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009956:	2301      	movs	r3, #1
 8009958:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800995a:	f000 fb1f 	bl	8009f9c <vPortExitCritical>

	return xReturn;
 800995e:	69fb      	ldr	r3, [r7, #28]
}
 8009960:	4618      	mov	r0, r3
 8009962:	3720      	adds	r7, #32
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	200005b4 	.word	0x200005b4
 800996c:	200005c8 	.word	0x200005c8

08009970 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009970:	b480      	push	{r7}
 8009972:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009974:	4b03      	ldr	r3, [pc, #12]	; (8009984 <vTaskMissedYield+0x14>)
 8009976:	2201      	movs	r2, #1
 8009978:	601a      	str	r2, [r3, #0]
}
 800997a:	bf00      	nop
 800997c:	46bd      	mov	sp, r7
 800997e:	bc80      	pop	{r7}
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	200005c4 	.word	0x200005c4

08009988 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009990:	f000 f852 	bl	8009a38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009994:	4b06      	ldr	r3, [pc, #24]	; (80099b0 <prvIdleTask+0x28>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2b01      	cmp	r3, #1
 800999a:	d9f9      	bls.n	8009990 <prvIdleTask+0x8>
			{
				taskYIELD();
 800999c:	4b05      	ldr	r3, [pc, #20]	; (80099b4 <prvIdleTask+0x2c>)
 800999e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099a2:	601a      	str	r2, [r3, #0]
 80099a4:	f3bf 8f4f 	dsb	sy
 80099a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80099ac:	e7f0      	b.n	8009990 <prvIdleTask+0x8>
 80099ae:	bf00      	nop
 80099b0:	200004b4 	.word	0x200004b4
 80099b4:	e000ed04 	.word	0xe000ed04

080099b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099be:	2300      	movs	r3, #0
 80099c0:	607b      	str	r3, [r7, #4]
 80099c2:	e00c      	b.n	80099de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	4613      	mov	r3, r2
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	4413      	add	r3, r2
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	4a12      	ldr	r2, [pc, #72]	; (8009a18 <prvInitialiseTaskLists+0x60>)
 80099d0:	4413      	add	r3, r2
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fe fcd2 	bl	800837c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	3301      	adds	r3, #1
 80099dc:	607b      	str	r3, [r7, #4]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2b06      	cmp	r3, #6
 80099e2:	d9ef      	bls.n	80099c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80099e4:	480d      	ldr	r0, [pc, #52]	; (8009a1c <prvInitialiseTaskLists+0x64>)
 80099e6:	f7fe fcc9 	bl	800837c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80099ea:	480d      	ldr	r0, [pc, #52]	; (8009a20 <prvInitialiseTaskLists+0x68>)
 80099ec:	f7fe fcc6 	bl	800837c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80099f0:	480c      	ldr	r0, [pc, #48]	; (8009a24 <prvInitialiseTaskLists+0x6c>)
 80099f2:	f7fe fcc3 	bl	800837c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80099f6:	480c      	ldr	r0, [pc, #48]	; (8009a28 <prvInitialiseTaskLists+0x70>)
 80099f8:	f7fe fcc0 	bl	800837c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80099fc:	480b      	ldr	r0, [pc, #44]	; (8009a2c <prvInitialiseTaskLists+0x74>)
 80099fe:	f7fe fcbd 	bl	800837c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a02:	4b0b      	ldr	r3, [pc, #44]	; (8009a30 <prvInitialiseTaskLists+0x78>)
 8009a04:	4a05      	ldr	r2, [pc, #20]	; (8009a1c <prvInitialiseTaskLists+0x64>)
 8009a06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a08:	4b0a      	ldr	r3, [pc, #40]	; (8009a34 <prvInitialiseTaskLists+0x7c>)
 8009a0a:	4a05      	ldr	r2, [pc, #20]	; (8009a20 <prvInitialiseTaskLists+0x68>)
 8009a0c:	601a      	str	r2, [r3, #0]
}
 8009a0e:	bf00      	nop
 8009a10:	3708      	adds	r7, #8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	200004b4 	.word	0x200004b4
 8009a1c:	20000540 	.word	0x20000540
 8009a20:	20000554 	.word	0x20000554
 8009a24:	20000570 	.word	0x20000570
 8009a28:	20000584 	.word	0x20000584
 8009a2c:	2000059c 	.word	0x2000059c
 8009a30:	20000568 	.word	0x20000568
 8009a34:	2000056c 	.word	0x2000056c

08009a38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a3e:	e019      	b.n	8009a74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009a40:	f000 fa7c 	bl	8009f3c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009a44:	4b10      	ldr	r3, [pc, #64]	; (8009a88 <prvCheckTasksWaitingTermination+0x50>)
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	3304      	adds	r3, #4
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7fe fd19 	bl	8008488 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009a56:	4b0d      	ldr	r3, [pc, #52]	; (8009a8c <prvCheckTasksWaitingTermination+0x54>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	4a0b      	ldr	r2, [pc, #44]	; (8009a8c <prvCheckTasksWaitingTermination+0x54>)
 8009a5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009a60:	4b0b      	ldr	r3, [pc, #44]	; (8009a90 <prvCheckTasksWaitingTermination+0x58>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	3b01      	subs	r3, #1
 8009a66:	4a0a      	ldr	r2, [pc, #40]	; (8009a90 <prvCheckTasksWaitingTermination+0x58>)
 8009a68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009a6a:	f000 fa97 	bl	8009f9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f810 	bl	8009a94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a74:	4b06      	ldr	r3, [pc, #24]	; (8009a90 <prvCheckTasksWaitingTermination+0x58>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d1e1      	bne.n	8009a40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009a7c:	bf00      	nop
 8009a7e:	bf00      	nop
 8009a80:	3708      	adds	r7, #8
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	20000584 	.word	0x20000584
 8009a8c:	200005b0 	.word	0x200005b0
 8009a90:	20000598 	.word	0x20000598

08009a94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	334c      	adds	r3, #76	; 0x4c
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f001 f96b 	bl	800ad7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d108      	bne.n	8009ac2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f000 fc05 	bl	800a2c4 <vPortFree>
				vPortFree( pxTCB );
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 fc02 	bl	800a2c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009ac0:	e018      	b.n	8009af4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d103      	bne.n	8009ad4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 fbf9 	bl	800a2c4 <vPortFree>
	}
 8009ad2:	e00f      	b.n	8009af4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009ada:	2b02      	cmp	r3, #2
 8009adc:	d00a      	beq.n	8009af4 <prvDeleteTCB+0x60>
	__asm volatile
 8009ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	60fb      	str	r3, [r7, #12]
}
 8009af0:	bf00      	nop
 8009af2:	e7fe      	b.n	8009af2 <prvDeleteTCB+0x5e>
	}
 8009af4:	bf00      	nop
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b02:	4b0e      	ldr	r3, [pc, #56]	; (8009b3c <prvResetNextTaskUnblockTime+0x40>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d101      	bne.n	8009b10 <prvResetNextTaskUnblockTime+0x14>
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	e000      	b.n	8009b12 <prvResetNextTaskUnblockTime+0x16>
 8009b10:	2300      	movs	r3, #0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d004      	beq.n	8009b20 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b16:	4b0a      	ldr	r3, [pc, #40]	; (8009b40 <prvResetNextTaskUnblockTime+0x44>)
 8009b18:	f04f 32ff 	mov.w	r2, #4294967295
 8009b1c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009b1e:	e008      	b.n	8009b32 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009b20:	4b06      	ldr	r3, [pc, #24]	; (8009b3c <prvResetNextTaskUnblockTime+0x40>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	4a04      	ldr	r2, [pc, #16]	; (8009b40 <prvResetNextTaskUnblockTime+0x44>)
 8009b30:	6013      	str	r3, [r2, #0]
}
 8009b32:	bf00      	nop
 8009b34:	370c      	adds	r7, #12
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bc80      	pop	{r7}
 8009b3a:	4770      	bx	lr
 8009b3c:	20000568 	.word	0x20000568
 8009b40:	200005d0 	.word	0x200005d0

08009b44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009b4a:	4b0b      	ldr	r3, [pc, #44]	; (8009b78 <xTaskGetSchedulerState+0x34>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d102      	bne.n	8009b58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009b52:	2301      	movs	r3, #1
 8009b54:	607b      	str	r3, [r7, #4]
 8009b56:	e008      	b.n	8009b6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b58:	4b08      	ldr	r3, [pc, #32]	; (8009b7c <xTaskGetSchedulerState+0x38>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d102      	bne.n	8009b66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009b60:	2302      	movs	r3, #2
 8009b62:	607b      	str	r3, [r7, #4]
 8009b64:	e001      	b.n	8009b6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009b66:	2300      	movs	r3, #0
 8009b68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009b6a:	687b      	ldr	r3, [r7, #4]
	}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bc80      	pop	{r7}
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	200005bc 	.word	0x200005bc
 8009b7c:	200005d8 	.word	0x200005d8

08009b80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b086      	sub	sp, #24
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d06e      	beq.n	8009c74 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009b96:	4b3a      	ldr	r3, [pc, #232]	; (8009c80 <xTaskPriorityDisinherit+0x100>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d00a      	beq.n	8009bb6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba4:	f383 8811 	msr	BASEPRI, r3
 8009ba8:	f3bf 8f6f 	isb	sy
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	60fb      	str	r3, [r7, #12]
}
 8009bb2:	bf00      	nop
 8009bb4:	e7fe      	b.n	8009bb4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d10a      	bne.n	8009bd4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc2:	f383 8811 	msr	BASEPRI, r3
 8009bc6:	f3bf 8f6f 	isb	sy
 8009bca:	f3bf 8f4f 	dsb	sy
 8009bce:	60bb      	str	r3, [r7, #8]
}
 8009bd0:	bf00      	nop
 8009bd2:	e7fe      	b.n	8009bd2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bd8:	1e5a      	subs	r2, r3, #1
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d044      	beq.n	8009c74 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d140      	bne.n	8009c74 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	3304      	adds	r3, #4
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7fe fc46 	bl	8008488 <uxListRemove>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d115      	bne.n	8009c2e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c06:	491f      	ldr	r1, [pc, #124]	; (8009c84 <xTaskPriorityDisinherit+0x104>)
 8009c08:	4613      	mov	r3, r2
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	4413      	add	r3, r2
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	440b      	add	r3, r1
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d10a      	bne.n	8009c2e <xTaskPriorityDisinherit+0xae>
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c22:	43da      	mvns	r2, r3
 8009c24:	4b18      	ldr	r3, [pc, #96]	; (8009c88 <xTaskPriorityDisinherit+0x108>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4013      	ands	r3, r2
 8009c2a:	4a17      	ldr	r2, [pc, #92]	; (8009c88 <xTaskPriorityDisinherit+0x108>)
 8009c2c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3a:	f1c3 0207 	rsb	r2, r3, #7
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c46:	2201      	movs	r2, #1
 8009c48:	409a      	lsls	r2, r3
 8009c4a:	4b0f      	ldr	r3, [pc, #60]	; (8009c88 <xTaskPriorityDisinherit+0x108>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	4a0d      	ldr	r2, [pc, #52]	; (8009c88 <xTaskPriorityDisinherit+0x108>)
 8009c52:	6013      	str	r3, [r2, #0]
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c58:	4613      	mov	r3, r2
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	4413      	add	r3, r2
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	4a08      	ldr	r2, [pc, #32]	; (8009c84 <xTaskPriorityDisinherit+0x104>)
 8009c62:	441a      	add	r2, r3
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	3304      	adds	r3, #4
 8009c68:	4619      	mov	r1, r3
 8009c6a:	4610      	mov	r0, r2
 8009c6c:	f7fe fbb1 	bl	80083d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009c70:	2301      	movs	r3, #1
 8009c72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c74:	697b      	ldr	r3, [r7, #20]
	}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3718      	adds	r7, #24
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	200004b0 	.word	0x200004b0
 8009c84:	200004b4 	.word	0x200004b4
 8009c88:	200005b8 	.word	0x200005b8

08009c8c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009c96:	4b29      	ldr	r3, [pc, #164]	; (8009d3c <prvAddCurrentTaskToDelayedList+0xb0>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c9c:	4b28      	ldr	r3, [pc, #160]	; (8009d40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	3304      	adds	r3, #4
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7fe fbf0 	bl	8008488 <uxListRemove>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d10b      	bne.n	8009cc6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009cae:	4b24      	ldr	r3, [pc, #144]	; (8009d40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8009cba:	43da      	mvns	r2, r3
 8009cbc:	4b21      	ldr	r3, [pc, #132]	; (8009d44 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4013      	ands	r3, r2
 8009cc2:	4a20      	ldr	r2, [pc, #128]	; (8009d44 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009cc4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ccc:	d10a      	bne.n	8009ce4 <prvAddCurrentTaskToDelayedList+0x58>
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d007      	beq.n	8009ce4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cd4:	4b1a      	ldr	r3, [pc, #104]	; (8009d40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	3304      	adds	r3, #4
 8009cda:	4619      	mov	r1, r3
 8009cdc:	481a      	ldr	r0, [pc, #104]	; (8009d48 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009cde:	f7fe fb78 	bl	80083d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ce2:	e026      	b.n	8009d32 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ce4:	68fa      	ldr	r2, [r7, #12]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4413      	add	r3, r2
 8009cea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009cec:	4b14      	ldr	r3, [pc, #80]	; (8009d40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009cf4:	68ba      	ldr	r2, [r7, #8]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d209      	bcs.n	8009d10 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cfc:	4b13      	ldr	r3, [pc, #76]	; (8009d4c <prvAddCurrentTaskToDelayedList+0xc0>)
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	4b0f      	ldr	r3, [pc, #60]	; (8009d40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	3304      	adds	r3, #4
 8009d06:	4619      	mov	r1, r3
 8009d08:	4610      	mov	r0, r2
 8009d0a:	f7fe fb85 	bl	8008418 <vListInsert>
}
 8009d0e:	e010      	b.n	8009d32 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d10:	4b0f      	ldr	r3, [pc, #60]	; (8009d50 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	4b0a      	ldr	r3, [pc, #40]	; (8009d40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	3304      	adds	r3, #4
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	4610      	mov	r0, r2
 8009d1e:	f7fe fb7b 	bl	8008418 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009d22:	4b0c      	ldr	r3, [pc, #48]	; (8009d54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	68ba      	ldr	r2, [r7, #8]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d202      	bcs.n	8009d32 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009d2c:	4a09      	ldr	r2, [pc, #36]	; (8009d54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	6013      	str	r3, [r2, #0]
}
 8009d32:	bf00      	nop
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	200005b4 	.word	0x200005b4
 8009d40:	200004b0 	.word	0x200004b0
 8009d44:	200005b8 	.word	0x200005b8
 8009d48:	2000059c 	.word	0x2000059c
 8009d4c:	2000056c 	.word	0x2000056c
 8009d50:	20000568 	.word	0x20000568
 8009d54:	200005d0 	.word	0x200005d0

08009d58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b085      	sub	sp, #20
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	3b04      	subs	r3, #4
 8009d68:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009d70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	3b04      	subs	r3, #4
 8009d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	f023 0201 	bic.w	r2, r3, #1
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	3b04      	subs	r3, #4
 8009d86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009d88:	4a08      	ldr	r2, [pc, #32]	; (8009dac <pxPortInitialiseStack+0x54>)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	3b14      	subs	r3, #20
 8009d92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	3b20      	subs	r3, #32
 8009d9e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009da0:	68fb      	ldr	r3, [r7, #12]
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3714      	adds	r7, #20
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bc80      	pop	{r7}
 8009daa:	4770      	bx	lr
 8009dac:	08009db1 	.word	0x08009db1

08009db0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009db0:	b480      	push	{r7}
 8009db2:	b085      	sub	sp, #20
 8009db4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009db6:	2300      	movs	r3, #0
 8009db8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009dba:	4b12      	ldr	r3, [pc, #72]	; (8009e04 <prvTaskExitError+0x54>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc2:	d00a      	beq.n	8009dda <prvTaskExitError+0x2a>
	__asm volatile
 8009dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc8:	f383 8811 	msr	BASEPRI, r3
 8009dcc:	f3bf 8f6f 	isb	sy
 8009dd0:	f3bf 8f4f 	dsb	sy
 8009dd4:	60fb      	str	r3, [r7, #12]
}
 8009dd6:	bf00      	nop
 8009dd8:	e7fe      	b.n	8009dd8 <prvTaskExitError+0x28>
	__asm volatile
 8009dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dde:	f383 8811 	msr	BASEPRI, r3
 8009de2:	f3bf 8f6f 	isb	sy
 8009de6:	f3bf 8f4f 	dsb	sy
 8009dea:	60bb      	str	r3, [r7, #8]
}
 8009dec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009dee:	bf00      	nop
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d0fc      	beq.n	8009df0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009df6:	bf00      	nop
 8009df8:	bf00      	nop
 8009dfa:	3714      	adds	r7, #20
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bc80      	pop	{r7}
 8009e00:	4770      	bx	lr
 8009e02:	bf00      	nop
 8009e04:	2000002c 	.word	0x2000002c
	...

08009e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009e10:	4b07      	ldr	r3, [pc, #28]	; (8009e30 <pxCurrentTCBConst2>)
 8009e12:	6819      	ldr	r1, [r3, #0]
 8009e14:	6808      	ldr	r0, [r1, #0]
 8009e16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009e1a:	f380 8809 	msr	PSP, r0
 8009e1e:	f3bf 8f6f 	isb	sy
 8009e22:	f04f 0000 	mov.w	r0, #0
 8009e26:	f380 8811 	msr	BASEPRI, r0
 8009e2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8009e2e:	4770      	bx	lr

08009e30 <pxCurrentTCBConst2>:
 8009e30:	200004b0 	.word	0x200004b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009e34:	bf00      	nop
 8009e36:	bf00      	nop

08009e38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009e38:	4806      	ldr	r0, [pc, #24]	; (8009e54 <prvPortStartFirstTask+0x1c>)
 8009e3a:	6800      	ldr	r0, [r0, #0]
 8009e3c:	6800      	ldr	r0, [r0, #0]
 8009e3e:	f380 8808 	msr	MSP, r0
 8009e42:	b662      	cpsie	i
 8009e44:	b661      	cpsie	f
 8009e46:	f3bf 8f4f 	dsb	sy
 8009e4a:	f3bf 8f6f 	isb	sy
 8009e4e:	df00      	svc	0
 8009e50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009e52:	bf00      	nop
 8009e54:	e000ed08 	.word	0xe000ed08

08009e58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009e5e:	4b32      	ldr	r3, [pc, #200]	; (8009f28 <xPortStartScheduler+0xd0>)
 8009e60:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	22ff      	movs	r2, #255	; 0xff
 8009e6e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e78:	78fb      	ldrb	r3, [r7, #3]
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009e80:	b2da      	uxtb	r2, r3
 8009e82:	4b2a      	ldr	r3, [pc, #168]	; (8009f2c <xPortStartScheduler+0xd4>)
 8009e84:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e86:	4b2a      	ldr	r3, [pc, #168]	; (8009f30 <xPortStartScheduler+0xd8>)
 8009e88:	2207      	movs	r2, #7
 8009e8a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e8c:	e009      	b.n	8009ea2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009e8e:	4b28      	ldr	r3, [pc, #160]	; (8009f30 <xPortStartScheduler+0xd8>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	3b01      	subs	r3, #1
 8009e94:	4a26      	ldr	r2, [pc, #152]	; (8009f30 <xPortStartScheduler+0xd8>)
 8009e96:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e98:	78fb      	ldrb	r3, [r7, #3]
 8009e9a:	b2db      	uxtb	r3, r3
 8009e9c:	005b      	lsls	r3, r3, #1
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ea2:	78fb      	ldrb	r3, [r7, #3]
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eaa:	2b80      	cmp	r3, #128	; 0x80
 8009eac:	d0ef      	beq.n	8009e8e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009eae:	4b20      	ldr	r3, [pc, #128]	; (8009f30 <xPortStartScheduler+0xd8>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f1c3 0307 	rsb	r3, r3, #7
 8009eb6:	2b04      	cmp	r3, #4
 8009eb8:	d00a      	beq.n	8009ed0 <xPortStartScheduler+0x78>
	__asm volatile
 8009eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ebe:	f383 8811 	msr	BASEPRI, r3
 8009ec2:	f3bf 8f6f 	isb	sy
 8009ec6:	f3bf 8f4f 	dsb	sy
 8009eca:	60bb      	str	r3, [r7, #8]
}
 8009ecc:	bf00      	nop
 8009ece:	e7fe      	b.n	8009ece <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ed0:	4b17      	ldr	r3, [pc, #92]	; (8009f30 <xPortStartScheduler+0xd8>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	021b      	lsls	r3, r3, #8
 8009ed6:	4a16      	ldr	r2, [pc, #88]	; (8009f30 <xPortStartScheduler+0xd8>)
 8009ed8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009eda:	4b15      	ldr	r3, [pc, #84]	; (8009f30 <xPortStartScheduler+0xd8>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ee2:	4a13      	ldr	r2, [pc, #76]	; (8009f30 <xPortStartScheduler+0xd8>)
 8009ee4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	b2da      	uxtb	r2, r3
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009eee:	4b11      	ldr	r3, [pc, #68]	; (8009f34 <xPortStartScheduler+0xdc>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a10      	ldr	r2, [pc, #64]	; (8009f34 <xPortStartScheduler+0xdc>)
 8009ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009ef8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009efa:	4b0e      	ldr	r3, [pc, #56]	; (8009f34 <xPortStartScheduler+0xdc>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a0d      	ldr	r2, [pc, #52]	; (8009f34 <xPortStartScheduler+0xdc>)
 8009f00:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009f04:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009f06:	f000 f8b9 	bl	800a07c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009f0a:	4b0b      	ldr	r3, [pc, #44]	; (8009f38 <xPortStartScheduler+0xe0>)
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009f10:	f7ff ff92 	bl	8009e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009f14:	f7ff fbcc 	bl	80096b0 <vTaskSwitchContext>
	prvTaskExitError();
 8009f18:	f7ff ff4a 	bl	8009db0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009f1c:	2300      	movs	r3, #0
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3710      	adds	r7, #16
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	e000e400 	.word	0xe000e400
 8009f2c:	200005dc 	.word	0x200005dc
 8009f30:	200005e0 	.word	0x200005e0
 8009f34:	e000ed20 	.word	0xe000ed20
 8009f38:	2000002c 	.word	0x2000002c

08009f3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
	__asm volatile
 8009f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f46:	f383 8811 	msr	BASEPRI, r3
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	607b      	str	r3, [r7, #4]
}
 8009f54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009f56:	4b0f      	ldr	r3, [pc, #60]	; (8009f94 <vPortEnterCritical+0x58>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	4a0d      	ldr	r2, [pc, #52]	; (8009f94 <vPortEnterCritical+0x58>)
 8009f5e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009f60:	4b0c      	ldr	r3, [pc, #48]	; (8009f94 <vPortEnterCritical+0x58>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d10f      	bne.n	8009f88 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f68:	4b0b      	ldr	r3, [pc, #44]	; (8009f98 <vPortEnterCritical+0x5c>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d00a      	beq.n	8009f88 <vPortEnterCritical+0x4c>
	__asm volatile
 8009f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f76:	f383 8811 	msr	BASEPRI, r3
 8009f7a:	f3bf 8f6f 	isb	sy
 8009f7e:	f3bf 8f4f 	dsb	sy
 8009f82:	603b      	str	r3, [r7, #0]
}
 8009f84:	bf00      	nop
 8009f86:	e7fe      	b.n	8009f86 <vPortEnterCritical+0x4a>
	}
}
 8009f88:	bf00      	nop
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bc80      	pop	{r7}
 8009f90:	4770      	bx	lr
 8009f92:	bf00      	nop
 8009f94:	2000002c 	.word	0x2000002c
 8009f98:	e000ed04 	.word	0xe000ed04

08009f9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009fa2:	4b11      	ldr	r3, [pc, #68]	; (8009fe8 <vPortExitCritical+0x4c>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d10a      	bne.n	8009fc0 <vPortExitCritical+0x24>
	__asm volatile
 8009faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fae:	f383 8811 	msr	BASEPRI, r3
 8009fb2:	f3bf 8f6f 	isb	sy
 8009fb6:	f3bf 8f4f 	dsb	sy
 8009fba:	607b      	str	r3, [r7, #4]
}
 8009fbc:	bf00      	nop
 8009fbe:	e7fe      	b.n	8009fbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009fc0:	4b09      	ldr	r3, [pc, #36]	; (8009fe8 <vPortExitCritical+0x4c>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	3b01      	subs	r3, #1
 8009fc6:	4a08      	ldr	r2, [pc, #32]	; (8009fe8 <vPortExitCritical+0x4c>)
 8009fc8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009fca:	4b07      	ldr	r3, [pc, #28]	; (8009fe8 <vPortExitCritical+0x4c>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d105      	bne.n	8009fde <vPortExitCritical+0x42>
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	f383 8811 	msr	BASEPRI, r3
}
 8009fdc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009fde:	bf00      	nop
 8009fe0:	370c      	adds	r7, #12
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bc80      	pop	{r7}
 8009fe6:	4770      	bx	lr
 8009fe8:	2000002c 	.word	0x2000002c
 8009fec:	00000000 	.word	0x00000000

08009ff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ff0:	f3ef 8009 	mrs	r0, PSP
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	4b0d      	ldr	r3, [pc, #52]	; (800a030 <pxCurrentTCBConst>)
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a000:	6010      	str	r0, [r2, #0]
 800a002:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a006:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a00a:	f380 8811 	msr	BASEPRI, r0
 800a00e:	f7ff fb4f 	bl	80096b0 <vTaskSwitchContext>
 800a012:	f04f 0000 	mov.w	r0, #0
 800a016:	f380 8811 	msr	BASEPRI, r0
 800a01a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a01e:	6819      	ldr	r1, [r3, #0]
 800a020:	6808      	ldr	r0, [r1, #0]
 800a022:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a026:	f380 8809 	msr	PSP, r0
 800a02a:	f3bf 8f6f 	isb	sy
 800a02e:	4770      	bx	lr

0800a030 <pxCurrentTCBConst>:
 800a030:	200004b0 	.word	0x200004b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a034:	bf00      	nop
 800a036:	bf00      	nop

0800a038 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
	__asm volatile
 800a03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a042:	f383 8811 	msr	BASEPRI, r3
 800a046:	f3bf 8f6f 	isb	sy
 800a04a:	f3bf 8f4f 	dsb	sy
 800a04e:	607b      	str	r3, [r7, #4]
}
 800a050:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a052:	f7ff fa6f 	bl	8009534 <xTaskIncrementTick>
 800a056:	4603      	mov	r3, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d003      	beq.n	800a064 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a05c:	4b06      	ldr	r3, [pc, #24]	; (800a078 <SysTick_Handler+0x40>)
 800a05e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a062:	601a      	str	r2, [r3, #0]
 800a064:	2300      	movs	r3, #0
 800a066:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	f383 8811 	msr	BASEPRI, r3
}
 800a06e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a070:	bf00      	nop
 800a072:	3708      	adds	r7, #8
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	e000ed04 	.word	0xe000ed04

0800a07c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a07c:	b480      	push	{r7}
 800a07e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a080:	4b0a      	ldr	r3, [pc, #40]	; (800a0ac <vPortSetupTimerInterrupt+0x30>)
 800a082:	2200      	movs	r2, #0
 800a084:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a086:	4b0a      	ldr	r3, [pc, #40]	; (800a0b0 <vPortSetupTimerInterrupt+0x34>)
 800a088:	2200      	movs	r2, #0
 800a08a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a08c:	4b09      	ldr	r3, [pc, #36]	; (800a0b4 <vPortSetupTimerInterrupt+0x38>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a09      	ldr	r2, [pc, #36]	; (800a0b8 <vPortSetupTimerInterrupt+0x3c>)
 800a092:	fba2 2303 	umull	r2, r3, r2, r3
 800a096:	099b      	lsrs	r3, r3, #6
 800a098:	4a08      	ldr	r2, [pc, #32]	; (800a0bc <vPortSetupTimerInterrupt+0x40>)
 800a09a:	3b01      	subs	r3, #1
 800a09c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a09e:	4b03      	ldr	r3, [pc, #12]	; (800a0ac <vPortSetupTimerInterrupt+0x30>)
 800a0a0:	2207      	movs	r2, #7
 800a0a2:	601a      	str	r2, [r3, #0]
}
 800a0a4:	bf00      	nop
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bc80      	pop	{r7}
 800a0aa:	4770      	bx	lr
 800a0ac:	e000e010 	.word	0xe000e010
 800a0b0:	e000e018 	.word	0xe000e018
 800a0b4:	20000000 	.word	0x20000000
 800a0b8:	10624dd3 	.word	0x10624dd3
 800a0bc:	e000e014 	.word	0xe000e014

0800a0c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a0c6:	f3ef 8305 	mrs	r3, IPSR
 800a0ca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2b0f      	cmp	r3, #15
 800a0d0:	d914      	bls.n	800a0fc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a0d2:	4a16      	ldr	r2, [pc, #88]	; (800a12c <vPortValidateInterruptPriority+0x6c>)
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a0dc:	4b14      	ldr	r3, [pc, #80]	; (800a130 <vPortValidateInterruptPriority+0x70>)
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	7afa      	ldrb	r2, [r7, #11]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d20a      	bcs.n	800a0fc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ea:	f383 8811 	msr	BASEPRI, r3
 800a0ee:	f3bf 8f6f 	isb	sy
 800a0f2:	f3bf 8f4f 	dsb	sy
 800a0f6:	607b      	str	r3, [r7, #4]
}
 800a0f8:	bf00      	nop
 800a0fa:	e7fe      	b.n	800a0fa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a0fc:	4b0d      	ldr	r3, [pc, #52]	; (800a134 <vPortValidateInterruptPriority+0x74>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a104:	4b0c      	ldr	r3, [pc, #48]	; (800a138 <vPortValidateInterruptPriority+0x78>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d90a      	bls.n	800a122 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a110:	f383 8811 	msr	BASEPRI, r3
 800a114:	f3bf 8f6f 	isb	sy
 800a118:	f3bf 8f4f 	dsb	sy
 800a11c:	603b      	str	r3, [r7, #0]
}
 800a11e:	bf00      	nop
 800a120:	e7fe      	b.n	800a120 <vPortValidateInterruptPriority+0x60>
	}
 800a122:	bf00      	nop
 800a124:	3714      	adds	r7, #20
 800a126:	46bd      	mov	sp, r7
 800a128:	bc80      	pop	{r7}
 800a12a:	4770      	bx	lr
 800a12c:	e000e3f0 	.word	0xe000e3f0
 800a130:	200005dc 	.word	0x200005dc
 800a134:	e000ed0c 	.word	0xe000ed0c
 800a138:	200005e0 	.word	0x200005e0

0800a13c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b08a      	sub	sp, #40	; 0x28
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a144:	2300      	movs	r3, #0
 800a146:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a148:	f7ff f94a 	bl	80093e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a14c:	4b58      	ldr	r3, [pc, #352]	; (800a2b0 <pvPortMalloc+0x174>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d101      	bne.n	800a158 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a154:	f000 f910 	bl	800a378 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a158:	4b56      	ldr	r3, [pc, #344]	; (800a2b4 <pvPortMalloc+0x178>)
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4013      	ands	r3, r2
 800a160:	2b00      	cmp	r3, #0
 800a162:	f040 808e 	bne.w	800a282 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d01d      	beq.n	800a1a8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a16c:	2208      	movs	r2, #8
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	4413      	add	r3, r2
 800a172:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f003 0307 	and.w	r3, r3, #7
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d014      	beq.n	800a1a8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f023 0307 	bic.w	r3, r3, #7
 800a184:	3308      	adds	r3, #8
 800a186:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f003 0307 	and.w	r3, r3, #7
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d00a      	beq.n	800a1a8 <pvPortMalloc+0x6c>
	__asm volatile
 800a192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a196:	f383 8811 	msr	BASEPRI, r3
 800a19a:	f3bf 8f6f 	isb	sy
 800a19e:	f3bf 8f4f 	dsb	sy
 800a1a2:	617b      	str	r3, [r7, #20]
}
 800a1a4:	bf00      	nop
 800a1a6:	e7fe      	b.n	800a1a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d069      	beq.n	800a282 <pvPortMalloc+0x146>
 800a1ae:	4b42      	ldr	r3, [pc, #264]	; (800a2b8 <pvPortMalloc+0x17c>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d864      	bhi.n	800a282 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a1b8:	4b40      	ldr	r3, [pc, #256]	; (800a2bc <pvPortMalloc+0x180>)
 800a1ba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a1bc:	4b3f      	ldr	r3, [pc, #252]	; (800a2bc <pvPortMalloc+0x180>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1c2:	e004      	b.n	800a1ce <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d903      	bls.n	800a1e0 <pvPortMalloc+0xa4>
 800a1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d1f1      	bne.n	800a1c4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a1e0:	4b33      	ldr	r3, [pc, #204]	; (800a2b0 <pvPortMalloc+0x174>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d04b      	beq.n	800a282 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a1ea:	6a3b      	ldr	r3, [r7, #32]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2208      	movs	r2, #8
 800a1f0:	4413      	add	r3, r2
 800a1f2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	6a3b      	ldr	r3, [r7, #32]
 800a1fa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fe:	685a      	ldr	r2, [r3, #4]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	1ad2      	subs	r2, r2, r3
 800a204:	2308      	movs	r3, #8
 800a206:	005b      	lsls	r3, r3, #1
 800a208:	429a      	cmp	r2, r3
 800a20a:	d91f      	bls.n	800a24c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a20c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	4413      	add	r3, r2
 800a212:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	f003 0307 	and.w	r3, r3, #7
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00a      	beq.n	800a234 <pvPortMalloc+0xf8>
	__asm volatile
 800a21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a222:	f383 8811 	msr	BASEPRI, r3
 800a226:	f3bf 8f6f 	isb	sy
 800a22a:	f3bf 8f4f 	dsb	sy
 800a22e:	613b      	str	r3, [r7, #16]
}
 800a230:	bf00      	nop
 800a232:	e7fe      	b.n	800a232 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a236:	685a      	ldr	r2, [r3, #4]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	1ad2      	subs	r2, r2, r3
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a246:	69b8      	ldr	r0, [r7, #24]
 800a248:	f000 f8f8 	bl	800a43c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a24c:	4b1a      	ldr	r3, [pc, #104]	; (800a2b8 <pvPortMalloc+0x17c>)
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	1ad3      	subs	r3, r2, r3
 800a256:	4a18      	ldr	r2, [pc, #96]	; (800a2b8 <pvPortMalloc+0x17c>)
 800a258:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a25a:	4b17      	ldr	r3, [pc, #92]	; (800a2b8 <pvPortMalloc+0x17c>)
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	4b18      	ldr	r3, [pc, #96]	; (800a2c0 <pvPortMalloc+0x184>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	429a      	cmp	r2, r3
 800a264:	d203      	bcs.n	800a26e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a266:	4b14      	ldr	r3, [pc, #80]	; (800a2b8 <pvPortMalloc+0x17c>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a15      	ldr	r2, [pc, #84]	; (800a2c0 <pvPortMalloc+0x184>)
 800a26c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a270:	685a      	ldr	r2, [r3, #4]
 800a272:	4b10      	ldr	r3, [pc, #64]	; (800a2b4 <pvPortMalloc+0x178>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	431a      	orrs	r2, r3
 800a278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27e:	2200      	movs	r2, #0
 800a280:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a282:	f7ff f8bb 	bl	80093fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	f003 0307 	and.w	r3, r3, #7
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d00a      	beq.n	800a2a6 <pvPortMalloc+0x16a>
	__asm volatile
 800a290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a294:	f383 8811 	msr	BASEPRI, r3
 800a298:	f3bf 8f6f 	isb	sy
 800a29c:	f3bf 8f4f 	dsb	sy
 800a2a0:	60fb      	str	r3, [r7, #12]
}
 800a2a2:	bf00      	nop
 800a2a4:	e7fe      	b.n	800a2a4 <pvPortMalloc+0x168>
	return pvReturn;
 800a2a6:	69fb      	ldr	r3, [r7, #28]
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3728      	adds	r7, #40	; 0x28
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	200034cc 	.word	0x200034cc
 800a2b4:	200034d8 	.word	0x200034d8
 800a2b8:	200034d0 	.word	0x200034d0
 800a2bc:	200034c4 	.word	0x200034c4
 800a2c0:	200034d4 	.word	0x200034d4

0800a2c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b086      	sub	sp, #24
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d048      	beq.n	800a368 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a2d6:	2308      	movs	r3, #8
 800a2d8:	425b      	negs	r3, r3
 800a2da:	697a      	ldr	r2, [r7, #20]
 800a2dc:	4413      	add	r3, r2
 800a2de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	685a      	ldr	r2, [r3, #4]
 800a2e8:	4b21      	ldr	r3, [pc, #132]	; (800a370 <vPortFree+0xac>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4013      	ands	r3, r2
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d10a      	bne.n	800a308 <vPortFree+0x44>
	__asm volatile
 800a2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	60fb      	str	r3, [r7, #12]
}
 800a304:	bf00      	nop
 800a306:	e7fe      	b.n	800a306 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d00a      	beq.n	800a326 <vPortFree+0x62>
	__asm volatile
 800a310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a314:	f383 8811 	msr	BASEPRI, r3
 800a318:	f3bf 8f6f 	isb	sy
 800a31c:	f3bf 8f4f 	dsb	sy
 800a320:	60bb      	str	r3, [r7, #8]
}
 800a322:	bf00      	nop
 800a324:	e7fe      	b.n	800a324 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	685a      	ldr	r2, [r3, #4]
 800a32a:	4b11      	ldr	r3, [pc, #68]	; (800a370 <vPortFree+0xac>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4013      	ands	r3, r2
 800a330:	2b00      	cmp	r3, #0
 800a332:	d019      	beq.n	800a368 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d115      	bne.n	800a368 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	685a      	ldr	r2, [r3, #4]
 800a340:	4b0b      	ldr	r3, [pc, #44]	; (800a370 <vPortFree+0xac>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	43db      	mvns	r3, r3
 800a346:	401a      	ands	r2, r3
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a34c:	f7ff f848 	bl	80093e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	685a      	ldr	r2, [r3, #4]
 800a354:	4b07      	ldr	r3, [pc, #28]	; (800a374 <vPortFree+0xb0>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4413      	add	r3, r2
 800a35a:	4a06      	ldr	r2, [pc, #24]	; (800a374 <vPortFree+0xb0>)
 800a35c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a35e:	6938      	ldr	r0, [r7, #16]
 800a360:	f000 f86c 	bl	800a43c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a364:	f7ff f84a 	bl	80093fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a368:	bf00      	nop
 800a36a:	3718      	adds	r7, #24
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	200034d8 	.word	0x200034d8
 800a374:	200034d0 	.word	0x200034d0

0800a378 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a37e:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800a382:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a384:	4b27      	ldr	r3, [pc, #156]	; (800a424 <prvHeapInit+0xac>)
 800a386:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f003 0307 	and.w	r3, r3, #7
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d00c      	beq.n	800a3ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	3307      	adds	r3, #7
 800a396:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f023 0307 	bic.w	r3, r3, #7
 800a39e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a3a0:	68ba      	ldr	r2, [r7, #8]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	1ad3      	subs	r3, r2, r3
 800a3a6:	4a1f      	ldr	r2, [pc, #124]	; (800a424 <prvHeapInit+0xac>)
 800a3a8:	4413      	add	r3, r2
 800a3aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a3b0:	4a1d      	ldr	r2, [pc, #116]	; (800a428 <prvHeapInit+0xb0>)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a3b6:	4b1c      	ldr	r3, [pc, #112]	; (800a428 <prvHeapInit+0xb0>)
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	68ba      	ldr	r2, [r7, #8]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a3c4:	2208      	movs	r2, #8
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	1a9b      	subs	r3, r3, r2
 800a3ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f023 0307 	bic.w	r3, r3, #7
 800a3d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	4a15      	ldr	r2, [pc, #84]	; (800a42c <prvHeapInit+0xb4>)
 800a3d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a3da:	4b14      	ldr	r3, [pc, #80]	; (800a42c <prvHeapInit+0xb4>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a3e2:	4b12      	ldr	r3, [pc, #72]	; (800a42c <prvHeapInit+0xb4>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	68fa      	ldr	r2, [r7, #12]
 800a3f2:	1ad2      	subs	r2, r2, r3
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a3f8:	4b0c      	ldr	r3, [pc, #48]	; (800a42c <prvHeapInit+0xb4>)
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	4a0a      	ldr	r2, [pc, #40]	; (800a430 <prvHeapInit+0xb8>)
 800a406:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	4a09      	ldr	r2, [pc, #36]	; (800a434 <prvHeapInit+0xbc>)
 800a40e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a410:	4b09      	ldr	r3, [pc, #36]	; (800a438 <prvHeapInit+0xc0>)
 800a412:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a416:	601a      	str	r2, [r3, #0]
}
 800a418:	bf00      	nop
 800a41a:	3714      	adds	r7, #20
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bc80      	pop	{r7}
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	200005e4 	.word	0x200005e4
 800a428:	200034c4 	.word	0x200034c4
 800a42c:	200034cc 	.word	0x200034cc
 800a430:	200034d4 	.word	0x200034d4
 800a434:	200034d0 	.word	0x200034d0
 800a438:	200034d8 	.word	0x200034d8

0800a43c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a43c:	b480      	push	{r7}
 800a43e:	b085      	sub	sp, #20
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a444:	4b27      	ldr	r3, [pc, #156]	; (800a4e4 <prvInsertBlockIntoFreeList+0xa8>)
 800a446:	60fb      	str	r3, [r7, #12]
 800a448:	e002      	b.n	800a450 <prvInsertBlockIntoFreeList+0x14>
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	60fb      	str	r3, [r7, #12]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	429a      	cmp	r2, r3
 800a458:	d8f7      	bhi.n	800a44a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	68ba      	ldr	r2, [r7, #8]
 800a464:	4413      	add	r3, r2
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	429a      	cmp	r2, r3
 800a46a:	d108      	bne.n	800a47e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	685a      	ldr	r2, [r3, #4]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	441a      	add	r2, r3
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	68ba      	ldr	r2, [r7, #8]
 800a488:	441a      	add	r2, r3
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	429a      	cmp	r2, r3
 800a490:	d118      	bne.n	800a4c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	4b14      	ldr	r3, [pc, #80]	; (800a4e8 <prvInsertBlockIntoFreeList+0xac>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d00d      	beq.n	800a4ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	685a      	ldr	r2, [r3, #4]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	441a      	add	r2, r3
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	601a      	str	r2, [r3, #0]
 800a4b8:	e008      	b.n	800a4cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a4ba:	4b0b      	ldr	r3, [pc, #44]	; (800a4e8 <prvInsertBlockIntoFreeList+0xac>)
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	601a      	str	r2, [r3, #0]
 800a4c2:	e003      	b.n	800a4cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a4cc:	68fa      	ldr	r2, [r7, #12]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d002      	beq.n	800a4da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4da:	bf00      	nop
 800a4dc:	3714      	adds	r7, #20
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bc80      	pop	{r7}
 800a4e2:	4770      	bx	lr
 800a4e4:	200034c4 	.word	0x200034c4
 800a4e8:	200034cc 	.word	0x200034cc

0800a4ec <send_function>:
/*
 * -- Insert your variables declaration here --
 */
/* USER CODE BEGIN 0 */

void send_function(){
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	af00      	add	r7, sp, #0
	 if(Appli_state == APPLICATION_READY ){
 800a4f0:	4b05      	ldr	r3, [pc, #20]	; (800a508 <send_function+0x1c>)
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	2b02      	cmp	r3, #2
 800a4f6:	d104      	bne.n	800a502 <send_function+0x16>
		USBH_CDC_Transmit(&hUsbHostFS,read_info,6);
 800a4f8:	2206      	movs	r2, #6
 800a4fa:	4904      	ldr	r1, [pc, #16]	; (800a50c <send_function+0x20>)
 800a4fc:	4804      	ldr	r0, [pc, #16]	; (800a510 <send_function+0x24>)
 800a4fe:	f7fc f819 	bl	8006534 <USBH_CDC_Transmit>
	  }
}
 800a502:	bf00      	nop
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	200038d0 	.word	0x200038d0
 800a50c:	20000030 	.word	0x20000030
 800a510:	200034f0 	.word	0x200034f0

0800a514 <USBH_CDC_TransmitCallback>:
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */

void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  USBH_CDC_Receive(phost,usb_rx_buf,1);
 800a51c:	2201      	movs	r2, #1
 800a51e:	4904      	ldr	r1, [pc, #16]	; (800a530 <USBH_CDC_TransmitCallback+0x1c>)
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f7fc f841 	bl	80065a8 <USBH_CDC_Receive>
}
 800a526:	bf00      	nop
 800a528:	3708      	adds	r7, #8
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	200034dc 	.word	0x200034dc

0800a534 <USBH_CDC_ReceiveCallback>:

void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit_IT(&huart1,usb_rx_buf,1);
 800a53c:	2201      	movs	r2, #1
 800a53e:	4906      	ldr	r1, [pc, #24]	; (800a558 <USBH_CDC_ReceiveCallback+0x24>)
 800a540:	4806      	ldr	r0, [pc, #24]	; (800a55c <USBH_CDC_ReceiveCallback+0x28>)
 800a542:	f7fa fa8a 	bl	8004a5a <HAL_UART_Transmit_IT>
  USBH_CDC_Receive(phost,usb_rx_buf,1);
 800a546:	2201      	movs	r2, #1
 800a548:	4903      	ldr	r1, [pc, #12]	; (800a558 <USBH_CDC_ReceiveCallback+0x24>)
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f7fc f82c 	bl	80065a8 <USBH_CDC_Receive>
}
 800a550:	bf00      	nop
 800a552:	3708      	adds	r7, #8
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	200034dc 	.word	0x200034dc
 800a55c:	2000040c 	.word	0x2000040c

0800a560 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a564:	2201      	movs	r2, #1
 800a566:	490e      	ldr	r1, [pc, #56]	; (800a5a0 <MX_USB_HOST_Init+0x40>)
 800a568:	480e      	ldr	r0, [pc, #56]	; (800a5a4 <MX_USB_HOST_Init+0x44>)
 800a56a:	f7fc f95b 	bl	8006824 <USBH_Init>
 800a56e:	4603      	mov	r3, r0
 800a570:	2b00      	cmp	r3, #0
 800a572:	d001      	beq.n	800a578 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a574:	f7f6 fa74 	bl	8000a60 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a578:	490b      	ldr	r1, [pc, #44]	; (800a5a8 <MX_USB_HOST_Init+0x48>)
 800a57a:	480a      	ldr	r0, [pc, #40]	; (800a5a4 <MX_USB_HOST_Init+0x44>)
 800a57c:	f7fc f9ff 	bl	800697e <USBH_RegisterClass>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	d001      	beq.n	800a58a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a586:	f7f6 fa6b 	bl	8000a60 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a58a:	4806      	ldr	r0, [pc, #24]	; (800a5a4 <MX_USB_HOST_Init+0x44>)
 800a58c:	f7fc fa81 	bl	8006a92 <USBH_Start>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d001      	beq.n	800a59a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a596:	f7f6 fa63 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a59a:	bf00      	nop
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	0800a5ad 	.word	0x0800a5ad
 800a5a4:	200034f0 	.word	0x200034f0
 800a5a8:	2000000c 	.word	0x2000000c

0800a5ac <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a5b8:	78fb      	ldrb	r3, [r7, #3]
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	2b04      	cmp	r3, #4
 800a5be:	d82e      	bhi.n	800a61e <USBH_UserProcess+0x72>
 800a5c0:	a201      	add	r2, pc, #4	; (adr r2, 800a5c8 <USBH_UserProcess+0x1c>)
 800a5c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5c6:	bf00      	nop
 800a5c8:	0800a61f 	.word	0x0800a61f
 800a5cc:	0800a5f3 	.word	0x0800a5f3
 800a5d0:	0800a61f 	.word	0x0800a61f
 800a5d4:	0800a609 	.word	0x0800a609
 800a5d8:	0800a5dd 	.word	0x0800a5dd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a5dc:	4b12      	ldr	r3, [pc, #72]	; (800a628 <USBH_UserProcess+0x7c>)
 800a5de:	2203      	movs	r2, #3
 800a5e0:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_DISCONNECT, 0);
 800a5e2:	4b12      	ldr	r3, [pc, #72]	; (800a62c <USBH_UserProcess+0x80>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	2103      	movs	r1, #3
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7fd fe12 	bl	8008214 <osMessagePut>
  break;
 800a5f0:	e016      	b.n	800a620 <USBH_UserProcess+0x74>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a5f2:	4b0d      	ldr	r3, [pc, #52]	; (800a628 <USBH_UserProcess+0x7c>)
 800a5f4:	2202      	movs	r2, #2
 800a5f6:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_READY, 0);
 800a5f8:	4b0c      	ldr	r3, [pc, #48]	; (800a62c <USBH_UserProcess+0x80>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	2102      	movs	r1, #2
 800a600:	4618      	mov	r0, r3
 800a602:	f7fd fe07 	bl	8008214 <osMessagePut>
  break;
 800a606:	e00b      	b.n	800a620 <USBH_UserProcess+0x74>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a608:	4b07      	ldr	r3, [pc, #28]	; (800a628 <USBH_UserProcess+0x7c>)
 800a60a:	2201      	movs	r2, #1
 800a60c:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_START, 0);
 800a60e:	4b07      	ldr	r3, [pc, #28]	; (800a62c <USBH_UserProcess+0x80>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	2200      	movs	r2, #0
 800a614:	2101      	movs	r1, #1
 800a616:	4618      	mov	r0, r3
 800a618:	f7fd fdfc 	bl	8008214 <osMessagePut>
  break;
 800a61c:	e000      	b.n	800a620 <USBH_UserProcess+0x74>

  default:
  break;
 800a61e:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a620:	bf00      	nop
 800a622:	3708      	adds	r7, #8
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	200038d0 	.word	0x200038d0
 800a62c:	2000045c 	.word	0x2000045c

0800a630 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a640:	d113      	bne.n	800a66a <HAL_HCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a642:	4b0c      	ldr	r3, [pc, #48]	; (800a674 <HAL_HCD_MspInit+0x44>)
 800a644:	695b      	ldr	r3, [r3, #20]
 800a646:	4a0b      	ldr	r2, [pc, #44]	; (800a674 <HAL_HCD_MspInit+0x44>)
 800a648:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a64c:	6153      	str	r3, [r2, #20]
 800a64e:	4b09      	ldr	r3, [pc, #36]	; (800a674 <HAL_HCD_MspInit+0x44>)
 800a650:	695b      	ldr	r3, [r3, #20]
 800a652:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a656:	60fb      	str	r3, [r7, #12]
 800a658:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a65a:	2200      	movs	r2, #0
 800a65c:	2105      	movs	r1, #5
 800a65e:	2043      	movs	r0, #67	; 0x43
 800a660:	f7f6 fd0f 	bl	8001082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a664:	2043      	movs	r0, #67	; 0x43
 800a666:	f7f6 fd28 	bl	80010ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a66a:	bf00      	nop
 800a66c:	3710      	adds	r7, #16
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	40021000 	.word	0x40021000

0800a678 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a686:	4618      	mov	r0, r3
 800a688:	f7fc fd84 	bl	8007194 <USBH_LL_IncTimer>
}
 800a68c:	bf00      	nop
 800a68e:	3708      	adds	r7, #8
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7fc fdc7 	bl	8007236 <USBH_LL_Connect>
}
 800a6a8:	bf00      	nop
 800a6aa:	3708      	adds	r7, #8
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7fc fddc 	bl	800727c <USBH_LL_Disconnect>
}
 800a6c4:	bf00      	nop
 800a6c6:	3708      	adds	r7, #8
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	70fb      	strb	r3, [r7, #3]
 800a6d8:	4613      	mov	r3, r2
 800a6da:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7fc fe11 	bl	800730a <USBH_LL_NotifyURBChange>
#endif
}
 800a6e8:	bf00      	nop
 800a6ea:	3708      	adds	r7, #8
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7fc fd72 	bl	80071e8 <USBH_LL_PortEnabled>
}
 800a704:	bf00      	nop
 800a706:	3708      	adds	r7, #8
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a71a:	4618      	mov	r0, r3
 800a71c:	f7fc fd7e 	bl	800721c <USBH_LL_PortDisabled>
}
 800a720:	bf00      	nop
 800a722:	3708      	adds	r7, #8
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b082      	sub	sp, #8
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 800a736:	2b01      	cmp	r3, #1
 800a738:	d127      	bne.n	800a78a <USBH_LL_Init+0x62>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a73a:	4a16      	ldr	r2, [pc, #88]	; (800a794 <USBH_LL_Init+0x6c>)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	4a13      	ldr	r2, [pc, #76]	; (800a794 <USBH_LL_Init+0x6c>)
 800a746:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a74a:	4b12      	ldr	r3, [pc, #72]	; (800a794 <USBH_LL_Init+0x6c>)
 800a74c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a750:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a752:	4b10      	ldr	r3, [pc, #64]	; (800a794 <USBH_LL_Init+0x6c>)
 800a754:	2208      	movs	r2, #8
 800a756:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a758:	4b0e      	ldr	r3, [pc, #56]	; (800a794 <USBH_LL_Init+0x6c>)
 800a75a:	2201      	movs	r2, #1
 800a75c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a75e:	4b0d      	ldr	r3, [pc, #52]	; (800a794 <USBH_LL_Init+0x6c>)
 800a760:	2202      	movs	r2, #2
 800a762:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800a764:	4b0b      	ldr	r3, [pc, #44]	; (800a794 <USBH_LL_Init+0x6c>)
 800a766:	2201      	movs	r2, #1
 800a768:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a76a:	480a      	ldr	r0, [pc, #40]	; (800a794 <USBH_LL_Init+0x6c>)
 800a76c:	f7f6 ff92 	bl	8001694 <HAL_HCD_Init>
 800a770:	4603      	mov	r3, r0
 800a772:	2b00      	cmp	r3, #0
 800a774:	d001      	beq.n	800a77a <USBH_LL_Init+0x52>
  {
    Error_Handler( );
 800a776:	f7f6 f973 	bl	8000a60 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a77a:	4806      	ldr	r0, [pc, #24]	; (800a794 <USBH_LL_Init+0x6c>)
 800a77c:	f7f7 fb68 	bl	8001e50 <HAL_HCD_GetCurrentFrame>
 800a780:	4603      	mov	r3, r0
 800a782:	4619      	mov	r1, r3
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f7fc fcf7 	bl	8007178 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3708      	adds	r7, #8
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}
 800a794:	200038d4 	.word	0x200038d4

0800a798 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7f7 fada 	bl	8001d68 <HAL_HCD_Start>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a7b8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f000 f95a 	bl	800aa74 <USBH_Get_USB_Status>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3710      	adds	r7, #16
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}

0800a7ce <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b084      	sub	sp, #16
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f7f7 fae2 	bl	8001dae <HAL_HCD_Stop>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a7ee:	7bfb      	ldrb	r3, [r7, #15]
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f000 f93f 	bl	800aa74 <USBH_Get_USB_Status>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3710      	adds	r7, #16
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a80c:	2301      	movs	r3, #1
 800a80e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800a816:	4618      	mov	r0, r3
 800a818:	f7f7 fb28 	bl	8001e6c <HAL_HCD_GetCurrentSpeed>
 800a81c:	4603      	mov	r3, r0
 800a81e:	2b02      	cmp	r3, #2
 800a820:	d00c      	beq.n	800a83c <USBH_LL_GetSpeed+0x38>
 800a822:	2b02      	cmp	r3, #2
 800a824:	d80d      	bhi.n	800a842 <USBH_LL_GetSpeed+0x3e>
 800a826:	2b00      	cmp	r3, #0
 800a828:	d002      	beq.n	800a830 <USBH_LL_GetSpeed+0x2c>
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d003      	beq.n	800a836 <USBH_LL_GetSpeed+0x32>
 800a82e:	e008      	b.n	800a842 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a830:	2300      	movs	r3, #0
 800a832:	73fb      	strb	r3, [r7, #15]
    break;
 800a834:	e008      	b.n	800a848 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a836:	2301      	movs	r3, #1
 800a838:	73fb      	strb	r3, [r7, #15]
    break;
 800a83a:	e005      	b.n	800a848 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a83c:	2302      	movs	r3, #2
 800a83e:	73fb      	strb	r3, [r7, #15]
    break;
 800a840:	e002      	b.n	800a848 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a842:	2301      	movs	r3, #1
 800a844:	73fb      	strb	r3, [r7, #15]
    break;
 800a846:	bf00      	nop
  }
  return  speed;
 800a848:	7bfb      	ldrb	r3, [r7, #15]
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3710      	adds	r7, #16
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a852:	b580      	push	{r7, lr}
 800a854:	b084      	sub	sp, #16
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a85a:	2300      	movs	r3, #0
 800a85c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a85e:	2300      	movs	r3, #0
 800a860:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800a868:	4618      	mov	r0, r3
 800a86a:	f7f7 fabd 	bl	8001de8 <HAL_HCD_ResetPort>
 800a86e:	4603      	mov	r3, r0
 800a870:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a872:	7bfb      	ldrb	r3, [r7, #15]
 800a874:	4618      	mov	r0, r3
 800a876:	f000 f8fd 	bl	800aa74 <USBH_Get_USB_Status>
 800a87a:	4603      	mov	r3, r0
 800a87c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a87e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a880:	4618      	mov	r0, r3
 800a882:	3710      	adds	r7, #16
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	460b      	mov	r3, r1
 800a892:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800a89a:	78fa      	ldrb	r2, [r7, #3]
 800a89c:	4611      	mov	r1, r2
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7f7 fac3 	bl	8001e2a <HAL_HCD_HC_GetXferCount>
 800a8a4:	4603      	mov	r3, r0
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}

0800a8ae <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a8ae:	b590      	push	{r4, r7, lr}
 800a8b0:	b089      	sub	sp, #36	; 0x24
 800a8b2:	af04      	add	r7, sp, #16
 800a8b4:	6078      	str	r0, [r7, #4]
 800a8b6:	4608      	mov	r0, r1
 800a8b8:	4611      	mov	r1, r2
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	4603      	mov	r3, r0
 800a8be:	70fb      	strb	r3, [r7, #3]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	70bb      	strb	r3, [r7, #2]
 800a8c4:	4613      	mov	r3, r2
 800a8c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800a8d6:	787c      	ldrb	r4, [r7, #1]
 800a8d8:	78ba      	ldrb	r2, [r7, #2]
 800a8da:	78f9      	ldrb	r1, [r7, #3]
 800a8dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a8de:	9302      	str	r3, [sp, #8]
 800a8e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a8e4:	9301      	str	r3, [sp, #4]
 800a8e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a8ea:	9300      	str	r3, [sp, #0]
 800a8ec:	4623      	mov	r3, r4
 800a8ee:	f7f6 ff33 	bl	8001758 <HAL_HCD_HC_Init>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a8f6:	7bfb      	ldrb	r3, [r7, #15]
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f000 f8bb 	bl	800aa74 <USBH_Get_USB_Status>
 800a8fe:	4603      	mov	r3, r0
 800a900:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a902:	7bbb      	ldrb	r3, [r7, #14]
}
 800a904:	4618      	mov	r0, r3
 800a906:	3714      	adds	r7, #20
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd90      	pop	{r4, r7, pc}

0800a90c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	460b      	mov	r3, r1
 800a916:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a918:	2300      	movs	r3, #0
 800a91a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a91c:	2300      	movs	r3, #0
 800a91e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800a926:	78fa      	ldrb	r2, [r7, #3]
 800a928:	4611      	mov	r1, r2
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7f6 ffa3 	bl	8001876 <HAL_HCD_HC_Halt>
 800a930:	4603      	mov	r3, r0
 800a932:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a934:	7bfb      	ldrb	r3, [r7, #15]
 800a936:	4618      	mov	r0, r3
 800a938:	f000 f89c 	bl	800aa74 <USBH_Get_USB_Status>
 800a93c:	4603      	mov	r3, r0
 800a93e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a940:	7bbb      	ldrb	r3, [r7, #14]
}
 800a942:	4618      	mov	r0, r3
 800a944:	3710      	adds	r7, #16
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}

0800a94a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a94a:	b590      	push	{r4, r7, lr}
 800a94c:	b089      	sub	sp, #36	; 0x24
 800a94e:	af04      	add	r7, sp, #16
 800a950:	6078      	str	r0, [r7, #4]
 800a952:	4608      	mov	r0, r1
 800a954:	4611      	mov	r1, r2
 800a956:	461a      	mov	r2, r3
 800a958:	4603      	mov	r3, r0
 800a95a:	70fb      	strb	r3, [r7, #3]
 800a95c:	460b      	mov	r3, r1
 800a95e:	70bb      	strb	r3, [r7, #2]
 800a960:	4613      	mov	r3, r2
 800a962:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a964:	2300      	movs	r3, #0
 800a966:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a968:	2300      	movs	r3, #0
 800a96a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800a972:	787c      	ldrb	r4, [r7, #1]
 800a974:	78ba      	ldrb	r2, [r7, #2]
 800a976:	78f9      	ldrb	r1, [r7, #3]
 800a978:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a97c:	9303      	str	r3, [sp, #12]
 800a97e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a980:	9302      	str	r3, [sp, #8]
 800a982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a984:	9301      	str	r3, [sp, #4]
 800a986:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a98a:	9300      	str	r3, [sp, #0]
 800a98c:	4623      	mov	r3, r4
 800a98e:	f7f6 ff95 	bl	80018bc <HAL_HCD_HC_SubmitRequest>
 800a992:	4603      	mov	r3, r0
 800a994:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a996:	7bfb      	ldrb	r3, [r7, #15]
 800a998:	4618      	mov	r0, r3
 800a99a:	f000 f86b 	bl	800aa74 <USBH_Get_USB_Status>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3714      	adds	r7, #20
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd90      	pop	{r4, r7, pc}

0800a9ac <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800a9be:	78fa      	ldrb	r2, [r7, #3]
 800a9c0:	4611      	mov	r1, r2
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7f7 fa1e 	bl	8001e04 <HAL_HCD_HC_GetURBState>
 800a9c8:	4603      	mov	r3, r0
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3708      	adds	r7, #8
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}

0800a9d2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a9d2:	b580      	push	{r7, lr}
 800a9d4:	b082      	sub	sp, #8
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	6078      	str	r0, [r7, #4]
 800a9da:	460b      	mov	r3, r1
 800a9dc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d103      	bne.n	800a9f0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a9e8:	78fb      	ldrb	r3, [r7, #3]
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f000 f86e 	bl	800aacc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a9f0:	20c8      	movs	r0, #200	; 0xc8
 800a9f2:	f7f6 fa6d 	bl	8000ed0 <HAL_Delay>
  return USBH_OK;
 800a9f6:	2300      	movs	r3, #0
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3708      	adds	r7, #8
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b085      	sub	sp, #20
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	460b      	mov	r3, r1
 800aa0a:	70fb      	strb	r3, [r7, #3]
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800aa16:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800aa18:	78fb      	ldrb	r3, [r7, #3]
 800aa1a:	68fa      	ldr	r2, [r7, #12]
 800aa1c:	212c      	movs	r1, #44	; 0x2c
 800aa1e:	fb01 f303 	mul.w	r3, r1, r3
 800aa22:	4413      	add	r3, r2
 800aa24:	333b      	adds	r3, #59	; 0x3b
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d009      	beq.n	800aa40 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800aa2c:	78fb      	ldrb	r3, [r7, #3]
 800aa2e:	68fa      	ldr	r2, [r7, #12]
 800aa30:	212c      	movs	r1, #44	; 0x2c
 800aa32:	fb01 f303 	mul.w	r3, r1, r3
 800aa36:	4413      	add	r3, r2
 800aa38:	3354      	adds	r3, #84	; 0x54
 800aa3a:	78ba      	ldrb	r2, [r7, #2]
 800aa3c:	701a      	strb	r2, [r3, #0]
 800aa3e:	e008      	b.n	800aa52 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800aa40:	78fb      	ldrb	r3, [r7, #3]
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	212c      	movs	r1, #44	; 0x2c
 800aa46:	fb01 f303 	mul.w	r3, r1, r3
 800aa4a:	4413      	add	r3, r2
 800aa4c:	3355      	adds	r3, #85	; 0x55
 800aa4e:	78ba      	ldrb	r2, [r7, #2]
 800aa50:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800aa52:	2300      	movs	r3, #0
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3714      	adds	r7, #20
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bc80      	pop	{r7}
 800aa5c:	4770      	bx	lr

0800aa5e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b082      	sub	sp, #8
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f7f6 fa32 	bl	8000ed0 <HAL_Delay>
}
 800aa6c:	bf00      	nop
 800aa6e:	3708      	adds	r7, #8
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b085      	sub	sp, #20
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aa82:	79fb      	ldrb	r3, [r7, #7]
 800aa84:	2b03      	cmp	r3, #3
 800aa86:	d817      	bhi.n	800aab8 <USBH_Get_USB_Status+0x44>
 800aa88:	a201      	add	r2, pc, #4	; (adr r2, 800aa90 <USBH_Get_USB_Status+0x1c>)
 800aa8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa8e:	bf00      	nop
 800aa90:	0800aaa1 	.word	0x0800aaa1
 800aa94:	0800aaa7 	.word	0x0800aaa7
 800aa98:	0800aaad 	.word	0x0800aaad
 800aa9c:	0800aab3 	.word	0x0800aab3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	73fb      	strb	r3, [r7, #15]
    break;
 800aaa4:	e00b      	b.n	800aabe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800aaa6:	2302      	movs	r3, #2
 800aaa8:	73fb      	strb	r3, [r7, #15]
    break;
 800aaaa:	e008      	b.n	800aabe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800aaac:	2301      	movs	r3, #1
 800aaae:	73fb      	strb	r3, [r7, #15]
    break;
 800aab0:	e005      	b.n	800aabe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800aab2:	2302      	movs	r3, #2
 800aab4:	73fb      	strb	r3, [r7, #15]
    break;
 800aab6:	e002      	b.n	800aabe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800aab8:	2302      	movs	r3, #2
 800aaba:	73fb      	strb	r3, [r7, #15]
    break;
 800aabc:	bf00      	nop
  }
  return usb_status;
 800aabe:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3714      	adds	r7, #20
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bc80      	pop	{r7}
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop

0800aacc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	4603      	mov	r3, r0
 800aad4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800aad6:	79fb      	ldrb	r3, [r7, #7]
 800aad8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800aada:	79fb      	ldrb	r3, [r7, #7]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d102      	bne.n	800aae6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800aae0:	2301      	movs	r3, #1
 800aae2:	73fb      	strb	r3, [r7, #15]
 800aae4:	e001      	b.n	800aaea <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800aae6:	2300      	movs	r3, #0
 800aae8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,(GPIO_PinState)data);
 800aaea:	7bfb      	ldrb	r3, [r7, #15]
 800aaec:	461a      	mov	r2, r3
 800aaee:	2101      	movs	r1, #1
 800aaf0:	4803      	ldr	r0, [pc, #12]	; (800ab00 <MX_DriverVbusFS+0x34>)
 800aaf2:	f7f6 fdb7 	bl	8001664 <HAL_GPIO_WritePin>
}
 800aaf6:	bf00      	nop
 800aaf8:	3710      	adds	r7, #16
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}
 800aafe:	bf00      	nop
 800ab00:	40010c00 	.word	0x40010c00

0800ab04 <__errno>:
 800ab04:	4b01      	ldr	r3, [pc, #4]	; (800ab0c <__errno+0x8>)
 800ab06:	6818      	ldr	r0, [r3, #0]
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop
 800ab0c:	20000038 	.word	0x20000038

0800ab10 <__libc_init_array>:
 800ab10:	b570      	push	{r4, r5, r6, lr}
 800ab12:	2600      	movs	r6, #0
 800ab14:	4d0c      	ldr	r5, [pc, #48]	; (800ab48 <__libc_init_array+0x38>)
 800ab16:	4c0d      	ldr	r4, [pc, #52]	; (800ab4c <__libc_init_array+0x3c>)
 800ab18:	1b64      	subs	r4, r4, r5
 800ab1a:	10a4      	asrs	r4, r4, #2
 800ab1c:	42a6      	cmp	r6, r4
 800ab1e:	d109      	bne.n	800ab34 <__libc_init_array+0x24>
 800ab20:	f000 f9a4 	bl	800ae6c <_init>
 800ab24:	2600      	movs	r6, #0
 800ab26:	4d0a      	ldr	r5, [pc, #40]	; (800ab50 <__libc_init_array+0x40>)
 800ab28:	4c0a      	ldr	r4, [pc, #40]	; (800ab54 <__libc_init_array+0x44>)
 800ab2a:	1b64      	subs	r4, r4, r5
 800ab2c:	10a4      	asrs	r4, r4, #2
 800ab2e:	42a6      	cmp	r6, r4
 800ab30:	d105      	bne.n	800ab3e <__libc_init_array+0x2e>
 800ab32:	bd70      	pop	{r4, r5, r6, pc}
 800ab34:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab38:	4798      	blx	r3
 800ab3a:	3601      	adds	r6, #1
 800ab3c:	e7ee      	b.n	800ab1c <__libc_init_array+0xc>
 800ab3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab42:	4798      	blx	r3
 800ab44:	3601      	adds	r6, #1
 800ab46:	e7f2      	b.n	800ab2e <__libc_init_array+0x1e>
 800ab48:	0800b01c 	.word	0x0800b01c
 800ab4c:	0800b01c 	.word	0x0800b01c
 800ab50:	0800b01c 	.word	0x0800b01c
 800ab54:	0800b020 	.word	0x0800b020

0800ab58 <__retarget_lock_acquire_recursive>:
 800ab58:	4770      	bx	lr

0800ab5a <__retarget_lock_release_recursive>:
 800ab5a:	4770      	bx	lr

0800ab5c <malloc>:
 800ab5c:	4b02      	ldr	r3, [pc, #8]	; (800ab68 <malloc+0xc>)
 800ab5e:	4601      	mov	r1, r0
 800ab60:	6818      	ldr	r0, [r3, #0]
 800ab62:	f000 b889 	b.w	800ac78 <_malloc_r>
 800ab66:	bf00      	nop
 800ab68:	20000038 	.word	0x20000038

0800ab6c <free>:
 800ab6c:	4b02      	ldr	r3, [pc, #8]	; (800ab78 <free+0xc>)
 800ab6e:	4601      	mov	r1, r0
 800ab70:	6818      	ldr	r0, [r3, #0]
 800ab72:	f000 b819 	b.w	800aba8 <_free_r>
 800ab76:	bf00      	nop
 800ab78:	20000038 	.word	0x20000038

0800ab7c <memcpy>:
 800ab7c:	440a      	add	r2, r1
 800ab7e:	4291      	cmp	r1, r2
 800ab80:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab84:	d100      	bne.n	800ab88 <memcpy+0xc>
 800ab86:	4770      	bx	lr
 800ab88:	b510      	push	{r4, lr}
 800ab8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab8e:	4291      	cmp	r1, r2
 800ab90:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab94:	d1f9      	bne.n	800ab8a <memcpy+0xe>
 800ab96:	bd10      	pop	{r4, pc}

0800ab98 <memset>:
 800ab98:	4603      	mov	r3, r0
 800ab9a:	4402      	add	r2, r0
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d100      	bne.n	800aba2 <memset+0xa>
 800aba0:	4770      	bx	lr
 800aba2:	f803 1b01 	strb.w	r1, [r3], #1
 800aba6:	e7f9      	b.n	800ab9c <memset+0x4>

0800aba8 <_free_r>:
 800aba8:	b538      	push	{r3, r4, r5, lr}
 800abaa:	4605      	mov	r5, r0
 800abac:	2900      	cmp	r1, #0
 800abae:	d040      	beq.n	800ac32 <_free_r+0x8a>
 800abb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abb4:	1f0c      	subs	r4, r1, #4
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	bfb8      	it	lt
 800abba:	18e4      	addlt	r4, r4, r3
 800abbc:	f000 f94a 	bl	800ae54 <__malloc_lock>
 800abc0:	4a1c      	ldr	r2, [pc, #112]	; (800ac34 <_free_r+0x8c>)
 800abc2:	6813      	ldr	r3, [r2, #0]
 800abc4:	b933      	cbnz	r3, 800abd4 <_free_r+0x2c>
 800abc6:	6063      	str	r3, [r4, #4]
 800abc8:	6014      	str	r4, [r2, #0]
 800abca:	4628      	mov	r0, r5
 800abcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abd0:	f000 b946 	b.w	800ae60 <__malloc_unlock>
 800abd4:	42a3      	cmp	r3, r4
 800abd6:	d908      	bls.n	800abea <_free_r+0x42>
 800abd8:	6820      	ldr	r0, [r4, #0]
 800abda:	1821      	adds	r1, r4, r0
 800abdc:	428b      	cmp	r3, r1
 800abde:	bf01      	itttt	eq
 800abe0:	6819      	ldreq	r1, [r3, #0]
 800abe2:	685b      	ldreq	r3, [r3, #4]
 800abe4:	1809      	addeq	r1, r1, r0
 800abe6:	6021      	streq	r1, [r4, #0]
 800abe8:	e7ed      	b.n	800abc6 <_free_r+0x1e>
 800abea:	461a      	mov	r2, r3
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	b10b      	cbz	r3, 800abf4 <_free_r+0x4c>
 800abf0:	42a3      	cmp	r3, r4
 800abf2:	d9fa      	bls.n	800abea <_free_r+0x42>
 800abf4:	6811      	ldr	r1, [r2, #0]
 800abf6:	1850      	adds	r0, r2, r1
 800abf8:	42a0      	cmp	r0, r4
 800abfa:	d10b      	bne.n	800ac14 <_free_r+0x6c>
 800abfc:	6820      	ldr	r0, [r4, #0]
 800abfe:	4401      	add	r1, r0
 800ac00:	1850      	adds	r0, r2, r1
 800ac02:	4283      	cmp	r3, r0
 800ac04:	6011      	str	r1, [r2, #0]
 800ac06:	d1e0      	bne.n	800abca <_free_r+0x22>
 800ac08:	6818      	ldr	r0, [r3, #0]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	4401      	add	r1, r0
 800ac0e:	6011      	str	r1, [r2, #0]
 800ac10:	6053      	str	r3, [r2, #4]
 800ac12:	e7da      	b.n	800abca <_free_r+0x22>
 800ac14:	d902      	bls.n	800ac1c <_free_r+0x74>
 800ac16:	230c      	movs	r3, #12
 800ac18:	602b      	str	r3, [r5, #0]
 800ac1a:	e7d6      	b.n	800abca <_free_r+0x22>
 800ac1c:	6820      	ldr	r0, [r4, #0]
 800ac1e:	1821      	adds	r1, r4, r0
 800ac20:	428b      	cmp	r3, r1
 800ac22:	bf01      	itttt	eq
 800ac24:	6819      	ldreq	r1, [r3, #0]
 800ac26:	685b      	ldreq	r3, [r3, #4]
 800ac28:	1809      	addeq	r1, r1, r0
 800ac2a:	6021      	streq	r1, [r4, #0]
 800ac2c:	6063      	str	r3, [r4, #4]
 800ac2e:	6054      	str	r4, [r2, #4]
 800ac30:	e7cb      	b.n	800abca <_free_r+0x22>
 800ac32:	bd38      	pop	{r3, r4, r5, pc}
 800ac34:	20003bdc 	.word	0x20003bdc

0800ac38 <sbrk_aligned>:
 800ac38:	b570      	push	{r4, r5, r6, lr}
 800ac3a:	4e0e      	ldr	r6, [pc, #56]	; (800ac74 <sbrk_aligned+0x3c>)
 800ac3c:	460c      	mov	r4, r1
 800ac3e:	6831      	ldr	r1, [r6, #0]
 800ac40:	4605      	mov	r5, r0
 800ac42:	b911      	cbnz	r1, 800ac4a <sbrk_aligned+0x12>
 800ac44:	f000 f8f6 	bl	800ae34 <_sbrk_r>
 800ac48:	6030      	str	r0, [r6, #0]
 800ac4a:	4621      	mov	r1, r4
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	f000 f8f1 	bl	800ae34 <_sbrk_r>
 800ac52:	1c43      	adds	r3, r0, #1
 800ac54:	d00a      	beq.n	800ac6c <sbrk_aligned+0x34>
 800ac56:	1cc4      	adds	r4, r0, #3
 800ac58:	f024 0403 	bic.w	r4, r4, #3
 800ac5c:	42a0      	cmp	r0, r4
 800ac5e:	d007      	beq.n	800ac70 <sbrk_aligned+0x38>
 800ac60:	1a21      	subs	r1, r4, r0
 800ac62:	4628      	mov	r0, r5
 800ac64:	f000 f8e6 	bl	800ae34 <_sbrk_r>
 800ac68:	3001      	adds	r0, #1
 800ac6a:	d101      	bne.n	800ac70 <sbrk_aligned+0x38>
 800ac6c:	f04f 34ff 	mov.w	r4, #4294967295
 800ac70:	4620      	mov	r0, r4
 800ac72:	bd70      	pop	{r4, r5, r6, pc}
 800ac74:	20003be0 	.word	0x20003be0

0800ac78 <_malloc_r>:
 800ac78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac7c:	1ccd      	adds	r5, r1, #3
 800ac7e:	f025 0503 	bic.w	r5, r5, #3
 800ac82:	3508      	adds	r5, #8
 800ac84:	2d0c      	cmp	r5, #12
 800ac86:	bf38      	it	cc
 800ac88:	250c      	movcc	r5, #12
 800ac8a:	2d00      	cmp	r5, #0
 800ac8c:	4607      	mov	r7, r0
 800ac8e:	db01      	blt.n	800ac94 <_malloc_r+0x1c>
 800ac90:	42a9      	cmp	r1, r5
 800ac92:	d905      	bls.n	800aca0 <_malloc_r+0x28>
 800ac94:	230c      	movs	r3, #12
 800ac96:	2600      	movs	r6, #0
 800ac98:	603b      	str	r3, [r7, #0]
 800ac9a:	4630      	mov	r0, r6
 800ac9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aca0:	4e2e      	ldr	r6, [pc, #184]	; (800ad5c <_malloc_r+0xe4>)
 800aca2:	f000 f8d7 	bl	800ae54 <__malloc_lock>
 800aca6:	6833      	ldr	r3, [r6, #0]
 800aca8:	461c      	mov	r4, r3
 800acaa:	bb34      	cbnz	r4, 800acfa <_malloc_r+0x82>
 800acac:	4629      	mov	r1, r5
 800acae:	4638      	mov	r0, r7
 800acb0:	f7ff ffc2 	bl	800ac38 <sbrk_aligned>
 800acb4:	1c43      	adds	r3, r0, #1
 800acb6:	4604      	mov	r4, r0
 800acb8:	d14d      	bne.n	800ad56 <_malloc_r+0xde>
 800acba:	6834      	ldr	r4, [r6, #0]
 800acbc:	4626      	mov	r6, r4
 800acbe:	2e00      	cmp	r6, #0
 800acc0:	d140      	bne.n	800ad44 <_malloc_r+0xcc>
 800acc2:	6823      	ldr	r3, [r4, #0]
 800acc4:	4631      	mov	r1, r6
 800acc6:	4638      	mov	r0, r7
 800acc8:	eb04 0803 	add.w	r8, r4, r3
 800accc:	f000 f8b2 	bl	800ae34 <_sbrk_r>
 800acd0:	4580      	cmp	r8, r0
 800acd2:	d13a      	bne.n	800ad4a <_malloc_r+0xd2>
 800acd4:	6821      	ldr	r1, [r4, #0]
 800acd6:	3503      	adds	r5, #3
 800acd8:	1a6d      	subs	r5, r5, r1
 800acda:	f025 0503 	bic.w	r5, r5, #3
 800acde:	3508      	adds	r5, #8
 800ace0:	2d0c      	cmp	r5, #12
 800ace2:	bf38      	it	cc
 800ace4:	250c      	movcc	r5, #12
 800ace6:	4638      	mov	r0, r7
 800ace8:	4629      	mov	r1, r5
 800acea:	f7ff ffa5 	bl	800ac38 <sbrk_aligned>
 800acee:	3001      	adds	r0, #1
 800acf0:	d02b      	beq.n	800ad4a <_malloc_r+0xd2>
 800acf2:	6823      	ldr	r3, [r4, #0]
 800acf4:	442b      	add	r3, r5
 800acf6:	6023      	str	r3, [r4, #0]
 800acf8:	e00e      	b.n	800ad18 <_malloc_r+0xa0>
 800acfa:	6822      	ldr	r2, [r4, #0]
 800acfc:	1b52      	subs	r2, r2, r5
 800acfe:	d41e      	bmi.n	800ad3e <_malloc_r+0xc6>
 800ad00:	2a0b      	cmp	r2, #11
 800ad02:	d916      	bls.n	800ad32 <_malloc_r+0xba>
 800ad04:	1961      	adds	r1, r4, r5
 800ad06:	42a3      	cmp	r3, r4
 800ad08:	6025      	str	r5, [r4, #0]
 800ad0a:	bf18      	it	ne
 800ad0c:	6059      	strne	r1, [r3, #4]
 800ad0e:	6863      	ldr	r3, [r4, #4]
 800ad10:	bf08      	it	eq
 800ad12:	6031      	streq	r1, [r6, #0]
 800ad14:	5162      	str	r2, [r4, r5]
 800ad16:	604b      	str	r3, [r1, #4]
 800ad18:	4638      	mov	r0, r7
 800ad1a:	f104 060b 	add.w	r6, r4, #11
 800ad1e:	f000 f89f 	bl	800ae60 <__malloc_unlock>
 800ad22:	f026 0607 	bic.w	r6, r6, #7
 800ad26:	1d23      	adds	r3, r4, #4
 800ad28:	1af2      	subs	r2, r6, r3
 800ad2a:	d0b6      	beq.n	800ac9a <_malloc_r+0x22>
 800ad2c:	1b9b      	subs	r3, r3, r6
 800ad2e:	50a3      	str	r3, [r4, r2]
 800ad30:	e7b3      	b.n	800ac9a <_malloc_r+0x22>
 800ad32:	6862      	ldr	r2, [r4, #4]
 800ad34:	42a3      	cmp	r3, r4
 800ad36:	bf0c      	ite	eq
 800ad38:	6032      	streq	r2, [r6, #0]
 800ad3a:	605a      	strne	r2, [r3, #4]
 800ad3c:	e7ec      	b.n	800ad18 <_malloc_r+0xa0>
 800ad3e:	4623      	mov	r3, r4
 800ad40:	6864      	ldr	r4, [r4, #4]
 800ad42:	e7b2      	b.n	800acaa <_malloc_r+0x32>
 800ad44:	4634      	mov	r4, r6
 800ad46:	6876      	ldr	r6, [r6, #4]
 800ad48:	e7b9      	b.n	800acbe <_malloc_r+0x46>
 800ad4a:	230c      	movs	r3, #12
 800ad4c:	4638      	mov	r0, r7
 800ad4e:	603b      	str	r3, [r7, #0]
 800ad50:	f000 f886 	bl	800ae60 <__malloc_unlock>
 800ad54:	e7a1      	b.n	800ac9a <_malloc_r+0x22>
 800ad56:	6025      	str	r5, [r4, #0]
 800ad58:	e7de      	b.n	800ad18 <_malloc_r+0xa0>
 800ad5a:	bf00      	nop
 800ad5c:	20003bdc 	.word	0x20003bdc

0800ad60 <cleanup_glue>:
 800ad60:	b538      	push	{r3, r4, r5, lr}
 800ad62:	460c      	mov	r4, r1
 800ad64:	6809      	ldr	r1, [r1, #0]
 800ad66:	4605      	mov	r5, r0
 800ad68:	b109      	cbz	r1, 800ad6e <cleanup_glue+0xe>
 800ad6a:	f7ff fff9 	bl	800ad60 <cleanup_glue>
 800ad6e:	4621      	mov	r1, r4
 800ad70:	4628      	mov	r0, r5
 800ad72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad76:	f7ff bf17 	b.w	800aba8 <_free_r>
	...

0800ad7c <_reclaim_reent>:
 800ad7c:	4b2c      	ldr	r3, [pc, #176]	; (800ae30 <_reclaim_reent+0xb4>)
 800ad7e:	b570      	push	{r4, r5, r6, lr}
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4604      	mov	r4, r0
 800ad84:	4283      	cmp	r3, r0
 800ad86:	d051      	beq.n	800ae2c <_reclaim_reent+0xb0>
 800ad88:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ad8a:	b143      	cbz	r3, 800ad9e <_reclaim_reent+0x22>
 800ad8c:	68db      	ldr	r3, [r3, #12]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d14a      	bne.n	800ae28 <_reclaim_reent+0xac>
 800ad92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad94:	6819      	ldr	r1, [r3, #0]
 800ad96:	b111      	cbz	r1, 800ad9e <_reclaim_reent+0x22>
 800ad98:	4620      	mov	r0, r4
 800ad9a:	f7ff ff05 	bl	800aba8 <_free_r>
 800ad9e:	6961      	ldr	r1, [r4, #20]
 800ada0:	b111      	cbz	r1, 800ada8 <_reclaim_reent+0x2c>
 800ada2:	4620      	mov	r0, r4
 800ada4:	f7ff ff00 	bl	800aba8 <_free_r>
 800ada8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800adaa:	b111      	cbz	r1, 800adb2 <_reclaim_reent+0x36>
 800adac:	4620      	mov	r0, r4
 800adae:	f7ff fefb 	bl	800aba8 <_free_r>
 800adb2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800adb4:	b111      	cbz	r1, 800adbc <_reclaim_reent+0x40>
 800adb6:	4620      	mov	r0, r4
 800adb8:	f7ff fef6 	bl	800aba8 <_free_r>
 800adbc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800adbe:	b111      	cbz	r1, 800adc6 <_reclaim_reent+0x4a>
 800adc0:	4620      	mov	r0, r4
 800adc2:	f7ff fef1 	bl	800aba8 <_free_r>
 800adc6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800adc8:	b111      	cbz	r1, 800add0 <_reclaim_reent+0x54>
 800adca:	4620      	mov	r0, r4
 800adcc:	f7ff feec 	bl	800aba8 <_free_r>
 800add0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800add2:	b111      	cbz	r1, 800adda <_reclaim_reent+0x5e>
 800add4:	4620      	mov	r0, r4
 800add6:	f7ff fee7 	bl	800aba8 <_free_r>
 800adda:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800addc:	b111      	cbz	r1, 800ade4 <_reclaim_reent+0x68>
 800adde:	4620      	mov	r0, r4
 800ade0:	f7ff fee2 	bl	800aba8 <_free_r>
 800ade4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ade6:	b111      	cbz	r1, 800adee <_reclaim_reent+0x72>
 800ade8:	4620      	mov	r0, r4
 800adea:	f7ff fedd 	bl	800aba8 <_free_r>
 800adee:	69a3      	ldr	r3, [r4, #24]
 800adf0:	b1e3      	cbz	r3, 800ae2c <_reclaim_reent+0xb0>
 800adf2:	4620      	mov	r0, r4
 800adf4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800adf6:	4798      	blx	r3
 800adf8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800adfa:	b1b9      	cbz	r1, 800ae2c <_reclaim_reent+0xb0>
 800adfc:	4620      	mov	r0, r4
 800adfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae02:	f7ff bfad 	b.w	800ad60 <cleanup_glue>
 800ae06:	5949      	ldr	r1, [r1, r5]
 800ae08:	b941      	cbnz	r1, 800ae1c <_reclaim_reent+0xa0>
 800ae0a:	3504      	adds	r5, #4
 800ae0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae0e:	2d80      	cmp	r5, #128	; 0x80
 800ae10:	68d9      	ldr	r1, [r3, #12]
 800ae12:	d1f8      	bne.n	800ae06 <_reclaim_reent+0x8a>
 800ae14:	4620      	mov	r0, r4
 800ae16:	f7ff fec7 	bl	800aba8 <_free_r>
 800ae1a:	e7ba      	b.n	800ad92 <_reclaim_reent+0x16>
 800ae1c:	680e      	ldr	r6, [r1, #0]
 800ae1e:	4620      	mov	r0, r4
 800ae20:	f7ff fec2 	bl	800aba8 <_free_r>
 800ae24:	4631      	mov	r1, r6
 800ae26:	e7ef      	b.n	800ae08 <_reclaim_reent+0x8c>
 800ae28:	2500      	movs	r5, #0
 800ae2a:	e7ef      	b.n	800ae0c <_reclaim_reent+0x90>
 800ae2c:	bd70      	pop	{r4, r5, r6, pc}
 800ae2e:	bf00      	nop
 800ae30:	20000038 	.word	0x20000038

0800ae34 <_sbrk_r>:
 800ae34:	b538      	push	{r3, r4, r5, lr}
 800ae36:	2300      	movs	r3, #0
 800ae38:	4d05      	ldr	r5, [pc, #20]	; (800ae50 <_sbrk_r+0x1c>)
 800ae3a:	4604      	mov	r4, r0
 800ae3c:	4608      	mov	r0, r1
 800ae3e:	602b      	str	r3, [r5, #0]
 800ae40:	f7f5 ffb2 	bl	8000da8 <_sbrk>
 800ae44:	1c43      	adds	r3, r0, #1
 800ae46:	d102      	bne.n	800ae4e <_sbrk_r+0x1a>
 800ae48:	682b      	ldr	r3, [r5, #0]
 800ae4a:	b103      	cbz	r3, 800ae4e <_sbrk_r+0x1a>
 800ae4c:	6023      	str	r3, [r4, #0]
 800ae4e:	bd38      	pop	{r3, r4, r5, pc}
 800ae50:	20003be4 	.word	0x20003be4

0800ae54 <__malloc_lock>:
 800ae54:	4801      	ldr	r0, [pc, #4]	; (800ae5c <__malloc_lock+0x8>)
 800ae56:	f7ff be7f 	b.w	800ab58 <__retarget_lock_acquire_recursive>
 800ae5a:	bf00      	nop
 800ae5c:	20003bd8 	.word	0x20003bd8

0800ae60 <__malloc_unlock>:
 800ae60:	4801      	ldr	r0, [pc, #4]	; (800ae68 <__malloc_unlock+0x8>)
 800ae62:	f7ff be7a 	b.w	800ab5a <__retarget_lock_release_recursive>
 800ae66:	bf00      	nop
 800ae68:	20003bd8 	.word	0x20003bd8

0800ae6c <_init>:
 800ae6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae6e:	bf00      	nop
 800ae70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae72:	bc08      	pop	{r3}
 800ae74:	469e      	mov	lr, r3
 800ae76:	4770      	bx	lr

0800ae78 <_fini>:
 800ae78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae7a:	bf00      	nop
 800ae7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae7e:	bc08      	pop	{r3}
 800ae80:	469e      	mov	lr, r3
 800ae82:	4770      	bx	lr
