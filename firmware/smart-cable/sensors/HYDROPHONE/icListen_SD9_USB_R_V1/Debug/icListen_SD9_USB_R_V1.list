
icListen_SD9_USB_R_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011920  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a0  08011b10  08011b10  00021b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080122b0  080122b0  000300ec  2**0
                  CONTENTS
  4 .ARM          00000008  080122b0  080122b0  000222b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080122b8  080122b8  000300ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080122b8  080122b8  000222b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080122bc  080122bc  000222bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  080122c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004808  200000ec  080123ac  000300ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200048f4  080123ac  000348f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028226  00000000  00000000  00030115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ec0  00000000  00000000  0005833b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fd0  00000000  00000000  0005e200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d98  00000000  00000000  000601d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000272b1  00000000  00000000  00061f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028992  00000000  00000000  00089219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbfab  00000000  00000000  000b1bab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017db56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a48  00000000  00000000  0017dba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200000ec 	.word	0x200000ec
 800020c:	00000000 	.word	0x00000000
 8000210:	08011af8 	.word	0x08011af8

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000f0 	.word	0x200000f0
 800022c:	08011af8 	.word	0x08011af8

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b976 	b.w	8000544 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	4688      	mov	r8, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14d      	bne.n	800031c <__udivmoddi4+0xac>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d968      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000286:	fab2 f282 	clz	r2, r2
 800028a:	b152      	cbz	r2, 80002a2 <__udivmoddi4+0x32>
 800028c:	fa01 f302 	lsl.w	r3, r1, r2
 8000290:	f1c2 0120 	rsb	r1, r2, #32
 8000294:	fa20 f101 	lsr.w	r1, r0, r1
 8000298:	fa0c fc02 	lsl.w	ip, ip, r2
 800029c:	ea41 0803 	orr.w	r8, r1, r3
 80002a0:	4094      	lsls	r4, r2
 80002a2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002a6:	fbb8 f7f1 	udiv	r7, r8, r1
 80002aa:	fa1f fe8c 	uxth.w	lr, ip
 80002ae:	fb01 8817 	mls	r8, r1, r7, r8
 80002b2:	fb07 f00e 	mul.w	r0, r7, lr
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002bc:	4298      	cmp	r0, r3
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x66>
 80002c0:	eb1c 0303 	adds.w	r3, ip, r3
 80002c4:	f107 35ff 	add.w	r5, r7, #4294967295
 80002c8:	f080 811e 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002cc:	4298      	cmp	r0, r3
 80002ce:	f240 811b 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d2:	3f02      	subs	r7, #2
 80002d4:	4463      	add	r3, ip
 80002d6:	1a1b      	subs	r3, r3, r0
 80002d8:	fbb3 f0f1 	udiv	r0, r3, r1
 80002dc:	fb01 3310 	mls	r3, r1, r0, r3
 80002e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002e4:	b2a4      	uxth	r4, r4
 80002e6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x94>
 80002ee:	eb1c 0404 	adds.w	r4, ip, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8109 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8106 	bls.w	800050c <__udivmoddi4+0x29c>
 8000300:	4464      	add	r4, ip
 8000302:	3802      	subs	r0, #2
 8000304:	2100      	movs	r1, #0
 8000306:	eba4 040e 	sub.w	r4, r4, lr
 800030a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800030e:	b11e      	cbz	r6, 8000318 <__udivmoddi4+0xa8>
 8000310:	2300      	movs	r3, #0
 8000312:	40d4      	lsrs	r4, r2
 8000314:	e9c6 4300 	strd	r4, r3, [r6]
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	428b      	cmp	r3, r1
 800031e:	d908      	bls.n	8000332 <__udivmoddi4+0xc2>
 8000320:	2e00      	cmp	r6, #0
 8000322:	f000 80ee 	beq.w	8000502 <__udivmoddi4+0x292>
 8000326:	2100      	movs	r1, #0
 8000328:	e9c6 0500 	strd	r0, r5, [r6]
 800032c:	4608      	mov	r0, r1
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f183 	clz	r1, r3
 8000336:	2900      	cmp	r1, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80fc 	bhi.w	800053c <__udivmoddi4+0x2cc>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb65 0303 	sbc.w	r3, r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	4698      	mov	r8, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d0e2      	beq.n	8000318 <__udivmoddi4+0xa8>
 8000352:	e9c6 4800 	strd	r4, r8, [r6]
 8000356:	e7df      	b.n	8000318 <__udivmoddi4+0xa8>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8091 	bne.w	8000488 <__udivmoddi4+0x218>
 8000366:	eba1 000c 	sub.w	r0, r1, ip
 800036a:	2101      	movs	r1, #1
 800036c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000370:	fa1f fe8c 	uxth.w	lr, ip
 8000374:	fbb0 f3f7 	udiv	r3, r0, r7
 8000378:	fb07 0013 	mls	r0, r7, r3, r0
 800037c:	0c25      	lsrs	r5, r4, #16
 800037e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	42a8      	cmp	r0, r5
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0505 	adds.w	r5, ip, r5
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	42a8      	cmp	r0, r5
 8000396:	f200 80ce 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 800039a:	4643      	mov	r3, r8
 800039c:	1a2d      	subs	r5, r5, r0
 800039e:	fbb5 f0f7 	udiv	r0, r5, r7
 80003a2:	fb07 5510 	mls	r5, r7, r0, r5
 80003a6:	fb0e fe00 	mul.w	lr, lr, r0
 80003aa:	b2a4      	uxth	r4, r4
 80003ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80b6 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 80003c4:	4628      	mov	r0, r5
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79e      	b.n	800030e <__udivmoddi4+0x9e>
 80003d0:	f1c1 0720 	rsb	r7, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa25 fa07 	lsr.w	sl, r5, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fbba f8f9 	udiv	r8, sl, r9
 80003ea:	fa20 f307 	lsr.w	r3, r0, r7
 80003ee:	fb09 aa18 	mls	sl, r9, r8, sl
 80003f2:	408d      	lsls	r5, r1
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	431d      	orrs	r5, r3
 80003fa:	fa00 f301 	lsl.w	r3, r0, r1
 80003fe:	fb08 f00e 	mul.w	r0, r8, lr
 8000402:	0c2c      	lsrs	r4, r5, #16
 8000404:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000408:	42a0      	cmp	r0, r4
 800040a:	fa02 f201 	lsl.w	r2, r2, r1
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	42a0      	cmp	r0, r4
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4464      	add	r4, ip
 8000428:	1a24      	subs	r4, r4, r0
 800042a:	fbb4 f0f9 	udiv	r0, r4, r9
 800042e:	fb09 4410 	mls	r4, r9, r0, r4
 8000432:	fb00 fe0e 	mul.w	lr, r0, lr
 8000436:	b2ad      	uxth	r5, r5
 8000438:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800043c:	45a6      	cmp	lr, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f100 35ff 	add.w	r5, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	45a6      	cmp	lr, r4
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4464      	add	r4, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9502 	umull	r9, r5, r0, r2
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	42ac      	cmp	r4, r5
 8000460:	46c8      	mov	r8, r9
 8000462:	46ae      	mov	lr, r5
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	2e00      	cmp	r6, #0
 800046a:	d069      	beq.n	8000540 <__udivmoddi4+0x2d0>
 800046c:	ebb3 0208 	subs.w	r2, r3, r8
 8000470:	eb64 040e 	sbc.w	r4, r4, lr
 8000474:	fa22 f301 	lsr.w	r3, r2, r1
 8000478:	fa04 f707 	lsl.w	r7, r4, r7
 800047c:	431f      	orrs	r7, r3
 800047e:	40cc      	lsrs	r4, r1
 8000480:	e9c6 7400 	strd	r7, r4, [r6]
 8000484:	2100      	movs	r1, #0
 8000486:	e747      	b.n	8000318 <__udivmoddi4+0xa8>
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	f1c2 0120 	rsb	r1, r2, #32
 8000490:	fa25 f301 	lsr.w	r3, r5, r1
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa20 f101 	lsr.w	r1, r0, r1
 800049c:	4095      	lsls	r5, r2
 800049e:	430d      	orrs	r5, r1
 80004a0:	fbb3 f1f7 	udiv	r1, r3, r7
 80004a4:	fb07 3311 	mls	r3, r7, r1, r3
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	0c28      	lsrs	r0, r5, #16
 80004ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004b2:	fb01 f30e 	mul.w	r3, r1, lr
 80004b6:	4283      	cmp	r3, r0
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0000 	adds.w	r0, ip, r0
 80004c2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	4283      	cmp	r3, r0
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3902      	subs	r1, #2
 80004ce:	4460      	add	r0, ip
 80004d0:	1ac0      	subs	r0, r0, r3
 80004d2:	fbb0 f3f7 	udiv	r3, r0, r7
 80004d6:	fb07 0013 	mls	r0, r7, r3, r0
 80004da:	b2ad      	uxth	r5, r5
 80004dc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004e0:	fb03 f00e 	mul.w	r0, r3, lr
 80004e4:	42a8      	cmp	r0, r5
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0505 	adds.w	r5, ip, r5
 80004ec:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	42a8      	cmp	r0, r5
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4465      	add	r5, ip
 80004fa:	1a28      	subs	r0, r5, r0
 80004fc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	4631      	mov	r1, r6
 8000504:	4630      	mov	r0, r6
 8000506:	e707      	b.n	8000318 <__udivmoddi4+0xa8>
 8000508:	462f      	mov	r7, r5
 800050a:	e6e4      	b.n	80002d6 <__udivmoddi4+0x66>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f9      	b.n	8000304 <__udivmoddi4+0x94>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb65 0e0c 	sbc.w	lr, r5, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4643      	mov	r3, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4628      	mov	r0, r5
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4641      	mov	r1, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	4464      	add	r4, ip
 8000532:	3802      	subs	r0, #2
 8000534:	e747      	b.n	80003c6 <__udivmoddi4+0x156>
 8000536:	3b02      	subs	r3, #2
 8000538:	4465      	add	r5, ip
 800053a:	e72f      	b.n	800039c <__udivmoddi4+0x12c>
 800053c:	4608      	mov	r0, r1
 800053e:	e706      	b.n	800034e <__udivmoddi4+0xde>
 8000540:	4631      	mov	r1, r6
 8000542:	e6e9      	b.n	8000318 <__udivmoddi4+0xa8>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000548:	b480      	push	{r7}
 800054a:	b085      	sub	sp, #20
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	4a06      	ldr	r2, [pc, #24]	; (8000570 <vApplicationGetIdleTaskMemory+0x28>)
 8000558:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	4a05      	ldr	r2, [pc, #20]	; (8000574 <vApplicationGetIdleTaskMemory+0x2c>)
 800055e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2280      	movs	r2, #128	; 0x80
 8000564:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000566:	bf00      	nop
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr
 8000570:	20000108 	.word	0x20000108
 8000574:	200001bc 	.word	0x200001bc

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b5b0      	push	{r4, r5, r7, lr}
 800057a:	b09a      	sub	sp, #104	; 0x68
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f001 f955 	bl	800182c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f861 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f977 	bl	8000878 <MX_GPIO_Init>
  MX_SPI1_Init();
 800058a:	f000 f8c7 	bl	800071c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800058e:	f000 f949 	bl	8000824 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000592:	f000 f8f9 	bl	8000788 <MX_TIM2_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of AppliEvent */
  osMessageQDef(AppliEvent, 16, uint16_t);
 8000596:	4b24      	ldr	r3, [pc, #144]	; (8000628 <main+0xb0>)
 8000598:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800059c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800059e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  AppliEventHandle = osMessageCreate(osMessageQ(AppliEvent), NULL);
 80005a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f00e f8e8 	bl	800e77e <osMessageCreate>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a1e      	ldr	r2, [pc, #120]	; (800062c <main+0xb4>)
 80005b2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005b4:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <main+0xb8>)
 80005b6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80005ba:	461d      	mov	r5, r3
 80005bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f00e f875 	bl	800e6be <osThreadCreate>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a17      	ldr	r2, [pc, #92]	; (8000634 <main+0xbc>)
 80005d8:	6013      	str	r3, [r2, #0]

  /* definition and creation of storage_t */
  osThreadDef(storage_t, storage_f, osPriorityNormal, 0, 1024);
 80005da:	4b17      	ldr	r3, [pc, #92]	; (8000638 <main+0xc0>)
 80005dc:	f107 0420 	add.w	r4, r7, #32
 80005e0:	461d      	mov	r5, r3
 80005e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  storage_tHandle = osThreadCreate(osThread(storage_t), NULL);
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2100      	movs	r1, #0
 80005f4:	4618      	mov	r0, r3
 80005f6:	f00e f862 	bl	800e6be <osThreadCreate>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a0f      	ldr	r2, [pc, #60]	; (800063c <main+0xc4>)
 80005fe:	6013      	str	r3, [r2, #0]

  /* definition and creation of sensor_t */
  osThreadDef(sensor_t, sensor_f, osPriorityNormal, 0, 128);
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <main+0xc8>)
 8000602:	1d3c      	adds	r4, r7, #4
 8000604:	461d      	mov	r5, r3
 8000606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800060e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sensor_tHandle = osThreadCreate(osThread(sensor_t), NULL);
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f00e f851 	bl	800e6be <osThreadCreate>
 800061c:	4603      	mov	r3, r0
 800061e:	4a09      	ldr	r2, [pc, #36]	; (8000644 <main+0xcc>)
 8000620:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000622:	f00e f845 	bl	800e6b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000626:	e7fe      	b.n	8000626 <main+0xae>
 8000628:	08011b34 	.word	0x08011b34
 800062c:	200004ac 	.word	0x200004ac
 8000630:	08011b44 	.word	0x08011b44
 8000634:	200004a0 	.word	0x200004a0
 8000638:	08011b60 	.word	0x08011b60
 800063c:	200004a4 	.word	0x200004a4
 8000640:	08011b7c 	.word	0x08011b7c
 8000644:	200004a8 	.word	0x200004a8

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b09c      	sub	sp, #112	; 0x70
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000652:	2238      	movs	r2, #56	; 0x38
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f010 fd72 	bl	8011140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2220      	movs	r2, #32
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f010 fd64 	bl	8011140 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000678:	2301      	movs	r3, #1
 800067a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800067c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000680:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8000682:	2304      	movs	r3, #4
 8000684:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000686:	2301      	movs	r3, #1
 8000688:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 800068a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000690:	2302      	movs	r3, #2
 8000692:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000694:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000698:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800069a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800069e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 80006a4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80006a8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV2;
 80006aa:	2310      	movs	r3, #16
 80006ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006b2:	4618      	mov	r0, r3
 80006b4:	f003 f9a8 	bl	8003a08 <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80006be:	f000 fad7 	bl	8000c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2302      	movs	r3, #2
 80006c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006dc:	2102      	movs	r1, #2
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 fca8 	bl	8004034 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006ea:	f000 fac1 	bl	8000c70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80006ee:	2310      	movs	r3, #16
 80006f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 80006f2:	2300      	movs	r3, #0
 80006f4:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	4618      	mov	r0, r3
 80006fa:	f003 fee3 	bl	80044c4 <HAL_RCCEx_PeriphCLKConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000704:	f000 fab4 	bl	8000c70 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000708:	4b03      	ldr	r3, [pc, #12]	; (8000718 <SystemClock_Config+0xd0>)
 800070a:	2201      	movs	r2, #1
 800070c:	601a      	str	r2, [r3, #0]
}
 800070e:	bf00      	nop
 8000710:	3770      	adds	r7, #112	; 0x70
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	42420070 	.word	0x42420070

0800071c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_SPI1_Init+0x64>)
 8000722:	4a18      	ldr	r2, [pc, #96]	; (8000784 <MX_SPI1_Init+0x68>)
 8000724:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000726:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_SPI1_Init+0x64>)
 8000728:	f44f 7282 	mov.w	r2, #260	; 0x104
 800072c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_SPI1_Init+0x64>)
 8000748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800074c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_SPI1_Init+0x64>)
 8000750:	2208      	movs	r2, #8
 8000752:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <MX_SPI1_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_SPI1_Init+0x64>)
 8000768:	220a      	movs	r2, #10
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_SPI1_Init+0x64>)
 800076e:	f003 ffdb 	bl	8004728 <HAL_SPI_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000778:	f000 fa7a 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200003bc 	.word	0x200003bc
 8000784:	40013000 	.word	0x40013000

08000788 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078e:	f107 0308 	add.w	r3, r7, #8
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079c:	463b      	mov	r3, r7
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007a4:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <MX_TIM2_Init+0x98>)
 80007a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39999;
 80007ac:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_TIM2_Init+0x98>)
 80007ae:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80007b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b4:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <MX_TIM2_Init+0x98>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007ba:	4b19      	ldr	r3, [pc, #100]	; (8000820 <MX_TIM2_Init+0x98>)
 80007bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c2:	4b17      	ldr	r3, [pc, #92]	; (8000820 <MX_TIM2_Init+0x98>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c8:	4b15      	ldr	r3, [pc, #84]	; (8000820 <MX_TIM2_Init+0x98>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007ce:	4814      	ldr	r0, [pc, #80]	; (8000820 <MX_TIM2_Init+0x98>)
 80007d0:	f004 fb7a 	bl	8004ec8 <HAL_TIM_Base_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80007da:	f000 fa49 	bl	8000c70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	4619      	mov	r1, r3
 80007ea:	480d      	ldr	r0, [pc, #52]	; (8000820 <MX_TIM2_Init+0x98>)
 80007ec:	f004 fd1e 	bl	800522c <HAL_TIM_ConfigClockSource>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80007f6:	f000 fa3b 	bl	8000c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000802:	463b      	mov	r3, r7
 8000804:	4619      	mov	r1, r3
 8000806:	4806      	ldr	r0, [pc, #24]	; (8000820 <MX_TIM2_Init+0x98>)
 8000808:	f004 fefa 	bl	8005600 <HAL_TIMEx_MasterConfigSynchronization>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000812:	f000 fa2d 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000414 	.word	0x20000414

08000824 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_USART1_UART_Init+0x4c>)
 800082a:	4a12      	ldr	r2, [pc, #72]	; (8000874 <MX_USART1_UART_Init+0x50>)
 800082c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <MX_USART1_UART_Init+0x4c>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_USART1_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_USART1_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_USART1_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_USART1_UART_Init+0x4c>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <MX_USART1_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_USART1_UART_Init+0x4c>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_USART1_UART_Init+0x4c>)
 800085c:	f004 ff48 	bl	80056f0 <HAL_UART_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000866:	f000 fa03 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2000045c 	.word	0x2000045c
 8000874:	40013800 	.word	0x40013800

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 0310 	add.w	r3, r7, #16
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088c:	4b36      	ldr	r3, [pc, #216]	; (8000968 <MX_GPIO_Init+0xf0>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a35      	ldr	r2, [pc, #212]	; (8000968 <MX_GPIO_Init+0xf0>)
 8000892:	f043 0320 	orr.w	r3, r3, #32
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b33      	ldr	r3, [pc, #204]	; (8000968 <MX_GPIO_Init+0xf0>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f003 0320 	and.w	r3, r3, #32
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a4:	4b30      	ldr	r3, [pc, #192]	; (8000968 <MX_GPIO_Init+0xf0>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a2f      	ldr	r2, [pc, #188]	; (8000968 <MX_GPIO_Init+0xf0>)
 80008aa:	f043 0310 	orr.w	r3, r3, #16
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b2d      	ldr	r3, [pc, #180]	; (8000968 <MX_GPIO_Init+0xf0>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f003 0310 	and.w	r3, r3, #16
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008bc:	4b2a      	ldr	r3, [pc, #168]	; (8000968 <MX_GPIO_Init+0xf0>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a29      	ldr	r2, [pc, #164]	; (8000968 <MX_GPIO_Init+0xf0>)
 80008c2:	f043 0304 	orr.w	r3, r3, #4
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b27      	ldr	r3, [pc, #156]	; (8000968 <MX_GPIO_Init+0xf0>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d4:	4b24      	ldr	r3, [pc, #144]	; (8000968 <MX_GPIO_Init+0xf0>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a23      	ldr	r2, [pc, #140]	; (8000968 <MX_GPIO_Init+0xf0>)
 80008da:	f043 0308 	orr.w	r3, r3, #8
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b21      	ldr	r3, [pc, #132]	; (8000968 <MX_GPIO_Init+0xf0>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f003 0308 	and.w	r3, r3, #8
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_SD3_GPIO_Port, SS_SD3_Pin, GPIO_PIN_SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	2102      	movs	r1, #2
 80008f0:	481e      	ldr	r0, [pc, #120]	; (800096c <MX_GPIO_Init+0xf4>)
 80008f2:	f001 fb97 	bl	8002024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin, GPIO_PIN_SET);
 80008f6:	2201      	movs	r2, #1
 80008f8:	2186      	movs	r1, #134	; 0x86
 80008fa:	481d      	ldr	r0, [pc, #116]	; (8000970 <MX_GPIO_Init+0xf8>)
 80008fc:	f001 fb92 	bl	8002024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_VBUS_GPIO_Port, USB_VBUS_Pin, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	2101      	movs	r1, #1
 8000904:	481b      	ldr	r0, [pc, #108]	; (8000974 <MX_GPIO_Init+0xfc>)
 8000906:	f001 fb8d 	bl	8002024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SS_SD3_Pin */
  GPIO_InitStruct.Pin = SS_SD3_Pin;
 800090a:	2302      	movs	r3, #2
 800090c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2302      	movs	r3, #2
 8000918:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SS_SD3_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 0310 	add.w	r3, r7, #16
 800091e:	4619      	mov	r1, r3
 8000920:	4812      	ldr	r0, [pc, #72]	; (800096c <MX_GPIO_Init+0xf4>)
 8000922:	f001 f9fb 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : SS_SD1_Pin SS_SD2_Pin SS_SD4_Pin */
  GPIO_InitStruct.Pin = SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin;
 8000926:	2386      	movs	r3, #134	; 0x86
 8000928:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2302      	movs	r3, #2
 8000934:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 0310 	add.w	r3, r7, #16
 800093a:	4619      	mov	r1, r3
 800093c:	480c      	ldr	r0, [pc, #48]	; (8000970 <MX_GPIO_Init+0xf8>)
 800093e:	f001 f9ed 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000942:	2301      	movs	r3, #1
 8000944:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2302      	movs	r3, #2
 8000950:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 0310 	add.w	r3, r7, #16
 8000956:	4619      	mov	r1, r3
 8000958:	4806      	ldr	r0, [pc, #24]	; (8000974 <MX_GPIO_Init+0xfc>)
 800095a:	f001 f9df 	bl	8001d1c <HAL_GPIO_Init>

}
 800095e:	bf00      	nop
 8000960:	3720      	adds	r7, #32
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40021000 	.word	0x40021000
 800096c:	40011000 	.word	0x40011000
 8000970:	40010800 	.word	0x40010800
 8000974:	40010c00 	.word	0x40010c00

08000978 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_IT(&huart1,uart_tx_msg,1);
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr

0800098a <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b082      	sub	sp, #8
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000992:	f010 f8b9 	bl	8010b08 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000996:	2001      	movs	r0, #1
 8000998:	f00d fedd 	bl	800e756 <osDelay>
 800099c:	e7fb      	b.n	8000996 <StartDefaultTask+0xc>
	...

080009a0 <storage_f>:
* @retval None
*/

/* USER CODE END Header_storage_f */
void storage_f(void const * argument)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	f6ad 0de8 	subw	sp, sp, #2280	; 0x8e8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	f607 03e8 	addw	r3, r7, #2280	; 0x8e8
 80009ac:	f6a3 03e4 	subw	r3, r3, #2276	; 0x8e4
 80009b0:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN storage_f */

  osDelay(500);
 80009b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009b6:	f00d fece 	bl	800e756 <osDelay>
  HAL_UART_Transmit(&huart1,"FATFS start\n",12,100);
 80009ba:	2364      	movs	r3, #100	; 0x64
 80009bc:	220c      	movs	r2, #12
 80009be:	4962      	ldr	r1, [pc, #392]	; (8000b48 <storage_f+0x1a8>)
 80009c0:	4862      	ldr	r0, [pc, #392]	; (8000b4c <storage_f+0x1ac>)
 80009c2:	f004 fee2 	bl	800578a <HAL_UART_Transmit>

  cards_ss[0].sd_ss_pin=SS_SD1_Pin;
 80009c6:	4b62      	ldr	r3, [pc, #392]	; (8000b50 <storage_f+0x1b0>)
 80009c8:	2202      	movs	r2, #2
 80009ca:	801a      	strh	r2, [r3, #0]
  cards_ss[0].sd_ss_port=GPIOA;
 80009cc:	4b60      	ldr	r3, [pc, #384]	; (8000b50 <storage_f+0x1b0>)
 80009ce:	4a61      	ldr	r2, [pc, #388]	; (8000b54 <storage_f+0x1b4>)
 80009d0:	605a      	str	r2, [r3, #4]
  cards_ss[1].sd_ss_pin=SS_SD2_Pin;
 80009d2:	4b5f      	ldr	r3, [pc, #380]	; (8000b50 <storage_f+0x1b0>)
 80009d4:	2204      	movs	r2, #4
 80009d6:	811a      	strh	r2, [r3, #8]
  cards_ss[1].sd_ss_port=GPIOA;
 80009d8:	4b5d      	ldr	r3, [pc, #372]	; (8000b50 <storage_f+0x1b0>)
 80009da:	4a5e      	ldr	r2, [pc, #376]	; (8000b54 <storage_f+0x1b4>)
 80009dc:	60da      	str	r2, [r3, #12]
  cards_ss[2].sd_ss_pin=SS_SD3_Pin;
 80009de:	4b5c      	ldr	r3, [pc, #368]	; (8000b50 <storage_f+0x1b0>)
 80009e0:	2202      	movs	r2, #2
 80009e2:	821a      	strh	r2, [r3, #16]
  cards_ss[2].sd_ss_port=SS_SD3_GPIO_Port;
 80009e4:	4b5a      	ldr	r3, [pc, #360]	; (8000b50 <storage_f+0x1b0>)
 80009e6:	4a5c      	ldr	r2, [pc, #368]	; (8000b58 <storage_f+0x1b8>)
 80009e8:	615a      	str	r2, [r3, #20]
  cards_ss[3].sd_ss_pin=SS_SD4_Pin;
 80009ea:	4b59      	ldr	r3, [pc, #356]	; (8000b50 <storage_f+0x1b0>)
 80009ec:	2280      	movs	r2, #128	; 0x80
 80009ee:	831a      	strh	r2, [r3, #24]
  cards_ss[3].sd_ss_port=GPIOA;
 80009f0:	4b57      	ldr	r3, [pc, #348]	; (8000b50 <storage_f+0x1b0>)
 80009f2:	4a58      	ldr	r2, [pc, #352]	; (8000b54 <storage_f+0x1b4>)
 80009f4:	61da      	str	r2, [r3, #28]

  sd_init_lib();
 80009f6:	f000 f940 	bl	8000c7a <sd_init_lib>
  FATFS    fs0;
  FATFS    fs1;
  FATFS    fs2;
  FATFS    fs3;

  HAL_UART_Transmit(&huart1,"Mount0\n",7,100);
 80009fa:	2364      	movs	r3, #100	; 0x64
 80009fc:	2207      	movs	r2, #7
 80009fe:	4957      	ldr	r1, [pc, #348]	; (8000b5c <storage_f+0x1bc>)
 8000a00:	4852      	ldr	r0, [pc, #328]	; (8000b4c <storage_f+0x1ac>)
 8000a02:	f004 fec2 	bl	800578a <HAL_UART_Transmit>
  sd_init_disk(&fs0,"0:");
 8000a06:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8000a0a:	4955      	ldr	r1, [pc, #340]	; (8000b60 <storage_f+0x1c0>)
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 f93b 	bl	8000c88 <sd_init_disk>
  HAL_UART_Transmit(&huart1,"Mount1\n",7,100);
 8000a12:	2364      	movs	r3, #100	; 0x64
 8000a14:	2207      	movs	r2, #7
 8000a16:	4953      	ldr	r1, [pc, #332]	; (8000b64 <storage_f+0x1c4>)
 8000a18:	484c      	ldr	r0, [pc, #304]	; (8000b4c <storage_f+0x1ac>)
 8000a1a:	f004 feb6 	bl	800578a <HAL_UART_Transmit>
  sd_init_disk(&fs1,"1:");
 8000a1e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8000a22:	4951      	ldr	r1, [pc, #324]	; (8000b68 <storage_f+0x1c8>)
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 f92f 	bl	8000c88 <sd_init_disk>
  HAL_UART_Transmit(&huart1,"Mount2\n",7,100);
 8000a2a:	2364      	movs	r3, #100	; 0x64
 8000a2c:	2207      	movs	r2, #7
 8000a2e:	494f      	ldr	r1, [pc, #316]	; (8000b6c <storage_f+0x1cc>)
 8000a30:	4846      	ldr	r0, [pc, #280]	; (8000b4c <storage_f+0x1ac>)
 8000a32:	f004 feaa 	bl	800578a <HAL_UART_Transmit>
  sd_init_disk(&fs2,"2:");
 8000a36:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000a3a:	494d      	ldr	r1, [pc, #308]	; (8000b70 <storage_f+0x1d0>)
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 f923 	bl	8000c88 <sd_init_disk>
  HAL_UART_Transmit(&huart1,"Mount3\n",7,100);
 8000a42:	2364      	movs	r3, #100	; 0x64
 8000a44:	2207      	movs	r2, #7
 8000a46:	494b      	ldr	r1, [pc, #300]	; (8000b74 <storage_f+0x1d4>)
 8000a48:	4840      	ldr	r0, [pc, #256]	; (8000b4c <storage_f+0x1ac>)
 8000a4a:	f004 fe9e 	bl	800578a <HAL_UART_Transmit>
  sd_init_disk(&fs3,"3:");
 8000a4e:	f107 0308 	add.w	r3, r7, #8
 8000a52:	4949      	ldr	r1, [pc, #292]	; (8000b78 <storage_f+0x1d8>)
 8000a54:	4618      	mov	r0, r3
 8000a56:	f000 f917 	bl	8000c88 <sd_init_disk>

  HAL_UART_Transmit(&huart1,"Read0\n",6,100);
 8000a5a:	2364      	movs	r3, #100	; 0x64
 8000a5c:	2206      	movs	r2, #6
 8000a5e:	4947      	ldr	r1, [pc, #284]	; (8000b7c <storage_f+0x1dc>)
 8000a60:	483a      	ldr	r0, [pc, #232]	; (8000b4c <storage_f+0x1ac>)
 8000a62:	f004 fe92 	bl	800578a <HAL_UART_Transmit>
  sd_read_free_space(&fs0,"0:");
 8000a66:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8000a6a:	493d      	ldr	r1, [pc, #244]	; (8000b60 <storage_f+0x1c0>)
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 f973 	bl	8000d58 <sd_read_free_space>
  HAL_UART_Transmit(&huart1,"Read1\n",6,100);
 8000a72:	2364      	movs	r3, #100	; 0x64
 8000a74:	2206      	movs	r2, #6
 8000a76:	4942      	ldr	r1, [pc, #264]	; (8000b80 <storage_f+0x1e0>)
 8000a78:	4834      	ldr	r0, [pc, #208]	; (8000b4c <storage_f+0x1ac>)
 8000a7a:	f004 fe86 	bl	800578a <HAL_UART_Transmit>
  sd_read_free_space(&fs1,"1:");
 8000a7e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8000a82:	4939      	ldr	r1, [pc, #228]	; (8000b68 <storage_f+0x1c8>)
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 f967 	bl	8000d58 <sd_read_free_space>
  HAL_UART_Transmit(&huart1,"Read2\n",6,100);
 8000a8a:	2364      	movs	r3, #100	; 0x64
 8000a8c:	2206      	movs	r2, #6
 8000a8e:	493d      	ldr	r1, [pc, #244]	; (8000b84 <storage_f+0x1e4>)
 8000a90:	482e      	ldr	r0, [pc, #184]	; (8000b4c <storage_f+0x1ac>)
 8000a92:	f004 fe7a 	bl	800578a <HAL_UART_Transmit>
  sd_read_free_space(&fs2,"2:");
 8000a96:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000a9a:	4935      	ldr	r1, [pc, #212]	; (8000b70 <storage_f+0x1d0>)
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 f95b 	bl	8000d58 <sd_read_free_space>
  HAL_UART_Transmit(&huart1,"Read3\n",6,100);
 8000aa2:	2364      	movs	r3, #100	; 0x64
 8000aa4:	2206      	movs	r2, #6
 8000aa6:	4938      	ldr	r1, [pc, #224]	; (8000b88 <storage_f+0x1e8>)
 8000aa8:	4828      	ldr	r0, [pc, #160]	; (8000b4c <storage_f+0x1ac>)
 8000aaa:	f004 fe6e 	bl	800578a <HAL_UART_Transmit>
  sd_read_free_space(&fs3,"3:");
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	4931      	ldr	r1, [pc, #196]	; (8000b78 <storage_f+0x1d8>)
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 f94f 	bl	8000d58 <sd_read_free_space>

  //wav_file_open(&wav_file1,"0:test1.wav");
  //wav_file_open(&wav_file2,"1:test2.wav");
  wav_file_open(&wav_file3,"2:test3.wav");
 8000aba:	4934      	ldr	r1, [pc, #208]	; (8000b8c <storage_f+0x1ec>)
 8000abc:	4834      	ldr	r0, [pc, #208]	; (8000b90 <storage_f+0x1f0>)
 8000abe:	f000 fd85 	bl	80015cc <wav_file_open>
  wav_file_open(&wav_file4,"3:test4.wav");
 8000ac2:	4934      	ldr	r1, [pc, #208]	; (8000b94 <storage_f+0x1f4>)
 8000ac4:	4834      	ldr	r0, [pc, #208]	; (8000b98 <storage_f+0x1f8>)
 8000ac6:	f000 fd81 	bl	80015cc <wav_file_open>

  //wav_file_write(&wav_file1,"Test1.wav",8);
  //wav_file_write(&wav_file2,"Test2.wav",8);
  wav_file_write(&wav_file3,"Test3.wav",8);
 8000aca:	2208      	movs	r2, #8
 8000acc:	4933      	ldr	r1, [pc, #204]	; (8000b9c <storage_f+0x1fc>)
 8000ace:	4830      	ldr	r0, [pc, #192]	; (8000b90 <storage_f+0x1f0>)
 8000ad0:	f000 fdf1 	bl	80016b6 <wav_file_write>
  wav_file_write(&wav_file4,"Test4.wav",8);
 8000ad4:	2208      	movs	r2, #8
 8000ad6:	4932      	ldr	r1, [pc, #200]	; (8000ba0 <storage_f+0x200>)
 8000ad8:	482f      	ldr	r0, [pc, #188]	; (8000b98 <storage_f+0x1f8>)
 8000ada:	f000 fdec 	bl	80016b6 <wav_file_write>

  //wav_file_close(&wav_file1);
  //wav_file_close(&wav_file2);
  wav_file_close(&wav_file3);
 8000ade:	482c      	ldr	r0, [pc, #176]	; (8000b90 <storage_f+0x1f0>)
 8000ae0:	f000 fdbe 	bl	8001660 <wav_file_close>
  wav_file_close(&wav_file4);
 8000ae4:	482c      	ldr	r0, [pc, #176]	; (8000b98 <storage_f+0x1f8>)
 8000ae6:	f000 fdbb 	bl	8001660 <wav_file_close>

  HAL_UART_Transmit(&huart1,"read SD1\n",9,100);
 8000aea:	2364      	movs	r3, #100	; 0x64
 8000aec:	2209      	movs	r2, #9
 8000aee:	492d      	ldr	r1, [pc, #180]	; (8000ba4 <storage_f+0x204>)
 8000af0:	4816      	ldr	r0, [pc, #88]	; (8000b4c <storage_f+0x1ac>)
 8000af2:	f004 fe4a 	bl	800578a <HAL_UART_Transmit>
  readDir("0:/");
 8000af6:	482c      	ldr	r0, [pc, #176]	; (8000ba8 <storage_f+0x208>)
 8000af8:	f000 fdf8 	bl	80016ec <readDir>
  HAL_UART_Transmit(&huart1,"read SD2\n",9,100);
 8000afc:	2364      	movs	r3, #100	; 0x64
 8000afe:	2209      	movs	r2, #9
 8000b00:	492a      	ldr	r1, [pc, #168]	; (8000bac <storage_f+0x20c>)
 8000b02:	4812      	ldr	r0, [pc, #72]	; (8000b4c <storage_f+0x1ac>)
 8000b04:	f004 fe41 	bl	800578a <HAL_UART_Transmit>
  readDir("1:/");
 8000b08:	4829      	ldr	r0, [pc, #164]	; (8000bb0 <storage_f+0x210>)
 8000b0a:	f000 fdef 	bl	80016ec <readDir>
  HAL_UART_Transmit(&huart1,"read SD3\n",9,100);
 8000b0e:	2364      	movs	r3, #100	; 0x64
 8000b10:	2209      	movs	r2, #9
 8000b12:	4928      	ldr	r1, [pc, #160]	; (8000bb4 <storage_f+0x214>)
 8000b14:	480d      	ldr	r0, [pc, #52]	; (8000b4c <storage_f+0x1ac>)
 8000b16:	f004 fe38 	bl	800578a <HAL_UART_Transmit>
  readDir("2:/");
 8000b1a:	4827      	ldr	r0, [pc, #156]	; (8000bb8 <storage_f+0x218>)
 8000b1c:	f000 fde6 	bl	80016ec <readDir>
  HAL_UART_Transmit(&huart1,"read SD4\n",9,100);
 8000b20:	2364      	movs	r3, #100	; 0x64
 8000b22:	2209      	movs	r2, #9
 8000b24:	4925      	ldr	r1, [pc, #148]	; (8000bbc <storage_f+0x21c>)
 8000b26:	4809      	ldr	r0, [pc, #36]	; (8000b4c <storage_f+0x1ac>)
 8000b28:	f004 fe2f 	bl	800578a <HAL_UART_Transmit>
  readDir("3:/");
 8000b2c:	4824      	ldr	r0, [pc, #144]	; (8000bc0 <storage_f+0x220>)
 8000b2e:	f000 fddd 	bl	80016ec <readDir>

  HAL_UART_Transmit(&huart1,"FATFS finished\n",15,100);
 8000b32:	2364      	movs	r3, #100	; 0x64
 8000b34:	220f      	movs	r2, #15
 8000b36:	4923      	ldr	r1, [pc, #140]	; (8000bc4 <storage_f+0x224>)
 8000b38:	4804      	ldr	r0, [pc, #16]	; (8000b4c <storage_f+0x1ac>)
 8000b3a:	f004 fe26 	bl	800578a <HAL_UART_Transmit>

  /* Infinite loop */
  for(;;)
  {
	//readDir();
    osDelay(200);
 8000b3e:	20c8      	movs	r0, #200	; 0xc8
 8000b40:	f00d fe09 	bl	800e756 <osDelay>
 8000b44:	e7fb      	b.n	8000b3e <storage_f+0x19e>
 8000b46:	bf00      	nop
 8000b48:	08011b98 	.word	0x08011b98
 8000b4c:	2000045c 	.word	0x2000045c
 8000b50:	20000c28 	.word	0x20000c28
 8000b54:	40010800 	.word	0x40010800
 8000b58:	40011000 	.word	0x40011000
 8000b5c:	08011ba8 	.word	0x08011ba8
 8000b60:	08011bb0 	.word	0x08011bb0
 8000b64:	08011bb4 	.word	0x08011bb4
 8000b68:	08011bbc 	.word	0x08011bbc
 8000b6c:	08011bc0 	.word	0x08011bc0
 8000b70:	08011bc8 	.word	0x08011bc8
 8000b74:	08011bcc 	.word	0x08011bcc
 8000b78:	08011bd4 	.word	0x08011bd4
 8000b7c:	08011bd8 	.word	0x08011bd8
 8000b80:	08011be0 	.word	0x08011be0
 8000b84:	08011be8 	.word	0x08011be8
 8000b88:	08011bf0 	.word	0x08011bf0
 8000b8c:	08011bf8 	.word	0x08011bf8
 8000b90:	200004b0 	.word	0x200004b0
 8000b94:	08011c04 	.word	0x08011c04
 8000b98:	20000868 	.word	0x20000868
 8000b9c:	08011c10 	.word	0x08011c10
 8000ba0:	08011c1c 	.word	0x08011c1c
 8000ba4:	08011c28 	.word	0x08011c28
 8000ba8:	08011c34 	.word	0x08011c34
 8000bac:	08011c38 	.word	0x08011c38
 8000bb0:	08011c44 	.word	0x08011c44
 8000bb4:	08011c48 	.word	0x08011c48
 8000bb8:	08011c54 	.word	0x08011c54
 8000bbc:	08011c58 	.word	0x08011c58
 8000bc0:	08011c64 	.word	0x08011c64
 8000bc4:	08011c68 	.word	0x08011c68

08000bc8 <sensor_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensor_f */
void sensor_f(void const * argument)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensor_f */
  /* Infinite loop */
  /* USER CODE BEGIN 5 */

  MX_USB_HOST_Init();
 8000bd0:	f00f ff9a 	bl	8010b08 <MX_USB_HOST_Init>

  osEvent event;
  /* Infinite loop */
  for(;;)
  {
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 8000bd4:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <sensor_f+0x70>)
 8000bd6:	6819      	ldr	r1, [r3, #0]
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000be0:	4618      	mov	r0, r3
 8000be2:	f00d fe35 	bl	800e850 <osMessageGet>

	  if(event.status == osEventMessage)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	2b10      	cmp	r3, #16
 8000bea:	d120      	bne.n	8000c2e <sensor_f+0x66>
	  {
		switch(event.value.v)
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	2b03      	cmp	r3, #3
 8000bf0:	d006      	beq.n	8000c00 <sensor_f+0x38>
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	d81d      	bhi.n	8000c32 <sensor_f+0x6a>
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d012      	beq.n	8000c20 <sensor_f+0x58>
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d007      	beq.n	8000c0e <sensor_f+0x46>
		 case APPLICATION_START:
		   HAL_UART_Transmit(&huart1,"st",2,100);
		 break;

		 default:
		 break;
 8000bfe:	e018      	b.n	8000c32 <sensor_f+0x6a>
		  HAL_UART_Transmit(&huart1,"ds",2,100);
 8000c00:	2364      	movs	r3, #100	; 0x64
 8000c02:	2202      	movs	r2, #2
 8000c04:	490d      	ldr	r1, [pc, #52]	; (8000c3c <sensor_f+0x74>)
 8000c06:	480e      	ldr	r0, [pc, #56]	; (8000c40 <sensor_f+0x78>)
 8000c08:	f004 fdbf 	bl	800578a <HAL_UART_Transmit>
		 break;
 8000c0c:	e012      	b.n	8000c34 <sensor_f+0x6c>
		   HAL_UART_Transmit(&huart1,"rd",2,100);
 8000c0e:	2364      	movs	r3, #100	; 0x64
 8000c10:	2202      	movs	r2, #2
 8000c12:	490c      	ldr	r1, [pc, #48]	; (8000c44 <sensor_f+0x7c>)
 8000c14:	480a      	ldr	r0, [pc, #40]	; (8000c40 <sensor_f+0x78>)
 8000c16:	f004 fdb8 	bl	800578a <HAL_UART_Transmit>
		   send_function();
 8000c1a:	f00f ff47 	bl	8010aac <send_function>
		 break;
 8000c1e:	e009      	b.n	8000c34 <sensor_f+0x6c>
		   HAL_UART_Transmit(&huart1,"st",2,100);
 8000c20:	2364      	movs	r3, #100	; 0x64
 8000c22:	2202      	movs	r2, #2
 8000c24:	4908      	ldr	r1, [pc, #32]	; (8000c48 <sensor_f+0x80>)
 8000c26:	4806      	ldr	r0, [pc, #24]	; (8000c40 <sensor_f+0x78>)
 8000c28:	f004 fdaf 	bl	800578a <HAL_UART_Transmit>
		 break;
 8000c2c:	e002      	b.n	8000c34 <sensor_f+0x6c>
		 }
	   }
 8000c2e:	bf00      	nop
 8000c30:	e7d0      	b.n	8000bd4 <sensor_f+0xc>
		 break;
 8000c32:	bf00      	nop
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 8000c34:	e7ce      	b.n	8000bd4 <sensor_f+0xc>
 8000c36:	bf00      	nop
 8000c38:	200004ac 	.word	0x200004ac
 8000c3c:	08011c78 	.word	0x08011c78
 8000c40:	2000045c 	.word	0x2000045c
 8000c44:	08011c7c 	.word	0x08011c7c
 8000c48:	08011c80 	.word	0x08011c80

08000c4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d101      	bne.n	8000c62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c5e:	f000 fdfb 	bl	8001858 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40012c00 	.word	0x40012c00

08000c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c74:	b672      	cpsid	i
}
 8000c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <Error_Handler+0x8>

08000c7a <sd_init_lib>:
extern SPI_HandleTypeDef hspi1;
extern UART_HandleTypeDef huart1;
extern volatile uint16_t htim2;

void sd_init_lib()
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	af00      	add	r7, sp, #0
 MX_FATFS_Init();
 8000c7e:	f006 f891 	bl	8006da4 <MX_FATFS_Init>
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <sd_init_disk>:

void sd_init_disk(FATFS*    fs,char* path)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]

  FRESULT res;

  res=f_mount(fs,path,1);
 8000c92:	2201      	movs	r2, #1
 8000c94:	6839      	ldr	r1, [r7, #0]
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f00b ffea 	bl	800cc70 <f_mount>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	73fb      	strb	r3, [r7, #15]

  if(res){
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d00f      	beq.n	8000cc6 <sd_init_disk+0x3e>
   sprintf(tt,"Mount error %d.\n",res);
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4909      	ldr	r1, [pc, #36]	; (8000cd0 <sd_init_disk+0x48>)
 8000cac:	4809      	ldr	r0, [pc, #36]	; (8000cd4 <sd_init_disk+0x4c>)
 8000cae:	f010 fba5 	bl	80113fc <siprintf>
   HAL_UART_Transmit(&huart1,tt,strlen(tt),200);
 8000cb2:	4808      	ldr	r0, [pc, #32]	; (8000cd4 <sd_init_disk+0x4c>)
 8000cb4:	f7ff fabc 	bl	8000230 <strlen>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	23c8      	movs	r3, #200	; 0xc8
 8000cbe:	4905      	ldr	r1, [pc, #20]	; (8000cd4 <sd_init_disk+0x4c>)
 8000cc0:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <sd_init_disk+0x50>)
 8000cc2:	f004 fd62 	bl	800578a <HAL_UART_Transmit>

  }
}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	08011c84 	.word	0x08011c84
 8000cd4:	20000c48 	.word	0x20000c48
 8000cd8:	2000045c 	.word	0x2000045c

08000cdc <sd_ss_set_active>:

void sd_ss_set_active(uint8_t drv)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
  active_sd_ss_pin=cards_ss[drv].sd_ss_pin;
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <sd_ss_set_active+0x30>)
 8000cea:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <sd_ss_set_active+0x34>)
 8000cf0:	801a      	strh	r2, [r3, #0]
  active_sd_ss_port=cards_ss[drv].sd_ss_port;
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <sd_ss_set_active+0x30>)
 8000cf6:	00db      	lsls	r3, r3, #3
 8000cf8:	4413      	add	r3, r2
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	4a05      	ldr	r2, [pc, #20]	; (8000d14 <sd_ss_set_active+0x38>)
 8000cfe:	6013      	str	r3, [r2, #0]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000c28 	.word	0x20000c28
 8000d10:	20000c22 	.word	0x20000c22
 8000d14:	20000c24 	.word	0x20000c24

08000d18 <sd_ss_active_pin_down>:

void sd_ss_active_pin_down()
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(active_sd_ss_port, active_sd_ss_pin, GPIO_PIN_RESET);
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <sd_ss_active_pin_down+0x18>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <sd_ss_active_pin_down+0x1c>)
 8000d22:	8811      	ldrh	r1, [r2, #0]
 8000d24:	2200      	movs	r2, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f001 f97c 	bl	8002024 <HAL_GPIO_WritePin>
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000c24 	.word	0x20000c24
 8000d34:	20000c22 	.word	0x20000c22

08000d38 <sd_ss_active_pin_up>:
void sd_ss_active_pin_up()
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(active_sd_ss_port, active_sd_ss_pin, GPIO_PIN_SET);
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <sd_ss_active_pin_up+0x18>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <sd_ss_active_pin_up+0x1c>)
 8000d42:	8811      	ldrh	r1, [r2, #0]
 8000d44:	2201      	movs	r2, #1
 8000d46:	4618      	mov	r0, r3
 8000d48:	f001 f96c 	bl	8002024 <HAL_GPIO_WritePin>
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000c24 	.word	0x20000c24
 8000d54:	20000c22 	.word	0x20000c22

08000d58 <sd_read_free_space>:

void sd_read_free_space(FATFS* fs,char* path)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
	FRESULT res;



	/* Get volume information and free clusters of drive 1 */
	res = f_getfree(path, &fre_clust, &fs);
 8000d62:	1d3a      	adds	r2, r7, #4
 8000d64:	f107 0308 	add.w	r3, r7, #8
 8000d68:	4619      	mov	r1, r3
 8000d6a:	6838      	ldr	r0, [r7, #0]
 8000d6c:	f00d fa5a 	bl	800e224 <f_getfree>
 8000d70:	4603      	mov	r3, r0
 8000d72:	75fb      	strb	r3, [r7, #23]
	if (res){
 8000d74:	7dfb      	ldrb	r3, [r7, #23]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d00e      	beq.n	8000d98 <sd_read_free_space+0x40>
		sprintf(tt,"Get free error.\n");
 8000d7a:	491a      	ldr	r1, [pc, #104]	; (8000de4 <sd_read_free_space+0x8c>)
 8000d7c:	481a      	ldr	r0, [pc, #104]	; (8000de8 <sd_read_free_space+0x90>)
 8000d7e:	f010 fb3d 	bl	80113fc <siprintf>
		HAL_UART_Transmit(&huart1,tt,strlen(tt),200);
 8000d82:	4819      	ldr	r0, [pc, #100]	; (8000de8 <sd_read_free_space+0x90>)
 8000d84:	f7ff fa54 	bl	8000230 <strlen>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	23c8      	movs	r3, #200	; 0xc8
 8000d8e:	4916      	ldr	r1, [pc, #88]	; (8000de8 <sd_read_free_space+0x90>)
 8000d90:	4816      	ldr	r0, [pc, #88]	; (8000dec <sd_read_free_space+0x94>)
 8000d92:	f004 fcfa 	bl	800578a <HAL_UART_Transmit>
	sprintf(tt,"%10lu KiB total drive space.\n%10lu KiB available.\n", tot_sect / 2, fre_sect / 2);
	HAL_UART_Transmit(&huart1,tt,strlen(tt),200);
	}


}
 8000d96:	e020      	b.n	8000dda <sd_read_free_space+0x82>
	tot_sect = (fs->n_fatent - 2) * fs->csize;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	69db      	ldr	r3, [r3, #28]
 8000d9c:	3b02      	subs	r3, #2
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	8952      	ldrh	r2, [r2, #10]
 8000da2:	fb02 f303 	mul.w	r3, r2, r3
 8000da6:	613b      	str	r3, [r7, #16]
	fre_sect = fre_clust * fs->csize;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	895b      	ldrh	r3, [r3, #10]
 8000dac:	461a      	mov	r2, r3
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	fb02 f303 	mul.w	r3, r2, r3
 8000db4:	60fb      	str	r3, [r7, #12]
	sprintf(tt,"%10lu KiB total drive space.\n%10lu KiB available.\n", tot_sect / 2, fre_sect / 2);
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	085a      	lsrs	r2, r3, #1
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	085b      	lsrs	r3, r3, #1
 8000dbe:	490c      	ldr	r1, [pc, #48]	; (8000df0 <sd_read_free_space+0x98>)
 8000dc0:	4809      	ldr	r0, [pc, #36]	; (8000de8 <sd_read_free_space+0x90>)
 8000dc2:	f010 fb1b 	bl	80113fc <siprintf>
	HAL_UART_Transmit(&huart1,tt,strlen(tt),200);
 8000dc6:	4808      	ldr	r0, [pc, #32]	; (8000de8 <sd_read_free_space+0x90>)
 8000dc8:	f7ff fa32 	bl	8000230 <strlen>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	23c8      	movs	r3, #200	; 0xc8
 8000dd2:	4905      	ldr	r1, [pc, #20]	; (8000de8 <sd_read_free_space+0x90>)
 8000dd4:	4805      	ldr	r0, [pc, #20]	; (8000dec <sd_read_free_space+0x94>)
 8000dd6:	f004 fcd8 	bl	800578a <HAL_UART_Transmit>
}
 8000dda:	bf00      	nop
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	08011c98 	.word	0x08011c98
 8000de8:	20000c48 	.word	0x20000c48
 8000dec:	2000045c 	.word	0x2000045c
 8000df0:	08011cac 	.word	0x08011cac

08000df4 <SD_cmd>:



//-----------------------------------------------
static uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
  uint8_t n, res;
  // ACMD<n> is the command sequense of CMD55-CMD<n>
  if (cmd & 0x80)
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	da0e      	bge.n	8000e26 <SD_cmd+0x32>
  {
    cmd &= 0x7F;
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e0e:	71fb      	strb	r3, [r7, #7]
    res = SD_cmd(CMD55, 0);
 8000e10:	2100      	movs	r1, #0
 8000e12:	2077      	movs	r0, #119	; 0x77
 8000e14:	f7ff ffee 	bl	8000df4 <SD_cmd>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	73bb      	strb	r3, [r7, #14]
    if (res > 1) return res;
 8000e1c:	7bbb      	ldrb	r3, [r7, #14]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d901      	bls.n	8000e26 <SD_cmd+0x32>
 8000e22:	7bbb      	ldrb	r3, [r7, #14]
 8000e24:	e043      	b.n	8000eae <SD_cmd+0xba>
  }
  // Select the card
  SS_SD_DESELECT();
 8000e26:	f7ff ff87 	bl	8000d38 <sd_ss_active_pin_up>
  SPI_ReceiveByte();
 8000e2a:	f000 f94a 	bl	80010c2 <SPI_ReceiveByte>

  SS_SD_SELECT();
 8000e2e:	f7ff ff73 	bl	8000d18 <sd_ss_active_pin_down>
  SPI_ReceiveByte();
 8000e32:	f000 f946 	bl	80010c2 <SPI_ReceiveByte>
  // Send a command packet
  SPI_SendByte(cmd); // Start + Command index
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 f935 	bl	80010a8 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 24)); // Argument[31..24]
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	0e1b      	lsrs	r3, r3, #24
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 f92f 	bl	80010a8 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 16)); // Argument[23..16]
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	0c1b      	lsrs	r3, r3, #16
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 f929 	bl	80010a8 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 8)); // Argument[15..8]
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	0a1b      	lsrs	r3, r3, #8
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 f923 	bl	80010a8 <SPI_SendByte>
  SPI_SendByte((uint8_t)arg); // Argument[7..0]
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 f91e 	bl	80010a8 <SPI_SendByte>

  n = 0x01; // Dummy CRC + Stop
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0) {n = 0x95;} // Valid CRC for CMD0(0)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	2b40      	cmp	r3, #64	; 0x40
 8000e74:	d101      	bne.n	8000e7a <SD_cmd+0x86>
 8000e76:	2395      	movs	r3, #149	; 0x95
 8000e78:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD8) {n = 0x87;} // Valid CRC for CMD8(0x1AA)
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	2b48      	cmp	r3, #72	; 0x48
 8000e7e:	d101      	bne.n	8000e84 <SD_cmd+0x90>
 8000e80:	2387      	movs	r3, #135	; 0x87
 8000e82:	73fb      	strb	r3, [r7, #15]
  SPI_SendByte(n);
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 f90e 	bl	80010a8 <SPI_SendByte>
  // Receive a command response
  n = 10; // Wait for a valid response in timeout of 10 attempts
 8000e8c:	230a      	movs	r3, #10
 8000e8e:	73fb      	strb	r3, [r7, #15]
  do {
    res = SPI_ReceiveByte();
 8000e90:	f000 f917 	bl	80010c2 <SPI_ReceiveByte>
 8000e94:	4603      	mov	r3, r0
 8000e96:	73bb      	strb	r3, [r7, #14]
  } while ((res & 0x80) && --n);
 8000e98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	da05      	bge.n	8000eac <SD_cmd+0xb8>
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	73fb      	strb	r3, [r7, #15]
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1f1      	bne.n	8000e90 <SD_cmd+0x9c>
  return res;
 8000eac:	7bbb      	ldrb	r3, [r7, #14]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <sd_ini>:
//-----------------------------------------------

uint8_t sd_ini(void)
{
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
	  uint8_t i, cmd;;
	  uint8_t ocr[4];
	  int16_t tmr;
	  uint32_t temp;
	  //LD_OFF;
	  sdinfo.type = 0;
 8000ebe:	4b57      	ldr	r3, [pc, #348]	; (800101c <sd_ini+0x164>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]

	  hspi1.Init.BaudRatePrescaler = temp;
	  HAL_SPI_Init(&hspi1);
	  */

	  SS_SD_SELECT();
 8000ec4:	f7ff ff28 	bl	8000d18 <sd_ss_active_pin_down>
	  if (SD_cmd(CMD0, 0) == 1) // Enter Idle state
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2040      	movs	r0, #64	; 0x40
 8000ecc:	f7ff ff92 	bl	8000df4 <SD_cmd>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	f040 809a 	bne.w	800100c <sd_ini+0x154>
	  {
		  SPI_Release();
 8000ed8:	f000 f900 	bl	80010dc <SPI_Release>
		  if (SD_cmd(CMD8, 0x1AA) == 1) // SDv2
 8000edc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000ee0:	2048      	movs	r0, #72	; 0x48
 8000ee2:	f7ff ff87 	bl	8000df4 <SD_cmd>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d157      	bne.n	8000f9c <sd_ini+0xe4>
		  {
			  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8000eec:	2300      	movs	r3, #0
 8000eee:	71fb      	strb	r3, [r7, #7]
 8000ef0:	e00c      	b.n	8000f0c <sd_ini+0x54>
 8000ef2:	79fc      	ldrb	r4, [r7, #7]
 8000ef4:	f000 f8e5 	bl	80010c2 <SPI_ReceiveByte>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	461a      	mov	r2, r3
 8000efc:	f104 0308 	add.w	r3, r4, #8
 8000f00:	443b      	add	r3, r7
 8000f02:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	71fb      	strb	r3, [r7, #7]
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	d9ef      	bls.n	8000ef2 <sd_ini+0x3a>

			    // Get trailing return value of R7 resp
			    if (ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 8000f12:	78bb      	ldrb	r3, [r7, #2]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d17b      	bne.n	8001010 <sd_ini+0x158>
 8000f18:	78fb      	ldrb	r3, [r7, #3]
 8000f1a:	2baa      	cmp	r3, #170	; 0xaa
 8000f1c:	d178      	bne.n	8001010 <sd_ini+0x158>
			    {
			    	for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--)
 8000f1e:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8000f22:	80bb      	strh	r3, [r7, #4]
 8000f24:	e005      	b.n	8000f32 <sd_ini+0x7a>
 8000f26:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	80bb      	strh	r3, [r7, #4]
 8000f32:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d007      	beq.n	8000f4a <sd_ini+0x92>
 8000f3a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000f3e:	20e9      	movs	r0, #233	; 0xe9
 8000f40:	f7ff ff58 	bl	8000df4 <SD_cmd>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d1ed      	bne.n	8000f26 <sd_ini+0x6e>
			    	    ; // Wait for leaving idle state (ACMD41 with HCS bit)
			    	if (tmr && SD_cmd(CMD58, 0) == 0)
 8000f4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d05e      	beq.n	8001010 <sd_ini+0x158>
 8000f52:	2100      	movs	r1, #0
 8000f54:	207a      	movs	r0, #122	; 0x7a
 8000f56:	f7ff ff4d 	bl	8000df4 <SD_cmd>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d157      	bne.n	8001010 <sd_ini+0x158>
			    	 { // Check CCS bit in the OCR
			    	  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8000f60:	2300      	movs	r3, #0
 8000f62:	71fb      	strb	r3, [r7, #7]
 8000f64:	e00c      	b.n	8000f80 <sd_ini+0xc8>
 8000f66:	79fc      	ldrb	r4, [r7, #7]
 8000f68:	f000 f8ab 	bl	80010c2 <SPI_ReceiveByte>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	f104 0308 	add.w	r3, r4, #8
 8000f74:	443b      	add	r3, r7
 8000f76:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	71fb      	strb	r3, [r7, #7]
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	2b03      	cmp	r3, #3
 8000f84:	d9ef      	bls.n	8000f66 <sd_ini+0xae>
			     	   sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 8000f86:	783b      	ldrb	r3, [r7, #0]
 8000f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <sd_ini+0xdc>
 8000f90:	220c      	movs	r2, #12
 8000f92:	e000      	b.n	8000f96 <sd_ini+0xde>
 8000f94:	2204      	movs	r2, #4
 8000f96:	4b21      	ldr	r3, [pc, #132]	; (800101c <sd_ini+0x164>)
 8000f98:	701a      	strb	r2, [r3, #0]
 8000f9a:	e039      	b.n	8001010 <sd_ini+0x158>
			    	}
			    }
		  }
		  else //SDv1 or MMCv3
		  {
			  if (SD_cmd(ACMD41, 0) <= 1)
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	20e9      	movs	r0, #233	; 0xe9
 8000fa0:	f7ff ff28 	bl	8000df4 <SD_cmd>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d805      	bhi.n	8000fb6 <sd_ini+0xfe>
			    {
			      sdinfo.type = CT_SD1; cmd = ACMD41; // SDv1
 8000faa:	4b1c      	ldr	r3, [pc, #112]	; (800101c <sd_ini+0x164>)
 8000fac:	2202      	movs	r2, #2
 8000fae:	701a      	strb	r2, [r3, #0]
 8000fb0:	23e9      	movs	r3, #233	; 0xe9
 8000fb2:	71bb      	strb	r3, [r7, #6]
 8000fb4:	e004      	b.n	8000fc0 <sd_ini+0x108>
			    }
			    else
			    {
			      sdinfo.type = CT_MMC; cmd = CMD1; // MMCv3
 8000fb6:	4b19      	ldr	r3, [pc, #100]	; (800101c <sd_ini+0x164>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	701a      	strb	r2, [r3, #0]
 8000fbc:	2341      	movs	r3, #65	; 0x41
 8000fbe:	71bb      	strb	r3, [r7, #6]
			    }
			    for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; // Wait for leaving idle state
 8000fc0:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8000fc4:	80bb      	strh	r3, [r7, #4]
 8000fc6:	e005      	b.n	8000fd4 <sd_ini+0x11c>
 8000fc8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	80bb      	strh	r3, [r7, #4]
 8000fd4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d007      	beq.n	8000fec <sd_ini+0x134>
 8000fdc:	79bb      	ldrb	r3, [r7, #6]
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff07 	bl	8000df4 <SD_cmd>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1ed      	bne.n	8000fc8 <sd_ini+0x110>
			    if (!tmr || SD_cmd(CMD16, 512) != 0) // Set R/W block length to 512
 8000fec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d007      	beq.n	8001004 <sd_ini+0x14c>
 8000ff4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ff8:	2050      	movs	r0, #80	; 0x50
 8000ffa:	f7ff fefb 	bl	8000df4 <SD_cmd>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d005      	beq.n	8001010 <sd_ini+0x158>
			    sdinfo.type = 0;
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <sd_ini+0x164>)
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
 800100a:	e001      	b.n	8001010 <sd_ini+0x158>

	  }
	  else
	  {

	    return 1;
 800100c:	2301      	movs	r3, #1
 800100e:	e000      	b.n	8001012 <sd_ini+0x15a>
	  }




  return 0;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	bd90      	pop	{r4, r7, pc}
 800101a:	bf00      	nop
 800101c:	20000c20 	.word	0x20000c20

08001020 <Error>:

//-----------------------------------------------
static void Error (void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  //LD_ON;
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <SPI_wait_ready>:
//-----------------------------------------------
//-----------------------------------------------
uint8_t SPI_wait_ready(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
  uint8_t res;
  uint16_t cnt;
  cnt=0;
 8001032:	2300      	movs	r3, #0
 8001034:	80fb      	strh	r3, [r7, #6]
  do {
    res=SPI_ReceiveByte();
 8001036:	f000 f844 	bl	80010c2 <SPI_ReceiveByte>
 800103a:	4603      	mov	r3, r0
 800103c:	717b      	strb	r3, [r7, #5]
    cnt++;
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	3301      	adds	r3, #1
 8001042:	80fb      	strh	r3, [r7, #6]
  } while ( (res!=0xFF)&&(cnt<0xFFFF) );
 8001044:	797b      	ldrb	r3, [r7, #5]
 8001046:	2bff      	cmp	r3, #255	; 0xff
 8001048:	d004      	beq.n	8001054 <SPI_wait_ready+0x28>
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001050:	4293      	cmp	r3, r2
 8001052:	d1f0      	bne.n	8001036 <SPI_wait_ready+0xa>
  if (cnt>=0xFFFF) return 1;
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800105a:	4293      	cmp	r3, r2
 800105c:	d101      	bne.n	8001062 <SPI_wait_ready+0x36>
 800105e:	2301      	movs	r3, #1
 8001060:	e000      	b.n	8001064 <SPI_wait_ready+0x38>
  return res;
 8001062:	797b      	ldrb	r3, [r7, #5]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <SPIx_WriteRead>:
//-----------------------------------------------

//-----------------------------------------------
uint8_t SPIx_WriteRead(uint8_t Byte)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af02      	add	r7, sp, #8
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 800107a:	f107 020f 	add.w	r2, r7, #15
 800107e:	1df9      	adds	r1, r7, #7
 8001080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2301      	movs	r3, #1
 8001088:	4806      	ldr	r0, [pc, #24]	; (80010a4 <SPIx_WriteRead+0x38>)
 800108a:	f003 fbd1 	bl	8004830 <HAL_SPI_TransmitReceive>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <SPIx_WriteRead+0x2c>
  {
    Error();
 8001094:	f7ff ffc4 	bl	8001020 <Error>
  }
  return receivedbyte;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200003bc 	.word	0x200003bc

080010a8 <SPI_SendByte>:
//-----------------------------------------------

//-----------------------------------------------
void SPI_SendByte(uint8_t bt)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
  SPIx_WriteRead(bt);
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ffd9 	bl	800106c <SPIx_WriteRead>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <SPI_ReceiveByte>:
//-----------------------------------------------
uint8_t SPI_ReceiveByte(void)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
  uint8_t bt = SPIx_WriteRead(0xFF);
 80010c8:	20ff      	movs	r0, #255	; 0xff
 80010ca:	f7ff ffcf 	bl	800106c <SPIx_WriteRead>
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
  return bt;
 80010d2:	79fb      	ldrb	r3, [r7, #7]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <SPI_Release>:
//-----------------------------------------------
void SPI_Release(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  SPIx_WriteRead(0xFF);
 80010e0:	20ff      	movs	r0, #255	; 0xff
 80010e2:	f7ff ffc3 	bl	800106c <SPIx_WriteRead>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}

080010ea <SD_Read_Block>:
//-----------------------------------------------

//-----------------------------------------------
uint8_t SD_Read_Block (uint8_t *buff, uint32_t lba)
{
 80010ea:	b590      	push	{r4, r7, lr}
 80010ec:	b085      	sub	sp, #20
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	6039      	str	r1, [r7, #0]
  uint8_t result;
  uint16_t cnt;

  result=SD_cmd (CMD17, lba);
 80010f4:	6839      	ldr	r1, [r7, #0]
 80010f6:	2051      	movs	r0, #81	; 0x51
 80010f8:	f7ff fe7c 	bl	8000df4 <SD_cmd>
 80010fc:	4603      	mov	r3, r0
 80010fe:	737b      	strb	r3, [r7, #13]
  if (result!=0x00){
 8001100:	7b7b      	ldrb	r3, [r7, #13]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SD_Read_Block+0x20>
	  return 5;
 8001106:	2305      	movs	r3, #5
 8001108:	e02f      	b.n	800116a <SD_Read_Block+0x80>
  }

  SPI_Release();
 800110a:	f7ff ffe7 	bl	80010dc <SPI_Release>
   cnt=0;
 800110e:	2300      	movs	r3, #0
 8001110:	81fb      	strh	r3, [r7, #14]
   do{
     result=SPI_ReceiveByte();
 8001112:	f7ff ffd6 	bl	80010c2 <SPI_ReceiveByte>
 8001116:	4603      	mov	r3, r0
 8001118:	737b      	strb	r3, [r7, #13]
     cnt++;
 800111a:	89fb      	ldrh	r3, [r7, #14]
 800111c:	3301      	adds	r3, #1
 800111e:	81fb      	strh	r3, [r7, #14]
   } while ( (result!=0xFE)&&(cnt<0xFFFF) );
 8001120:	7b7b      	ldrb	r3, [r7, #13]
 8001122:	2bfe      	cmp	r3, #254	; 0xfe
 8001124:	d004      	beq.n	8001130 <SD_Read_Block+0x46>
 8001126:	89fb      	ldrh	r3, [r7, #14]
 8001128:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800112c:	4293      	cmp	r3, r2
 800112e:	d1f0      	bne.n	8001112 <SD_Read_Block+0x28>
   if (cnt>=0xFFFF) {
 8001130:	89fb      	ldrh	r3, [r7, #14]
 8001132:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001136:	4293      	cmp	r3, r2
 8001138:	d101      	bne.n	800113e <SD_Read_Block+0x54>
	   return 5;
 800113a:	2305      	movs	r3, #5
 800113c:	e015      	b.n	800116a <SD_Read_Block+0x80>
   }
   for (cnt=0;cnt<512;cnt++) buff[cnt]=SPI_ReceiveByte();
 800113e:	2300      	movs	r3, #0
 8001140:	81fb      	strh	r3, [r7, #14]
 8001142:	e009      	b.n	8001158 <SD_Read_Block+0x6e>
 8001144:	89fb      	ldrh	r3, [r7, #14]
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	18d4      	adds	r4, r2, r3
 800114a:	f7ff ffba 	bl	80010c2 <SPI_ReceiveByte>
 800114e:	4603      	mov	r3, r0
 8001150:	7023      	strb	r3, [r4, #0]
 8001152:	89fb      	ldrh	r3, [r7, #14]
 8001154:	3301      	adds	r3, #1
 8001156:	81fb      	strh	r3, [r7, #14]
 8001158:	89fb      	ldrh	r3, [r7, #14]
 800115a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800115e:	d3f1      	bcc.n	8001144 <SD_Read_Block+0x5a>
   SPI_Release();
 8001160:	f7ff ffbc 	bl	80010dc <SPI_Release>
   SPI_Release();
 8001164:	f7ff ffba 	bl	80010dc <SPI_Release>



  return 0;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	bd90      	pop	{r4, r7, pc}

08001172 <SD_Write_Block>:
//-----------------------------------------------

//-----------------------------------------------
uint8_t SD_Write_Block (uint8_t *buff, uint32_t lba)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]

  uint8_t result;
  uint16_t cnt;
  result=SD_cmd(CMD24,lba);
 800117c:	6839      	ldr	r1, [r7, #0]
 800117e:	2058      	movs	r0, #88	; 0x58
 8001180:	f7ff fe38 	bl	8000df4 <SD_cmd>
 8001184:	4603      	mov	r3, r0
 8001186:	737b      	strb	r3, [r7, #13]
  if (result!=0x00){
 8001188:	7b7b      	ldrb	r3, [r7, #13]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SD_Write_Block+0x20>
	  return 6;
 800118e:	2306      	movs	r3, #6
 8001190:	e03d      	b.n	800120e <SD_Write_Block+0x9c>
  }
  SPI_Release();
 8001192:	f7ff ffa3 	bl	80010dc <SPI_Release>
  SPI_SendByte (0xFE);
 8001196:	20fe      	movs	r0, #254	; 0xfe
 8001198:	f7ff ff86 	bl	80010a8 <SPI_SendByte>
  for (cnt=0;cnt<512;cnt++) SPI_SendByte(buff[cnt]);
 800119c:	2300      	movs	r3, #0
 800119e:	81fb      	strh	r3, [r7, #14]
 80011a0:	e009      	b.n	80011b6 <SD_Write_Block+0x44>
 80011a2:	89fb      	ldrh	r3, [r7, #14]
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	4413      	add	r3, r2
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff7c 	bl	80010a8 <SPI_SendByte>
 80011b0:	89fb      	ldrh	r3, [r7, #14]
 80011b2:	3301      	adds	r3, #1
 80011b4:	81fb      	strh	r3, [r7, #14]
 80011b6:	89fb      	ldrh	r3, [r7, #14]
 80011b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011bc:	d3f1      	bcc.n	80011a2 <SD_Write_Block+0x30>
  SPI_Release();
 80011be:	f7ff ff8d 	bl	80010dc <SPI_Release>
  SPI_Release();
 80011c2:	f7ff ff8b 	bl	80010dc <SPI_Release>
  result=SPI_ReceiveByte();
 80011c6:	f7ff ff7c 	bl	80010c2 <SPI_ReceiveByte>
 80011ca:	4603      	mov	r3, r0
 80011cc:	737b      	strb	r3, [r7, #13]
  if ((result&0x05)!=0x05) {
 80011ce:	7b7b      	ldrb	r3, [r7, #13]
 80011d0:	f003 0305 	and.w	r3, r3, #5
 80011d4:	2b05      	cmp	r3, #5
 80011d6:	d001      	beq.n	80011dc <SD_Write_Block+0x6a>
	  return 6;
 80011d8:	2306      	movs	r3, #6
 80011da:	e018      	b.n	800120e <SD_Write_Block+0x9c>
  }
  cnt=0;
 80011dc:	2300      	movs	r3, #0
 80011de:	81fb      	strh	r3, [r7, #14]
  do {
    result=SPI_ReceiveByte();
 80011e0:	f7ff ff6f 	bl	80010c2 <SPI_ReceiveByte>
 80011e4:	4603      	mov	r3, r0
 80011e6:	737b      	strb	r3, [r7, #13]
    cnt++;
 80011e8:	89fb      	ldrh	r3, [r7, #14]
 80011ea:	3301      	adds	r3, #1
 80011ec:	81fb      	strh	r3, [r7, #14]
  } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 80011ee:	7b7b      	ldrb	r3, [r7, #13]
 80011f0:	2bff      	cmp	r3, #255	; 0xff
 80011f2:	d004      	beq.n	80011fe <SD_Write_Block+0x8c>
 80011f4:	89fb      	ldrh	r3, [r7, #14]
 80011f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d1f0      	bne.n	80011e0 <SD_Write_Block+0x6e>
  if (cnt>=0xFFFF) {
 80011fe:	89fb      	ldrh	r3, [r7, #14]
 8001200:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001204:	4293      	cmp	r3, r2
 8001206:	d101      	bne.n	800120c <SD_Write_Block+0x9a>
	  return 6;
 8001208:	2306      	movs	r3, #6
 800120a:	e000      	b.n	800120e <SD_Write_Block+0x9c>
  }

  return 0;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800121e:	4b18      	ldr	r3, [pc, #96]	; (8001280 <HAL_MspInit+0x68>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	4a17      	ldr	r2, [pc, #92]	; (8001280 <HAL_MspInit+0x68>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6193      	str	r3, [r2, #24]
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_MspInit+0x68>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_MspInit+0x68>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	4a11      	ldr	r2, [pc, #68]	; (8001280 <HAL_MspInit+0x68>)
 800123c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001240:	61d3      	str	r3, [r2, #28]
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <HAL_MspInit+0x68>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	210f      	movs	r1, #15
 8001252:	f06f 0001 	mvn.w	r0, #1
 8001256:	f000 fbf4 	bl	8001a42 <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800125a:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <HAL_MspInit+0x6c>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	4a04      	ldr	r2, [pc, #16]	; (8001284 <HAL_MspInit+0x6c>)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40021000 	.word	0x40021000
 8001284:	40010000 	.word	0x40010000

08001288 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a26      	ldr	r2, [pc, #152]	; (800133c <HAL_SPI_MspInit+0xb4>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d145      	bne.n	8001334 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012a8:	4b25      	ldr	r3, [pc, #148]	; (8001340 <HAL_SPI_MspInit+0xb8>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a24      	ldr	r2, [pc, #144]	; (8001340 <HAL_SPI_MspInit+0xb8>)
 80012ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b22      	ldr	r3, [pc, #136]	; (8001340 <HAL_SPI_MspInit+0xb8>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <HAL_SPI_MspInit+0xb8>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a1e      	ldr	r2, [pc, #120]	; (8001340 <HAL_SPI_MspInit+0xb8>)
 80012c6:	f043 0308 	orr.w	r3, r3, #8
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <HAL_SPI_MspInit+0xb8>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80012d8:	2328      	movs	r3, #40	; 0x28
 80012da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	4816      	ldr	r0, [pc, #88]	; (8001344 <HAL_SPI_MspInit+0xbc>)
 80012ec:	f000 fd16 	bl	8001d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012f0:	2310      	movs	r3, #16
 80012f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	4810      	ldr	r0, [pc, #64]	; (8001344 <HAL_SPI_MspInit+0xbc>)
 8001304:	f000 fd0a 	bl	8001d1c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <HAL_SPI_MspInit+0xc0>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <HAL_SPI_MspInit+0xc0>)
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	2105      	movs	r1, #5
 8001328:	2023      	movs	r0, #35	; 0x23
 800132a:	f000 fb8a 	bl	8001a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800132e:	2023      	movs	r0, #35	; 0x23
 8001330:	f000 fba3 	bl	8001a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	; 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40013000 	.word	0x40013000
 8001340:	40021000 	.word	0x40021000
 8001344:	40010c00 	.word	0x40010c00
 8001348:	40010000 	.word	0x40010000

0800134c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800135c:	d10b      	bne.n	8001376 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800135e:	4b08      	ldr	r3, [pc, #32]	; (8001380 <HAL_TIM_Base_MspInit+0x34>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	4a07      	ldr	r2, [pc, #28]	; (8001380 <HAL_TIM_Base_MspInit+0x34>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	61d3      	str	r3, [r2, #28]
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <HAL_TIM_Base_MspInit+0x34>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	40021000 	.word	0x40021000

08001384 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a20      	ldr	r2, [pc, #128]	; (8001420 <HAL_UART_MspInit+0x9c>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d139      	bne.n	8001418 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013a4:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <HAL_UART_MspInit+0xa0>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	4a1e      	ldr	r2, [pc, #120]	; (8001424 <HAL_UART_MspInit+0xa0>)
 80013aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ae:	6193      	str	r3, [r2, #24]
 80013b0:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <HAL_UART_MspInit+0xa0>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013bc:	4b19      	ldr	r3, [pc, #100]	; (8001424 <HAL_UART_MspInit+0xa0>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	4a18      	ldr	r2, [pc, #96]	; (8001424 <HAL_UART_MspInit+0xa0>)
 80013c2:	f043 0304 	orr.w	r3, r3, #4
 80013c6:	6193      	str	r3, [r2, #24]
 80013c8:	4b16      	ldr	r3, [pc, #88]	; (8001424 <HAL_UART_MspInit+0xa0>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013de:	2303      	movs	r3, #3
 80013e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e2:	f107 0310 	add.w	r3, r7, #16
 80013e6:	4619      	mov	r1, r3
 80013e8:	480f      	ldr	r0, [pc, #60]	; (8001428 <HAL_UART_MspInit+0xa4>)
 80013ea:	f000 fc97 	bl	8001d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fc:	f107 0310 	add.w	r3, r7, #16
 8001400:	4619      	mov	r1, r3
 8001402:	4809      	ldr	r0, [pc, #36]	; (8001428 <HAL_UART_MspInit+0xa4>)
 8001404:	f000 fc8a 	bl	8001d1c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	2105      	movs	r1, #5
 800140c:	2025      	movs	r0, #37	; 0x25
 800140e:	f000 fb18 	bl	8001a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001412:	2025      	movs	r0, #37	; 0x25
 8001414:	f000 fb31 	bl	8001a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001418:	bf00      	nop
 800141a:	3720      	adds	r7, #32
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40013800 	.word	0x40013800
 8001424:	40021000 	.word	0x40021000
 8001428:	40010800 	.word	0x40010800

0800142c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08c      	sub	sp, #48	; 0x30
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800143c:	2200      	movs	r2, #0
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	2019      	movs	r0, #25
 8001442:	f000 fafe 	bl	8001a42 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001446:	2019      	movs	r0, #25
 8001448:	f000 fb17 	bl	8001a7a <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <HAL_InitTick+0x9c>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	4a1d      	ldr	r2, [pc, #116]	; (80014c8 <HAL_InitTick+0x9c>)
 8001452:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001456:	6193      	str	r3, [r2, #24]
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <HAL_InitTick+0x9c>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001464:	f107 0210 	add.w	r2, r7, #16
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4611      	mov	r1, r2
 800146e:	4618      	mov	r0, r3
 8001470:	f002 ffda 	bl	8004428 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001474:	f002 ffc4 	bl	8004400 <HAL_RCC_GetPCLK2Freq>
 8001478:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800147a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800147c:	4a13      	ldr	r2, [pc, #76]	; (80014cc <HAL_InitTick+0xa0>)
 800147e:	fba2 2303 	umull	r2, r3, r2, r3
 8001482:	0c9b      	lsrs	r3, r3, #18
 8001484:	3b01      	subs	r3, #1
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <HAL_InitTick+0xa4>)
 800148a:	4a12      	ldr	r2, [pc, #72]	; (80014d4 <HAL_InitTick+0xa8>)
 800148c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <HAL_InitTick+0xa4>)
 8001490:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001494:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001496:	4a0e      	ldr	r2, [pc, #56]	; (80014d0 <HAL_InitTick+0xa4>)
 8001498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <HAL_InitTick+0xa4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_InitTick+0xa4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80014a8:	4809      	ldr	r0, [pc, #36]	; (80014d0 <HAL_InitTick+0xa4>)
 80014aa:	f003 fd0d 	bl	8004ec8 <HAL_TIM_Base_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d104      	bne.n	80014be <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80014b4:	4806      	ldr	r0, [pc, #24]	; (80014d0 <HAL_InitTick+0xa4>)
 80014b6:	f003 fd57 	bl	8004f68 <HAL_TIM_Base_Start_IT>
 80014ba:	4603      	mov	r3, r0
 80014bc:	e000      	b.n	80014c0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3730      	adds	r7, #48	; 0x30
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40021000 	.word	0x40021000
 80014cc:	431bde83 	.word	0x431bde83
 80014d0:	20000cac 	.word	0x20000cac
 80014d4:	40012c00 	.word	0x40012c00

080014d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <NMI_Handler+0x4>

080014de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <HardFault_Handler+0x4>

080014e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <MemManage_Handler+0x4>

080014ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <BusFault_Handler+0x4>

080014f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <UsageFault_Handler+0x4>

080014f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
	...

08001504 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <TIM1_UP_IRQHandler+0x10>)
 800150a:	f003 fd87 	bl	800501c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000cac 	.word	0x20000cac

08001518 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <SPI1_IRQHandler+0x10>)
 800151e:	f003 fb29 	bl	8004b74 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200003bc 	.word	0x200003bc

0800152c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <USART1_IRQHandler+0x10>)
 8001532:	f004 f9bd 	bl	80058b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	2000045c 	.word	0x2000045c

08001540 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <OTG_FS_IRQHandler+0x10>)
 8001546:	f000 ffeb 	bl	8002520 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200045e0 	.word	0x200045e0

08001554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800155c:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <_sbrk+0x5c>)
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <_sbrk+0x60>)
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <_sbrk+0x64>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d102      	bne.n	8001576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <_sbrk+0x64>)
 8001572:	4a12      	ldr	r2, [pc, #72]	; (80015bc <_sbrk+0x68>)
 8001574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <_sbrk+0x64>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	429a      	cmp	r2, r3
 8001582:	d207      	bcs.n	8001594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001584:	f00f fd92 	bl	80110ac <__errno>
 8001588:	4603      	mov	r3, r0
 800158a:	220c      	movs	r2, #12
 800158c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800158e:	f04f 33ff 	mov.w	r3, #4294967295
 8001592:	e009      	b.n	80015a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <_sbrk+0x64>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800159a:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <_sbrk+0x64>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <_sbrk+0x64>)
 80015a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015a6:	68fb      	ldr	r3, [r7, #12]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20010000 	.word	0x20010000
 80015b4:	00000400 	.word	0x00000400
 80015b8:	20000cf4 	.word	0x20000cf4
 80015bc:	200048f8 	.word	0x200048f8

080015c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <wav_file_open>:
#include "wav.h"
#include "string.h"
extern UART_HandleTypeDef huart1;

void wav_file_open(wav_file* self_object,char* filename)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  memcpy(self_object->header.chunk.prefix,"RIFF",4);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2204      	movs	r2, #4
 80015da:	491d      	ldr	r1, [pc, #116]	; (8001650 <wav_file_open+0x84>)
 80015dc:	4618      	mov	r0, r3
 80015de:	f00f fda1 	bl	8011124 <memcpy>
  memcpy(self_object->header.chunk.postfix,"WAVE",4);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3308      	adds	r3, #8
 80015e6:	2204      	movs	r2, #4
 80015e8:	491a      	ldr	r1, [pc, #104]	; (8001654 <wav_file_open+0x88>)
 80015ea:	4618      	mov	r0, r3
 80015ec:	f00f fd9a 	bl	8011124 <memcpy>
  memcpy(self_object->header.subchunk_fmt.prefix,"fmt ",4);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	330c      	adds	r3, #12
 80015f4:	2204      	movs	r2, #4
 80015f6:	4918      	ldr	r1, [pc, #96]	; (8001658 <wav_file_open+0x8c>)
 80015f8:	4618      	mov	r0, r3
 80015fa:	f00f fd93 	bl	8011124 <memcpy>
  memcpy(self_object->header.subchunk_data.prefix,"data",4);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3324      	adds	r3, #36	; 0x24
 8001602:	2204      	movs	r2, #4
 8001604:	4915      	ldr	r1, [pc, #84]	; (800165c <wav_file_open+0x90>)
 8001606:	4618      	mov	r0, r3
 8001608:	f00f fd8c 	bl	8011124 <memcpy>
  self_object->data_counter=0;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8001614:	2200      	movs	r2, #0
 8001616:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800161a:	2200      	movs	r2, #0
 800161c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8001620:	2200      	movs	r2, #0
 8001622:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  f_open(&self_object->media.file,filename,FA_CREATE_ALWAYS|FA_WRITE);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3330      	adds	r3, #48	; 0x30
 800162a:	220a      	movs	r2, #10
 800162c:	6839      	ldr	r1, [r7, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f00b fb64 	bl	800ccfc <f_open>
  f_lseek(&self_object->media.file, sizeof(self_object->header));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800163a:	f04f 022c 	mov.w	r2, #44	; 0x2c
 800163e:	f04f 0300 	mov.w	r3, #0
 8001642:	4608      	mov	r0, r1
 8001644:	f00c f917 	bl	800d876 <f_lseek>
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	08011ce0 	.word	0x08011ce0
 8001654:	08011ce8 	.word	0x08011ce8
 8001658:	08011cf0 	.word	0x08011cf0
 800165c:	08011cf8 	.word	0x08011cf8

08001660 <wav_file_close>:

void wav_file_close(wav_file* self_object)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	self_object->header.subchunk_data.size=self_object->data_counter;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	629a      	str	r2, [r3, #40]	; 0x28
	self_object->header.chunk.size=36+self_object->data_counter;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001674:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	605a      	str	r2, [r3, #4]
 	f_lseek(&self_object->media.file, 0);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	f04f 0300 	mov.w	r3, #0
 800168a:	4608      	mov	r0, r1
 800168c:	f00c f8f3 	bl	800d876 <f_lseek>
 	f_write(&self_object->media.file,(uint8_t*)&self_object->header,sizeof(self_object->header),(void*)&self_object->media.byteswritten);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 800169e:	222c      	movs	r2, #44	; 0x2c
 80016a0:	f00b fded 	bl	800d27e <f_write>
 	f_close(&self_object->media.file);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3330      	adds	r3, #48	; 0x30
 80016a8:	4618      	mov	r0, r3
 80016aa:	f00c f8ba 	bl	800d822 <f_close>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <wav_file_write>:

void wav_file_write(wav_file* self_object,uint8_t* data,uint32_t length)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b084      	sub	sp, #16
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
	self_object->data_counter+=length;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	441a      	add	r2, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	62da      	str	r2, [r3, #44]	; 0x2c
	f_write(&self_object->media.file,data,length,(void*)&self_object->media.byteswritten);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	68b9      	ldr	r1, [r7, #8]
 80016de:	f00b fdce 	bl	800d27e <f_write>
}
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <readDir>:

void readDir(char* dir_name)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	f5ad 7d60 	sub.w	sp, sp, #896	; 0x380
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	f507 7360 	add.w	r3, r7, #896	; 0x380
 80016f8:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80016fc:	6018      	str	r0, [r3, #0]
	FILINFO fileInfo;
	uint8_t sect[512];
	uint8_t result;

	//fileInfo.fname = (char*)sect;
	fileInfo.fsize = sizeof(sect);
 80016fe:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001702:	f5a3 71bc 	sub.w	r1, r3, #376	; 0x178
 8001706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	e9c1 2300 	strd	r2, r3, [r1]
	result = f_opendir(&dir,dir_name);
 8001712:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001716:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800171a:	f507 724a 	add.w	r2, r7, #808	; 0x328
 800171e:	6819      	ldr	r1, [r3, #0]
 8001720:	4610      	mov	r0, r2
 8001722:	f00c fc73 	bl	800e00c <f_opendir>
 8001726:	4603      	mov	r3, r0
 8001728:	f887 337f 	strb.w	r3, [r7, #895]	; 0x37f
	if (result == FR_OK)
 800172c:	f897 337f 	ldrb.w	r3, [r7, #895]	; 0x37f
 8001730:	2b00      	cmp	r3, #0
 8001732:	d149      	bne.n	80017c8 <readDir+0xdc>
	{
		while(1)
		  {
			result = f_readdir(&dir, &fileInfo);
 8001734:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001738:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800173c:	4611      	mov	r1, r2
 800173e:	4618      	mov	r0, r3
 8001740:	f00c fd33 	bl	800e1aa <f_readdir>
 8001744:	4603      	mov	r3, r0
 8001746:	f887 337f 	strb.w	r3, [r7, #895]	; 0x37f
			if (result==FR_OK && fileInfo.fname[0]){
 800174a:	f897 337f 	ldrb.w	r3, [r7, #895]	; 0x37f
 800174e:	2b00      	cmp	r3, #0
 8001750:	d135      	bne.n	80017be <readDir+0xd2>
 8001752:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001756:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800175a:	7e9b      	ldrb	r3, [r3, #26]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d02e      	beq.n	80017be <readDir+0xd2>
			  fn = fileInfo.fname;
 8001760:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001764:	331a      	adds	r3, #26
 8001766:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
			  if(strlen(fn)){
 800176a:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d00c      	beq.n	800178e <readDir+0xa2>
				HAL_UART_Transmit(&huart1,(uint8_t*)fn,strlen(fn),0x1000);
 8001774:	f8d7 0378 	ldr.w	r0, [r7, #888]	; 0x378
 8001778:	f7fe fd5a 	bl	8000230 <strlen>
 800177c:	4603      	mov	r3, r0
 800177e:	b29a      	uxth	r2, r3
 8001780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001784:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 8001788:	4812      	ldr	r0, [pc, #72]	; (80017d4 <readDir+0xe8>)
 800178a:	f003 fffe 	bl	800578a <HAL_UART_Transmit>
			  }
			  if(fileInfo.fattrib&AM_DIR){
 800178e:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001792:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001796:	7b1b      	ldrb	r3, [r3, #12]
 8001798:	f003 0310 	and.w	r3, r3, #16
 800179c:	2b00      	cmp	r3, #0
 800179e:	d006      	beq.n	80017ae <readDir+0xc2>
				HAL_UART_Transmit(&huart1,(uint8_t*)" [DIR]",6,0x1000);
 80017a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a4:	2206      	movs	r2, #6
 80017a6:	490c      	ldr	r1, [pc, #48]	; (80017d8 <readDir+0xec>)
 80017a8:	480a      	ldr	r0, [pc, #40]	; (80017d4 <readDir+0xe8>)
 80017aa:	f003 ffee 	bl	800578a <HAL_UART_Transmit>
			  }
			  HAL_UART_Transmit(&huart1,(uint8_t*)"\n",1,0x1000);
 80017ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b2:	2201      	movs	r2, #1
 80017b4:	4909      	ldr	r1, [pc, #36]	; (80017dc <readDir+0xf0>)
 80017b6:	4807      	ldr	r0, [pc, #28]	; (80017d4 <readDir+0xe8>)
 80017b8:	f003 ffe7 	bl	800578a <HAL_UART_Transmit>
			result = f_readdir(&dir, &fileInfo);
 80017bc:	e7ba      	b.n	8001734 <readDir+0x48>
			}
			else break;
		   }
		   f_closedir(&dir);
 80017be:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80017c2:	4618      	mov	r0, r3
 80017c4:	f00c fccb 	bl	800e15e <f_closedir>
	 }
}
 80017c8:	bf00      	nop
 80017ca:	f507 7760 	add.w	r7, r7, #896	; 0x380
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	2000045c 	.word	0x2000045c
 80017d8:	08011d00 	.word	0x08011d00
 80017dc:	08011d08 	.word	0x08011d08

080017e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e0:	480c      	ldr	r0, [pc, #48]	; (8001814 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017e2:	490d      	ldr	r1, [pc, #52]	; (8001818 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017e4:	4a0d      	ldr	r2, [pc, #52]	; (800181c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e8:	e002      	b.n	80017f0 <LoopCopyDataInit>

080017ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ee:	3304      	adds	r3, #4

080017f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f4:	d3f9      	bcc.n	80017ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017f6:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017f8:	4c0a      	ldr	r4, [pc, #40]	; (8001824 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017fc:	e001      	b.n	8001802 <LoopFillZerobss>

080017fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001800:	3204      	adds	r2, #4

08001802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001804:	d3fb      	bcc.n	80017fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001806:	f7ff fedb 	bl	80015c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800180a:	f00f fc55 	bl	80110b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800180e:	f7fe feb3 	bl	8000578 <main>
  bx lr
 8001812:	4770      	bx	lr
  ldr r0, =_sdata
 8001814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001818:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 800181c:	080122c0 	.word	0x080122c0
  ldr r2, =_sbss
 8001820:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8001824:	200048f4 	.word	0x200048f4

08001828 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001828:	e7fe      	b.n	8001828 <ADC1_2_IRQHandler>
	...

0800182c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <HAL_Init+0x28>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a07      	ldr	r2, [pc, #28]	; (8001854 <HAL_Init+0x28>)
 8001836:	f043 0310 	orr.w	r3, r3, #16
 800183a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800183c:	2003      	movs	r0, #3
 800183e:	f000 f8f5 	bl	8001a2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001842:	200f      	movs	r0, #15
 8001844:	f7ff fdf2 	bl	800142c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001848:	f7ff fce6 	bl	8001218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40022000 	.word	0x40022000

08001858 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <HAL_IncTick+0x1c>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <HAL_IncTick+0x20>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4413      	add	r3, r2
 8001868:	4a03      	ldr	r2, [pc, #12]	; (8001878 <HAL_IncTick+0x20>)
 800186a:	6013      	str	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr
 8001874:	20000008 	.word	0x20000008
 8001878:	20000cf8 	.word	0x20000cf8

0800187c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return uwTick;
 8001880:	4b02      	ldr	r3, [pc, #8]	; (800188c <HAL_GetTick+0x10>)
 8001882:	681b      	ldr	r3, [r3, #0]
}
 8001884:	4618      	mov	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	20000cf8 	.word	0x20000cf8

08001890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001898:	f7ff fff0 	bl	800187c <HAL_GetTick>
 800189c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a8:	d005      	beq.n	80018b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018aa:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <HAL_Delay+0x44>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	461a      	mov	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4413      	add	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018b6:	bf00      	nop
 80018b8:	f7ff ffe0 	bl	800187c <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d8f7      	bhi.n	80018b8 <HAL_Delay+0x28>
  {
  }
}
 80018c8:	bf00      	nop
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000008 	.word	0x20000008

080018d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <__NVIC_SetPriorityGrouping+0x44>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018f4:	4013      	ands	r3, r2
 80018f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001900:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190a:	4a04      	ldr	r2, [pc, #16]	; (800191c <__NVIC_SetPriorityGrouping+0x44>)
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	60d3      	str	r3, [r2, #12]
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001924:	4b04      	ldr	r3, [pc, #16]	; (8001938 <__NVIC_GetPriorityGrouping+0x18>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	0a1b      	lsrs	r3, r3, #8
 800192a:	f003 0307 	and.w	r3, r3, #7
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	2b00      	cmp	r3, #0
 800194c:	db0b      	blt.n	8001966 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	f003 021f 	and.w	r2, r3, #31
 8001954:	4906      	ldr	r1, [pc, #24]	; (8001970 <__NVIC_EnableIRQ+0x34>)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	2001      	movs	r0, #1
 800195e:	fa00 f202 	lsl.w	r2, r0, r2
 8001962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	e000e100 	.word	0xe000e100

08001974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001984:	2b00      	cmp	r3, #0
 8001986:	db0a      	blt.n	800199e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	b2da      	uxtb	r2, r3
 800198c:	490c      	ldr	r1, [pc, #48]	; (80019c0 <__NVIC_SetPriority+0x4c>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	0112      	lsls	r2, r2, #4
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	440b      	add	r3, r1
 8001998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800199c:	e00a      	b.n	80019b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4908      	ldr	r1, [pc, #32]	; (80019c4 <__NVIC_SetPriority+0x50>)
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	3b04      	subs	r3, #4
 80019ac:	0112      	lsls	r2, r2, #4
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	440b      	add	r3, r1
 80019b2:	761a      	strb	r2, [r3, #24]
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000e100 	.word	0xe000e100
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b089      	sub	sp, #36	; 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f1c3 0307 	rsb	r3, r3, #7
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	bf28      	it	cs
 80019e6:	2304      	movcs	r3, #4
 80019e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3304      	adds	r3, #4
 80019ee:	2b06      	cmp	r3, #6
 80019f0:	d902      	bls.n	80019f8 <NVIC_EncodePriority+0x30>
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3b03      	subs	r3, #3
 80019f6:	e000      	b.n	80019fa <NVIC_EncodePriority+0x32>
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43da      	mvns	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a10:	f04f 31ff 	mov.w	r1, #4294967295
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1a:	43d9      	mvns	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	4313      	orrs	r3, r2
         );
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3724      	adds	r7, #36	; 0x24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr

08001a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff ff4f 	bl	80018d8 <__NVIC_SetPriorityGrouping>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b086      	sub	sp, #24
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
 8001a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a54:	f7ff ff64 	bl	8001920 <__NVIC_GetPriorityGrouping>
 8001a58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	68b9      	ldr	r1, [r7, #8]
 8001a5e:	6978      	ldr	r0, [r7, #20]
 8001a60:	f7ff ffb2 	bl	80019c8 <NVIC_EncodePriority>
 8001a64:	4602      	mov	r2, r0
 8001a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff81 	bl	8001974 <__NVIC_SetPriority>
}
 8001a72:	bf00      	nop
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff57 	bl	800193c <__NVIC_EnableIRQ>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b085      	sub	sp, #20
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d008      	beq.n	8001abe <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2204      	movs	r2, #4
 8001ab0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e020      	b.n	8001b00 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 020e 	bic.w	r2, r2, #14
 8001acc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0201 	bic.w	r2, r2, #1
 8001adc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8001aec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr
	...

08001b0c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b14:	2300      	movs	r3, #0
 8001b16:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d005      	beq.n	8001b2e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2204      	movs	r2, #4
 8001b26:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	73fb      	strb	r3, [r7, #15]
 8001b2c:	e0d6      	b.n	8001cdc <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 020e 	bic.w	r2, r2, #14
 8001b3c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0201 	bic.w	r2, r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	4b64      	ldr	r3, [pc, #400]	; (8001ce8 <HAL_DMA_Abort_IT+0x1dc>)
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d958      	bls.n	8001c0c <HAL_DMA_Abort_IT+0x100>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a63      	ldr	r2, [pc, #396]	; (8001cec <HAL_DMA_Abort_IT+0x1e0>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d04f      	beq.n	8001c04 <HAL_DMA_Abort_IT+0xf8>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a61      	ldr	r2, [pc, #388]	; (8001cf0 <HAL_DMA_Abort_IT+0x1e4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d048      	beq.n	8001c00 <HAL_DMA_Abort_IT+0xf4>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a60      	ldr	r2, [pc, #384]	; (8001cf4 <HAL_DMA_Abort_IT+0x1e8>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d040      	beq.n	8001bfa <HAL_DMA_Abort_IT+0xee>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a5e      	ldr	r2, [pc, #376]	; (8001cf8 <HAL_DMA_Abort_IT+0x1ec>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d038      	beq.n	8001bf4 <HAL_DMA_Abort_IT+0xe8>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a5d      	ldr	r2, [pc, #372]	; (8001cfc <HAL_DMA_Abort_IT+0x1f0>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d030      	beq.n	8001bee <HAL_DMA_Abort_IT+0xe2>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a5b      	ldr	r2, [pc, #364]	; (8001d00 <HAL_DMA_Abort_IT+0x1f4>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d028      	beq.n	8001be8 <HAL_DMA_Abort_IT+0xdc>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a53      	ldr	r2, [pc, #332]	; (8001ce8 <HAL_DMA_Abort_IT+0x1dc>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d020      	beq.n	8001be2 <HAL_DMA_Abort_IT+0xd6>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a57      	ldr	r2, [pc, #348]	; (8001d04 <HAL_DMA_Abort_IT+0x1f8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d019      	beq.n	8001bde <HAL_DMA_Abort_IT+0xd2>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a56      	ldr	r2, [pc, #344]	; (8001d08 <HAL_DMA_Abort_IT+0x1fc>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d012      	beq.n	8001bda <HAL_DMA_Abort_IT+0xce>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a54      	ldr	r2, [pc, #336]	; (8001d0c <HAL_DMA_Abort_IT+0x200>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d00a      	beq.n	8001bd4 <HAL_DMA_Abort_IT+0xc8>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a53      	ldr	r2, [pc, #332]	; (8001d10 <HAL_DMA_Abort_IT+0x204>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d102      	bne.n	8001bce <HAL_DMA_Abort_IT+0xc2>
 8001bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bcc:	e01b      	b.n	8001c06 <HAL_DMA_Abort_IT+0xfa>
 8001bce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bd2:	e018      	b.n	8001c06 <HAL_DMA_Abort_IT+0xfa>
 8001bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bd8:	e015      	b.n	8001c06 <HAL_DMA_Abort_IT+0xfa>
 8001bda:	2310      	movs	r3, #16
 8001bdc:	e013      	b.n	8001c06 <HAL_DMA_Abort_IT+0xfa>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e011      	b.n	8001c06 <HAL_DMA_Abort_IT+0xfa>
 8001be2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001be6:	e00e      	b.n	8001c06 <HAL_DMA_Abort_IT+0xfa>
 8001be8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001bec:	e00b      	b.n	8001c06 <HAL_DMA_Abort_IT+0xfa>
 8001bee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bf2:	e008      	b.n	8001c06 <HAL_DMA_Abort_IT+0xfa>
 8001bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf8:	e005      	b.n	8001c06 <HAL_DMA_Abort_IT+0xfa>
 8001bfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bfe:	e002      	b.n	8001c06 <HAL_DMA_Abort_IT+0xfa>
 8001c00:	2310      	movs	r3, #16
 8001c02:	e000      	b.n	8001c06 <HAL_DMA_Abort_IT+0xfa>
 8001c04:	2301      	movs	r3, #1
 8001c06:	4a43      	ldr	r2, [pc, #268]	; (8001d14 <HAL_DMA_Abort_IT+0x208>)
 8001c08:	6053      	str	r3, [r2, #4]
 8001c0a:	e057      	b.n	8001cbc <HAL_DMA_Abort_IT+0x1b0>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a36      	ldr	r2, [pc, #216]	; (8001cec <HAL_DMA_Abort_IT+0x1e0>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d04f      	beq.n	8001cb6 <HAL_DMA_Abort_IT+0x1aa>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a35      	ldr	r2, [pc, #212]	; (8001cf0 <HAL_DMA_Abort_IT+0x1e4>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d048      	beq.n	8001cb2 <HAL_DMA_Abort_IT+0x1a6>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a33      	ldr	r2, [pc, #204]	; (8001cf4 <HAL_DMA_Abort_IT+0x1e8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d040      	beq.n	8001cac <HAL_DMA_Abort_IT+0x1a0>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a32      	ldr	r2, [pc, #200]	; (8001cf8 <HAL_DMA_Abort_IT+0x1ec>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d038      	beq.n	8001ca6 <HAL_DMA_Abort_IT+0x19a>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a30      	ldr	r2, [pc, #192]	; (8001cfc <HAL_DMA_Abort_IT+0x1f0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d030      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x194>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a2f      	ldr	r2, [pc, #188]	; (8001d00 <HAL_DMA_Abort_IT+0x1f4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d028      	beq.n	8001c9a <HAL_DMA_Abort_IT+0x18e>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a26      	ldr	r2, [pc, #152]	; (8001ce8 <HAL_DMA_Abort_IT+0x1dc>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d020      	beq.n	8001c94 <HAL_DMA_Abort_IT+0x188>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a2b      	ldr	r2, [pc, #172]	; (8001d04 <HAL_DMA_Abort_IT+0x1f8>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d019      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x184>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a29      	ldr	r2, [pc, #164]	; (8001d08 <HAL_DMA_Abort_IT+0x1fc>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d012      	beq.n	8001c8c <HAL_DMA_Abort_IT+0x180>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a28      	ldr	r2, [pc, #160]	; (8001d0c <HAL_DMA_Abort_IT+0x200>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d00a      	beq.n	8001c86 <HAL_DMA_Abort_IT+0x17a>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a26      	ldr	r2, [pc, #152]	; (8001d10 <HAL_DMA_Abort_IT+0x204>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d102      	bne.n	8001c80 <HAL_DMA_Abort_IT+0x174>
 8001c7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c7e:	e01b      	b.n	8001cb8 <HAL_DMA_Abort_IT+0x1ac>
 8001c80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c84:	e018      	b.n	8001cb8 <HAL_DMA_Abort_IT+0x1ac>
 8001c86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c8a:	e015      	b.n	8001cb8 <HAL_DMA_Abort_IT+0x1ac>
 8001c8c:	2310      	movs	r3, #16
 8001c8e:	e013      	b.n	8001cb8 <HAL_DMA_Abort_IT+0x1ac>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e011      	b.n	8001cb8 <HAL_DMA_Abort_IT+0x1ac>
 8001c94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c98:	e00e      	b.n	8001cb8 <HAL_DMA_Abort_IT+0x1ac>
 8001c9a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c9e:	e00b      	b.n	8001cb8 <HAL_DMA_Abort_IT+0x1ac>
 8001ca0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ca4:	e008      	b.n	8001cb8 <HAL_DMA_Abort_IT+0x1ac>
 8001ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001caa:	e005      	b.n	8001cb8 <HAL_DMA_Abort_IT+0x1ac>
 8001cac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cb0:	e002      	b.n	8001cb8 <HAL_DMA_Abort_IT+0x1ac>
 8001cb2:	2310      	movs	r3, #16
 8001cb4:	e000      	b.n	8001cb8 <HAL_DMA_Abort_IT+0x1ac>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	4a17      	ldr	r2, [pc, #92]	; (8001d18 <HAL_DMA_Abort_IT+0x20c>)
 8001cba:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	4798      	blx	r3
    } 
  }
  return status;
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40020080 	.word	0x40020080
 8001cec:	40020008 	.word	0x40020008
 8001cf0:	4002001c 	.word	0x4002001c
 8001cf4:	40020030 	.word	0x40020030
 8001cf8:	40020044 	.word	0x40020044
 8001cfc:	40020058 	.word	0x40020058
 8001d00:	4002006c 	.word	0x4002006c
 8001d04:	40020408 	.word	0x40020408
 8001d08:	4002041c 	.word	0x4002041c
 8001d0c:	40020430 	.word	0x40020430
 8001d10:	40020444 	.word	0x40020444
 8001d14:	40020400 	.word	0x40020400
 8001d18:	40020000 	.word	0x40020000

08001d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b08b      	sub	sp, #44	; 0x2c
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d26:	2300      	movs	r3, #0
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2e:	e169      	b.n	8002004 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d30:	2201      	movs	r2, #1
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	69fa      	ldr	r2, [r7, #28]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	f040 8158 	bne.w	8001ffe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	4a9a      	ldr	r2, [pc, #616]	; (8001fbc <HAL_GPIO_Init+0x2a0>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d05e      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d58:	4a98      	ldr	r2, [pc, #608]	; (8001fbc <HAL_GPIO_Init+0x2a0>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d875      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d5e:	4a98      	ldr	r2, [pc, #608]	; (8001fc0 <HAL_GPIO_Init+0x2a4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d058      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d64:	4a96      	ldr	r2, [pc, #600]	; (8001fc0 <HAL_GPIO_Init+0x2a4>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d86f      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d6a:	4a96      	ldr	r2, [pc, #600]	; (8001fc4 <HAL_GPIO_Init+0x2a8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d052      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d70:	4a94      	ldr	r2, [pc, #592]	; (8001fc4 <HAL_GPIO_Init+0x2a8>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d869      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d76:	4a94      	ldr	r2, [pc, #592]	; (8001fc8 <HAL_GPIO_Init+0x2ac>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d04c      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d7c:	4a92      	ldr	r2, [pc, #584]	; (8001fc8 <HAL_GPIO_Init+0x2ac>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d863      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d82:	4a92      	ldr	r2, [pc, #584]	; (8001fcc <HAL_GPIO_Init+0x2b0>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d046      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d88:	4a90      	ldr	r2, [pc, #576]	; (8001fcc <HAL_GPIO_Init+0x2b0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d85d      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d8e:	2b12      	cmp	r3, #18
 8001d90:	d82a      	bhi.n	8001de8 <HAL_GPIO_Init+0xcc>
 8001d92:	2b12      	cmp	r3, #18
 8001d94:	d859      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d96:	a201      	add	r2, pc, #4	; (adr r2, 8001d9c <HAL_GPIO_Init+0x80>)
 8001d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9c:	08001e17 	.word	0x08001e17
 8001da0:	08001df1 	.word	0x08001df1
 8001da4:	08001e03 	.word	0x08001e03
 8001da8:	08001e45 	.word	0x08001e45
 8001dac:	08001e4b 	.word	0x08001e4b
 8001db0:	08001e4b 	.word	0x08001e4b
 8001db4:	08001e4b 	.word	0x08001e4b
 8001db8:	08001e4b 	.word	0x08001e4b
 8001dbc:	08001e4b 	.word	0x08001e4b
 8001dc0:	08001e4b 	.word	0x08001e4b
 8001dc4:	08001e4b 	.word	0x08001e4b
 8001dc8:	08001e4b 	.word	0x08001e4b
 8001dcc:	08001e4b 	.word	0x08001e4b
 8001dd0:	08001e4b 	.word	0x08001e4b
 8001dd4:	08001e4b 	.word	0x08001e4b
 8001dd8:	08001e4b 	.word	0x08001e4b
 8001ddc:	08001e4b 	.word	0x08001e4b
 8001de0:	08001df9 	.word	0x08001df9
 8001de4:	08001e0d 	.word	0x08001e0d
 8001de8:	4a79      	ldr	r2, [pc, #484]	; (8001fd0 <HAL_GPIO_Init+0x2b4>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d013      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dee:	e02c      	b.n	8001e4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	623b      	str	r3, [r7, #32]
          break;
 8001df6:	e029      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	623b      	str	r3, [r7, #32]
          break;
 8001e00:	e024      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	3308      	adds	r3, #8
 8001e08:	623b      	str	r3, [r7, #32]
          break;
 8001e0a:	e01f      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	330c      	adds	r3, #12
 8001e12:	623b      	str	r3, [r7, #32]
          break;
 8001e14:	e01a      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d102      	bne.n	8001e24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e1e:	2304      	movs	r3, #4
 8001e20:	623b      	str	r3, [r7, #32]
          break;
 8001e22:	e013      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d105      	bne.n	8001e38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e2c:	2308      	movs	r3, #8
 8001e2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	611a      	str	r2, [r3, #16]
          break;
 8001e36:	e009      	b.n	8001e4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e38:	2308      	movs	r3, #8
 8001e3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69fa      	ldr	r2, [r7, #28]
 8001e40:	615a      	str	r2, [r3, #20]
          break;
 8001e42:	e003      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e44:	2300      	movs	r3, #0
 8001e46:	623b      	str	r3, [r7, #32]
          break;
 8001e48:	e000      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          break;
 8001e4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	2bff      	cmp	r3, #255	; 0xff
 8001e50:	d801      	bhi.n	8001e56 <HAL_GPIO_Init+0x13a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	e001      	b.n	8001e5a <HAL_GPIO_Init+0x13e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	2bff      	cmp	r3, #255	; 0xff
 8001e60:	d802      	bhi.n	8001e68 <HAL_GPIO_Init+0x14c>
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	e002      	b.n	8001e6e <HAL_GPIO_Init+0x152>
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	3b08      	subs	r3, #8
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	210f      	movs	r1, #15
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	401a      	ands	r2, r3
 8001e80:	6a39      	ldr	r1, [r7, #32]
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	fa01 f303 	lsl.w	r3, r1, r3
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 80b1 	beq.w	8001ffe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e9c:	4b4d      	ldr	r3, [pc, #308]	; (8001fd4 <HAL_GPIO_Init+0x2b8>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	4a4c      	ldr	r2, [pc, #304]	; (8001fd4 <HAL_GPIO_Init+0x2b8>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6193      	str	r3, [r2, #24]
 8001ea8:	4b4a      	ldr	r3, [pc, #296]	; (8001fd4 <HAL_GPIO_Init+0x2b8>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001eb4:	4a48      	ldr	r2, [pc, #288]	; (8001fd8 <HAL_GPIO_Init+0x2bc>)
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	089b      	lsrs	r3, r3, #2
 8001eba:	3302      	adds	r3, #2
 8001ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	220f      	movs	r2, #15
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a40      	ldr	r2, [pc, #256]	; (8001fdc <HAL_GPIO_Init+0x2c0>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d013      	beq.n	8001f08 <HAL_GPIO_Init+0x1ec>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a3f      	ldr	r2, [pc, #252]	; (8001fe0 <HAL_GPIO_Init+0x2c4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d00d      	beq.n	8001f04 <HAL_GPIO_Init+0x1e8>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a3e      	ldr	r2, [pc, #248]	; (8001fe4 <HAL_GPIO_Init+0x2c8>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d007      	beq.n	8001f00 <HAL_GPIO_Init+0x1e4>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a3d      	ldr	r2, [pc, #244]	; (8001fe8 <HAL_GPIO_Init+0x2cc>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d101      	bne.n	8001efc <HAL_GPIO_Init+0x1e0>
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e006      	b.n	8001f0a <HAL_GPIO_Init+0x1ee>
 8001efc:	2304      	movs	r3, #4
 8001efe:	e004      	b.n	8001f0a <HAL_GPIO_Init+0x1ee>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e002      	b.n	8001f0a <HAL_GPIO_Init+0x1ee>
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <HAL_GPIO_Init+0x1ee>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f0c:	f002 0203 	and.w	r2, r2, #3
 8001f10:	0092      	lsls	r2, r2, #2
 8001f12:	4093      	lsls	r3, r2
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f1a:	492f      	ldr	r1, [pc, #188]	; (8001fd8 <HAL_GPIO_Init+0x2bc>)
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	089b      	lsrs	r3, r3, #2
 8001f20:	3302      	adds	r3, #2
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d006      	beq.n	8001f42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f34:	4b2d      	ldr	r3, [pc, #180]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	492c      	ldr	r1, [pc, #176]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	600b      	str	r3, [r1, #0]
 8001f40:	e006      	b.n	8001f50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f42:	4b2a      	ldr	r3, [pc, #168]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	4928      	ldr	r1, [pc, #160]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d006      	beq.n	8001f6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f5c:	4b23      	ldr	r3, [pc, #140]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	4922      	ldr	r1, [pc, #136]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
 8001f68:	e006      	b.n	8001f78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f6a:	4b20      	ldr	r3, [pc, #128]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	491e      	ldr	r1, [pc, #120]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d006      	beq.n	8001f92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f84:	4b19      	ldr	r3, [pc, #100]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	4918      	ldr	r1, [pc, #96]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	608b      	str	r3, [r1, #8]
 8001f90:	e006      	b.n	8001fa0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f92:	4b16      	ldr	r3, [pc, #88]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	4914      	ldr	r1, [pc, #80]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d021      	beq.n	8001ff0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fac:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	490e      	ldr	r1, [pc, #56]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	60cb      	str	r3, [r1, #12]
 8001fb8:	e021      	b.n	8001ffe <HAL_GPIO_Init+0x2e2>
 8001fba:	bf00      	nop
 8001fbc:	10320000 	.word	0x10320000
 8001fc0:	10310000 	.word	0x10310000
 8001fc4:	10220000 	.word	0x10220000
 8001fc8:	10210000 	.word	0x10210000
 8001fcc:	10120000 	.word	0x10120000
 8001fd0:	10110000 	.word	0x10110000
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40010000 	.word	0x40010000
 8001fdc:	40010800 	.word	0x40010800
 8001fe0:	40010c00 	.word	0x40010c00
 8001fe4:	40011000 	.word	0x40011000
 8001fe8:	40011400 	.word	0x40011400
 8001fec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_GPIO_Init+0x304>)
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	4909      	ldr	r1, [pc, #36]	; (8002020 <HAL_GPIO_Init+0x304>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	3301      	adds	r3, #1
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	fa22 f303 	lsr.w	r3, r2, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	f47f ae8e 	bne.w	8001d30 <HAL_GPIO_Init+0x14>
  }
}
 8002014:	bf00      	nop
 8002016:	bf00      	nop
 8002018:	372c      	adds	r7, #44	; 0x2c
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr
 8002020:	40010400 	.word	0x40010400

08002024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	807b      	strh	r3, [r7, #2]
 8002030:	4613      	mov	r3, r2
 8002032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002034:	787b      	ldrb	r3, [r7, #1]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800203a:	887a      	ldrh	r2, [r7, #2]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002040:	e003      	b.n	800204a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002042:	887b      	ldrh	r3, [r7, #2]
 8002044:	041a      	lsls	r2, r3, #16
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	611a      	str	r2, [r3, #16]
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002056:	b08f      	sub	sp, #60	; 0x3c
 8002058:	af0a      	add	r7, sp, #40	; 0x28
 800205a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e054      	b.n	8002110 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	d106      	bne.n	8002086 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f00e fda9 	bl	8010bd8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2203      	movs	r2, #3
 800208a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002096:	2b00      	cmp	r3, #0
 8002098:	d102      	bne.n	80020a0 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f004 f825 	bl	80060f4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	687e      	ldr	r6, [r7, #4]
 80020b2:	466d      	mov	r5, sp
 80020b4:	f106 0410 	add.w	r4, r6, #16
 80020b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80020c8:	1d33      	adds	r3, r6, #4
 80020ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020cc:	6838      	ldr	r0, [r7, #0]
 80020ce:	f003 ffdf 	bl	8006090 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2101      	movs	r1, #1
 80020d8:	4618      	mov	r0, r3
 80020da:	f004 f81b 	bl	8006114 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	603b      	str	r3, [r7, #0]
 80020e4:	687e      	ldr	r6, [r7, #4]
 80020e6:	466d      	mov	r5, sp
 80020e8:	f106 0410 	add.w	r4, r6, #16
 80020ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80020fc:	1d33      	adds	r3, r6, #4
 80020fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002100:	6838      	ldr	r0, [r7, #0]
 8002102:	f004 f979 	bl	80063f8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002118 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002118:	b590      	push	{r4, r7, lr}
 800211a:	b089      	sub	sp, #36	; 0x24
 800211c:	af04      	add	r7, sp, #16
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	4608      	mov	r0, r1
 8002122:	4611      	mov	r1, r2
 8002124:	461a      	mov	r2, r3
 8002126:	4603      	mov	r3, r0
 8002128:	70fb      	strb	r3, [r7, #3]
 800212a:	460b      	mov	r3, r1
 800212c:	70bb      	strb	r3, [r7, #2]
 800212e:	4613      	mov	r3, r2
 8002130:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002138:	2b01      	cmp	r3, #1
 800213a:	d101      	bne.n	8002140 <HAL_HCD_HC_Init+0x28>
 800213c:	2302      	movs	r3, #2
 800213e:	e076      	b.n	800222e <HAL_HCD_HC_Init+0x116>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	212c      	movs	r1, #44	; 0x2c
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	4413      	add	r3, r2
 8002154:	333d      	adds	r3, #61	; 0x3d
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	212c      	movs	r1, #44	; 0x2c
 8002160:	fb01 f303 	mul.w	r3, r1, r3
 8002164:	4413      	add	r3, r2
 8002166:	3338      	adds	r3, #56	; 0x38
 8002168:	787a      	ldrb	r2, [r7, #1]
 800216a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	212c      	movs	r1, #44	; 0x2c
 8002172:	fb01 f303 	mul.w	r3, r1, r3
 8002176:	4413      	add	r3, r2
 8002178:	3340      	adds	r3, #64	; 0x40
 800217a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800217c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800217e:	78fb      	ldrb	r3, [r7, #3]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	212c      	movs	r1, #44	; 0x2c
 8002184:	fb01 f303 	mul.w	r3, r1, r3
 8002188:	4413      	add	r3, r2
 800218a:	3339      	adds	r3, #57	; 0x39
 800218c:	78fa      	ldrb	r2, [r7, #3]
 800218e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002190:	78fb      	ldrb	r3, [r7, #3]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	212c      	movs	r1, #44	; 0x2c
 8002196:	fb01 f303 	mul.w	r3, r1, r3
 800219a:	4413      	add	r3, r2
 800219c:	333f      	adds	r3, #63	; 0x3f
 800219e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80021a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	78ba      	ldrb	r2, [r7, #2]
 80021a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021ac:	b2d0      	uxtb	r0, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	212c      	movs	r1, #44	; 0x2c
 80021b2:	fb01 f303 	mul.w	r3, r1, r3
 80021b6:	4413      	add	r3, r2
 80021b8:	333a      	adds	r3, #58	; 0x3a
 80021ba:	4602      	mov	r2, r0
 80021bc:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80021be:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	da09      	bge.n	80021da <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80021c6:	78fb      	ldrb	r3, [r7, #3]
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	212c      	movs	r1, #44	; 0x2c
 80021cc:	fb01 f303 	mul.w	r3, r1, r3
 80021d0:	4413      	add	r3, r2
 80021d2:	333b      	adds	r3, #59	; 0x3b
 80021d4:	2201      	movs	r2, #1
 80021d6:	701a      	strb	r2, [r3, #0]
 80021d8:	e008      	b.n	80021ec <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80021da:	78fb      	ldrb	r3, [r7, #3]
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	212c      	movs	r1, #44	; 0x2c
 80021e0:	fb01 f303 	mul.w	r3, r1, r3
 80021e4:	4413      	add	r3, r2
 80021e6:	333b      	adds	r3, #59	; 0x3b
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80021ec:	78fb      	ldrb	r3, [r7, #3]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	212c      	movs	r1, #44	; 0x2c
 80021f2:	fb01 f303 	mul.w	r3, r1, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	333c      	adds	r3, #60	; 0x3c
 80021fa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80021fe:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	787c      	ldrb	r4, [r7, #1]
 8002206:	78ba      	ldrb	r2, [r7, #2]
 8002208:	78f9      	ldrb	r1, [r7, #3]
 800220a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800220c:	9302      	str	r3, [sp, #8]
 800220e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002212:	9301      	str	r3, [sp, #4]
 8002214:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	4623      	mov	r3, r4
 800221c:	f004 fa24 	bl	8006668 <USB_HC_Init>
 8002220:	4603      	mov	r3, r0
 8002222:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800222c:	7bfb      	ldrb	r3, [r7, #15]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	bd90      	pop	{r4, r7, pc}

08002236 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b084      	sub	sp, #16
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	460b      	mov	r3, r1
 8002240:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800224c:	2b01      	cmp	r3, #1
 800224e:	d101      	bne.n	8002254 <HAL_HCD_HC_Halt+0x1e>
 8002250:	2302      	movs	r3, #2
 8002252:	e00f      	b.n	8002274 <HAL_HCD_HC_Halt+0x3e>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	78fa      	ldrb	r2, [r7, #3]
 8002262:	4611      	mov	r1, r2
 8002264:	4618      	mov	r0, r3
 8002266:	f004 fbff 	bl	8006a68 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002272:	7bfb      	ldrb	r3, [r7, #15]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	4608      	mov	r0, r1
 8002286:	4611      	mov	r1, r2
 8002288:	461a      	mov	r2, r3
 800228a:	4603      	mov	r3, r0
 800228c:	70fb      	strb	r3, [r7, #3]
 800228e:	460b      	mov	r3, r1
 8002290:	70bb      	strb	r3, [r7, #2]
 8002292:	4613      	mov	r3, r2
 8002294:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002296:	78fb      	ldrb	r3, [r7, #3]
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	212c      	movs	r1, #44	; 0x2c
 800229c:	fb01 f303 	mul.w	r3, r1, r3
 80022a0:	4413      	add	r3, r2
 80022a2:	333b      	adds	r3, #59	; 0x3b
 80022a4:	78ba      	ldrb	r2, [r7, #2]
 80022a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	212c      	movs	r1, #44	; 0x2c
 80022ae:	fb01 f303 	mul.w	r3, r1, r3
 80022b2:	4413      	add	r3, r2
 80022b4:	333f      	adds	r3, #63	; 0x3f
 80022b6:	787a      	ldrb	r2, [r7, #1]
 80022b8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80022ba:	7c3b      	ldrb	r3, [r7, #16]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d112      	bne.n	80022e6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80022c0:	78fb      	ldrb	r3, [r7, #3]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	212c      	movs	r1, #44	; 0x2c
 80022c6:	fb01 f303 	mul.w	r3, r1, r3
 80022ca:	4413      	add	r3, r2
 80022cc:	3342      	adds	r3, #66	; 0x42
 80022ce:	2203      	movs	r2, #3
 80022d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	212c      	movs	r1, #44	; 0x2c
 80022d8:	fb01 f303 	mul.w	r3, r1, r3
 80022dc:	4413      	add	r3, r2
 80022de:	333d      	adds	r3, #61	; 0x3d
 80022e0:	7f3a      	ldrb	r2, [r7, #28]
 80022e2:	701a      	strb	r2, [r3, #0]
 80022e4:	e008      	b.n	80022f8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022e6:	78fb      	ldrb	r3, [r7, #3]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	212c      	movs	r1, #44	; 0x2c
 80022ec:	fb01 f303 	mul.w	r3, r1, r3
 80022f0:	4413      	add	r3, r2
 80022f2:	3342      	adds	r3, #66	; 0x42
 80022f4:	2202      	movs	r2, #2
 80022f6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80022f8:	787b      	ldrb	r3, [r7, #1]
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	f200 80c6 	bhi.w	800248c <HAL_HCD_HC_SubmitRequest+0x210>
 8002300:	a201      	add	r2, pc, #4	; (adr r2, 8002308 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002306:	bf00      	nop
 8002308:	08002319 	.word	0x08002319
 800230c:	08002479 	.word	0x08002479
 8002310:	0800237d 	.word	0x0800237d
 8002314:	080023fb 	.word	0x080023fb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002318:	7c3b      	ldrb	r3, [r7, #16]
 800231a:	2b01      	cmp	r3, #1
 800231c:	f040 80b8 	bne.w	8002490 <HAL_HCD_HC_SubmitRequest+0x214>
 8002320:	78bb      	ldrb	r3, [r7, #2]
 8002322:	2b00      	cmp	r3, #0
 8002324:	f040 80b4 	bne.w	8002490 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002328:	8b3b      	ldrh	r3, [r7, #24]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d108      	bne.n	8002340 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800232e:	78fb      	ldrb	r3, [r7, #3]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	212c      	movs	r1, #44	; 0x2c
 8002334:	fb01 f303 	mul.w	r3, r1, r3
 8002338:	4413      	add	r3, r2
 800233a:	3355      	adds	r3, #85	; 0x55
 800233c:	2201      	movs	r2, #1
 800233e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	212c      	movs	r1, #44	; 0x2c
 8002346:	fb01 f303 	mul.w	r3, r1, r3
 800234a:	4413      	add	r3, r2
 800234c:	3355      	adds	r3, #85	; 0x55
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d109      	bne.n	8002368 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002354:	78fb      	ldrb	r3, [r7, #3]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	212c      	movs	r1, #44	; 0x2c
 800235a:	fb01 f303 	mul.w	r3, r1, r3
 800235e:	4413      	add	r3, r2
 8002360:	3342      	adds	r3, #66	; 0x42
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002366:	e093      	b.n	8002490 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	212c      	movs	r1, #44	; 0x2c
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	4413      	add	r3, r2
 8002374:	3342      	adds	r3, #66	; 0x42
 8002376:	2202      	movs	r2, #2
 8002378:	701a      	strb	r2, [r3, #0]
      break;
 800237a:	e089      	b.n	8002490 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800237c:	78bb      	ldrb	r3, [r7, #2]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d11d      	bne.n	80023be <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002382:	78fb      	ldrb	r3, [r7, #3]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	212c      	movs	r1, #44	; 0x2c
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	4413      	add	r3, r2
 800238e:	3355      	adds	r3, #85	; 0x55
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d109      	bne.n	80023aa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002396:	78fb      	ldrb	r3, [r7, #3]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	212c      	movs	r1, #44	; 0x2c
 800239c:	fb01 f303 	mul.w	r3, r1, r3
 80023a0:	4413      	add	r3, r2
 80023a2:	3342      	adds	r3, #66	; 0x42
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80023a8:	e073      	b.n	8002492 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023aa:	78fb      	ldrb	r3, [r7, #3]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	212c      	movs	r1, #44	; 0x2c
 80023b0:	fb01 f303 	mul.w	r3, r1, r3
 80023b4:	4413      	add	r3, r2
 80023b6:	3342      	adds	r3, #66	; 0x42
 80023b8:	2202      	movs	r2, #2
 80023ba:	701a      	strb	r2, [r3, #0]
      break;
 80023bc:	e069      	b.n	8002492 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80023be:	78fb      	ldrb	r3, [r7, #3]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	212c      	movs	r1, #44	; 0x2c
 80023c4:	fb01 f303 	mul.w	r3, r1, r3
 80023c8:	4413      	add	r3, r2
 80023ca:	3354      	adds	r3, #84	; 0x54
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d109      	bne.n	80023e6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023d2:	78fb      	ldrb	r3, [r7, #3]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	212c      	movs	r1, #44	; 0x2c
 80023d8:	fb01 f303 	mul.w	r3, r1, r3
 80023dc:	4413      	add	r3, r2
 80023de:	3342      	adds	r3, #66	; 0x42
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]
      break;
 80023e4:	e055      	b.n	8002492 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	212c      	movs	r1, #44	; 0x2c
 80023ec:	fb01 f303 	mul.w	r3, r1, r3
 80023f0:	4413      	add	r3, r2
 80023f2:	3342      	adds	r3, #66	; 0x42
 80023f4:	2202      	movs	r2, #2
 80023f6:	701a      	strb	r2, [r3, #0]
      break;
 80023f8:	e04b      	b.n	8002492 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80023fa:	78bb      	ldrb	r3, [r7, #2]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d11d      	bne.n	800243c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	212c      	movs	r1, #44	; 0x2c
 8002406:	fb01 f303 	mul.w	r3, r1, r3
 800240a:	4413      	add	r3, r2
 800240c:	3355      	adds	r3, #85	; 0x55
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d109      	bne.n	8002428 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002414:	78fb      	ldrb	r3, [r7, #3]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	212c      	movs	r1, #44	; 0x2c
 800241a:	fb01 f303 	mul.w	r3, r1, r3
 800241e:	4413      	add	r3, r2
 8002420:	3342      	adds	r3, #66	; 0x42
 8002422:	2200      	movs	r2, #0
 8002424:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002426:	e034      	b.n	8002492 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	212c      	movs	r1, #44	; 0x2c
 800242e:	fb01 f303 	mul.w	r3, r1, r3
 8002432:	4413      	add	r3, r2
 8002434:	3342      	adds	r3, #66	; 0x42
 8002436:	2202      	movs	r2, #2
 8002438:	701a      	strb	r2, [r3, #0]
      break;
 800243a:	e02a      	b.n	8002492 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800243c:	78fb      	ldrb	r3, [r7, #3]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	212c      	movs	r1, #44	; 0x2c
 8002442:	fb01 f303 	mul.w	r3, r1, r3
 8002446:	4413      	add	r3, r2
 8002448:	3354      	adds	r3, #84	; 0x54
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d109      	bne.n	8002464 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	212c      	movs	r1, #44	; 0x2c
 8002456:	fb01 f303 	mul.w	r3, r1, r3
 800245a:	4413      	add	r3, r2
 800245c:	3342      	adds	r3, #66	; 0x42
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
      break;
 8002462:	e016      	b.n	8002492 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	212c      	movs	r1, #44	; 0x2c
 800246a:	fb01 f303 	mul.w	r3, r1, r3
 800246e:	4413      	add	r3, r2
 8002470:	3342      	adds	r3, #66	; 0x42
 8002472:	2202      	movs	r2, #2
 8002474:	701a      	strb	r2, [r3, #0]
      break;
 8002476:	e00c      	b.n	8002492 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	212c      	movs	r1, #44	; 0x2c
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	4413      	add	r3, r2
 8002484:	3342      	adds	r3, #66	; 0x42
 8002486:	2200      	movs	r2, #0
 8002488:	701a      	strb	r2, [r3, #0]
      break;
 800248a:	e002      	b.n	8002492 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800248c:	bf00      	nop
 800248e:	e000      	b.n	8002492 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002490:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002492:	78fb      	ldrb	r3, [r7, #3]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	212c      	movs	r1, #44	; 0x2c
 8002498:	fb01 f303 	mul.w	r3, r1, r3
 800249c:	4413      	add	r3, r2
 800249e:	3344      	adds	r3, #68	; 0x44
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	8b3a      	ldrh	r2, [r7, #24]
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	202c      	movs	r0, #44	; 0x2c
 80024ac:	fb00 f303 	mul.w	r3, r0, r3
 80024b0:	440b      	add	r3, r1
 80024b2:	334c      	adds	r3, #76	; 0x4c
 80024b4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80024b6:	78fb      	ldrb	r3, [r7, #3]
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	212c      	movs	r1, #44	; 0x2c
 80024bc:	fb01 f303 	mul.w	r3, r1, r3
 80024c0:	4413      	add	r3, r2
 80024c2:	3360      	adds	r3, #96	; 0x60
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	212c      	movs	r1, #44	; 0x2c
 80024ce:	fb01 f303 	mul.w	r3, r1, r3
 80024d2:	4413      	add	r3, r2
 80024d4:	3350      	adds	r3, #80	; 0x50
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	212c      	movs	r1, #44	; 0x2c
 80024e0:	fb01 f303 	mul.w	r3, r1, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	3339      	adds	r3, #57	; 0x39
 80024e8:	78fa      	ldrb	r2, [r7, #3]
 80024ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80024ec:	78fb      	ldrb	r3, [r7, #3]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	212c      	movs	r1, #44	; 0x2c
 80024f2:	fb01 f303 	mul.w	r3, r1, r3
 80024f6:	4413      	add	r3, r2
 80024f8:	3361      	adds	r3, #97	; 0x61
 80024fa:	2200      	movs	r2, #0
 80024fc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6818      	ldr	r0, [r3, #0]
 8002502:	78fb      	ldrb	r3, [r7, #3]
 8002504:	222c      	movs	r2, #44	; 0x2c
 8002506:	fb02 f303 	mul.w	r3, r2, r3
 800250a:	3338      	adds	r3, #56	; 0x38
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	4413      	add	r3, r2
 8002510:	4619      	mov	r1, r3
 8002512:	f004 f9a1 	bl	8006858 <USB_HC_StartXfer>
 8002516:	4603      	mov	r3, r0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f003 ff1e 	bl	8006378 <USB_GetMode>
 800253c:	4603      	mov	r3, r0
 800253e:	2b01      	cmp	r3, #1
 8002540:	f040 80ef 	bne.w	8002722 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f003 ff03 	bl	8006354 <USB_ReadInterrupts>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 80e5 	beq.w	8002720 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f003 fefa 	bl	8006354 <USB_ReadInterrupts>
 8002560:	4603      	mov	r3, r0
 8002562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002566:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800256a:	d104      	bne.n	8002576 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002574:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f003 feea 	bl	8006354 <USB_ReadInterrupts>
 8002580:	4603      	mov	r3, r0
 8002582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800258a:	d104      	bne.n	8002596 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002594:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f003 feda 	bl	8006354 <USB_ReadInterrupts>
 80025a0:	4603      	mov	r3, r0
 80025a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025aa:	d104      	bne.n	80025b6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f003 feca 	bl	8006354 <USB_ReadInterrupts>
 80025c0:	4603      	mov	r3, r0
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d103      	bne.n	80025d2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2202      	movs	r2, #2
 80025d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f003 febc 	bl	8006354 <USB_ReadInterrupts>
 80025dc:	4603      	mov	r3, r0
 80025de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025e6:	d115      	bne.n	8002614 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80025f0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d108      	bne.n	8002614 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f00e fb28 	bl	8010c58 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2101      	movs	r1, #1
 800260e:	4618      	mov	r0, r3
 8002610:	f003 ff68 	bl	80064e4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f003 fe9b 	bl	8006354 <USB_ReadInterrupts>
 800261e:	4603      	mov	r3, r0
 8002620:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002628:	d102      	bne.n	8002630 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f001 f978 	bl	8003920 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f003 fe8d 	bl	8006354 <USB_ReadInterrupts>
 800263a:	4603      	mov	r3, r0
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b08      	cmp	r3, #8
 8002642:	d106      	bne.n	8002652 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f00e faeb 	bl	8010c20 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2208      	movs	r2, #8
 8002650:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f003 fe7c 	bl	8006354 <USB_ReadInterrupts>
 800265c:	4603      	mov	r3, r0
 800265e:	f003 0310 	and.w	r3, r3, #16
 8002662:	2b10      	cmp	r3, #16
 8002664:	d101      	bne.n	800266a <HAL_HCD_IRQHandler+0x14a>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <HAL_HCD_IRQHandler+0x14c>
 800266a:	2300      	movs	r3, #0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d012      	beq.n	8002696 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699a      	ldr	r2, [r3, #24]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0210 	bic.w	r2, r2, #16
 800267e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f001 f87b 	bl	800377c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	699a      	ldr	r2, [r3, #24]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f042 0210 	orr.w	r2, r2, #16
 8002694:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f003 fe5a 	bl	8006354 <USB_ReadInterrupts>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026aa:	d13a      	bne.n	8002722 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f004 f9c9 	bl	8006a48 <USB_HC_ReadInterrupt>
 80026b6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	e025      	b.n	800270a <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f003 030f 	and.w	r3, r3, #15
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d018      	beq.n	8002704 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	015a      	lsls	r2, r3, #5
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4413      	add	r3, r2
 80026da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026e8:	d106      	bne.n	80026f8 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	4619      	mov	r1, r3
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f8a9 	bl	8002848 <HCD_HC_IN_IRQHandler>
 80026f6:	e005      	b.n	8002704 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	4619      	mov	r1, r3
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 fca2 	bl	8003048 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	3301      	adds	r3, #1
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	429a      	cmp	r2, r3
 8002712:	d3d4      	bcc.n	80026be <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800271c:	615a      	str	r2, [r3, #20]
 800271e:	e000      	b.n	8002722 <HAL_HCD_IRQHandler+0x202>
      return;
 8002720:	bf00      	nop
    }
  }
}
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_HCD_Start+0x16>
 800273a:	2302      	movs	r3, #2
 800273c:	e013      	b.n	8002766 <HAL_HCD_Start+0x3e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2101      	movs	r1, #1
 800274c:	4618      	mov	r0, r3
 800274e:	f003 ff2c 	bl	80065aa <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f003 fcbc 	bl	80060d4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_HCD_Stop+0x16>
 8002780:	2302      	movs	r3, #2
 8002782:	e00d      	b.n	80027a0 <HAL_HCD_Stop+0x32>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f004 fa84 	bl	8006c9e <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f003 fece 	bl	8006556 <USB_ResetPort>
 80027ba:	4603      	mov	r3, r0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80027d0:	78fb      	ldrb	r3, [r7, #3]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	212c      	movs	r1, #44	; 0x2c
 80027d6:	fb01 f303 	mul.w	r3, r1, r3
 80027da:	4413      	add	r3, r2
 80027dc:	3360      	adds	r3, #96	; 0x60
 80027de:	781b      	ldrb	r3, [r3, #0]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr

080027ea <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	460b      	mov	r3, r1
 80027f4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80027f6:	78fb      	ldrb	r3, [r7, #3]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	212c      	movs	r1, #44	; 0x2c
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	4413      	add	r3, r2
 8002802:	3350      	adds	r3, #80	; 0x50
 8002804:	681b      	ldr	r3, [r3, #0]
}
 8002806:	4618      	mov	r0, r3
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f003 ff12 	bl	8006646 <USB_GetCurrentFrame>
 8002822:	4603      	mov	r3, r0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f003 feee 	bl	800661a <USB_GetHostSpeed>
 800283e:	4603      	mov	r3, r0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800285e:	78fb      	ldrb	r3, [r7, #3]
 8002860:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4413      	add	r3, r2
 800286a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b04      	cmp	r3, #4
 8002876:	d119      	bne.n	80028ac <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	4413      	add	r3, r2
 8002880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002884:	461a      	mov	r2, r3
 8002886:	2304      	movs	r3, #4
 8002888:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4413      	add	r3, r2
 8002892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	0151      	lsls	r1, r2, #5
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	440a      	add	r2, r1
 80028a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028a4:	f043 0302 	orr.w	r3, r3, #2
 80028a8:	60d3      	str	r3, [r2, #12]
 80028aa:	e101      	b.n	8002ab0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	015a      	lsls	r2, r3, #5
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028c2:	d12b      	bne.n	800291c <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d0:	461a      	mov	r2, r3
 80028d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	3361      	adds	r3, #97	; 0x61
 80028e6:	2207      	movs	r2, #7
 80028e8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	015a      	lsls	r2, r3, #5
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	0151      	lsls	r1, r2, #5
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	440a      	add	r2, r1
 8002900:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002904:	f043 0302 	orr.w	r3, r3, #2
 8002908:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	4611      	mov	r1, r2
 8002914:	4618      	mov	r0, r3
 8002916:	f004 f8a7 	bl	8006a68 <USB_HC_Halt>
 800291a:	e0c9      	b.n	8002ab0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4413      	add	r3, r2
 8002924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 0320 	and.w	r3, r3, #32
 800292e:	2b20      	cmp	r3, #32
 8002930:	d109      	bne.n	8002946 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	015a      	lsls	r2, r3, #5
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4413      	add	r3, r2
 800293a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293e:	461a      	mov	r2, r3
 8002940:	2320      	movs	r3, #32
 8002942:	6093      	str	r3, [r2, #8]
 8002944:	e0b4      	b.n	8002ab0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	015a      	lsls	r2, r3, #5
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	4413      	add	r3, r2
 800294e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	2b08      	cmp	r3, #8
 800295a:	d133      	bne.n	80029c4 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4413      	add	r3, r2
 8002964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	0151      	lsls	r1, r2, #5
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	440a      	add	r2, r1
 8002972:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002976:	f043 0302 	orr.w	r3, r3, #2
 800297a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	212c      	movs	r1, #44	; 0x2c
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	3361      	adds	r3, #97	; 0x61
 800298a:	2205      	movs	r2, #5
 800298c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	4413      	add	r3, r2
 8002996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299a:	461a      	mov	r2, r3
 800299c:	2310      	movs	r3, #16
 800299e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	015a      	lsls	r2, r3, #5
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ac:	461a      	mov	r2, r3
 80029ae:	2308      	movs	r3, #8
 80029b0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	4611      	mov	r1, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f004 f853 	bl	8006a68 <USB_HC_Halt>
 80029c2:	e075      	b.n	8002ab0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029da:	d134      	bne.n	8002a46 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	0151      	lsls	r1, r2, #5
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	440a      	add	r2, r1
 80029f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029f6:	f043 0302 	orr.w	r3, r3, #2
 80029fa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	212c      	movs	r1, #44	; 0x2c
 8002a02:	fb01 f303 	mul.w	r3, r1, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	3361      	adds	r3, #97	; 0x61
 8002a0a:	2208      	movs	r2, #8
 8002a0c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	2310      	movs	r3, #16
 8002a1e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a32:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	4611      	mov	r1, r2
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f004 f812 	bl	8006a68 <USB_HC_Halt>
 8002a44:	e034      	b.n	8002ab0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	015a      	lsls	r2, r3, #5
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a58:	2b80      	cmp	r3, #128	; 0x80
 8002a5a:	d129      	bne.n	8002ab0 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	0151      	lsls	r1, r2, #5
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	440a      	add	r2, r1
 8002a72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a76:	f043 0302 	orr.w	r3, r3, #2
 8002a7a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	212c      	movs	r1, #44	; 0x2c
 8002a82:	fb01 f303 	mul.w	r3, r1, r3
 8002a86:	4413      	add	r3, r2
 8002a88:	3361      	adds	r3, #97	; 0x61
 8002a8a:	2206      	movs	r2, #6
 8002a8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	4611      	mov	r1, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f003 ffe5 	bl	8006a68 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aaa:	461a      	mov	r2, r3
 8002aac:	2380      	movs	r3, #128	; 0x80
 8002aae:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ac2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ac6:	d122      	bne.n	8002b0e <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	0151      	lsls	r1, r2, #5
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	440a      	add	r2, r1
 8002ade:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ae2:	f043 0302 	orr.w	r3, r3, #2
 8002ae6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	4611      	mov	r1, r2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f003 ffb8 	bl	8006a68 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b04:	461a      	mov	r2, r3
 8002b06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b0a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002b0c:	e298      	b.n	8003040 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	015a      	lsls	r2, r3, #5
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	f040 80fd 	bne.w	8002d20 <HCD_HC_IN_IRQHandler+0x4d8>
    hhcd->hc[ch_num].state = HC_XFRC;
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	212c      	movs	r1, #44	; 0x2c
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	3361      	adds	r3, #97	; 0x61
 8002b34:	2201      	movs	r2, #1
 8002b36:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	212c      	movs	r1, #44	; 0x2c
 8002b3e:	fb01 f303 	mul.w	r3, r1, r3
 8002b42:	4413      	add	r3, r2
 8002b44:	335c      	adds	r3, #92	; 0x5c
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	015a      	lsls	r2, r3, #5
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	4413      	add	r3, r2
 8002b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b56:	461a      	mov	r2, r3
 8002b58:	2301      	movs	r3, #1
 8002b5a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	212c      	movs	r1, #44	; 0x2c
 8002b62:	fb01 f303 	mul.w	r3, r1, r3
 8002b66:	4413      	add	r3, r2
 8002b68:	333f      	adds	r3, #63	; 0x3f
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d009      	beq.n	8002b84 <HCD_HC_IN_IRQHandler+0x33c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	212c      	movs	r1, #44	; 0x2c
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	333f      	adds	r3, #63	; 0x3f
 8002b7e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d121      	bne.n	8002bc8 <HCD_HC_IN_IRQHandler+0x380>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	0151      	lsls	r1, r2, #5
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	440a      	add	r2, r1
 8002b9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b9e:	f043 0302 	orr.w	r3, r3, #2
 8002ba2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	4611      	mov	r1, r2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f003 ff5a 	bl	8006a68 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	015a      	lsls	r2, r3, #5
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	4413      	add	r3, r2
 8002bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	2310      	movs	r3, #16
 8002bc4:	6093      	str	r3, [r2, #8]
 8002bc6:	e066      	b.n	8002c96 <HCD_HC_IN_IRQHandler+0x44e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	212c      	movs	r1, #44	; 0x2c
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	333f      	adds	r3, #63	; 0x3f
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d127      	bne.n	8002c2c <HCD_HC_IN_IRQHandler+0x3e4>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	015a      	lsls	r2, r3, #5
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	0151      	lsls	r1, r2, #5
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	440a      	add	r2, r1
 8002bf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bf6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002bfa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	212c      	movs	r1, #44	; 0x2c
 8002c02:	fb01 f303 	mul.w	r3, r1, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	3360      	adds	r3, #96	; 0x60
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	b2d9      	uxtb	r1, r3
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	202c      	movs	r0, #44	; 0x2c
 8002c18:	fb00 f303 	mul.w	r3, r0, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3360      	adds	r3, #96	; 0x60
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f00e f825 	bl	8010c74 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c2a:	e034      	b.n	8002c96 <HCD_HC_IN_IRQHandler+0x44e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	212c      	movs	r1, #44	; 0x2c
 8002c32:	fb01 f303 	mul.w	r3, r1, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	333f      	adds	r3, #63	; 0x3f
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d12a      	bne.n	8002c96 <HCD_HC_IN_IRQHandler+0x44e>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	212c      	movs	r1, #44	; 0x2c
 8002c46:	fb01 f303 	mul.w	r3, r1, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3360      	adds	r3, #96	; 0x60
 8002c4e:	2201      	movs	r2, #1
 8002c50:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	212c      	movs	r1, #44	; 0x2c
 8002c58:	fb01 f303 	mul.w	r3, r1, r3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3354      	adds	r3, #84	; 0x54
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	f083 0301 	eor.w	r3, r3, #1
 8002c66:	b2d8      	uxtb	r0, r3
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	212c      	movs	r1, #44	; 0x2c
 8002c6e:	fb01 f303 	mul.w	r3, r1, r3
 8002c72:	4413      	add	r3, r2
 8002c74:	3354      	adds	r3, #84	; 0x54
 8002c76:	4602      	mov	r2, r0
 8002c78:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	b2d9      	uxtb	r1, r3
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	202c      	movs	r0, #44	; 0x2c
 8002c84:	fb00 f303 	mul.w	r3, r0, r3
 8002c88:	4413      	add	r3, r2
 8002c8a:	3360      	adds	r3, #96	; 0x60
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f00d ffef 	bl	8010c74 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d12b      	bne.n	8002cf6 <HCD_HC_IN_IRQHandler+0x4ae>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	212c      	movs	r1, #44	; 0x2c
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	3348      	adds	r3, #72	; 0x48
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	202c      	movs	r0, #44	; 0x2c
 8002cb4:	fb00 f202 	mul.w	r2, r0, r2
 8002cb8:	440a      	add	r2, r1
 8002cba:	3240      	adds	r2, #64	; 0x40
 8002cbc:	8812      	ldrh	r2, [r2, #0]
 8002cbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 81ba 	beq.w	8003040 <HCD_HC_IN_IRQHandler+0x7f8>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	212c      	movs	r1, #44	; 0x2c
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3354      	adds	r3, #84	; 0x54
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	f083 0301 	eor.w	r3, r3, #1
 8002ce0:	b2d8      	uxtb	r0, r3
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	212c      	movs	r1, #44	; 0x2c
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	3354      	adds	r3, #84	; 0x54
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	701a      	strb	r2, [r3, #0]
}
 8002cf4:	e1a4      	b.n	8003040 <HCD_HC_IN_IRQHandler+0x7f8>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	212c      	movs	r1, #44	; 0x2c
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	3354      	adds	r3, #84	; 0x54
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	f083 0301 	eor.w	r3, r3, #1
 8002d0a:	b2d8      	uxtb	r0, r3
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	212c      	movs	r1, #44	; 0x2c
 8002d12:	fb01 f303 	mul.w	r3, r1, r3
 8002d16:	4413      	add	r3, r2
 8002d18:	3354      	adds	r3, #84	; 0x54
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	701a      	strb	r2, [r3, #0]
}
 8002d1e:	e18f      	b.n	8003040 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	015a      	lsls	r2, r3, #5
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4413      	add	r3, r2
 8002d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	f040 8106 	bne.w	8002f44 <HCD_HC_IN_IRQHandler+0x6fc>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	015a      	lsls	r2, r3, #5
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	0151      	lsls	r1, r2, #5
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	440a      	add	r2, r1
 8002d4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d52:	f023 0302 	bic.w	r3, r3, #2
 8002d56:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	212c      	movs	r1, #44	; 0x2c
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	3361      	adds	r3, #97	; 0x61
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d109      	bne.n	8002d80 <HCD_HC_IN_IRQHandler+0x538>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	212c      	movs	r1, #44	; 0x2c
 8002d72:	fb01 f303 	mul.w	r3, r1, r3
 8002d76:	4413      	add	r3, r2
 8002d78:	3360      	adds	r3, #96	; 0x60
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	701a      	strb	r2, [r3, #0]
 8002d7e:	e0c9      	b.n	8002f14 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	212c      	movs	r1, #44	; 0x2c
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3361      	adds	r3, #97	; 0x61
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b05      	cmp	r3, #5
 8002d92:	d109      	bne.n	8002da8 <HCD_HC_IN_IRQHandler+0x560>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	212c      	movs	r1, #44	; 0x2c
 8002d9a:	fb01 f303 	mul.w	r3, r1, r3
 8002d9e:	4413      	add	r3, r2
 8002da0:	3360      	adds	r3, #96	; 0x60
 8002da2:	2205      	movs	r2, #5
 8002da4:	701a      	strb	r2, [r3, #0]
 8002da6:	e0b5      	b.n	8002f14 <HCD_HC_IN_IRQHandler+0x6cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	212c      	movs	r1, #44	; 0x2c
 8002dae:	fb01 f303 	mul.w	r3, r1, r3
 8002db2:	4413      	add	r3, r2
 8002db4:	3361      	adds	r3, #97	; 0x61
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b06      	cmp	r3, #6
 8002dba:	d009      	beq.n	8002dd0 <HCD_HC_IN_IRQHandler+0x588>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	212c      	movs	r1, #44	; 0x2c
 8002dc2:	fb01 f303 	mul.w	r3, r1, r3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3361      	adds	r3, #97	; 0x61
 8002dca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d150      	bne.n	8002e72 <HCD_HC_IN_IRQHandler+0x62a>
      hhcd->hc[ch_num].ErrCnt++;
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	212c      	movs	r1, #44	; 0x2c
 8002dd6:	fb01 f303 	mul.w	r3, r1, r3
 8002dda:	4413      	add	r3, r2
 8002ddc:	335c      	adds	r3, #92	; 0x5c
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	202c      	movs	r0, #44	; 0x2c
 8002de8:	fb00 f303 	mul.w	r3, r0, r3
 8002dec:	440b      	add	r3, r1
 8002dee:	335c      	adds	r3, #92	; 0x5c
 8002df0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	212c      	movs	r1, #44	; 0x2c
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	335c      	adds	r3, #92	; 0x5c
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d912      	bls.n	8002e2c <HCD_HC_IN_IRQHandler+0x5e4>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	212c      	movs	r1, #44	; 0x2c
 8002e0c:	fb01 f303 	mul.w	r3, r1, r3
 8002e10:	4413      	add	r3, r2
 8002e12:	335c      	adds	r3, #92	; 0x5c
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	212c      	movs	r1, #44	; 0x2c
 8002e1e:	fb01 f303 	mul.w	r3, r1, r3
 8002e22:	4413      	add	r3, r2
 8002e24:	3360      	adds	r3, #96	; 0x60
 8002e26:	2204      	movs	r2, #4
 8002e28:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e2a:	e073      	b.n	8002f14 <HCD_HC_IN_IRQHandler+0x6cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	212c      	movs	r1, #44	; 0x2c
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	3360      	adds	r3, #96	; 0x60
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e54:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e5c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e70:	e050      	b.n	8002f14 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	212c      	movs	r1, #44	; 0x2c
 8002e78:	fb01 f303 	mul.w	r3, r1, r3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3361      	adds	r3, #97	; 0x61
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	d122      	bne.n	8002ecc <HCD_HC_IN_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	212c      	movs	r1, #44	; 0x2c
 8002e8c:	fb01 f303 	mul.w	r3, r1, r3
 8002e90:	4413      	add	r3, r2
 8002e92:	3360      	adds	r3, #96	; 0x60
 8002e94:	2202      	movs	r2, #2
 8002e96:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002eae:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002eb6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e023      	b.n	8002f14 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	212c      	movs	r1, #44	; 0x2c
 8002ed2:	fb01 f303 	mul.w	r3, r1, r3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3361      	adds	r3, #97	; 0x61
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b07      	cmp	r3, #7
 8002ede:	d119      	bne.n	8002f14 <HCD_HC_IN_IRQHandler+0x6cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	212c      	movs	r1, #44	; 0x2c
 8002ee6:	fb01 f303 	mul.w	r3, r1, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	335c      	adds	r3, #92	; 0x5c
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	1c5a      	adds	r2, r3, #1
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	202c      	movs	r0, #44	; 0x2c
 8002ef8:	fb00 f303 	mul.w	r3, r0, r3
 8002efc:	440b      	add	r3, r1
 8002efe:	335c      	adds	r3, #92	; 0x5c
 8002f00:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	212c      	movs	r1, #44	; 0x2c
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3360      	adds	r3, #96	; 0x60
 8002f10:	2204      	movs	r2, #4
 8002f12:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f20:	461a      	mov	r2, r3
 8002f22:	2302      	movs	r3, #2
 8002f24:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	b2d9      	uxtb	r1, r3
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	202c      	movs	r0, #44	; 0x2c
 8002f30:	fb00 f303 	mul.w	r3, r0, r3
 8002f34:	4413      	add	r3, r2
 8002f36:	3360      	adds	r3, #96	; 0x60
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f00d fe99 	bl	8010c74 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f42:	e07d      	b.n	8003040 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 0310 	and.w	r3, r3, #16
 8002f56:	2b10      	cmp	r3, #16
 8002f58:	d172      	bne.n	8003040 <HCD_HC_IN_IRQHandler+0x7f8>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	212c      	movs	r1, #44	; 0x2c
 8002f60:	fb01 f303 	mul.w	r3, r1, r3
 8002f64:	4413      	add	r3, r2
 8002f66:	333f      	adds	r3, #63	; 0x3f
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b03      	cmp	r3, #3
 8002f6c:	d121      	bne.n	8002fb2 <HCD_HC_IN_IRQHandler+0x76a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	212c      	movs	r1, #44	; 0x2c
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	4413      	add	r3, r2
 8002f7a:	335c      	adds	r3, #92	; 0x5c
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	015a      	lsls	r2, r3, #5
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	4413      	add	r3, r2
 8002f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	0151      	lsls	r1, r2, #5
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	440a      	add	r2, r1
 8002f96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f9a:	f043 0302 	orr.w	r3, r3, #2
 8002f9e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f003 fd5c 	bl	8006a68 <USB_HC_Halt>
 8002fb0:	e03d      	b.n	800302e <HCD_HC_IN_IRQHandler+0x7e6>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	212c      	movs	r1, #44	; 0x2c
 8002fb8:	fb01 f303 	mul.w	r3, r1, r3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	333f      	adds	r3, #63	; 0x3f
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d009      	beq.n	8002fda <HCD_HC_IN_IRQHandler+0x792>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	212c      	movs	r1, #44	; 0x2c
 8002fcc:	fb01 f303 	mul.w	r3, r1, r3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	333f      	adds	r3, #63	; 0x3f
 8002fd4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d129      	bne.n	800302e <HCD_HC_IN_IRQHandler+0x7e6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	212c      	movs	r1, #44	; 0x2c
 8002fe0:	fb01 f303 	mul.w	r3, r1, r3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	335c      	adds	r3, #92	; 0x5c
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	212c      	movs	r1, #44	; 0x2c
 8002ff2:	fb01 f303 	mul.w	r3, r1, r3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3361      	adds	r3, #97	; 0x61
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4413      	add	r3, r2
 8003006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	0151      	lsls	r1, r2, #5
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	440a      	add	r2, r1
 8003014:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003018:	f043 0302 	orr.w	r3, r3, #2
 800301c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	4611      	mov	r1, r2
 8003028:	4618      	mov	r0, r3
 800302a:	f003 fd1d 	bl	8006a68 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4413      	add	r3, r2
 8003036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303a:	461a      	mov	r2, r3
 800303c:	2310      	movs	r3, #16
 800303e:	6093      	str	r3, [r2, #8]
}
 8003040:	bf00      	nop
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	4413      	add	r3, r2
 800306a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b04      	cmp	r3, #4
 8003076:	d119      	bne.n	80030ac <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	015a      	lsls	r2, r3, #5
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	4413      	add	r3, r2
 8003080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003084:	461a      	mov	r2, r3
 8003086:	2304      	movs	r3, #4
 8003088:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	015a      	lsls	r2, r3, #5
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	4413      	add	r3, r2
 8003092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	0151      	lsls	r1, r2, #5
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	440a      	add	r2, r1
 80030a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030a4:	f043 0302 	orr.w	r3, r3, #2
 80030a8:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80030aa:	e363      	b.n	8003774 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 0320 	and.w	r3, r3, #32
 80030be:	2b20      	cmp	r3, #32
 80030c0:	d13e      	bne.n	8003140 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	015a      	lsls	r2, r3, #5
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ce:	461a      	mov	r2, r3
 80030d0:	2320      	movs	r3, #32
 80030d2:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	212c      	movs	r1, #44	; 0x2c
 80030da:	fb01 f303 	mul.w	r3, r1, r3
 80030de:	4413      	add	r3, r2
 80030e0:	333d      	adds	r3, #61	; 0x3d
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	f040 8345 	bne.w	8003774 <HCD_HC_OUT_IRQHandler+0x72c>
      hhcd->hc[ch_num].do_ping = 0U;
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	212c      	movs	r1, #44	; 0x2c
 80030f0:	fb01 f303 	mul.w	r3, r1, r3
 80030f4:	4413      	add	r3, r2
 80030f6:	333d      	adds	r3, #61	; 0x3d
 80030f8:	2200      	movs	r2, #0
 80030fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	212c      	movs	r1, #44	; 0x2c
 8003102:	fb01 f303 	mul.w	r3, r1, r3
 8003106:	4413      	add	r3, r2
 8003108:	3360      	adds	r3, #96	; 0x60
 800310a:	2202      	movs	r2, #2
 800310c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	015a      	lsls	r2, r3, #5
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	4413      	add	r3, r2
 8003116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	0151      	lsls	r1, r2, #5
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	440a      	add	r2, r1
 8003124:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003128:	f043 0302 	orr.w	r3, r3, #2
 800312c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	4611      	mov	r1, r2
 8003138:	4618      	mov	r0, r3
 800313a:	f003 fc95 	bl	8006a68 <USB_HC_Halt>
}
 800313e:	e319      	b.n	8003774 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	4413      	add	r3, r2
 8003148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003156:	d122      	bne.n	800319e <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	4413      	add	r3, r2
 8003160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	0151      	lsls	r1, r2, #5
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	440a      	add	r2, r1
 800316e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003172:	f043 0302 	orr.w	r3, r3, #2
 8003176:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	4611      	mov	r1, r2
 8003182:	4618      	mov	r0, r3
 8003184:	f003 fc70 	bl	8006a68 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	4413      	add	r3, r2
 8003190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003194:	461a      	mov	r2, r3
 8003196:	f44f 7300 	mov.w	r3, #512	; 0x200
 800319a:	6093      	str	r3, [r2, #8]
}
 800319c:	e2ea      	b.n	8003774 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d150      	bne.n	8003256 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	212c      	movs	r1, #44	; 0x2c
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	4413      	add	r3, r2
 80031c0:	335c      	adds	r3, #92	; 0x5c
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	015a      	lsls	r2, r3, #5
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	4413      	add	r3, r2
 80031ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d8:	2b40      	cmp	r3, #64	; 0x40
 80031da:	d111      	bne.n	8003200 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	212c      	movs	r1, #44	; 0x2c
 80031e2:	fb01 f303 	mul.w	r3, r1, r3
 80031e6:	4413      	add	r3, r2
 80031e8:	333d      	adds	r3, #61	; 0x3d
 80031ea:	2201      	movs	r2, #1
 80031ec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	015a      	lsls	r2, r3, #5
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fa:	461a      	mov	r2, r3
 80031fc:	2340      	movs	r3, #64	; 0x40
 80031fe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	4413      	add	r3, r2
 8003208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	0151      	lsls	r1, r2, #5
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	440a      	add	r2, r1
 8003216:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800321a:	f043 0302 	orr.w	r3, r3, #2
 800321e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	4611      	mov	r1, r2
 800322a:	4618      	mov	r0, r3
 800322c:	f003 fc1c 	bl	8006a68 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	4413      	add	r3, r2
 8003238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323c:	461a      	mov	r2, r3
 800323e:	2301      	movs	r3, #1
 8003240:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	212c      	movs	r1, #44	; 0x2c
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	4413      	add	r3, r2
 800324e:	3361      	adds	r3, #97	; 0x61
 8003250:	2201      	movs	r2, #1
 8003252:	701a      	strb	r2, [r3, #0]
}
 8003254:	e28e      	b.n	8003774 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	4413      	add	r3, r2
 800325e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003268:	2b40      	cmp	r3, #64	; 0x40
 800326a:	d13c      	bne.n	80032e6 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	212c      	movs	r1, #44	; 0x2c
 8003272:	fb01 f303 	mul.w	r3, r1, r3
 8003276:	4413      	add	r3, r2
 8003278:	3361      	adds	r3, #97	; 0x61
 800327a:	2204      	movs	r2, #4
 800327c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	212c      	movs	r1, #44	; 0x2c
 8003284:	fb01 f303 	mul.w	r3, r1, r3
 8003288:	4413      	add	r3, r2
 800328a:	333d      	adds	r3, #61	; 0x3d
 800328c:	2201      	movs	r2, #1
 800328e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	212c      	movs	r1, #44	; 0x2c
 8003296:	fb01 f303 	mul.w	r3, r1, r3
 800329a:	4413      	add	r3, r2
 800329c:	335c      	adds	r3, #92	; 0x5c
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	015a      	lsls	r2, r3, #5
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	0151      	lsls	r1, r2, #5
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	440a      	add	r2, r1
 80032b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032bc:	f043 0302 	orr.w	r3, r3, #2
 80032c0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	4611      	mov	r1, r2
 80032cc:	4618      	mov	r0, r3
 80032ce:	f003 fbcb 	bl	8006a68 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	015a      	lsls	r2, r3, #5
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	4413      	add	r3, r2
 80032da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032de:	461a      	mov	r2, r3
 80032e0:	2340      	movs	r3, #64	; 0x40
 80032e2:	6093      	str	r3, [r2, #8]
}
 80032e4:	e246      	b.n	8003774 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d12a      	bne.n	8003352 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	015a      	lsls	r2, r3, #5
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	4413      	add	r3, r2
 8003304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003308:	461a      	mov	r2, r3
 800330a:	2308      	movs	r3, #8
 800330c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	015a      	lsls	r2, r3, #5
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	4413      	add	r3, r2
 8003316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	0151      	lsls	r1, r2, #5
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	440a      	add	r2, r1
 8003324:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003328:	f043 0302 	orr.w	r3, r3, #2
 800332c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	4611      	mov	r1, r2
 8003338:	4618      	mov	r0, r3
 800333a:	f003 fb95 	bl	8006a68 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	212c      	movs	r1, #44	; 0x2c
 8003344:	fb01 f303 	mul.w	r3, r1, r3
 8003348:	4413      	add	r3, r2
 800334a:	3361      	adds	r3, #97	; 0x61
 800334c:	2205      	movs	r2, #5
 800334e:	701a      	strb	r2, [r3, #0]
}
 8003350:	e210      	b.n	8003774 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	015a      	lsls	r2, r3, #5
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	4413      	add	r3, r2
 800335a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 0310 	and.w	r3, r3, #16
 8003364:	2b10      	cmp	r3, #16
 8003366:	d133      	bne.n	80033d0 <HCD_HC_OUT_IRQHandler+0x388>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	212c      	movs	r1, #44	; 0x2c
 800336e:	fb01 f303 	mul.w	r3, r1, r3
 8003372:	4413      	add	r3, r2
 8003374:	335c      	adds	r3, #92	; 0x5c
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	212c      	movs	r1, #44	; 0x2c
 8003380:	fb01 f303 	mul.w	r3, r1, r3
 8003384:	4413      	add	r3, r2
 8003386:	3361      	adds	r3, #97	; 0x61
 8003388:	2203      	movs	r2, #3
 800338a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	015a      	lsls	r2, r3, #5
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	4413      	add	r3, r2
 8003394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	0151      	lsls	r1, r2, #5
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	440a      	add	r2, r1
 80033a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033a6:	f043 0302 	orr.w	r3, r3, #2
 80033aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	4611      	mov	r1, r2
 80033b6:	4618      	mov	r0, r3
 80033b8:	f003 fb56 	bl	8006a68 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	015a      	lsls	r2, r3, #5
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	4413      	add	r3, r2
 80033c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c8:	461a      	mov	r2, r3
 80033ca:	2310      	movs	r3, #16
 80033cc:	6093      	str	r3, [r2, #8]
}
 80033ce:	e1d1      	b.n	8003774 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	015a      	lsls	r2, r3, #5
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	4413      	add	r3, r2
 80033d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e2:	2b80      	cmp	r3, #128	; 0x80
 80033e4:	d12a      	bne.n	800343c <HCD_HC_OUT_IRQHandler+0x3f4>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	212c      	movs	r1, #44	; 0x2c
 80033ec:	fb01 f303 	mul.w	r3, r1, r3
 80033f0:	4413      	add	r3, r2
 80033f2:	3361      	adds	r3, #97	; 0x61
 80033f4:	2206      	movs	r2, #6
 80033f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	0151      	lsls	r1, r2, #5
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	440a      	add	r2, r1
 800340e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003412:	f043 0302 	orr.w	r3, r3, #2
 8003416:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	4611      	mov	r1, r2
 8003422:	4618      	mov	r0, r3
 8003424:	f003 fb20 	bl	8006a68 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	4413      	add	r3, r2
 8003430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003434:	461a      	mov	r2, r3
 8003436:	2380      	movs	r3, #128	; 0x80
 8003438:	6093      	str	r3, [r2, #8]
}
 800343a:	e19b      	b.n	8003774 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	015a      	lsls	r2, r3, #5
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	4413      	add	r3, r2
 8003444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800344e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003452:	d134      	bne.n	80034be <HCD_HC_OUT_IRQHandler+0x476>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	015a      	lsls	r2, r3, #5
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	4413      	add	r3, r2
 800345c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	0151      	lsls	r1, r2, #5
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	440a      	add	r2, r1
 800346a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800346e:	f043 0302 	orr.w	r3, r3, #2
 8003472:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	4611      	mov	r1, r2
 800347e:	4618      	mov	r0, r3
 8003480:	f003 faf2 	bl	8006a68 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	015a      	lsls	r2, r3, #5
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	4413      	add	r3, r2
 800348c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003490:	461a      	mov	r2, r3
 8003492:	2310      	movs	r3, #16
 8003494:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	4413      	add	r3, r2
 800349e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a2:	461a      	mov	r2, r3
 80034a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	212c      	movs	r1, #44	; 0x2c
 80034b0:	fb01 f303 	mul.w	r3, r1, r3
 80034b4:	4413      	add	r3, r2
 80034b6:	3361      	adds	r3, #97	; 0x61
 80034b8:	2208      	movs	r2, #8
 80034ba:	701a      	strb	r2, [r3, #0]
}
 80034bc:	e15a      	b.n	8003774 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	015a      	lsls	r2, r3, #5
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	4413      	add	r3, r2
 80034c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	f040 814f 	bne.w	8003774 <HCD_HC_OUT_IRQHandler+0x72c>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	015a      	lsls	r2, r3, #5
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	4413      	add	r3, r2
 80034de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	0151      	lsls	r1, r2, #5
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	440a      	add	r2, r1
 80034ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034f0:	f023 0302 	bic.w	r3, r3, #2
 80034f4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	212c      	movs	r1, #44	; 0x2c
 80034fc:	fb01 f303 	mul.w	r3, r1, r3
 8003500:	4413      	add	r3, r2
 8003502:	3361      	adds	r3, #97	; 0x61
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d17d      	bne.n	8003606 <HCD_HC_OUT_IRQHandler+0x5be>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	212c      	movs	r1, #44	; 0x2c
 8003510:	fb01 f303 	mul.w	r3, r1, r3
 8003514:	4413      	add	r3, r2
 8003516:	3360      	adds	r3, #96	; 0x60
 8003518:	2201      	movs	r2, #1
 800351a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	212c      	movs	r1, #44	; 0x2c
 8003522:	fb01 f303 	mul.w	r3, r1, r3
 8003526:	4413      	add	r3, r2
 8003528:	333f      	adds	r3, #63	; 0x3f
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d00a      	beq.n	8003546 <HCD_HC_OUT_IRQHandler+0x4fe>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	212c      	movs	r1, #44	; 0x2c
 8003536:	fb01 f303 	mul.w	r3, r1, r3
 800353a:	4413      	add	r3, r2
 800353c:	333f      	adds	r3, #63	; 0x3f
 800353e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003540:	2b03      	cmp	r3, #3
 8003542:	f040 8100 	bne.w	8003746 <HCD_HC_OUT_IRQHandler+0x6fe>
        if (hhcd->Init.dma_enable == 0U)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d113      	bne.n	8003576 <HCD_HC_OUT_IRQHandler+0x52e>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	212c      	movs	r1, #44	; 0x2c
 8003554:	fb01 f303 	mul.w	r3, r1, r3
 8003558:	4413      	add	r3, r2
 800355a:	3355      	adds	r3, #85	; 0x55
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	f083 0301 	eor.w	r3, r3, #1
 8003562:	b2d8      	uxtb	r0, r3
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	212c      	movs	r1, #44	; 0x2c
 800356a:	fb01 f303 	mul.w	r3, r1, r3
 800356e:	4413      	add	r3, r2
 8003570:	3355      	adds	r3, #85	; 0x55
 8003572:	4602      	mov	r2, r0
 8003574:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	2b01      	cmp	r3, #1
 800357c:	f040 80e3 	bne.w	8003746 <HCD_HC_OUT_IRQHandler+0x6fe>
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	212c      	movs	r1, #44	; 0x2c
 8003586:	fb01 f303 	mul.w	r3, r1, r3
 800358a:	4413      	add	r3, r2
 800358c:	334c      	adds	r3, #76	; 0x4c
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 80d8 	beq.w	8003746 <HCD_HC_OUT_IRQHandler+0x6fe>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	212c      	movs	r1, #44	; 0x2c
 800359c:	fb01 f303 	mul.w	r3, r1, r3
 80035a0:	4413      	add	r3, r2
 80035a2:	334c      	adds	r3, #76	; 0x4c
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	202c      	movs	r0, #44	; 0x2c
 80035ac:	fb00 f202 	mul.w	r2, r0, r2
 80035b0:	440a      	add	r2, r1
 80035b2:	3240      	adds	r2, #64	; 0x40
 80035b4:	8812      	ldrh	r2, [r2, #0]
 80035b6:	4413      	add	r3, r2
 80035b8:	3b01      	subs	r3, #1
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	202c      	movs	r0, #44	; 0x2c
 80035c0:	fb00 f202 	mul.w	r2, r0, r2
 80035c4:	440a      	add	r2, r1
 80035c6:	3240      	adds	r2, #64	; 0x40
 80035c8:	8812      	ldrh	r2, [r2, #0]
 80035ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 80b5 	beq.w	8003746 <HCD_HC_OUT_IRQHandler+0x6fe>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	212c      	movs	r1, #44	; 0x2c
 80035e2:	fb01 f303 	mul.w	r3, r1, r3
 80035e6:	4413      	add	r3, r2
 80035e8:	3355      	adds	r3, #85	; 0x55
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	f083 0301 	eor.w	r3, r3, #1
 80035f0:	b2d8      	uxtb	r0, r3
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	212c      	movs	r1, #44	; 0x2c
 80035f8:	fb01 f303 	mul.w	r3, r1, r3
 80035fc:	4413      	add	r3, r2
 80035fe:	3355      	adds	r3, #85	; 0x55
 8003600:	4602      	mov	r2, r0
 8003602:	701a      	strb	r2, [r3, #0]
 8003604:	e09f      	b.n	8003746 <HCD_HC_OUT_IRQHandler+0x6fe>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	212c      	movs	r1, #44	; 0x2c
 800360c:	fb01 f303 	mul.w	r3, r1, r3
 8003610:	4413      	add	r3, r2
 8003612:	3361      	adds	r3, #97	; 0x61
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b03      	cmp	r3, #3
 8003618:	d109      	bne.n	800362e <HCD_HC_OUT_IRQHandler+0x5e6>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	212c      	movs	r1, #44	; 0x2c
 8003620:	fb01 f303 	mul.w	r3, r1, r3
 8003624:	4413      	add	r3, r2
 8003626:	3360      	adds	r3, #96	; 0x60
 8003628:	2202      	movs	r2, #2
 800362a:	701a      	strb	r2, [r3, #0]
 800362c:	e08b      	b.n	8003746 <HCD_HC_OUT_IRQHandler+0x6fe>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	212c      	movs	r1, #44	; 0x2c
 8003634:	fb01 f303 	mul.w	r3, r1, r3
 8003638:	4413      	add	r3, r2
 800363a:	3361      	adds	r3, #97	; 0x61
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b04      	cmp	r3, #4
 8003640:	d109      	bne.n	8003656 <HCD_HC_OUT_IRQHandler+0x60e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	212c      	movs	r1, #44	; 0x2c
 8003648:	fb01 f303 	mul.w	r3, r1, r3
 800364c:	4413      	add	r3, r2
 800364e:	3360      	adds	r3, #96	; 0x60
 8003650:	2202      	movs	r2, #2
 8003652:	701a      	strb	r2, [r3, #0]
 8003654:	e077      	b.n	8003746 <HCD_HC_OUT_IRQHandler+0x6fe>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	212c      	movs	r1, #44	; 0x2c
 800365c:	fb01 f303 	mul.w	r3, r1, r3
 8003660:	4413      	add	r3, r2
 8003662:	3361      	adds	r3, #97	; 0x61
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b05      	cmp	r3, #5
 8003668:	d109      	bne.n	800367e <HCD_HC_OUT_IRQHandler+0x636>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	212c      	movs	r1, #44	; 0x2c
 8003670:	fb01 f303 	mul.w	r3, r1, r3
 8003674:	4413      	add	r3, r2
 8003676:	3360      	adds	r3, #96	; 0x60
 8003678:	2205      	movs	r2, #5
 800367a:	701a      	strb	r2, [r3, #0]
 800367c:	e063      	b.n	8003746 <HCD_HC_OUT_IRQHandler+0x6fe>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	212c      	movs	r1, #44	; 0x2c
 8003684:	fb01 f303 	mul.w	r3, r1, r3
 8003688:	4413      	add	r3, r2
 800368a:	3361      	adds	r3, #97	; 0x61
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b06      	cmp	r3, #6
 8003690:	d009      	beq.n	80036a6 <HCD_HC_OUT_IRQHandler+0x65e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	212c      	movs	r1, #44	; 0x2c
 8003698:	fb01 f303 	mul.w	r3, r1, r3
 800369c:	4413      	add	r3, r2
 800369e:	3361      	adds	r3, #97	; 0x61
 80036a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d14f      	bne.n	8003746 <HCD_HC_OUT_IRQHandler+0x6fe>
      hhcd->hc[ch_num].ErrCnt++;
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	212c      	movs	r1, #44	; 0x2c
 80036ac:	fb01 f303 	mul.w	r3, r1, r3
 80036b0:	4413      	add	r3, r2
 80036b2:	335c      	adds	r3, #92	; 0x5c
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	202c      	movs	r0, #44	; 0x2c
 80036be:	fb00 f303 	mul.w	r3, r0, r3
 80036c2:	440b      	add	r3, r1
 80036c4:	335c      	adds	r3, #92	; 0x5c
 80036c6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	212c      	movs	r1, #44	; 0x2c
 80036ce:	fb01 f303 	mul.w	r3, r1, r3
 80036d2:	4413      	add	r3, r2
 80036d4:	335c      	adds	r3, #92	; 0x5c
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d912      	bls.n	8003702 <HCD_HC_OUT_IRQHandler+0x6ba>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	212c      	movs	r1, #44	; 0x2c
 80036e2:	fb01 f303 	mul.w	r3, r1, r3
 80036e6:	4413      	add	r3, r2
 80036e8:	335c      	adds	r3, #92	; 0x5c
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	212c      	movs	r1, #44	; 0x2c
 80036f4:	fb01 f303 	mul.w	r3, r1, r3
 80036f8:	4413      	add	r3, r2
 80036fa:	3360      	adds	r3, #96	; 0x60
 80036fc:	2204      	movs	r2, #4
 80036fe:	701a      	strb	r2, [r3, #0]
 8003700:	e021      	b.n	8003746 <HCD_HC_OUT_IRQHandler+0x6fe>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	212c      	movs	r1, #44	; 0x2c
 8003708:	fb01 f303 	mul.w	r3, r1, r3
 800370c:	4413      	add	r3, r2
 800370e:	3360      	adds	r3, #96	; 0x60
 8003710:	2202      	movs	r2, #2
 8003712:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	4413      	add	r3, r2
 800371c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800372a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003732:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	4413      	add	r3, r2
 800373c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003740:	461a      	mov	r2, r3
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	4413      	add	r3, r2
 800374e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003752:	461a      	mov	r2, r3
 8003754:	2302      	movs	r3, #2
 8003756:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	b2d9      	uxtb	r1, r3
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	202c      	movs	r0, #44	; 0x2c
 8003762:	fb00 f303 	mul.w	r3, r0, r3
 8003766:	4413      	add	r3, r2
 8003768:	3360      	adds	r3, #96	; 0x60
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	461a      	mov	r2, r3
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f00d fa80 	bl	8010c74 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003774:	bf00      	nop
 8003776:	3720      	adds	r7, #32
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b08a      	sub	sp, #40	; 0x28
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	f003 030f 	and.w	r3, r3, #15
 800379c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	0c5b      	lsrs	r3, r3, #17
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	091b      	lsrs	r3, r3, #4
 80037ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037b0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d004      	beq.n	80037c2 <HCD_RXQLVL_IRQHandler+0x46>
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	2b05      	cmp	r3, #5
 80037bc:	f000 80a9 	beq.w	8003912 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80037c0:	e0aa      	b.n	8003918 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 80a6 	beq.w	8003916 <HCD_RXQLVL_IRQHandler+0x19a>
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	212c      	movs	r1, #44	; 0x2c
 80037d0:	fb01 f303 	mul.w	r3, r1, r3
 80037d4:	4413      	add	r3, r2
 80037d6:	3344      	adds	r3, #68	; 0x44
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 809b 	beq.w	8003916 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	212c      	movs	r1, #44	; 0x2c
 80037e6:	fb01 f303 	mul.w	r3, r1, r3
 80037ea:	4413      	add	r3, r2
 80037ec:	3350      	adds	r3, #80	; 0x50
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	441a      	add	r2, r3
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	202c      	movs	r0, #44	; 0x2c
 80037fa:	fb00 f303 	mul.w	r3, r0, r3
 80037fe:	440b      	add	r3, r1
 8003800:	334c      	adds	r3, #76	; 0x4c
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d87a      	bhi.n	80038fe <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	212c      	movs	r1, #44	; 0x2c
 8003812:	fb01 f303 	mul.w	r3, r1, r3
 8003816:	4413      	add	r3, r2
 8003818:	3344      	adds	r3, #68	; 0x44
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	b292      	uxth	r2, r2
 8003820:	4619      	mov	r1, r3
 8003822:	f002 fd40 	bl	80062a6 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	212c      	movs	r1, #44	; 0x2c
 800382c:	fb01 f303 	mul.w	r3, r1, r3
 8003830:	4413      	add	r3, r2
 8003832:	3344      	adds	r3, #68	; 0x44
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	441a      	add	r2, r3
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	202c      	movs	r0, #44	; 0x2c
 8003840:	fb00 f303 	mul.w	r3, r0, r3
 8003844:	440b      	add	r3, r1
 8003846:	3344      	adds	r3, #68	; 0x44
 8003848:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	212c      	movs	r1, #44	; 0x2c
 8003850:	fb01 f303 	mul.w	r3, r1, r3
 8003854:	4413      	add	r3, r2
 8003856:	3350      	adds	r3, #80	; 0x50
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	441a      	add	r2, r3
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	202c      	movs	r0, #44	; 0x2c
 8003864:	fb00 f303 	mul.w	r3, r0, r3
 8003868:	440b      	add	r3, r1
 800386a:	3350      	adds	r3, #80	; 0x50
 800386c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	4413      	add	r3, r2
 8003876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	0cdb      	lsrs	r3, r3, #19
 800387e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003882:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	212c      	movs	r1, #44	; 0x2c
 800388a:	fb01 f303 	mul.w	r3, r1, r3
 800388e:	4413      	add	r3, r2
 8003890:	3340      	adds	r3, #64	; 0x40
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	461a      	mov	r2, r3
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	4293      	cmp	r3, r2
 800389a:	d13c      	bne.n	8003916 <HCD_RXQLVL_IRQHandler+0x19a>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d039      	beq.n	8003916 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038b8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038c0:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ce:	461a      	mov	r2, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	212c      	movs	r1, #44	; 0x2c
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	4413      	add	r3, r2
 80038e0:	3354      	adds	r3, #84	; 0x54
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	f083 0301 	eor.w	r3, r3, #1
 80038e8:	b2d8      	uxtb	r0, r3
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	212c      	movs	r1, #44	; 0x2c
 80038f0:	fb01 f303 	mul.w	r3, r1, r3
 80038f4:	4413      	add	r3, r2
 80038f6:	3354      	adds	r3, #84	; 0x54
 80038f8:	4602      	mov	r2, r0
 80038fa:	701a      	strb	r2, [r3, #0]
      break;
 80038fc:	e00b      	b.n	8003916 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	212c      	movs	r1, #44	; 0x2c
 8003904:	fb01 f303 	mul.w	r3, r1, r3
 8003908:	4413      	add	r3, r2
 800390a:	3360      	adds	r3, #96	; 0x60
 800390c:	2204      	movs	r2, #4
 800390e:	701a      	strb	r2, [r3, #0]
      break;
 8003910:	e001      	b.n	8003916 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003912:	bf00      	nop
 8003914:	e000      	b.n	8003918 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003916:	bf00      	nop
  }
}
 8003918:	bf00      	nop
 800391a:	3728      	adds	r7, #40	; 0x28
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800394c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b02      	cmp	r3, #2
 8003956:	d10b      	bne.n	8003970 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b01      	cmp	r3, #1
 8003960:	d102      	bne.n	8003968 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f00d f96a 	bl	8010c3c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	f043 0302 	orr.w	r3, r3, #2
 800396e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b08      	cmp	r3, #8
 8003978:	d132      	bne.n	80039e0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f043 0308 	orr.w	r3, r3, #8
 8003980:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b04      	cmp	r3, #4
 800398a:	d126      	bne.n	80039da <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	2b02      	cmp	r3, #2
 8003992:	d113      	bne.n	80039bc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800399a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800399e:	d106      	bne.n	80039ae <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2102      	movs	r1, #2
 80039a6:	4618      	mov	r0, r3
 80039a8:	f002 fd9c 	bl	80064e4 <USB_InitFSLSPClkSel>
 80039ac:	e011      	b.n	80039d2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2101      	movs	r1, #1
 80039b4:	4618      	mov	r0, r3
 80039b6:	f002 fd95 	bl	80064e4 <USB_InitFSLSPClkSel>
 80039ba:	e00a      	b.n	80039d2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d106      	bne.n	80039d2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039ca:	461a      	mov	r2, r3
 80039cc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80039d0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f00d f960 	bl	8010c98 <HAL_HCD_PortEnabled_Callback>
 80039d8:	e002      	b.n	80039e0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f00d f96a 	bl	8010cb4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 0320 	and.w	r3, r3, #32
 80039e6:	2b20      	cmp	r3, #32
 80039e8:	d103      	bne.n	80039f2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	f043 0320 	orr.w	r3, r3, #32
 80039f0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039f8:	461a      	mov	r2, r3
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	6013      	str	r3, [r2, #0]
}
 80039fe:	bf00      	nop
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e304      	b.n	8004024 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 8087 	beq.w	8003b36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a28:	4b92      	ldr	r3, [pc, #584]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 030c 	and.w	r3, r3, #12
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d00c      	beq.n	8003a4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a34:	4b8f      	ldr	r3, [pc, #572]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 030c 	and.w	r3, r3, #12
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d112      	bne.n	8003a66 <HAL_RCC_OscConfig+0x5e>
 8003a40:	4b8c      	ldr	r3, [pc, #560]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a4c:	d10b      	bne.n	8003a66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a4e:	4b89      	ldr	r3, [pc, #548]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d06c      	beq.n	8003b34 <HAL_RCC_OscConfig+0x12c>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d168      	bne.n	8003b34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e2de      	b.n	8004024 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a6e:	d106      	bne.n	8003a7e <HAL_RCC_OscConfig+0x76>
 8003a70:	4b80      	ldr	r3, [pc, #512]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a7f      	ldr	r2, [pc, #508]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	e02e      	b.n	8003adc <HAL_RCC_OscConfig+0xd4>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10c      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x98>
 8003a86:	4b7b      	ldr	r3, [pc, #492]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a7a      	ldr	r2, [pc, #488]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	4b78      	ldr	r3, [pc, #480]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a77      	ldr	r2, [pc, #476]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	e01d      	b.n	8003adc <HAL_RCC_OscConfig+0xd4>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_RCC_OscConfig+0xbc>
 8003aaa:	4b72      	ldr	r3, [pc, #456]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a71      	ldr	r2, [pc, #452]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	4b6f      	ldr	r3, [pc, #444]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a6e      	ldr	r2, [pc, #440]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	e00b      	b.n	8003adc <HAL_RCC_OscConfig+0xd4>
 8003ac4:	4b6b      	ldr	r3, [pc, #428]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a6a      	ldr	r2, [pc, #424]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	4b68      	ldr	r3, [pc, #416]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a67      	ldr	r2, [pc, #412]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ada:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d013      	beq.n	8003b0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae4:	f7fd feca 	bl	800187c <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aec:	f7fd fec6 	bl	800187c <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b64      	cmp	r3, #100	; 0x64
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e292      	b.n	8004024 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afe:	4b5d      	ldr	r3, [pc, #372]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0xe4>
 8003b0a:	e014      	b.n	8003b36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0c:	f7fd feb6 	bl	800187c <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b14:	f7fd feb2 	bl	800187c <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b64      	cmp	r3, #100	; 0x64
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e27e      	b.n	8004024 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b26:	4b53      	ldr	r3, [pc, #332]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0x10c>
 8003b32:	e000      	b.n	8003b36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d063      	beq.n	8003c0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b42:	4b4c      	ldr	r3, [pc, #304]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f003 030c 	and.w	r3, r3, #12
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00b      	beq.n	8003b66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b4e:	4b49      	ldr	r3, [pc, #292]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f003 030c 	and.w	r3, r3, #12
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d11c      	bne.n	8003b94 <HAL_RCC_OscConfig+0x18c>
 8003b5a:	4b46      	ldr	r3, [pc, #280]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d116      	bne.n	8003b94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b66:	4b43      	ldr	r3, [pc, #268]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d005      	beq.n	8003b7e <HAL_RCC_OscConfig+0x176>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d001      	beq.n	8003b7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e252      	b.n	8004024 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7e:	4b3d      	ldr	r3, [pc, #244]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	4939      	ldr	r1, [pc, #228]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b92:	e03a      	b.n	8003c0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d020      	beq.n	8003bde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b9c:	4b36      	ldr	r3, [pc, #216]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba2:	f7fd fe6b 	bl	800187c <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003baa:	f7fd fe67 	bl	800187c <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e233      	b.n	8004024 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bbc:	4b2d      	ldr	r3, [pc, #180]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0f0      	beq.n	8003baa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc8:	4b2a      	ldr	r3, [pc, #168]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4927      	ldr	r1, [pc, #156]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	600b      	str	r3, [r1, #0]
 8003bdc:	e015      	b.n	8003c0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bde:	4b26      	ldr	r3, [pc, #152]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be4:	f7fd fe4a 	bl	800187c <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bec:	f7fd fe46 	bl	800187c <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e212      	b.n	8004024 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfe:	4b1d      	ldr	r3, [pc, #116]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d03a      	beq.n	8003c8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d019      	beq.n	8003c52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c1e:	4b17      	ldr	r3, [pc, #92]	; (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c24:	f7fd fe2a 	bl	800187c <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c2c:	f7fd fe26 	bl	800187c <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e1f2      	b.n	8004024 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3e:	4b0d      	ldr	r3, [pc, #52]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	f000 fc1c 	bl	8004488 <RCC_Delay>
 8003c50:	e01c      	b.n	8003c8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c52:	4b0a      	ldr	r3, [pc, #40]	; (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c58:	f7fd fe10 	bl	800187c <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c5e:	e00f      	b.n	8003c80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c60:	f7fd fe0c 	bl	800187c <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d908      	bls.n	8003c80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e1d8      	b.n	8004024 <HAL_RCC_OscConfig+0x61c>
 8003c72:	bf00      	nop
 8003c74:	40021000 	.word	0x40021000
 8003c78:	42420000 	.word	0x42420000
 8003c7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c80:	4b9b      	ldr	r3, [pc, #620]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1e9      	bne.n	8003c60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 80a6 	beq.w	8003de6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c9e:	4b94      	ldr	r3, [pc, #592]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10d      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003caa:	4b91      	ldr	r3, [pc, #580]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	4a90      	ldr	r2, [pc, #576]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	61d3      	str	r3, [r2, #28]
 8003cb6:	4b8e      	ldr	r3, [pc, #568]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cbe:	60bb      	str	r3, [r7, #8]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc6:	4b8b      	ldr	r3, [pc, #556]	; (8003ef4 <HAL_RCC_OscConfig+0x4ec>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d118      	bne.n	8003d04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cd2:	4b88      	ldr	r3, [pc, #544]	; (8003ef4 <HAL_RCC_OscConfig+0x4ec>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a87      	ldr	r2, [pc, #540]	; (8003ef4 <HAL_RCC_OscConfig+0x4ec>)
 8003cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cde:	f7fd fdcd 	bl	800187c <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce6:	f7fd fdc9 	bl	800187c <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b64      	cmp	r3, #100	; 0x64
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e195      	b.n	8004024 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf8:	4b7e      	ldr	r3, [pc, #504]	; (8003ef4 <HAL_RCC_OscConfig+0x4ec>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0f0      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d106      	bne.n	8003d1a <HAL_RCC_OscConfig+0x312>
 8003d0c:	4b78      	ldr	r3, [pc, #480]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	4a77      	ldr	r2, [pc, #476]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003d12:	f043 0301 	orr.w	r3, r3, #1
 8003d16:	6213      	str	r3, [r2, #32]
 8003d18:	e02d      	b.n	8003d76 <HAL_RCC_OscConfig+0x36e>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10c      	bne.n	8003d3c <HAL_RCC_OscConfig+0x334>
 8003d22:	4b73      	ldr	r3, [pc, #460]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	4a72      	ldr	r2, [pc, #456]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003d28:	f023 0301 	bic.w	r3, r3, #1
 8003d2c:	6213      	str	r3, [r2, #32]
 8003d2e:	4b70      	ldr	r3, [pc, #448]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	4a6f      	ldr	r2, [pc, #444]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003d34:	f023 0304 	bic.w	r3, r3, #4
 8003d38:	6213      	str	r3, [r2, #32]
 8003d3a:	e01c      	b.n	8003d76 <HAL_RCC_OscConfig+0x36e>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	2b05      	cmp	r3, #5
 8003d42:	d10c      	bne.n	8003d5e <HAL_RCC_OscConfig+0x356>
 8003d44:	4b6a      	ldr	r3, [pc, #424]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	4a69      	ldr	r2, [pc, #420]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003d4a:	f043 0304 	orr.w	r3, r3, #4
 8003d4e:	6213      	str	r3, [r2, #32]
 8003d50:	4b67      	ldr	r3, [pc, #412]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	4a66      	ldr	r2, [pc, #408]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003d56:	f043 0301 	orr.w	r3, r3, #1
 8003d5a:	6213      	str	r3, [r2, #32]
 8003d5c:	e00b      	b.n	8003d76 <HAL_RCC_OscConfig+0x36e>
 8003d5e:	4b64      	ldr	r3, [pc, #400]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	4a63      	ldr	r2, [pc, #396]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003d64:	f023 0301 	bic.w	r3, r3, #1
 8003d68:	6213      	str	r3, [r2, #32]
 8003d6a:	4b61      	ldr	r3, [pc, #388]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	4a60      	ldr	r2, [pc, #384]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003d70:	f023 0304 	bic.w	r3, r3, #4
 8003d74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d015      	beq.n	8003daa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d7e:	f7fd fd7d 	bl	800187c <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d84:	e00a      	b.n	8003d9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d86:	f7fd fd79 	bl	800187c <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e143      	b.n	8004024 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9c:	4b54      	ldr	r3, [pc, #336]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0ee      	beq.n	8003d86 <HAL_RCC_OscConfig+0x37e>
 8003da8:	e014      	b.n	8003dd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003daa:	f7fd fd67 	bl	800187c <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003db0:	e00a      	b.n	8003dc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db2:	f7fd fd63 	bl	800187c <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e12d      	b.n	8004024 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc8:	4b49      	ldr	r3, [pc, #292]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1ee      	bne.n	8003db2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003dd4:	7dfb      	ldrb	r3, [r7, #23]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d105      	bne.n	8003de6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dda:	4b45      	ldr	r3, [pc, #276]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	4a44      	ldr	r2, [pc, #272]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003de4:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 808c 	beq.w	8003f08 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003df0:	4b3f      	ldr	r3, [pc, #252]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dfc:	d10e      	bne.n	8003e1c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003dfe:	4b3c      	ldr	r3, [pc, #240]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	d108      	bne.n	8003e1c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8003e0a:	4b39      	ldr	r3, [pc, #228]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e16:	d101      	bne.n	8003e1c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e103      	b.n	8004024 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d14e      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003e24:	4b32      	ldr	r3, [pc, #200]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d009      	beq.n	8003e44 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8003e30:	4b2f      	ldr	r3, [pc, #188]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d001      	beq.n	8003e44 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e0ef      	b.n	8004024 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003e44:	4b2c      	ldr	r3, [pc, #176]	; (8003ef8 <HAL_RCC_OscConfig+0x4f0>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4a:	f7fd fd17 	bl	800187c <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e52:	f7fd fd13 	bl	800187c <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b64      	cmp	r3, #100	; 0x64
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e0df      	b.n	8004024 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003e64:	4b22      	ldr	r3, [pc, #136]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1f0      	bne.n	8003e52 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003e70:	4b1f      	ldr	r3, [pc, #124]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7c:	491c      	ldr	r1, [pc, #112]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8003e82:	4b1b      	ldr	r3, [pc, #108]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e86:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	4918      	ldr	r1, [pc, #96]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8003e94:	4b18      	ldr	r3, [pc, #96]	; (8003ef8 <HAL_RCC_OscConfig+0x4f0>)
 8003e96:	2201      	movs	r2, #1
 8003e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9a:	f7fd fcef 	bl	800187c <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003ea2:	f7fd fceb 	bl	800187c <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b64      	cmp	r3, #100	; 0x64
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e0b7      	b.n	8004024 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003eb4:	4b0e      	ldr	r3, [pc, #56]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0f0      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x49a>
 8003ec0:	e022      	b.n	8003f08 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8003ec2:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec6:	4a0a      	ldr	r2, [pc, #40]	; (8003ef0 <HAL_RCC_OscConfig+0x4e8>)
 8003ec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ecc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003ece:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <HAL_RCC_OscConfig+0x4f0>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed4:	f7fd fcd2 	bl	800187c <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003eda:	e00f      	b.n	8003efc <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003edc:	f7fd fcce 	bl	800187c <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b64      	cmp	r3, #100	; 0x64
 8003ee8:	d908      	bls.n	8003efc <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e09a      	b.n	8004024 <HAL_RCC_OscConfig+0x61c>
 8003eee:	bf00      	nop
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	40007000 	.word	0x40007000
 8003ef8:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003efc:	4b4b      	ldr	r3, [pc, #300]	; (800402c <HAL_RCC_OscConfig+0x624>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1e9      	bne.n	8003edc <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 8088 	beq.w	8004022 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f12:	4b46      	ldr	r3, [pc, #280]	; (800402c <HAL_RCC_OscConfig+0x624>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f003 030c 	and.w	r3, r3, #12
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d068      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d14d      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f26:	4b42      	ldr	r3, [pc, #264]	; (8004030 <HAL_RCC_OscConfig+0x628>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2c:	f7fd fca6 	bl	800187c <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f34:	f7fd fca2 	bl	800187c <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e06e      	b.n	8004024 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f46:	4b39      	ldr	r3, [pc, #228]	; (800402c <HAL_RCC_OscConfig+0x624>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f0      	bne.n	8003f34 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f5a:	d10f      	bne.n	8003f7c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8003f5c:	4b33      	ldr	r3, [pc, #204]	; (800402c <HAL_RCC_OscConfig+0x624>)
 8003f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	4931      	ldr	r1, [pc, #196]	; (800402c <HAL_RCC_OscConfig+0x624>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f6a:	4b30      	ldr	r3, [pc, #192]	; (800402c <HAL_RCC_OscConfig+0x624>)
 8003f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6e:	f023 020f 	bic.w	r2, r3, #15
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	492d      	ldr	r1, [pc, #180]	; (800402c <HAL_RCC_OscConfig+0x624>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f7c:	4b2b      	ldr	r3, [pc, #172]	; (800402c <HAL_RCC_OscConfig+0x624>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8c:	430b      	orrs	r3, r1
 8003f8e:	4927      	ldr	r1, [pc, #156]	; (800402c <HAL_RCC_OscConfig+0x624>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f94:	4b26      	ldr	r3, [pc, #152]	; (8004030 <HAL_RCC_OscConfig+0x628>)
 8003f96:	2201      	movs	r2, #1
 8003f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9a:	f7fd fc6f 	bl	800187c <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa2:	f7fd fc6b 	bl	800187c <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e037      	b.n	8004024 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fb4:	4b1d      	ldr	r3, [pc, #116]	; (800402c <HAL_RCC_OscConfig+0x624>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0f0      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x59a>
 8003fc0:	e02f      	b.n	8004022 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc2:	4b1b      	ldr	r3, [pc, #108]	; (8004030 <HAL_RCC_OscConfig+0x628>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc8:	f7fd fc58 	bl	800187c <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd0:	f7fd fc54 	bl	800187c <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e020      	b.n	8004024 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fe2:	4b12      	ldr	r3, [pc, #72]	; (800402c <HAL_RCC_OscConfig+0x624>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1f0      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x5c8>
 8003fee:	e018      	b.n	8004022 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d101      	bne.n	8003ffc <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e013      	b.n	8004024 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	; (800402c <HAL_RCC_OscConfig+0x624>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	429a      	cmp	r2, r3
 800400e:	d106      	bne.n	800401e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401a:	429a      	cmp	r2, r3
 800401c:	d001      	beq.n	8004022 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3718      	adds	r7, #24
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40021000 	.word	0x40021000
 8004030:	42420060 	.word	0x42420060

08004034 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e0d0      	b.n	80041ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004048:	4b6a      	ldr	r3, [pc, #424]	; (80041f4 <HAL_RCC_ClockConfig+0x1c0>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	429a      	cmp	r2, r3
 8004054:	d910      	bls.n	8004078 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004056:	4b67      	ldr	r3, [pc, #412]	; (80041f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f023 0207 	bic.w	r2, r3, #7
 800405e:	4965      	ldr	r1, [pc, #404]	; (80041f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	4313      	orrs	r3, r2
 8004064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004066:	4b63      	ldr	r3, [pc, #396]	; (80041f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	429a      	cmp	r2, r3
 8004072:	d001      	beq.n	8004078 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e0b8      	b.n	80041ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d020      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b00      	cmp	r3, #0
 800408e:	d005      	beq.n	800409c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004090:	4b59      	ldr	r3, [pc, #356]	; (80041f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	4a58      	ldr	r2, [pc, #352]	; (80041f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004096:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800409a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0308 	and.w	r3, r3, #8
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d005      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040a8:	4b53      	ldr	r3, [pc, #332]	; (80041f8 <HAL_RCC_ClockConfig+0x1c4>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	4a52      	ldr	r2, [pc, #328]	; (80041f8 <HAL_RCC_ClockConfig+0x1c4>)
 80040ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80040b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040b4:	4b50      	ldr	r3, [pc, #320]	; (80041f8 <HAL_RCC_ClockConfig+0x1c4>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	494d      	ldr	r1, [pc, #308]	; (80041f8 <HAL_RCC_ClockConfig+0x1c4>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d040      	beq.n	8004154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d107      	bne.n	80040ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040da:	4b47      	ldr	r3, [pc, #284]	; (80041f8 <HAL_RCC_ClockConfig+0x1c4>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d115      	bne.n	8004112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e07f      	b.n	80041ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d107      	bne.n	8004102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f2:	4b41      	ldr	r3, [pc, #260]	; (80041f8 <HAL_RCC_ClockConfig+0x1c4>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d109      	bne.n	8004112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e073      	b.n	80041ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004102:	4b3d      	ldr	r3, [pc, #244]	; (80041f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e06b      	b.n	80041ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004112:	4b39      	ldr	r3, [pc, #228]	; (80041f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f023 0203 	bic.w	r2, r3, #3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	4936      	ldr	r1, [pc, #216]	; (80041f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004120:	4313      	orrs	r3, r2
 8004122:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004124:	f7fd fbaa 	bl	800187c <HAL_GetTick>
 8004128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800412a:	e00a      	b.n	8004142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800412c:	f7fd fba6 	bl	800187c <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	f241 3288 	movw	r2, #5000	; 0x1388
 800413a:	4293      	cmp	r3, r2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e053      	b.n	80041ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004142:	4b2d      	ldr	r3, [pc, #180]	; (80041f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f003 020c 	and.w	r2, r3, #12
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	429a      	cmp	r2, r3
 8004152:	d1eb      	bne.n	800412c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004154:	4b27      	ldr	r3, [pc, #156]	; (80041f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	429a      	cmp	r2, r3
 8004160:	d210      	bcs.n	8004184 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004162:	4b24      	ldr	r3, [pc, #144]	; (80041f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f023 0207 	bic.w	r2, r3, #7
 800416a:	4922      	ldr	r1, [pc, #136]	; (80041f4 <HAL_RCC_ClockConfig+0x1c0>)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	4313      	orrs	r3, r2
 8004170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004172:	4b20      	ldr	r3, [pc, #128]	; (80041f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	429a      	cmp	r2, r3
 800417e:	d001      	beq.n	8004184 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e032      	b.n	80041ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	d008      	beq.n	80041a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004190:	4b19      	ldr	r3, [pc, #100]	; (80041f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	4916      	ldr	r1, [pc, #88]	; (80041f8 <HAL_RCC_ClockConfig+0x1c4>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d009      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041ae:	4b12      	ldr	r3, [pc, #72]	; (80041f8 <HAL_RCC_ClockConfig+0x1c4>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	490e      	ldr	r1, [pc, #56]	; (80041f8 <HAL_RCC_ClockConfig+0x1c4>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041c2:	f000 f821 	bl	8004208 <HAL_RCC_GetSysClockFreq>
 80041c6:	4602      	mov	r2, r0
 80041c8:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <HAL_RCC_ClockConfig+0x1c4>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	091b      	lsrs	r3, r3, #4
 80041ce:	f003 030f 	and.w	r3, r3, #15
 80041d2:	490a      	ldr	r1, [pc, #40]	; (80041fc <HAL_RCC_ClockConfig+0x1c8>)
 80041d4:	5ccb      	ldrb	r3, [r1, r3]
 80041d6:	fa22 f303 	lsr.w	r3, r2, r3
 80041da:	4a09      	ldr	r2, [pc, #36]	; (8004200 <HAL_RCC_ClockConfig+0x1cc>)
 80041dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041de:	4b09      	ldr	r3, [pc, #36]	; (8004204 <HAL_RCC_ClockConfig+0x1d0>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fd f922 	bl	800142c <HAL_InitTick>

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	40022000 	.word	0x40022000
 80041f8:	40021000 	.word	0x40021000
 80041fc:	08011dc4 	.word	0x08011dc4
 8004200:	20000000 	.word	0x20000000
 8004204:	20000004 	.word	0x20000004

08004208 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800420c:	b099      	sub	sp, #100	; 0x64
 800420e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8004210:	4b66      	ldr	r3, [pc, #408]	; (80043ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004212:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8004216:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004218:	c407      	stmia	r4!, {r0, r1, r2}
 800421a:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800421c:	4b64      	ldr	r3, [pc, #400]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800421e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8004222:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004224:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	657b      	str	r3, [r7, #84]	; 0x54
 800422c:	2300      	movs	r3, #0
 800422e:	653b      	str	r3, [r7, #80]	; 0x50
 8004230:	2300      	movs	r3, #0
 8004232:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004234:	2300      	movs	r3, #0
 8004236:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t sysclockfreq = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	65bb      	str	r3, [r7, #88]	; 0x58
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004240:	2300      	movs	r3, #0
 8004242:	647b      	str	r3, [r7, #68]	; 0x44
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004244:	4b5b      	ldr	r3, [pc, #364]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800424a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800424c:	f003 030c 	and.w	r3, r3, #12
 8004250:	2b04      	cmp	r3, #4
 8004252:	d002      	beq.n	800425a <HAL_RCC_GetSysClockFreq+0x52>
 8004254:	2b08      	cmp	r3, #8
 8004256:	d003      	beq.n	8004260 <HAL_RCC_GetSysClockFreq+0x58>
 8004258:	e09f      	b.n	800439a <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800425a:	4b57      	ldr	r3, [pc, #348]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x1b0>)
 800425c:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 800425e:	e09f      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004262:	0c9b      	lsrs	r3, r3, #18
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	3340      	adds	r3, #64	; 0x40
 800426a:	f107 0220 	add.w	r2, r7, #32
 800426e:	4413      	add	r3, r2
 8004270:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8004274:	64fb      	str	r3, [r7, #76]	; 0x4c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 8084 	beq.w	800438a <HAL_RCC_GetSysClockFreq+0x182>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8004282:	4b4c      	ldr	r3, [pc, #304]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	3340      	adds	r3, #64	; 0x40
 800428c:	f107 0220 	add.w	r2, r7, #32
 8004290:	4413      	add	r3, r2
 8004292:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8004296:	653b      	str	r3, [r7, #80]	; 0x50
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8004298:	4b46      	ldr	r3, [pc, #280]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d060      	beq.n	8004366 <HAL_RCC_GetSysClockFreq+0x15e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80042a4:	4b43      	ldr	r3, [pc, #268]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a8:	091b      	lsrs	r3, r3, #4
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	3301      	adds	r3, #1
 80042b0:	64bb      	str	r3, [r7, #72]	; 0x48
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80042b2:	4b40      	ldr	r3, [pc, #256]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80042b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b6:	0a1b      	lsrs	r3, r3, #8
 80042b8:	f003 030f 	and.w	r3, r3, #15
 80042bc:	3302      	adds	r3, #2
 80042be:	647b      	str	r3, [r7, #68]	; 0x44
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80042c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c2:	2200      	movs	r2, #0
 80042c4:	613b      	str	r3, [r7, #16]
 80042c6:	617a      	str	r2, [r7, #20]
 80042c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ca:	2200      	movs	r2, #0
 80042cc:	61bb      	str	r3, [r7, #24]
 80042ce:	61fa      	str	r2, [r7, #28]
 80042d0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80042d4:	4622      	mov	r2, r4
 80042d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80042da:	4684      	mov	ip, r0
 80042dc:	fb0c f202 	mul.w	r2, ip, r2
 80042e0:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80042e4:	468c      	mov	ip, r1
 80042e6:	4618      	mov	r0, r3
 80042e8:	4621      	mov	r1, r4
 80042ea:	4603      	mov	r3, r0
 80042ec:	fb03 f30c 	mul.w	r3, r3, ip
 80042f0:	4413      	add	r3, r2
 80042f2:	4602      	mov	r2, r0
 80042f4:	69b9      	ldr	r1, [r7, #24]
 80042f6:	fba2 8901 	umull	r8, r9, r2, r1
 80042fa:	444b      	add	r3, r9
 80042fc:	4699      	mov	r9, r3
 80042fe:	4b2e      	ldr	r3, [pc, #184]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x1b0>)
 8004300:	fb03 f209 	mul.w	r2, r3, r9
 8004304:	2300      	movs	r3, #0
 8004306:	fb03 f308 	mul.w	r3, r3, r8
 800430a:	4413      	add	r3, r2
 800430c:	4a2a      	ldr	r2, [pc, #168]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x1b0>)
 800430e:	fba8 ab02 	umull	sl, fp, r8, r2
 8004312:	445b      	add	r3, fp
 8004314:	469b      	mov	fp, r3
 8004316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004318:	2200      	movs	r2, #0
 800431a:	60bb      	str	r3, [r7, #8]
 800431c:	60fa      	str	r2, [r7, #12]
 800431e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004320:	2200      	movs	r2, #0
 8004322:	603b      	str	r3, [r7, #0]
 8004324:	607a      	str	r2, [r7, #4]
 8004326:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800432a:	4622      	mov	r2, r4
 800432c:	e9d7 8900 	ldrd	r8, r9, [r7]
 8004330:	4641      	mov	r1, r8
 8004332:	fb01 f202 	mul.w	r2, r1, r2
 8004336:	46cc      	mov	ip, r9
 8004338:	4618      	mov	r0, r3
 800433a:	4621      	mov	r1, r4
 800433c:	4603      	mov	r3, r0
 800433e:	fb03 f30c 	mul.w	r3, r3, ip
 8004342:	4413      	add	r3, r2
 8004344:	4602      	mov	r2, r0
 8004346:	4641      	mov	r1, r8
 8004348:	fba2 5601 	umull	r5, r6, r2, r1
 800434c:	4433      	add	r3, r6
 800434e:	461e      	mov	r6, r3
 8004350:	462a      	mov	r2, r5
 8004352:	4633      	mov	r3, r6
 8004354:	4650      	mov	r0, sl
 8004356:	4659      	mov	r1, fp
 8004358:	f7fb ff72 	bl	8000240 <__aeabi_uldivmod>
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	4613      	mov	r3, r2
 8004362:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004364:	e007      	b.n	8004376 <HAL_RCC_GetSysClockFreq+0x16e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8004366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004368:	4a13      	ldr	r2, [pc, #76]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x1b0>)
 800436a:	fb03 f202 	mul.w	r2, r3, r2
 800436e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004370:	fbb2 f3f3 	udiv	r3, r2, r3
 8004374:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8004376:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800437a:	461a      	mov	r2, r3
 800437c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800437e:	4293      	cmp	r3, r2
 8004380:	d108      	bne.n	8004394 <HAL_RCC_GetSysClockFreq+0x18c>
        {
          pllclk = pllclk / 2;
 8004382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004384:	085b      	lsrs	r3, r3, #1
 8004386:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004388:	e004      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0x18c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800438a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800438c:	4a0b      	ldr	r2, [pc, #44]	; (80043bc <HAL_RCC_GetSysClockFreq+0x1b4>)
 800438e:	fb02 f303 	mul.w	r3, r2, r3
 8004392:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
      sysclockfreq = pllclk;
 8004394:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004396:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 8004398:	e002      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800439a:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800439c:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 800439e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3764      	adds	r7, #100	; 0x64
 80043a6:	46bd      	mov	sp, r7
 80043a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ac:	08011d0c 	.word	0x08011d0c
 80043b0:	08011d1c 	.word	0x08011d1c
 80043b4:	40021000 	.word	0x40021000
 80043b8:	00989680 	.word	0x00989680
 80043bc:	003d0900 	.word	0x003d0900
 80043c0:	007a1200 	.word	0x007a1200

080043c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c8:	4b02      	ldr	r3, [pc, #8]	; (80043d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80043ca:	681b      	ldr	r3, [r3, #0]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr
 80043d4:	20000000 	.word	0x20000000

080043d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043dc:	f7ff fff2 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 80043e0:	4602      	mov	r2, r0
 80043e2:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	0a1b      	lsrs	r3, r3, #8
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	4903      	ldr	r1, [pc, #12]	; (80043fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ee:	5ccb      	ldrb	r3, [r1, r3]
 80043f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40021000 	.word	0x40021000
 80043fc:	08011dd4 	.word	0x08011dd4

08004400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004404:	f7ff ffde 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 8004408:	4602      	mov	r2, r0
 800440a:	4b05      	ldr	r3, [pc, #20]	; (8004420 <HAL_RCC_GetPCLK2Freq+0x20>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	0adb      	lsrs	r3, r3, #11
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	4903      	ldr	r1, [pc, #12]	; (8004424 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004416:	5ccb      	ldrb	r3, [r1, r3]
 8004418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800441c:	4618      	mov	r0, r3
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40021000 	.word	0x40021000
 8004424:	08011dd4 	.word	0x08011dd4

08004428 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	220f      	movs	r2, #15
 8004436:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004438:	4b11      	ldr	r3, [pc, #68]	; (8004480 <HAL_RCC_GetClockConfig+0x58>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f003 0203 	and.w	r2, r3, #3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004444:	4b0e      	ldr	r3, [pc, #56]	; (8004480 <HAL_RCC_GetClockConfig+0x58>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004450:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <HAL_RCC_GetClockConfig+0x58>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800445c:	4b08      	ldr	r3, [pc, #32]	; (8004480 <HAL_RCC_GetClockConfig+0x58>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	08db      	lsrs	r3, r3, #3
 8004462:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800446a:	4b06      	ldr	r3, [pc, #24]	; (8004484 <HAL_RCC_GetClockConfig+0x5c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0207 	and.w	r2, r3, #7
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004476:	bf00      	nop
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	bc80      	pop	{r7}
 800447e:	4770      	bx	lr
 8004480:	40021000 	.word	0x40021000
 8004484:	40022000 	.word	0x40022000

08004488 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004490:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <RCC_Delay+0x34>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a0a      	ldr	r2, [pc, #40]	; (80044c0 <RCC_Delay+0x38>)
 8004496:	fba2 2303 	umull	r2, r3, r2, r3
 800449a:	0a5b      	lsrs	r3, r3, #9
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	fb02 f303 	mul.w	r3, r2, r3
 80044a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80044a4:	bf00      	nop
  }
  while (Delay --);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	1e5a      	subs	r2, r3, #1
 80044aa:	60fa      	str	r2, [r7, #12]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1f9      	bne.n	80044a4 <RCC_Delay+0x1c>
}
 80044b0:	bf00      	nop
 80044b2:	bf00      	nop
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr
 80044bc:	20000000 	.word	0x20000000
 80044c0:	10624dd3 	.word	0x10624dd3

080044c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b088      	sub	sp, #32
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	2300      	movs	r3, #0
 80044d2:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d07d      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 80044e4:	2300      	movs	r3, #0
 80044e6:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044e8:	4b8b      	ldr	r3, [pc, #556]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10d      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f4:	4b88      	ldr	r3, [pc, #544]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044f6:	69db      	ldr	r3, [r3, #28]
 80044f8:	4a87      	ldr	r2, [pc, #540]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044fe:	61d3      	str	r3, [r2, #28]
 8004500:	4b85      	ldr	r3, [pc, #532]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004508:	60fb      	str	r3, [r7, #12]
 800450a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800450c:	2301      	movs	r3, #1
 800450e:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004510:	4b82      	ldr	r3, [pc, #520]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004518:	2b00      	cmp	r3, #0
 800451a:	d118      	bne.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800451c:	4b7f      	ldr	r3, [pc, #508]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a7e      	ldr	r2, [pc, #504]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004526:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004528:	f7fd f9a8 	bl	800187c <HAL_GetTick>
 800452c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800452e:	e008      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004530:	f7fd f9a4 	bl	800187c <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b64      	cmp	r3, #100	; 0x64
 800453c:	d901      	bls.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e0e5      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004542:	4b76      	ldr	r3, [pc, #472]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0f0      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800454e:	4b72      	ldr	r3, [pc, #456]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004556:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d02e      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xf8>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	429a      	cmp	r2, r3
 800456a:	d027      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800456c:	4b6a      	ldr	r3, [pc, #424]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004574:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004576:	4b6a      	ldr	r3, [pc, #424]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004578:	2201      	movs	r2, #1
 800457a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800457c:	4b68      	ldr	r3, [pc, #416]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004582:	4a65      	ldr	r2, [pc, #404]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d014      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004592:	f7fd f973 	bl	800187c <HAL_GetTick>
 8004596:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004598:	e00a      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800459a:	f7fd f96f 	bl	800187c <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e0ae      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b0:	4b59      	ldr	r3, [pc, #356]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0ee      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045bc:	4b56      	ldr	r3, [pc, #344]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	4953      	ldr	r1, [pc, #332]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045ce:	7efb      	ldrb	r3, [r7, #27]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d105      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045d4:	4b50      	ldr	r3, [pc, #320]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	4a4f      	ldr	r2, [pc, #316]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d008      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045ec:	4b4a      	ldr	r3, [pc, #296]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	4947      	ldr	r1, [pc, #284]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0304 	and.w	r3, r3, #4
 8004606:	2b00      	cmp	r3, #0
 8004608:	d008      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800460a:	4b43      	ldr	r3, [pc, #268]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800460c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	4940      	ldr	r1, [pc, #256]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004618:	4313      	orrs	r3, r2
 800461a:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0308 	and.w	r3, r3, #8
 8004624:	2b00      	cmp	r3, #0
 8004626:	d008      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8004628:	4b3b      	ldr	r3, [pc, #236]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	4938      	ldr	r1, [pc, #224]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004636:	4313      	orrs	r3, r2
 8004638:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 800463a:	4b37      	ldr	r3, [pc, #220]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d105      	bne.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8004646:	4b34      	ldr	r3, [pc, #208]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8004652:	2301      	movs	r3, #1
 8004654:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d148      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 800465c:	4b2e      	ldr	r3, [pc, #184]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d138      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8004668:	4b2b      	ldr	r3, [pc, #172]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d009      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8004674:	4b28      	ldr	r3, [pc, #160]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004678:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8004680:	429a      	cmp	r2, r3
 8004682:	d001      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e042      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8004688:	4b23      	ldr	r3, [pc, #140]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	4920      	ldr	r1, [pc, #128]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004696:	4313      	orrs	r3, r2
 8004698:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 800469a:	4b1f      	ldr	r3, [pc, #124]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	491c      	ldr	r1, [pc, #112]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 80046ac:	4b1d      	ldr	r3, [pc, #116]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ae:	2201      	movs	r2, #1
 80046b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b2:	f7fd f8e3 	bl	800187c <HAL_GetTick>
 80046b6:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046b8:	e008      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046ba:	f7fd f8df 	bl	800187c <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b64      	cmp	r3, #100	; 0x64
 80046c6:	d901      	bls.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e020      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046cc:	4b12      	ldr	r3, [pc, #72]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0f0      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80046d8:	e009      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 80046da:	4b0f      	ldr	r3, [pc, #60]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046de:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d001      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e00f      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0310 	and.w	r3, r3, #16
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d008      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046fa:	4b07      	ldr	r3, [pc, #28]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	4904      	ldr	r1, [pc, #16]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004708:	4313      	orrs	r3, r2
 800470a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3720      	adds	r7, #32
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40021000 	.word	0x40021000
 800471c:	40007000 	.word	0x40007000
 8004720:	42420440 	.word	0x42420440
 8004724:	42420070 	.word	0x42420070

08004728 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e076      	b.n	8004828 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	2b00      	cmp	r3, #0
 8004740:	d108      	bne.n	8004754 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800474a:	d009      	beq.n	8004760 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	61da      	str	r2, [r3, #28]
 8004752:	e005      	b.n	8004760 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d106      	bne.n	8004780 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fc fd84 	bl	8001288 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004796:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	431a      	orrs	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e4:	ea42 0103 	orr.w	r1, r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	0c1a      	lsrs	r2, r3, #16
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f002 0204 	and.w	r2, r2, #4
 8004806:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	69da      	ldr	r2, [r3, #28]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004816:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b08c      	sub	sp, #48	; 0x30
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
 800483c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800483e:	2301      	movs	r3, #1
 8004840:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004842:	2300      	movs	r3, #0
 8004844:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800484e:	2b01      	cmp	r3, #1
 8004850:	d101      	bne.n	8004856 <HAL_SPI_TransmitReceive+0x26>
 8004852:	2302      	movs	r3, #2
 8004854:	e18a      	b.n	8004b6c <HAL_SPI_TransmitReceive+0x33c>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800485e:	f7fd f80d 	bl	800187c <HAL_GetTick>
 8004862:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800486a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004874:	887b      	ldrh	r3, [r7, #2]
 8004876:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004878:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800487c:	2b01      	cmp	r3, #1
 800487e:	d00f      	beq.n	80048a0 <HAL_SPI_TransmitReceive+0x70>
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004886:	d107      	bne.n	8004898 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d103      	bne.n	8004898 <HAL_SPI_TransmitReceive+0x68>
 8004890:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004894:	2b04      	cmp	r3, #4
 8004896:	d003      	beq.n	80048a0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004898:	2302      	movs	r3, #2
 800489a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800489e:	e15b      	b.n	8004b58 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d005      	beq.n	80048b2 <HAL_SPI_TransmitReceive+0x82>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d002      	beq.n	80048b2 <HAL_SPI_TransmitReceive+0x82>
 80048ac:	887b      	ldrh	r3, [r7, #2]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d103      	bne.n	80048ba <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80048b8:	e14e      	b.n	8004b58 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d003      	beq.n	80048ce <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2205      	movs	r2, #5
 80048ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	887a      	ldrh	r2, [r7, #2]
 80048de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	887a      	ldrh	r2, [r7, #2]
 80048e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	887a      	ldrh	r2, [r7, #2]
 80048f0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	887a      	ldrh	r2, [r7, #2]
 80048f6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490e:	2b40      	cmp	r3, #64	; 0x40
 8004910:	d007      	beq.n	8004922 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004920:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800492a:	d178      	bne.n	8004a1e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <HAL_SPI_TransmitReceive+0x10a>
 8004934:	8b7b      	ldrh	r3, [r7, #26]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d166      	bne.n	8004a08 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493e:	881a      	ldrh	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494a:	1c9a      	adds	r2, r3, #2
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004954:	b29b      	uxth	r3, r3
 8004956:	3b01      	subs	r3, #1
 8004958:	b29a      	uxth	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800495e:	e053      	b.n	8004a08 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b02      	cmp	r3, #2
 800496c:	d11b      	bne.n	80049a6 <HAL_SPI_TransmitReceive+0x176>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004972:	b29b      	uxth	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	d016      	beq.n	80049a6 <HAL_SPI_TransmitReceive+0x176>
 8004978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497a:	2b01      	cmp	r3, #1
 800497c:	d113      	bne.n	80049a6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	881a      	ldrh	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498e:	1c9a      	adds	r2, r3, #2
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004998:	b29b      	uxth	r3, r3
 800499a:	3b01      	subs	r3, #1
 800499c:	b29a      	uxth	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d119      	bne.n	80049e8 <HAL_SPI_TransmitReceive+0x1b8>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d014      	beq.n	80049e8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68da      	ldr	r2, [r3, #12]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c8:	b292      	uxth	r2, r2
 80049ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d0:	1c9a      	adds	r2, r3, #2
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049da:	b29b      	uxth	r3, r3
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049e4:	2301      	movs	r3, #1
 80049e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80049e8:	f7fc ff48 	bl	800187c <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d807      	bhi.n	8004a08 <HAL_SPI_TransmitReceive+0x1d8>
 80049f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fe:	d003      	beq.n	8004a08 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004a06:	e0a7      	b.n	8004b58 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1a6      	bne.n	8004960 <HAL_SPI_TransmitReceive+0x130>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1a1      	bne.n	8004960 <HAL_SPI_TransmitReceive+0x130>
 8004a1c:	e07c      	b.n	8004b18 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <HAL_SPI_TransmitReceive+0x1fc>
 8004a26:	8b7b      	ldrh	r3, [r7, #26]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d16b      	bne.n	8004b04 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	330c      	adds	r3, #12
 8004a36:	7812      	ldrb	r2, [r2, #0]
 8004a38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a52:	e057      	b.n	8004b04 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d11c      	bne.n	8004a9c <HAL_SPI_TransmitReceive+0x26c>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d017      	beq.n	8004a9c <HAL_SPI_TransmitReceive+0x26c>
 8004a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d114      	bne.n	8004a9c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	330c      	adds	r3, #12
 8004a7c:	7812      	ldrb	r2, [r2, #0]
 8004a7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a84:	1c5a      	adds	r2, r3, #1
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	3b01      	subs	r3, #1
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d119      	bne.n	8004ade <HAL_SPI_TransmitReceive+0x2ae>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d014      	beq.n	8004ade <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abe:	b2d2      	uxtb	r2, r2
 8004ac0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac6:	1c5a      	adds	r2, r3, #1
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ada:	2301      	movs	r3, #1
 8004adc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ade:	f7fc fecd 	bl	800187c <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d803      	bhi.n	8004af6 <HAL_SPI_TransmitReceive+0x2c6>
 8004aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af4:	d102      	bne.n	8004afc <HAL_SPI_TransmitReceive+0x2cc>
 8004af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d103      	bne.n	8004b04 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004b02:	e029      	b.n	8004b58 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1a2      	bne.n	8004a54 <HAL_SPI_TransmitReceive+0x224>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d19d      	bne.n	8004a54 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f000 f9b5 	bl	8004e8c <SPI_EndRxTxTransaction>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d006      	beq.n	8004b36 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2220      	movs	r2, #32
 8004b32:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004b34:	e010      	b.n	8004b58 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10b      	bne.n	8004b56 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b3e:	2300      	movs	r3, #0
 8004b40:	617b      	str	r3, [r7, #20]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	617b      	str	r3, [r7, #20]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	617b      	str	r3, [r7, #20]
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	e000      	b.n	8004b58 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004b56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3730      	adds	r7, #48	; 0x30
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	099b      	lsrs	r3, r3, #6
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10f      	bne.n	8004bb8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00a      	beq.n	8004bb8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	099b      	lsrs	r3, r3, #6
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d004      	beq.n	8004bb8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	4798      	blx	r3
    return;
 8004bb6:	e0be      	b.n	8004d36 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	085b      	lsrs	r3, r3, #1
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00a      	beq.n	8004bda <HAL_SPI_IRQHandler+0x66>
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	09db      	lsrs	r3, r3, #7
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d004      	beq.n	8004bda <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	4798      	blx	r3
    return;
 8004bd8:	e0ad      	b.n	8004d36 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	095b      	lsrs	r3, r3, #5
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d106      	bne.n	8004bf4 <HAL_SPI_IRQHandler+0x80>
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	099b      	lsrs	r3, r3, #6
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 80a1 	beq.w	8004d36 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	095b      	lsrs	r3, r3, #5
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 809a 	beq.w	8004d36 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	099b      	lsrs	r3, r3, #6
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d023      	beq.n	8004c56 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d011      	beq.n	8004c3e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1e:	f043 0204 	orr.w	r2, r3, #4
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c26:	2300      	movs	r3, #0
 8004c28:	617b      	str	r3, [r7, #20]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	617b      	str	r3, [r7, #20]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	617b      	str	r3, [r7, #20]
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	e00b      	b.n	8004c56 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c3e:	2300      	movs	r3, #0
 8004c40:	613b      	str	r3, [r7, #16]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	613b      	str	r3, [r7, #16]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	613b      	str	r3, [r7, #16]
 8004c52:	693b      	ldr	r3, [r7, #16]
        return;
 8004c54:	e06f      	b.n	8004d36 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	095b      	lsrs	r3, r3, #5
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d014      	beq.n	8004c8c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c66:	f043 0201 	orr.w	r2, r3, #1
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60fb      	str	r3, [r7, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d04f      	beq.n	8004d34 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ca2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d104      	bne.n	8004cc0 <HAL_SPI_IRQHandler+0x14c>
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d034      	beq.n	8004d2a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0203 	bic.w	r2, r2, #3
 8004cce:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d011      	beq.n	8004cfc <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cdc:	4a17      	ldr	r2, [pc, #92]	; (8004d3c <HAL_SPI_IRQHandler+0x1c8>)
 8004cde:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7fc ff11 	bl	8001b0c <HAL_DMA_Abort_IT>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d005      	beq.n	8004cfc <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d016      	beq.n	8004d32 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d08:	4a0c      	ldr	r2, [pc, #48]	; (8004d3c <HAL_SPI_IRQHandler+0x1c8>)
 8004d0a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fc fefb 	bl	8001b0c <HAL_DMA_Abort_IT>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00a      	beq.n	8004d32 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004d28:	e003      	b.n	8004d32 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f808 	bl	8004d40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004d30:	e000      	b.n	8004d34 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8004d32:	bf00      	nop
    return;
 8004d34:	bf00      	nop
  }
}
 8004d36:	3720      	adds	r7, #32
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	08004d53 	.word	0x08004d53

08004d40 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bc80      	pop	{r7}
 8004d50:	4770      	bx	lr

08004d52 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b084      	sub	sp, #16
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f7ff ffe7 	bl	8004d40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d72:	bf00      	nop
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
	...

08004d7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b088      	sub	sp, #32
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	603b      	str	r3, [r7, #0]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d8c:	f7fc fd76 	bl	800187c <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d94:	1a9b      	subs	r3, r3, r2
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	4413      	add	r3, r2
 8004d9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d9c:	f7fc fd6e 	bl	800187c <HAL_GetTick>
 8004da0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004da2:	4b39      	ldr	r3, [pc, #228]	; (8004e88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	015b      	lsls	r3, r3, #5
 8004da8:	0d1b      	lsrs	r3, r3, #20
 8004daa:	69fa      	ldr	r2, [r7, #28]
 8004dac:	fb02 f303 	mul.w	r3, r2, r3
 8004db0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004db2:	e054      	b.n	8004e5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dba:	d050      	beq.n	8004e5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004dbc:	f7fc fd5e 	bl	800187c <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	69fa      	ldr	r2, [r7, #28]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d902      	bls.n	8004dd2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d13d      	bne.n	8004e4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004de0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dea:	d111      	bne.n	8004e10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004df4:	d004      	beq.n	8004e00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dfe:	d107      	bne.n	8004e10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e18:	d10f      	bne.n	8004e3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e017      	b.n	8004e7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	4013      	ands	r3, r2
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	bf0c      	ite	eq
 8004e6e:	2301      	moveq	r3, #1
 8004e70:	2300      	movne	r3, #0
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	461a      	mov	r2, r3
 8004e76:	79fb      	ldrb	r3, [r7, #7]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d19b      	bne.n	8004db4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3720      	adds	r7, #32
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	20000000 	.word	0x20000000

08004e8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af02      	add	r7, sp, #8
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	2180      	movs	r1, #128	; 0x80
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f7ff ff6a 	bl	8004d7c <SPI_WaitFlagStateUntilTimeout>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d007      	beq.n	8004ebe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb2:	f043 0220 	orr.w	r2, r3, #32
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e000      	b.n	8004ec0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e041      	b.n	8004f5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7fc fa2c 	bl	800134c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	3304      	adds	r3, #4
 8004f04:	4619      	mov	r1, r3
 8004f06:	4610      	mov	r0, r2
 8004f08:	f000 fa78 	bl	80053fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d001      	beq.n	8004f80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e03f      	b.n	8005000 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2202      	movs	r2, #2
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68da      	ldr	r2, [r3, #12]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f042 0201 	orr.w	r2, r2, #1
 8004f96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a1b      	ldr	r2, [pc, #108]	; (800500c <HAL_TIM_Base_Start_IT+0xa4>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d013      	beq.n	8004fca <HAL_TIM_Base_Start_IT+0x62>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004faa:	d00e      	beq.n	8004fca <HAL_TIM_Base_Start_IT+0x62>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a17      	ldr	r2, [pc, #92]	; (8005010 <HAL_TIM_Base_Start_IT+0xa8>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d009      	beq.n	8004fca <HAL_TIM_Base_Start_IT+0x62>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a16      	ldr	r2, [pc, #88]	; (8005014 <HAL_TIM_Base_Start_IT+0xac>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d004      	beq.n	8004fca <HAL_TIM_Base_Start_IT+0x62>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a14      	ldr	r2, [pc, #80]	; (8005018 <HAL_TIM_Base_Start_IT+0xb0>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d111      	bne.n	8004fee <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2b06      	cmp	r3, #6
 8004fda:	d010      	beq.n	8004ffe <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0201 	orr.w	r2, r2, #1
 8004fea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fec:	e007      	b.n	8004ffe <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f042 0201 	orr.w	r2, r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	bc80      	pop	{r7}
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40012c00 	.word	0x40012c00
 8005010:	40000400 	.word	0x40000400
 8005014:	40000800 	.word	0x40000800
 8005018:	40000c00 	.word	0x40000c00

0800501c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b02      	cmp	r3, #2
 8005030:	d122      	bne.n	8005078 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b02      	cmp	r3, #2
 800503e:	d11b      	bne.n	8005078 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f06f 0202 	mvn.w	r2, #2
 8005048:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	f003 0303 	and.w	r3, r3, #3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f9b1 	bl	80053c6 <HAL_TIM_IC_CaptureCallback>
 8005064:	e005      	b.n	8005072 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f9a4 	bl	80053b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f9b3 	bl	80053d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	2b04      	cmp	r3, #4
 8005084:	d122      	bne.n	80050cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b04      	cmp	r3, #4
 8005092:	d11b      	bne.n	80050cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f06f 0204 	mvn.w	r2, #4
 800509c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2202      	movs	r2, #2
 80050a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f987 	bl	80053c6 <HAL_TIM_IC_CaptureCallback>
 80050b8:	e005      	b.n	80050c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f97a 	bl	80053b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f989 	bl	80053d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f003 0308 	and.w	r3, r3, #8
 80050d6:	2b08      	cmp	r3, #8
 80050d8:	d122      	bne.n	8005120 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f003 0308 	and.w	r3, r3, #8
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d11b      	bne.n	8005120 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f06f 0208 	mvn.w	r2, #8
 80050f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2204      	movs	r2, #4
 80050f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	f003 0303 	and.w	r3, r3, #3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f95d 	bl	80053c6 <HAL_TIM_IC_CaptureCallback>
 800510c:	e005      	b.n	800511a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f950 	bl	80053b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f95f 	bl	80053d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	f003 0310 	and.w	r3, r3, #16
 800512a:	2b10      	cmp	r3, #16
 800512c:	d122      	bne.n	8005174 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f003 0310 	and.w	r3, r3, #16
 8005138:	2b10      	cmp	r3, #16
 800513a:	d11b      	bne.n	8005174 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f06f 0210 	mvn.w	r2, #16
 8005144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2208      	movs	r2, #8
 800514a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f933 	bl	80053c6 <HAL_TIM_IC_CaptureCallback>
 8005160:	e005      	b.n	800516e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f926 	bl	80053b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f935 	bl	80053d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b01      	cmp	r3, #1
 8005180:	d10e      	bne.n	80051a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b01      	cmp	r3, #1
 800518e:	d107      	bne.n	80051a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f06f 0201 	mvn.w	r2, #1
 8005198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7fb fd56 	bl	8000c4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051aa:	2b80      	cmp	r3, #128	; 0x80
 80051ac:	d10e      	bne.n	80051cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b8:	2b80      	cmp	r3, #128	; 0x80
 80051ba:	d107      	bne.n	80051cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 fa89 	bl	80056de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d6:	2b40      	cmp	r3, #64	; 0x40
 80051d8:	d10e      	bne.n	80051f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e4:	2b40      	cmp	r3, #64	; 0x40
 80051e6:	d107      	bne.n	80051f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f8f9 	bl	80053ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f003 0320 	and.w	r3, r3, #32
 8005202:	2b20      	cmp	r3, #32
 8005204:	d10e      	bne.n	8005224 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f003 0320 	and.w	r3, r3, #32
 8005210:	2b20      	cmp	r3, #32
 8005212:	d107      	bne.n	8005224 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f06f 0220 	mvn.w	r2, #32
 800521c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fa54 	bl	80056cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005224:	bf00      	nop
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800523c:	2b01      	cmp	r3, #1
 800523e:	d101      	bne.n	8005244 <HAL_TIM_ConfigClockSource+0x18>
 8005240:	2302      	movs	r3, #2
 8005242:	e0b3      	b.n	80053ac <HAL_TIM_ConfigClockSource+0x180>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005262:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800526a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800527c:	d03e      	beq.n	80052fc <HAL_TIM_ConfigClockSource+0xd0>
 800527e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005282:	f200 8087 	bhi.w	8005394 <HAL_TIM_ConfigClockSource+0x168>
 8005286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800528a:	f000 8085 	beq.w	8005398 <HAL_TIM_ConfigClockSource+0x16c>
 800528e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005292:	d87f      	bhi.n	8005394 <HAL_TIM_ConfigClockSource+0x168>
 8005294:	2b70      	cmp	r3, #112	; 0x70
 8005296:	d01a      	beq.n	80052ce <HAL_TIM_ConfigClockSource+0xa2>
 8005298:	2b70      	cmp	r3, #112	; 0x70
 800529a:	d87b      	bhi.n	8005394 <HAL_TIM_ConfigClockSource+0x168>
 800529c:	2b60      	cmp	r3, #96	; 0x60
 800529e:	d050      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x116>
 80052a0:	2b60      	cmp	r3, #96	; 0x60
 80052a2:	d877      	bhi.n	8005394 <HAL_TIM_ConfigClockSource+0x168>
 80052a4:	2b50      	cmp	r3, #80	; 0x50
 80052a6:	d03c      	beq.n	8005322 <HAL_TIM_ConfigClockSource+0xf6>
 80052a8:	2b50      	cmp	r3, #80	; 0x50
 80052aa:	d873      	bhi.n	8005394 <HAL_TIM_ConfigClockSource+0x168>
 80052ac:	2b40      	cmp	r3, #64	; 0x40
 80052ae:	d058      	beq.n	8005362 <HAL_TIM_ConfigClockSource+0x136>
 80052b0:	2b40      	cmp	r3, #64	; 0x40
 80052b2:	d86f      	bhi.n	8005394 <HAL_TIM_ConfigClockSource+0x168>
 80052b4:	2b30      	cmp	r3, #48	; 0x30
 80052b6:	d064      	beq.n	8005382 <HAL_TIM_ConfigClockSource+0x156>
 80052b8:	2b30      	cmp	r3, #48	; 0x30
 80052ba:	d86b      	bhi.n	8005394 <HAL_TIM_ConfigClockSource+0x168>
 80052bc:	2b20      	cmp	r3, #32
 80052be:	d060      	beq.n	8005382 <HAL_TIM_ConfigClockSource+0x156>
 80052c0:	2b20      	cmp	r3, #32
 80052c2:	d867      	bhi.n	8005394 <HAL_TIM_ConfigClockSource+0x168>
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d05c      	beq.n	8005382 <HAL_TIM_ConfigClockSource+0x156>
 80052c8:	2b10      	cmp	r3, #16
 80052ca:	d05a      	beq.n	8005382 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80052cc:	e062      	b.n	8005394 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6818      	ldr	r0, [r3, #0]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	6899      	ldr	r1, [r3, #8]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f000 f970 	bl	80055c2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	609a      	str	r2, [r3, #8]
      break;
 80052fa:	e04e      	b.n	800539a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6818      	ldr	r0, [r3, #0]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	6899      	ldr	r1, [r3, #8]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f000 f959 	bl	80055c2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689a      	ldr	r2, [r3, #8]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800531e:	609a      	str	r2, [r3, #8]
      break;
 8005320:	e03b      	b.n	800539a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6818      	ldr	r0, [r3, #0]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	6859      	ldr	r1, [r3, #4]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	461a      	mov	r2, r3
 8005330:	f000 f8d0 	bl	80054d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2150      	movs	r1, #80	; 0x50
 800533a:	4618      	mov	r0, r3
 800533c:	f000 f927 	bl	800558e <TIM_ITRx_SetConfig>
      break;
 8005340:	e02b      	b.n	800539a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6818      	ldr	r0, [r3, #0]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	6859      	ldr	r1, [r3, #4]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	461a      	mov	r2, r3
 8005350:	f000 f8ee 	bl	8005530 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2160      	movs	r1, #96	; 0x60
 800535a:	4618      	mov	r0, r3
 800535c:	f000 f917 	bl	800558e <TIM_ITRx_SetConfig>
      break;
 8005360:	e01b      	b.n	800539a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6818      	ldr	r0, [r3, #0]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	6859      	ldr	r1, [r3, #4]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	461a      	mov	r2, r3
 8005370:	f000 f8b0 	bl	80054d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2140      	movs	r1, #64	; 0x40
 800537a:	4618      	mov	r0, r3
 800537c:	f000 f907 	bl	800558e <TIM_ITRx_SetConfig>
      break;
 8005380:	e00b      	b.n	800539a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4619      	mov	r1, r3
 800538c:	4610      	mov	r0, r2
 800538e:	f000 f8fe 	bl	800558e <TIM_ITRx_SetConfig>
        break;
 8005392:	e002      	b.n	800539a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005394:	bf00      	nop
 8005396:	e000      	b.n	800539a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005398:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bc80      	pop	{r7}
 80053c4:	4770      	bx	lr

080053c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053ce:	bf00      	nop
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bc80      	pop	{r7}
 80053d6:	4770      	bx	lr

080053d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bc80      	pop	{r7}
 80053e8:	4770      	bx	lr

080053ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b083      	sub	sp, #12
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053f2:	bf00      	nop
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bc80      	pop	{r7}
 80053fa:	4770      	bx	lr

080053fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a2d      	ldr	r2, [pc, #180]	; (80054c4 <TIM_Base_SetConfig+0xc8>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d00f      	beq.n	8005434 <TIM_Base_SetConfig+0x38>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541a:	d00b      	beq.n	8005434 <TIM_Base_SetConfig+0x38>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a2a      	ldr	r2, [pc, #168]	; (80054c8 <TIM_Base_SetConfig+0xcc>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d007      	beq.n	8005434 <TIM_Base_SetConfig+0x38>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a29      	ldr	r2, [pc, #164]	; (80054cc <TIM_Base_SetConfig+0xd0>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d003      	beq.n	8005434 <TIM_Base_SetConfig+0x38>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a28      	ldr	r2, [pc, #160]	; (80054d0 <TIM_Base_SetConfig+0xd4>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d108      	bne.n	8005446 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a1e      	ldr	r2, [pc, #120]	; (80054c4 <TIM_Base_SetConfig+0xc8>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d00f      	beq.n	800546e <TIM_Base_SetConfig+0x72>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005454:	d00b      	beq.n	800546e <TIM_Base_SetConfig+0x72>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a1b      	ldr	r2, [pc, #108]	; (80054c8 <TIM_Base_SetConfig+0xcc>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d007      	beq.n	800546e <TIM_Base_SetConfig+0x72>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a1a      	ldr	r2, [pc, #104]	; (80054cc <TIM_Base_SetConfig+0xd0>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d003      	beq.n	800546e <TIM_Base_SetConfig+0x72>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a19      	ldr	r2, [pc, #100]	; (80054d0 <TIM_Base_SetConfig+0xd4>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d108      	bne.n	8005480 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a07      	ldr	r2, [pc, #28]	; (80054c4 <TIM_Base_SetConfig+0xc8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d103      	bne.n	80054b4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	691a      	ldr	r2, [r3, #16]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	615a      	str	r2, [r3, #20]
}
 80054ba:	bf00      	nop
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	bc80      	pop	{r7}
 80054c2:	4770      	bx	lr
 80054c4:	40012c00 	.word	0x40012c00
 80054c8:	40000400 	.word	0x40000400
 80054cc:	40000800 	.word	0x40000800
 80054d0:	40000c00 	.word	0x40000c00

080054d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6a1b      	ldr	r3, [r3, #32]
 80054e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	f023 0201 	bic.w	r2, r3, #1
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	011b      	lsls	r3, r3, #4
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	4313      	orrs	r3, r2
 8005508:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	f023 030a 	bic.w	r3, r3, #10
 8005510:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	4313      	orrs	r3, r2
 8005518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	621a      	str	r2, [r3, #32]
}
 8005526:	bf00      	nop
 8005528:	371c      	adds	r7, #28
 800552a:	46bd      	mov	sp, r7
 800552c:	bc80      	pop	{r7}
 800552e:	4770      	bx	lr

08005530 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	f023 0210 	bic.w	r2, r3, #16
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800555a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	031b      	lsls	r3, r3, #12
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	4313      	orrs	r3, r2
 8005564:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800556c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	011b      	lsls	r3, r3, #4
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	4313      	orrs	r3, r2
 8005576:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	621a      	str	r2, [r3, #32]
}
 8005584:	bf00      	nop
 8005586:	371c      	adds	r7, #28
 8005588:	46bd      	mov	sp, r7
 800558a:	bc80      	pop	{r7}
 800558c:	4770      	bx	lr

0800558e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800558e:	b480      	push	{r7}
 8005590:	b085      	sub	sp, #20
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	f043 0307 	orr.w	r3, r3, #7
 80055b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	609a      	str	r2, [r3, #8]
}
 80055b8:	bf00      	nop
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	bc80      	pop	{r7}
 80055c0:	4770      	bx	lr

080055c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b087      	sub	sp, #28
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	60f8      	str	r0, [r7, #12]
 80055ca:	60b9      	str	r1, [r7, #8]
 80055cc:	607a      	str	r2, [r7, #4]
 80055ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	021a      	lsls	r2, r3, #8
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	431a      	orrs	r2, r3
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	609a      	str	r2, [r3, #8]
}
 80055f6:	bf00      	nop
 80055f8:	371c      	adds	r7, #28
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bc80      	pop	{r7}
 80055fe:	4770      	bx	lr

08005600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005614:	2302      	movs	r3, #2
 8005616:	e04b      	b.n	80056b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a19      	ldr	r2, [pc, #100]	; (80056bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d013      	beq.n	8005684 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005664:	d00e      	beq.n	8005684 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a15      	ldr	r2, [pc, #84]	; (80056c0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d009      	beq.n	8005684 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a13      	ldr	r2, [pc, #76]	; (80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d004      	beq.n	8005684 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a12      	ldr	r2, [pc, #72]	; (80056c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d10c      	bne.n	800569e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800568a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	4313      	orrs	r3, r2
 8005694:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bc80      	pop	{r7}
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	40012c00 	.word	0x40012c00
 80056c0:	40000400 	.word	0x40000400
 80056c4:	40000800 	.word	0x40000800
 80056c8:	40000c00 	.word	0x40000c00

080056cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	bc80      	pop	{r7}
 80056dc:	4770      	bx	lr

080056de <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056de:	b480      	push	{r7}
 80056e0:	b083      	sub	sp, #12
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056e6:	bf00      	nop
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bc80      	pop	{r7}
 80056ee:	4770      	bx	lr

080056f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e03f      	b.n	8005782 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d106      	bne.n	800571c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7fb fe34 	bl	8001384 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2224      	movs	r2, #36	; 0x24
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68da      	ldr	r2, [r3, #12]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005732:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 fc1d 	bl	8005f74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005748:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	695a      	ldr	r2, [r3, #20]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005758:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005768:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2220      	movs	r2, #32
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2220      	movs	r2, #32
 800577c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b08a      	sub	sp, #40	; 0x28
 800578e:	af02      	add	r7, sp, #8
 8005790:	60f8      	str	r0, [r7, #12]
 8005792:	60b9      	str	r1, [r7, #8]
 8005794:	603b      	str	r3, [r7, #0]
 8005796:	4613      	mov	r3, r2
 8005798:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800579a:	2300      	movs	r3, #0
 800579c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	2b20      	cmp	r3, #32
 80057a8:	d17c      	bne.n	80058a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <HAL_UART_Transmit+0x2c>
 80057b0:	88fb      	ldrh	r3, [r7, #6]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e075      	b.n	80058a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d101      	bne.n	80057c8 <HAL_UART_Transmit+0x3e>
 80057c4:	2302      	movs	r3, #2
 80057c6:	e06e      	b.n	80058a6 <HAL_UART_Transmit+0x11c>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2221      	movs	r2, #33	; 0x21
 80057da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057de:	f7fc f84d 	bl	800187c <HAL_GetTick>
 80057e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	88fa      	ldrh	r2, [r7, #6]
 80057e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	88fa      	ldrh	r2, [r7, #6]
 80057ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f8:	d108      	bne.n	800580c <HAL_UART_Transmit+0x82>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d104      	bne.n	800580c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005802:	2300      	movs	r3, #0
 8005804:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	61bb      	str	r3, [r7, #24]
 800580a:	e003      	b.n	8005814 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005810:	2300      	movs	r3, #0
 8005812:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800581c:	e02a      	b.n	8005874 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	2200      	movs	r2, #0
 8005826:	2180      	movs	r1, #128	; 0x80
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 fa08 	bl	8005c3e <UART_WaitOnFlagUntilTimeout>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e036      	b.n	80058a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10b      	bne.n	8005856 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	461a      	mov	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800584c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	3302      	adds	r3, #2
 8005852:	61bb      	str	r3, [r7, #24]
 8005854:	e007      	b.n	8005866 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	781a      	ldrb	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	3301      	adds	r3, #1
 8005864:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800586a:	b29b      	uxth	r3, r3
 800586c:	3b01      	subs	r3, #1
 800586e:	b29a      	uxth	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005878:	b29b      	uxth	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1cf      	bne.n	800581e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2200      	movs	r2, #0
 8005886:	2140      	movs	r1, #64	; 0x40
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f000 f9d8 	bl	8005c3e <UART_WaitOnFlagUntilTimeout>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d001      	beq.n	8005898 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e006      	b.n	80058a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2220      	movs	r2, #32
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80058a0:	2300      	movs	r3, #0
 80058a2:	e000      	b.n	80058a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80058a4:	2302      	movs	r3, #2
  }
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3720      	adds	r7, #32
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
	...

080058b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08a      	sub	sp, #40	; 0x28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	f003 030f 	and.w	r3, r3, #15
 80058de:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10d      	bne.n	8005902 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	f003 0320 	and.w	r3, r3, #32
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d008      	beq.n	8005902 <HAL_UART_IRQHandler+0x52>
 80058f0:	6a3b      	ldr	r3, [r7, #32]
 80058f2:	f003 0320 	and.w	r3, r3, #32
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fa90 	bl	8005e20 <UART_Receive_IT>
      return;
 8005900:	e17b      	b.n	8005bfa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 80b1 	beq.w	8005a6c <HAL_UART_IRQHandler+0x1bc>
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	2b00      	cmp	r3, #0
 8005912:	d105      	bne.n	8005920 <HAL_UART_IRQHandler+0x70>
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 80a6 	beq.w	8005a6c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <HAL_UART_IRQHandler+0x90>
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005930:	2b00      	cmp	r3, #0
 8005932:	d005      	beq.n	8005940 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005938:	f043 0201 	orr.w	r2, r3, #1
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	f003 0304 	and.w	r3, r3, #4
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00a      	beq.n	8005960 <HAL_UART_IRQHandler+0xb0>
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b00      	cmp	r3, #0
 8005952:	d005      	beq.n	8005960 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005958:	f043 0202 	orr.w	r2, r3, #2
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00a      	beq.n	8005980 <HAL_UART_IRQHandler+0xd0>
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b00      	cmp	r3, #0
 8005972:	d005      	beq.n	8005980 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005978:	f043 0204 	orr.w	r2, r3, #4
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	f003 0308 	and.w	r3, r3, #8
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00f      	beq.n	80059aa <HAL_UART_IRQHandler+0xfa>
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	f003 0320 	and.w	r3, r3, #32
 8005990:	2b00      	cmp	r3, #0
 8005992:	d104      	bne.n	800599e <HAL_UART_IRQHandler+0xee>
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	d005      	beq.n	80059aa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a2:	f043 0208 	orr.w	r2, r3, #8
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 811e 	beq.w	8005bf0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	f003 0320 	and.w	r3, r3, #32
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d007      	beq.n	80059ce <HAL_UART_IRQHandler+0x11e>
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	f003 0320 	and.w	r3, r3, #32
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d002      	beq.n	80059ce <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fa29 	bl	8005e20 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d8:	2b00      	cmp	r3, #0
 80059da:	bf14      	ite	ne
 80059dc:	2301      	movne	r3, #1
 80059de:	2300      	moveq	r3, #0
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e8:	f003 0308 	and.w	r3, r3, #8
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d102      	bne.n	80059f6 <HAL_UART_IRQHandler+0x146>
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d031      	beq.n	8005a5a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f96b 	bl	8005cd2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d023      	beq.n	8005a52 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	695a      	ldr	r2, [r3, #20]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a18:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d013      	beq.n	8005a4a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a26:	4a76      	ldr	r2, [pc, #472]	; (8005c00 <HAL_UART_IRQHandler+0x350>)
 8005a28:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fc f86c 	bl	8001b0c <HAL_DMA_Abort_IT>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d016      	beq.n	8005a68 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a44:	4610      	mov	r0, r2
 8005a46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a48:	e00e      	b.n	8005a68 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f8e3 	bl	8005c16 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a50:	e00a      	b.n	8005a68 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f8df 	bl	8005c16 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a58:	e006      	b.n	8005a68 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f8db 	bl	8005c16 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005a66:	e0c3      	b.n	8005bf0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a68:	bf00      	nop
    return;
 8005a6a:	e0c1      	b.n	8005bf0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	f040 80a1 	bne.w	8005bb8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	f003 0310 	and.w	r3, r3, #16
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 809b 	beq.w	8005bb8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	f003 0310 	and.w	r3, r3, #16
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 8095 	beq.w	8005bb8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	60fb      	str	r3, [r7, #12]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d04e      	beq.n	8005b50 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005abc:	8a3b      	ldrh	r3, [r7, #16]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 8098 	beq.w	8005bf4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ac8:	8a3a      	ldrh	r2, [r7, #16]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	f080 8092 	bcs.w	8005bf4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	8a3a      	ldrh	r2, [r7, #16]
 8005ad4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	2b20      	cmp	r3, #32
 8005ade:	d02b      	beq.n	8005b38 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68da      	ldr	r2, [r3, #12]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005aee:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695a      	ldr	r2, [r3, #20]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f022 0201 	bic.w	r2, r2, #1
 8005afe:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	695a      	ldr	r2, [r3, #20]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b0e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2220      	movs	r2, #32
 8005b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68da      	ldr	r2, [r3, #12]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 0210 	bic.w	r2, r2, #16
 8005b2c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fb ffaf 	bl	8001a96 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	4619      	mov	r1, r3
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 f86d 	bl	8005c28 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005b4e:	e051      	b.n	8005bf4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d047      	beq.n	8005bf8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005b68:	8a7b      	ldrh	r3, [r7, #18]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d044      	beq.n	8005bf8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68da      	ldr	r2, [r3, #12]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b7c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	695a      	ldr	r2, [r3, #20]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 0201 	bic.w	r2, r2, #1
 8005b8c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2220      	movs	r2, #32
 8005b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0210 	bic.w	r2, r2, #16
 8005baa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bac:	8a7b      	ldrh	r3, [r7, #18]
 8005bae:	4619      	mov	r1, r3
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f839 	bl	8005c28 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005bb6:	e01f      	b.n	8005bf8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d008      	beq.n	8005bd4 <HAL_UART_IRQHandler+0x324>
 8005bc2:	6a3b      	ldr	r3, [r7, #32]
 8005bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d003      	beq.n	8005bd4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f8c0 	bl	8005d52 <UART_Transmit_IT>
    return;
 8005bd2:	e012      	b.n	8005bfa <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00d      	beq.n	8005bfa <HAL_UART_IRQHandler+0x34a>
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d008      	beq.n	8005bfa <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f901 	bl	8005df0 <UART_EndTransmit_IT>
    return;
 8005bee:	e004      	b.n	8005bfa <HAL_UART_IRQHandler+0x34a>
    return;
 8005bf0:	bf00      	nop
 8005bf2:	e002      	b.n	8005bfa <HAL_UART_IRQHandler+0x34a>
      return;
 8005bf4:	bf00      	nop
 8005bf6:	e000      	b.n	8005bfa <HAL_UART_IRQHandler+0x34a>
      return;
 8005bf8:	bf00      	nop
  }
}
 8005bfa:	3728      	adds	r7, #40	; 0x28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	08005d2b 	.word	0x08005d2b

08005c04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bc80      	pop	{r7}
 8005c14:	4770      	bx	lr

08005c16 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b083      	sub	sp, #12
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c1e:	bf00      	nop
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bc80      	pop	{r7}
 8005c26:	4770      	bx	lr

08005c28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	460b      	mov	r3, r1
 8005c32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bc80      	pop	{r7}
 8005c3c:	4770      	bx	lr

08005c3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b084      	sub	sp, #16
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	60f8      	str	r0, [r7, #12]
 8005c46:	60b9      	str	r1, [r7, #8]
 8005c48:	603b      	str	r3, [r7, #0]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c4e:	e02c      	b.n	8005caa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c56:	d028      	beq.n	8005caa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d007      	beq.n	8005c6e <UART_WaitOnFlagUntilTimeout+0x30>
 8005c5e:	f7fb fe0d 	bl	800187c <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d21d      	bcs.n	8005caa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68da      	ldr	r2, [r3, #12]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c7c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	695a      	ldr	r2, [r3, #20]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 0201 	bic.w	r2, r2, #1
 8005c8c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2220      	movs	r2, #32
 8005c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2220      	movs	r2, #32
 8005c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e00f      	b.n	8005cca <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	bf0c      	ite	eq
 8005cba:	2301      	moveq	r3, #1
 8005cbc:	2300      	movne	r3, #0
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	79fb      	ldrb	r3, [r7, #7]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d0c3      	beq.n	8005c50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b083      	sub	sp, #12
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68da      	ldr	r2, [r3, #12]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ce8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	695a      	ldr	r2, [r3, #20]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 0201 	bic.w	r2, r2, #1
 8005cf8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d107      	bne.n	8005d12 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 0210 	bic.w	r2, r2, #16
 8005d10:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2220      	movs	r2, #32
 8005d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bc80      	pop	{r7}
 8005d28:	4770      	bx	lr

08005d2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b084      	sub	sp, #16
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f7ff ff66 	bl	8005c16 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d4a:	bf00      	nop
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b085      	sub	sp, #20
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b21      	cmp	r3, #33	; 0x21
 8005d64:	d13e      	bne.n	8005de4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d6e:	d114      	bne.n	8005d9a <UART_Transmit_IT+0x48>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d110      	bne.n	8005d9a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	881b      	ldrh	r3, [r3, #0]
 8005d82:	461a      	mov	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d8c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	1c9a      	adds	r2, r3, #2
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	621a      	str	r2, [r3, #32]
 8005d98:	e008      	b.n	8005dac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	1c59      	adds	r1, r3, #1
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	6211      	str	r1, [r2, #32]
 8005da4:	781a      	ldrb	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	3b01      	subs	r3, #1
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	4619      	mov	r1, r3
 8005dba:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10f      	bne.n	8005de0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68da      	ldr	r2, [r3, #12]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dde:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	e000      	b.n	8005de6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005de4:	2302      	movs	r3, #2
  }
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bc80      	pop	{r7}
 8005dee:	4770      	bx	lr

08005df0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e06:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2220      	movs	r2, #32
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7ff fef7 	bl	8005c04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b22      	cmp	r3, #34	; 0x22
 8005e32:	f040 8099 	bne.w	8005f68 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e3e:	d117      	bne.n	8005e70 <UART_Receive_IT+0x50>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d113      	bne.n	8005e70 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e50:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e68:	1c9a      	adds	r2, r3, #2
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	629a      	str	r2, [r3, #40]	; 0x28
 8005e6e:	e026      	b.n	8005ebe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e74:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005e76:	2300      	movs	r3, #0
 8005e78:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e82:	d007      	beq.n	8005e94 <UART_Receive_IT+0x74>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10a      	bne.n	8005ea2 <UART_Receive_IT+0x82>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d106      	bne.n	8005ea2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	701a      	strb	r2, [r3, #0]
 8005ea0:	e008      	b.n	8005eb4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb8:	1c5a      	adds	r2, r3, #1
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	4619      	mov	r1, r3
 8005ecc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d148      	bne.n	8005f64 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68da      	ldr	r2, [r3, #12]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 0220 	bic.w	r2, r2, #32
 8005ee0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68da      	ldr	r2, [r3, #12]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ef0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	695a      	ldr	r2, [r3, #20]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 0201 	bic.w	r2, r2, #1
 8005f00:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2220      	movs	r2, #32
 8005f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d123      	bne.n	8005f5a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68da      	ldr	r2, [r3, #12]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 0210 	bic.w	r2, r2, #16
 8005f26:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0310 	and.w	r3, r3, #16
 8005f32:	2b10      	cmp	r3, #16
 8005f34:	d10a      	bne.n	8005f4c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f36:	2300      	movs	r3, #0
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	60fb      	str	r3, [r7, #12]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	60fb      	str	r3, [r7, #12]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f50:	4619      	mov	r1, r3
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7ff fe68 	bl	8005c28 <HAL_UARTEx_RxEventCallback>
 8005f58:	e002      	b.n	8005f60 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7fa fd0c 	bl	8000978 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f60:	2300      	movs	r3, #0
 8005f62:	e002      	b.n	8005f6a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	e000      	b.n	8005f6a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005f68:	2302      	movs	r3, #2
  }
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3718      	adds	r7, #24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
	...

08005f74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68da      	ldr	r2, [r3, #12]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	689a      	ldr	r2, [r3, #8]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005fae:	f023 030c 	bic.w	r3, r3, #12
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	6812      	ldr	r2, [r2, #0]
 8005fb6:	68b9      	ldr	r1, [r7, #8]
 8005fb8:	430b      	orrs	r3, r1
 8005fba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	699a      	ldr	r2, [r3, #24]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a2c      	ldr	r2, [pc, #176]	; (8006088 <UART_SetConfig+0x114>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d103      	bne.n	8005fe4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005fdc:	f7fe fa10 	bl	8004400 <HAL_RCC_GetPCLK2Freq>
 8005fe0:	60f8      	str	r0, [r7, #12]
 8005fe2:	e002      	b.n	8005fea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005fe4:	f7fe f9f8 	bl	80043d8 <HAL_RCC_GetPCLK1Freq>
 8005fe8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4613      	mov	r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	009a      	lsls	r2, r3, #2
 8005ff4:	441a      	add	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006000:	4a22      	ldr	r2, [pc, #136]	; (800608c <UART_SetConfig+0x118>)
 8006002:	fba2 2303 	umull	r2, r3, r2, r3
 8006006:	095b      	lsrs	r3, r3, #5
 8006008:	0119      	lsls	r1, r3, #4
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	4613      	mov	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	009a      	lsls	r2, r3, #2
 8006014:	441a      	add	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006020:	4b1a      	ldr	r3, [pc, #104]	; (800608c <UART_SetConfig+0x118>)
 8006022:	fba3 0302 	umull	r0, r3, r3, r2
 8006026:	095b      	lsrs	r3, r3, #5
 8006028:	2064      	movs	r0, #100	; 0x64
 800602a:	fb00 f303 	mul.w	r3, r0, r3
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	011b      	lsls	r3, r3, #4
 8006032:	3332      	adds	r3, #50	; 0x32
 8006034:	4a15      	ldr	r2, [pc, #84]	; (800608c <UART_SetConfig+0x118>)
 8006036:	fba2 2303 	umull	r2, r3, r2, r3
 800603a:	095b      	lsrs	r3, r3, #5
 800603c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006040:	4419      	add	r1, r3
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	4613      	mov	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	009a      	lsls	r2, r3, #2
 800604c:	441a      	add	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	fbb2 f2f3 	udiv	r2, r2, r3
 8006058:	4b0c      	ldr	r3, [pc, #48]	; (800608c <UART_SetConfig+0x118>)
 800605a:	fba3 0302 	umull	r0, r3, r3, r2
 800605e:	095b      	lsrs	r3, r3, #5
 8006060:	2064      	movs	r0, #100	; 0x64
 8006062:	fb00 f303 	mul.w	r3, r0, r3
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	011b      	lsls	r3, r3, #4
 800606a:	3332      	adds	r3, #50	; 0x32
 800606c:	4a07      	ldr	r2, [pc, #28]	; (800608c <UART_SetConfig+0x118>)
 800606e:	fba2 2303 	umull	r2, r3, r2, r3
 8006072:	095b      	lsrs	r3, r3, #5
 8006074:	f003 020f 	and.w	r2, r3, #15
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	440a      	add	r2, r1
 800607e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006080:	bf00      	nop
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	40013800 	.word	0x40013800
 800608c:	51eb851f 	.word	0x51eb851f

08006090 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006090:	b084      	sub	sp, #16
 8006092:	b580      	push	{r7, lr}
 8006094:	b084      	sub	sp, #16
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	f107 001c 	add.w	r0, r7, #28
 800609e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f970 	bl	8006394 <USB_CoreReset>
 80060b4:	4603      	mov	r3, r0
 80060b6:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	639a      	str	r2, [r3, #56]	; 0x38

  return ret;
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060d0:	b004      	add	sp, #16
 80060d2:	4770      	bx	lr

080060d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f043 0201 	orr.w	r2, r3, #1
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bc80      	pop	{r7}
 80060f2:	4770      	bx	lr

080060f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f023 0201 	bic.w	r2, r3, #1
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	bc80      	pop	{r7}
 8006112:	4770      	bx	lr

08006114 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	460b      	mov	r3, r1
 800611e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006130:	78fb      	ldrb	r3, [r7, #3]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d115      	bne.n	8006162 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006142:	2001      	movs	r0, #1
 8006144:	f7fb fba4 	bl	8001890 <HAL_Delay>
      ms++;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	3301      	adds	r3, #1
 800614c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f912 	bl	8006378 <USB_GetMode>
 8006154:	4603      	mov	r3, r0
 8006156:	2b01      	cmp	r3, #1
 8006158:	d01e      	beq.n	8006198 <USB_SetCurrentMode+0x84>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2b31      	cmp	r3, #49	; 0x31
 800615e:	d9f0      	bls.n	8006142 <USB_SetCurrentMode+0x2e>
 8006160:	e01a      	b.n	8006198 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006162:	78fb      	ldrb	r3, [r7, #3]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d115      	bne.n	8006194 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006174:	2001      	movs	r0, #1
 8006176:	f7fb fb8b 	bl	8001890 <HAL_Delay>
      ms++;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3301      	adds	r3, #1
 800617e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f8f9 	bl	8006378 <USB_GetMode>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d005      	beq.n	8006198 <USB_SetCurrentMode+0x84>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2b31      	cmp	r3, #49	; 0x31
 8006190:	d9f0      	bls.n	8006174 <USB_SetCurrentMode+0x60>
 8006192:	e001      	b.n	8006198 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e005      	b.n	80061a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2b32      	cmp	r3, #50	; 0x32
 800619c:	d101      	bne.n	80061a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e000      	b.n	80061a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	019b      	lsls	r3, r3, #6
 80061be:	f043 0220 	orr.w	r2, r3, #32
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	3301      	adds	r3, #1
 80061ca:	60fb      	str	r3, [r7, #12]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4a08      	ldr	r2, [pc, #32]	; (80061f0 <USB_FlushTxFifo+0x44>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d901      	bls.n	80061d8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e006      	b.n	80061e6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	f003 0320 	and.w	r3, r3, #32
 80061e0:	2b20      	cmp	r3, #32
 80061e2:	d0f0      	beq.n	80061c6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bc80      	pop	{r7}
 80061ee:	4770      	bx	lr
 80061f0:	00030d40 	.word	0x00030d40

080061f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80061fc:	2300      	movs	r3, #0
 80061fe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2210      	movs	r2, #16
 8006204:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	3301      	adds	r3, #1
 800620a:	60fb      	str	r3, [r7, #12]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	4a08      	ldr	r2, [pc, #32]	; (8006230 <USB_FlushRxFifo+0x3c>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d901      	bls.n	8006218 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e006      	b.n	8006226 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	f003 0310 	and.w	r3, r3, #16
 8006220:	2b10      	cmp	r3, #16
 8006222:	d0f0      	beq.n	8006206 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	bc80      	pop	{r7}
 800622e:	4770      	bx	lr
 8006230:	00030d40 	.word	0x00030d40

08006234 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8006234:	b480      	push	{r7}
 8006236:	b089      	sub	sp, #36	; 0x24
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	4611      	mov	r1, r2
 8006240:	461a      	mov	r2, r3
 8006242:	460b      	mov	r3, r1
 8006244:	71fb      	strb	r3, [r7, #7]
 8006246:	4613      	mov	r3, r2
 8006248:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006252:	88bb      	ldrh	r3, [r7, #4]
 8006254:	3303      	adds	r3, #3
 8006256:	089b      	lsrs	r3, r3, #2
 8006258:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800625a:	2300      	movs	r3, #0
 800625c:	61bb      	str	r3, [r7, #24]
 800625e:	e018      	b.n	8006292 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006260:	79fb      	ldrb	r3, [r7, #7]
 8006262:	031a      	lsls	r2, r3, #12
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	4413      	add	r3, r2
 8006268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800626c:	461a      	mov	r2, r3
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	6013      	str	r3, [r2, #0]
    pSrc++;
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	3301      	adds	r3, #1
 8006278:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	3301      	adds	r3, #1
 800627e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	3301      	adds	r3, #1
 8006284:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	3301      	adds	r3, #1
 800628a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	3301      	adds	r3, #1
 8006290:	61bb      	str	r3, [r7, #24]
 8006292:	69ba      	ldr	r2, [r7, #24]
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	429a      	cmp	r2, r3
 8006298:	d3e2      	bcc.n	8006260 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3724      	adds	r7, #36	; 0x24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bc80      	pop	{r7}
 80062a4:	4770      	bx	lr

080062a6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b08b      	sub	sp, #44	; 0x2c
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	60f8      	str	r0, [r7, #12]
 80062ae:	60b9      	str	r1, [r7, #8]
 80062b0:	4613      	mov	r3, r2
 80062b2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80062bc:	88fb      	ldrh	r3, [r7, #6]
 80062be:	089b      	lsrs	r3, r3, #2
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80062c4:	88fb      	ldrh	r3, [r7, #6]
 80062c6:	f003 0303 	and.w	r3, r3, #3
 80062ca:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80062cc:	2300      	movs	r3, #0
 80062ce:	623b      	str	r3, [r7, #32]
 80062d0:	e014      	b.n	80062fc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	601a      	str	r2, [r3, #0]
    pDest++;
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	3301      	adds	r3, #1
 80062e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	3301      	adds	r3, #1
 80062e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	3301      	adds	r3, #1
 80062ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	3301      	adds	r3, #1
 80062f4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80062f6:	6a3b      	ldr	r3, [r7, #32]
 80062f8:	3301      	adds	r3, #1
 80062fa:	623b      	str	r3, [r7, #32]
 80062fc:	6a3a      	ldr	r2, [r7, #32]
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	429a      	cmp	r2, r3
 8006302:	d3e6      	bcc.n	80062d2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006304:	8bfb      	ldrh	r3, [r7, #30]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d01e      	beq.n	8006348 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006314:	461a      	mov	r2, r3
 8006316:	f107 0310 	add.w	r3, r7, #16
 800631a:	6812      	ldr	r2, [r2, #0]
 800631c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	6a3b      	ldr	r3, [r7, #32]
 8006322:	b2db      	uxtb	r3, r3
 8006324:	00db      	lsls	r3, r3, #3
 8006326:	fa22 f303 	lsr.w	r3, r2, r3
 800632a:	b2da      	uxtb	r2, r3
 800632c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632e:	701a      	strb	r2, [r3, #0]
      i++;
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	3301      	adds	r3, #1
 8006334:	623b      	str	r3, [r7, #32]
      pDest++;
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	3301      	adds	r3, #1
 800633a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800633c:	8bfb      	ldrh	r3, [r7, #30]
 800633e:	3b01      	subs	r3, #1
 8006340:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006342:	8bfb      	ldrh	r3, [r7, #30]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1ea      	bne.n	800631e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800634a:	4618      	mov	r0, r3
 800634c:	372c      	adds	r7, #44	; 0x2c
 800634e:	46bd      	mov	sp, r7
 8006350:	bc80      	pop	{r7}
 8006352:	4770      	bx	lr

08006354 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	4013      	ands	r3, r2
 800636a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800636c:	68fb      	ldr	r3, [r7, #12]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	bc80      	pop	{r7}
 8006376:	4770      	bx	lr

08006378 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	f003 0301 	and.w	r3, r3, #1
}
 8006388:	4618      	mov	r0, r3
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	bc80      	pop	{r7}
 8006390:	4770      	bx	lr
	...

08006394 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800639c:	2300      	movs	r3, #0
 800639e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	3301      	adds	r3, #1
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	4a12      	ldr	r2, [pc, #72]	; (80063f4 <USB_CoreReset+0x60>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d901      	bls.n	80063b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e01b      	b.n	80063ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	daf2      	bge.n	80063a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80063ba:	2300      	movs	r3, #0
 80063bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	f043 0201 	orr.w	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	3301      	adds	r3, #1
 80063ce:	60fb      	str	r3, [r7, #12]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	4a08      	ldr	r2, [pc, #32]	; (80063f4 <USB_CoreReset+0x60>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d901      	bls.n	80063dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e006      	b.n	80063ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d0f0      	beq.n	80063ca <USB_CoreReset+0x36>

  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bc80      	pop	{r7}
 80063f2:	4770      	bx	lr
 80063f4:	00030d40 	.word	0x00030d40

080063f8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063f8:	b084      	sub	sp, #16
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b084      	sub	sp, #16
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	f107 001c 	add.w	r0, r7, #28
 8006406:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006414:	461a      	mov	r2, r3
 8006416:	2300      	movs	r3, #0
 8006418:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSASEN);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSBSEN);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	639a      	str	r2, [r3, #56]	; 0x38
  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006440:	f023 0304 	bic.w	r3, r3, #4
 8006444:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006446:	2110      	movs	r1, #16
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f7ff feaf 	bl	80061ac <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7ff fed0 	bl	80061f4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006454:	2300      	movs	r3, #0
 8006456:	60fb      	str	r3, [r7, #12]
 8006458:	e015      	b.n	8006486 <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	015a      	lsls	r2, r3, #5
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	4413      	add	r3, r2
 8006462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006466:	461a      	mov	r2, r3
 8006468:	f04f 33ff 	mov.w	r3, #4294967295
 800646c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	4413      	add	r3, r2
 8006476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800647a:	461a      	mov	r2, r3
 800647c:	2300      	movs	r3, #0
 800647e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	3301      	adds	r3, #1
 8006484:	60fb      	str	r3, [r7, #12]
 8006486:	6a3b      	ldr	r3, [r7, #32]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	429a      	cmp	r2, r3
 800648c:	d3e5      	bcc.n	800645a <USB_HostInit+0x62>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f04f 32ff 	mov.w	r2, #4294967295
 800649a:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2280      	movs	r2, #128	; 0x80
 80064a0:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a0c      	ldr	r2, [pc, #48]	; (80064d8 <USB_HostInit+0xe0>)
 80064a6:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a0c      	ldr	r2, [pc, #48]	; (80064dc <USB_HostInit+0xe4>)
 80064ac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	f043 0210 	orr.w	r2, r3, #16
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	699a      	ldr	r2, [r3, #24]
 80064c0:	4b07      	ldr	r3, [pc, #28]	; (80064e0 <USB_HostInit+0xe8>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064d4:	b004      	add	sp, #16
 80064d6:	4770      	bx	lr
 80064d8:	00600080 	.word	0x00600080
 80064dc:	004000e0 	.word	0x004000e0
 80064e0:	a3200008 	.word	0xa3200008

080064e4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	460b      	mov	r3, r1
 80064ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006502:	f023 0303 	bic.w	r3, r3, #3
 8006506:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	f003 0303 	and.w	r3, r3, #3
 8006516:	68f9      	ldr	r1, [r7, #12]
 8006518:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800651c:	4313      	orrs	r3, r2
 800651e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006520:	78fb      	ldrb	r3, [r7, #3]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d107      	bne.n	8006536 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800652c:	461a      	mov	r2, r3
 800652e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006532:	6053      	str	r3, [r2, #4]
 8006534:	e009      	b.n	800654a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006536:	78fb      	ldrb	r3, [r7, #3]
 8006538:	2b02      	cmp	r3, #2
 800653a:	d106      	bne.n	800654a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006542:	461a      	mov	r2, r3
 8006544:	f241 7370 	movw	r3, #6000	; 0x1770
 8006548:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	bc80      	pop	{r7}
 8006554:	4770      	bx	lr

08006556 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b084      	sub	sp, #16
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006562:	2300      	movs	r3, #0
 8006564:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006576:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006584:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006586:	2064      	movs	r0, #100	; 0x64
 8006588:	f7fb f982 	bl	8001890 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006598:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800659a:	200a      	movs	r0, #10
 800659c:	f7fb f978 	bl	8001890 <HAL_Delay>

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b085      	sub	sp, #20
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
 80065b2:	460b      	mov	r3, r1
 80065b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80065ce:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d109      	bne.n	80065ee <USB_DriveVbus+0x44>
 80065da:	78fb      	ldrb	r3, [r7, #3]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d106      	bne.n	80065ee <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80065e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80065ec:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065f8:	d109      	bne.n	800660e <USB_DriveVbus+0x64>
 80065fa:	78fb      	ldrb	r3, [r7, #3]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d106      	bne.n	800660e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006608:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800660c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	bc80      	pop	{r7}
 8006618:	4770      	bx	lr

0800661a <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800661a:	b480      	push	{r7}
 800661c:	b085      	sub	sp, #20
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006626:	2300      	movs	r3, #0
 8006628:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	0c5b      	lsrs	r3, r3, #17
 8006638:	f003 0303 	and.w	r3, r3, #3
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	bc80      	pop	{r7}
 8006644:	4770      	bx	lr

08006646 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006646:	b480      	push	{r7}
 8006648:	b085      	sub	sp, #20
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	b29b      	uxth	r3, r3
}
 800665c:	4618      	mov	r0, r3
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	bc80      	pop	{r7}
 8006664:	4770      	bx	lr
	...

08006668 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b088      	sub	sp, #32
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	4608      	mov	r0, r1
 8006672:	4611      	mov	r1, r2
 8006674:	461a      	mov	r2, r3
 8006676:	4603      	mov	r3, r0
 8006678:	70fb      	strb	r3, [r7, #3]
 800667a:	460b      	mov	r3, r1
 800667c:	70bb      	strb	r3, [r7, #2]
 800667e:	4613      	mov	r3, r2
 8006680:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006682:	2300      	movs	r3, #0
 8006684:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800668a:	78fb      	ldrb	r3, [r7, #3]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	4413      	add	r3, r2
 8006692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006696:	461a      	mov	r2, r3
 8006698:	f04f 33ff 	mov.w	r3, #4294967295
 800669c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800669e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80066a2:	2b03      	cmp	r3, #3
 80066a4:	d867      	bhi.n	8006776 <USB_HC_Init+0x10e>
 80066a6:	a201      	add	r2, pc, #4	; (adr r2, 80066ac <USB_HC_Init+0x44>)
 80066a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ac:	080066bd 	.word	0x080066bd
 80066b0:	08006739 	.word	0x08006739
 80066b4:	080066bd 	.word	0x080066bd
 80066b8:	080066fb 	.word	0x080066fb
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80066bc:	78fb      	ldrb	r3, [r7, #3]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c8:	461a      	mov	r2, r3
 80066ca:	f240 439d 	movw	r3, #1181	; 0x49d
 80066ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80066d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	da51      	bge.n	800677c <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80066d8:	78fb      	ldrb	r3, [r7, #3]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	78fa      	ldrb	r2, [r7, #3]
 80066e8:	0151      	lsls	r1, r2, #5
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	440a      	add	r2, r1
 80066ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066f6:	60d3      	str	r3, [r2, #12]
      }
      break;
 80066f8:	e040      	b.n	800677c <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80066fa:	78fb      	ldrb	r3, [r7, #3]
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	4413      	add	r3, r2
 8006702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006706:	461a      	mov	r2, r3
 8006708:	f240 639d 	movw	r3, #1693	; 0x69d
 800670c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800670e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006712:	2b00      	cmp	r3, #0
 8006714:	da34      	bge.n	8006780 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006716:	78fb      	ldrb	r3, [r7, #3]
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	4413      	add	r3, r2
 800671e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	78fa      	ldrb	r2, [r7, #3]
 8006726:	0151      	lsls	r1, r2, #5
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	440a      	add	r2, r1
 800672c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006734:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006736:	e023      	b.n	8006780 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006738:	78fb      	ldrb	r3, [r7, #3]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	4413      	add	r3, r2
 8006740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006744:	461a      	mov	r2, r3
 8006746:	f240 2325 	movw	r3, #549	; 0x225
 800674a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800674c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006750:	2b00      	cmp	r3, #0
 8006752:	da17      	bge.n	8006784 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006754:	78fb      	ldrb	r3, [r7, #3]
 8006756:	015a      	lsls	r2, r3, #5
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	4413      	add	r3, r2
 800675c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	78fa      	ldrb	r2, [r7, #3]
 8006764:	0151      	lsls	r1, r2, #5
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	440a      	add	r2, r1
 800676a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800676e:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006772:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006774:	e006      	b.n	8006784 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	77fb      	strb	r3, [r7, #31]
      break;
 800677a:	e004      	b.n	8006786 <USB_HC_Init+0x11e>
      break;
 800677c:	bf00      	nop
 800677e:	e002      	b.n	8006786 <USB_HC_Init+0x11e>
      break;
 8006780:	bf00      	nop
 8006782:	e000      	b.n	8006786 <USB_HC_Init+0x11e>
      break;
 8006784:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800678c:	699a      	ldr	r2, [r3, #24]
 800678e:	78fb      	ldrb	r3, [r7, #3]
 8006790:	f003 030f 	and.w	r3, r3, #15
 8006794:	2101      	movs	r1, #1
 8006796:	fa01 f303 	lsl.w	r3, r1, r3
 800679a:	6939      	ldr	r1, [r7, #16]
 800679c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80067a0:	4313      	orrs	r3, r2
 80067a2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80067b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	da03      	bge.n	80067c0 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80067b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067bc:	61bb      	str	r3, [r7, #24]
 80067be:	e001      	b.n	80067c4 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f7ff ff28 	bl	800661a <USB_GetHostSpeed>
 80067ca:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80067cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d106      	bne.n	80067e2 <USB_HC_Init+0x17a>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d003      	beq.n	80067e2 <USB_HC_Init+0x17a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80067da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80067de:	617b      	str	r3, [r7, #20]
 80067e0:	e001      	b.n	80067e6 <USB_HC_Init+0x17e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80067e2:	2300      	movs	r3, #0
 80067e4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80067e6:	787b      	ldrb	r3, [r7, #1]
 80067e8:	059b      	lsls	r3, r3, #22
 80067ea:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80067ee:	78bb      	ldrb	r3, [r7, #2]
 80067f0:	02db      	lsls	r3, r3, #11
 80067f2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80067f6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80067f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80067fc:	049b      	lsls	r3, r3, #18
 80067fe:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006802:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006804:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006806:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800680a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006810:	78fb      	ldrb	r3, [r7, #3]
 8006812:	0159      	lsls	r1, r3, #5
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	440b      	add	r3, r1
 8006818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800681c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006822:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006824:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006828:	2b03      	cmp	r3, #3
 800682a:	d10f      	bne.n	800684c <USB_HC_Init+0x1e4>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800682c:	78fb      	ldrb	r3, [r7, #3]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	4413      	add	r3, r2
 8006834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	78fa      	ldrb	r2, [r7, #3]
 800683c:	0151      	lsls	r1, r2, #5
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	440a      	add	r2, r1
 8006842:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006846:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800684a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800684c:	7ffb      	ldrb	r3, [r7, #31]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3720      	adds	r7, #32
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop

08006858 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b088      	sub	sp, #32
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	785b      	ldrb	r3, [r3, #1]
 800686a:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800686c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006870:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d018      	beq.n	80068ac <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	8912      	ldrh	r2, [r2, #8]
 8006882:	4413      	add	r3, r2
 8006884:	3b01      	subs	r3, #1
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	8912      	ldrh	r2, [r2, #8]
 800688a:	fbb3 f3f2 	udiv	r3, r3, r2
 800688e:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8006890:	8bfa      	ldrh	r2, [r7, #30]
 8006892:	8a7b      	ldrh	r3, [r7, #18]
 8006894:	429a      	cmp	r2, r3
 8006896:	d90b      	bls.n	80068b0 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8006898:	8a7b      	ldrh	r3, [r7, #18]
 800689a:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800689c:	8bfb      	ldrh	r3, [r7, #30]
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	8912      	ldrh	r2, [r2, #8]
 80068a2:	fb03 f202 	mul.w	r2, r3, r2
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	611a      	str	r2, [r3, #16]
 80068aa:	e001      	b.n	80068b0 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 80068ac:	2301      	movs	r3, #1
 80068ae:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	78db      	ldrb	r3, [r3, #3]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d007      	beq.n	80068c8 <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80068b8:	8bfb      	ldrh	r3, [r7, #30]
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	8912      	ldrh	r2, [r2, #8]
 80068be:	fb03 f202 	mul.w	r2, r3, r2
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	611a      	str	r2, [r3, #16]
 80068c6:	e003      	b.n	80068d0 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	695a      	ldr	r2, [r3, #20]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80068d8:	8bfb      	ldrh	r3, [r7, #30]
 80068da:	04d9      	lsls	r1, r3, #19
 80068dc:	4b59      	ldr	r3, [pc, #356]	; (8006a44 <USB_HC_StartXfer+0x1ec>)
 80068de:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80068e0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	7a9b      	ldrb	r3, [r3, #10]
 80068e6:	075b      	lsls	r3, r3, #29
 80068e8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80068ec:	6979      	ldr	r1, [r7, #20]
 80068ee:	0148      	lsls	r0, r1, #5
 80068f0:	69b9      	ldr	r1, [r7, #24]
 80068f2:	4401      	add	r1, r0
 80068f4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80068f8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80068fa:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b00      	cmp	r3, #0
 800690a:	bf0c      	ite	eq
 800690c:	2301      	moveq	r3, #1
 800690e:	2300      	movne	r3, #0
 8006910:	b2db      	uxtb	r3, r3
 8006912:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	4413      	add	r3, r2
 800691c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	0151      	lsls	r1, r2, #5
 8006926:	69ba      	ldr	r2, [r7, #24]
 8006928:	440a      	add	r2, r1
 800692a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800692e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006932:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	4413      	add	r3, r2
 800693c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	7c7b      	ldrb	r3, [r7, #17]
 8006944:	075b      	lsls	r3, r3, #29
 8006946:	6979      	ldr	r1, [r7, #20]
 8006948:	0148      	lsls	r0, r1, #5
 800694a:	69b9      	ldr	r1, [r7, #24]
 800694c:	4401      	add	r1, r0
 800694e:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006952:	4313      	orrs	r3, r2
 8006954:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	015a      	lsls	r2, r3, #5
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	4413      	add	r3, r2
 800695e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800696c:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	78db      	ldrb	r3, [r3, #3]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d004      	beq.n	8006980 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800697c:	60bb      	str	r3, [r7, #8]
 800697e:	e003      	b.n	8006988 <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006986:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800698e:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	4413      	add	r3, r2
 8006998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800699c:	461a      	mov	r2, r3
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	78db      	ldrb	r3, [r3, #3]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d147      	bne.n	8006a3a <USB_HC_StartXfer+0x1e2>
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d043      	beq.n	8006a3a <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	79db      	ldrb	r3, [r3, #7]
 80069b6:	2b03      	cmp	r3, #3
 80069b8:	d830      	bhi.n	8006a1c <USB_HC_StartXfer+0x1c4>
 80069ba:	a201      	add	r2, pc, #4	; (adr r2, 80069c0 <USB_HC_StartXfer+0x168>)
 80069bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c0:	080069d1 	.word	0x080069d1
 80069c4:	080069f5 	.word	0x080069f5
 80069c8:	080069d1 	.word	0x080069d1
 80069cc:	080069f5 	.word	0x080069f5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	3303      	adds	r3, #3
 80069d6:	089b      	lsrs	r3, r3, #2
 80069d8:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80069da:	89fa      	ldrh	r2, [r7, #14]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d91c      	bls.n	8006a20 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	f043 0220 	orr.w	r2, r3, #32
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	619a      	str	r2, [r3, #24]
        }
        break;
 80069f2:	e015      	b.n	8006a20 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	3303      	adds	r3, #3
 80069fa:	089b      	lsrs	r3, r3, #2
 80069fc:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80069fe:	89fa      	ldrh	r2, [r7, #14]
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d90a      	bls.n	8006a24 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	619a      	str	r2, [r3, #24]
        }
        break;
 8006a1a:	e003      	b.n	8006a24 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 8006a1c:	bf00      	nop
 8006a1e:	e002      	b.n	8006a26 <USB_HC_StartXfer+0x1ce>
        break;
 8006a20:	bf00      	nop
 8006a22:	e000      	b.n	8006a26 <USB_HC_StartXfer+0x1ce>
        break;
 8006a24:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	68d9      	ldr	r1, [r3, #12]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	785a      	ldrb	r2, [r3, #1]
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f7ff fbfd 	bl	8006234 <USB_WritePacket>
  }

  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3720      	adds	r7, #32
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	1ff80000 	.word	0x1ff80000

08006a48 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	b29b      	uxth	r3, r3
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bc80      	pop	{r7}
 8006a66:	4770      	bx	lr

08006a68 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b089      	sub	sp, #36	; 0x24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	460b      	mov	r3, r1
 8006a72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8006a78:	78fb      	ldrb	r3, [r7, #3]
 8006a7a:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	015a      	lsls	r2, r3, #5
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	4413      	add	r3, r2
 8006a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	0c9b      	lsrs	r3, r3, #18
 8006a90:	f003 0303 	and.w	r3, r3, #3
 8006a94:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	0fdb      	lsrs	r3, r3, #31
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f003 0320 	and.w	r3, r3, #32
 8006ab4:	2b20      	cmp	r3, #32
 8006ab6:	d104      	bne.n	8006ac2 <USB_HC_Halt+0x5a>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	e0e8      	b.n	8006c94 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d002      	beq.n	8006ace <USB_HC_Halt+0x66>
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d173      	bne.n	8006bb6 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	015a      	lsls	r2, r3, #5
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	0151      	lsls	r1, r2, #5
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	440a      	add	r2, r1
 8006ae4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ae8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006aec:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f003 0320 	and.w	r3, r3, #32
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f040 80cb 	bne.w	8006c92 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d143      	bne.n	8006b90 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	0151      	lsls	r1, r2, #5
 8006b1a:	69ba      	ldr	r2, [r7, #24]
 8006b1c:	440a      	add	r2, r1
 8006b1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b26:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	015a      	lsls	r2, r3, #5
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	0151      	lsls	r1, r2, #5
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	440a      	add	r2, r1
 8006b3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b46:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	015a      	lsls	r2, r3, #5
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	4413      	add	r3, r2
 8006b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	0151      	lsls	r1, r2, #5
 8006b5a:	69ba      	ldr	r2, [r7, #24]
 8006b5c:	440a      	add	r2, r1
 8006b5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b66:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	61fb      	str	r3, [r7, #28]
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b74:	d81d      	bhi.n	8006bb2 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b8c:	d0ec      	beq.n	8006b68 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006b8e:	e080      	b.n	8006c92 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	015a      	lsls	r2, r3, #5
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	697a      	ldr	r2, [r7, #20]
 8006ba0:	0151      	lsls	r1, r2, #5
 8006ba2:	69ba      	ldr	r2, [r7, #24]
 8006ba4:	440a      	add	r2, r1
 8006ba6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bae:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006bb0:	e06f      	b.n	8006c92 <USB_HC_Halt+0x22a>
            break;
 8006bb2:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006bb4:	e06d      	b.n	8006c92 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	015a      	lsls	r2, r3, #5
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	0151      	lsls	r1, r2, #5
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	440a      	add	r2, r1
 8006bcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bd4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d143      	bne.n	8006c6e <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	0151      	lsls	r1, r2, #5
 8006bf8:	69ba      	ldr	r2, [r7, #24]
 8006bfa:	440a      	add	r2, r1
 8006bfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c04:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	015a      	lsls	r2, r3, #5
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	0151      	lsls	r1, r2, #5
 8006c18:	69ba      	ldr	r2, [r7, #24]
 8006c1a:	440a      	add	r2, r1
 8006c1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c24:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	015a      	lsls	r2, r3, #5
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	0151      	lsls	r1, r2, #5
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	440a      	add	r2, r1
 8006c3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c44:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	61fb      	str	r3, [r7, #28]
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c52:	d81d      	bhi.n	8006c90 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c6a:	d0ec      	beq.n	8006c46 <USB_HC_Halt+0x1de>
 8006c6c:	e011      	b.n	8006c92 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	015a      	lsls	r2, r3, #5
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	4413      	add	r3, r2
 8006c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	0151      	lsls	r1, r2, #5
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	440a      	add	r2, r1
 8006c84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c8c:	6013      	str	r3, [r2, #0]
 8006c8e:	e000      	b.n	8006c92 <USB_HC_Halt+0x22a>
          break;
 8006c90:	bf00      	nop
    }
  }

  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3724      	adds	r7, #36	; 0x24
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bc80      	pop	{r7}
 8006c9c:	4770      	bx	lr

08006c9e <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b086      	sub	sp, #24
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006caa:	2300      	movs	r3, #0
 8006cac:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f7ff fa20 	bl	80060f4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006cb4:	2110      	movs	r1, #16
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7ff fa78 	bl	80061ac <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f7ff fa99 	bl	80061f4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	613b      	str	r3, [r7, #16]
 8006cc6:	e01f      	b.n	8006d08 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	015a      	lsls	r2, r3, #5
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cde:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ce6:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cee:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	015a      	lsls	r2, r3, #5
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	3301      	adds	r3, #1
 8006d06:	613b      	str	r3, [r7, #16]
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	2b0f      	cmp	r3, #15
 8006d0c:	d9dc      	bls.n	8006cc8 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006d0e:	2300      	movs	r3, #0
 8006d10:	613b      	str	r3, [r7, #16]
 8006d12:	e034      	b.n	8006d7e <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d2a:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d32:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d3a:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d48:	461a      	mov	r2, r3
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	3301      	adds	r3, #1
 8006d52:	617b      	str	r3, [r7, #20]
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d5a:	d80c      	bhi.n	8006d76 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d72:	d0ec      	beq.n	8006d4e <USB_StopHost+0xb0>
 8006d74:	e000      	b.n	8006d78 <USB_StopHost+0xda>
        break;
 8006d76:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	613b      	str	r3, [r7, #16]
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	2b0f      	cmp	r3, #15
 8006d82:	d9c7      	bls.n	8006d14 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d90:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f04f 32ff 	mov.w	r2, #4294967295
 8006d98:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3718      	adds	r7, #24
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  //retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
	FATFS_LinkDriver(&SD0_Driver, SD0Path);
 8006da8:	4908      	ldr	r1, [pc, #32]	; (8006dcc <MX_FATFS_Init+0x28>)
 8006daa:	4809      	ldr	r0, [pc, #36]	; (8006dd0 <MX_FATFS_Init+0x2c>)
 8006dac:	f007 fb86 	bl	800e4bc <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD1_Driver, SD1Path);
 8006db0:	4908      	ldr	r1, [pc, #32]	; (8006dd4 <MX_FATFS_Init+0x30>)
 8006db2:	4809      	ldr	r0, [pc, #36]	; (8006dd8 <MX_FATFS_Init+0x34>)
 8006db4:	f007 fb82 	bl	800e4bc <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD2_Driver, SD2Path);
 8006db8:	4908      	ldr	r1, [pc, #32]	; (8006ddc <MX_FATFS_Init+0x38>)
 8006dba:	4809      	ldr	r0, [pc, #36]	; (8006de0 <MX_FATFS_Init+0x3c>)
 8006dbc:	f007 fb7e 	bl	800e4bc <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD3_Driver, SD3Path);
 8006dc0:	4908      	ldr	r1, [pc, #32]	; (8006de4 <MX_FATFS_Init+0x40>)
 8006dc2:	4809      	ldr	r0, [pc, #36]	; (8006de8 <MX_FATFS_Init+0x44>)
 8006dc4:	f007 fb7a 	bl	800e4bc <FATFS_LinkDriver>


  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006dc8:	bf00      	nop
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	20000cfc 	.word	0x20000cfc
 8006dd0:	2000000c 	.word	0x2000000c
 8006dd4:	20000d00 	.word	0x20000d00
 8006dd8:	20000020 	.word	0x20000020
 8006ddc:	20000d04 	.word	0x20000d04
 8006de0:	20000034 	.word	0x20000034
 8006de4:	20000d08 	.word	0x20000d08
 8006de8:	20000048 	.word	0x20000048

08006dec <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006dec:	b480      	push	{r7}
 8006dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006df0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bc80      	pop	{r7}
 8006df8:	4770      	bx	lr

08006dfa <SD0_initialize>:
  * @brief  Initializes a Drive
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS SD0_initialize (BYTE pdrv)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b082      	sub	sp, #8
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	4603      	mov	r3, r0
 8006e02:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(0);
 8006e04:	2000      	movs	r0, #0
 8006e06:	f7f9 ff69 	bl	8000cdc <sd_ss_set_active>
	return USER_initialize(pdrv);
 8006e0a:	79fb      	ldrb	r3, [r7, #7]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f000 f839 	bl	8006e84 <USER_initialize>
 8006e12:	4603      	mov	r3, r0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3708      	adds	r7, #8
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <SD1_initialize>:
DSTATUS SD1_initialize (BYTE pdrv)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	4603      	mov	r3, r0
 8006e24:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(1);
 8006e26:	2001      	movs	r0, #1
 8006e28:	f7f9 ff58 	bl	8000cdc <sd_ss_set_active>
	return USER_initialize(pdrv);
 8006e2c:	79fb      	ldrb	r3, [r7, #7]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 f828 	bl	8006e84 <USER_initialize>
 8006e34:	4603      	mov	r3, r0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <SD2_initialize>:
DSTATUS SD2_initialize (BYTE pdrv)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b082      	sub	sp, #8
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	4603      	mov	r3, r0
 8006e46:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(2);
 8006e48:	2002      	movs	r0, #2
 8006e4a:	f7f9 ff47 	bl	8000cdc <sd_ss_set_active>
	return USER_initialize(pdrv);
 8006e4e:	79fb      	ldrb	r3, [r7, #7]
 8006e50:	4618      	mov	r0, r3
 8006e52:	f000 f817 	bl	8006e84 <USER_initialize>
 8006e56:	4603      	mov	r3, r0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3708      	adds	r7, #8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <SD3_initialize>:
DSTATUS SD3_initialize (BYTE pdrv)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	4603      	mov	r3, r0
 8006e68:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(3);
 8006e6a:	2003      	movs	r0, #3
 8006e6c:	f7f9 ff36 	bl	8000cdc <sd_ss_set_active>
	return USER_initialize(pdrv);
 8006e70:	79fb      	ldrb	r3, [r7, #7]
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 f806 	bl	8006e84 <USER_initialize>
 8006e78:	4603      	mov	r3, r0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
	...

08006e84 <USER_initialize>:

DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	//SD_PowerOn();
	SS_SD_SELECT();
 8006e8e:	f7f9 ff43 	bl	8000d18 <sd_ss_active_pin_down>
	if(sd_ini()==0) {Stat &= ~STA_NOINIT;} // STA_NOINIT
 8006e92:	f7fa f811 	bl	8000eb8 <sd_ini>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d107      	bne.n	8006eac <USER_initialize+0x28>
 8006e9c:	4b08      	ldr	r3, [pc, #32]	; (8006ec0 <USER_initialize+0x3c>)
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	f023 0301 	bic.w	r3, r3, #1
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	4b05      	ldr	r3, [pc, #20]	; (8006ec0 <USER_initialize+0x3c>)
 8006eaa:	701a      	strb	r2, [r3, #0]
	SS_SD_DESELECT();
 8006eac:	f7f9 ff44 	bl	8000d38 <sd_ss_active_pin_up>
    return Stat;
 8006eb0:	4b03      	ldr	r3, [pc, #12]	; (8006ec0 <USER_initialize+0x3c>)
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3708      	adds	r7, #8
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	20000009 	.word	0x20000009

08006ec4 <SD0_status>:
  * @brief  Gets Disk Status
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS SD0_status (BYTE pdrv)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	4603      	mov	r3, r0
 8006ecc:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(0);
 8006ece:	2000      	movs	r0, #0
 8006ed0:	f7f9 ff04 	bl	8000cdc <sd_ss_set_active>
	return USER_status(pdrv);
 8006ed4:	79fb      	ldrb	r3, [r7, #7]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f000 f838 	bl	8006f4c <USER_status>
 8006edc:	4603      	mov	r3, r0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <SD1_status>:
DSTATUS SD1_status (BYTE pdrv)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b082      	sub	sp, #8
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	4603      	mov	r3, r0
 8006eee:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(1);
 8006ef0:	2001      	movs	r0, #1
 8006ef2:	f7f9 fef3 	bl	8000cdc <sd_ss_set_active>
	return USER_status(pdrv);
 8006ef6:	79fb      	ldrb	r3, [r7, #7]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f000 f827 	bl	8006f4c <USER_status>
 8006efe:	4603      	mov	r3, r0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <SD2_status>:
DSTATUS SD2_status (BYTE pdrv)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	4603      	mov	r3, r0
 8006f10:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(2);
 8006f12:	2002      	movs	r0, #2
 8006f14:	f7f9 fee2 	bl	8000cdc <sd_ss_set_active>
	return USER_status(pdrv);
 8006f18:	79fb      	ldrb	r3, [r7, #7]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 f816 	bl	8006f4c <USER_status>
 8006f20:	4603      	mov	r3, r0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3708      	adds	r7, #8
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <SD3_status>:
DSTATUS SD3_status (BYTE pdrv)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b082      	sub	sp, #8
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	4603      	mov	r3, r0
 8006f32:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(3);
 8006f34:	2003      	movs	r0, #3
 8006f36:	f7f9 fed1 	bl	8000cdc <sd_ss_set_active>
	return USER_status(pdrv);
 8006f3a:	79fb      	ldrb	r3, [r7, #7]
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f000 f805 	bl	8006f4c <USER_status>
 8006f42:	4603      	mov	r3, r0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <USER_status>:

DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	4603      	mov	r3, r0
 8006f54:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	SS_SD_SELECT();
 8006f56:	f7f9 fedf 	bl	8000d18 <sd_ss_active_pin_down>
	if (pdrv) return STA_NOINIT;
 8006f5a:	79fb      	ldrb	r3, [r7, #7]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d001      	beq.n	8006f64 <USER_status+0x18>
 8006f60:	2301      	movs	r3, #1
 8006f62:	e004      	b.n	8006f6e <USER_status+0x22>
	SS_SD_DESELECT();
 8006f64:	f7f9 fee8 	bl	8000d38 <sd_ss_active_pin_up>
    return Stat;
 8006f68:	4b03      	ldr	r3, [pc, #12]	; (8006f78 <USER_status+0x2c>)
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	20000009 	.word	0x20000009

08006f7c <SD0_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DSTATUS SD0_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60b9      	str	r1, [r7, #8]
 8006f84:	607a      	str	r2, [r7, #4]
 8006f86:	603b      	str	r3, [r7, #0]
 8006f88:	4603      	mov	r3, r0
 8006f8a:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(0);
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	f7f9 fea5 	bl	8000cdc <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 8006f92:	7bf8      	ldrb	r0, [r7, #15]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	68b9      	ldr	r1, [r7, #8]
 8006f9a:	f000 f847 	bl	800702c <USER_read>
 8006f9e:	4603      	mov	r3, r0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <SD1_read>:
DSTATUS SD1_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60b9      	str	r1, [r7, #8]
 8006fb0:	607a      	str	r2, [r7, #4]
 8006fb2:	603b      	str	r3, [r7, #0]
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(1);
 8006fb8:	2001      	movs	r0, #1
 8006fba:	f7f9 fe8f 	bl	8000cdc <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 8006fbe:	7bf8      	ldrb	r0, [r7, #15]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	68b9      	ldr	r1, [r7, #8]
 8006fc6:	f000 f831 	bl	800702c <USER_read>
 8006fca:	4603      	mov	r3, r0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <SD2_read>:
DSTATUS SD2_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60b9      	str	r1, [r7, #8]
 8006fdc:	607a      	str	r2, [r7, #4]
 8006fde:	603b      	str	r3, [r7, #0]
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(2);
 8006fe4:	2002      	movs	r0, #2
 8006fe6:	f7f9 fe79 	bl	8000cdc <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 8006fea:	7bf8      	ldrb	r0, [r7, #15]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	68b9      	ldr	r1, [r7, #8]
 8006ff2:	f000 f81b 	bl	800702c <USER_read>
 8006ff6:	4603      	mov	r3, r0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <SD3_read>:
DSTATUS SD3_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	60b9      	str	r1, [r7, #8]
 8007008:	607a      	str	r2, [r7, #4]
 800700a:	603b      	str	r3, [r7, #0]
 800700c:	4603      	mov	r3, r0
 800700e:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(3);
 8007010:	2003      	movs	r0, #3
 8007012:	f7f9 fe63 	bl	8000cdc <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 8007016:	7bf8      	ldrb	r0, [r7, #15]
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	68b9      	ldr	r1, [r7, #8]
 800701e:	f000 f805 	bl	800702c <USER_read>
 8007022:	4603      	mov	r3, r0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	60b9      	str	r1, [r7, #8]
 8007034:	607a      	str	r2, [r7, #4]
 8007036:	603b      	str	r3, [r7, #0]
 8007038:	4603      	mov	r3, r0
 800703a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	SS_SD_SELECT();
 800703c:	f7f9 fe6c 	bl	8000d18 <sd_ss_active_pin_down>
	if (pdrv || !count) return RES_PARERR;
 8007040:	7bfb      	ldrb	r3, [r7, #15]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d102      	bne.n	800704c <USER_read+0x20>
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d101      	bne.n	8007050 <USER_read+0x24>
 800704c:	2304      	movs	r3, #4
 800704e:	e025      	b.n	800709c <USER_read+0x70>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007050:	4b14      	ldr	r3, [pc, #80]	; (80070a4 <USER_read+0x78>)
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	b2db      	uxtb	r3, r3
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <USER_read+0x36>
 800705e:	2303      	movs	r3, #3
 8007060:	e01c      	b.n	800709c <USER_read+0x70>
	if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 8007062:	4b11      	ldr	r3, [pc, #68]	; (80070a8 <USER_read+0x7c>)
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	b2db      	uxtb	r3, r3
 8007068:	f003 0304 	and.w	r3, r3, #4
 800706c:	2b00      	cmp	r3, #0
 800706e:	d102      	bne.n	8007076 <USER_read+0x4a>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	025b      	lsls	r3, r3, #9
 8007074:	607b      	str	r3, [r7, #4]
	if (count == 1) /* Single block read */
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d105      	bne.n	8007088 <USER_read+0x5c>
	{
	  SD_Read_Block(buff,sector); //Ð¡Ñ‡Ð¸Ñ‚Ð°ÐµÐ¼ Ð±Ð»Ð¾Ðº Ð² Ð±ÑƒÑ„ÐµÑ€
 800707c:	6879      	ldr	r1, [r7, #4]
 800707e:	68b8      	ldr	r0, [r7, #8]
 8007080:	f7fa f833 	bl	80010ea <SD_Read_Block>
	  count = 0;
 8007084:	2300      	movs	r3, #0
 8007086:	603b      	str	r3, [r7, #0]
	}
	else /* Multiple block read */
	{
	}
	SPI_Release();
 8007088:	f7fa f828 	bl	80010dc <SPI_Release>
	SS_SD_DESELECT();
 800708c:	f7f9 fe54 	bl	8000d38 <sd_ss_active_pin_up>
	return count ? RES_ERROR : RES_OK;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	bf14      	ite	ne
 8007096:	2301      	movne	r3, #1
 8007098:	2300      	moveq	r3, #0
 800709a:	b2db      	uxtb	r3, r3
    return RES_OK;
  /* USER CODE END READ */
}
 800709c:	4618      	mov	r0, r3
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	20000009 	.word	0x20000009
 80070a8:	20000c20 	.word	0x20000c20

080070ac <SD0_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DSTATUS SD0_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60b9      	str	r1, [r7, #8]
 80070b4:	607a      	str	r2, [r7, #4]
 80070b6:	603b      	str	r3, [r7, #0]
 80070b8:	4603      	mov	r3, r0
 80070ba:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(0);
 80070bc:	2000      	movs	r0, #0
 80070be:	f7f9 fe0d 	bl	8000cdc <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 80070c2:	7bf8      	ldrb	r0, [r7, #15]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	68b9      	ldr	r1, [r7, #8]
 80070ca:	f000 f847 	bl	800715c <USER_write>
 80070ce:	4603      	mov	r3, r0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <SD1_write>:
DSTATUS SD1_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60b9      	str	r1, [r7, #8]
 80070e0:	607a      	str	r2, [r7, #4]
 80070e2:	603b      	str	r3, [r7, #0]
 80070e4:	4603      	mov	r3, r0
 80070e6:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(1);
 80070e8:	2001      	movs	r0, #1
 80070ea:	f7f9 fdf7 	bl	8000cdc <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 80070ee:	7bf8      	ldrb	r0, [r7, #15]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	68b9      	ldr	r1, [r7, #8]
 80070f6:	f000 f831 	bl	800715c <USER_write>
 80070fa:	4603      	mov	r3, r0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <SD2_write>:
DSTATUS SD2_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	60b9      	str	r1, [r7, #8]
 800710c:	607a      	str	r2, [r7, #4]
 800710e:	603b      	str	r3, [r7, #0]
 8007110:	4603      	mov	r3, r0
 8007112:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(2);
 8007114:	2002      	movs	r0, #2
 8007116:	f7f9 fde1 	bl	8000cdc <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 800711a:	7bf8      	ldrb	r0, [r7, #15]
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	68b9      	ldr	r1, [r7, #8]
 8007122:	f000 f81b 	bl	800715c <USER_write>
 8007126:	4603      	mov	r3, r0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <SD3_write>:
DSTATUS SD3_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	60b9      	str	r1, [r7, #8]
 8007138:	607a      	str	r2, [r7, #4]
 800713a:	603b      	str	r3, [r7, #0]
 800713c:	4603      	mov	r3, r0
 800713e:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(3);
 8007140:	2003      	movs	r0, #3
 8007142:	f7f9 fdcb 	bl	8000cdc <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 8007146:	7bf8      	ldrb	r0, [r7, #15]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	68b9      	ldr	r1, [r7, #8]
 800714e:	f000 f805 	bl	800715c <USER_write>
 8007152:	4603      	mov	r3, r0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3710      	adds	r7, #16
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	60b9      	str	r1, [r7, #8]
 8007164:	607a      	str	r2, [r7, #4]
 8007166:	603b      	str	r3, [r7, #0]
 8007168:	4603      	mov	r3, r0
 800716a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	SS_SD_SELECT();
 800716c:	f7f9 fdd4 	bl	8000d18 <sd_ss_active_pin_down>
	if (pdrv || !count) return RES_PARERR;
 8007170:	7bfb      	ldrb	r3, [r7, #15]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d102      	bne.n	800717c <USER_write+0x20>
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d101      	bne.n	8007180 <USER_write+0x24>
 800717c:	2304      	movs	r3, #4
 800717e:	e02e      	b.n	80071de <USER_write+0x82>
	  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007180:	4b19      	ldr	r3, [pc, #100]	; (80071e8 <USER_write+0x8c>)
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	b2db      	uxtb	r3, r3
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <USER_write+0x36>
 800718e:	2303      	movs	r3, #3
 8007190:	e025      	b.n	80071de <USER_write+0x82>
	  if (Stat & STA_PROTECT) return RES_WRPRT;
 8007192:	4b15      	ldr	r3, [pc, #84]	; (80071e8 <USER_write+0x8c>)
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	b2db      	uxtb	r3, r3
 8007198:	f003 0304 	and.w	r3, r3, #4
 800719c:	2b00      	cmp	r3, #0
 800719e:	d001      	beq.n	80071a4 <USER_write+0x48>
 80071a0:	2302      	movs	r3, #2
 80071a2:	e01c      	b.n	80071de <USER_write+0x82>
	  if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 80071a4:	4b11      	ldr	r3, [pc, #68]	; (80071ec <USER_write+0x90>)
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	f003 0304 	and.w	r3, r3, #4
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d102      	bne.n	80071b8 <USER_write+0x5c>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	025b      	lsls	r3, r3, #9
 80071b6:	607b      	str	r3, [r7, #4]
	  if (count == 1) /* Single block read */
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d105      	bne.n	80071ca <USER_write+0x6e>
	  {
	    SD_Write_Block((BYTE*)buff,sector); //Ð¡Ñ‡Ð¸Ñ‚Ð°ÐµÐ¼ Ð±Ð»Ð¾Ðº Ð² Ð±ÑƒÑ„ÐµÑ€
 80071be:	6879      	ldr	r1, [r7, #4]
 80071c0:	68b8      	ldr	r0, [r7, #8]
 80071c2:	f7f9 ffd6 	bl	8001172 <SD_Write_Block>
	    count = 0;
 80071c6:	2300      	movs	r3, #0
 80071c8:	603b      	str	r3, [r7, #0]
	  }
	  else /* Multiple block read */
	  {
	}
	SPI_Release();
 80071ca:	f7f9 ff87 	bl	80010dc <SPI_Release>
	SS_SD_DESELECT();
 80071ce:	f7f9 fdb3 	bl	8000d38 <sd_ss_active_pin_up>
	return count ? RES_ERROR : RES_OK;
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	bf14      	ite	ne
 80071d8:	2301      	movne	r3, #1
 80071da:	2300      	moveq	r3, #0
 80071dc:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	20000009 	.word	0x20000009
 80071ec:	20000c20 	.word	0x20000c20

080071f0 <SD0_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DSTATUS SD0_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	4603      	mov	r3, r0
 80071f8:	603a      	str	r2, [r7, #0]
 80071fa:	71fb      	strb	r3, [r7, #7]
 80071fc:	460b      	mov	r3, r1
 80071fe:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(0);
 8007200:	2000      	movs	r0, #0
 8007202:	f7f9 fd6b 	bl	8000cdc <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 8007206:	79b9      	ldrb	r1, [r7, #6]
 8007208:	79fb      	ldrb	r3, [r7, #7]
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	4618      	mov	r0, r3
 800720e:	f000 f847 	bl	80072a0 <USER_ioctl>
 8007212:	4603      	mov	r3, r0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <SD1_ioctl>:
DSTATUS SD1_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	4603      	mov	r3, r0
 8007224:	603a      	str	r2, [r7, #0]
 8007226:	71fb      	strb	r3, [r7, #7]
 8007228:	460b      	mov	r3, r1
 800722a:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(1);
 800722c:	2001      	movs	r0, #1
 800722e:	f7f9 fd55 	bl	8000cdc <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 8007232:	79b9      	ldrb	r1, [r7, #6]
 8007234:	79fb      	ldrb	r3, [r7, #7]
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	4618      	mov	r0, r3
 800723a:	f000 f831 	bl	80072a0 <USER_ioctl>
 800723e:	4603      	mov	r3, r0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <SD2_ioctl>:
DSTATUS SD2_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	4603      	mov	r3, r0
 8007250:	603a      	str	r2, [r7, #0]
 8007252:	71fb      	strb	r3, [r7, #7]
 8007254:	460b      	mov	r3, r1
 8007256:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(2);
 8007258:	2002      	movs	r0, #2
 800725a:	f7f9 fd3f 	bl	8000cdc <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 800725e:	79b9      	ldrb	r1, [r7, #6]
 8007260:	79fb      	ldrb	r3, [r7, #7]
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	4618      	mov	r0, r3
 8007266:	f000 f81b 	bl	80072a0 <USER_ioctl>
 800726a:	4603      	mov	r3, r0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <SD3_ioctl>:
DSTATUS SD3_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	4603      	mov	r3, r0
 800727c:	603a      	str	r2, [r7, #0]
 800727e:	71fb      	strb	r3, [r7, #7]
 8007280:	460b      	mov	r3, r1
 8007282:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(3);
 8007284:	2003      	movs	r0, #3
 8007286:	f7f9 fd29 	bl	8000cdc <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 800728a:	79b9      	ldrb	r1, [r7, #6]
 800728c:	79fb      	ldrb	r3, [r7, #7]
 800728e:	683a      	ldr	r2, [r7, #0]
 8007290:	4618      	mov	r0, r3
 8007292:	f000 f805 	bl	80072a0 <USER_ioctl>
 8007296:	4603      	mov	r3, r0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3708      	adds	r7, #8
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	4603      	mov	r3, r0
 80072a8:	603a      	str	r2, [r7, #0]
 80072aa:	71fb      	strb	r3, [r7, #7]
 80072ac:	460b      	mov	r3, r1
 80072ae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res;
	sd_ss_set_active(pdrv);
 80072b0:	79fb      	ldrb	r3, [r7, #7]
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7f9 fd12 	bl	8000cdc <sd_ss_set_active>
	SS_SD_SELECT();
 80072b8:	f7f9 fd2e 	bl	8000d18 <sd_ss_active_pin_down>
	if (pdrv) return RES_PARERR;
 80072bc:	79fb      	ldrb	r3, [r7, #7]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <USER_ioctl+0x26>
 80072c2:	2304      	movs	r3, #4
 80072c4:	e02a      	b.n	800731c <USER_ioctl+0x7c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80072c6:	4b17      	ldr	r3, [pc, #92]	; (8007324 <USER_ioctl+0x84>)
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	f003 0301 	and.w	r3, r3, #1
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d001      	beq.n	80072d8 <USER_ioctl+0x38>
 80072d4:	2303      	movs	r3, #3
 80072d6:	e021      	b.n	800731c <USER_ioctl+0x7c>
	res = RES_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	73fb      	strb	r3, [r7, #15]
	switch (cmd)
 80072dc:	79bb      	ldrb	r3, [r7, #6]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d002      	beq.n	80072e8 <USER_ioctl+0x48>
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d00a      	beq.n	80072fc <USER_ioctl+0x5c>
 80072e6:	e010      	b.n	800730a <USER_ioctl+0x6a>
	{
	  case CTRL_SYNC : /* Flush dirty buffer if present */
	    SS_SD_SELECT();
 80072e8:	f7f9 fd16 	bl	8000d18 <sd_ss_active_pin_down>
	    if (SPI_wait_ready() == 0xFF)
 80072ec:	f7f9 fe9e 	bl	800102c <SPI_wait_ready>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2bff      	cmp	r3, #255	; 0xff
 80072f4:	d10c      	bne.n	8007310 <USER_ioctl+0x70>
	    res = RES_OK;
 80072f6:	2300      	movs	r3, #0
 80072f8:	73fb      	strb	r3, [r7, #15]
	    break;
 80072fa:	e009      	b.n	8007310 <USER_ioctl+0x70>
	  case GET_SECTOR_SIZE : /* Get sectors on the disk (WORD) */
	    *(WORD*)buff = 512;
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007302:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 8007304:	2300      	movs	r3, #0
 8007306:	73fb      	strb	r3, [r7, #15]
	    break;
 8007308:	e003      	b.n	8007312 <USER_ioctl+0x72>
	  default:
	    res = RES_PARERR;
 800730a:	2304      	movs	r3, #4
 800730c:	73fb      	strb	r3, [r7, #15]
 800730e:	e000      	b.n	8007312 <USER_ioctl+0x72>
	    break;
 8007310:	bf00      	nop
	}
	SPI_Release();
 8007312:	f7f9 fee3 	bl	80010dc <SPI_Release>
	SS_SD_DESELECT();
 8007316:	f7f9 fd0f 	bl	8000d38 <sd_ss_active_pin_up>
    return res;
 800731a:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800731c:	4618      	mov	r0, r3
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	20000009 	.word	0x20000009

08007328 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007328:	b590      	push	{r4, r7, lr}
 800732a:	b089      	sub	sp, #36	; 0x24
 800732c:	af04      	add	r7, sp, #16
 800732e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007330:	2301      	movs	r3, #1
 8007332:	2202      	movs	r2, #2
 8007334:	2102      	movs	r1, #2
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fd0e 	bl	8007d58 <USBH_FindInterface>
 800733c:	4603      	mov	r3, r0
 800733e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007340:	7bfb      	ldrb	r3, [r7, #15]
 8007342:	2bff      	cmp	r3, #255	; 0xff
 8007344:	d002      	beq.n	800734c <USBH_CDC_InterfaceInit+0x24>
 8007346:	7bfb      	ldrb	r3, [r7, #15]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d901      	bls.n	8007350 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800734c:	2302      	movs	r3, #2
 800734e:	e13d      	b.n	80075cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007350:	7bfb      	ldrb	r3, [r7, #15]
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fce4 	bl	8007d22 <USBH_SelectInterface>
 800735a:	4603      	mov	r3, r0
 800735c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800735e:	7bbb      	ldrb	r3, [r7, #14]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007364:	2302      	movs	r3, #2
 8007366:	e131      	b.n	80075cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800736e:	2050      	movs	r0, #80	; 0x50
 8007370:	f009 fec8 	bl	8011104 <malloc>
 8007374:	4603      	mov	r3, r0
 8007376:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800737e:	69db      	ldr	r3, [r3, #28]
 8007380:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d101      	bne.n	800738c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007388:	2302      	movs	r3, #2
 800738a:	e11f      	b.n	80075cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800738c:	2250      	movs	r2, #80	; 0x50
 800738e:	2100      	movs	r1, #0
 8007390:	68b8      	ldr	r0, [r7, #8]
 8007392:	f009 fed5 	bl	8011140 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007396:	7bfb      	ldrb	r3, [r7, #15]
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	211a      	movs	r1, #26
 800739c:	fb01 f303 	mul.w	r3, r1, r3
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	b25b      	sxtb	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	da15      	bge.n	80073da <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80073ae:	7bfb      	ldrb	r3, [r7, #15]
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	211a      	movs	r1, #26
 80073b4:	fb01 f303 	mul.w	r3, r1, r3
 80073b8:	4413      	add	r3, r2
 80073ba:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80073be:	781a      	ldrb	r2, [r3, #0]
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80073c4:	7bfb      	ldrb	r3, [r7, #15]
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	211a      	movs	r1, #26
 80073ca:	fb01 f303 	mul.w	r3, r1, r3
 80073ce:	4413      	add	r3, r2
 80073d0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80073d4:	881a      	ldrh	r2, [r3, #0]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	785b      	ldrb	r3, [r3, #1]
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f001 ffa6 	bl	8009332 <USBH_AllocPipe>
 80073e6:	4603      	mov	r3, r0
 80073e8:	461a      	mov	r2, r3
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	7819      	ldrb	r1, [r3, #0]
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	7858      	ldrb	r0, [r3, #1]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	8952      	ldrh	r2, [r2, #10]
 8007406:	9202      	str	r2, [sp, #8]
 8007408:	2203      	movs	r2, #3
 800740a:	9201      	str	r2, [sp, #4]
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	4623      	mov	r3, r4
 8007410:	4602      	mov	r2, r0
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f001 ff5e 	bl	80092d4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	2200      	movs	r2, #0
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f009 fdc1 	bl	8010fa8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007426:	2300      	movs	r3, #0
 8007428:	2200      	movs	r2, #0
 800742a:	210a      	movs	r1, #10
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fc93 	bl	8007d58 <USBH_FindInterface>
 8007432:	4603      	mov	r3, r0
 8007434:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007436:	7bfb      	ldrb	r3, [r7, #15]
 8007438:	2bff      	cmp	r3, #255	; 0xff
 800743a:	d002      	beq.n	8007442 <USBH_CDC_InterfaceInit+0x11a>
 800743c:	7bfb      	ldrb	r3, [r7, #15]
 800743e:	2b01      	cmp	r3, #1
 8007440:	d901      	bls.n	8007446 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007442:	2302      	movs	r3, #2
 8007444:	e0c2      	b.n	80075cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007446:	7bfb      	ldrb	r3, [r7, #15]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	211a      	movs	r1, #26
 800744c:	fb01 f303 	mul.w	r3, r1, r3
 8007450:	4413      	add	r3, r2
 8007452:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	b25b      	sxtb	r3, r3
 800745a:	2b00      	cmp	r3, #0
 800745c:	da16      	bge.n	800748c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800745e:	7bfb      	ldrb	r3, [r7, #15]
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	211a      	movs	r1, #26
 8007464:	fb01 f303 	mul.w	r3, r1, r3
 8007468:	4413      	add	r3, r2
 800746a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800746e:	781a      	ldrb	r2, [r3, #0]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007474:	7bfb      	ldrb	r3, [r7, #15]
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	211a      	movs	r1, #26
 800747a:	fb01 f303 	mul.w	r3, r1, r3
 800747e:	4413      	add	r3, r2
 8007480:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007484:	881a      	ldrh	r2, [r3, #0]
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	835a      	strh	r2, [r3, #26]
 800748a:	e015      	b.n	80074b8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800748c:	7bfb      	ldrb	r3, [r7, #15]
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	211a      	movs	r1, #26
 8007492:	fb01 f303 	mul.w	r3, r1, r3
 8007496:	4413      	add	r3, r2
 8007498:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800749c:	781a      	ldrb	r2, [r3, #0]
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	211a      	movs	r1, #26
 80074a8:	fb01 f303 	mul.w	r3, r1, r3
 80074ac:	4413      	add	r3, r2
 80074ae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80074b2:	881a      	ldrh	r2, [r3, #0]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	211a      	movs	r1, #26
 80074be:	fb01 f303 	mul.w	r3, r1, r3
 80074c2:	4413      	add	r3, r2
 80074c4:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	b25b      	sxtb	r3, r3
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	da16      	bge.n	80074fe <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80074d0:	7bfb      	ldrb	r3, [r7, #15]
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	211a      	movs	r1, #26
 80074d6:	fb01 f303 	mul.w	r3, r1, r3
 80074da:	4413      	add	r3, r2
 80074dc:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80074e0:	781a      	ldrb	r2, [r3, #0]
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80074e6:	7bfb      	ldrb	r3, [r7, #15]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	211a      	movs	r1, #26
 80074ec:	fb01 f303 	mul.w	r3, r1, r3
 80074f0:	4413      	add	r3, r2
 80074f2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80074f6:	881a      	ldrh	r2, [r3, #0]
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	835a      	strh	r2, [r3, #26]
 80074fc:	e015      	b.n	800752a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80074fe:	7bfb      	ldrb	r3, [r7, #15]
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	211a      	movs	r1, #26
 8007504:	fb01 f303 	mul.w	r3, r1, r3
 8007508:	4413      	add	r3, r2
 800750a:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800750e:	781a      	ldrb	r2, [r3, #0]
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007514:	7bfb      	ldrb	r3, [r7, #15]
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	211a      	movs	r1, #26
 800751a:	fb01 f303 	mul.w	r3, r1, r3
 800751e:	4413      	add	r3, r2
 8007520:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007524:	881a      	ldrh	r2, [r3, #0]
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	7b9b      	ldrb	r3, [r3, #14]
 800752e:	4619      	mov	r1, r3
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f001 fefe 	bl	8009332 <USBH_AllocPipe>
 8007536:	4603      	mov	r3, r0
 8007538:	461a      	mov	r2, r3
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	7bdb      	ldrb	r3, [r3, #15]
 8007542:	4619      	mov	r1, r3
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f001 fef4 	bl	8009332 <USBH_AllocPipe>
 800754a:	4603      	mov	r3, r0
 800754c:	461a      	mov	r2, r3
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	7b59      	ldrb	r1, [r3, #13]
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	7b98      	ldrb	r0, [r3, #14]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	8b12      	ldrh	r2, [r2, #24]
 800756a:	9202      	str	r2, [sp, #8]
 800756c:	2202      	movs	r2, #2
 800756e:	9201      	str	r2, [sp, #4]
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	4623      	mov	r3, r4
 8007574:	4602      	mov	r2, r0
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f001 feac 	bl	80092d4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	7b19      	ldrb	r1, [r3, #12]
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	7bd8      	ldrb	r0, [r3, #15]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	8b52      	ldrh	r2, [r2, #26]
 8007594:	9202      	str	r2, [sp, #8]
 8007596:	2202      	movs	r2, #2
 8007598:	9201      	str	r2, [sp, #4]
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	4623      	mov	r3, r4
 800759e:	4602      	mov	r2, r0
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f001 fe97 	bl	80092d4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	7b5b      	ldrb	r3, [r3, #13]
 80075b2:	2200      	movs	r2, #0
 80075b4:	4619      	mov	r1, r3
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f009 fcf6 	bl	8010fa8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	7b1b      	ldrb	r3, [r3, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	4619      	mov	r1, r3
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f009 fcef 	bl	8010fa8 <USBH_LL_SetToggle>

  return USBH_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3714      	adds	r7, #20
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd90      	pop	{r4, r7, pc}

080075d4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075e2:	69db      	ldr	r3, [r3, #28]
 80075e4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00e      	beq.n	800760c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	4619      	mov	r1, r3
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f001 fe8c 	bl	8009312 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f001 feb7 	bl	8009374 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	7b1b      	ldrb	r3, [r3, #12]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00e      	beq.n	8007632 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	7b1b      	ldrb	r3, [r3, #12]
 8007618:	4619      	mov	r1, r3
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f001 fe79 	bl	8009312 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	7b1b      	ldrb	r3, [r3, #12]
 8007624:	4619      	mov	r1, r3
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f001 fea4 	bl	8009374 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	7b5b      	ldrb	r3, [r3, #13]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00e      	beq.n	8007658 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	7b5b      	ldrb	r3, [r3, #13]
 800763e:	4619      	mov	r1, r3
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f001 fe66 	bl	8009312 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	7b5b      	ldrb	r3, [r3, #13]
 800764a:	4619      	mov	r1, r3
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f001 fe91 	bl	8009374 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800765e:	69db      	ldr	r3, [r3, #28]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00b      	beq.n	800767c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800766a:	69db      	ldr	r3, [r3, #28]
 800766c:	4618      	mov	r0, r3
 800766e:	f009 fd51 	bl	8011114 <free>
    phost->pActiveClass->pData = 0U;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007678:	2200      	movs	r2, #0
 800767a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b084      	sub	sp, #16
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800768e:	2302      	movs	r3, #2
 8007690:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007698:	69db      	ldr	r3, [r3, #28]
 800769a:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	3340      	adds	r3, #64	; 0x40
 80076a0:	4619      	mov	r1, r3
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f8b0 	bl	8007808 <GetLineCoding>
 80076a8:	4603      	mov	r3, r0
 80076aa:	73fb      	strb	r3, [r7, #15]
  if (status == USBH_OK)
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d105      	bne.n	80076be <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80076b8:	2102      	movs	r1, #2
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	4798      	blx	r3
  }
  return status;
 80076be:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80076d0:	2301      	movs	r3, #1
 80076d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076de:	69db      	ldr	r3, [r3, #28]
 80076e0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80076e8:	2b04      	cmp	r3, #4
 80076ea:	d877      	bhi.n	80077dc <USBH_CDC_Process+0x114>
 80076ec:	a201      	add	r2, pc, #4	; (adr r2, 80076f4 <USBH_CDC_Process+0x2c>)
 80076ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f2:	bf00      	nop
 80076f4:	08007709 	.word	0x08007709
 80076f8:	0800770f 	.word	0x0800770f
 80076fc:	0800773f 	.word	0x0800773f
 8007700:	080077b3 	.word	0x080077b3
 8007704:	080077c1 	.word	0x080077c1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007708:	2300      	movs	r3, #0
 800770a:	73fb      	strb	r3, [r7, #15]
      break;
 800770c:	e06d      	b.n	80077ea <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007712:	4619      	mov	r1, r3
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f896 	bl	8007846 <SetLineCoding>
 800771a:	4603      	mov	r3, r0
 800771c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800771e:	7bbb      	ldrb	r3, [r7, #14]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d104      	bne.n	800772e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	2202      	movs	r2, #2
 8007728:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800772c:	e058      	b.n	80077e0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800772e:	7bbb      	ldrb	r3, [r7, #14]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d055      	beq.n	80077e0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	2204      	movs	r2, #4
 8007738:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800773c:	e050      	b.n	80077e0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	3340      	adds	r3, #64	; 0x40
 8007742:	4619      	mov	r1, r3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f85f 	bl	8007808 <GetLineCoding>
 800774a:	4603      	mov	r3, r0
 800774c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800774e:	7bbb      	ldrb	r3, [r7, #14]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d126      	bne.n	80077a2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007766:	791b      	ldrb	r3, [r3, #4]
 8007768:	429a      	cmp	r2, r3
 800776a:	d13b      	bne.n	80077e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007776:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007778:	429a      	cmp	r2, r3
 800777a:	d133      	bne.n	80077e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007786:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007788:	429a      	cmp	r2, r3
 800778a:	d12b      	bne.n	80077e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007794:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007796:	429a      	cmp	r2, r3
 8007798:	d124      	bne.n	80077e4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f9e1 	bl	8007b62 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80077a0:	e020      	b.n	80077e4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80077a2:	7bbb      	ldrb	r3, [r7, #14]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d01d      	beq.n	80077e4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2204      	movs	r2, #4
 80077ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80077b0:	e018      	b.n	80077e4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f8da 	bl	800796c <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 f969 	bl	8007a90 <CDC_ProcessReception>
      break;
 80077be:	e014      	b.n	80077ea <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80077c0:	2100      	movs	r1, #0
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f001 f877 	bl	80088b6 <USBH_ClrFeature>
 80077c8:	4603      	mov	r3, r0
 80077ca:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80077cc:	7bbb      	ldrb	r3, [r7, #14]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10a      	bne.n	80077e8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE ;
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80077da:	e005      	b.n	80077e8 <USBH_CDC_Process+0x120>

    default:
      break;
 80077dc:	bf00      	nop
 80077de:	e004      	b.n	80077ea <USBH_CDC_Process+0x122>
      break;
 80077e0:	bf00      	nop
 80077e2:	e002      	b.n	80077ea <USBH_CDC_Process+0x122>
      break;
 80077e4:	bf00      	nop
 80077e6:	e000      	b.n	80077ea <USBH_CDC_Process+0x122>
      break;
 80077e8:	bf00      	nop

  }

  return status;
 80077ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	370c      	adds	r7, #12
 8007802:	46bd      	mov	sp, r7
 8007804:	bc80      	pop	{r7}
 8007806:	4770      	bx	lr

08007808 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	22a1      	movs	r2, #161	; 0xa1
 8007816:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2221      	movs	r2, #33	; 0x21
 800781c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2207      	movs	r2, #7
 800782e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	2207      	movs	r2, #7
 8007834:	4619      	mov	r1, r3
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f001 fa18 	bl	8008c6c <USBH_CtlReq>
 800783c:	4603      	mov	r3, r0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b082      	sub	sp, #8
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
 800784e:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2221      	movs	r2, #33	; 0x21
 8007854:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2220      	movs	r2, #32
 800785a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2207      	movs	r2, #7
 800786c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	2207      	movs	r2, #7
 8007872:	4619      	mov	r1, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f001 f9f9 	bl	8008c6c <USBH_CtlReq>
 800787a:	4603      	mov	r3, r0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3708      	adds	r7, #8
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <USBH_CDC_Transmit>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Transmit(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b086      	sub	sp, #24
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007890:	2301      	movs	r3, #1
 8007892:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800789a:	69db      	ldr	r3, [r3, #28]
 800789c:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d004      	beq.n	80078b2 <USBH_CDC_Transmit+0x2e>
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80078ae:	2b03      	cmp	r3, #3
 80078b0:	d11d      	bne.n	80078ee <USBH_CDC_Transmit+0x6a>
  {
    CDC_Handle->pTxData = pbuff;
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	61da      	str	r2, [r3, #28]
    CDC_Handle->TxDataLength = length;
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	625a      	str	r2, [r3, #36]	; 0x24
    CDC_Handle->state = CDC_TRANSFER_DATA;
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	2203      	movs	r2, #3
 80078c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    Status = USBH_OK;
 80078ce:	2300      	movs	r3, #0
 80078d0:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2204      	movs	r2, #4
 80078d6:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80078e6:	2200      	movs	r2, #0
 80078e8:	4619      	mov	r1, r3
 80078ea:	f006 ff71 	bl	800e7d0 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }
  return Status;
 80078ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3718      	adds	r7, #24
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <USBH_CDC_Receive>:
* @brief  This function prepares the state before issuing the class specific commands
* @param  None
* @retval None
*/
USBH_StatusTypeDef  USBH_CDC_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007904:	2301      	movs	r3, #1
 8007906:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800790e:	69db      	ldr	r3, [r3, #28]
 8007910:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007918:	2b00      	cmp	r3, #0
 800791a:	d004      	beq.n	8007926 <USBH_CDC_Receive+0x2e>
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007922:	2b03      	cmp	r3, #3
 8007924:	d11d      	bne.n	8007962 <USBH_CDC_Receive+0x6a>
  {
    CDC_Handle->pRxData = pbuff;
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	621a      	str	r2, [r3, #32]
    CDC_Handle->RxDataLength = length;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	629a      	str	r2, [r3, #40]	; 0x28
    CDC_Handle->state = CDC_TRANSFER_DATA;
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	2203      	movs	r2, #3
 8007936:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	2203      	movs	r2, #3
 800793e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    Status = USBH_OK;
 8007942:	2300      	movs	r3, #0
 8007944:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2204      	movs	r2, #4
 800794a:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800795a:	2200      	movs	r2, #0
 800795c:	4619      	mov	r1, r3
 800795e:	f006 ff37 	bl	800e7d0 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }
  return Status;
 8007962:	7dfb      	ldrb	r3, [r7, #23]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3718      	adds	r7, #24
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af02      	add	r7, sp, #8
 8007972:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800797a:	69db      	ldr	r3, [r3, #28]
 800797c:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800797e:	2300      	movs	r3, #0
 8007980:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007988:	2b01      	cmp	r3, #1
 800798a:	d002      	beq.n	8007992 <CDC_ProcessTransmission+0x26>
 800798c:	2b02      	cmp	r3, #2
 800798e:	d023      	beq.n	80079d8 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007990:	e07a      	b.n	8007a88 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	8b12      	ldrh	r2, [r2, #24]
 800799a:	4293      	cmp	r3, r2
 800799c:	d90b      	bls.n	80079b6 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	69d9      	ldr	r1, [r3, #28]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	8b1a      	ldrh	r2, [r3, #24]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	7b5b      	ldrb	r3, [r3, #13]
 80079aa:	2001      	movs	r0, #1
 80079ac:	9000      	str	r0, [sp, #0]
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f001 fc4d 	bl	800924e <USBH_BulkSendData>
 80079b4:	e00b      	b.n	80079ce <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80079be:	b29a      	uxth	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	7b5b      	ldrb	r3, [r3, #13]
 80079c4:	2001      	movs	r0, #1
 80079c6:	9000      	str	r0, [sp, #0]
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f001 fc40 	bl	800924e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2202      	movs	r2, #2
 80079d2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80079d6:	e057      	b.n	8007a88 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	7b5b      	ldrb	r3, [r3, #13]
 80079dc:	4619      	mov	r1, r3
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f009 fab8 	bl	8010f54 <USBH_LL_GetURBState>
 80079e4:	4603      	mov	r3, r0
 80079e6:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80079e8:	7afb      	ldrb	r3, [r7, #11]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d136      	bne.n	8007a5c <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	8b12      	ldrh	r2, [r2, #24]
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d90e      	bls.n	8007a18 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	8b12      	ldrh	r2, [r2, #24]
 8007a02:	1a9a      	subs	r2, r3, r2
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	69db      	ldr	r3, [r3, #28]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	8b12      	ldrh	r2, [r2, #24]
 8007a10:	441a      	add	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	61da      	str	r2, [r3, #28]
 8007a16:	e002      	b.n	8007a1e <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d004      	beq.n	8007a30 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8007a2e:	e006      	b.n	8007a3e <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f009 f84b 	bl	8010ad4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2204      	movs	r2, #4
 8007a42:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007a52:	2200      	movs	r2, #0
 8007a54:	4619      	mov	r1, r3
 8007a56:	f006 febb 	bl	800e7d0 <osMessagePut>
      break;
 8007a5a:	e014      	b.n	8007a86 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8007a5c:	7afb      	ldrb	r3, [r7, #11]
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d111      	bne.n	8007a86 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2201      	movs	r2, #1
 8007a66:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2204      	movs	r2, #4
 8007a6e:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007a7e:	2200      	movs	r2, #0
 8007a80:	4619      	mov	r1, r3
 8007a82:	f006 fea5 	bl	800e7d0 <osMessagePut>
      break;
 8007a86:	bf00      	nop
  }
}
 8007a88:	bf00      	nop
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a9e:	69db      	ldr	r3, [r3, #28]
 8007aa0:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007aac:	2b03      	cmp	r3, #3
 8007aae:	d002      	beq.n	8007ab6 <CDC_ProcessReception+0x26>
 8007ab0:	2b04      	cmp	r3, #4
 8007ab2:	d00e      	beq.n	8007ad2 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007ab4:	e051      	b.n	8007b5a <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	6a19      	ldr	r1, [r3, #32]
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	8b5a      	ldrh	r2, [r3, #26]
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	7b1b      	ldrb	r3, [r3, #12]
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f001 fbe8 	bl	8009298 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	2204      	movs	r2, #4
 8007acc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007ad0:	e043      	b.n	8007b5a <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	7b1b      	ldrb	r3, [r3, #12]
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f009 fa3b 	bl	8010f54 <USBH_LL_GetURBState>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007ae2:	7cfb      	ldrb	r3, [r7, #19]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d137      	bne.n	8007b58 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	7b1b      	ldrb	r3, [r3, #12]
 8007aec:	4619      	mov	r1, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f009 f99e 	bl	8010e30 <USBH_LL_GetLastXferSize>
 8007af4:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d016      	beq.n	8007b2e <CDC_ProcessReception+0x9e>
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	8b5b      	ldrh	r3, [r3, #26]
 8007b04:	461a      	mov	r2, r3
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d910      	bls.n	8007b2e <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	1ad2      	subs	r2, r2, r3
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	6a1a      	ldr	r2, [r3, #32]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	441a      	add	r2, r3
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	2203      	movs	r2, #3
 8007b28:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8007b2c:	e006      	b.n	8007b3c <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f008 ffdc 	bl	8010af4 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2204      	movs	r2, #4
 8007b40:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007b50:	2200      	movs	r2, #0
 8007b52:	4619      	mov	r1, r3
 8007b54:	f006 fe3c 	bl	800e7d0 <osMessagePut>
      break;
 8007b58:	bf00      	nop
  }
}
 8007b5a:	bf00      	nop
 8007b5c:	3718      	adds	r7, #24
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007b62:	b480      	push	{r7}
 8007b64:	b083      	sub	sp, #12
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b6a:	bf00      	nop
 8007b6c:	370c      	adds	r7, #12
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bc80      	pop	{r7}
 8007b72:	4770      	bx	lr

08007b74 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007b74:	b5b0      	push	{r4, r5, r7, lr}
 8007b76:	b090      	sub	sp, #64	; 0x40
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	4613      	mov	r3, r2
 8007b80:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d101      	bne.n	8007b8c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007b88:	2302      	movs	r3, #2
 8007b8a:	e04d      	b.n	8007c28 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	79fa      	ldrb	r2, [r7, #7]
 8007b90:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f000 f847 	bl	8007c38 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d003      	beq.n	8007bd8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8007bd8:	4b15      	ldr	r3, [pc, #84]	; (8007c30 <USBH_Init+0xbc>)
 8007bda:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8007bde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007be0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8007be4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007be8:	2100      	movs	r1, #0
 8007bea:	4618      	mov	r0, r3
 8007bec:	f006 fdc7 	bl	800e77e <osMessageCreate>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8007bf8:	4b0e      	ldr	r3, [pc, #56]	; (8007c34 <USBH_Init+0xc0>)
 8007bfa:	f107 0414 	add.w	r4, r7, #20
 8007bfe:	461d      	mov	r5, r3
 8007c00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007c08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8007c0c:	f107 0314 	add.w	r3, r7, #20
 8007c10:	68f9      	ldr	r1, [r7, #12]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f006 fd53 	bl	800e6be <osThreadCreate>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f009 f855 	bl	8010cd0 <USBH_LL_Init>

  return USBH_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3740      	adds	r7, #64	; 0x40
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bdb0      	pop	{r4, r5, r7, pc}
 8007c30:	08011d3c 	.word	0x08011d3c
 8007c34:	08011d4c 	.word	0x08011d4c

08007c38 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007c40:	2300      	movs	r3, #0
 8007c42:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007c44:	2300      	movs	r3, #0
 8007c46:	60fb      	str	r3, [r7, #12]
 8007c48:	e009      	b.n	8007c5e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	33e0      	adds	r3, #224	; 0xe0
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	4413      	add	r3, r2
 8007c54:	2200      	movs	r2, #0
 8007c56:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	60fb      	str	r3, [r7, #12]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2b0e      	cmp	r3, #14
 8007c62:	d9f2      	bls.n	8007c4a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007c64:	2300      	movs	r3, #0
 8007c66:	60fb      	str	r3, [r7, #12]
 8007c68:	e009      	b.n	8007c7e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	4413      	add	r3, r2
 8007c70:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c74:	2200      	movs	r2, #0
 8007c76:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	60fb      	str	r3, [r7, #12]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c84:	d3f1      	bcc.n	8007c6a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2240      	movs	r2, #64	; 0x40
 8007caa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bc80      	pop	{r7}
 8007ccc:	4770      	bx	lr

08007cce <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b085      	sub	sp, #20
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
 8007cd6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d017      	beq.n	8007d12 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d80f      	bhi.n	8007d0c <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007cf2:	1c59      	adds	r1, r3, #1
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	33dc      	adds	r3, #220	; 0xdc
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4413      	add	r3, r2
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8007d06:	2300      	movs	r3, #0
 8007d08:	73fb      	strb	r3, [r7, #15]
 8007d0a:	e004      	b.n	8007d16 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	73fb      	strb	r3, [r7, #15]
 8007d10:	e001      	b.n	8007d16 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007d12:	2302      	movs	r3, #2
 8007d14:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3714      	adds	r7, #20
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bc80      	pop	{r7}
 8007d20:	4770      	bx	lr

08007d22 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b085      	sub	sp, #20
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 8007d38:	78fa      	ldrb	r2, [r7, #3]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d204      	bcs.n	8007d48 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	78fa      	ldrb	r2, [r7, #3]
 8007d42:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 8007d46:	e001      	b.n	8007d4c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007d48:	2302      	movs	r3, #2
 8007d4a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3714      	adds	r7, #20
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bc80      	pop	{r7}
 8007d56:	4770      	bx	lr

08007d58 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b087      	sub	sp, #28
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	4608      	mov	r0, r1
 8007d62:	4611      	mov	r1, r2
 8007d64:	461a      	mov	r2, r3
 8007d66:	4603      	mov	r3, r0
 8007d68:	70fb      	strb	r3, [r7, #3]
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	70bb      	strb	r3, [r7, #2]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007d72:	2300      	movs	r3, #0
 8007d74:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007d76:	2300      	movs	r3, #0
 8007d78:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f203 3336 	addw	r3, r3, #822	; 0x336
 8007d80:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007d82:	e025      	b.n	8007dd0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007d84:	7dfb      	ldrb	r3, [r7, #23]
 8007d86:	221a      	movs	r2, #26
 8007d88:	fb02 f303 	mul.w	r3, r2, r3
 8007d8c:	3308      	adds	r3, #8
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	4413      	add	r3, r2
 8007d92:	3302      	adds	r3, #2
 8007d94:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	795b      	ldrb	r3, [r3, #5]
 8007d9a:	78fa      	ldrb	r2, [r7, #3]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d002      	beq.n	8007da6 <USBH_FindInterface+0x4e>
 8007da0:	78fb      	ldrb	r3, [r7, #3]
 8007da2:	2bff      	cmp	r3, #255	; 0xff
 8007da4:	d111      	bne.n	8007dca <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007daa:	78ba      	ldrb	r2, [r7, #2]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d002      	beq.n	8007db6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007db0:	78bb      	ldrb	r3, [r7, #2]
 8007db2:	2bff      	cmp	r3, #255	; 0xff
 8007db4:	d109      	bne.n	8007dca <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007dba:	787a      	ldrb	r2, [r7, #1]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d002      	beq.n	8007dc6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007dc0:	787b      	ldrb	r3, [r7, #1]
 8007dc2:	2bff      	cmp	r3, #255	; 0xff
 8007dc4:	d101      	bne.n	8007dca <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007dc6:	7dfb      	ldrb	r3, [r7, #23]
 8007dc8:	e006      	b.n	8007dd8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007dca:	7dfb      	ldrb	r3, [r7, #23]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007dd0:	7dfb      	ldrb	r3, [r7, #23]
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d9d6      	bls.n	8007d84 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007dd6:	23ff      	movs	r3, #255	; 0xff
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	371c      	adds	r7, #28
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bc80      	pop	{r7}
 8007de0:	4770      	bx	lr

08007de2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b082      	sub	sp, #8
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f008 ffa8 	bl	8010d40 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007df0:	2101      	movs	r1, #1
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f009 f8c1 	bl	8010f7a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
	...

08007e04 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b088      	sub	sp, #32
 8007e08:	af04      	add	r7, sp, #16
 8007e0a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007e10:	2300      	movs	r3, #0
 8007e12:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d102      	bne.n	8007e26 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2203      	movs	r2, #3
 8007e24:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b0b      	cmp	r3, #11
 8007e2e:	f200 81e4 	bhi.w	80081fa <USBH_Process+0x3f6>
 8007e32:	a201      	add	r2, pc, #4	; (adr r2, 8007e38 <USBH_Process+0x34>)
 8007e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e38:	08007e69 	.word	0x08007e69
 8007e3c:	08007ea7 	.word	0x08007ea7
 8007e40:	08007ebb 	.word	0x08007ebb
 8007e44:	08008179 	.word	0x08008179
 8007e48:	080081fb 	.word	0x080081fb
 8007e4c:	08007f7b 	.word	0x08007f7b
 8007e50:	08008113 	.word	0x08008113
 8007e54:	08007fab 	.word	0x08007fab
 8007e58:	08007fe7 	.word	0x08007fe7
 8007e5c:	08008021 	.word	0x08008021
 8007e60:	08008069 	.word	0x08008069
 8007e64:	08008161 	.word	0x08008161
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f000 81c4 	beq.w	80081fe <USBH_Process+0x3fa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007e7c:	20c8      	movs	r0, #200	; 0xc8
 8007e7e:	f009 f8c2 	bl	8011006 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f008 ffb9 	bl	8010dfa <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	f006 fc96 	bl	800e7d0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007ea4:	e1ab      	b.n	80081fe <USBH_Process+0x3fa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	f040 81a8 	bne.w	8008202 <USBH_Process+0x3fe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->gState = HOST_DEV_ATTACHED;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	701a      	strb	r2, [r3, #0]
      }
      break;
 8007eb8:	e1a3      	b.n	8008202 <USBH_Process+0x3fe>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d005      	beq.n	8007ed0 <USBH_Process+0xcc>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007eca:	2104      	movs	r1, #4
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007ed0:	2064      	movs	r0, #100	; 0x64
 8007ed2:	f009 f898 	bl	8011006 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f008 ff68 	bl	8010dac <USBH_LL_GetSpeed>
 8007edc:	4603      	mov	r3, r0
 8007ede:	461a      	mov	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2205      	movs	r2, #5
 8007eea:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007eec:	2100      	movs	r1, #0
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f001 fa1f 	bl	8009332 <USBH_AllocPipe>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007efc:	2180      	movs	r1, #128	; 0x80
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f001 fa17 	bl	8009332 <USBH_AllocPipe>
 8007f04:	4603      	mov	r3, r0
 8007f06:	461a      	mov	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	711a      	strb	r2, [r3, #4]


      /* Open Control pipes */
      USBH_OpenPipe(phost,
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	7919      	ldrb	r1, [r3, #4]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_in,
                    0x80U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 8007f20:	b292      	uxth	r2, r2
 8007f22:	9202      	str	r2, [sp, #8]
 8007f24:	2200      	movs	r2, #0
 8007f26:	9201      	str	r2, [sp, #4]
 8007f28:	9300      	str	r3, [sp, #0]
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2280      	movs	r2, #128	; 0x80
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f001 f9d0 	bl	80092d4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost,
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	7959      	ldrb	r1, [r3, #5]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_out,
                    0x00U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 8007f48:	b292      	uxth	r2, r2
 8007f4a:	9202      	str	r2, [sp, #8]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	9201      	str	r2, [sp, #4]
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	4603      	mov	r3, r0
 8007f54:	2200      	movs	r2, #0
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f001 f9bc 	bl	80092d4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007f70:	2200      	movs	r2, #0
 8007f72:	4619      	mov	r1, r3
 8007f74:	f006 fc2c 	bl	800e7d0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f78:	e14c      	b.n	8008214 <USBH_Process+0x410>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      if (USBH_HandleEnum(phost) == USBH_OK)
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f950 	bl	8008220 <USBH_HandleEnum>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f040 813f 	bne.w	8008206 <USBH_Process+0x402>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d103      	bne.n	8007fa2 <USBH_Process+0x19e>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2208      	movs	r2, #8
 8007f9e:	701a      	strb	r2, [r3, #0]
        {
          phost->gState = HOST_INPUT;
        }

      }
      break;
 8007fa0:	e131      	b.n	8008206 <USBH_Process+0x402>
          phost->gState = HOST_INPUT;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2207      	movs	r2, #7
 8007fa6:	701a      	strb	r2, [r3, #0]
      break;
 8007fa8:	e12d      	b.n	8008206 <USBH_Process+0x402>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f000 812a 	beq.w	800820a <USBH_Process+0x406>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007fbc:	2101      	movs	r1, #1
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2208      	movs	r2, #8
 8007fc6:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2205      	movs	r2, #5
 8007fcc:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007fdc:	2200      	movs	r2, #0
 8007fde:	4619      	mov	r1, r3
 8007fe0:	f006 fbf6 	bl	800e7d0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007fe4:	e111      	b.n	800820a <USBH_Process+0x406>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fc19 	bl	8008828 <USBH_SetCfg>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d102      	bne.n	8008002 <USBH_Process+0x1fe>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2209      	movs	r2, #9
 8008000:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008016:	2200      	movs	r2, #0
 8008018:	4619      	mov	r1, r3
 800801a:	f006 fbd9 	bl	800e7d0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800801e:	e0f9      	b.n	8008214 <USBH_Process+0x410>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008026:	f003 0320 	and.w	r3, r3, #32
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00a      	beq.n	8008044 <USBH_Process+0x240>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800802e:	2101      	movs	r1, #1
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fc1c 	bl	800886e <USBH_SetFeature>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d106      	bne.n	800804a <USBH_Process+0x246>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	220a      	movs	r2, #10
 8008040:	701a      	strb	r2, [r3, #0]
 8008042:	e002      	b.n	800804a <USBH_Process+0x246>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	220a      	movs	r2, #10
 8008048:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2201      	movs	r2, #1
 800804e:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800805e:	2200      	movs	r2, #0
 8008060:	4619      	mov	r1, r3
 8008062:	f006 fbb5 	bl	800e7d0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008066:	e0d5      	b.n	8008214 <USBH_Process+0x410>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800806e:	2b00      	cmp	r3, #0
 8008070:	d040      	beq.n	80080f4 <USBH_Process+0x2f0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800807a:	2300      	movs	r3, #0
 800807c:	73fb      	strb	r3, [r7, #15]
 800807e:	e017      	b.n	80080b0 <USBH_Process+0x2ac>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008080:	7bfb      	ldrb	r3, [r7, #15]
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	33dc      	adds	r3, #220	; 0xdc
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4413      	add	r3, r2
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	791a      	ldrb	r2, [r3, #4]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 3345 	ldrb.w	r3, [r3, #837]	; 0x345
 8008094:	429a      	cmp	r2, r3
 8008096:	d108      	bne.n	80080aa <USBH_Process+0x2a6>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008098:	7bfb      	ldrb	r3, [r7, #15]
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	33dc      	adds	r3, #220	; 0xdc
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	4413      	add	r3, r2
 80080a2:	685a      	ldr	r2, [r3, #4]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80080aa:	7bfb      	ldrb	r3, [r7, #15]
 80080ac:	3301      	adds	r3, #1
 80080ae:	73fb      	strb	r3, [r7, #15]
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d9e4      	bls.n	8008080 <USBH_Process+0x27c>
          }
        }

        if (phost->pActiveClass != NULL)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d016      	beq.n	80080ee <USBH_Process+0x2ea>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	4798      	blx	r3
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d109      	bne.n	80080e6 <USBH_Process+0x2e2>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2206      	movs	r2, #6
 80080d6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080de:	2103      	movs	r1, #3
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	4798      	blx	r3
 80080e4:	e006      	b.n	80080f4 <USBH_Process+0x2f0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	220d      	movs	r2, #13
 80080ea:	701a      	strb	r2, [r3, #0]
 80080ec:	e002      	b.n	80080f4 <USBH_Process+0x2f0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	220d      	movs	r2, #13
 80080f2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2205      	movs	r2, #5
 80080f8:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008108:	2200      	movs	r2, #0
 800810a:	4619      	mov	r1, r3
 800810c:	f006 fb60 	bl	800e7d0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008110:	e080      	b.n	8008214 <USBH_Process+0x410>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00f      	beq.n	800813c <USBH_Process+0x338>
      {
        status = phost->pActiveClass->Requests(phost);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	4798      	blx	r3
 8008128:	4603      	mov	r3, r0
 800812a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800812c:	7bbb      	ldrb	r3, [r7, #14]
 800812e:	b2db      	uxtb	r3, r3
 8008130:	2b00      	cmp	r3, #0
 8008132:	d16c      	bne.n	800820e <USBH_Process+0x40a>
        {
          phost->gState = HOST_CLASS;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	220b      	movs	r2, #11
 8008138:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800813a:	e068      	b.n	800820e <USBH_Process+0x40a>
        phost->gState = HOST_ABORT_STATE;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	220d      	movs	r2, #13
 8008140:	701a      	strb	r2, [r3, #0]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2205      	movs	r2, #5
 8008146:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008156:	2200      	movs	r2, #0
 8008158:	4619      	mov	r1, r3
 800815a:	f006 fb39 	bl	800e7d0 <osMessagePut>
      break;
 800815e:	e056      	b.n	800820e <USBH_Process+0x40a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008166:	2b00      	cmp	r3, #0
 8008168:	d053      	beq.n	8008212 <USBH_Process+0x40e>
      {
        phost->pActiveClass->BgndProcess(phost);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	4798      	blx	r3
      }
      break;
 8008176:	e04c      	b.n	8008212 <USBH_Process+0x40e>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

      DeInitStateMachine(phost);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f7ff fd59 	bl	8007c38 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800818c:	2b00      	cmp	r3, #0
 800818e:	d009      	beq.n	80081a4 <USBH_Process+0x3a0>
      {
        phost->pActiveClass->DeInit(phost);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d005      	beq.n	80081ba <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081b4:	2105      	movs	r1, #5
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d107      	bne.n	80081d6 <USBH_Process+0x3d2>
      {
        phost->device.is_ReEnumerated = 0U;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f7ff fe07 	bl	8007de2 <USBH_Start>
 80081d4:	e002      	b.n	80081dc <USBH_Process+0x3d8>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f008 fdb2 	bl	8010d40 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80081f0:	2200      	movs	r2, #0
 80081f2:	4619      	mov	r1, r3
 80081f4:	f006 faec 	bl	800e7d0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80081f8:	e00c      	b.n	8008214 <USBH_Process+0x410>

    case HOST_ABORT_STATE:
    default :
      break;
 80081fa:	bf00      	nop
 80081fc:	e00a      	b.n	8008214 <USBH_Process+0x410>
      break;
 80081fe:	bf00      	nop
 8008200:	e008      	b.n	8008214 <USBH_Process+0x410>
      break;
 8008202:	bf00      	nop
 8008204:	e006      	b.n	8008214 <USBH_Process+0x410>
      break;
 8008206:	bf00      	nop
 8008208:	e004      	b.n	8008214 <USBH_Process+0x410>
    break;
 800820a:	bf00      	nop
 800820c:	e002      	b.n	8008214 <USBH_Process+0x410>
      break;
 800820e:	bf00      	nop
 8008210:	e000      	b.n	8008214 <USBH_Process+0x410>
      break;
 8008212:	bf00      	nop
  }
  return USBH_OK;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop

08008220 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b088      	sub	sp, #32
 8008224:	af04      	add	r7, sp, #16
 8008226:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008228:	2301      	movs	r3, #1
 800822a:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	785b      	ldrb	r3, [r3, #1]
 8008230:	2b07      	cmp	r3, #7
 8008232:	f200 8132 	bhi.w	800849a <USBH_HandleEnum+0x27a>
 8008236:	a201      	add	r2, pc, #4	; (adr r2, 800823c <USBH_HandleEnum+0x1c>)
 8008238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823c:	0800825d 	.word	0x0800825d
 8008240:	080082cf 	.word	0x080082cf
 8008244:	080082e7 	.word	0x080082e7
 8008248:	0800835d 	.word	0x0800835d
 800824c:	08008375 	.word	0x08008375
 8008250:	08008393 	.word	0x08008393
 8008254:	080083ff 	.word	0x080083ff
 8008258:	0800844f 	.word	0x0800844f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      if (USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800825c:	2108      	movs	r1, #8
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fa12 	bl	8008688 <USBH_Get_DevDesc>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	f040 8119 	bne.w	800849e <USBH_HandleEnum+0x27e>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 232b 	ldrb.w	r2, [r3, #811]	; 0x32b
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost,
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	7919      	ldrb	r1, [r3, #4]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8008290:	b292      	uxth	r2, r2
 8008292:	9202      	str	r2, [sp, #8]
 8008294:	2200      	movs	r2, #0
 8008296:	9201      	str	r2, [sp, #4]
 8008298:	9300      	str	r3, [sp, #0]
 800829a:	4603      	mov	r3, r0
 800829c:	2280      	movs	r2, #128	; 0x80
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f001 f818 	bl	80092d4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	7959      	ldrb	r1, [r3, #5]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 80082b8:	b292      	uxth	r2, r2
 80082ba:	9202      	str	r2, [sp, #8]
 80082bc:	2200      	movs	r2, #0
 80082be:	9201      	str	r2, [sp, #4]
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	4603      	mov	r3, r0
 80082c4:	2200      	movs	r2, #0
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f001 f804 	bl	80092d4 <USBH_OpenPipe>
      }
      break;
 80082cc:	e0e7      	b.n	800849e <USBH_HandleEnum+0x27e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      if (USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE) == USBH_OK)
 80082ce:	2112      	movs	r1, #18
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f9d9 	bl	8008688 <USBH_Get_DevDesc>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f040 80e2 	bne.w	80084a2 <USBH_HandleEnum+0x282>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2202      	movs	r2, #2
 80082e2:	705a      	strb	r2, [r3, #1]

      }
      break;
 80082e4:	e0dd      	b.n	80084a2 <USBH_HandleEnum+0x282>

    case ENUM_SET_ADDR:
      /* set address */
      if (USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80082e6:	2101      	movs	r1, #1
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fa79 	bl	80087e0 <USBH_SetAddress>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f040 80d8 	bne.w	80084a6 <USBH_HandleEnum+0x286>
      {
        USBH_Delay(2U);
 80082f6:	2002      	movs	r0, #2
 80082f8:	f008 fe85 	bl	8011006 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2203      	movs	r2, #3
 8008308:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost,
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	7919      	ldrb	r1, [r3, #4]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800831e:	b292      	uxth	r2, r2
 8008320:	9202      	str	r2, [sp, #8]
 8008322:	2200      	movs	r2, #0
 8008324:	9201      	str	r2, [sp, #4]
 8008326:	9300      	str	r3, [sp, #0]
 8008328:	4603      	mov	r3, r0
 800832a:	2280      	movs	r2, #128	; 0x80
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 ffd1 	bl	80092d4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	7959      	ldrb	r1, [r3, #5]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8008346:	b292      	uxth	r2, r2
 8008348:	9202      	str	r2, [sp, #8]
 800834a:	2200      	movs	r2, #0
 800834c:	9201      	str	r2, [sp, #4]
 800834e:	9300      	str	r3, [sp, #0]
 8008350:	4603      	mov	r3, r0
 8008352:	2200      	movs	r2, #0
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 ffbd 	bl	80092d4 <USBH_OpenPipe>
      }
      break;
 800835a:	e0a4      	b.n	80084a6 <USBH_HandleEnum+0x286>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      if (USBH_Get_CfgDesc(phost,
 800835c:	2109      	movs	r1, #9
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f9ba 	bl	80086d8 <USBH_Get_CfgDesc>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	f040 809f 	bne.w	80084aa <USBH_HandleEnum+0x28a>
                           USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2204      	movs	r2, #4
 8008370:	705a      	strb	r2, [r3, #1]
      }
      break;
 8008372:	e09a      	b.n	80084aa <USBH_HandleEnum+0x28a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      if (USBH_Get_CfgDesc(phost,
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
 800837a:	4619      	mov	r1, r3
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 f9ab 	bl	80086d8 <USBH_Get_CfgDesc>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	f040 8092 	bne.w	80084ae <USBH_HandleEnum+0x28e>
                           phost->device.CfgDesc.wTotalLength) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2205      	movs	r2, #5
 800838e:	705a      	strb	r2, [r3, #1]
      }
      break;
 8008390:	e08d      	b.n	80084ae <USBH_HandleEnum+0x28e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8008398:	2b00      	cmp	r3, #0
 800839a:	d01e      	beq.n	80083da <USBH_HandleEnum+0x1ba>
      {
        /* Check that Manufacturer String is available */

        if (USBH_Get_StringDesc(phost,
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                                phost->device.DevDesc.iManufacturer,
                                phost->device.Data,
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 80083a8:	23ff      	movs	r3, #255	; 0xff
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 f9b8 	bl	8008720 <USBH_Get_StringDesc>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d17d      	bne.n	80084b2 <USBH_HandleEnum+0x292>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2206      	movs	r2, #6
 80083ba:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2205      	movs	r2, #5
 80083c0:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80083d0:	2200      	movs	r2, #0
 80083d2:	4619      	mov	r1, r3
 80083d4:	f006 f9fc 	bl	800e7d0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80083d8:	e06b      	b.n	80084b2 <USBH_HandleEnum+0x292>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2206      	movs	r2, #6
 80083de:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2205      	movs	r2, #5
 80083e4:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80083f4:	2200      	movs	r2, #0
 80083f6:	4619      	mov	r1, r3
 80083f8:	f006 f9ea 	bl	800e7d0 <osMessagePut>
      break;
 80083fc:	e059      	b.n	80084b2 <USBH_HandleEnum+0x292>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8008404:	2b00      	cmp	r3, #0
 8008406:	d010      	beq.n	800842a <USBH_HandleEnum+0x20a>
      {
        /* Check that Product string is available */
        if (USBH_Get_StringDesc(phost,
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 1333 	ldrb.w	r1, [r3, #819]	; 0x333
                                phost->device.DevDesc.iProduct,
                                phost->device.Data,
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 8008414:	23ff      	movs	r3, #255	; 0xff
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f982 	bl	8008720 <USBH_Get_StringDesc>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d149      	bne.n	80084b6 <USBH_HandleEnum+0x296>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2207      	movs	r2, #7
 8008426:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008428:	e045      	b.n	80084b6 <USBH_HandleEnum+0x296>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2207      	movs	r2, #7
 800842e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2205      	movs	r2, #5
 8008434:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008444:	2200      	movs	r2, #0
 8008446:	4619      	mov	r1, r3
 8008448:	f006 f9c2 	bl	800e7d0 <osMessagePut>
      break;
 800844c:	e033      	b.n	80084b6 <USBH_HandleEnum+0x296>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00f      	beq.n	8008478 <USBH_HandleEnum+0x258>
      {
        /* Check that Serial number string is available */
        if (USBH_Get_StringDesc(phost,
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                phost->device.DevDesc.iSerialNumber,
                                phost->device.Data,
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 8008464:	23ff      	movs	r3, #255	; 0xff
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f95a 	bl	8008720 <USBH_Get_StringDesc>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d123      	bne.n	80084ba <USBH_HandleEnum+0x29a>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008472:	2300      	movs	r3, #0
 8008474:	73fb      	strb	r3, [r7, #15]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008476:	e020      	b.n	80084ba <USBH_HandleEnum+0x29a>
        Status = USBH_OK;
 8008478:	2300      	movs	r3, #0
 800847a:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2205      	movs	r2, #5
 8008480:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008490:	2200      	movs	r2, #0
 8008492:	4619      	mov	r1, r3
 8008494:	f006 f99c 	bl	800e7d0 <osMessagePut>
      break;
 8008498:	e00f      	b.n	80084ba <USBH_HandleEnum+0x29a>

    default:
      break;
 800849a:	bf00      	nop
 800849c:	e00e      	b.n	80084bc <USBH_HandleEnum+0x29c>
      break;
 800849e:	bf00      	nop
 80084a0:	e00c      	b.n	80084bc <USBH_HandleEnum+0x29c>
      break;
 80084a2:	bf00      	nop
 80084a4:	e00a      	b.n	80084bc <USBH_HandleEnum+0x29c>
      break;
 80084a6:	bf00      	nop
 80084a8:	e008      	b.n	80084bc <USBH_HandleEnum+0x29c>
      break;
 80084aa:	bf00      	nop
 80084ac:	e006      	b.n	80084bc <USBH_HandleEnum+0x29c>
      break;
 80084ae:	bf00      	nop
 80084b0:	e004      	b.n	80084bc <USBH_HandleEnum+0x29c>
      break;
 80084b2:	bf00      	nop
 80084b4:	e002      	b.n	80084bc <USBH_HandleEnum+0x29c>
      break;
 80084b6:	bf00      	nop
 80084b8:	e000      	b.n	80084bc <USBH_HandleEnum+0x29c>
      break;
 80084ba:	bf00      	nop
  }
  return Status;
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop

080084c8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	683a      	ldr	r2, [r7, #0]
 80084d6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80084da:	bf00      	nop
 80084dc:	370c      	adds	r7, #12
 80084de:	46bd      	mov	sp, r7
 80084e0:	bc80      	pop	{r7}
 80084e2:	4770      	bx	lr

080084e4 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084f2:	1c5a      	adds	r2, r3, #1
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f804 	bl	8008508 <USBH_HandleSof>
}
 8008500:	bf00      	nop
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	b2db      	uxtb	r3, r3
 8008516:	2b0b      	cmp	r3, #11
 8008518:	d10a      	bne.n	8008530 <USBH_HandleSof+0x28>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008520:	2b00      	cmp	r3, #0
 8008522:	d005      	beq.n	8008530 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	4798      	blx	r3
  }
}
 8008530:	bf00      	nop
 8008532:	3708      	adds	r7, #8
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800855c:	2200      	movs	r2, #0
 800855e:	4619      	mov	r1, r3
 8008560:	f006 f936 	bl	800e7d0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008564:	bf00      	nop
}
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  return;
 800857c:	bf00      	nop
}
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	bc80      	pop	{r7}
 8008584:	4770      	bx	lr

08008586 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b082      	sub	sp, #8
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80085ba:	2200      	movs	r2, #0
 80085bc:	4619      	mov	r1, r3
 80085be:	f006 f907 	bl	800e7d0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3708      	adds	r7, #8
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_connected = 0U;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.PortEnabled = 0U;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  /* Stop Host */
  USBH_LL_Stop(phost);
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f008 fbc2 	bl	8010d76 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	791b      	ldrb	r3, [r3, #4]
 80085f6:	4619      	mov	r1, r3
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 febb 	bl	8009374 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	795b      	ldrb	r3, [r3, #5]
 8008602:	4619      	mov	r1, r3
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 feb5 	bl	8009374 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2201      	movs	r2, #1
 800860e:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800861e:	2200      	movs	r2, #0
 8008620:	4619      	mov	r1, r3
 8008622:	f006 f8d5 	bl	800e7d0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 13d4 	ldr.w	r1, [r3, #980]	; 0x3d4
 800863e:	f107 030c 	add.w	r3, r7, #12
 8008642:	f04f 32ff 	mov.w	r2, #4294967295
 8008646:	4618      	mov	r0, r3
 8008648:	f006 f902 	bl	800e850 <osMessageGet>
    if (event.status == osEventMessage)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2b10      	cmp	r3, #16
 8008650:	d1f2      	bne.n	8008638 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f7ff fbd6 	bl	8007e04 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8008658:	e7ee      	b.n	8008638 <USBH_Process_OS+0x8>

0800865a <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b082      	sub	sp, #8
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2201      	movs	r2, #1
 8008666:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008676:	2200      	movs	r2, #0
 8008678:	4619      	mov	r1, r3
 800867a:	f006 f8a9 	bl	800e7d0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af02      	add	r7, sp, #8
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	460b      	mov	r3, r1
 8008692:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800869a:	78fb      	ldrb	r3, [r7, #3]
 800869c:	b29b      	uxth	r3, r3
 800869e:	9300      	str	r3, [sp, #0]
 80086a0:	4613      	mov	r3, r2
 80086a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086a6:	2100      	movs	r1, #0
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 f864 	bl	8008776 <USBH_GetDescriptor>
 80086ae:	4603      	mov	r3, r0
 80086b0:	73fb      	strb	r3, [r7, #15]
 80086b2:	7bfb      	ldrb	r3, [r7, #15]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d10a      	bne.n	80086ce <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f503 7049 	add.w	r0, r3, #804	; 0x324
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80086c4:	78fa      	ldrb	r2, [r7, #3]
 80086c6:	b292      	uxth	r2, r2
 80086c8:	4619      	mov	r1, r3
 80086ca:	f000 f918 	bl	80088fe <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80086ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3710      	adds	r7, #16
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af02      	add	r7, sp, #8
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	460b      	mov	r3, r1
 80086e2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;

#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	331c      	adds	r3, #28
 80086e8:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80086ea:	887b      	ldrh	r3, [r7, #2]
 80086ec:	9300      	str	r3, [sp, #0]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086f4:	2100      	movs	r1, #0
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f83d 	bl	8008776 <USBH_GetDescriptor>
 80086fc:	4603      	mov	r3, r0
 80086fe:	72fb      	strb	r3, [r7, #11]
 8008700:	7afb      	ldrb	r3, [r7, #11]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d107      	bne.n	8008716 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f203 3336 	addw	r3, r3, #822	; 0x336
 800870c:	887a      	ldrh	r2, [r7, #2]
 800870e:	68f9      	ldr	r1, [r7, #12]
 8008710:	4618      	mov	r0, r3
 8008712:	f000 f963 	bl	80089dc <USBH_ParseCfgDesc>
  }

  return status;
 8008716:	7afb      	ldrb	r3, [r7, #11]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b088      	sub	sp, #32
 8008724:	af02      	add	r7, sp, #8
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	607a      	str	r2, [r7, #4]
 800872a:	461a      	mov	r2, r3
 800872c:	460b      	mov	r3, r1
 800872e:	72fb      	strb	r3, [r7, #11]
 8008730:	4613      	mov	r3, r2
 8008732:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008734:	7afb      	ldrb	r3, [r7, #11]
 8008736:	b29b      	uxth	r3, r3
 8008738:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800873c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008744:	893b      	ldrh	r3, [r7, #8]
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	460b      	mov	r3, r1
 800874a:	2100      	movs	r1, #0
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f000 f812 	bl	8008776 <USBH_GetDescriptor>
 8008752:	4603      	mov	r3, r0
 8008754:	75fb      	strb	r3, [r7, #23]
 8008756:	7dfb      	ldrb	r3, [r7, #23]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d107      	bne.n	800876c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008762:	893a      	ldrh	r2, [r7, #8]
 8008764:	6879      	ldr	r1, [r7, #4]
 8008766:	4618      	mov	r0, r3
 8008768:	f000 fa34 	bl	8008bd4 <USBH_ParseStringDesc>
  }

  return status;
 800876c:	7dfb      	ldrb	r3, [r7, #23]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3718      	adds	r7, #24
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	607b      	str	r3, [r7, #4]
 8008780:	460b      	mov	r3, r1
 8008782:	72fb      	strb	r3, [r7, #11]
 8008784:	4613      	mov	r3, r2
 8008786:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	789b      	ldrb	r3, [r3, #2]
 800878c:	2b01      	cmp	r3, #1
 800878e:	d11c      	bne.n	80087ca <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008790:	7afb      	ldrb	r3, [r7, #11]
 8008792:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008796:	b2da      	uxtb	r2, r3
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2206      	movs	r2, #6
 80087a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	893a      	ldrh	r2, [r7, #8]
 80087a6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80087a8:	893b      	ldrh	r3, [r7, #8]
 80087aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80087ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087b2:	d104      	bne.n	80087be <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f240 4209 	movw	r2, #1033	; 0x409
 80087ba:	829a      	strh	r2, [r3, #20]
 80087bc:	e002      	b.n	80087c4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2200      	movs	r2, #0
 80087c2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	8b3a      	ldrh	r2, [r7, #24]
 80087c8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80087ca:	8b3b      	ldrh	r3, [r7, #24]
 80087cc:	461a      	mov	r2, r3
 80087ce:	6879      	ldr	r1, [r7, #4]
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f000 fa4b 	bl	8008c6c <USBH_CtlReq>
 80087d6:	4603      	mov	r3, r0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	460b      	mov	r3, r1
 80087ea:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	789b      	ldrb	r3, [r3, #2]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d10f      	bne.n	8008814 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2205      	movs	r2, #5
 80087fe:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008800:	78fb      	ldrb	r3, [r7, #3]
 8008802:	b29a      	uxth	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008814:	2200      	movs	r2, #0
 8008816:	2100      	movs	r1, #0
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 fa27 	bl	8008c6c <USBH_CtlReq>
 800881e:	4603      	mov	r3, r0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3708      	adds	r7, #8
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	460b      	mov	r3, r1
 8008832:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	789b      	ldrb	r3, [r3, #2]
 8008838:	2b01      	cmp	r3, #1
 800883a:	d10e      	bne.n	800885a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2209      	movs	r2, #9
 8008846:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	887a      	ldrh	r2, [r7, #2]
 800884c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800885a:	2200      	movs	r2, #0
 800885c:	2100      	movs	r1, #0
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 fa04 	bl	8008c6c <USBH_CtlReq>
 8008864:	4603      	mov	r3, r0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3708      	adds	r7, #8
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b082      	sub	sp, #8
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
 8008876:	460b      	mov	r3, r1
 8008878:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	789b      	ldrb	r3, [r3, #2]
 800887e:	2b01      	cmp	r3, #1
 8008880:	d10f      	bne.n	80088a2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2203      	movs	r2, #3
 800888c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800888e:	78fb      	ldrb	r3, [r7, #3]
 8008890:	b29a      	uxth	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80088a2:	2200      	movs	r2, #0
 80088a4:	2100      	movs	r1, #0
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 f9e0 	bl	8008c6c <USBH_CtlReq>
 80088ac:	4603      	mov	r3, r0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b082      	sub	sp, #8
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
 80088be:	460b      	mov	r3, r1
 80088c0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	789b      	ldrb	r3, [r3, #2]
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d10f      	bne.n	80088ea <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2202      	movs	r2, #2
 80088ce:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80088dc:	78fb      	ldrb	r3, [r7, #3]
 80088de:	b29a      	uxth	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80088ea:	2200      	movs	r2, #0
 80088ec:	2100      	movs	r1, #0
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f9bc 	bl	8008c6c <USBH_CtlReq>
 80088f4:	4603      	mov	r3, r0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3708      	adds	r7, #8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80088fe:	b480      	push	{r7}
 8008900:	b085      	sub	sp, #20
 8008902:	af00      	add	r7, sp, #0
 8008904:	60f8      	str	r0, [r7, #12]
 8008906:	60b9      	str	r1, [r7, #8]
 8008908:	4613      	mov	r3, r2
 800890a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	781a      	ldrb	r2, [r3, #0]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	785a      	ldrb	r2, [r3, #1]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	3302      	adds	r3, #2
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	b29a      	uxth	r2, r3
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	3303      	adds	r3, #3
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	b29b      	uxth	r3, r3
 800892c:	021b      	lsls	r3, r3, #8
 800892e:	b29b      	uxth	r3, r3
 8008930:	4313      	orrs	r3, r2
 8008932:	b29a      	uxth	r2, r3
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	791a      	ldrb	r2, [r3, #4]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	795a      	ldrb	r2, [r3, #5]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	799a      	ldrb	r2, [r3, #6]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	79da      	ldrb	r2, [r3, #7]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008958:	88fb      	ldrh	r3, [r7, #6]
 800895a:	2b08      	cmp	r3, #8
 800895c:	d939      	bls.n	80089d2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	3308      	adds	r3, #8
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	b29a      	uxth	r2, r3
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	3309      	adds	r3, #9
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	b29b      	uxth	r3, r3
 800896e:	021b      	lsls	r3, r3, #8
 8008970:	b29b      	uxth	r3, r3
 8008972:	4313      	orrs	r3, r2
 8008974:	b29a      	uxth	r2, r3
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	330a      	adds	r3, #10
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	b29a      	uxth	r2, r3
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	330b      	adds	r3, #11
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	b29b      	uxth	r3, r3
 800898a:	021b      	lsls	r3, r3, #8
 800898c:	b29b      	uxth	r3, r3
 800898e:	4313      	orrs	r3, r2
 8008990:	b29a      	uxth	r2, r3
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	330c      	adds	r3, #12
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	b29a      	uxth	r2, r3
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	330d      	adds	r3, #13
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	021b      	lsls	r3, r3, #8
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	4313      	orrs	r3, r2
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	7b9a      	ldrb	r2, [r3, #14]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	7bda      	ldrb	r2, [r3, #15]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	7c1a      	ldrb	r2, [r3, #16]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	7c5a      	ldrb	r2, [r3, #17]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	745a      	strb	r2, [r3, #17]
  }
}
 80089d2:	bf00      	nop
 80089d4:	3714      	adds	r7, #20
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bc80      	pop	{r7}
 80089da:	4770      	bx	lr

080089dc <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b08a      	sub	sp, #40	; 0x28
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	4613      	mov	r3, r2
 80089e8:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80089ee:	2300      	movs	r3, #0
 80089f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80089f4:	2300      	movs	r3, #0
 80089f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	781a      	ldrb	r2, [r3, #0]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	785a      	ldrb	r2, [r3, #1]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	3302      	adds	r3, #2
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	3303      	adds	r3, #3
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	021b      	lsls	r3, r3, #8
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	4313      	orrs	r3, r2
 8008a24:	b29a      	uxth	r2, r3
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	791a      	ldrb	r2, [r3, #4]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	795a      	ldrb	r2, [r3, #5]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	799a      	ldrb	r2, [r3, #6]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	79da      	ldrb	r2, [r3, #7]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	7a1a      	ldrb	r2, [r3, #8]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008a52:	88fb      	ldrh	r3, [r7, #6]
 8008a54:	2b09      	cmp	r3, #9
 8008a56:	d95f      	bls.n	8008b18 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008a58:	2309      	movs	r3, #9
 8008a5a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008a60:	e051      	b.n	8008b06 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008a62:	f107 0316 	add.w	r3, r7, #22
 8008a66:	4619      	mov	r1, r3
 8008a68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a6a:	f000 f8e5 	bl	8008c38 <USBH_GetNextDesc>
 8008a6e:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a72:	785b      	ldrb	r3, [r3, #1]
 8008a74:	2b04      	cmp	r3, #4
 8008a76:	d146      	bne.n	8008b06 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008a78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a7c:	221a      	movs	r2, #26
 8008a7e:	fb02 f303 	mul.w	r3, r2, r3
 8008a82:	3308      	adds	r3, #8
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	4413      	add	r3, r2
 8008a88:	3302      	adds	r3, #2
 8008a8a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008a8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a8e:	69f8      	ldr	r0, [r7, #28]
 8008a90:	f000 f846 	bl	8008b20 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008a94:	2300      	movs	r3, #0
 8008a96:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008a9e:	e022      	b.n	8008ae6 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008aa0:	f107 0316 	add.w	r3, r7, #22
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008aa8:	f000 f8c6 	bl	8008c38 <USBH_GetNextDesc>
 8008aac:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab0:	785b      	ldrb	r3, [r3, #1]
 8008ab2:	2b05      	cmp	r3, #5
 8008ab4:	d117      	bne.n	8008ae6 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008ab6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008aba:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008abe:	3201      	adds	r2, #1
 8008ac0:	00d2      	lsls	r2, r2, #3
 8008ac2:	211a      	movs	r1, #26
 8008ac4:	fb01 f303 	mul.w	r3, r1, r3
 8008ac8:	4413      	add	r3, r2
 8008aca:	3308      	adds	r3, #8
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	4413      	add	r3, r2
 8008ad0:	3304      	adds	r3, #4
 8008ad2:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008ad4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ad6:	69b8      	ldr	r0, [r7, #24]
 8008ad8:	f000 f850 	bl	8008b7c <USBH_ParseEPDesc>
            ep_ix++;
 8008adc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	791b      	ldrb	r3, [r3, #4]
 8008aea:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d204      	bcs.n	8008afc <USBH_ParseCfgDesc+0x120>
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	885a      	ldrh	r2, [r3, #2]
 8008af6:	8afb      	ldrh	r3, [r7, #22]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d8d1      	bhi.n	8008aa0 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008afc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b00:	3301      	adds	r3, #1
 8008b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008b06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d804      	bhi.n	8008b18 <USBH_ParseCfgDesc+0x13c>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	885a      	ldrh	r2, [r3, #2]
 8008b12:	8afb      	ldrh	r3, [r7, #22]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d8a4      	bhi.n	8008a62 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008b18:	bf00      	nop
 8008b1a:	3728      	adds	r7, #40	; 0x28
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	781a      	ldrb	r2, [r3, #0]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	785a      	ldrb	r2, [r3, #1]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	789a      	ldrb	r2, [r3, #2]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	78da      	ldrb	r2, [r3, #3]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	791a      	ldrb	r2, [r3, #4]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	795a      	ldrb	r2, [r3, #5]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	799a      	ldrb	r2, [r3, #6]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	79da      	ldrb	r2, [r3, #7]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	7a1a      	ldrb	r2, [r3, #8]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	721a      	strb	r2, [r3, #8]
}
 8008b72:	bf00      	nop
 8008b74:	370c      	adds	r7, #12
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bc80      	pop	{r7}
 8008b7a:	4770      	bx	lr

08008b7c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	781a      	ldrb	r2, [r3, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	785a      	ldrb	r2, [r3, #1]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	789a      	ldrb	r2, [r3, #2]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	78da      	ldrb	r2, [r3, #3]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	3304      	adds	r3, #4
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	3305      	adds	r3, #5
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	021b      	lsls	r3, r3, #8
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	799a      	ldrb	r2, [r3, #6]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	719a      	strb	r2, [r3, #6]
}
 8008bca:	bf00      	nop
 8008bcc:	370c      	adds	r7, #12
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bc80      	pop	{r7}
 8008bd2:	4770      	bx	lr

08008bd4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b087      	sub	sp, #28
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	4613      	mov	r3, r2
 8008be0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	3301      	adds	r3, #1
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	2b03      	cmp	r3, #3
 8008bea:	d120      	bne.n	8008c2e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	1e9a      	subs	r2, r3, #2
 8008bf2:	88fb      	ldrh	r3, [r7, #6]
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	bf28      	it	cs
 8008bf8:	4613      	movcs	r3, r2
 8008bfa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	3302      	adds	r3, #2
 8008c00:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008c02:	2300      	movs	r3, #0
 8008c04:	82fb      	strh	r3, [r7, #22]
 8008c06:	e00b      	b.n	8008c20 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008c08:	8afb      	ldrh	r3, [r7, #22]
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	781a      	ldrb	r2, [r3, #0]
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	3301      	adds	r3, #1
 8008c18:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008c1a:	8afb      	ldrh	r3, [r7, #22]
 8008c1c:	3302      	adds	r3, #2
 8008c1e:	82fb      	strh	r3, [r7, #22]
 8008c20:	8afa      	ldrh	r2, [r7, #22]
 8008c22:	8abb      	ldrh	r3, [r7, #20]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d3ef      	bcc.n	8008c08 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	701a      	strb	r2, [r3, #0]
  }
}
 8008c2e:	bf00      	nop
 8008c30:	371c      	adds	r7, #28
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bc80      	pop	{r7}
 8008c36:	4770      	bx	lr

08008c38 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	881a      	ldrh	r2, [r3, #0]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	4413      	add	r3, r2
 8008c4e:	b29a      	uxth	r2, r3
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008c60:	68fb      	ldr	r3, [r7, #12]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3714      	adds	r7, #20
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bc80      	pop	{r7}
 8008c6a:	4770      	bx	lr

08008c6c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b086      	sub	sp, #24
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	4613      	mov	r3, r2
 8008c78:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	789b      	ldrb	r3, [r3, #2]
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d002      	beq.n	8008c8c <USBH_CtlReq+0x20>
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d01d      	beq.n	8008cc6 <USBH_CtlReq+0x5a>
        }
      }
      break;

    default:
      break;
 8008c8a:	e042      	b.n	8008d12 <USBH_CtlReq+0xa6>
      phost->Control.buff = buff;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	68ba      	ldr	r2, [r7, #8]
 8008c90:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	88fa      	ldrh	r2, [r7, #6]
 8008c96:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2202      	movs	r2, #2
 8008ca2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2203      	movs	r2, #3
 8008cac:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	f005 fd86 	bl	800e7d0 <osMessagePut>
      break;
 8008cc4:	e025      	b.n	8008d12 <USBH_CtlReq+0xa6>
      status = USBH_HandleControl(phost);
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f000 f828 	bl	8008d1c <USBH_HandleControl>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8008cd0:	7dfb      	ldrb	r3, [r7, #23]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d108      	bne.n	8008ce8 <USBH_CtlReq+0x7c>
        phost->RequestState = CMD_SEND;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	75fb      	strb	r3, [r7, #23]
      break;
 8008ce6:	e013      	b.n	8008d10 <USBH_CtlReq+0xa4>
      else if (status == USBH_NOT_SUPPORTED)
 8008ce8:	7dfb      	ldrb	r3, [r7, #23]
 8008cea:	2b03      	cmp	r3, #3
 8008cec:	d108      	bne.n	8008d00 <USBH_CtlReq+0x94>
        phost->RequestState = CMD_SEND;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	75fb      	strb	r3, [r7, #23]
      break;
 8008cfe:	e007      	b.n	8008d10 <USBH_CtlReq+0xa4>
        if (status == USBH_FAIL)
 8008d00:	7dfb      	ldrb	r3, [r7, #23]
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	d104      	bne.n	8008d10 <USBH_CtlReq+0xa4>
          phost->RequestState = CMD_SEND;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2201      	movs	r2, #1
 8008d0a:	709a      	strb	r2, [r3, #2]
          status = USBH_FAIL;
 8008d0c:	2302      	movs	r3, #2
 8008d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8008d10:	bf00      	nop
  }
  return status;
 8008d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3718      	adds	r7, #24
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b086      	sub	sp, #24
 8008d20:	af02      	add	r7, sp, #8
 8008d22:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008d24:	2301      	movs	r3, #1
 8008d26:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	7e1b      	ldrb	r3, [r3, #24]
 8008d30:	3b01      	subs	r3, #1
 8008d32:	2b0a      	cmp	r3, #10
 8008d34:	f200 821d 	bhi.w	8009172 <USBH_HandleControl+0x456>
 8008d38:	a201      	add	r2, pc, #4	; (adr r2, 8008d40 <USBH_HandleControl+0x24>)
 8008d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d3e:	bf00      	nop
 8008d40:	08008d6d 	.word	0x08008d6d
 8008d44:	08008d87 	.word	0x08008d87
 8008d48:	08008e29 	.word	0x08008e29
 8008d4c:	08008e4f 	.word	0x08008e4f
 8008d50:	08008edb 	.word	0x08008edb
 8008d54:	08008f05 	.word	0x08008f05
 8008d58:	08008fc7 	.word	0x08008fc7
 8008d5c:	08008fe9 	.word	0x08008fe9
 8008d60:	0800907b 	.word	0x0800907b
 8008d64:	080090a1 	.word	0x080090a1
 8008d68:	08009133 	.word	0x08009133
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f103 0110 	add.w	r1, r3, #16
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	795b      	ldrb	r3, [r3, #5]
 8008d76:	461a      	mov	r2, r3
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fa0b 	bl	8009194 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2202      	movs	r2, #2
 8008d82:	761a      	strb	r2, [r3, #24]
      break;
 8008d84:	e200      	b.n	8009188 <USBH_HandleControl+0x46c>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	795b      	ldrb	r3, [r3, #5]
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f008 f8e1 	bl	8010f54 <USBH_LL_GetURBState>
 8008d92:	4603      	mov	r3, r0
 8008d94:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008d96:	7bbb      	ldrb	r3, [r7, #14]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d12c      	bne.n	8008df6 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	7c1b      	ldrb	r3, [r3, #16]
 8008da0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008da4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	8adb      	ldrh	r3, [r3, #22]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d00a      	beq.n	8008dc4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008dae:	7b7b      	ldrb	r3, [r7, #13]
 8008db0:	2b80      	cmp	r3, #128	; 0x80
 8008db2:	d103      	bne.n	8008dbc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2203      	movs	r2, #3
 8008db8:	761a      	strb	r2, [r3, #24]
 8008dba:	e00d      	b.n	8008dd8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2205      	movs	r2, #5
 8008dc0:	761a      	strb	r2, [r3, #24]
 8008dc2:	e009      	b.n	8008dd8 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8008dc4:	7b7b      	ldrb	r3, [r7, #13]
 8008dc6:	2b80      	cmp	r3, #128	; 0x80
 8008dc8:	d103      	bne.n	8008dd2 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2209      	movs	r2, #9
 8008dce:	761a      	strb	r2, [r3, #24]
 8008dd0:	e002      	b.n	8008dd8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2207      	movs	r2, #7
 8008dd6:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2203      	movs	r2, #3
 8008ddc:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008dec:	2200      	movs	r2, #0
 8008dee:	4619      	mov	r1, r3
 8008df0:	f005 fcee 	bl	800e7d0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008df4:	e1bf      	b.n	8009176 <USBH_HandleControl+0x45a>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008df6:	7bbb      	ldrb	r3, [r7, #14]
 8008df8:	2b04      	cmp	r3, #4
 8008dfa:	d003      	beq.n	8008e04 <USBH_HandleControl+0xe8>
 8008dfc:	7bbb      	ldrb	r3, [r7, #14]
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	f040 81b9 	bne.w	8009176 <USBH_HandleControl+0x45a>
          phost->Control.state = CTRL_ERROR;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	220b      	movs	r2, #11
 8008e08:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2203      	movs	r2, #3
 8008e0e:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008e1e:	2200      	movs	r2, #0
 8008e20:	4619      	mov	r1, r3
 8008e22:	f005 fcd5 	bl	800e7d0 <osMessagePut>
      break;
 8008e26:	e1a6      	b.n	8009176 <USBH_HandleControl+0x45a>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e2e:	b29a      	uxth	r2, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6899      	ldr	r1, [r3, #8]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	899a      	ldrh	r2, [r3, #12]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	791b      	ldrb	r3, [r3, #4]
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f9e6 	bl	8009212 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2204      	movs	r2, #4
 8008e4a:	761a      	strb	r2, [r3, #24]
      break;
 8008e4c:	e19c      	b.n	8009188 <USBH_HandleControl+0x46c>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	791b      	ldrb	r3, [r3, #4]
 8008e52:	4619      	mov	r1, r3
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f008 f87d 	bl	8010f54 <USBH_LL_GetURBState>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008e5e:	7bbb      	ldrb	r3, [r7, #14]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d110      	bne.n	8008e86 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2209      	movs	r2, #9
 8008e68:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2203      	movs	r2, #3
 8008e6e:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008e7e:	2200      	movs	r2, #0
 8008e80:	4619      	mov	r1, r3
 8008e82:	f005 fca5 	bl	800e7d0 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008e86:	7bbb      	ldrb	r3, [r7, #14]
 8008e88:	2b05      	cmp	r3, #5
 8008e8a:	d110      	bne.n	8008eae <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2203      	movs	r2, #3
 8008e94:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	f005 fc92 	bl	800e7d0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008eac:	e165      	b.n	800917a <USBH_HandleControl+0x45e>
        if (URB_Status == USBH_URB_ERROR)
 8008eae:	7bbb      	ldrb	r3, [r7, #14]
 8008eb0:	2b04      	cmp	r3, #4
 8008eb2:	f040 8162 	bne.w	800917a <USBH_HandleControl+0x45e>
          phost->Control.state = CTRL_ERROR;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	220b      	movs	r2, #11
 8008eba:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2203      	movs	r2, #3
 8008ec0:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	f005 fc7c 	bl	800e7d0 <osMessagePut>
      break;
 8008ed8:	e14f      	b.n	800917a <USBH_HandleControl+0x45e>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6899      	ldr	r1, [r3, #8]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	899a      	ldrh	r2, [r3, #12]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	795b      	ldrb	r3, [r3, #5]
 8008ee6:	2001      	movs	r0, #1
 8008ee8:	9000      	str	r0, [sp, #0]
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 f96c 	bl	80091c8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2206      	movs	r2, #6
 8008f00:	761a      	strb	r2, [r3, #24]
      break;
 8008f02:	e141      	b.n	8009188 <USBH_HandleControl+0x46c>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	795b      	ldrb	r3, [r3, #5]
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f008 f822 	bl	8010f54 <USBH_LL_GetURBState>
 8008f10:	4603      	mov	r3, r0
 8008f12:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008f14:	7bbb      	ldrb	r3, [r7, #14]
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d111      	bne.n	8008f3e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2207      	movs	r2, #7
 8008f1e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2203      	movs	r2, #3
 8008f24:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008f34:	2200      	movs	r2, #0
 8008f36:	4619      	mov	r1, r3
 8008f38:	f005 fc4a 	bl	800e7d0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008f3c:	e11f      	b.n	800917e <USBH_HandleControl+0x462>
      else if (URB_Status == USBH_URB_STALL)
 8008f3e:	7bbb      	ldrb	r3, [r7, #14]
 8008f40:	2b05      	cmp	r3, #5
 8008f42:	d113      	bne.n	8008f6c <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	220c      	movs	r2, #12
 8008f48:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2203      	movs	r2, #3
 8008f52:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008f62:	2200      	movs	r2, #0
 8008f64:	4619      	mov	r1, r3
 8008f66:	f005 fc33 	bl	800e7d0 <osMessagePut>
      break;
 8008f6a:	e108      	b.n	800917e <USBH_HandleControl+0x462>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008f6c:	7bbb      	ldrb	r3, [r7, #14]
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	d111      	bne.n	8008f96 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2205      	movs	r2, #5
 8008f76:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2203      	movs	r2, #3
 8008f7c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	4619      	mov	r1, r3
 8008f90:	f005 fc1e 	bl	800e7d0 <osMessagePut>
      break;
 8008f94:	e0f3      	b.n	800917e <USBH_HandleControl+0x462>
        if (URB_Status == USBH_URB_ERROR)
 8008f96:	7bbb      	ldrb	r3, [r7, #14]
 8008f98:	2b04      	cmp	r3, #4
 8008f9a:	f040 80f0 	bne.w	800917e <USBH_HandleControl+0x462>
          phost->Control.state = CTRL_ERROR;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	220b      	movs	r2, #11
 8008fa2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008fa4:	2302      	movs	r3, #2
 8008fa6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2203      	movs	r2, #3
 8008fac:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	f005 fc06 	bl	800e7d0 <osMessagePut>
      break;
 8008fc4:	e0db      	b.n	800917e <USBH_HandleControl+0x462>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	791b      	ldrb	r3, [r3, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	2100      	movs	r1, #0
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 f91f 	bl	8009212 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2208      	movs	r2, #8
 8008fe4:	761a      	strb	r2, [r3, #24]

      break;
 8008fe6:	e0cf      	b.n	8009188 <USBH_HandleControl+0x46c>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	791b      	ldrb	r3, [r3, #4]
 8008fec:	4619      	mov	r1, r3
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f007 ffb0 	bl	8010f54 <USBH_LL_GetURBState>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008ff8:	7bbb      	ldrb	r3, [r7, #14]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d113      	bne.n	8009026 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	220d      	movs	r2, #13
 8009002:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009004:	2300      	movs	r3, #0
 8009006:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2203      	movs	r2, #3
 800900c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800901c:	2200      	movs	r2, #0
 800901e:	4619      	mov	r1, r3
 8009020:	f005 fbd6 	bl	800e7d0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009024:	e0ad      	b.n	8009182 <USBH_HandleControl+0x466>
      else if (URB_Status == USBH_URB_ERROR)
 8009026:	7bbb      	ldrb	r3, [r7, #14]
 8009028:	2b04      	cmp	r3, #4
 800902a:	d111      	bne.n	8009050 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	220b      	movs	r2, #11
 8009030:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2203      	movs	r2, #3
 8009036:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009046:	2200      	movs	r2, #0
 8009048:	4619      	mov	r1, r3
 800904a:	f005 fbc1 	bl	800e7d0 <osMessagePut>
      break;
 800904e:	e098      	b.n	8009182 <USBH_HandleControl+0x466>
        if (URB_Status == USBH_URB_STALL)
 8009050:	7bbb      	ldrb	r3, [r7, #14]
 8009052:	2b05      	cmp	r3, #5
 8009054:	f040 8095 	bne.w	8009182 <USBH_HandleControl+0x466>
          status = USBH_NOT_SUPPORTED;
 8009058:	2303      	movs	r3, #3
 800905a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2203      	movs	r2, #3
 8009060:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009070:	2200      	movs	r2, #0
 8009072:	4619      	mov	r1, r3
 8009074:	f005 fbac 	bl	800e7d0 <osMessagePut>
      break;
 8009078:	e083      	b.n	8009182 <USBH_HandleControl+0x466>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	795b      	ldrb	r3, [r3, #5]
 800907e:	2201      	movs	r2, #1
 8009080:	9200      	str	r2, [sp, #0]
 8009082:	2200      	movs	r2, #0
 8009084:	2100      	movs	r1, #0
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 f89e 	bl	80091c8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009092:	b29a      	uxth	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	220a      	movs	r2, #10
 800909c:	761a      	strb	r2, [r3, #24]
      break;
 800909e:	e073      	b.n	8009188 <USBH_HandleControl+0x46c>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	795b      	ldrb	r3, [r3, #5]
 80090a4:	4619      	mov	r1, r3
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f007 ff54 	bl	8010f54 <USBH_LL_GetURBState>
 80090ac:	4603      	mov	r3, r0
 80090ae:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80090b0:	7bbb      	ldrb	r3, [r7, #14]
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d113      	bne.n	80090de <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 80090b6:	2300      	movs	r3, #0
 80090b8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	220d      	movs	r2, #13
 80090be:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2203      	movs	r2, #3
 80090c4:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80090d4:	2200      	movs	r2, #0
 80090d6:	4619      	mov	r1, r3
 80090d8:	f005 fb7a 	bl	800e7d0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80090dc:	e053      	b.n	8009186 <USBH_HandleControl+0x46a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80090de:	7bbb      	ldrb	r3, [r7, #14]
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	d111      	bne.n	8009108 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2209      	movs	r2, #9
 80090e8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2203      	movs	r2, #3
 80090ee:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80090fe:	2200      	movs	r2, #0
 8009100:	4619      	mov	r1, r3
 8009102:	f005 fb65 	bl	800e7d0 <osMessagePut>
      break;
 8009106:	e03e      	b.n	8009186 <USBH_HandleControl+0x46a>
        if (URB_Status == USBH_URB_ERROR)
 8009108:	7bbb      	ldrb	r3, [r7, #14]
 800910a:	2b04      	cmp	r3, #4
 800910c:	d13b      	bne.n	8009186 <USBH_HandleControl+0x46a>
          phost->Control.state = CTRL_ERROR;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	220b      	movs	r2, #11
 8009112:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2203      	movs	r2, #3
 8009118:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009128:	2200      	movs	r2, #0
 800912a:	4619      	mov	r1, r3
 800912c:	f005 fb50 	bl	800e7d0 <osMessagePut>
      break;
 8009130:	e029      	b.n	8009186 <USBH_HandleControl+0x46a>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	7e5b      	ldrb	r3, [r3, #25]
 8009136:	3301      	adds	r3, #1
 8009138:	b2da      	uxtb	r2, r3
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	765a      	strb	r2, [r3, #25]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	7e5b      	ldrb	r3, [r3, #25]
 8009142:	2b02      	cmp	r3, #2
 8009144:	d806      	bhi.n	8009154 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2201      	movs	r2, #1
 800914a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	709a      	strb	r2, [r3, #2]
        phost->Control.errorcount = 0U;
        USBH_ErrLog("Control error: Device not responding");
        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009152:	e019      	b.n	8009188 <USBH_HandleControl+0x46c>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800915a:	2106      	movs	r1, #6
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	765a      	strb	r2, [r3, #25]
        phost->gState = HOST_IDLE;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800916c:	2302      	movs	r3, #2
 800916e:	73fb      	strb	r3, [r7, #15]
      break;
 8009170:	e00a      	b.n	8009188 <USBH_HandleControl+0x46c>

    default:
      break;
 8009172:	bf00      	nop
 8009174:	e008      	b.n	8009188 <USBH_HandleControl+0x46c>
      break;
 8009176:	bf00      	nop
 8009178:	e006      	b.n	8009188 <USBH_HandleControl+0x46c>
      break;
 800917a:	bf00      	nop
 800917c:	e004      	b.n	8009188 <USBH_HandleControl+0x46c>
      break;
 800917e:	bf00      	nop
 8009180:	e002      	b.n	8009188 <USBH_HandleControl+0x46c>
      break;
 8009182:	bf00      	nop
 8009184:	e000      	b.n	8009188 <USBH_HandleControl+0x46c>
      break;
 8009186:	bf00      	nop
  }

  return status;
 8009188:	7bfb      	ldrb	r3, [r7, #15]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3710      	adds	r7, #16
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop

08009194 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b088      	sub	sp, #32
 8009198:	af04      	add	r7, sp, #16
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	4613      	mov	r3, r2
 80091a0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80091a2:	79f9      	ldrb	r1, [r7, #7]
 80091a4:	2300      	movs	r3, #0
 80091a6:	9303      	str	r3, [sp, #12]
 80091a8:	2308      	movs	r3, #8
 80091aa:	9302      	str	r3, [sp, #8]
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	9301      	str	r3, [sp, #4]
 80091b0:	2300      	movs	r3, #0
 80091b2:	9300      	str	r3, [sp, #0]
 80091b4:	2300      	movs	r3, #0
 80091b6:	2200      	movs	r2, #0
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f007 fe9a 	bl	8010ef2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b088      	sub	sp, #32
 80091cc:	af04      	add	r7, sp, #16
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	4611      	mov	r1, r2
 80091d4:	461a      	mov	r2, r3
 80091d6:	460b      	mov	r3, r1
 80091d8:	80fb      	strh	r3, [r7, #6]
 80091da:	4613      	mov	r3, r2
 80091dc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d001      	beq.n	80091ec <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80091e8:	2300      	movs	r3, #0
 80091ea:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80091ec:	7979      	ldrb	r1, [r7, #5]
 80091ee:	7e3b      	ldrb	r3, [r7, #24]
 80091f0:	9303      	str	r3, [sp, #12]
 80091f2:	88fb      	ldrh	r3, [r7, #6]
 80091f4:	9302      	str	r3, [sp, #8]
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	9301      	str	r3, [sp, #4]
 80091fa:	2301      	movs	r3, #1
 80091fc:	9300      	str	r3, [sp, #0]
 80091fe:	2300      	movs	r3, #0
 8009200:	2200      	movs	r2, #0
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f007 fe75 	bl	8010ef2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b088      	sub	sp, #32
 8009216:	af04      	add	r7, sp, #16
 8009218:	60f8      	str	r0, [r7, #12]
 800921a:	60b9      	str	r1, [r7, #8]
 800921c:	4611      	mov	r1, r2
 800921e:	461a      	mov	r2, r3
 8009220:	460b      	mov	r3, r1
 8009222:	80fb      	strh	r3, [r7, #6]
 8009224:	4613      	mov	r3, r2
 8009226:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009228:	7979      	ldrb	r1, [r7, #5]
 800922a:	2300      	movs	r3, #0
 800922c:	9303      	str	r3, [sp, #12]
 800922e:	88fb      	ldrh	r3, [r7, #6]
 8009230:	9302      	str	r3, [sp, #8]
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	9301      	str	r3, [sp, #4]
 8009236:	2301      	movs	r3, #1
 8009238:	9300      	str	r3, [sp, #0]
 800923a:	2300      	movs	r3, #0
 800923c:	2201      	movs	r2, #1
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f007 fe57 	bl	8010ef2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009244:	2300      	movs	r3, #0

}
 8009246:	4618      	mov	r0, r3
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b088      	sub	sp, #32
 8009252:	af04      	add	r7, sp, #16
 8009254:	60f8      	str	r0, [r7, #12]
 8009256:	60b9      	str	r1, [r7, #8]
 8009258:	4611      	mov	r1, r2
 800925a:	461a      	mov	r2, r3
 800925c:	460b      	mov	r3, r1
 800925e:	80fb      	strh	r3, [r7, #6]
 8009260:	4613      	mov	r3, r2
 8009262:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800926a:	2b00      	cmp	r3, #0
 800926c:	d001      	beq.n	8009272 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800926e:	2300      	movs	r3, #0
 8009270:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009272:	7979      	ldrb	r1, [r7, #5]
 8009274:	7e3b      	ldrb	r3, [r7, #24]
 8009276:	9303      	str	r3, [sp, #12]
 8009278:	88fb      	ldrh	r3, [r7, #6]
 800927a:	9302      	str	r3, [sp, #8]
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	9301      	str	r3, [sp, #4]
 8009280:	2301      	movs	r3, #1
 8009282:	9300      	str	r3, [sp, #0]
 8009284:	2302      	movs	r3, #2
 8009286:	2200      	movs	r2, #0
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f007 fe32 	bl	8010ef2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3710      	adds	r7, #16
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b088      	sub	sp, #32
 800929c:	af04      	add	r7, sp, #16
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	4611      	mov	r1, r2
 80092a4:	461a      	mov	r2, r3
 80092a6:	460b      	mov	r3, r1
 80092a8:	80fb      	strh	r3, [r7, #6]
 80092aa:	4613      	mov	r3, r2
 80092ac:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80092ae:	7979      	ldrb	r1, [r7, #5]
 80092b0:	2300      	movs	r3, #0
 80092b2:	9303      	str	r3, [sp, #12]
 80092b4:	88fb      	ldrh	r3, [r7, #6]
 80092b6:	9302      	str	r3, [sp, #8]
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	9301      	str	r3, [sp, #4]
 80092bc:	2301      	movs	r3, #1
 80092be:	9300      	str	r3, [sp, #0]
 80092c0:	2302      	movs	r3, #2
 80092c2:	2201      	movs	r2, #1
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f007 fe14 	bl	8010ef2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3710      	adds	r7, #16
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b086      	sub	sp, #24
 80092d8:	af04      	add	r7, sp, #16
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	4608      	mov	r0, r1
 80092de:	4611      	mov	r1, r2
 80092e0:	461a      	mov	r2, r3
 80092e2:	4603      	mov	r3, r0
 80092e4:	70fb      	strb	r3, [r7, #3]
 80092e6:	460b      	mov	r3, r1
 80092e8:	70bb      	strb	r3, [r7, #2]
 80092ea:	4613      	mov	r3, r2
 80092ec:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80092ee:	7878      	ldrb	r0, [r7, #1]
 80092f0:	78ba      	ldrb	r2, [r7, #2]
 80092f2:	78f9      	ldrb	r1, [r7, #3]
 80092f4:	8b3b      	ldrh	r3, [r7, #24]
 80092f6:	9302      	str	r3, [sp, #8]
 80092f8:	7d3b      	ldrb	r3, [r7, #20]
 80092fa:	9301      	str	r3, [sp, #4]
 80092fc:	7c3b      	ldrb	r3, [r7, #16]
 80092fe:	9300      	str	r3, [sp, #0]
 8009300:	4603      	mov	r3, r0
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f007 fda7 	bl	8010e56 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3708      	adds	r7, #8
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b082      	sub	sp, #8
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	460b      	mov	r3, r1
 800931c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800931e:	78fb      	ldrb	r3, [r7, #3]
 8009320:	4619      	mov	r1, r3
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f007 fdc6 	bl	8010eb4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b084      	sub	sp, #16
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
 800933a:	460b      	mov	r3, r1
 800933c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f835 	bl	80093ae <USBH_GetFreePipe>
 8009344:	4603      	mov	r3, r0
 8009346:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009348:	89fb      	ldrh	r3, [r7, #14]
 800934a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800934e:	4293      	cmp	r3, r2
 8009350:	d00a      	beq.n	8009368 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8009352:	78fa      	ldrb	r2, [r7, #3]
 8009354:	89fb      	ldrh	r3, [r7, #14]
 8009356:	f003 030f 	and.w	r3, r3, #15
 800935a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800935e:	6879      	ldr	r1, [r7, #4]
 8009360:	33e0      	adds	r3, #224	; 0xe0
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	440b      	add	r3, r1
 8009366:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009368:	89fb      	ldrh	r3, [r7, #14]
 800936a:	b2db      	uxtb	r3, r3
}
 800936c:	4618      	mov	r0, r3
 800936e:	3710      	adds	r7, #16
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	460b      	mov	r3, r1
 800937e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009380:	78fb      	ldrb	r3, [r7, #3]
 8009382:	2b0a      	cmp	r3, #10
 8009384:	d80d      	bhi.n	80093a2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009386:	78fb      	ldrb	r3, [r7, #3]
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	33e0      	adds	r3, #224	; 0xe0
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4413      	add	r3, r2
 8009390:	685a      	ldr	r2, [r3, #4]
 8009392:	78fb      	ldrb	r3, [r7, #3]
 8009394:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009398:	6879      	ldr	r1, [r7, #4]
 800939a:	33e0      	adds	r3, #224	; 0xe0
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	440b      	add	r3, r1
 80093a0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80093a2:	2300      	movs	r3, #0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bc80      	pop	{r7}
 80093ac:	4770      	bx	lr

080093ae <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80093ae:	b480      	push	{r7}
 80093b0:	b085      	sub	sp, #20
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80093b6:	2300      	movs	r3, #0
 80093b8:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80093ba:	2300      	movs	r3, #0
 80093bc:	73fb      	strb	r3, [r7, #15]
 80093be:	e00f      	b.n	80093e0 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80093c0:	7bfb      	ldrb	r3, [r7, #15]
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	33e0      	adds	r3, #224	; 0xe0
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	4413      	add	r3, r2
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d102      	bne.n	80093da <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80093d4:	7bfb      	ldrb	r3, [r7, #15]
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	e007      	b.n	80093ea <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80093da:	7bfb      	ldrb	r3, [r7, #15]
 80093dc:	3301      	adds	r3, #1
 80093de:	73fb      	strb	r3, [r7, #15]
 80093e0:	7bfb      	ldrb	r3, [r7, #15]
 80093e2:	2b0a      	cmp	r3, #10
 80093e4:	d9ec      	bls.n	80093c0 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80093e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3714      	adds	r7, #20
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bc80      	pop	{r7}
 80093f2:	4770      	bx	lr

080093f4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	4603      	mov	r3, r0
 80093fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80093fe:	79fb      	ldrb	r3, [r7, #7]
 8009400:	4a08      	ldr	r2, [pc, #32]	; (8009424 <disk_status+0x30>)
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	4413      	add	r3, r2
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	79fa      	ldrb	r2, [r7, #7]
 800940c:	4905      	ldr	r1, [pc, #20]	; (8009424 <disk_status+0x30>)
 800940e:	440a      	add	r2, r1
 8009410:	7d12      	ldrb	r2, [r2, #20]
 8009412:	4610      	mov	r0, r2
 8009414:	4798      	blx	r3
 8009416:	4603      	mov	r3, r0
 8009418:	73fb      	strb	r3, [r7, #15]
  return stat;
 800941a:	7bfb      	ldrb	r3, [r7, #15]
}
 800941c:	4618      	mov	r0, r3
 800941e:	3710      	adds	r7, #16
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}
 8009424:	200011a0 	.word	0x200011a0

08009428 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	4603      	mov	r3, r0
 8009430:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009432:	2300      	movs	r3, #0
 8009434:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009436:	79fb      	ldrb	r3, [r7, #7]
 8009438:	4a0d      	ldr	r2, [pc, #52]	; (8009470 <disk_initialize+0x48>)
 800943a:	5cd3      	ldrb	r3, [r2, r3]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d111      	bne.n	8009464 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009440:	79fb      	ldrb	r3, [r7, #7]
 8009442:	4a0b      	ldr	r2, [pc, #44]	; (8009470 <disk_initialize+0x48>)
 8009444:	2101      	movs	r1, #1
 8009446:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009448:	79fb      	ldrb	r3, [r7, #7]
 800944a:	4a09      	ldr	r2, [pc, #36]	; (8009470 <disk_initialize+0x48>)
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	4413      	add	r3, r2
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	79fa      	ldrb	r2, [r7, #7]
 8009456:	4906      	ldr	r1, [pc, #24]	; (8009470 <disk_initialize+0x48>)
 8009458:	440a      	add	r2, r1
 800945a:	7d12      	ldrb	r2, [r2, #20]
 800945c:	4610      	mov	r0, r2
 800945e:	4798      	blx	r3
 8009460:	4603      	mov	r3, r0
 8009462:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009464:	7bfb      	ldrb	r3, [r7, #15]
}
 8009466:	4618      	mov	r0, r3
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	200011a0 	.word	0x200011a0

08009474 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009474:	b590      	push	{r4, r7, lr}
 8009476:	b087      	sub	sp, #28
 8009478:	af00      	add	r7, sp, #0
 800947a:	60b9      	str	r1, [r7, #8]
 800947c:	607a      	str	r2, [r7, #4]
 800947e:	603b      	str	r3, [r7, #0]
 8009480:	4603      	mov	r3, r0
 8009482:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009484:	7bfb      	ldrb	r3, [r7, #15]
 8009486:	4a0a      	ldr	r2, [pc, #40]	; (80094b0 <disk_read+0x3c>)
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	4413      	add	r3, r2
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	689c      	ldr	r4, [r3, #8]
 8009490:	7bfb      	ldrb	r3, [r7, #15]
 8009492:	4a07      	ldr	r2, [pc, #28]	; (80094b0 <disk_read+0x3c>)
 8009494:	4413      	add	r3, r2
 8009496:	7d18      	ldrb	r0, [r3, #20]
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	68b9      	ldr	r1, [r7, #8]
 800949e:	47a0      	blx	r4
 80094a0:	4603      	mov	r3, r0
 80094a2:	75fb      	strb	r3, [r7, #23]
  return res;
 80094a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	371c      	adds	r7, #28
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd90      	pop	{r4, r7, pc}
 80094ae:	bf00      	nop
 80094b0:	200011a0 	.word	0x200011a0

080094b4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80094b4:	b590      	push	{r4, r7, lr}
 80094b6:	b087      	sub	sp, #28
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60b9      	str	r1, [r7, #8]
 80094bc:	607a      	str	r2, [r7, #4]
 80094be:	603b      	str	r3, [r7, #0]
 80094c0:	4603      	mov	r3, r0
 80094c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80094c4:	7bfb      	ldrb	r3, [r7, #15]
 80094c6:	4a0a      	ldr	r2, [pc, #40]	; (80094f0 <disk_write+0x3c>)
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4413      	add	r3, r2
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	68dc      	ldr	r4, [r3, #12]
 80094d0:	7bfb      	ldrb	r3, [r7, #15]
 80094d2:	4a07      	ldr	r2, [pc, #28]	; (80094f0 <disk_write+0x3c>)
 80094d4:	4413      	add	r3, r2
 80094d6:	7d18      	ldrb	r0, [r3, #20]
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	68b9      	ldr	r1, [r7, #8]
 80094de:	47a0      	blx	r4
 80094e0:	4603      	mov	r3, r0
 80094e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80094e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	371c      	adds	r7, #28
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd90      	pop	{r4, r7, pc}
 80094ee:	bf00      	nop
 80094f0:	200011a0 	.word	0x200011a0

080094f4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	4603      	mov	r3, r0
 80094fc:	603a      	str	r2, [r7, #0]
 80094fe:	71fb      	strb	r3, [r7, #7]
 8009500:	460b      	mov	r3, r1
 8009502:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009504:	79fb      	ldrb	r3, [r7, #7]
 8009506:	4a09      	ldr	r2, [pc, #36]	; (800952c <disk_ioctl+0x38>)
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	4413      	add	r3, r2
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	691b      	ldr	r3, [r3, #16]
 8009510:	79fa      	ldrb	r2, [r7, #7]
 8009512:	4906      	ldr	r1, [pc, #24]	; (800952c <disk_ioctl+0x38>)
 8009514:	440a      	add	r2, r1
 8009516:	7d10      	ldrb	r0, [r2, #20]
 8009518:	79b9      	ldrb	r1, [r7, #6]
 800951a:	683a      	ldr	r2, [r7, #0]
 800951c:	4798      	blx	r3
 800951e:	4603      	mov	r3, r0
 8009520:	73fb      	strb	r3, [r7, #15]
  return res;
 8009522:	7bfb      	ldrb	r3, [r7, #15]
}
 8009524:	4618      	mov	r0, r3
 8009526:	3710      	adds	r7, #16
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}
 800952c:	200011a0 	.word	0x200011a0

08009530 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009530:	b480      	push	{r7}
 8009532:	b085      	sub	sp, #20
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	3301      	adds	r3, #1
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009540:	89fb      	ldrh	r3, [r7, #14]
 8009542:	021b      	lsls	r3, r3, #8
 8009544:	b21a      	sxth	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	b21b      	sxth	r3, r3
 800954c:	4313      	orrs	r3, r2
 800954e:	b21b      	sxth	r3, r3
 8009550:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009552:	89fb      	ldrh	r3, [r7, #14]
}
 8009554:	4618      	mov	r0, r3
 8009556:	3714      	adds	r7, #20
 8009558:	46bd      	mov	sp, r7
 800955a:	bc80      	pop	{r7}
 800955c:	4770      	bx	lr

0800955e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800955e:	b480      	push	{r7}
 8009560:	b085      	sub	sp, #20
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	3303      	adds	r3, #3
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	021b      	lsls	r3, r3, #8
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	3202      	adds	r2, #2
 8009576:	7812      	ldrb	r2, [r2, #0]
 8009578:	4313      	orrs	r3, r2
 800957a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	021b      	lsls	r3, r3, #8
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	3201      	adds	r2, #1
 8009584:	7812      	ldrb	r2, [r2, #0]
 8009586:	4313      	orrs	r3, r2
 8009588:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	021b      	lsls	r3, r3, #8
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	7812      	ldrb	r2, [r2, #0]
 8009592:	4313      	orrs	r3, r2
 8009594:	60fb      	str	r3, [r7, #12]
	return rv;
 8009596:	68fb      	ldr	r3, [r7, #12]
}
 8009598:	4618      	mov	r0, r3
 800959a:	3714      	adds	r7, #20
 800959c:	46bd      	mov	sp, r7
 800959e:	bc80      	pop	{r7}
 80095a0:	4770      	bx	lr

080095a2 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 80095a2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80095a6:	b09d      	sub	sp, #116	; 0x74
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 80095ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095ae:	3307      	adds	r3, #7
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	2200      	movs	r2, #0
 80095b6:	469a      	mov	sl, r3
 80095b8:	4693      	mov	fp, r2
 80095ba:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 80095be:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80095c2:	f04f 0000 	mov.w	r0, #0
 80095c6:	f04f 0100 	mov.w	r1, #0
 80095ca:	0219      	lsls	r1, r3, #8
 80095cc:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80095d0:	0210      	lsls	r0, r2, #8
 80095d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095d4:	3306      	adds	r3, #6
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	2200      	movs	r2, #0
 80095dc:	461c      	mov	r4, r3
 80095de:	4615      	mov	r5, r2
 80095e0:	ea40 0804 	orr.w	r8, r0, r4
 80095e4:	ea41 0905 	orr.w	r9, r1, r5
 80095e8:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 80095ec:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80095f0:	f04f 0000 	mov.w	r0, #0
 80095f4:	f04f 0100 	mov.w	r1, #0
 80095f8:	0219      	lsls	r1, r3, #8
 80095fa:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80095fe:	0210      	lsls	r0, r2, #8
 8009600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009602:	3305      	adds	r3, #5
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	b2db      	uxtb	r3, r3
 8009608:	2200      	movs	r2, #0
 800960a:	65bb      	str	r3, [r7, #88]	; 0x58
 800960c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800960e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8009612:	461a      	mov	r2, r3
 8009614:	4302      	orrs	r2, r0
 8009616:	62ba      	str	r2, [r7, #40]	; 0x28
 8009618:	4623      	mov	r3, r4
 800961a:	430b      	orrs	r3, r1
 800961c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800961e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8009622:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 8009626:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800962a:	f04f 0000 	mov.w	r0, #0
 800962e:	f04f 0100 	mov.w	r1, #0
 8009632:	0219      	lsls	r1, r3, #8
 8009634:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009638:	0210      	lsls	r0, r2, #8
 800963a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800963c:	3304      	adds	r3, #4
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	b2db      	uxtb	r3, r3
 8009642:	2200      	movs	r2, #0
 8009644:	653b      	str	r3, [r7, #80]	; 0x50
 8009646:	657a      	str	r2, [r7, #84]	; 0x54
 8009648:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800964c:	461a      	mov	r2, r3
 800964e:	4302      	orrs	r2, r0
 8009650:	623a      	str	r2, [r7, #32]
 8009652:	4623      	mov	r3, r4
 8009654:	430b      	orrs	r3, r1
 8009656:	627b      	str	r3, [r7, #36]	; 0x24
 8009658:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800965c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 8009660:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009664:	f04f 0000 	mov.w	r0, #0
 8009668:	f04f 0100 	mov.w	r1, #0
 800966c:	0219      	lsls	r1, r3, #8
 800966e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009672:	0210      	lsls	r0, r2, #8
 8009674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009676:	3303      	adds	r3, #3
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	b2db      	uxtb	r3, r3
 800967c:	2200      	movs	r2, #0
 800967e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009680:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009682:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8009686:	461a      	mov	r2, r3
 8009688:	4302      	orrs	r2, r0
 800968a:	61ba      	str	r2, [r7, #24]
 800968c:	4623      	mov	r3, r4
 800968e:	430b      	orrs	r3, r1
 8009690:	61fb      	str	r3, [r7, #28]
 8009692:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009696:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 800969a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800969e:	f04f 0000 	mov.w	r0, #0
 80096a2:	f04f 0100 	mov.w	r1, #0
 80096a6:	0219      	lsls	r1, r3, #8
 80096a8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80096ac:	0210      	lsls	r0, r2, #8
 80096ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096b0:	3302      	adds	r3, #2
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	2200      	movs	r2, #0
 80096b8:	643b      	str	r3, [r7, #64]	; 0x40
 80096ba:	647a      	str	r2, [r7, #68]	; 0x44
 80096bc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80096c0:	461a      	mov	r2, r3
 80096c2:	4302      	orrs	r2, r0
 80096c4:	613a      	str	r2, [r7, #16]
 80096c6:	4623      	mov	r3, r4
 80096c8:	430b      	orrs	r3, r1
 80096ca:	617b      	str	r3, [r7, #20]
 80096cc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80096d0:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 80096d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80096d8:	f04f 0200 	mov.w	r2, #0
 80096dc:	f04f 0300 	mov.w	r3, #0
 80096e0:	020b      	lsls	r3, r1, #8
 80096e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80096e6:	0202      	lsls	r2, r0, #8
 80096e8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80096ea:	3101      	adds	r1, #1
 80096ec:	7809      	ldrb	r1, [r1, #0]
 80096ee:	b2c9      	uxtb	r1, r1
 80096f0:	2000      	movs	r0, #0
 80096f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80096f4:	63f8      	str	r0, [r7, #60]	; 0x3c
 80096f6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80096fa:	4604      	mov	r4, r0
 80096fc:	4314      	orrs	r4, r2
 80096fe:	60bc      	str	r4, [r7, #8]
 8009700:	4319      	orrs	r1, r3
 8009702:	60f9      	str	r1, [r7, #12]
 8009704:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009708:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 800970c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009710:	f04f 0200 	mov.w	r2, #0
 8009714:	f04f 0300 	mov.w	r3, #0
 8009718:	020b      	lsls	r3, r1, #8
 800971a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800971e:	0202      	lsls	r2, r0, #8
 8009720:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009722:	7809      	ldrb	r1, [r1, #0]
 8009724:	b2c9      	uxtb	r1, r1
 8009726:	2000      	movs	r0, #0
 8009728:	6339      	str	r1, [r7, #48]	; 0x30
 800972a:	6378      	str	r0, [r7, #52]	; 0x34
 800972c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8009730:	4604      	mov	r4, r0
 8009732:	4314      	orrs	r4, r2
 8009734:	603c      	str	r4, [r7, #0]
 8009736:	4319      	orrs	r1, r3
 8009738:	6079      	str	r1, [r7, #4]
 800973a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800973e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 8009742:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 8009746:	4610      	mov	r0, r2
 8009748:	4619      	mov	r1, r3
 800974a:	3774      	adds	r7, #116	; 0x74
 800974c:	46bd      	mov	sp, r7
 800974e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009752:	4770      	bx	lr

08009754 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	460b      	mov	r3, r1
 800975e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	1c5a      	adds	r2, r3, #1
 8009764:	607a      	str	r2, [r7, #4]
 8009766:	887a      	ldrh	r2, [r7, #2]
 8009768:	b2d2      	uxtb	r2, r2
 800976a:	701a      	strb	r2, [r3, #0]
 800976c:	887b      	ldrh	r3, [r7, #2]
 800976e:	0a1b      	lsrs	r3, r3, #8
 8009770:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	1c5a      	adds	r2, r3, #1
 8009776:	607a      	str	r2, [r7, #4]
 8009778:	887a      	ldrh	r2, [r7, #2]
 800977a:	b2d2      	uxtb	r2, r2
 800977c:	701a      	strb	r2, [r3, #0]
}
 800977e:	bf00      	nop
 8009780:	370c      	adds	r7, #12
 8009782:	46bd      	mov	sp, r7
 8009784:	bc80      	pop	{r7}
 8009786:	4770      	bx	lr

08009788 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009788:	b480      	push	{r7}
 800978a:	b083      	sub	sp, #12
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	1c5a      	adds	r2, r3, #1
 8009796:	607a      	str	r2, [r7, #4]
 8009798:	683a      	ldr	r2, [r7, #0]
 800979a:	b2d2      	uxtb	r2, r2
 800979c:	701a      	strb	r2, [r3, #0]
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	0a1b      	lsrs	r3, r3, #8
 80097a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	1c5a      	adds	r2, r3, #1
 80097a8:	607a      	str	r2, [r7, #4]
 80097aa:	683a      	ldr	r2, [r7, #0]
 80097ac:	b2d2      	uxtb	r2, r2
 80097ae:	701a      	strb	r2, [r3, #0]
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	0a1b      	lsrs	r3, r3, #8
 80097b4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	1c5a      	adds	r2, r3, #1
 80097ba:	607a      	str	r2, [r7, #4]
 80097bc:	683a      	ldr	r2, [r7, #0]
 80097be:	b2d2      	uxtb	r2, r2
 80097c0:	701a      	strb	r2, [r3, #0]
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	0a1b      	lsrs	r3, r3, #8
 80097c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	1c5a      	adds	r2, r3, #1
 80097cc:	607a      	str	r2, [r7, #4]
 80097ce:	683a      	ldr	r2, [r7, #0]
 80097d0:	b2d2      	uxtb	r2, r2
 80097d2:	701a      	strb	r2, [r3, #0]
}
 80097d4:	bf00      	nop
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	bc80      	pop	{r7}
 80097dc:	4770      	bx	lr

080097de <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 80097de:	b480      	push	{r7}
 80097e0:	b085      	sub	sp, #20
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	60f8      	str	r0, [r7, #12]
 80097e6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	1c5a      	adds	r2, r3, #1
 80097ee:	60fa      	str	r2, [r7, #12]
 80097f0:	783a      	ldrb	r2, [r7, #0]
 80097f2:	701a      	strb	r2, [r3, #0]
 80097f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097f8:	f04f 0200 	mov.w	r2, #0
 80097fc:	f04f 0300 	mov.w	r3, #0
 8009800:	0a02      	lsrs	r2, r0, #8
 8009802:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009806:	0a0b      	lsrs	r3, r1, #8
 8009808:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	1c5a      	adds	r2, r3, #1
 8009810:	60fa      	str	r2, [r7, #12]
 8009812:	783a      	ldrb	r2, [r7, #0]
 8009814:	701a      	strb	r2, [r3, #0]
 8009816:	e9d7 0100 	ldrd	r0, r1, [r7]
 800981a:	f04f 0200 	mov.w	r2, #0
 800981e:	f04f 0300 	mov.w	r3, #0
 8009822:	0a02      	lsrs	r2, r0, #8
 8009824:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009828:	0a0b      	lsrs	r3, r1, #8
 800982a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	1c5a      	adds	r2, r3, #1
 8009832:	60fa      	str	r2, [r7, #12]
 8009834:	783a      	ldrb	r2, [r7, #0]
 8009836:	701a      	strb	r2, [r3, #0]
 8009838:	e9d7 0100 	ldrd	r0, r1, [r7]
 800983c:	f04f 0200 	mov.w	r2, #0
 8009840:	f04f 0300 	mov.w	r3, #0
 8009844:	0a02      	lsrs	r2, r0, #8
 8009846:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800984a:	0a0b      	lsrs	r3, r1, #8
 800984c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	1c5a      	adds	r2, r3, #1
 8009854:	60fa      	str	r2, [r7, #12]
 8009856:	783a      	ldrb	r2, [r7, #0]
 8009858:	701a      	strb	r2, [r3, #0]
 800985a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800985e:	f04f 0200 	mov.w	r2, #0
 8009862:	f04f 0300 	mov.w	r3, #0
 8009866:	0a02      	lsrs	r2, r0, #8
 8009868:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800986c:	0a0b      	lsrs	r3, r1, #8
 800986e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	1c5a      	adds	r2, r3, #1
 8009876:	60fa      	str	r2, [r7, #12]
 8009878:	783a      	ldrb	r2, [r7, #0]
 800987a:	701a      	strb	r2, [r3, #0]
 800987c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009880:	f04f 0200 	mov.w	r2, #0
 8009884:	f04f 0300 	mov.w	r3, #0
 8009888:	0a02      	lsrs	r2, r0, #8
 800988a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800988e:	0a0b      	lsrs	r3, r1, #8
 8009890:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	1c5a      	adds	r2, r3, #1
 8009898:	60fa      	str	r2, [r7, #12]
 800989a:	783a      	ldrb	r2, [r7, #0]
 800989c:	701a      	strb	r2, [r3, #0]
 800989e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80098a2:	f04f 0200 	mov.w	r2, #0
 80098a6:	f04f 0300 	mov.w	r3, #0
 80098aa:	0a02      	lsrs	r2, r0, #8
 80098ac:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80098b0:	0a0b      	lsrs	r3, r1, #8
 80098b2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	1c5a      	adds	r2, r3, #1
 80098ba:	60fa      	str	r2, [r7, #12]
 80098bc:	783a      	ldrb	r2, [r7, #0]
 80098be:	701a      	strb	r2, [r3, #0]
 80098c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80098c4:	f04f 0200 	mov.w	r2, #0
 80098c8:	f04f 0300 	mov.w	r3, #0
 80098cc:	0a02      	lsrs	r2, r0, #8
 80098ce:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80098d2:	0a0b      	lsrs	r3, r1, #8
 80098d4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	1c5a      	adds	r2, r3, #1
 80098dc:	60fa      	str	r2, [r7, #12]
 80098de:	783a      	ldrb	r2, [r7, #0]
 80098e0:	701a      	strb	r2, [r3, #0]
}
 80098e2:	bf00      	nop
 80098e4:	3714      	adds	r7, #20
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bc80      	pop	{r7}
 80098ea:	4770      	bx	lr

080098ec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80098ec:	b480      	push	{r7}
 80098ee:	b087      	sub	sp, #28
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d00d      	beq.n	8009922 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009906:	693a      	ldr	r2, [r7, #16]
 8009908:	1c53      	adds	r3, r2, #1
 800990a:	613b      	str	r3, [r7, #16]
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	1c59      	adds	r1, r3, #1
 8009910:	6179      	str	r1, [r7, #20]
 8009912:	7812      	ldrb	r2, [r2, #0]
 8009914:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	3b01      	subs	r3, #1
 800991a:	607b      	str	r3, [r7, #4]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d1f1      	bne.n	8009906 <mem_cpy+0x1a>
	}
}
 8009922:	bf00      	nop
 8009924:	371c      	adds	r7, #28
 8009926:	46bd      	mov	sp, r7
 8009928:	bc80      	pop	{r7}
 800992a:	4770      	bx	lr

0800992c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800992c:	b480      	push	{r7}
 800992e:	b087      	sub	sp, #28
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	1c5a      	adds	r2, r3, #1
 8009940:	617a      	str	r2, [r7, #20]
 8009942:	68ba      	ldr	r2, [r7, #8]
 8009944:	b2d2      	uxtb	r2, r2
 8009946:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	3b01      	subs	r3, #1
 800994c:	607b      	str	r3, [r7, #4]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d1f3      	bne.n	800993c <mem_set+0x10>
}
 8009954:	bf00      	nop
 8009956:	bf00      	nop
 8009958:	371c      	adds	r7, #28
 800995a:	46bd      	mov	sp, r7
 800995c:	bc80      	pop	{r7}
 800995e:	4770      	bx	lr

08009960 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009960:	b480      	push	{r7}
 8009962:	b089      	sub	sp, #36	; 0x24
 8009964:	af00      	add	r7, sp, #0
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	61fb      	str	r3, [r7, #28]
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009974:	2300      	movs	r3, #0
 8009976:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	1c5a      	adds	r2, r3, #1
 800997c:	61fa      	str	r2, [r7, #28]
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	4619      	mov	r1, r3
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	1c5a      	adds	r2, r3, #1
 8009986:	61ba      	str	r2, [r7, #24]
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	1acb      	subs	r3, r1, r3
 800998c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	3b01      	subs	r3, #1
 8009992:	607b      	str	r3, [r7, #4]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d002      	beq.n	80099a0 <mem_cmp+0x40>
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d0eb      	beq.n	8009978 <mem_cmp+0x18>

	return r;
 80099a0:	697b      	ldr	r3, [r7, #20]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3724      	adds	r7, #36	; 0x24
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bc80      	pop	{r7}
 80099aa:	4770      	bx	lr

080099ac <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80099b6:	e002      	b.n	80099be <chk_chr+0x12>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	3301      	adds	r3, #1
 80099bc:	607b      	str	r3, [r7, #4]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d005      	beq.n	80099d2 <chk_chr+0x26>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	461a      	mov	r2, r3
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d1f2      	bne.n	80099b8 <chk_chr+0xc>
	return *str;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	781b      	ldrb	r3, [r3, #0]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	370c      	adds	r7, #12
 80099da:	46bd      	mov	sp, r7
 80099dc:	bc80      	pop	{r7}
 80099de:	4770      	bx	lr

080099e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b085      	sub	sp, #20
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80099ea:	2300      	movs	r3, #0
 80099ec:	60bb      	str	r3, [r7, #8]
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	60fb      	str	r3, [r7, #12]
 80099f2:	e029      	b.n	8009a48 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80099f4:	4a26      	ldr	r2, [pc, #152]	; (8009a90 <chk_lock+0xb0>)
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	011b      	lsls	r3, r3, #4
 80099fa:	4413      	add	r3, r2
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d01d      	beq.n	8009a3e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009a02:	4a23      	ldr	r2, [pc, #140]	; (8009a90 <chk_lock+0xb0>)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	011b      	lsls	r3, r3, #4
 8009a08:	4413      	add	r3, r2
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d116      	bne.n	8009a42 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009a14:	4a1e      	ldr	r2, [pc, #120]	; (8009a90 <chk_lock+0xb0>)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	011b      	lsls	r3, r3, #4
 8009a1a:	4413      	add	r3, r2
 8009a1c:	3304      	adds	r3, #4
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d10c      	bne.n	8009a42 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009a28:	4a19      	ldr	r2, [pc, #100]	; (8009a90 <chk_lock+0xb0>)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	011b      	lsls	r3, r3, #4
 8009a2e:	4413      	add	r3, r2
 8009a30:	3308      	adds	r3, #8
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d102      	bne.n	8009a42 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009a3c:	e007      	b.n	8009a4e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	3301      	adds	r3, #1
 8009a46:	60fb      	str	r3, [r7, #12]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d9d2      	bls.n	80099f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2b02      	cmp	r3, #2
 8009a52:	d109      	bne.n	8009a68 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d102      	bne.n	8009a60 <chk_lock+0x80>
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d101      	bne.n	8009a64 <chk_lock+0x84>
 8009a60:	2300      	movs	r3, #0
 8009a62:	e010      	b.n	8009a86 <chk_lock+0xa6>
 8009a64:	2312      	movs	r3, #18
 8009a66:	e00e      	b.n	8009a86 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d108      	bne.n	8009a80 <chk_lock+0xa0>
 8009a6e:	4a08      	ldr	r2, [pc, #32]	; (8009a90 <chk_lock+0xb0>)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	011b      	lsls	r3, r3, #4
 8009a74:	4413      	add	r3, r2
 8009a76:	330c      	adds	r3, #12
 8009a78:	881b      	ldrh	r3, [r3, #0]
 8009a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a7e:	d101      	bne.n	8009a84 <chk_lock+0xa4>
 8009a80:	2310      	movs	r3, #16
 8009a82:	e000      	b.n	8009a86 <chk_lock+0xa6>
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3714      	adds	r7, #20
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bc80      	pop	{r7}
 8009a8e:	4770      	bx	lr
 8009a90:	20000d20 	.word	0x20000d20

08009a94 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	607b      	str	r3, [r7, #4]
 8009a9e:	e002      	b.n	8009aa6 <enq_lock+0x12>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	607b      	str	r3, [r7, #4]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d806      	bhi.n	8009aba <enq_lock+0x26>
 8009aac:	4a08      	ldr	r2, [pc, #32]	; (8009ad0 <enq_lock+0x3c>)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	011b      	lsls	r3, r3, #4
 8009ab2:	4413      	add	r3, r2
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1f2      	bne.n	8009aa0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	bf14      	ite	ne
 8009ac0:	2301      	movne	r3, #1
 8009ac2:	2300      	moveq	r3, #0
 8009ac4:	b2db      	uxtb	r3, r3
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	370c      	adds	r7, #12
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bc80      	pop	{r7}
 8009ace:	4770      	bx	lr
 8009ad0:	20000d20 	.word	0x20000d20

08009ad4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009ade:	2300      	movs	r3, #0
 8009ae0:	60fb      	str	r3, [r7, #12]
 8009ae2:	e01f      	b.n	8009b24 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009ae4:	4a41      	ldr	r2, [pc, #260]	; (8009bec <inc_lock+0x118>)
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	011b      	lsls	r3, r3, #4
 8009aea:	4413      	add	r3, r2
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d113      	bne.n	8009b1e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009af6:	4a3d      	ldr	r2, [pc, #244]	; (8009bec <inc_lock+0x118>)
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	011b      	lsls	r3, r3, #4
 8009afc:	4413      	add	r3, r2
 8009afe:	3304      	adds	r3, #4
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d109      	bne.n	8009b1e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009b0a:	4a38      	ldr	r2, [pc, #224]	; (8009bec <inc_lock+0x118>)
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	011b      	lsls	r3, r3, #4
 8009b10:	4413      	add	r3, r2
 8009b12:	3308      	adds	r3, #8
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d006      	beq.n	8009b2c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	3301      	adds	r3, #1
 8009b22:	60fb      	str	r3, [r7, #12]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d9dc      	bls.n	8009ae4 <inc_lock+0x10>
 8009b2a:	e000      	b.n	8009b2e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009b2c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2b02      	cmp	r3, #2
 8009b32:	d132      	bne.n	8009b9a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009b34:	2300      	movs	r3, #0
 8009b36:	60fb      	str	r3, [r7, #12]
 8009b38:	e002      	b.n	8009b40 <inc_lock+0x6c>
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	60fb      	str	r3, [r7, #12]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d806      	bhi.n	8009b54 <inc_lock+0x80>
 8009b46:	4a29      	ldr	r2, [pc, #164]	; (8009bec <inc_lock+0x118>)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	011b      	lsls	r3, r3, #4
 8009b4c:	4413      	add	r3, r2
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1f2      	bne.n	8009b3a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2b02      	cmp	r3, #2
 8009b58:	d101      	bne.n	8009b5e <inc_lock+0x8a>
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	e040      	b.n	8009be0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	4922      	ldr	r1, [pc, #136]	; (8009bec <inc_lock+0x118>)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	011b      	lsls	r3, r3, #4
 8009b68:	440b      	add	r3, r1
 8009b6a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	689a      	ldr	r2, [r3, #8]
 8009b70:	491e      	ldr	r1, [pc, #120]	; (8009bec <inc_lock+0x118>)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	011b      	lsls	r3, r3, #4
 8009b76:	440b      	add	r3, r1
 8009b78:	3304      	adds	r3, #4
 8009b7a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b80:	491a      	ldr	r1, [pc, #104]	; (8009bec <inc_lock+0x118>)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	011b      	lsls	r3, r3, #4
 8009b86:	440b      	add	r3, r1
 8009b88:	3308      	adds	r3, #8
 8009b8a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009b8c:	4a17      	ldr	r2, [pc, #92]	; (8009bec <inc_lock+0x118>)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	011b      	lsls	r3, r3, #4
 8009b92:	4413      	add	r3, r2
 8009b94:	330c      	adds	r3, #12
 8009b96:	2200      	movs	r2, #0
 8009b98:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d009      	beq.n	8009bb4 <inc_lock+0xe0>
 8009ba0:	4a12      	ldr	r2, [pc, #72]	; (8009bec <inc_lock+0x118>)
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	011b      	lsls	r3, r3, #4
 8009ba6:	4413      	add	r3, r2
 8009ba8:	330c      	adds	r3, #12
 8009baa:	881b      	ldrh	r3, [r3, #0]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d001      	beq.n	8009bb4 <inc_lock+0xe0>
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	e015      	b.n	8009be0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d108      	bne.n	8009bcc <inc_lock+0xf8>
 8009bba:	4a0c      	ldr	r2, [pc, #48]	; (8009bec <inc_lock+0x118>)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	011b      	lsls	r3, r3, #4
 8009bc0:	4413      	add	r3, r2
 8009bc2:	330c      	adds	r3, #12
 8009bc4:	881b      	ldrh	r3, [r3, #0]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	b29a      	uxth	r2, r3
 8009bca:	e001      	b.n	8009bd0 <inc_lock+0xfc>
 8009bcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009bd0:	4906      	ldr	r1, [pc, #24]	; (8009bec <inc_lock+0x118>)
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	011b      	lsls	r3, r3, #4
 8009bd6:	440b      	add	r3, r1
 8009bd8:	330c      	adds	r3, #12
 8009bda:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	3301      	adds	r3, #1
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3714      	adds	r7, #20
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bc80      	pop	{r7}
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop
 8009bec:	20000d20 	.word	0x20000d20

08009bf0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	607b      	str	r3, [r7, #4]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d825      	bhi.n	8009c50 <dec_lock+0x60>
		n = Files[i].ctr;
 8009c04:	4a16      	ldr	r2, [pc, #88]	; (8009c60 <dec_lock+0x70>)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	011b      	lsls	r3, r3, #4
 8009c0a:	4413      	add	r3, r2
 8009c0c:	330c      	adds	r3, #12
 8009c0e:	881b      	ldrh	r3, [r3, #0]
 8009c10:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009c12:	89fb      	ldrh	r3, [r7, #14]
 8009c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c18:	d101      	bne.n	8009c1e <dec_lock+0x2e>
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009c1e:	89fb      	ldrh	r3, [r7, #14]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d002      	beq.n	8009c2a <dec_lock+0x3a>
 8009c24:	89fb      	ldrh	r3, [r7, #14]
 8009c26:	3b01      	subs	r3, #1
 8009c28:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009c2a:	4a0d      	ldr	r2, [pc, #52]	; (8009c60 <dec_lock+0x70>)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	011b      	lsls	r3, r3, #4
 8009c30:	4413      	add	r3, r2
 8009c32:	330c      	adds	r3, #12
 8009c34:	89fa      	ldrh	r2, [r7, #14]
 8009c36:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009c38:	89fb      	ldrh	r3, [r7, #14]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d105      	bne.n	8009c4a <dec_lock+0x5a>
 8009c3e:	4a08      	ldr	r2, [pc, #32]	; (8009c60 <dec_lock+0x70>)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	011b      	lsls	r3, r3, #4
 8009c44:	4413      	add	r3, r2
 8009c46:	2200      	movs	r2, #0
 8009c48:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	737b      	strb	r3, [r7, #13]
 8009c4e:	e001      	b.n	8009c54 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009c50:	2302      	movs	r3, #2
 8009c52:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009c54:	7b7b      	ldrb	r3, [r7, #13]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3714      	adds	r7, #20
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bc80      	pop	{r7}
 8009c5e:	4770      	bx	lr
 8009c60:	20000d20 	.word	0x20000d20

08009c64 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	60fb      	str	r3, [r7, #12]
 8009c70:	e010      	b.n	8009c94 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009c72:	4a0d      	ldr	r2, [pc, #52]	; (8009ca8 <clear_lock+0x44>)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	011b      	lsls	r3, r3, #4
 8009c78:	4413      	add	r3, r2
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d105      	bne.n	8009c8e <clear_lock+0x2a>
 8009c82:	4a09      	ldr	r2, [pc, #36]	; (8009ca8 <clear_lock+0x44>)
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	011b      	lsls	r3, r3, #4
 8009c88:	4413      	add	r3, r2
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	3301      	adds	r3, #1
 8009c92:	60fb      	str	r3, [r7, #12]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d9eb      	bls.n	8009c72 <clear_lock+0xe>
	}
}
 8009c9a:	bf00      	nop
 8009c9c:	bf00      	nop
 8009c9e:	3714      	adds	r7, #20
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bc80      	pop	{r7}
 8009ca4:	4770      	bx	lr
 8009ca6:	bf00      	nop
 8009ca8:	20000d20 	.word	0x20000d20

08009cac <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b086      	sub	sp, #24
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	78db      	ldrb	r3, [r3, #3]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d034      	beq.n	8009d2a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cc4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	7858      	ldrb	r0, [r3, #1]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	697a      	ldr	r2, [r7, #20]
 8009cd4:	f7ff fbee 	bl	80094b4 <disk_write>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d002      	beq.n	8009ce4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	73fb      	strb	r3, [r7, #15]
 8009ce2:	e022      	b.n	8009d2a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cee:	697a      	ldr	r2, [r7, #20]
 8009cf0:	1ad2      	subs	r2, r2, r3
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6a1b      	ldr	r3, [r3, #32]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d217      	bcs.n	8009d2a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	789b      	ldrb	r3, [r3, #2]
 8009cfe:	613b      	str	r3, [r7, #16]
 8009d00:	e010      	b.n	8009d24 <sync_window+0x78>
					wsect += fs->fsize;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6a1b      	ldr	r3, [r3, #32]
 8009d06:	697a      	ldr	r2, [r7, #20]
 8009d08:	4413      	add	r3, r2
 8009d0a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	7858      	ldrb	r0, [r3, #1]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009d16:	2301      	movs	r3, #1
 8009d18:	697a      	ldr	r2, [r7, #20]
 8009d1a:	f7ff fbcb 	bl	80094b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	3b01      	subs	r3, #1
 8009d22:	613b      	str	r3, [r7, #16]
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d8eb      	bhi.n	8009d02 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3718      	adds	r7, #24
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d46:	683a      	ldr	r2, [r7, #0]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d01b      	beq.n	8009d84 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f7ff ffad 	bl	8009cac <sync_window>
 8009d52:	4603      	mov	r3, r0
 8009d54:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009d56:	7bfb      	ldrb	r3, [r7, #15]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d113      	bne.n	8009d84 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	7858      	ldrb	r0, [r3, #1]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009d66:	2301      	movs	r3, #1
 8009d68:	683a      	ldr	r2, [r7, #0]
 8009d6a:	f7ff fb83 	bl	8009474 <disk_read>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d004      	beq.n	8009d7e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009d74:	f04f 33ff 	mov.w	r3, #4294967295
 8009d78:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	683a      	ldr	r2, [r7, #0]
 8009d82:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8009d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3710      	adds	r7, #16
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
	...

08009d90 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f7ff ff87 	bl	8009cac <sync_window>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009da2:	7bfb      	ldrb	r3, [r7, #15]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d158      	bne.n	8009e5a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	2b03      	cmp	r3, #3
 8009dae:	d148      	bne.n	8009e42 <sync_fs+0xb2>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	791b      	ldrb	r3, [r3, #4]
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d144      	bne.n	8009e42 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	3338      	adds	r3, #56	; 0x38
 8009dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7ff fdb2 	bl	800992c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	3338      	adds	r3, #56	; 0x38
 8009dcc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009dd0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7ff fcbd 	bl	8009754 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	3338      	adds	r3, #56	; 0x38
 8009dde:	4921      	ldr	r1, [pc, #132]	; (8009e64 <sync_fs+0xd4>)
 8009de0:	4618      	mov	r0, r3
 8009de2:	f7ff fcd1 	bl	8009788 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	3338      	adds	r3, #56	; 0x38
 8009dea:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009dee:	491e      	ldr	r1, [pc, #120]	; (8009e68 <sync_fs+0xd8>)
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7ff fcc9 	bl	8009788 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	3338      	adds	r3, #56	; 0x38
 8009dfa:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	699b      	ldr	r3, [r3, #24]
 8009e02:	4619      	mov	r1, r3
 8009e04:	4610      	mov	r0, r2
 8009e06:	f7ff fcbf 	bl	8009788 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	3338      	adds	r3, #56	; 0x38
 8009e0e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	695b      	ldr	r3, [r3, #20]
 8009e16:	4619      	mov	r1, r3
 8009e18:	4610      	mov	r0, r2
 8009e1a:	f7ff fcb5 	bl	8009788 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e22:	1c5a      	adds	r2, r3, #1
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	7858      	ldrb	r0, [r3, #1]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e36:	2301      	movs	r3, #1
 8009e38:	f7ff fb3c 	bl	80094b4 <disk_write>
			fs->fsi_flag = 0;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	785b      	ldrb	r3, [r3, #1]
 8009e46:	2200      	movs	r2, #0
 8009e48:	2100      	movs	r1, #0
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7ff fb52 	bl	80094f4 <disk_ioctl>
 8009e50:	4603      	mov	r3, r0
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d001      	beq.n	8009e5a <sync_fs+0xca>
 8009e56:	2301      	movs	r3, #1
 8009e58:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3710      	adds	r7, #16
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}
 8009e64:	41615252 	.word	0x41615252
 8009e68:	61417272 	.word	0x61417272

08009e6c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	3b02      	subs	r3, #2
 8009e7a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	69db      	ldr	r3, [r3, #28]
 8009e80:	3b02      	subs	r3, #2
 8009e82:	683a      	ldr	r2, [r7, #0]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d301      	bcc.n	8009e8c <clust2sect+0x20>
 8009e88:	2300      	movs	r3, #0
 8009e8a:	e008      	b.n	8009e9e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	895b      	ldrh	r3, [r3, #10]
 8009e90:	461a      	mov	r2, r3
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	fb03 f202 	mul.w	r2, r3, r2
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e9c:	4413      	add	r3, r2
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	370c      	adds	r7, #12
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bc80      	pop	{r7}
 8009ea6:	4770      	bx	lr

08009ea8 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b088      	sub	sp, #32
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009eb2:	6879      	ldr	r1, [r7, #4]
 8009eb4:	6809      	ldr	r1, [r1, #0]
 8009eb6:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009eb8:	6839      	ldr	r1, [r7, #0]
 8009eba:	2901      	cmp	r1, #1
 8009ebc:	d904      	bls.n	8009ec8 <get_fat+0x20>
 8009ebe:	69b9      	ldr	r1, [r7, #24]
 8009ec0:	69c9      	ldr	r1, [r1, #28]
 8009ec2:	6838      	ldr	r0, [r7, #0]
 8009ec4:	4288      	cmp	r0, r1
 8009ec6:	d302      	bcc.n	8009ece <get_fat+0x26>
		val = 1;	/* Internal error */
 8009ec8:	2301      	movs	r3, #1
 8009eca:	61fb      	str	r3, [r7, #28]
 8009ecc:	e101      	b.n	800a0d2 <get_fat+0x22a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009ece:	f04f 31ff 	mov.w	r1, #4294967295
 8009ed2:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 8009ed4:	69b9      	ldr	r1, [r7, #24]
 8009ed6:	7809      	ldrb	r1, [r1, #0]
 8009ed8:	3901      	subs	r1, #1
 8009eda:	2903      	cmp	r1, #3
 8009edc:	f200 80ed 	bhi.w	800a0ba <get_fat+0x212>
 8009ee0:	a001      	add	r0, pc, #4	; (adr r0, 8009ee8 <get_fat+0x40>)
 8009ee2:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009ee6:	bf00      	nop
 8009ee8:	08009ef9 	.word	0x08009ef9
 8009eec:	08009f81 	.word	0x08009f81
 8009ef0:	08009fb7 	.word	0x08009fb7
 8009ef4:	08009fef 	.word	0x08009fef
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	60fb      	str	r3, [r7, #12]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	085b      	lsrs	r3, r3, #1
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	4413      	add	r3, r2
 8009f04:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	0a5b      	lsrs	r3, r3, #9
 8009f0e:	4413      	add	r3, r2
 8009f10:	4619      	mov	r1, r3
 8009f12:	69b8      	ldr	r0, [r7, #24]
 8009f14:	f7ff ff0e 	bl	8009d34 <move_window>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	f040 80d0 	bne.w	800a0c0 <get_fat+0x218>
			wc = fs->win[bc++ % SS(fs)];
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	1c5a      	adds	r2, r3, #1
 8009f24:	60fa      	str	r2, [r7, #12]
 8009f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f2a:	69ba      	ldr	r2, [r7, #24]
 8009f2c:	4413      	add	r3, r2
 8009f2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009f32:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009f34:	69bb      	ldr	r3, [r7, #24]
 8009f36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	0a5b      	lsrs	r3, r3, #9
 8009f3c:	4413      	add	r3, r2
 8009f3e:	4619      	mov	r1, r3
 8009f40:	69b8      	ldr	r0, [r7, #24]
 8009f42:	f7ff fef7 	bl	8009d34 <move_window>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	f040 80bb 	bne.w	800a0c4 <get_fat+0x21c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f54:	69ba      	ldr	r2, [r7, #24]
 8009f56:	4413      	add	r3, r2
 8009f58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009f5c:	021b      	lsls	r3, r3, #8
 8009f5e:	461a      	mov	r2, r3
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	f003 0301 	and.w	r3, r3, #1
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d002      	beq.n	8009f76 <get_fat+0xce>
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	091b      	lsrs	r3, r3, #4
 8009f74:	e002      	b.n	8009f7c <get_fat+0xd4>
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f7c:	61fb      	str	r3, [r7, #28]
			break;
 8009f7e:	e0a8      	b.n	800a0d2 <get_fat+0x22a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	0a1b      	lsrs	r3, r3, #8
 8009f88:	4413      	add	r3, r2
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	69b8      	ldr	r0, [r7, #24]
 8009f8e:	f7ff fed1 	bl	8009d34 <move_window>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f040 8097 	bne.w	800a0c8 <get_fat+0x220>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009f9a:	69bb      	ldr	r3, [r7, #24]
 8009f9c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	005b      	lsls	r3, r3, #1
 8009fa4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009fa8:	4413      	add	r3, r2
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7ff fac0 	bl	8009530 <ld_word>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	61fb      	str	r3, [r7, #28]
			break;
 8009fb4:	e08d      	b.n	800a0d2 <get_fat+0x22a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009fb6:	69bb      	ldr	r3, [r7, #24]
 8009fb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	09db      	lsrs	r3, r3, #7
 8009fbe:	4413      	add	r3, r2
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	69b8      	ldr	r0, [r7, #24]
 8009fc4:	f7ff feb6 	bl	8009d34 <move_window>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d17e      	bne.n	800a0cc <get_fat+0x224>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009fdc:	4413      	add	r3, r2
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7ff fabd 	bl	800955e <ld_dword>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009fea:	61fb      	str	r3, [r7, #28]
			break;
 8009fec:	e071      	b.n	800a0d2 <get_fat+0x22a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 8009fee:	6879      	ldr	r1, [r7, #4]
 8009ff0:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8009ff4:	4301      	orrs	r1, r0
 8009ff6:	d060      	beq.n	800a0ba <get_fat+0x212>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8009ff8:	6879      	ldr	r1, [r7, #4]
 8009ffa:	6889      	ldr	r1, [r1, #8]
 8009ffc:	6838      	ldr	r0, [r7, #0]
 8009ffe:	1a41      	subs	r1, r0, r1
 800a000:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800a002:	6879      	ldr	r1, [r7, #4]
 800a004:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800a008:	1e42      	subs	r2, r0, #1
 800a00a:	f141 33ff 	adc.w	r3, r1, #4294967295
 800a00e:	f04f 0000 	mov.w	r0, #0
 800a012:	f04f 0100 	mov.w	r1, #0
 800a016:	0a50      	lsrs	r0, r2, #9
 800a018:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800a01c:	0a59      	lsrs	r1, r3, #9
 800a01e:	4602      	mov	r2, r0
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	895b      	ldrh	r3, [r3, #10]
 800a024:	fbb2 f3f3 	udiv	r3, r2, r3
 800a028:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	79db      	ldrb	r3, [r3, #7]
 800a02e:	2b02      	cmp	r3, #2
 800a030:	d10e      	bne.n	800a050 <get_fat+0x1a8>
					if (cofs <= clen) {
 800a032:	697a      	ldr	r2, [r7, #20]
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	429a      	cmp	r2, r3
 800a038:	d80a      	bhi.n	800a050 <get_fat+0x1a8>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800a03a:	697a      	ldr	r2, [r7, #20]
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	429a      	cmp	r2, r3
 800a040:	d002      	beq.n	800a048 <get_fat+0x1a0>
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	3301      	adds	r3, #1
 800a046:	e001      	b.n	800a04c <get_fat+0x1a4>
 800a048:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a04c:	61fb      	str	r3, [r7, #28]
						break;
 800a04e:	e040      	b.n	800a0d2 <get_fat+0x22a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	79db      	ldrb	r3, [r3, #7]
 800a054:	2b03      	cmp	r3, #3
 800a056:	d108      	bne.n	800a06a <get_fat+0x1c2>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	699b      	ldr	r3, [r3, #24]
 800a05c:	697a      	ldr	r2, [r7, #20]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d203      	bcs.n	800a06a <get_fat+0x1c2>
					val = clst + 1; 	/* Generate the value */
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	3301      	adds	r3, #1
 800a066:	61fb      	str	r3, [r7, #28]
					break;
 800a068:	e033      	b.n	800a0d2 <get_fat+0x22a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	79db      	ldrb	r3, [r3, #7]
 800a06e:	2b02      	cmp	r3, #2
 800a070:	d023      	beq.n	800a0ba <get_fat+0x212>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	69db      	ldr	r3, [r3, #28]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d003      	beq.n	800a082 <get_fat+0x1da>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800a07a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a07e:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800a080:	e027      	b.n	800a0d2 <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	09db      	lsrs	r3, r3, #7
 800a08a:	4413      	add	r3, r2
 800a08c:	4619      	mov	r1, r3
 800a08e:	69b8      	ldr	r0, [r7, #24]
 800a090:	f7ff fe50 	bl	8009d34 <move_window>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d11a      	bne.n	800a0d0 <get_fat+0x228>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a0a8:	4413      	add	r3, r2
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7ff fa57 	bl	800955e <ld_dword>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0b6:	61fb      	str	r3, [r7, #28]
					break;
 800a0b8:	e00b      	b.n	800a0d2 <get_fat+0x22a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	61fb      	str	r3, [r7, #28]
 800a0be:	e008      	b.n	800a0d2 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a0c0:	bf00      	nop
 800a0c2:	e006      	b.n	800a0d2 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a0c4:	bf00      	nop
 800a0c6:	e004      	b.n	800a0d2 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a0c8:	bf00      	nop
 800a0ca:	e002      	b.n	800a0d2 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a0cc:	bf00      	nop
 800a0ce:	e000      	b.n	800a0d2 <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a0d0:	bf00      	nop
		}
	}

	return val;
 800a0d2:	69fb      	ldr	r3, [r7, #28]
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3720      	adds	r7, #32
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a0dc:	b590      	push	{r4, r7, lr}
 800a0de:	b089      	sub	sp, #36	; 0x24
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a0e8:	2302      	movs	r3, #2
 800a0ea:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	f240 80d6 	bls.w	800a2a0 <put_fat+0x1c4>
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	69db      	ldr	r3, [r3, #28]
 800a0f8:	68ba      	ldr	r2, [r7, #8]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	f080 80d0 	bcs.w	800a2a0 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	2b04      	cmp	r3, #4
 800a106:	f300 80d4 	bgt.w	800a2b2 <put_fat+0x1d6>
 800a10a:	2b03      	cmp	r3, #3
 800a10c:	f280 8093 	bge.w	800a236 <put_fat+0x15a>
 800a110:	2b01      	cmp	r3, #1
 800a112:	d002      	beq.n	800a11a <put_fat+0x3e>
 800a114:	2b02      	cmp	r3, #2
 800a116:	d06e      	beq.n	800a1f6 <put_fat+0x11a>
 800a118:	e0cb      	b.n	800a2b2 <put_fat+0x1d6>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	61bb      	str	r3, [r7, #24]
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	085b      	lsrs	r3, r3, #1
 800a122:	69ba      	ldr	r2, [r7, #24]
 800a124:	4413      	add	r3, r2
 800a126:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	0a5b      	lsrs	r3, r3, #9
 800a130:	4413      	add	r3, r2
 800a132:	4619      	mov	r1, r3
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	f7ff fdfd 	bl	8009d34 <move_window>
 800a13a:	4603      	mov	r3, r0
 800a13c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a13e:	7ffb      	ldrb	r3, [r7, #31]
 800a140:	2b00      	cmp	r3, #0
 800a142:	f040 80af 	bne.w	800a2a4 <put_fat+0x1c8>
			p = fs->win + bc++ % SS(fs);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	1c59      	adds	r1, r3, #1
 800a150:	61b9      	str	r1, [r7, #24]
 800a152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a156:	4413      	add	r3, r2
 800a158:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	f003 0301 	and.w	r3, r3, #1
 800a160:	2b00      	cmp	r3, #0
 800a162:	d00d      	beq.n	800a180 <put_fat+0xa4>
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	b25b      	sxtb	r3, r3
 800a16a:	f003 030f 	and.w	r3, r3, #15
 800a16e:	b25a      	sxtb	r2, r3
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	b2db      	uxtb	r3, r3
 800a174:	011b      	lsls	r3, r3, #4
 800a176:	b25b      	sxtb	r3, r3
 800a178:	4313      	orrs	r3, r2
 800a17a:	b25b      	sxtb	r3, r3
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	e001      	b.n	800a184 <put_fat+0xa8>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	b2db      	uxtb	r3, r3
 800a184:	697a      	ldr	r2, [r7, #20]
 800a186:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2201      	movs	r2, #1
 800a18c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	0a5b      	lsrs	r3, r3, #9
 800a196:	4413      	add	r3, r2
 800a198:	4619      	mov	r1, r3
 800a19a:	68f8      	ldr	r0, [r7, #12]
 800a19c:	f7ff fdca 	bl	8009d34 <move_window>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a1a4:	7ffb      	ldrb	r3, [r7, #31]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d17e      	bne.n	800a2a8 <put_fat+0x1cc>
			p = fs->win + bc % SS(fs);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1b6:	4413      	add	r3, r2
 800a1b8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	f003 0301 	and.w	r3, r3, #1
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d003      	beq.n	800a1cc <put_fat+0xf0>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	091b      	lsrs	r3, r3, #4
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	e00e      	b.n	800a1ea <put_fat+0x10e>
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	b25b      	sxtb	r3, r3
 800a1d2:	f023 030f 	bic.w	r3, r3, #15
 800a1d6:	b25a      	sxtb	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	0a1b      	lsrs	r3, r3, #8
 800a1dc:	b25b      	sxtb	r3, r3
 800a1de:	f003 030f 	and.w	r3, r3, #15
 800a1e2:	b25b      	sxtb	r3, r3
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	b25b      	sxtb	r3, r3
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	697a      	ldr	r2, [r7, #20]
 800a1ec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	70da      	strb	r2, [r3, #3]
			break;
 800a1f4:	e05d      	b.n	800a2b2 <put_fat+0x1d6>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	0a1b      	lsrs	r3, r3, #8
 800a1fe:	4413      	add	r3, r2
 800a200:	4619      	mov	r1, r3
 800a202:	68f8      	ldr	r0, [r7, #12]
 800a204:	f7ff fd96 	bl	8009d34 <move_window>
 800a208:	4603      	mov	r3, r0
 800a20a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a20c:	7ffb      	ldrb	r3, [r7, #31]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d14c      	bne.n	800a2ac <put_fat+0x1d0>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	005b      	lsls	r3, r3, #1
 800a21c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a220:	4413      	add	r3, r2
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	b292      	uxth	r2, r2
 800a226:	4611      	mov	r1, r2
 800a228:	4618      	mov	r0, r3
 800a22a:	f7ff fa93 	bl	8009754 <st_word>
			fs->wflag = 1;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2201      	movs	r2, #1
 800a232:	70da      	strb	r2, [r3, #3]
			break;
 800a234:	e03d      	b.n	800a2b2 <put_fat+0x1d6>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	09db      	lsrs	r3, r3, #7
 800a23e:	4413      	add	r3, r2
 800a240:	4619      	mov	r1, r3
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f7ff fd76 	bl	8009d34 <move_window>
 800a248:	4603      	mov	r3, r0
 800a24a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a24c:	7ffb      	ldrb	r3, [r7, #31]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d12e      	bne.n	800a2b0 <put_fat+0x1d4>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	2b04      	cmp	r3, #4
 800a258:	d012      	beq.n	800a280 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a26e:	4413      	add	r3, r2
 800a270:	4618      	mov	r0, r3
 800a272:	f7ff f974 	bl	800955e <ld_dword>
 800a276:	4603      	mov	r3, r0
 800a278:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a27c:	4323      	orrs	r3, r4
 800a27e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a28e:	4413      	add	r3, r2
 800a290:	6879      	ldr	r1, [r7, #4]
 800a292:	4618      	mov	r0, r3
 800a294:	f7ff fa78 	bl	8009788 <st_dword>
			fs->wflag = 1;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2201      	movs	r2, #1
 800a29c:	70da      	strb	r2, [r3, #3]
			break;
 800a29e:	e008      	b.n	800a2b2 <put_fat+0x1d6>
		}
	}
 800a2a0:	bf00      	nop
 800a2a2:	e006      	b.n	800a2b2 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800a2a4:	bf00      	nop
 800a2a6:	e004      	b.n	800a2b2 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800a2a8:	bf00      	nop
 800a2aa:	e002      	b.n	800a2b2 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800a2ac:	bf00      	nop
 800a2ae:	e000      	b.n	800a2b2 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800a2b0:	bf00      	nop
	return res;
 800a2b2:	7ffb      	ldrb	r3, [r7, #31]
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3724      	adds	r7, #36	; 0x24
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd90      	pop	{r4, r7, pc}

0800a2bc <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b08a      	sub	sp, #40	; 0x28
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	3b02      	subs	r3, #2
 800a2cc:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	69db      	ldr	r3, [r3, #28]
 800a2d2:	3b02      	subs	r3, #2
 800a2d4:	68ba      	ldr	r2, [r7, #8]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d301      	bcc.n	800a2de <find_bitmap+0x22>
 800a2da:	2300      	movs	r3, #0
 800a2dc:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	61fb      	str	r3, [r7, #28]
 800a2e2:	69fb      	ldr	r3, [r7, #28]
 800a2e4:	61bb      	str	r3, [r7, #24]
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2ee:	69fb      	ldr	r3, [r7, #28]
 800a2f0:	0b1b      	lsrs	r3, r3, #12
 800a2f2:	4413      	add	r3, r2
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	68f8      	ldr	r0, [r7, #12]
 800a2f8:	f7ff fd1c 	bl	8009d34 <move_window>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d002      	beq.n	800a308 <find_bitmap+0x4c>
 800a302:	f04f 33ff 	mov.w	r3, #4294967295
 800a306:	e051      	b.n	800a3ac <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800a308:	69fb      	ldr	r3, [r7, #28]
 800a30a:	08db      	lsrs	r3, r3, #3
 800a30c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a310:	623b      	str	r3, [r7, #32]
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	f003 0307 	and.w	r3, r3, #7
 800a318:	2201      	movs	r2, #1
 800a31a:	fa02 f303 	lsl.w	r3, r2, r3
 800a31e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	6a3b      	ldr	r3, [r7, #32]
 800a326:	4413      	add	r3, r2
 800a328:	3338      	adds	r3, #56	; 0x38
 800a32a:	781a      	ldrb	r2, [r3, #0]
 800a32c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a330:	4013      	ands	r3, r2
 800a332:	74fb      	strb	r3, [r7, #19]
 800a334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a338:	005b      	lsls	r3, r3, #1
 800a33a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	3301      	adds	r3, #1
 800a342:	61fb      	str	r3, [r7, #28]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	69db      	ldr	r3, [r3, #28]
 800a348:	3b02      	subs	r3, #2
 800a34a:	69fa      	ldr	r2, [r7, #28]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d307      	bcc.n	800a360 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800a350:	2300      	movs	r3, #0
 800a352:	61fb      	str	r3, [r7, #28]
 800a354:	2300      	movs	r3, #0
 800a356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a35a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a35e:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800a360:	7cfb      	ldrb	r3, [r7, #19]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d109      	bne.n	800a37a <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	3301      	adds	r3, #1
 800a36a:	617b      	str	r3, [r7, #20]
 800a36c:	697a      	ldr	r2, [r7, #20]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	429a      	cmp	r2, r3
 800a372:	d106      	bne.n	800a382 <find_bitmap+0xc6>
 800a374:	69bb      	ldr	r3, [r7, #24]
 800a376:	3302      	adds	r3, #2
 800a378:	e018      	b.n	800a3ac <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800a37a:	69fb      	ldr	r3, [r7, #28]
 800a37c:	61bb      	str	r3, [r7, #24]
 800a37e:	2300      	movs	r3, #0
 800a380:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800a382:	69fa      	ldr	r2, [r7, #28]
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	429a      	cmp	r2, r3
 800a388:	d101      	bne.n	800a38e <find_bitmap+0xd2>
 800a38a:	2300      	movs	r3, #0
 800a38c:	e00e      	b.n	800a3ac <find_bitmap+0xf0>
			} while (bm);
 800a38e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a392:	2b00      	cmp	r3, #0
 800a394:	d1c5      	bne.n	800a322 <find_bitmap+0x66>
			bm = 1;
 800a396:	2301      	movs	r3, #1
 800a398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800a39c:	6a3b      	ldr	r3, [r7, #32]
 800a39e:	3301      	adds	r3, #1
 800a3a0:	623b      	str	r3, [r7, #32]
 800a3a2:	6a3b      	ldr	r3, [r7, #32]
 800a3a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3a8:	d3bb      	bcc.n	800a322 <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800a3aa:	e79e      	b.n	800a2ea <find_bitmap+0x2e>
	}
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3728      	adds	r7, #40	; 0x28
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b088      	sub	sp, #32
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	60b9      	str	r1, [r7, #8]
 800a3be:	607a      	str	r2, [r7, #4]
 800a3c0:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	3b02      	subs	r3, #2
 800a3c6:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	0b1b      	lsrs	r3, r3, #12
 800a3d0:	4413      	add	r3, r2
 800a3d2:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	08db      	lsrs	r3, r3, #3
 800a3d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3dc:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	f003 0307 	and.w	r3, r3, #7
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ea:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	1c5a      	adds	r2, r3, #1
 800a3f0:	617a      	str	r2, [r7, #20]
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	f7ff fc9d 	bl	8009d34 <move_window>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d001      	beq.n	800a404 <change_bitmap+0x50>
 800a400:	2301      	movs	r3, #1
 800a402:	e03d      	b.n	800a480 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800a404:	68fa      	ldr	r2, [r7, #12]
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	4413      	add	r3, r2
 800a40a:	3338      	adds	r3, #56	; 0x38
 800a40c:	781a      	ldrb	r2, [r3, #0]
 800a40e:	7ffb      	ldrb	r3, [r7, #31]
 800a410:	4013      	ands	r3, r2
 800a412:	b2db      	uxtb	r3, r3
 800a414:	2b00      	cmp	r3, #0
 800a416:	bf14      	ite	ne
 800a418:	2301      	movne	r3, #1
 800a41a:	2300      	moveq	r3, #0
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	461a      	mov	r2, r3
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	4293      	cmp	r3, r2
 800a424:	d101      	bne.n	800a42a <change_bitmap+0x76>
 800a426:	2302      	movs	r3, #2
 800a428:	e02a      	b.n	800a480 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 800a42a:	68fa      	ldr	r2, [r7, #12]
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	4413      	add	r3, r2
 800a430:	3338      	adds	r3, #56	; 0x38
 800a432:	781a      	ldrb	r2, [r3, #0]
 800a434:	7ffb      	ldrb	r3, [r7, #31]
 800a436:	4053      	eors	r3, r2
 800a438:	b2d9      	uxtb	r1, r3
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	69bb      	ldr	r3, [r7, #24]
 800a43e:	4413      	add	r3, r2
 800a440:	3338      	adds	r3, #56	; 0x38
 800a442:	460a      	mov	r2, r1
 800a444:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2201      	movs	r2, #1
 800a44a:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	3b01      	subs	r3, #1
 800a450:	607b      	str	r3, [r7, #4]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d101      	bne.n	800a45c <change_bitmap+0xa8>
 800a458:	2300      	movs	r3, #0
 800a45a:	e011      	b.n	800a480 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 800a45c:	7ffb      	ldrb	r3, [r7, #31]
 800a45e:	005b      	lsls	r3, r3, #1
 800a460:	77fb      	strb	r3, [r7, #31]
 800a462:	7ffb      	ldrb	r3, [r7, #31]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d1cd      	bne.n	800a404 <change_bitmap+0x50>
			bm = 1;
 800a468:	2301      	movs	r3, #1
 800a46a:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800a46c:	69bb      	ldr	r3, [r7, #24]
 800a46e:	3301      	adds	r3, #1
 800a470:	61bb      	str	r3, [r7, #24]
 800a472:	69bb      	ldr	r3, [r7, #24]
 800a474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a478:	d3c4      	bcc.n	800a404 <change_bitmap+0x50>
		i = 0;
 800a47a:	2300      	movs	r3, #0
 800a47c:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800a47e:	e7b5      	b.n	800a3ec <change_bitmap+0x38>
	}
}
 800a480:	4618      	mov	r0, r3
 800a482:	3720      	adds	r7, #32
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b086      	sub	sp, #24
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	79db      	ldrb	r3, [r3, #7]
 800a494:	2b03      	cmp	r3, #3
 800a496:	d121      	bne.n	800a4dc <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	617b      	str	r3, [r7, #20]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	699b      	ldr	r3, [r3, #24]
 800a4a2:	613b      	str	r3, [r7, #16]
 800a4a4:	e014      	b.n	800a4d0 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6818      	ldr	r0, [r3, #0]
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	6979      	ldr	r1, [r7, #20]
 800a4b2:	f7ff fe13 	bl	800a0dc <put_fat>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800a4ba:	7bfb      	ldrb	r3, [r7, #15]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d001      	beq.n	800a4c4 <fill_first_frag+0x3c>
 800a4c0:	7bfb      	ldrb	r3, [r7, #15]
 800a4c2:	e00c      	b.n	800a4de <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	617b      	str	r3, [r7, #20]
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	613b      	str	r3, [r7, #16]
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d1e7      	bne.n	800a4a6 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3718      	adds	r7, #24
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b086      	sub	sp, #24
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	60f8      	str	r0, [r7, #12]
 800a4ee:	60b9      	str	r1, [r7, #8]
 800a4f0:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800a4f2:	e020      	b.n	800a536 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	6818      	ldr	r0, [r3, #0]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	69db      	ldr	r3, [r3, #28]
 800a4fc:	68ba      	ldr	r2, [r7, #8]
 800a4fe:	1ad3      	subs	r3, r2, r3
 800a500:	1c59      	adds	r1, r3, #1
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	69db      	ldr	r3, [r3, #28]
 800a506:	2b01      	cmp	r3, #1
 800a508:	d905      	bls.n	800a516 <fill_last_frag+0x30>
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	69db      	ldr	r3, [r3, #28]
 800a50e:	68ba      	ldr	r2, [r7, #8]
 800a510:	1ad3      	subs	r3, r2, r3
 800a512:	3302      	adds	r3, #2
 800a514:	e000      	b.n	800a518 <fill_last_frag+0x32>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	461a      	mov	r2, r3
 800a51a:	f7ff fddf 	bl	800a0dc <put_fat>
 800a51e:	4603      	mov	r3, r0
 800a520:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800a522:	7dfb      	ldrb	r3, [r7, #23]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d001      	beq.n	800a52c <fill_last_frag+0x46>
 800a528:	7dfb      	ldrb	r3, [r7, #23]
 800a52a:	e009      	b.n	800a540 <fill_last_frag+0x5a>
		obj->n_frag--;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	69db      	ldr	r3, [r3, #28]
 800a530:	1e5a      	subs	r2, r3, #1
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	69db      	ldr	r3, [r3, #28]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d1da      	bne.n	800a4f4 <fill_last_frag+0xe>
	}
	return FR_OK;
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3718      	adds	r7, #24
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b08a      	sub	sp, #40	; 0x28
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a554:	2300      	movs	r3, #0
 800a556:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	627b      	str	r3, [r7, #36]	; 0x24
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d904      	bls.n	800a576 <remove_chain+0x2e>
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	69db      	ldr	r3, [r3, #28]
 800a570:	68ba      	ldr	r2, [r7, #8]
 800a572:	429a      	cmp	r2, r3
 800a574:	d301      	bcc.n	800a57a <remove_chain+0x32>
 800a576:	2302      	movs	r3, #2
 800a578:	e096      	b.n	800a6a8 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d014      	beq.n	800a5aa <remove_chain+0x62>
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	2b04      	cmp	r3, #4
 800a586:	d103      	bne.n	800a590 <remove_chain+0x48>
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	79db      	ldrb	r3, [r3, #7]
 800a58c:	2b02      	cmp	r3, #2
 800a58e:	d00c      	beq.n	800a5aa <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a590:	f04f 32ff 	mov.w	r2, #4294967295
 800a594:	6879      	ldr	r1, [r7, #4]
 800a596:	69b8      	ldr	r0, [r7, #24]
 800a598:	f7ff fda0 	bl	800a0dc <put_fat>
 800a59c:	4603      	mov	r3, r0
 800a59e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a5a0:	7ffb      	ldrb	r3, [r7, #31]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d001      	beq.n	800a5aa <remove_chain+0x62>
 800a5a6:	7ffb      	ldrb	r3, [r7, #31]
 800a5a8:	e07e      	b.n	800a6a8 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a5aa:	68b9      	ldr	r1, [r7, #8]
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	f7ff fc7b 	bl	8009ea8 <get_fat>
 800a5b2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d055      	beq.n	800a666 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d101      	bne.n	800a5c4 <remove_chain+0x7c>
 800a5c0:	2302      	movs	r3, #2
 800a5c2:	e071      	b.n	800a6a8 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ca:	d101      	bne.n	800a5d0 <remove_chain+0x88>
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e06b      	b.n	800a6a8 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800a5d0:	69bb      	ldr	r3, [r7, #24]
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	2b04      	cmp	r3, #4
 800a5d6:	d00b      	beq.n	800a5f0 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a5d8:	2200      	movs	r2, #0
 800a5da:	68b9      	ldr	r1, [r7, #8]
 800a5dc:	69b8      	ldr	r0, [r7, #24]
 800a5de:	f7ff fd7d 	bl	800a0dc <put_fat>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a5e6:	7ffb      	ldrb	r3, [r7, #31]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d001      	beq.n	800a5f0 <remove_chain+0xa8>
 800a5ec:	7ffb      	ldrb	r3, [r7, #31]
 800a5ee:	e05b      	b.n	800a6a8 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	699a      	ldr	r2, [r3, #24]
 800a5f4:	69bb      	ldr	r3, [r7, #24]
 800a5f6:	69db      	ldr	r3, [r3, #28]
 800a5f8:	3b02      	subs	r3, #2
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d20b      	bcs.n	800a616 <remove_chain+0xce>
			fs->free_clst++;
 800a5fe:	69bb      	ldr	r3, [r7, #24]
 800a600:	699b      	ldr	r3, [r3, #24]
 800a602:	1c5a      	adds	r2, r3, #1
 800a604:	69bb      	ldr	r3, [r7, #24]
 800a606:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800a608:	69bb      	ldr	r3, [r7, #24]
 800a60a:	791b      	ldrb	r3, [r3, #4]
 800a60c:	f043 0301 	orr.w	r3, r3, #1
 800a610:	b2da      	uxtb	r2, r3
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800a616:	6a3b      	ldr	r3, [r7, #32]
 800a618:	3301      	adds	r3, #1
 800a61a:	697a      	ldr	r2, [r7, #20]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d102      	bne.n	800a626 <remove_chain+0xde>
			ecl = nxt;
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	623b      	str	r3, [r7, #32]
 800a624:	e017      	b.n	800a656 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800a626:	69bb      	ldr	r3, [r7, #24]
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	2b04      	cmp	r3, #4
 800a62c:	d10f      	bne.n	800a64e <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800a62e:	6a3a      	ldr	r2, [r7, #32]
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	1ad3      	subs	r3, r2, r3
 800a634:	1c5a      	adds	r2, r3, #1
 800a636:	2300      	movs	r3, #0
 800a638:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a63a:	69b8      	ldr	r0, [r7, #24]
 800a63c:	f7ff feba 	bl	800a3b4 <change_bitmap>
 800a640:	4603      	mov	r3, r0
 800a642:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800a644:	7ffb      	ldrb	r3, [r7, #31]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d001      	beq.n	800a64e <remove_chain+0x106>
 800a64a:	7ffb      	ldrb	r3, [r7, #31]
 800a64c:	e02c      	b.n	800a6a8 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	623b      	str	r3, [r7, #32]
 800a652:	6a3b      	ldr	r3, [r7, #32]
 800a654:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	69db      	ldr	r3, [r3, #28]
 800a65e:	68ba      	ldr	r2, [r7, #8]
 800a660:	429a      	cmp	r2, r3
 800a662:	d3a2      	bcc.n	800a5aa <remove_chain+0x62>
 800a664:	e000      	b.n	800a668 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800a666:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800a668:	69bb      	ldr	r3, [r7, #24]
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	2b04      	cmp	r3, #4
 800a66e:	d11a      	bne.n	800a6a6 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d103      	bne.n	800a67e <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2200      	movs	r2, #0
 800a67a:	71da      	strb	r2, [r3, #7]
 800a67c:	e013      	b.n	800a6a6 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	79db      	ldrb	r3, [r3, #7]
 800a682:	2b03      	cmp	r3, #3
 800a684:	d10f      	bne.n	800a6a6 <remove_chain+0x15e>
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	689b      	ldr	r3, [r3, #8]
 800a68a:	687a      	ldr	r2, [r7, #4]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d30a      	bcc.n	800a6a6 <remove_chain+0x15e>
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	689a      	ldr	r2, [r3, #8]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	699b      	ldr	r3, [r3, #24]
 800a698:	4413      	add	r3, r2
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d802      	bhi.n	800a6a6 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2202      	movs	r2, #2
 800a6a4:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800a6a6:	2300      	movs	r3, #0
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3728      	adds	r7, #40	; 0x28
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b088      	sub	sp, #32
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d10d      	bne.n	800a6e2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	695b      	ldr	r3, [r3, #20]
 800a6ca:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d004      	beq.n	800a6dc <create_chain+0x2c>
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	69db      	ldr	r3, [r3, #28]
 800a6d6:	69ba      	ldr	r2, [r7, #24]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d31b      	bcc.n	800a714 <create_chain+0x64>
 800a6dc:	2301      	movs	r3, #1
 800a6de:	61bb      	str	r3, [r7, #24]
 800a6e0:	e018      	b.n	800a714 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a6e2:	6839      	ldr	r1, [r7, #0]
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f7ff fbdf 	bl	8009ea8 <get_fat>
 800a6ea:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d801      	bhi.n	800a6f6 <create_chain+0x46>
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e0d9      	b.n	800a8aa <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6fc:	d101      	bne.n	800a702 <create_chain+0x52>
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	e0d3      	b.n	800a8aa <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	69db      	ldr	r3, [r3, #28]
 800a706:	68fa      	ldr	r2, [r7, #12]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d201      	bcs.n	800a710 <create_chain+0x60>
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	e0cc      	b.n	800a8aa <create_chain+0x1fa>
		scl = clst;
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	2b04      	cmp	r3, #4
 800a71a:	d164      	bne.n	800a7e6 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800a71c:	2201      	movs	r2, #1
 800a71e:	69b9      	ldr	r1, [r7, #24]
 800a720:	6938      	ldr	r0, [r7, #16]
 800a722:	f7ff fdcb 	bl	800a2bc <find_bitmap>
 800a726:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800a728:	69fb      	ldr	r3, [r7, #28]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d003      	beq.n	800a736 <create_chain+0x86>
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a734:	d101      	bne.n	800a73a <create_chain+0x8a>
 800a736:	69fb      	ldr	r3, [r7, #28]
 800a738:	e0b7      	b.n	800a8aa <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800a73a:	2301      	movs	r3, #1
 800a73c:	2201      	movs	r2, #1
 800a73e:	69f9      	ldr	r1, [r7, #28]
 800a740:	6938      	ldr	r0, [r7, #16]
 800a742:	f7ff fe37 	bl	800a3b4 <change_bitmap>
 800a746:	4603      	mov	r3, r0
 800a748:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800a74a:	7dfb      	ldrb	r3, [r7, #23]
 800a74c:	2b02      	cmp	r3, #2
 800a74e:	d101      	bne.n	800a754 <create_chain+0xa4>
 800a750:	2301      	movs	r3, #1
 800a752:	e0aa      	b.n	800a8aa <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800a754:	7dfb      	ldrb	r3, [r7, #23]
 800a756:	2b01      	cmp	r3, #1
 800a758:	d102      	bne.n	800a760 <create_chain+0xb0>
 800a75a:	f04f 33ff 	mov.w	r3, #4294967295
 800a75e:	e0a4      	b.n	800a8aa <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d103      	bne.n	800a76e <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2202      	movs	r2, #2
 800a76a:	71da      	strb	r2, [r3, #7]
 800a76c:	e011      	b.n	800a792 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	79db      	ldrb	r3, [r3, #7]
 800a772:	2b02      	cmp	r3, #2
 800a774:	d10d      	bne.n	800a792 <create_chain+0xe2>
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	3301      	adds	r3, #1
 800a77a:	69fa      	ldr	r2, [r7, #28]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d008      	beq.n	800a792 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	69ba      	ldr	r2, [r7, #24]
 800a786:	1ad2      	subs	r2, r2, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2203      	movs	r2, #3
 800a790:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	79db      	ldrb	r3, [r3, #7]
 800a796:	2b02      	cmp	r3, #2
 800a798:	d064      	beq.n	800a864 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	3301      	adds	r3, #1
 800a79e:	69fa      	ldr	r2, [r7, #28]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d10b      	bne.n	800a7bc <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	69db      	ldr	r3, [r3, #28]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d003      	beq.n	800a7b4 <create_chain+0x104>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	69db      	ldr	r3, [r3, #28]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	e000      	b.n	800a7b6 <create_chain+0x106>
 800a7b4:	2302      	movs	r3, #2
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	61d3      	str	r3, [r2, #28]
 800a7ba:	e053      	b.n	800a864 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	69db      	ldr	r3, [r3, #28]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d102      	bne.n	800a7ca <create_chain+0x11a>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800a7ca:	69fa      	ldr	r2, [r7, #28]
 800a7cc:	6839      	ldr	r1, [r7, #0]
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f7ff fe89 	bl	800a4e6 <fill_last_frag>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800a7d8:	7dfb      	ldrb	r3, [r7, #23]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d142      	bne.n	800a864 <create_chain+0x1b4>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	61da      	str	r2, [r3, #28]
 800a7e4:	e03e      	b.n	800a864 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a7e6:	69bb      	ldr	r3, [r7, #24]
 800a7e8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a7ea:	69fb      	ldr	r3, [r7, #28]
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	69db      	ldr	r3, [r3, #28]
 800a7f4:	69fa      	ldr	r2, [r7, #28]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d307      	bcc.n	800a80a <create_chain+0x15a>
				ncl = 2;
 800a7fa:	2302      	movs	r3, #2
 800a7fc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a7fe:	69fa      	ldr	r2, [r7, #28]
 800a800:	69bb      	ldr	r3, [r7, #24]
 800a802:	429a      	cmp	r2, r3
 800a804:	d901      	bls.n	800a80a <create_chain+0x15a>
 800a806:	2300      	movs	r3, #0
 800a808:	e04f      	b.n	800a8aa <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a80a:	69f9      	ldr	r1, [r7, #28]
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f7ff fb4b 	bl	8009ea8 <get_fat>
 800a812:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d00e      	beq.n	800a838 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d003      	beq.n	800a828 <create_chain+0x178>
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a826:	d101      	bne.n	800a82c <create_chain+0x17c>
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	e03e      	b.n	800a8aa <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800a82c:	69fa      	ldr	r2, [r7, #28]
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	429a      	cmp	r2, r3
 800a832:	d1da      	bne.n	800a7ea <create_chain+0x13a>
 800a834:	2300      	movs	r3, #0
 800a836:	e038      	b.n	800a8aa <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800a838:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a83a:	f04f 32ff 	mov.w	r2, #4294967295
 800a83e:	69f9      	ldr	r1, [r7, #28]
 800a840:	6938      	ldr	r0, [r7, #16]
 800a842:	f7ff fc4b 	bl	800a0dc <put_fat>
 800a846:	4603      	mov	r3, r0
 800a848:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a84a:	7dfb      	ldrb	r3, [r7, #23]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d109      	bne.n	800a864 <create_chain+0x1b4>
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d006      	beq.n	800a864 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a856:	69fa      	ldr	r2, [r7, #28]
 800a858:	6839      	ldr	r1, [r7, #0]
 800a85a:	6938      	ldr	r0, [r7, #16]
 800a85c:	f7ff fc3e 	bl	800a0dc <put_fat>
 800a860:	4603      	mov	r3, r0
 800a862:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a864:	7dfb      	ldrb	r3, [r7, #23]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d116      	bne.n	800a898 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	69fa      	ldr	r2, [r7, #28]
 800a86e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	699a      	ldr	r2, [r3, #24]
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	69db      	ldr	r3, [r3, #28]
 800a878:	3b02      	subs	r3, #2
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d804      	bhi.n	800a888 <create_chain+0x1d8>
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	699b      	ldr	r3, [r3, #24]
 800a882:	1e5a      	subs	r2, r3, #1
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	791b      	ldrb	r3, [r3, #4]
 800a88c:	f043 0301 	orr.w	r3, r3, #1
 800a890:	b2da      	uxtb	r2, r3
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	711a      	strb	r2, [r3, #4]
 800a896:	e007      	b.n	800a8a8 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a898:	7dfb      	ldrb	r3, [r7, #23]
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d102      	bne.n	800a8a4 <create_chain+0x1f4>
 800a89e:	f04f 33ff 	mov.w	r3, #4294967295
 800a8a2:	e000      	b.n	800a8a6 <create_chain+0x1f6>
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a8a8:	69fb      	ldr	r3, [r7, #28]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3720      	adds	r7, #32
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a8b2:	b5b0      	push	{r4, r5, r7, lr}
 800a8b4:	b088      	sub	sp, #32
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	60f8      	str	r0, [r7, #12]
 800a8ba:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8c8:	3304      	adds	r3, #4
 800a8ca:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a8cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8d0:	f04f 0000 	mov.w	r0, #0
 800a8d4:	f04f 0100 	mov.w	r1, #0
 800a8d8:	0a50      	lsrs	r0, r2, #9
 800a8da:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800a8de:	0a59      	lsrs	r1, r3, #9
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	895b      	ldrh	r3, [r3, #10]
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	461c      	mov	r4, r3
 800a8ea:	4615      	mov	r5, r2
 800a8ec:	4622      	mov	r2, r4
 800a8ee:	462b      	mov	r3, r5
 800a8f0:	f7f5 fca6 	bl	8000240 <__aeabi_uldivmod>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	4613      	mov	r3, r2
 800a8fa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	1d1a      	adds	r2, r3, #4
 800a900:	61ba      	str	r2, [r7, #24]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d101      	bne.n	800a910 <clmt_clust+0x5e>
 800a90c:	2300      	movs	r3, #0
 800a90e:	e010      	b.n	800a932 <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 800a910:	69fa      	ldr	r2, [r7, #28]
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	429a      	cmp	r2, r3
 800a916:	d307      	bcc.n	800a928 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 800a918:	69fa      	ldr	r2, [r7, #28]
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	1ad3      	subs	r3, r2, r3
 800a91e:	61fb      	str	r3, [r7, #28]
 800a920:	69bb      	ldr	r3, [r7, #24]
 800a922:	3304      	adds	r3, #4
 800a924:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a926:	e7e9      	b.n	800a8fc <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 800a928:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a92a:	69bb      	ldr	r3, [r7, #24]
 800a92c:	681a      	ldr	r2, [r3, #0]
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	4413      	add	r3, r2
}
 800a932:	4618      	mov	r0, r3
 800a934:	3720      	adds	r7, #32
 800a936:	46bd      	mov	sp, r7
 800a938:	bdb0      	pop	{r4, r5, r7, pc}

0800a93a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b086      	sub	sp, #24
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
 800a942:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	2b04      	cmp	r3, #4
 800a950:	d102      	bne.n	800a958 <dir_sdi+0x1e>
 800a952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a956:	e001      	b.n	800a95c <dir_sdi+0x22>
 800a958:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d904      	bls.n	800a96c <dir_sdi+0x32>
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	f003 031f 	and.w	r3, r3, #31
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d001      	beq.n	800a970 <dir_sdi+0x36>
		return FR_INT_ERR;
 800a96c:	2302      	movs	r3, #2
 800a96e:	e066      	b.n	800aa3e <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	683a      	ldr	r2, [r7, #0]
 800a974:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	689b      	ldr	r3, [r3, #8]
 800a97a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d109      	bne.n	800a996 <dir_sdi+0x5c>
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	2b02      	cmp	r3, #2
 800a988:	d905      	bls.n	800a996 <dir_sdi+0x5c>
		clst = fs->dirbase;
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a98e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2200      	movs	r2, #0
 800a994:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d10c      	bne.n	800a9b6 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	095b      	lsrs	r3, r3, #5
 800a9a0:	693a      	ldr	r2, [r7, #16]
 800a9a2:	8912      	ldrh	r2, [r2, #8]
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d301      	bcc.n	800a9ac <dir_sdi+0x72>
 800a9a8:	2302      	movs	r3, #2
 800a9aa:	e048      	b.n	800aa3e <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	639a      	str	r2, [r3, #56]	; 0x38
 800a9b4:	e029      	b.n	800aa0a <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	895b      	ldrh	r3, [r3, #10]
 800a9ba:	025b      	lsls	r3, r3, #9
 800a9bc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a9be:	e019      	b.n	800a9f4 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6979      	ldr	r1, [r7, #20]
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7ff fa6f 	bl	8009ea8 <get_fat>
 800a9ca:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d2:	d101      	bne.n	800a9d8 <dir_sdi+0x9e>
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	e032      	b.n	800aa3e <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d904      	bls.n	800a9e8 <dir_sdi+0xae>
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	69db      	ldr	r3, [r3, #28]
 800a9e2:	697a      	ldr	r2, [r7, #20]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d301      	bcc.n	800a9ec <dir_sdi+0xb2>
 800a9e8:	2302      	movs	r3, #2
 800a9ea:	e028      	b.n	800aa3e <dir_sdi+0x104>
			ofs -= csz;
 800a9ec:	683a      	ldr	r2, [r7, #0]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	1ad3      	subs	r3, r2, r3
 800a9f2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a9f4:	683a      	ldr	r2, [r7, #0]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d2e1      	bcs.n	800a9c0 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 800a9fc:	6979      	ldr	r1, [r7, #20]
 800a9fe:	6938      	ldr	r0, [r7, #16]
 800aa00:	f7ff fa34 	bl	8009e6c <clust2sect>
 800aa04:	4602      	mov	r2, r0
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	697a      	ldr	r2, [r7, #20]
 800aa0e:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d101      	bne.n	800aa1c <dir_sdi+0xe2>
 800aa18:	2302      	movs	r3, #2
 800aa1a:	e010      	b.n	800aa3e <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	0a5b      	lsrs	r3, r3, #9
 800aa24:	441a      	add	r2, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa36:	441a      	add	r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800aa3c:	2300      	movs	r3, #0
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3718      	adds	r7, #24
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b086      	sub	sp, #24
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
 800aa4e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa5a:	3320      	adds	r3, #32
 800aa5c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d00b      	beq.n	800aa7e <dir_next+0x38>
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	2b04      	cmp	r3, #4
 800aa6c:	d102      	bne.n	800aa74 <dir_next+0x2e>
 800aa6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa72:	e001      	b.n	800aa78 <dir_next+0x32>
 800aa74:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d801      	bhi.n	800aa82 <dir_next+0x3c>
 800aa7e:	2304      	movs	r3, #4
 800aa80:	e0b2      	b.n	800abe8 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	f040 80a0 	bne.w	800abce <dir_next+0x188>
		dp->sect++;				/* Next sector */
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa92:	1c5a      	adds	r2, r3, #1
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d10b      	bne.n	800aab8 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	095b      	lsrs	r3, r3, #5
 800aaa4:	68fa      	ldr	r2, [r7, #12]
 800aaa6:	8912      	ldrh	r2, [r2, #8]
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	f0c0 8090 	bcc.w	800abce <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2200      	movs	r2, #0
 800aab2:	639a      	str	r2, [r3, #56]	; 0x38
 800aab4:	2304      	movs	r3, #4
 800aab6:	e097      	b.n	800abe8 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	0a5b      	lsrs	r3, r3, #9
 800aabc:	68fa      	ldr	r2, [r7, #12]
 800aabe:	8952      	ldrh	r2, [r2, #10]
 800aac0:	3a01      	subs	r2, #1
 800aac2:	4013      	ands	r3, r2
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	f040 8082 	bne.w	800abce <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aad0:	4619      	mov	r1, r3
 800aad2:	4610      	mov	r0, r2
 800aad4:	f7ff f9e8 	bl	8009ea8 <get_fat>
 800aad8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d801      	bhi.n	800aae4 <dir_next+0x9e>
 800aae0:	2302      	movs	r3, #2
 800aae2:	e081      	b.n	800abe8 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaea:	d101      	bne.n	800aaf0 <dir_next+0xaa>
 800aaec:	2301      	movs	r3, #1
 800aaee:	e07b      	b.n	800abe8 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	69db      	ldr	r3, [r3, #28]
 800aaf4:	697a      	ldr	r2, [r7, #20]
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d35f      	bcc.n	800abba <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d104      	bne.n	800ab0a <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2200      	movs	r2, #0
 800ab04:	639a      	str	r2, [r3, #56]	; 0x38
 800ab06:	2304      	movs	r3, #4
 800ab08:	e06e      	b.n	800abe8 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab10:	4619      	mov	r1, r3
 800ab12:	4610      	mov	r0, r2
 800ab14:	f7ff fdcc 	bl	800a6b0 <create_chain>
 800ab18:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d101      	bne.n	800ab24 <dir_next+0xde>
 800ab20:	2307      	movs	r3, #7
 800ab22:	e061      	b.n	800abe8 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d101      	bne.n	800ab2e <dir_next+0xe8>
 800ab2a:	2302      	movs	r3, #2
 800ab2c:	e05c      	b.n	800abe8 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab34:	d101      	bne.n	800ab3a <dir_next+0xf4>
 800ab36:	2301      	movs	r3, #1
 800ab38:	e056      	b.n	800abe8 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	79db      	ldrb	r3, [r3, #7]
 800ab3e:	f043 0304 	orr.w	r3, r3, #4
 800ab42:	b2da      	uxtb	r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ab48:	68f8      	ldr	r0, [r7, #12]
 800ab4a:	f7ff f8af 	bl	8009cac <sync_window>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d001      	beq.n	800ab58 <dir_next+0x112>
 800ab54:	2301      	movs	r3, #1
 800ab56:	e047      	b.n	800abe8 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	3338      	adds	r3, #56	; 0x38
 800ab5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab60:	2100      	movs	r1, #0
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7fe fee2 	bl	800992c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ab68:	2300      	movs	r3, #0
 800ab6a:	613b      	str	r3, [r7, #16]
 800ab6c:	6979      	ldr	r1, [r7, #20]
 800ab6e:	68f8      	ldr	r0, [r7, #12]
 800ab70:	f7ff f97c 	bl	8009e6c <clust2sect>
 800ab74:	4602      	mov	r2, r0
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	635a      	str	r2, [r3, #52]	; 0x34
 800ab7a:	e012      	b.n	800aba2 <dir_next+0x15c>
						fs->wflag = 1;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ab82:	68f8      	ldr	r0, [r7, #12]
 800ab84:	f7ff f892 	bl	8009cac <sync_window>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d001      	beq.n	800ab92 <dir_next+0x14c>
 800ab8e:	2301      	movs	r3, #1
 800ab90:	e02a      	b.n	800abe8 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	3301      	adds	r3, #1
 800ab96:	613b      	str	r3, [r7, #16]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab9c:	1c5a      	adds	r2, r3, #1
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	635a      	str	r2, [r3, #52]	; 0x34
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	895b      	ldrh	r3, [r3, #10]
 800aba6:	461a      	mov	r2, r3
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	4293      	cmp	r3, r2
 800abac:	d3e6      	bcc.n	800ab7c <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	1ad2      	subs	r2, r2, r3
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	697a      	ldr	r2, [r7, #20]
 800abbe:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800abc0:	6979      	ldr	r1, [r7, #20]
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f7ff f952 	bl	8009e6c <clust2sect>
 800abc8:	4602      	mov	r2, r0
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	68ba      	ldr	r2, [r7, #8]
 800abd2:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abe0:	441a      	add	r2, r3
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800abe6:	2300      	movs	r3, #0
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3718      	adds	r7, #24
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b086      	sub	sp, #24
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ac00:	2100      	movs	r1, #0
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f7ff fe99 	bl	800a93a <dir_sdi>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ac0c:	7dfb      	ldrb	r3, [r7, #23]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d140      	bne.n	800ac94 <dir_alloc+0xa4>
		n = 0;
 800ac12:	2300      	movs	r3, #0
 800ac14:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	68f8      	ldr	r0, [r7, #12]
 800ac1e:	f7ff f889 	bl	8009d34 <move_window>
 800ac22:	4603      	mov	r3, r0
 800ac24:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ac26:	7dfb      	ldrb	r3, [r7, #23]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d132      	bne.n	800ac92 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	2b04      	cmp	r3, #4
 800ac32:	d108      	bne.n	800ac46 <dir_alloc+0x56>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	b25b      	sxtb	r3, r3
 800ac3c:	43db      	mvns	r3, r3
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	09db      	lsrs	r3, r3, #7
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	e00f      	b.n	800ac66 <dir_alloc+0x76>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	2be5      	cmp	r3, #229	; 0xe5
 800ac4e:	d004      	beq.n	800ac5a <dir_alloc+0x6a>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d101      	bne.n	800ac5e <dir_alloc+0x6e>
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	e000      	b.n	800ac60 <dir_alloc+0x70>
 800ac5e:	2300      	movs	r3, #0
 800ac60:	f003 0301 	and.w	r3, r3, #1
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d007      	beq.n	800ac7a <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	3301      	adds	r3, #1
 800ac6e:	613b      	str	r3, [r7, #16]
 800ac70:	693a      	ldr	r2, [r7, #16]
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d102      	bne.n	800ac7e <dir_alloc+0x8e>
 800ac78:	e00c      	b.n	800ac94 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ac7e:	2101      	movs	r1, #1
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f7ff fee0 	bl	800aa46 <dir_next>
 800ac86:	4603      	mov	r3, r0
 800ac88:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ac8a:	7dfb      	ldrb	r3, [r7, #23]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d0c2      	beq.n	800ac16 <dir_alloc+0x26>
 800ac90:	e000      	b.n	800ac94 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800ac92:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ac94:	7dfb      	ldrb	r3, [r7, #23]
 800ac96:	2b04      	cmp	r3, #4
 800ac98:	d101      	bne.n	800ac9e <dir_alloc+0xae>
 800ac9a:	2307      	movs	r3, #7
 800ac9c:	75fb      	strb	r3, [r7, #23]
	return res;
 800ac9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3718      	adds	r7, #24
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b084      	sub	sp, #16
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	331a      	adds	r3, #26
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7fe fc3a 	bl	8009530 <ld_word>
 800acbc:	4603      	mov	r3, r0
 800acbe:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	2b03      	cmp	r3, #3
 800acc6:	d109      	bne.n	800acdc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	3314      	adds	r3, #20
 800accc:	4618      	mov	r0, r3
 800acce:	f7fe fc2f 	bl	8009530 <ld_word>
 800acd2:	4603      	mov	r3, r0
 800acd4:	041b      	lsls	r3, r3, #16
 800acd6:	68fa      	ldr	r2, [r7, #12]
 800acd8:	4313      	orrs	r3, r2
 800acda:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800acdc:	68fb      	ldr	r3, [r7, #12]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3710      	adds	r7, #16
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}

0800ace6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b084      	sub	sp, #16
 800acea:	af00      	add	r7, sp, #0
 800acec:	60f8      	str	r0, [r7, #12]
 800acee:	60b9      	str	r1, [r7, #8]
 800acf0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	331a      	adds	r3, #26
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	b292      	uxth	r2, r2
 800acfa:	4611      	mov	r1, r2
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7fe fd29 	bl	8009754 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	2b03      	cmp	r3, #3
 800ad08:	d109      	bne.n	800ad1e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	f103 0214 	add.w	r2, r3, #20
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	0c1b      	lsrs	r3, r3, #16
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	4619      	mov	r1, r3
 800ad18:	4610      	mov	r0, r2
 800ad1a:	f7fe fd1b 	bl	8009754 <st_word>
	}
}
 800ad1e:	bf00      	nop
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
	...

0800ad28 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ad28:	b590      	push	{r4, r7, lr}
 800ad2a:	b087      	sub	sp, #28
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	331a      	adds	r3, #26
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7fe fbfa 	bl	8009530 <ld_word>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d001      	beq.n	800ad46 <cmp_lfn+0x1e>
 800ad42:	2300      	movs	r3, #0
 800ad44:	e059      	b.n	800adfa <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad4e:	1e5a      	subs	r2, r3, #1
 800ad50:	4613      	mov	r3, r2
 800ad52:	005b      	lsls	r3, r3, #1
 800ad54:	4413      	add	r3, r2
 800ad56:	009b      	lsls	r3, r3, #2
 800ad58:	4413      	add	r3, r2
 800ad5a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	81fb      	strh	r3, [r7, #14]
 800ad60:	2300      	movs	r3, #0
 800ad62:	613b      	str	r3, [r7, #16]
 800ad64:	e033      	b.n	800adce <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ad66:	4a27      	ldr	r2, [pc, #156]	; (800ae04 <cmp_lfn+0xdc>)
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	4413      	add	r3, r2
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	461a      	mov	r2, r3
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	4413      	add	r3, r2
 800ad74:	4618      	mov	r0, r3
 800ad76:	f7fe fbdb 	bl	8009530 <ld_word>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ad7e:	89fb      	ldrh	r3, [r7, #14]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d01a      	beq.n	800adba <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	2bfe      	cmp	r3, #254	; 0xfe
 800ad88:	d812      	bhi.n	800adb0 <cmp_lfn+0x88>
 800ad8a:	89bb      	ldrh	r3, [r7, #12]
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f003 fbdf 	bl	800e550 <ff_wtoupper>
 800ad92:	4603      	mov	r3, r0
 800ad94:	461c      	mov	r4, r3
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	1c5a      	adds	r2, r3, #1
 800ad9a:	617a      	str	r2, [r7, #20]
 800ad9c:	005b      	lsls	r3, r3, #1
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	4413      	add	r3, r2
 800ada2:	881b      	ldrh	r3, [r3, #0]
 800ada4:	4618      	mov	r0, r3
 800ada6:	f003 fbd3 	bl	800e550 <ff_wtoupper>
 800adaa:	4603      	mov	r3, r0
 800adac:	429c      	cmp	r4, r3
 800adae:	d001      	beq.n	800adb4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800adb0:	2300      	movs	r3, #0
 800adb2:	e022      	b.n	800adfa <cmp_lfn+0xd2>
			}
			wc = uc;
 800adb4:	89bb      	ldrh	r3, [r7, #12]
 800adb6:	81fb      	strh	r3, [r7, #14]
 800adb8:	e006      	b.n	800adc8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800adba:	89bb      	ldrh	r3, [r7, #12]
 800adbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d001      	beq.n	800adc8 <cmp_lfn+0xa0>
 800adc4:	2300      	movs	r3, #0
 800adc6:	e018      	b.n	800adfa <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	3301      	adds	r3, #1
 800adcc:	613b      	str	r3, [r7, #16]
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	2b0c      	cmp	r3, #12
 800add2:	d9c8      	bls.n	800ad66 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800addc:	2b00      	cmp	r3, #0
 800adde:	d00b      	beq.n	800adf8 <cmp_lfn+0xd0>
 800ade0:	89fb      	ldrh	r3, [r7, #14]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d008      	beq.n	800adf8 <cmp_lfn+0xd0>
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	005b      	lsls	r3, r3, #1
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	4413      	add	r3, r2
 800adee:	881b      	ldrh	r3, [r3, #0]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d001      	beq.n	800adf8 <cmp_lfn+0xd0>
 800adf4:	2300      	movs	r3, #0
 800adf6:	e000      	b.n	800adfa <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800adf8:	2301      	movs	r3, #1
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	371c      	adds	r7, #28
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd90      	pop	{r4, r7, pc}
 800ae02:	bf00      	nop
 800ae04:	08011e5c 	.word	0x08011e5c

0800ae08 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b086      	sub	sp, #24
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	331a      	adds	r3, #26
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7fe fb8a 	bl	8009530 <ld_word>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d001      	beq.n	800ae26 <pick_lfn+0x1e>
 800ae22:	2300      	movs	r3, #0
 800ae24:	e04d      	b.n	800aec2 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae2e:	1e5a      	subs	r2, r3, #1
 800ae30:	4613      	mov	r3, r2
 800ae32:	005b      	lsls	r3, r3, #1
 800ae34:	4413      	add	r3, r2
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	4413      	add	r3, r2
 800ae3a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	81fb      	strh	r3, [r7, #14]
 800ae40:	2300      	movs	r3, #0
 800ae42:	613b      	str	r3, [r7, #16]
 800ae44:	e028      	b.n	800ae98 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ae46:	4a21      	ldr	r2, [pc, #132]	; (800aecc <pick_lfn+0xc4>)
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	4413      	add	r3, r2
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	461a      	mov	r2, r3
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	4413      	add	r3, r2
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7fe fb6b 	bl	8009530 <ld_word>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ae5e:	89fb      	ldrh	r3, [r7, #14]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d00f      	beq.n	800ae84 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	2bfe      	cmp	r3, #254	; 0xfe
 800ae68:	d901      	bls.n	800ae6e <pick_lfn+0x66>
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	e029      	b.n	800aec2 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800ae6e:	89bb      	ldrh	r3, [r7, #12]
 800ae70:	81fb      	strh	r3, [r7, #14]
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	1c5a      	adds	r2, r3, #1
 800ae76:	617a      	str	r2, [r7, #20]
 800ae78:	005b      	lsls	r3, r3, #1
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	4413      	add	r3, r2
 800ae7e:	89fa      	ldrh	r2, [r7, #14]
 800ae80:	801a      	strh	r2, [r3, #0]
 800ae82:	e006      	b.n	800ae92 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ae84:	89bb      	ldrh	r3, [r7, #12]
 800ae86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d001      	beq.n	800ae92 <pick_lfn+0x8a>
 800ae8e:	2300      	movs	r3, #0
 800ae90:	e017      	b.n	800aec2 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	3301      	adds	r3, #1
 800ae96:	613b      	str	r3, [r7, #16]
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	2b0c      	cmp	r3, #12
 800ae9c:	d9d3      	bls.n	800ae46 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00a      	beq.n	800aec0 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	2bfe      	cmp	r3, #254	; 0xfe
 800aeae:	d901      	bls.n	800aeb4 <pick_lfn+0xac>
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	e006      	b.n	800aec2 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	005b      	lsls	r3, r3, #1
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	4413      	add	r3, r2
 800aebc:	2200      	movs	r2, #0
 800aebe:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800aec0:	2301      	movs	r3, #1
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3718      	adds	r7, #24
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	08011e5c 	.word	0x08011e5c

0800aed0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b088      	sub	sp, #32
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	60b9      	str	r1, [r7, #8]
 800aeda:	4611      	mov	r1, r2
 800aedc:	461a      	mov	r2, r3
 800aede:	460b      	mov	r3, r1
 800aee0:	71fb      	strb	r3, [r7, #7]
 800aee2:	4613      	mov	r3, r2
 800aee4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	330d      	adds	r3, #13
 800aeea:	79ba      	ldrb	r2, [r7, #6]
 800aeec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	330b      	adds	r3, #11
 800aef2:	220f      	movs	r2, #15
 800aef4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	330c      	adds	r3, #12
 800aefa:	2200      	movs	r2, #0
 800aefc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	331a      	adds	r3, #26
 800af02:	2100      	movs	r1, #0
 800af04:	4618      	mov	r0, r3
 800af06:	f7fe fc25 	bl	8009754 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800af0a:	79fb      	ldrb	r3, [r7, #7]
 800af0c:	1e5a      	subs	r2, r3, #1
 800af0e:	4613      	mov	r3, r2
 800af10:	005b      	lsls	r3, r3, #1
 800af12:	4413      	add	r3, r2
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	4413      	add	r3, r2
 800af18:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800af1a:	2300      	movs	r3, #0
 800af1c:	82fb      	strh	r3, [r7, #22]
 800af1e:	2300      	movs	r3, #0
 800af20:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800af22:	8afb      	ldrh	r3, [r7, #22]
 800af24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af28:	4293      	cmp	r3, r2
 800af2a:	d007      	beq.n	800af3c <put_lfn+0x6c>
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	1c5a      	adds	r2, r3, #1
 800af30:	61fa      	str	r2, [r7, #28]
 800af32:	005b      	lsls	r3, r3, #1
 800af34:	68fa      	ldr	r2, [r7, #12]
 800af36:	4413      	add	r3, r2
 800af38:	881b      	ldrh	r3, [r3, #0]
 800af3a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800af3c:	4a17      	ldr	r2, [pc, #92]	; (800af9c <put_lfn+0xcc>)
 800af3e:	69bb      	ldr	r3, [r7, #24]
 800af40:	4413      	add	r3, r2
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	461a      	mov	r2, r3
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	4413      	add	r3, r2
 800af4a:	8afa      	ldrh	r2, [r7, #22]
 800af4c:	4611      	mov	r1, r2
 800af4e:	4618      	mov	r0, r3
 800af50:	f7fe fc00 	bl	8009754 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800af54:	8afb      	ldrh	r3, [r7, #22]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d102      	bne.n	800af60 <put_lfn+0x90>
 800af5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800af5e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	3301      	adds	r3, #1
 800af64:	61bb      	str	r3, [r7, #24]
 800af66:	69bb      	ldr	r3, [r7, #24]
 800af68:	2b0c      	cmp	r3, #12
 800af6a:	d9da      	bls.n	800af22 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800af6c:	8afb      	ldrh	r3, [r7, #22]
 800af6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af72:	4293      	cmp	r3, r2
 800af74:	d006      	beq.n	800af84 <put_lfn+0xb4>
 800af76:	69fb      	ldr	r3, [r7, #28]
 800af78:	005b      	lsls	r3, r3, #1
 800af7a:	68fa      	ldr	r2, [r7, #12]
 800af7c:	4413      	add	r3, r2
 800af7e:	881b      	ldrh	r3, [r3, #0]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d103      	bne.n	800af8c <put_lfn+0xbc>
 800af84:	79fb      	ldrb	r3, [r7, #7]
 800af86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af8a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	79fa      	ldrb	r2, [r7, #7]
 800af90:	701a      	strb	r2, [r3, #0]
}
 800af92:	bf00      	nop
 800af94:	3720      	adds	r7, #32
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	08011e5c 	.word	0x08011e5c

0800afa0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b08c      	sub	sp, #48	; 0x30
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	60b9      	str	r1, [r7, #8]
 800afaa:	607a      	str	r2, [r7, #4]
 800afac:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800afae:	220b      	movs	r2, #11
 800afb0:	68b9      	ldr	r1, [r7, #8]
 800afb2:	68f8      	ldr	r0, [r7, #12]
 800afb4:	f7fe fc9a 	bl	80098ec <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	2b05      	cmp	r3, #5
 800afbc:	d92b      	bls.n	800b016 <gen_numname+0x76>
		sr = seq;
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800afc2:	e022      	b.n	800b00a <gen_numname+0x6a>
			wc = *lfn++;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	1c9a      	adds	r2, r3, #2
 800afc8:	607a      	str	r2, [r7, #4]
 800afca:	881b      	ldrh	r3, [r3, #0]
 800afcc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800afce:	2300      	movs	r3, #0
 800afd0:	62bb      	str	r3, [r7, #40]	; 0x28
 800afd2:	e017      	b.n	800b004 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800afd4:	69fb      	ldr	r3, [r7, #28]
 800afd6:	005a      	lsls	r2, r3, #1
 800afd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800afda:	f003 0301 	and.w	r3, r3, #1
 800afde:	4413      	add	r3, r2
 800afe0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800afe2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800afe4:	085b      	lsrs	r3, r3, #1
 800afe6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800afe8:	69fb      	ldr	r3, [r7, #28]
 800afea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d005      	beq.n	800affe <gen_numname+0x5e>
 800aff2:	69fb      	ldr	r3, [r7, #28]
 800aff4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800aff8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800affc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800affe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b000:	3301      	adds	r3, #1
 800b002:	62bb      	str	r3, [r7, #40]	; 0x28
 800b004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b006:	2b0f      	cmp	r3, #15
 800b008:	d9e4      	bls.n	800afd4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	881b      	ldrh	r3, [r3, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d1d8      	bne.n	800afc4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b012:	69fb      	ldr	r3, [r7, #28]
 800b014:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b016:	2307      	movs	r3, #7
 800b018:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	f003 030f 	and.w	r3, r3, #15
 800b022:	b2db      	uxtb	r3, r3
 800b024:	3330      	adds	r3, #48	; 0x30
 800b026:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800b02a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b02e:	2b39      	cmp	r3, #57	; 0x39
 800b030:	d904      	bls.n	800b03c <gen_numname+0x9c>
 800b032:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b036:	3307      	adds	r3, #7
 800b038:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800b03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03e:	1e5a      	subs	r2, r3, #1
 800b040:	62ba      	str	r2, [r7, #40]	; 0x28
 800b042:	3330      	adds	r3, #48	; 0x30
 800b044:	443b      	add	r3, r7
 800b046:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b04a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	091b      	lsrs	r3, r3, #4
 800b052:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d1df      	bne.n	800b01a <gen_numname+0x7a>
	ns[i] = '~';
 800b05a:	f107 0214 	add.w	r2, r7, #20
 800b05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b060:	4413      	add	r3, r2
 800b062:	227e      	movs	r2, #126	; 0x7e
 800b064:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b066:	2300      	movs	r3, #0
 800b068:	627b      	str	r3, [r7, #36]	; 0x24
 800b06a:	e002      	b.n	800b072 <gen_numname+0xd2>
 800b06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06e:	3301      	adds	r3, #1
 800b070:	627b      	str	r3, [r7, #36]	; 0x24
 800b072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b076:	429a      	cmp	r2, r3
 800b078:	d205      	bcs.n	800b086 <gen_numname+0xe6>
 800b07a:	68fa      	ldr	r2, [r7, #12]
 800b07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07e:	4413      	add	r3, r2
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	2b20      	cmp	r3, #32
 800b084:	d1f2      	bne.n	800b06c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b088:	2b07      	cmp	r3, #7
 800b08a:	d807      	bhi.n	800b09c <gen_numname+0xfc>
 800b08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08e:	1c5a      	adds	r2, r3, #1
 800b090:	62ba      	str	r2, [r7, #40]	; 0x28
 800b092:	3330      	adds	r3, #48	; 0x30
 800b094:	443b      	add	r3, r7
 800b096:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b09a:	e000      	b.n	800b09e <gen_numname+0xfe>
 800b09c:	2120      	movs	r1, #32
 800b09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a0:	1c5a      	adds	r2, r3, #1
 800b0a2:	627a      	str	r2, [r7, #36]	; 0x24
 800b0a4:	68fa      	ldr	r2, [r7, #12]
 800b0a6:	4413      	add	r3, r2
 800b0a8:	460a      	mov	r2, r1
 800b0aa:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ae:	2b07      	cmp	r3, #7
 800b0b0:	d9e9      	bls.n	800b086 <gen_numname+0xe6>
}
 800b0b2:	bf00      	nop
 800b0b4:	bf00      	nop
 800b0b6:	3730      	adds	r7, #48	; 0x30
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}

0800b0bc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b085      	sub	sp, #20
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b0c8:	230b      	movs	r3, #11
 800b0ca:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b0cc:	7bfb      	ldrb	r3, [r7, #15]
 800b0ce:	b2da      	uxtb	r2, r3
 800b0d0:	0852      	lsrs	r2, r2, #1
 800b0d2:	01db      	lsls	r3, r3, #7
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	b2da      	uxtb	r2, r3
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	1c59      	adds	r1, r3, #1
 800b0dc:	6079      	str	r1, [r7, #4]
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	4413      	add	r3, r2
 800b0e2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	3b01      	subs	r3, #1
 800b0e8:	60bb      	str	r3, [r7, #8]
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d1ed      	bne.n	800b0cc <sum_sfn+0x10>
	return sum;
 800b0f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3714      	adds	r7, #20
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bc80      	pop	{r7}
 800b0fa:	4770      	bx	lr

0800b0fc <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b087      	sub	sp, #28
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	3301      	adds	r3, #1
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	3301      	adds	r3, #1
 800b10c:	015b      	lsls	r3, r3, #5
 800b10e:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800b110:	2300      	movs	r3, #0
 800b112:	827b      	strh	r3, [r7, #18]
 800b114:	2300      	movs	r3, #0
 800b116:	617b      	str	r3, [r7, #20]
 800b118:	e018      	b.n	800b14c <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	2b02      	cmp	r3, #2
 800b11e:	d103      	bne.n	800b128 <xdir_sum+0x2c>
			i++;
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	3301      	adds	r3, #1
 800b124:	617b      	str	r3, [r7, #20]
 800b126:	e00e      	b.n	800b146 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800b128:	8a7b      	ldrh	r3, [r7, #18]
 800b12a:	03db      	lsls	r3, r3, #15
 800b12c:	b29a      	uxth	r2, r3
 800b12e:	8a7b      	ldrh	r3, [r7, #18]
 800b130:	085b      	lsrs	r3, r3, #1
 800b132:	b29b      	uxth	r3, r3
 800b134:	4413      	add	r3, r2
 800b136:	b29a      	uxth	r2, r3
 800b138:	6879      	ldr	r1, [r7, #4]
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	440b      	add	r3, r1
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	b29b      	uxth	r3, r3
 800b142:	4413      	add	r3, r2
 800b144:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	3301      	adds	r3, #1
 800b14a:	617b      	str	r3, [r7, #20]
 800b14c:	697a      	ldr	r2, [r7, #20]
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	429a      	cmp	r2, r3
 800b152:	d3e2      	bcc.n	800b11a <xdir_sum+0x1e>
		}
	}
	return sum;
 800b154:	8a7b      	ldrh	r3, [r7, #18]
}
 800b156:	4618      	mov	r0, r3
 800b158:	371c      	adds	r7, #28
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bc80      	pop	{r7}
 800b15e:	4770      	bx	lr

0800b160 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800b168:	2300      	movs	r3, #0
 800b16a:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800b16c:	e01f      	b.n	800b1ae <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800b16e:	89bb      	ldrh	r3, [r7, #12]
 800b170:	4618      	mov	r0, r3
 800b172:	f003 f9ed 	bl	800e550 <ff_wtoupper>
 800b176:	4603      	mov	r3, r0
 800b178:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800b17a:	89fb      	ldrh	r3, [r7, #14]
 800b17c:	03db      	lsls	r3, r3, #15
 800b17e:	b29a      	uxth	r2, r3
 800b180:	89fb      	ldrh	r3, [r7, #14]
 800b182:	085b      	lsrs	r3, r3, #1
 800b184:	b29b      	uxth	r3, r3
 800b186:	4413      	add	r3, r2
 800b188:	b29a      	uxth	r2, r3
 800b18a:	89bb      	ldrh	r3, [r7, #12]
 800b18c:	b2db      	uxtb	r3, r3
 800b18e:	b29b      	uxth	r3, r3
 800b190:	4413      	add	r3, r2
 800b192:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800b194:	89fb      	ldrh	r3, [r7, #14]
 800b196:	03db      	lsls	r3, r3, #15
 800b198:	b29a      	uxth	r2, r3
 800b19a:	89fb      	ldrh	r3, [r7, #14]
 800b19c:	085b      	lsrs	r3, r3, #1
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	4413      	add	r3, r2
 800b1a2:	b29a      	uxth	r2, r3
 800b1a4:	89bb      	ldrh	r3, [r7, #12]
 800b1a6:	0a1b      	lsrs	r3, r3, #8
 800b1a8:	b29b      	uxth	r3, r3
 800b1aa:	4413      	add	r3, r2
 800b1ac:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	1c9a      	adds	r2, r3, #2
 800b1b2:	607a      	str	r2, [r7, #4]
 800b1b4:	881b      	ldrh	r3, [r3, #0]
 800b1b6:	81bb      	strh	r3, [r7, #12]
 800b1b8:	89bb      	ldrh	r3, [r7, #12]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d1d7      	bne.n	800b16e <xname_sum+0xe>
	}
	return sum;
 800b1be:	89fb      	ldrh	r3, [r7, #14]
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3710      	adds	r7, #16
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b086      	sub	sp, #24
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800b1d6:	2340      	movs	r3, #64	; 0x40
 800b1d8:	613b      	str	r3, [r7, #16]
 800b1da:	2300      	movs	r3, #0
 800b1dc:	60fb      	str	r3, [r7, #12]
 800b1de:	e02c      	b.n	800b23a <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	f003 031f 	and.w	r3, r3, #31
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d102      	bne.n	800b1f0 <get_xdir_info+0x28>
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	3302      	adds	r3, #2
 800b1ee:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	4413      	add	r3, r2
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7fe f99a 	bl	8009530 <ld_word>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2100      	movs	r1, #0
 800b200:	4618      	mov	r0, r3
 800b202:	f003 f96b 	bl	800e4dc <ff_convert>
 800b206:	4603      	mov	r3, r0
 800b208:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800b20a:	897b      	ldrh	r3, [r7, #10]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d002      	beq.n	800b216 <get_xdir_info+0x4e>
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	2bfe      	cmp	r3, #254	; 0xfe
 800b214:	d902      	bls.n	800b21c <get_xdir_info+0x54>
 800b216:	2300      	movs	r3, #0
 800b218:	617b      	str	r3, [r7, #20]
 800b21a:	e015      	b.n	800b248 <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	1c5a      	adds	r2, r3, #1
 800b220:	617a      	str	r2, [r7, #20]
 800b222:	897a      	ldrh	r2, [r7, #10]
 800b224:	b2d1      	uxtb	r1, r2
 800b226:	683a      	ldr	r2, [r7, #0]
 800b228:	4413      	add	r3, r2
 800b22a:	460a      	mov	r2, r1
 800b22c:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	3302      	adds	r3, #2
 800b232:	613b      	str	r3, [r7, #16]
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	3301      	adds	r3, #1
 800b238:	60fb      	str	r3, [r7, #12]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	3323      	adds	r3, #35	; 0x23
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	461a      	mov	r2, r3
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	4293      	cmp	r3, r2
 800b246:	d3cb      	bcc.n	800b1e0 <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d106      	bne.n	800b25c <get_xdir_info+0x94>
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	1c5a      	adds	r2, r3, #1
 800b252:	617a      	str	r2, [r7, #20]
 800b254:	683a      	ldr	r2, [r7, #0]
 800b256:	4413      	add	r3, r2
 800b258:	223f      	movs	r2, #63	; 0x3f
 800b25a:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 800b25c:	683a      	ldr	r2, [r7, #0]
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	4413      	add	r3, r2
 800b262:	331a      	adds	r3, #26
 800b264:	2200      	movs	r2, #0
 800b266:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	2200      	movs	r2, #0
 800b26c:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	791a      	ldrb	r2, [r3, #4]
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	7b1b      	ldrb	r3, [r3, #12]
 800b27a:	f003 0310 	and.w	r3, r3, #16
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d107      	bne.n	800b292 <get_xdir_info+0xca>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	3338      	adds	r3, #56	; 0x38
 800b286:	4618      	mov	r0, r3
 800b288:	f7fe f98b 	bl	80095a2 <ld_qword>
 800b28c:	4602      	mov	r2, r0
 800b28e:	460b      	mov	r3, r1
 800b290:	e003      	b.n	800b29a <get_xdir_info+0xd2>
 800b292:	f04f 0200 	mov.w	r2, #0
 800b296:	f04f 0300 	mov.w	r3, #0
 800b29a:	6839      	ldr	r1, [r7, #0]
 800b29c:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	330c      	adds	r3, #12
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7fe f943 	bl	8009530 <ld_word>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	330e      	adds	r3, #14
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7fe f93a 	bl	8009530 <ld_word>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	461a      	mov	r2, r3
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	811a      	strh	r2, [r3, #8]
}
 800b2c4:	bf00      	nop
 800b2c6:	3718      	adds	r7, #24
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800b2cc:	b590      	push	{r4, r7, lr}
 800b2ce:	b087      	sub	sp, #28
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	691b      	ldr	r3, [r3, #16]
 800b2da:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681a      	ldr	r2, [r3, #0]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	4610      	mov	r0, r2
 800b2e8:	f7fe fd24 	bl	8009d34 <move_window>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800b2f0:	7bfb      	ldrb	r3, [r7, #15]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d001      	beq.n	800b2fa <load_xdir+0x2e>
 800b2f6:	7bfb      	ldrb	r3, [r7, #15]
 800b2f8:	e09f      	b.n	800b43a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	2b85      	cmp	r3, #133	; 0x85
 800b302:	d001      	beq.n	800b308 <load_xdir+0x3c>
 800b304:	2302      	movs	r3, #2
 800b306:	e098      	b.n	800b43a <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b30c:	2220      	movs	r2, #32
 800b30e:	4619      	mov	r1, r3
 800b310:	6938      	ldr	r0, [r7, #16]
 800b312:	f7fe faeb 	bl	80098ec <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	3301      	adds	r3, #1
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	3301      	adds	r3, #1
 800b31e:	015b      	lsls	r3, r3, #5
 800b320:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	2b5f      	cmp	r3, #95	; 0x5f
 800b326:	d903      	bls.n	800b330 <load_xdir+0x64>
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800b32e:	d901      	bls.n	800b334 <load_xdir+0x68>
 800b330:	2302      	movs	r3, #2
 800b332:	e082      	b.n	800b43a <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800b334:	2100      	movs	r1, #0
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f7ff fb85 	bl	800aa46 <dir_next>
 800b33c:	4603      	mov	r3, r0
 800b33e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800b340:	7bfb      	ldrb	r3, [r7, #15]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d001      	beq.n	800b34a <load_xdir+0x7e>
 800b346:	7bfb      	ldrb	r3, [r7, #15]
 800b348:	e077      	b.n	800b43a <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681a      	ldr	r2, [r3, #0]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b352:	4619      	mov	r1, r3
 800b354:	4610      	mov	r0, r2
 800b356:	f7fe fced 	bl	8009d34 <move_window>
 800b35a:	4603      	mov	r3, r0
 800b35c:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800b35e:	7bfb      	ldrb	r3, [r7, #15]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d001      	beq.n	800b368 <load_xdir+0x9c>
 800b364:	7bfb      	ldrb	r3, [r7, #15]
 800b366:	e068      	b.n	800b43a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	2bc0      	cmp	r3, #192	; 0xc0
 800b370:	d001      	beq.n	800b376 <load_xdir+0xaa>
 800b372:	2302      	movs	r3, #2
 800b374:	e061      	b.n	800b43a <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	f103 0020 	add.w	r0, r3, #32
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b380:	2220      	movs	r2, #32
 800b382:	4619      	mov	r1, r3
 800b384:	f7fe fab2 	bl	80098ec <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	3323      	adds	r3, #35	; 0x23
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	332c      	adds	r3, #44	; 0x2c
 800b390:	4a2c      	ldr	r2, [pc, #176]	; (800b444 <load_xdir+0x178>)
 800b392:	fba2 2303 	umull	r2, r3, r2, r3
 800b396:	08db      	lsrs	r3, r3, #3
 800b398:	015b      	lsls	r3, r3, #5
 800b39a:	68ba      	ldr	r2, [r7, #8]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d201      	bcs.n	800b3a4 <load_xdir+0xd8>
 800b3a0:	2302      	movs	r3, #2
 800b3a2:	e04a      	b.n	800b43a <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800b3a4:	2340      	movs	r3, #64	; 0x40
 800b3a6:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800b3a8:	2100      	movs	r1, #0
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f7ff fb4b 	bl	800aa46 <dir_next>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800b3b4:	7bfb      	ldrb	r3, [r7, #15]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d001      	beq.n	800b3be <load_xdir+0xf2>
 800b3ba:	7bfb      	ldrb	r3, [r7, #15]
 800b3bc:	e03d      	b.n	800b43a <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	4610      	mov	r0, r2
 800b3ca:	f7fe fcb3 	bl	8009d34 <move_window>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800b3d2:	7bfb      	ldrb	r3, [r7, #15]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d001      	beq.n	800b3dc <load_xdir+0x110>
 800b3d8:	7bfb      	ldrb	r3, [r7, #15]
 800b3da:	e02e      	b.n	800b43a <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	2bc1      	cmp	r3, #193	; 0xc1
 800b3e4:	d001      	beq.n	800b3ea <load_xdir+0x11e>
 800b3e6:	2302      	movs	r3, #2
 800b3e8:	e027      	b.n	800b43a <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800b3f0:	d208      	bcs.n	800b404 <load_xdir+0x138>
 800b3f2:	693a      	ldr	r2, [r7, #16]
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	18d0      	adds	r0, r2, r3
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3fc:	2220      	movs	r2, #32
 800b3fe:	4619      	mov	r1, r3
 800b400:	f7fe fa74 	bl	80098ec <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	3320      	adds	r3, #32
 800b408:	617b      	str	r3, [r7, #20]
 800b40a:	697a      	ldr	r2, [r7, #20]
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	429a      	cmp	r2, r3
 800b410:	d3ca      	bcc.n	800b3a8 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800b418:	d80e      	bhi.n	800b438 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800b41a:	6938      	ldr	r0, [r7, #16]
 800b41c:	f7ff fe6e 	bl	800b0fc <xdir_sum>
 800b420:	4603      	mov	r3, r0
 800b422:	461c      	mov	r4, r3
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	3302      	adds	r3, #2
 800b428:	4618      	mov	r0, r3
 800b42a:	f7fe f881 	bl	8009530 <ld_word>
 800b42e:	4603      	mov	r3, r0
 800b430:	429c      	cmp	r4, r3
 800b432:	d001      	beq.n	800b438 <load_xdir+0x16c>
 800b434:	2302      	movs	r3, #2
 800b436:	e000      	b.n	800b43a <load_xdir+0x16e>
	}
	return FR_OK;
 800b438:	2300      	movs	r3, #0
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	371c      	adds	r7, #28
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd90      	pop	{r4, r7, pc}
 800b442:	bf00      	nop
 800b444:	88888889 	.word	0x88888889

0800b448 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800b448:	b5b0      	push	{r4, r5, r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800b452:	6839      	ldr	r1, [r7, #0]
 800b454:	6808      	ldr	r0, [r1, #0]
 800b456:	6879      	ldr	r1, [r7, #4]
 800b458:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800b45a:	6839      	ldr	r1, [r7, #0]
 800b45c:	6a08      	ldr	r0, [r1, #32]
 800b45e:	6879      	ldr	r1, [r7, #4]
 800b460:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800b462:	6839      	ldr	r1, [r7, #0]
 800b464:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800b466:	b2c8      	uxtb	r0, r1
 800b468:	6879      	ldr	r1, [r7, #4]
 800b46a:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800b46c:	6839      	ldr	r1, [r7, #0]
 800b46e:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800b470:	2000      	movs	r0, #0
 800b472:	460c      	mov	r4, r1
 800b474:	4605      	mov	r5, r0
 800b476:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800b47a:	2300      	movs	r3, #0
 800b47c:	6879      	ldr	r1, [r7, #4]
 800b47e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b48e:	4619      	mov	r1, r3
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f7ff fa52 	bl	800a93a <dir_sdi>
 800b496:	4603      	mov	r3, r0
 800b498:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b49a:	7bfb      	ldrb	r3, [r7, #15]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d104      	bne.n	800b4aa <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f7ff ff13 	bl	800b2cc <load_xdir>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800b4aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3710      	adds	r7, #16
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bdb0      	pop	{r4, r5, r7, pc}

0800b4b4 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800b4b4:	b590      	push	{r4, r7, lr}
 800b4b6:	b087      	sub	sp, #28
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	691b      	ldr	r3, [r3, #16]
 800b4c2:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	1c9c      	adds	r4, r3, #2
 800b4c8:	68f8      	ldr	r0, [r7, #12]
 800b4ca:	f7ff fe17 	bl	800b0fc <xdir_sum>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	f7fe f93e 	bl	8009754 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	3301      	adds	r3, #1
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	3301      	adds	r3, #1
 800b4e0:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f7ff fa26 	bl	800a93a <dir_sdi>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800b4f2:	e026      	b.n	800b542 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681a      	ldr	r2, [r3, #0]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	4610      	mov	r0, r2
 800b500:	f7fe fc18 	bl	8009d34 <move_window>
 800b504:	4603      	mov	r3, r0
 800b506:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b508:	7dfb      	ldrb	r3, [r7, #23]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d11d      	bne.n	800b54a <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b512:	2220      	movs	r2, #32
 800b514:	68f9      	ldr	r1, [r7, #12]
 800b516:	4618      	mov	r0, r3
 800b518:	f7fe f9e8 	bl	80098ec <mem_cpy>
		dp->obj.fs->wflag = 1;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	2201      	movs	r2, #1
 800b522:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	3b01      	subs	r3, #1
 800b528:	613b      	str	r3, [r7, #16]
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d00e      	beq.n	800b54e <store_xdir+0x9a>
		dirb += SZDIRE;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	3320      	adds	r3, #32
 800b534:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800b536:	2100      	movs	r1, #0
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f7ff fa84 	bl	800aa46 <dir_next>
 800b53e:	4603      	mov	r3, r0
 800b540:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800b542:	7dfb      	ldrb	r3, [r7, #23]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d0d5      	beq.n	800b4f4 <store_xdir+0x40>
 800b548:	e002      	b.n	800b550 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800b54a:	bf00      	nop
 800b54c:	e000      	b.n	800b550 <store_xdir+0x9c>
		if (--nent == 0) break;
 800b54e:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800b550:	7dfb      	ldrb	r3, [r7, #23]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d002      	beq.n	800b55c <store_xdir+0xa8>
 800b556:	7dfb      	ldrb	r3, [r7, #23]
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d101      	bne.n	800b560 <store_xdir+0xac>
 800b55c:	7dfb      	ldrb	r3, [r7, #23]
 800b55e:	e000      	b.n	800b562 <store_xdir+0xae>
 800b560:	2302      	movs	r3, #2
}
 800b562:	4618      	mov	r0, r3
 800b564:	371c      	adds	r7, #28
 800b566:	46bd      	mov	sp, r7
 800b568:	bd90      	pop	{r4, r7, pc}

0800b56a <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800b56a:	b590      	push	{r4, r7, lr}
 800b56c:	b085      	sub	sp, #20
 800b56e:	af00      	add	r7, sp, #0
 800b570:	6078      	str	r0, [r7, #4]
 800b572:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800b574:	2240      	movs	r2, #64	; 0x40
 800b576:	2100      	movs	r1, #0
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f7fe f9d7 	bl	800992c <mem_set>
	dirb[XDIR_Type] = 0x85;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2285      	movs	r2, #133	; 0x85
 800b582:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	3320      	adds	r3, #32
 800b588:	22c0      	movs	r2, #192	; 0xc0
 800b58a:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800b58c:	2300      	movs	r3, #0
 800b58e:	72bb      	strb	r3, [r7, #10]
 800b590:	2301      	movs	r3, #1
 800b592:	72fb      	strb	r3, [r7, #11]
 800b594:	2301      	movs	r3, #1
 800b596:	813b      	strh	r3, [r7, #8]
 800b598:	2340      	movs	r3, #64	; 0x40
 800b59a:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	1c5a      	adds	r2, r3, #1
 800b5a0:	60fa      	str	r2, [r7, #12]
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	4413      	add	r3, r2
 800b5a6:	22c1      	movs	r2, #193	; 0xc1
 800b5a8:	701a      	strb	r2, [r3, #0]
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	1c5a      	adds	r2, r3, #1
 800b5ae:	60fa      	str	r2, [r7, #12]
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	4413      	add	r3, r2
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800b5b8:	893b      	ldrh	r3, [r7, #8]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00b      	beq.n	800b5d6 <create_xdir+0x6c>
 800b5be:	7abb      	ldrb	r3, [r7, #10]
 800b5c0:	005b      	lsls	r3, r3, #1
 800b5c2:	683a      	ldr	r2, [r7, #0]
 800b5c4:	4413      	add	r3, r2
 800b5c6:	881b      	ldrh	r3, [r3, #0]
 800b5c8:	813b      	strh	r3, [r7, #8]
 800b5ca:	893b      	ldrh	r3, [r7, #8]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d002      	beq.n	800b5d6 <create_xdir+0x6c>
 800b5d0:	7abb      	ldrb	r3, [r7, #10]
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800b5d6:	687a      	ldr	r2, [r7, #4]
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	4413      	add	r3, r2
 800b5dc:	893a      	ldrh	r2, [r7, #8]
 800b5de:	4611      	mov	r1, r2
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f7fe f8b7 	bl	8009754 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	3302      	adds	r3, #2
 800b5ea:	60fb      	str	r3, [r7, #12]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f003 031f 	and.w	r3, r3, #31
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d1e0      	bne.n	800b5b8 <create_xdir+0x4e>
		nb++;
 800b5f6:	7afb      	ldrb	r3, [r7, #11]
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800b5fc:	7abb      	ldrb	r3, [r7, #10]
 800b5fe:	005b      	lsls	r3, r3, #1
 800b600:	683a      	ldr	r2, [r7, #0]
 800b602:	4413      	add	r3, r2
 800b604:	881b      	ldrh	r3, [r3, #0]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d1c8      	bne.n	800b59c <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	3323      	adds	r3, #35	; 0x23
 800b60e:	7aba      	ldrb	r2, [r7, #10]
 800b610:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	3301      	adds	r3, #1
 800b616:	7afa      	ldrb	r2, [r7, #11]
 800b618:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800b620:	6838      	ldr	r0, [r7, #0]
 800b622:	f7ff fd9d 	bl	800b160 <xname_sum>
 800b626:	4603      	mov	r3, r0
 800b628:	4619      	mov	r1, r3
 800b62a:	4620      	mov	r0, r4
 800b62c:	f7fe f892 	bl	8009754 <st_word>
}
 800b630:	bf00      	nop
 800b632:	3714      	adds	r7, #20
 800b634:	46bd      	mov	sp, r7
 800b636:	bd90      	pop	{r4, r7, pc}

0800b638 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b086      	sub	sp, #24
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800b642:	2304      	movs	r3, #4
 800b644:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800b64c:	23ff      	movs	r3, #255	; 0xff
 800b64e:	757b      	strb	r3, [r7, #21]
 800b650:	23ff      	movs	r3, #255	; 0xff
 800b652:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800b654:	e09f      	b.n	800b796 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b65a:	4619      	mov	r1, r3
 800b65c:	6938      	ldr	r0, [r7, #16]
 800b65e:	f7fe fb69 	bl	8009d34 <move_window>
 800b662:	4603      	mov	r3, r0
 800b664:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b666:	7dfb      	ldrb	r3, [r7, #23]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	f040 809a 	bne.w	800b7a2 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b672:	781b      	ldrb	r3, [r3, #0]
 800b674:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800b676:	7dbb      	ldrb	r3, [r7, #22]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d102      	bne.n	800b682 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b67c:	2304      	movs	r3, #4
 800b67e:	75fb      	strb	r3, [r7, #23]
 800b680:	e096      	b.n	800b7b0 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	2b04      	cmp	r3, #4
 800b688:	d118      	bne.n	800b6bc <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800b68a:	7dbb      	ldrb	r3, [r7, #22]
 800b68c:	2b85      	cmp	r3, #133	; 0x85
 800b68e:	d179      	bne.n	800b784 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f7ff fe17 	bl	800b2cc <load_xdir>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800b6a2:	7dfb      	ldrb	r3, [r7, #23]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d17e      	bne.n	800b7a6 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	691b      	ldr	r3, [r3, #16]
 800b6ac:	3304      	adds	r3, #4
 800b6ae:	781b      	ldrb	r3, [r3, #0]
 800b6b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6b4:	b2da      	uxtb	r2, r3
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	719a      	strb	r2, [r3, #6]
					}
					break;
 800b6ba:	e074      	b.n	800b7a6 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6c0:	330b      	adds	r3, #11
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6c8:	73fb      	strb	r3, [r7, #15]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	7bfa      	ldrb	r2, [r7, #15]
 800b6ce:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800b6d0:	7dbb      	ldrb	r3, [r7, #22]
 800b6d2:	2be5      	cmp	r3, #229	; 0xe5
 800b6d4:	d00e      	beq.n	800b6f4 <dir_read+0xbc>
 800b6d6:	7dbb      	ldrb	r3, [r7, #22]
 800b6d8:	2b2e      	cmp	r3, #46	; 0x2e
 800b6da:	d00b      	beq.n	800b6f4 <dir_read+0xbc>
 800b6dc:	7bfb      	ldrb	r3, [r7, #15]
 800b6de:	f023 0320 	bic.w	r3, r3, #32
 800b6e2:	2b08      	cmp	r3, #8
 800b6e4:	bf0c      	ite	eq
 800b6e6:	2301      	moveq	r3, #1
 800b6e8:	2300      	movne	r3, #0
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d002      	beq.n	800b6fa <dir_read+0xc2>
				ord = 0xFF;
 800b6f4:	23ff      	movs	r3, #255	; 0xff
 800b6f6:	757b      	strb	r3, [r7, #21]
 800b6f8:	e044      	b.n	800b784 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800b6fa:	7bfb      	ldrb	r3, [r7, #15]
 800b6fc:	2b0f      	cmp	r3, #15
 800b6fe:	d12f      	bne.n	800b760 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800b700:	7dbb      	ldrb	r3, [r7, #22]
 800b702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00d      	beq.n	800b726 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b70e:	7b5b      	ldrb	r3, [r3, #13]
 800b710:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800b712:	7dbb      	ldrb	r3, [r7, #22]
 800b714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b718:	75bb      	strb	r3, [r7, #22]
 800b71a:	7dbb      	ldrb	r3, [r7, #22]
 800b71c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b726:	7dba      	ldrb	r2, [r7, #22]
 800b728:	7d7b      	ldrb	r3, [r7, #21]
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d115      	bne.n	800b75a <dir_read+0x122>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b732:	330d      	adds	r3, #13
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	7d3a      	ldrb	r2, [r7, #20]
 800b738:	429a      	cmp	r2, r3
 800b73a:	d10e      	bne.n	800b75a <dir_read+0x122>
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	68da      	ldr	r2, [r3, #12]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b744:	4619      	mov	r1, r3
 800b746:	4610      	mov	r0, r2
 800b748:	f7ff fb5e 	bl	800ae08 <pick_lfn>
 800b74c:	4603      	mov	r3, r0
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d003      	beq.n	800b75a <dir_read+0x122>
 800b752:	7d7b      	ldrb	r3, [r7, #21]
 800b754:	3b01      	subs	r3, #1
 800b756:	b2db      	uxtb	r3, r3
 800b758:	e000      	b.n	800b75c <dir_read+0x124>
 800b75a:	23ff      	movs	r3, #255	; 0xff
 800b75c:	757b      	strb	r3, [r7, #21]
 800b75e:	e011      	b.n	800b784 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800b760:	7d7b      	ldrb	r3, [r7, #21]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d109      	bne.n	800b77a <dir_read+0x142>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b76a:	4618      	mov	r0, r3
 800b76c:	f7ff fca6 	bl	800b0bc <sum_sfn>
 800b770:	4603      	mov	r3, r0
 800b772:	461a      	mov	r2, r3
 800b774:	7d3b      	ldrb	r3, [r7, #20]
 800b776:	4293      	cmp	r3, r2
 800b778:	d017      	beq.n	800b7aa <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f04f 32ff 	mov.w	r2, #4294967295
 800b780:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800b782:	e012      	b.n	800b7aa <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800b784:	2100      	movs	r1, #0
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f7ff f95d 	bl	800aa46 <dir_next>
 800b78c:	4603      	mov	r3, r0
 800b78e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b790:	7dfb      	ldrb	r3, [r7, #23]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d10b      	bne.n	800b7ae <dir_read+0x176>
	while (dp->sect) {
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	f47f af5b 	bne.w	800b656 <dir_read+0x1e>
 800b7a0:	e006      	b.n	800b7b0 <dir_read+0x178>
		if (res != FR_OK) break;
 800b7a2:	bf00      	nop
 800b7a4:	e004      	b.n	800b7b0 <dir_read+0x178>
					break;
 800b7a6:	bf00      	nop
 800b7a8:	e002      	b.n	800b7b0 <dir_read+0x178>
					break;
 800b7aa:	bf00      	nop
 800b7ac:	e000      	b.n	800b7b0 <dir_read+0x178>
		if (res != FR_OK) break;
 800b7ae:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b7b0:	7dfb      	ldrb	r3, [r7, #23]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d002      	beq.n	800b7bc <dir_read+0x184>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800b7bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3718      	adds	r7, #24
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}

0800b7c6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b7c6:	b590      	push	{r4, r7, lr}
 800b7c8:	b089      	sub	sp, #36	; 0x24
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b7d4:	2100      	movs	r1, #0
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f7ff f8af 	bl	800a93a <dir_sdi>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800b7e0:	7ffb      	ldrb	r3, [r7, #31]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d001      	beq.n	800b7ea <dir_find+0x24>
 800b7e6:	7ffb      	ldrb	r3, [r7, #31]
 800b7e8:	e112      	b.n	800ba10 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	2b04      	cmp	r3, #4
 800b7f0:	d164      	bne.n	800b8bc <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	68db      	ldr	r3, [r3, #12]
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7ff fcb2 	bl	800b160 <xname_sum>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800b800:	e04f      	b.n	800b8a2 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	691b      	ldr	r3, [r3, #16]
 800b806:	3324      	adds	r3, #36	; 0x24
 800b808:	4618      	mov	r0, r3
 800b80a:	f7fd fe91 	bl	8009530 <ld_word>
 800b80e:	4603      	mov	r3, r0
 800b810:	461a      	mov	r2, r3
 800b812:	893b      	ldrh	r3, [r7, #8]
 800b814:	4293      	cmp	r3, r2
 800b816:	d000      	beq.n	800b81a <dir_find+0x54>
 800b818:	e043      	b.n	800b8a2 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	691b      	ldr	r3, [r3, #16]
 800b81e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b822:	76fb      	strb	r3, [r7, #27]
 800b824:	2340      	movs	r3, #64	; 0x40
 800b826:	617b      	str	r3, [r7, #20]
 800b828:	2300      	movs	r3, #0
 800b82a:	613b      	str	r3, [r7, #16]
 800b82c:	e029      	b.n	800b882 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	f003 031f 	and.w	r3, r3, #31
 800b834:	2b00      	cmp	r3, #0
 800b836:	d102      	bne.n	800b83e <dir_find+0x78>
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	3302      	adds	r3, #2
 800b83c:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	691a      	ldr	r2, [r3, #16]
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	4413      	add	r3, r2
 800b846:	4618      	mov	r0, r3
 800b848:	f7fd fe72 	bl	8009530 <ld_word>
 800b84c:	4603      	mov	r3, r0
 800b84e:	4618      	mov	r0, r3
 800b850:	f002 fe7e 	bl	800e550 <ff_wtoupper>
 800b854:	4603      	mov	r3, r0
 800b856:	461c      	mov	r4, r3
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	68da      	ldr	r2, [r3, #12]
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	005b      	lsls	r3, r3, #1
 800b860:	4413      	add	r3, r2
 800b862:	881b      	ldrh	r3, [r3, #0]
 800b864:	4618      	mov	r0, r3
 800b866:	f002 fe73 	bl	800e550 <ff_wtoupper>
 800b86a:	4603      	mov	r3, r0
 800b86c:	429c      	cmp	r4, r3
 800b86e:	d10c      	bne.n	800b88a <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800b870:	7efb      	ldrb	r3, [r7, #27]
 800b872:	3b01      	subs	r3, #1
 800b874:	76fb      	strb	r3, [r7, #27]
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	3302      	adds	r3, #2
 800b87a:	617b      	str	r3, [r7, #20]
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	3301      	adds	r3, #1
 800b880:	613b      	str	r3, [r7, #16]
 800b882:	7efb      	ldrb	r3, [r7, #27]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d1d2      	bne.n	800b82e <dir_find+0x68>
 800b888:	e000      	b.n	800b88c <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800b88a:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800b88c:	7efb      	ldrb	r3, [r7, #27]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d107      	bne.n	800b8a2 <dir_find+0xdc>
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	68da      	ldr	r2, [r3, #12]
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	005b      	lsls	r3, r3, #1
 800b89a:	4413      	add	r3, r2
 800b89c:	881b      	ldrh	r3, [r3, #0]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d009      	beq.n	800b8b6 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800b8a2:	2100      	movs	r1, #0
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f7ff fec7 	bl	800b638 <dir_read>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	77fb      	strb	r3, [r7, #31]
 800b8ae:	7ffb      	ldrb	r3, [r7, #31]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d0a6      	beq.n	800b802 <dir_find+0x3c>
 800b8b4:	e000      	b.n	800b8b8 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800b8b6:	bf00      	nop
		}
		return res;
 800b8b8:	7ffb      	ldrb	r3, [r7, #31]
 800b8ba:	e0a9      	b.n	800ba10 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b8bc:	23ff      	movs	r3, #255	; 0xff
 800b8be:	773b      	strb	r3, [r7, #28]
 800b8c0:	7f3b      	ldrb	r3, [r7, #28]
 800b8c2:	777b      	strb	r3, [r7, #29]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ca:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	68f8      	ldr	r0, [r7, #12]
 800b8d4:	f7fe fa2e 	bl	8009d34 <move_window>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800b8dc:	7ffb      	ldrb	r3, [r7, #31]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	f040 8090 	bne.w	800ba04 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8e8:	781b      	ldrb	r3, [r3, #0]
 800b8ea:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b8ec:	7fbb      	ldrb	r3, [r7, #30]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d102      	bne.n	800b8f8 <dir_find+0x132>
 800b8f2:	2304      	movs	r3, #4
 800b8f4:	77fb      	strb	r3, [r7, #31]
 800b8f6:	e08a      	b.n	800ba0e <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8fc:	330b      	adds	r3, #11
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b904:	72fb      	strb	r3, [r7, #11]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	7afa      	ldrb	r2, [r7, #11]
 800b90a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b90c:	7fbb      	ldrb	r3, [r7, #30]
 800b90e:	2be5      	cmp	r3, #229	; 0xe5
 800b910:	d007      	beq.n	800b922 <dir_find+0x15c>
 800b912:	7afb      	ldrb	r3, [r7, #11]
 800b914:	f003 0308 	and.w	r3, r3, #8
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d009      	beq.n	800b930 <dir_find+0x16a>
 800b91c:	7afb      	ldrb	r3, [r7, #11]
 800b91e:	2b0f      	cmp	r3, #15
 800b920:	d006      	beq.n	800b930 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b922:	23ff      	movs	r3, #255	; 0xff
 800b924:	777b      	strb	r3, [r7, #29]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f04f 32ff 	mov.w	r2, #4294967295
 800b92c:	64da      	str	r2, [r3, #76]	; 0x4c
 800b92e:	e05e      	b.n	800b9ee <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b930:	7afb      	ldrb	r3, [r7, #11]
 800b932:	2b0f      	cmp	r3, #15
 800b934:	d136      	bne.n	800b9a4 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800b93c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b940:	2b00      	cmp	r3, #0
 800b942:	d154      	bne.n	800b9ee <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b944:	7fbb      	ldrb	r3, [r7, #30]
 800b946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d00d      	beq.n	800b96a <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b952:	7b5b      	ldrb	r3, [r3, #13]
 800b954:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b956:	7fbb      	ldrb	r3, [r7, #30]
 800b958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b95c:	77bb      	strb	r3, [r7, #30]
 800b95e:	7fbb      	ldrb	r3, [r7, #30]
 800b960:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b96a:	7fba      	ldrb	r2, [r7, #30]
 800b96c:	7f7b      	ldrb	r3, [r7, #29]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d115      	bne.n	800b99e <dir_find+0x1d8>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b976:	330d      	adds	r3, #13
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	7f3a      	ldrb	r2, [r7, #28]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d10e      	bne.n	800b99e <dir_find+0x1d8>
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	68da      	ldr	r2, [r3, #12]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b988:	4619      	mov	r1, r3
 800b98a:	4610      	mov	r0, r2
 800b98c:	f7ff f9cc 	bl	800ad28 <cmp_lfn>
 800b990:	4603      	mov	r3, r0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d003      	beq.n	800b99e <dir_find+0x1d8>
 800b996:	7f7b      	ldrb	r3, [r7, #29]
 800b998:	3b01      	subs	r3, #1
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	e000      	b.n	800b9a0 <dir_find+0x1da>
 800b99e:	23ff      	movs	r3, #255	; 0xff
 800b9a0:	777b      	strb	r3, [r7, #29]
 800b9a2:	e024      	b.n	800b9ee <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b9a4:	7f7b      	ldrb	r3, [r7, #29]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d109      	bne.n	800b9be <dir_find+0x1f8>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7ff fb84 	bl	800b0bc <sum_sfn>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	7f3b      	ldrb	r3, [r7, #28]
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d024      	beq.n	800ba08 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800b9c4:	f003 0301 	and.w	r3, r3, #1
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d10a      	bne.n	800b9e2 <dir_find+0x21c>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	3340      	adds	r3, #64	; 0x40
 800b9d4:	220b      	movs	r2, #11
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	f7fd ffc2 	bl	8009960 <mem_cmp>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d014      	beq.n	800ba0c <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b9e2:	23ff      	movs	r3, #255	; 0xff
 800b9e4:	777b      	strb	r3, [r7, #29]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b9ec:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b9ee:	2100      	movs	r1, #0
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f7ff f828 	bl	800aa46 <dir_next>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800b9fa:	7ffb      	ldrb	r3, [r7, #31]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	f43f af65 	beq.w	800b8cc <dir_find+0x106>
 800ba02:	e004      	b.n	800ba0e <dir_find+0x248>
		if (res != FR_OK) break;
 800ba04:	bf00      	nop
 800ba06:	e002      	b.n	800ba0e <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ba08:	bf00      	nop
 800ba0a:	e000      	b.n	800ba0e <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ba0c:	bf00      	nop

	return res;
 800ba0e:	7ffb      	ldrb	r3, [r7, #31]
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3724      	adds	r7, #36	; 0x24
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd90      	pop	{r4, r7, pc}

0800ba18 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ba18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ba1c:	b0a0      	sub	sp, #128	; 0x80
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800ba2e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d001      	beq.n	800ba3a <dir_register+0x22>
 800ba36:	2306      	movs	r3, #6
 800ba38:	e18e      	b.n	800bd58 <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	677b      	str	r3, [r7, #116]	; 0x74
 800ba3e:	e002      	b.n	800ba46 <dir_register+0x2e>
 800ba40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba42:	3301      	adds	r3, #1
 800ba44:	677b      	str	r3, [r7, #116]	; 0x74
 800ba46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba48:	68da      	ldr	r2, [r3, #12]
 800ba4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba4c:	005b      	lsls	r3, r3, #1
 800ba4e:	4413      	add	r3, r2
 800ba50:	881b      	ldrh	r3, [r3, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d1f4      	bne.n	800ba40 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ba56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	2b04      	cmp	r3, #4
 800ba5c:	f040 809f 	bne.w	800bb9e <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800ba60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba62:	330e      	adds	r3, #14
 800ba64:	4aa2      	ldr	r2, [pc, #648]	; (800bcf0 <dir_register+0x2d8>)
 800ba66:	fba2 2303 	umull	r2, r3, r2, r3
 800ba6a:	08db      	lsrs	r3, r3, #3
 800ba6c:	3302      	adds	r3, #2
 800ba6e:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800ba70:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f7ff f8bc 	bl	800abf0 <dir_alloc>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800ba7e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d002      	beq.n	800ba8c <dir_register+0x74>
 800ba86:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ba8a:	e165      	b.n	800bd58 <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba92:	3b01      	subs	r3, #1
 800ba94:	015b      	lsls	r3, r3, #5
 800ba96:	1ad2      	subs	r2, r2, r3
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d072      	beq.n	800bb8a <dir_register+0x172>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	79db      	ldrb	r3, [r3, #7]
 800baa8:	f003 0304 	and.w	r3, r3, #4
 800baac:	2b00      	cmp	r3, #0
 800baae:	d06c      	beq.n	800bb8a <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800bab6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800bab8:	8949      	ldrh	r1, [r1, #10]
 800baba:	0249      	lsls	r1, r1, #9
 800babc:	2000      	movs	r0, #0
 800babe:	460c      	mov	r4, r1
 800bac0:	4605      	mov	r5, r0
 800bac2:	eb12 0804 	adds.w	r8, r2, r4
 800bac6:	eb43 0905 	adc.w	r9, r3, r5
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7fe fcd8 	bl	800a488 <fill_first_frag>
 800bad8:	4603      	mov	r3, r0
 800bada:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800bade:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d002      	beq.n	800baec <dir_register+0xd4>
 800bae6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800baea:	e135      	b.n	800bd58 <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baf2:	f04f 32ff 	mov.w	r2, #4294967295
 800baf6:	4619      	mov	r1, r3
 800baf8:	f7fe fcf5 	bl	800a4e6 <fill_last_frag>
 800bafc:	4603      	mov	r3, r0
 800bafe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800bb02:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d002      	beq.n	800bb10 <dir_register+0xf8>
 800bb0a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bb0e:	e123      	b.n	800bd58 <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	f107 0308 	add.w	r3, r7, #8
 800bb16:	4611      	mov	r1, r2
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7ff fc95 	bl	800b448 <load_obj_dir>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800bb24:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d002      	beq.n	800bb32 <dir_register+0x11a>
 800bb2c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bb30:	e112      	b.n	800bd58 <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800bb32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb34:	691b      	ldr	r3, [r3, #16]
 800bb36:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800bb40:	4608      	mov	r0, r1
 800bb42:	f7fd fe4c 	bl	80097de <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800bb46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb48:	691b      	ldr	r3, [r3, #16]
 800bb4a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800bb54:	4608      	mov	r0, r1
 800bb56:	f7fd fe42 	bl	80097de <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	79da      	ldrb	r2, [r3, #7]
 800bb5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb60:	691b      	ldr	r3, [r3, #16]
 800bb62:	3321      	adds	r3, #33	; 0x21
 800bb64:	f042 0201 	orr.w	r2, r2, #1
 800bb68:	b2d2      	uxtb	r2, r2
 800bb6a:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800bb6c:	f107 0308 	add.w	r3, r7, #8
 800bb70:	4618      	mov	r0, r3
 800bb72:	f7ff fc9f 	bl	800b4b4 <store_xdir>
 800bb76:	4603      	mov	r3, r0
 800bb78:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800bb7c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d002      	beq.n	800bb8a <dir_register+0x172>
 800bb84:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bb88:	e0e6      	b.n	800bd58 <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800bb8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb8c:	691a      	ldr	r2, [r3, #16]
 800bb8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	4619      	mov	r1, r3
 800bb94:	4610      	mov	r0, r2
 800bb96:	f7ff fce8 	bl	800b56a <create_xdir>
		return FR_OK;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	e0dc      	b.n	800bd58 <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800bba4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800bba8:	220c      	movs	r2, #12
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7fd fe9e 	bl	80098ec <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800bbb0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bbb4:	f003 0301 	and.w	r3, r3, #1
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d033      	beq.n	800bc24 <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2240      	movs	r2, #64	; 0x40
 800bbc0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	67bb      	str	r3, [r7, #120]	; 0x78
 800bbc8:	e016      	b.n	800bbf8 <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800bbd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbd2:	68da      	ldr	r2, [r3, #12]
 800bbd4:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800bbd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbda:	f7ff f9e1 	bl	800afa0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f7ff fdf1 	bl	800b7c6 <dir_find>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800bbea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d106      	bne.n	800bc00 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 800bbf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	67bb      	str	r3, [r7, #120]	; 0x78
 800bbf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbfa:	2b63      	cmp	r3, #99	; 0x63
 800bbfc:	d9e5      	bls.n	800bbca <dir_register+0x1b2>
 800bbfe:	e000      	b.n	800bc02 <dir_register+0x1ea>
			if (res != FR_OK) break;
 800bc00:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800bc02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc04:	2b64      	cmp	r3, #100	; 0x64
 800bc06:	d101      	bne.n	800bc0c <dir_register+0x1f4>
 800bc08:	2307      	movs	r3, #7
 800bc0a:	e0a5      	b.n	800bd58 <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800bc0c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bc10:	2b04      	cmp	r3, #4
 800bc12:	d002      	beq.n	800bc1a <dir_register+0x202>
 800bc14:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bc18:	e09e      	b.n	800bd58 <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800bc1a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800bc24:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bc28:	f003 0302 	and.w	r3, r3, #2
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d007      	beq.n	800bc40 <dir_register+0x228>
 800bc30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc32:	330c      	adds	r3, #12
 800bc34:	4a2f      	ldr	r2, [pc, #188]	; (800bcf4 <dir_register+0x2dc>)
 800bc36:	fba2 2303 	umull	r2, r3, r2, r3
 800bc3a:	089b      	lsrs	r3, r3, #2
 800bc3c:	3301      	adds	r3, #1
 800bc3e:	e000      	b.n	800bc42 <dir_register+0x22a>
 800bc40:	2301      	movs	r3, #1
 800bc42:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800bc44:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f7fe ffd2 	bl	800abf0 <dir_alloc>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800bc52:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d14f      	bne.n	800bcfa <dir_register+0x2e2>
 800bc5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc5c:	3b01      	subs	r3, #1
 800bc5e:	673b      	str	r3, [r7, #112]	; 0x70
 800bc60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d049      	beq.n	800bcfa <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc6c:	015b      	lsls	r3, r3, #5
 800bc6e:	1ad3      	subs	r3, r2, r3
 800bc70:	4619      	mov	r1, r3
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f7fe fe61 	bl	800a93a <dir_sdi>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800bc7e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d139      	bne.n	800bcfa <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	3340      	adds	r3, #64	; 0x40
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f7ff fa16 	bl	800b0bc <sum_sfn>
 800bc90:	4603      	mov	r3, r0
 800bc92:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bc9e:	f7fe f849 	bl	8009d34 <move_window>
 800bca2:	4603      	mov	r3, r0
 800bca4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800bca8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d123      	bne.n	800bcf8 <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800bcb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcb2:	68d8      	ldr	r0, [r3, #12]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800bcb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bcba:	b2da      	uxtb	r2, r3
 800bcbc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800bcc0:	f7ff f906 	bl	800aed0 <put_lfn>
				fs->wflag = 1;
 800bcc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800bcca:	2100      	movs	r1, #0
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f7fe feba 	bl	800aa46 <dir_next>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800bcd8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d10c      	bne.n	800bcfa <dir_register+0x2e2>
 800bce0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bce2:	3b01      	subs	r3, #1
 800bce4:	673b      	str	r3, [r7, #112]	; 0x70
 800bce6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d1d4      	bne.n	800bc96 <dir_register+0x27e>
 800bcec:	e005      	b.n	800bcfa <dir_register+0x2e2>
 800bcee:	bf00      	nop
 800bcf0:	88888889 	.word	0x88888889
 800bcf4:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800bcf8:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bcfa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d128      	bne.n	800bd54 <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd06:	4619      	mov	r1, r3
 800bd08:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bd0a:	f7fe f813 	bl	8009d34 <move_window>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800bd14:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d11b      	bne.n	800bd54 <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd20:	2220      	movs	r2, #32
 800bd22:	2100      	movs	r1, #0
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7fd fe01 	bl	800992c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	3340      	adds	r3, #64	; 0x40
 800bd32:	220b      	movs	r2, #11
 800bd34:	4619      	mov	r1, r3
 800bd36:	f7fd fdd9 	bl	80098ec <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd44:	330c      	adds	r3, #12
 800bd46:	f002 0218 	and.w	r2, r2, #24
 800bd4a:	b2d2      	uxtb	r2, r2
 800bd4c:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800bd4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd50:	2201      	movs	r2, #1
 800bd52:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bd54:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3780      	adds	r7, #128	; 0x80
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800bd62:	bf00      	nop

0800bd64 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800bd64:	b5b0      	push	{r4, r5, r7, lr}
 800bd66:	b088      	sub	sp, #32
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	2200      	movs	r2, #0
 800bd78:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	f000 80d8 	beq.w	800bf34 <get_fileinfo+0x1d0>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	2b04      	cmp	r3, #4
 800bd8a:	d106      	bne.n	800bd9a <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	691b      	ldr	r3, [r3, #16]
 800bd90:	6839      	ldr	r1, [r7, #0]
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7ff fa18 	bl	800b1c8 <get_xdir_info>
		return;
 800bd98:	e0cd      	b.n	800bf36 <get_fileinfo+0x1d2>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bda2:	d032      	beq.n	800be0a <get_fileinfo+0xa6>
			i = j = 0;
 800bda4:	2300      	movs	r3, #0
 800bda6:	61bb      	str	r3, [r7, #24]
 800bda8:	69bb      	ldr	r3, [r7, #24]
 800bdaa:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800bdac:	e01b      	b.n	800bde6 <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800bdae:	89fb      	ldrh	r3, [r7, #14]
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f002 fb92 	bl	800e4dc <ff_convert>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800bdbc:	89fb      	ldrh	r3, [r7, #14]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d102      	bne.n	800bdc8 <get_fileinfo+0x64>
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	61fb      	str	r3, [r7, #28]
 800bdc6:	e01a      	b.n	800bdfe <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800bdc8:	69fb      	ldr	r3, [r7, #28]
 800bdca:	2bfe      	cmp	r3, #254	; 0xfe
 800bdcc:	d902      	bls.n	800bdd4 <get_fileinfo+0x70>
 800bdce:	2300      	movs	r3, #0
 800bdd0:	61fb      	str	r3, [r7, #28]
 800bdd2:	e014      	b.n	800bdfe <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 800bdd4:	69fb      	ldr	r3, [r7, #28]
 800bdd6:	1c5a      	adds	r2, r3, #1
 800bdd8:	61fa      	str	r2, [r7, #28]
 800bdda:	89fa      	ldrh	r2, [r7, #14]
 800bddc:	b2d1      	uxtb	r1, r2
 800bdde:	683a      	ldr	r2, [r7, #0]
 800bde0:	4413      	add	r3, r2
 800bde2:	460a      	mov	r2, r1
 800bde4:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	68da      	ldr	r2, [r3, #12]
 800bdea:	69bb      	ldr	r3, [r7, #24]
 800bdec:	1c59      	adds	r1, r3, #1
 800bdee:	61b9      	str	r1, [r7, #24]
 800bdf0:	005b      	lsls	r3, r3, #1
 800bdf2:	4413      	add	r3, r2
 800bdf4:	881b      	ldrh	r3, [r3, #0]
 800bdf6:	81fb      	strh	r3, [r7, #14]
 800bdf8:	89fb      	ldrh	r3, [r7, #14]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d1d7      	bne.n	800bdae <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800bdfe:	683a      	ldr	r2, [r7, #0]
 800be00:	69fb      	ldr	r3, [r7, #28]
 800be02:	4413      	add	r3, r2
 800be04:	331a      	adds	r3, #26
 800be06:	2200      	movs	r2, #0
 800be08:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800be0a:	2300      	movs	r3, #0
 800be0c:	61bb      	str	r3, [r7, #24]
 800be0e:	69bb      	ldr	r3, [r7, #24]
 800be10:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800be12:	683a      	ldr	r2, [r7, #0]
 800be14:	69fb      	ldr	r3, [r7, #28]
 800be16:	4413      	add	r3, r2
 800be18:	331a      	adds	r3, #26
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800be1e:	e04c      	b.n	800beba <get_fileinfo+0x156>
		c = (TCHAR)dp->dir[i++];
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be24:	69fb      	ldr	r3, [r7, #28]
 800be26:	1c59      	adds	r1, r3, #1
 800be28:	61f9      	str	r1, [r7, #28]
 800be2a:	4413      	add	r3, r2
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800be30:	7dfb      	ldrb	r3, [r7, #23]
 800be32:	2b20      	cmp	r3, #32
 800be34:	d100      	bne.n	800be38 <get_fileinfo+0xd4>
 800be36:	e040      	b.n	800beba <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800be38:	7dfb      	ldrb	r3, [r7, #23]
 800be3a:	2b05      	cmp	r3, #5
 800be3c:	d101      	bne.n	800be42 <get_fileinfo+0xde>
 800be3e:	23e5      	movs	r3, #229	; 0xe5
 800be40:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800be42:	69fb      	ldr	r3, [r7, #28]
 800be44:	2b09      	cmp	r3, #9
 800be46:	d10f      	bne.n	800be68 <get_fileinfo+0x104>
			if (!lfv) fno->fname[j] = '.';
 800be48:	89bb      	ldrh	r3, [r7, #12]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d105      	bne.n	800be5a <get_fileinfo+0xf6>
 800be4e:	683a      	ldr	r2, [r7, #0]
 800be50:	69bb      	ldr	r3, [r7, #24]
 800be52:	4413      	add	r3, r2
 800be54:	331a      	adds	r3, #26
 800be56:	222e      	movs	r2, #46	; 0x2e
 800be58:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800be5a:	69bb      	ldr	r3, [r7, #24]
 800be5c:	1c5a      	adds	r2, r3, #1
 800be5e:	61ba      	str	r2, [r7, #24]
 800be60:	683a      	ldr	r2, [r7, #0]
 800be62:	4413      	add	r3, r2
 800be64:	222e      	movs	r2, #46	; 0x2e
 800be66:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800be68:	683a      	ldr	r2, [r7, #0]
 800be6a:	69bb      	ldr	r3, [r7, #24]
 800be6c:	4413      	add	r3, r2
 800be6e:	330d      	adds	r3, #13
 800be70:	7dfa      	ldrb	r2, [r7, #23]
 800be72:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800be74:	89bb      	ldrh	r3, [r7, #12]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d11c      	bne.n	800beb4 <get_fileinfo+0x150>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800be7a:	7dfb      	ldrb	r3, [r7, #23]
 800be7c:	2b40      	cmp	r3, #64	; 0x40
 800be7e:	d913      	bls.n	800bea8 <get_fileinfo+0x144>
 800be80:	7dfb      	ldrb	r3, [r7, #23]
 800be82:	2b5a      	cmp	r3, #90	; 0x5a
 800be84:	d810      	bhi.n	800bea8 <get_fileinfo+0x144>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be8a:	330c      	adds	r3, #12
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	461a      	mov	r2, r3
 800be90:	69fb      	ldr	r3, [r7, #28]
 800be92:	2b08      	cmp	r3, #8
 800be94:	d901      	bls.n	800be9a <get_fileinfo+0x136>
 800be96:	2310      	movs	r3, #16
 800be98:	e000      	b.n	800be9c <get_fileinfo+0x138>
 800be9a:	2308      	movs	r3, #8
 800be9c:	4013      	ands	r3, r2
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d002      	beq.n	800bea8 <get_fileinfo+0x144>
				c += 0x20;			/* To lower */
 800bea2:	7dfb      	ldrb	r3, [r7, #23]
 800bea4:	3320      	adds	r3, #32
 800bea6:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800bea8:	683a      	ldr	r2, [r7, #0]
 800beaa:	69bb      	ldr	r3, [r7, #24]
 800beac:	4413      	add	r3, r2
 800beae:	331a      	adds	r3, #26
 800beb0:	7dfa      	ldrb	r2, [r7, #23]
 800beb2:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800beb4:	69bb      	ldr	r3, [r7, #24]
 800beb6:	3301      	adds	r3, #1
 800beb8:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800beba:	69fb      	ldr	r3, [r7, #28]
 800bebc:	2b0a      	cmp	r3, #10
 800bebe:	d9af      	bls.n	800be20 <get_fileinfo+0xbc>
	}
	if (!lfv) {
 800bec0:	89bb      	ldrh	r3, [r7, #12]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d10d      	bne.n	800bee2 <get_fileinfo+0x17e>
		fno->fname[j] = 0;
 800bec6:	683a      	ldr	r2, [r7, #0]
 800bec8:	69bb      	ldr	r3, [r7, #24]
 800beca:	4413      	add	r3, r2
 800becc:	331a      	adds	r3, #26
 800bece:	2200      	movs	r2, #0
 800bed0:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bed6:	330c      	adds	r3, #12
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d101      	bne.n	800bee2 <get_fileinfo+0x17e>
 800bede:	2300      	movs	r3, #0
 800bee0:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800bee2:	683a      	ldr	r2, [r7, #0]
 800bee4:	69bb      	ldr	r3, [r7, #24]
 800bee6:	4413      	add	r3, r2
 800bee8:	330d      	adds	r3, #13
 800beea:	2200      	movs	r2, #0
 800beec:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bef2:	7ada      	ldrb	r2, [r3, #11]
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800befc:	331c      	adds	r3, #28
 800befe:	4618      	mov	r0, r3
 800bf00:	f7fd fb2d 	bl	800955e <ld_dword>
 800bf04:	4603      	mov	r3, r0
 800bf06:	2200      	movs	r2, #0
 800bf08:	461c      	mov	r4, r3
 800bf0a:	4615      	mov	r5, r2
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	e9c3 4500 	strd	r4, r5, [r3]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf16:	3316      	adds	r3, #22
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f7fd fb20 	bl	800955e <ld_dword>
 800bf1e:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	b29a      	uxth	r2, r3
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	815a      	strh	r2, [r3, #10]
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	0c1b      	lsrs	r3, r3, #16
 800bf2c:	b29a      	uxth	r2, r3
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	811a      	strh	r2, [r3, #8]
 800bf32:	e000      	b.n	800bf36 <get_fileinfo+0x1d2>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800bf34:	bf00      	nop
}
 800bf36:	3720      	adds	r7, #32
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bdb0      	pop	{r4, r5, r7, pc}

0800bf3c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b08a      	sub	sp, #40	; 0x28
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	613b      	str	r3, [r7, #16]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	68db      	ldr	r3, [r3, #12]
 800bf52:	60fb      	str	r3, [r7, #12]
 800bf54:	2300      	movs	r3, #0
 800bf56:	617b      	str	r3, [r7, #20]
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800bf5c:	69bb      	ldr	r3, [r7, #24]
 800bf5e:	1c5a      	adds	r2, r3, #1
 800bf60:	61ba      	str	r2, [r7, #24]
 800bf62:	693a      	ldr	r2, [r7, #16]
 800bf64:	4413      	add	r3, r2
 800bf66:	781b      	ldrb	r3, [r3, #0]
 800bf68:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800bf6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf6c:	2b1f      	cmp	r3, #31
 800bf6e:	d940      	bls.n	800bff2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800bf70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf72:	2b2f      	cmp	r3, #47	; 0x2f
 800bf74:	d006      	beq.n	800bf84 <create_name+0x48>
 800bf76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf78:	2b5c      	cmp	r3, #92	; 0x5c
 800bf7a:	d110      	bne.n	800bf9e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bf7c:	e002      	b.n	800bf84 <create_name+0x48>
 800bf7e:	69bb      	ldr	r3, [r7, #24]
 800bf80:	3301      	adds	r3, #1
 800bf82:	61bb      	str	r3, [r7, #24]
 800bf84:	693a      	ldr	r2, [r7, #16]
 800bf86:	69bb      	ldr	r3, [r7, #24]
 800bf88:	4413      	add	r3, r2
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	2b2f      	cmp	r3, #47	; 0x2f
 800bf8e:	d0f6      	beq.n	800bf7e <create_name+0x42>
 800bf90:	693a      	ldr	r2, [r7, #16]
 800bf92:	69bb      	ldr	r3, [r7, #24]
 800bf94:	4413      	add	r3, r2
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	2b5c      	cmp	r3, #92	; 0x5c
 800bf9a:	d0f0      	beq.n	800bf7e <create_name+0x42>
			break;
 800bf9c:	e02a      	b.n	800bff4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	2bfe      	cmp	r3, #254	; 0xfe
 800bfa2:	d901      	bls.n	800bfa8 <create_name+0x6c>
 800bfa4:	2306      	movs	r3, #6
 800bfa6:	e17d      	b.n	800c2a4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800bfa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfaa:	b2db      	uxtb	r3, r3
 800bfac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800bfae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfb0:	2101      	movs	r1, #1
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f002 fa92 	bl	800e4dc <ff_convert>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800bfbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d101      	bne.n	800bfc6 <create_name+0x8a>
 800bfc2:	2306      	movs	r3, #6
 800bfc4:	e16e      	b.n	800c2a4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800bfc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfc8:	2b7f      	cmp	r3, #127	; 0x7f
 800bfca:	d809      	bhi.n	800bfe0 <create_name+0xa4>
 800bfcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfce:	4619      	mov	r1, r3
 800bfd0:	488d      	ldr	r0, [pc, #564]	; (800c208 <create_name+0x2cc>)
 800bfd2:	f7fd fceb 	bl	80099ac <chk_chr>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d001      	beq.n	800bfe0 <create_name+0xa4>
 800bfdc:	2306      	movs	r3, #6
 800bfde:	e161      	b.n	800c2a4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	1c5a      	adds	r2, r3, #1
 800bfe4:	617a      	str	r2, [r7, #20]
 800bfe6:	005b      	lsls	r3, r3, #1
 800bfe8:	68fa      	ldr	r2, [r7, #12]
 800bfea:	4413      	add	r3, r2
 800bfec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bfee:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800bff0:	e7b4      	b.n	800bf5c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800bff2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800bff4:	693a      	ldr	r2, [r7, #16]
 800bff6:	69bb      	ldr	r3, [r7, #24]
 800bff8:	441a      	add	r2, r3
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bffe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c000:	2b1f      	cmp	r3, #31
 800c002:	d801      	bhi.n	800c008 <create_name+0xcc>
 800c004:	2304      	movs	r3, #4
 800c006:	e000      	b.n	800c00a <create_name+0xce>
 800c008:	2300      	movs	r3, #0
 800c00a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c00e:	e011      	b.n	800c034 <create_name+0xf8>
		w = lfn[di - 1];
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c016:	3b01      	subs	r3, #1
 800c018:	005b      	lsls	r3, r3, #1
 800c01a:	68fa      	ldr	r2, [r7, #12]
 800c01c:	4413      	add	r3, r2
 800c01e:	881b      	ldrh	r3, [r3, #0]
 800c020:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c022:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c024:	2b20      	cmp	r3, #32
 800c026:	d002      	beq.n	800c02e <create_name+0xf2>
 800c028:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c02a:	2b2e      	cmp	r3, #46	; 0x2e
 800c02c:	d106      	bne.n	800c03c <create_name+0x100>
		di--;
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	3b01      	subs	r3, #1
 800c032:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d1ea      	bne.n	800c010 <create_name+0xd4>
 800c03a:	e000      	b.n	800c03e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c03c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	005b      	lsls	r3, r3, #1
 800c042:	68fa      	ldr	r2, [r7, #12]
 800c044:	4413      	add	r3, r2
 800c046:	2200      	movs	r2, #0
 800c048:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d101      	bne.n	800c054 <create_name+0x118>
 800c050:	2306      	movs	r3, #6
 800c052:	e127      	b.n	800c2a4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	3340      	adds	r3, #64	; 0x40
 800c058:	220b      	movs	r2, #11
 800c05a:	2120      	movs	r1, #32
 800c05c:	4618      	mov	r0, r3
 800c05e:	f7fd fc65 	bl	800992c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c062:	2300      	movs	r3, #0
 800c064:	61bb      	str	r3, [r7, #24]
 800c066:	e002      	b.n	800c06e <create_name+0x132>
 800c068:	69bb      	ldr	r3, [r7, #24]
 800c06a:	3301      	adds	r3, #1
 800c06c:	61bb      	str	r3, [r7, #24]
 800c06e:	69bb      	ldr	r3, [r7, #24]
 800c070:	005b      	lsls	r3, r3, #1
 800c072:	68fa      	ldr	r2, [r7, #12]
 800c074:	4413      	add	r3, r2
 800c076:	881b      	ldrh	r3, [r3, #0]
 800c078:	2b20      	cmp	r3, #32
 800c07a:	d0f5      	beq.n	800c068 <create_name+0x12c>
 800c07c:	69bb      	ldr	r3, [r7, #24]
 800c07e:	005b      	lsls	r3, r3, #1
 800c080:	68fa      	ldr	r2, [r7, #12]
 800c082:	4413      	add	r3, r2
 800c084:	881b      	ldrh	r3, [r3, #0]
 800c086:	2b2e      	cmp	r3, #46	; 0x2e
 800c088:	d0ee      	beq.n	800c068 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c08a:	69bb      	ldr	r3, [r7, #24]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d009      	beq.n	800c0a4 <create_name+0x168>
 800c090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c094:	f043 0303 	orr.w	r3, r3, #3
 800c098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c09c:	e002      	b.n	800c0a4 <create_name+0x168>
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	3b01      	subs	r3, #1
 800c0a2:	617b      	str	r3, [r7, #20]
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d009      	beq.n	800c0be <create_name+0x182>
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c0b0:	3b01      	subs	r3, #1
 800c0b2:	005b      	lsls	r3, r3, #1
 800c0b4:	68fa      	ldr	r2, [r7, #12]
 800c0b6:	4413      	add	r3, r2
 800c0b8:	881b      	ldrh	r3, [r3, #0]
 800c0ba:	2b2e      	cmp	r3, #46	; 0x2e
 800c0bc:	d1ef      	bne.n	800c09e <create_name+0x162>

	i = b = 0; ni = 8;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	623b      	str	r3, [r7, #32]
 800c0c8:	2308      	movs	r3, #8
 800c0ca:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c0cc:	69bb      	ldr	r3, [r7, #24]
 800c0ce:	1c5a      	adds	r2, r3, #1
 800c0d0:	61ba      	str	r2, [r7, #24]
 800c0d2:	005b      	lsls	r3, r3, #1
 800c0d4:	68fa      	ldr	r2, [r7, #12]
 800c0d6:	4413      	add	r3, r2
 800c0d8:	881b      	ldrh	r3, [r3, #0]
 800c0da:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c0dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	f000 8090 	beq.w	800c204 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c0e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0e6:	2b20      	cmp	r3, #32
 800c0e8:	d006      	beq.n	800c0f8 <create_name+0x1bc>
 800c0ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0ec:	2b2e      	cmp	r3, #46	; 0x2e
 800c0ee:	d10a      	bne.n	800c106 <create_name+0x1ca>
 800c0f0:	69ba      	ldr	r2, [r7, #24]
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d006      	beq.n	800c106 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c0f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0fc:	f043 0303 	orr.w	r3, r3, #3
 800c100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c104:	e07d      	b.n	800c202 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c106:	6a3a      	ldr	r2, [r7, #32]
 800c108:	69fb      	ldr	r3, [r7, #28]
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d203      	bcs.n	800c116 <create_name+0x1da>
 800c10e:	69ba      	ldr	r2, [r7, #24]
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	429a      	cmp	r2, r3
 800c114:	d123      	bne.n	800c15e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c116:	69fb      	ldr	r3, [r7, #28]
 800c118:	2b0b      	cmp	r3, #11
 800c11a:	d106      	bne.n	800c12a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c11c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c120:	f043 0303 	orr.w	r3, r3, #3
 800c124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c128:	e075      	b.n	800c216 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c12a:	69ba      	ldr	r2, [r7, #24]
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	429a      	cmp	r2, r3
 800c130:	d005      	beq.n	800c13e <create_name+0x202>
 800c132:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c136:	f043 0303 	orr.w	r3, r3, #3
 800c13a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c13e:	69ba      	ldr	r2, [r7, #24]
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	429a      	cmp	r2, r3
 800c144:	d866      	bhi.n	800c214 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	61bb      	str	r3, [r7, #24]
 800c14a:	2308      	movs	r3, #8
 800c14c:	623b      	str	r3, [r7, #32]
 800c14e:	230b      	movs	r3, #11
 800c150:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c152:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c156:	009b      	lsls	r3, r3, #2
 800c158:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c15c:	e051      	b.n	800c202 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c15e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c160:	2b7f      	cmp	r3, #127	; 0x7f
 800c162:	d914      	bls.n	800c18e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c164:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c166:	2100      	movs	r1, #0
 800c168:	4618      	mov	r0, r3
 800c16a:	f002 f9b7 	bl	800e4dc <ff_convert>
 800c16e:	4603      	mov	r3, r0
 800c170:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c172:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c174:	2b00      	cmp	r3, #0
 800c176:	d004      	beq.n	800c182 <create_name+0x246>
 800c178:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c17a:	3b80      	subs	r3, #128	; 0x80
 800c17c:	4a23      	ldr	r2, [pc, #140]	; (800c20c <create_name+0x2d0>)
 800c17e:	5cd3      	ldrb	r3, [r2, r3]
 800c180:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c182:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c186:	f043 0302 	orr.w	r3, r3, #2
 800c18a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c18e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c190:	2b00      	cmp	r3, #0
 800c192:	d007      	beq.n	800c1a4 <create_name+0x268>
 800c194:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c196:	4619      	mov	r1, r3
 800c198:	481d      	ldr	r0, [pc, #116]	; (800c210 <create_name+0x2d4>)
 800c19a:	f7fd fc07 	bl	80099ac <chk_chr>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d008      	beq.n	800c1b6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c1a4:	235f      	movs	r3, #95	; 0x5f
 800c1a6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c1a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1ac:	f043 0303 	orr.w	r3, r3, #3
 800c1b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c1b4:	e01b      	b.n	800c1ee <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c1b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1b8:	2b40      	cmp	r3, #64	; 0x40
 800c1ba:	d909      	bls.n	800c1d0 <create_name+0x294>
 800c1bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1be:	2b5a      	cmp	r3, #90	; 0x5a
 800c1c0:	d806      	bhi.n	800c1d0 <create_name+0x294>
					b |= 2;
 800c1c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c1c6:	f043 0302 	orr.w	r3, r3, #2
 800c1ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c1ce:	e00e      	b.n	800c1ee <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c1d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1d2:	2b60      	cmp	r3, #96	; 0x60
 800c1d4:	d90b      	bls.n	800c1ee <create_name+0x2b2>
 800c1d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1d8:	2b7a      	cmp	r3, #122	; 0x7a
 800c1da:	d808      	bhi.n	800c1ee <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c1dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c1e0:	f043 0301 	orr.w	r3, r3, #1
 800c1e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c1e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1ea:	3b20      	subs	r3, #32
 800c1ec:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c1ee:	6a3b      	ldr	r3, [r7, #32]
 800c1f0:	1c5a      	adds	r2, r3, #1
 800c1f2:	623a      	str	r2, [r7, #32]
 800c1f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c1f6:	b2d1      	uxtb	r1, r2
 800c1f8:	687a      	ldr	r2, [r7, #4]
 800c1fa:	4413      	add	r3, r2
 800c1fc:	460a      	mov	r2, r1
 800c1fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800c202:	e763      	b.n	800c0cc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c204:	bf00      	nop
 800c206:	e006      	b.n	800c216 <create_name+0x2da>
 800c208:	08011d68 	.word	0x08011d68
 800c20c:	08011ddc 	.word	0x08011ddc
 800c210:	08011d74 	.word	0x08011d74
			if (si > di) break;			/* No extension */
 800c214:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c21c:	2be5      	cmp	r3, #229	; 0xe5
 800c21e:	d103      	bne.n	800c228 <create_name+0x2ec>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2205      	movs	r2, #5
 800c224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800c228:	69fb      	ldr	r3, [r7, #28]
 800c22a:	2b08      	cmp	r3, #8
 800c22c:	d104      	bne.n	800c238 <create_name+0x2fc>
 800c22e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c232:	009b      	lsls	r3, r3, #2
 800c234:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c238:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c23c:	f003 030c 	and.w	r3, r3, #12
 800c240:	2b0c      	cmp	r3, #12
 800c242:	d005      	beq.n	800c250 <create_name+0x314>
 800c244:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c248:	f003 0303 	and.w	r3, r3, #3
 800c24c:	2b03      	cmp	r3, #3
 800c24e:	d105      	bne.n	800c25c <create_name+0x320>
 800c250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c254:	f043 0302 	orr.w	r3, r3, #2
 800c258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c25c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c260:	f003 0302 	and.w	r3, r3, #2
 800c264:	2b00      	cmp	r3, #0
 800c266:	d117      	bne.n	800c298 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c268:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c26c:	f003 0303 	and.w	r3, r3, #3
 800c270:	2b01      	cmp	r3, #1
 800c272:	d105      	bne.n	800c280 <create_name+0x344>
 800c274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c278:	f043 0310 	orr.w	r3, r3, #16
 800c27c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c280:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c284:	f003 030c 	and.w	r3, r3, #12
 800c288:	2b04      	cmp	r3, #4
 800c28a:	d105      	bne.n	800c298 <create_name+0x35c>
 800c28c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c290:	f043 0308 	orr.w	r3, r3, #8
 800c294:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c29e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800c2a2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3728      	adds	r7, #40	; 0x28
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b086      	sub	sp, #24
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c2c0:	e002      	b.n	800c2c8 <follow_path+0x1c>
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	3301      	adds	r3, #1
 800c2c6:	603b      	str	r3, [r7, #0]
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	2b2f      	cmp	r3, #47	; 0x2f
 800c2ce:	d0f8      	beq.n	800c2c2 <follow_path+0x16>
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	781b      	ldrb	r3, [r3, #0]
 800c2d4:	2b5c      	cmp	r3, #92	; 0x5c
 800c2d6:	d0f4      	beq.n	800c2c2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	2b1f      	cmp	r3, #31
 800c2ea:	d80a      	bhi.n	800c302 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2280      	movs	r2, #128	; 0x80
 800c2f0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800c2f4:	2100      	movs	r1, #0
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f7fe fb1f 	bl	800a93a <dir_sdi>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	75fb      	strb	r3, [r7, #23]
 800c300:	e078      	b.n	800c3f4 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c302:	463b      	mov	r3, r7
 800c304:	4619      	mov	r1, r3
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f7ff fe18 	bl	800bf3c <create_name>
 800c30c:	4603      	mov	r3, r0
 800c30e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c310:	7dfb      	ldrb	r3, [r7, #23]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d169      	bne.n	800c3ea <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f7ff fa55 	bl	800b7c6 <dir_find>
 800c31c:	4603      	mov	r3, r0
 800c31e:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800c326:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c328:	7dfb      	ldrb	r3, [r7, #23]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d00a      	beq.n	800c344 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c32e:	7dfb      	ldrb	r3, [r7, #23]
 800c330:	2b04      	cmp	r3, #4
 800c332:	d15c      	bne.n	800c3ee <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c334:	7afb      	ldrb	r3, [r7, #11]
 800c336:	f003 0304 	and.w	r3, r3, #4
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d157      	bne.n	800c3ee <follow_path+0x142>
 800c33e:	2305      	movs	r3, #5
 800c340:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c342:	e054      	b.n	800c3ee <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c344:	7afb      	ldrb	r3, [r7, #11]
 800c346:	f003 0304 	and.w	r3, r3, #4
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d151      	bne.n	800c3f2 <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	799b      	ldrb	r3, [r3, #6]
 800c352:	f003 0310 	and.w	r3, r3, #16
 800c356:	2b00      	cmp	r3, #0
 800c358:	d102      	bne.n	800c360 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800c35a:	2305      	movs	r3, #5
 800c35c:	75fb      	strb	r3, [r7, #23]
 800c35e:	e049      	b.n	800c3f4 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	781b      	ldrb	r3, [r3, #0]
 800c364:	2b04      	cmp	r3, #4
 800c366:	d130      	bne.n	800c3ca <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	689a      	ldr	r2, [r3, #8]
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c376:	4613      	mov	r3, r2
 800c378:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c37c:	693a      	ldr	r2, [r7, #16]
 800c37e:	79d2      	ldrb	r2, [r2, #7]
 800c380:	431a      	orrs	r2, r3
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	691b      	ldr	r3, [r3, #16]
 800c392:	3334      	adds	r3, #52	; 0x34
 800c394:	4618      	mov	r0, r3
 800c396:	f7fd f8e2 	bl	800955e <ld_dword>
 800c39a:	4602      	mov	r2, r0
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	691b      	ldr	r3, [r3, #16]
 800c3a4:	3321      	adds	r3, #33	; 0x21
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	f003 0302 	and.w	r3, r3, #2
 800c3ac:	b2da      	uxtb	r2, r3
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	691b      	ldr	r3, [r3, #16]
 800c3b6:	3338      	adds	r3, #56	; 0x38
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7fd f8f2 	bl	80095a2 <ld_qword>
 800c3be:	4602      	mov	r2, r0
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	6939      	ldr	r1, [r7, #16]
 800c3c4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800c3c8:	e79b      	b.n	800c302 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3d8:	4413      	add	r3, r2
 800c3da:	4619      	mov	r1, r3
 800c3dc:	68f8      	ldr	r0, [r7, #12]
 800c3de:	f7fe fc63 	bl	800aca8 <ld_clust>
 800c3e2:	4602      	mov	r2, r0
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c3e8:	e78b      	b.n	800c302 <follow_path+0x56>
			if (res != FR_OK) break;
 800c3ea:	bf00      	nop
 800c3ec:	e002      	b.n	800c3f4 <follow_path+0x148>
				break;
 800c3ee:	bf00      	nop
 800c3f0:	e000      	b.n	800c3f4 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c3f2:	bf00      	nop
			}
		}
	}

	return res;
 800c3f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3718      	adds	r7, #24
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}

0800c3fe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c3fe:	b480      	push	{r7}
 800c400:	b087      	sub	sp, #28
 800c402:	af00      	add	r7, sp, #0
 800c404:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c406:	f04f 33ff 	mov.w	r3, #4294967295
 800c40a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d031      	beq.n	800c478 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	617b      	str	r3, [r7, #20]
 800c41a:	e002      	b.n	800c422 <get_ldnumber+0x24>
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	3301      	adds	r3, #1
 800c420:	617b      	str	r3, [r7, #20]
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	781b      	ldrb	r3, [r3, #0]
 800c426:	2b1f      	cmp	r3, #31
 800c428:	d903      	bls.n	800c432 <get_ldnumber+0x34>
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	781b      	ldrb	r3, [r3, #0]
 800c42e:	2b3a      	cmp	r3, #58	; 0x3a
 800c430:	d1f4      	bne.n	800c41c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	781b      	ldrb	r3, [r3, #0]
 800c436:	2b3a      	cmp	r3, #58	; 0x3a
 800c438:	d11c      	bne.n	800c474 <get_ldnumber+0x76>
			tp = *path;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	1c5a      	adds	r2, r3, #1
 800c444:	60fa      	str	r2, [r7, #12]
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	3b30      	subs	r3, #48	; 0x30
 800c44a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	2b09      	cmp	r3, #9
 800c450:	d80e      	bhi.n	800c470 <get_ldnumber+0x72>
 800c452:	68fa      	ldr	r2, [r7, #12]
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	429a      	cmp	r2, r3
 800c458:	d10a      	bne.n	800c470 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	2b03      	cmp	r3, #3
 800c45e:	d807      	bhi.n	800c470 <get_ldnumber+0x72>
					vol = (int)i;
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	3301      	adds	r3, #1
 800c468:	617b      	str	r3, [r7, #20]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	697a      	ldr	r2, [r7, #20]
 800c46e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	e002      	b.n	800c47a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c474:	2300      	movs	r3, #0
 800c476:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c478:	693b      	ldr	r3, [r7, #16]
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	371c      	adds	r7, #28
 800c47e:	46bd      	mov	sp, r7
 800c480:	bc80      	pop	{r7}
 800c482:	4770      	bx	lr

0800c484 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b082      	sub	sp, #8
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2200      	movs	r2, #0
 800c492:	70da      	strb	r2, [r3, #3]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f04f 32ff 	mov.w	r2, #4294967295
 800c49a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c49c:	6839      	ldr	r1, [r7, #0]
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f7fd fc48 	bl	8009d34 <move_window>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d001      	beq.n	800c4ae <check_fs+0x2a>
 800c4aa:	2304      	movs	r3, #4
 800c4ac:	e044      	b.n	800c538 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	3338      	adds	r3, #56	; 0x38
 800c4b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f7fd f83a 	bl	8009530 <ld_word>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	461a      	mov	r2, r3
 800c4c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d001      	beq.n	800c4cc <check_fs+0x48>
 800c4c8:	2303      	movs	r3, #3
 800c4ca:	e035      	b.n	800c538 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c4d2:	2be9      	cmp	r3, #233	; 0xe9
 800c4d4:	d009      	beq.n	800c4ea <check_fs+0x66>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c4dc:	2beb      	cmp	r3, #235	; 0xeb
 800c4de:	d11e      	bne.n	800c51e <check_fs+0x9a>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c4e6:	2b90      	cmp	r3, #144	; 0x90
 800c4e8:	d119      	bne.n	800c51e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	3338      	adds	r3, #56	; 0x38
 800c4ee:	3336      	adds	r3, #54	; 0x36
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7fd f834 	bl	800955e <ld_dword>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c4fc:	4a10      	ldr	r2, [pc, #64]	; (800c540 <check_fs+0xbc>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d101      	bne.n	800c506 <check_fs+0x82>
 800c502:	2300      	movs	r3, #0
 800c504:	e018      	b.n	800c538 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	3338      	adds	r3, #56	; 0x38
 800c50a:	3352      	adds	r3, #82	; 0x52
 800c50c:	4618      	mov	r0, r3
 800c50e:	f7fd f826 	bl	800955e <ld_dword>
 800c512:	4603      	mov	r3, r0
 800c514:	4a0b      	ldr	r2, [pc, #44]	; (800c544 <check_fs+0xc0>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d101      	bne.n	800c51e <check_fs+0x9a>
 800c51a:	2300      	movs	r3, #0
 800c51c:	e00c      	b.n	800c538 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	3338      	adds	r3, #56	; 0x38
 800c522:	220b      	movs	r2, #11
 800c524:	4908      	ldr	r1, [pc, #32]	; (800c548 <check_fs+0xc4>)
 800c526:	4618      	mov	r0, r3
 800c528:	f7fd fa1a 	bl	8009960 <mem_cmp>
 800c52c:	4603      	mov	r3, r0
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d101      	bne.n	800c536 <check_fs+0xb2>
 800c532:	2301      	movs	r3, #1
 800c534:	e000      	b.n	800c538 <check_fs+0xb4>
#endif
	return 2;
 800c536:	2302      	movs	r3, #2
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3708      	adds	r7, #8
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}
 800c540:	00544146 	.word	0x00544146
 800c544:	33544146 	.word	0x33544146
 800c548:	08011d7c 	.word	0x08011d7c

0800c54c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c54c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c550:	b09c      	sub	sp, #112	; 0x70
 800c552:	af00      	add	r7, sp, #0
 800c554:	61f8      	str	r0, [r7, #28]
 800c556:	61b9      	str	r1, [r7, #24]
 800c558:	4613      	mov	r3, r2
 800c55a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c55c:	69bb      	ldr	r3, [r7, #24]
 800c55e:	2200      	movs	r2, #0
 800c560:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c562:	69f8      	ldr	r0, [r7, #28]
 800c564:	f7ff ff4b 	bl	800c3fe <get_ldnumber>
 800c568:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800c56a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	da01      	bge.n	800c574 <find_volume+0x28>
 800c570:	230b      	movs	r3, #11
 800c572:	e337      	b.n	800cbe4 <find_volume+0x698>


	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c574:	4a99      	ldr	r2, [pc, #612]	; (800c7dc <find_volume+0x290>)
 800c576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c57c:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c57e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c580:	2b00      	cmp	r3, #0
 800c582:	d101      	bne.n	800c588 <find_volume+0x3c>
 800c584:	230c      	movs	r3, #12
 800c586:	e32d      	b.n	800cbe4 <find_volume+0x698>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c588:	69bb      	ldr	r3, [r7, #24]
 800c58a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c58c:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c58e:	7dfb      	ldrb	r3, [r7, #23]
 800c590:	f023 0301 	bic.w	r3, r3, #1
 800c594:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c598:	781b      	ldrb	r3, [r3, #0]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d01a      	beq.n	800c5d4 <find_volume+0x88>

		stat = disk_status(fs->drv);
 800c59e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5a0:	785b      	ldrb	r3, [r3, #1]
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f7fc ff26 	bl	80093f4 <disk_status>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c5ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c5b2:	f003 0301 	and.w	r3, r3, #1
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d10c      	bne.n	800c5d4 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c5ba:	7dfb      	ldrb	r3, [r7, #23]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d007      	beq.n	800c5d0 <find_volume+0x84>
 800c5c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c5c4:	f003 0304 	and.w	r3, r3, #4
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d001      	beq.n	800c5d0 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800c5cc:	230a      	movs	r3, #10
 800c5ce:	e309      	b.n	800cbe4 <find_volume+0x698>
			}
			return FR_OK;				/* The file system object is valid */
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	e307      	b.n	800cbe4 <find_volume+0x698>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c5d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c5da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5dc:	b2da      	uxtb	r2, r3
 800c5de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5e0:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c5e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5e4:	785b      	ldrb	r3, [r3, #1]
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7fc ff1e 	bl	8009428 <disk_initialize>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c5f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c5f6:	f003 0301 	and.w	r3, r3, #1
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d001      	beq.n	800c602 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c5fe:	2303      	movs	r3, #3
 800c600:	e2f0      	b.n	800cbe4 <find_volume+0x698>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c602:	7dfb      	ldrb	r3, [r7, #23]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d007      	beq.n	800c618 <find_volume+0xcc>
 800c608:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c60c:	f003 0304 	and.w	r3, r3, #4
 800c610:	2b00      	cmp	r3, #0
 800c612:	d001      	beq.n	800c618 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800c614:	230a      	movs	r3, #10
 800c616:	e2e5      	b.n	800cbe4 <find_volume+0x698>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c618:	2300      	movs	r3, #0
 800c61a:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c61c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c61e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c620:	f7ff ff30 	bl	800c484 <check_fs>
 800c624:	4603      	mov	r3, r0
 800c626:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c62a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c62e:	2b02      	cmp	r3, #2
 800c630:	d14d      	bne.n	800c6ce <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c632:	2300      	movs	r3, #0
 800c634:	65bb      	str	r3, [r7, #88]	; 0x58
 800c636:	e020      	b.n	800c67a <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c63a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c63e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c640:	011b      	lsls	r3, r3, #4
 800c642:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c646:	4413      	add	r3, r2
 800c648:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c64a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c64c:	3304      	adds	r3, #4
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d006      	beq.n	800c662 <find_volume+0x116>
 800c654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c656:	3308      	adds	r3, #8
 800c658:	4618      	mov	r0, r3
 800c65a:	f7fc ff80 	bl	800955e <ld_dword>
 800c65e:	4602      	mov	r2, r0
 800c660:	e000      	b.n	800c664 <find_volume+0x118>
 800c662:	2200      	movs	r2, #0
 800c664:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c666:	009b      	lsls	r3, r3, #2
 800c668:	3360      	adds	r3, #96	; 0x60
 800c66a:	f107 0110 	add.w	r1, r7, #16
 800c66e:	440b      	add	r3, r1
 800c670:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c674:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c676:	3301      	adds	r3, #1
 800c678:	65bb      	str	r3, [r7, #88]	; 0x58
 800c67a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c67c:	2b03      	cmp	r3, #3
 800c67e:	d9db      	bls.n	800c638 <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c680:	2300      	movs	r3, #0
 800c682:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 800c684:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c686:	2b00      	cmp	r3, #0
 800c688:	d002      	beq.n	800c690 <find_volume+0x144>
 800c68a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c68c:	3b01      	subs	r3, #1
 800c68e:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c690:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c692:	009b      	lsls	r3, r3, #2
 800c694:	3360      	adds	r3, #96	; 0x60
 800c696:	f107 0210 	add.w	r2, r7, #16
 800c69a:	4413      	add	r3, r2
 800c69c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800c6a0:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c6a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d005      	beq.n	800c6b4 <find_volume+0x168>
 800c6a8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c6aa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c6ac:	f7ff feea 	bl	800c484 <check_fs>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	e000      	b.n	800c6b6 <find_volume+0x16a>
 800c6b4:	2303      	movs	r3, #3
 800c6b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c6ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c6be:	2b01      	cmp	r3, #1
 800c6c0:	d905      	bls.n	800c6ce <find_volume+0x182>
 800c6c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	65bb      	str	r3, [r7, #88]	; 0x58
 800c6c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c6ca:	2b03      	cmp	r3, #3
 800c6cc:	d9e0      	bls.n	800c690 <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c6ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c6d2:	2b04      	cmp	r3, #4
 800c6d4:	d101      	bne.n	800c6da <find_volume+0x18e>
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	e284      	b.n	800cbe4 <find_volume+0x698>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c6da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c6de:	2b01      	cmp	r3, #1
 800c6e0:	d901      	bls.n	800c6e6 <find_volume+0x19a>
 800c6e2:	230d      	movs	r3, #13
 800c6e4:	e27e      	b.n	800cbe4 <find_volume+0x698>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800c6e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c6ea:	2b01      	cmp	r3, #1
 800c6ec:	f040 80fa 	bne.w	800c8e4 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800c6f0:	230b      	movs	r3, #11
 800c6f2:	65bb      	str	r3, [r7, #88]	; 0x58
 800c6f4:	e002      	b.n	800c6fc <find_volume+0x1b0>
 800c6f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	65bb      	str	r3, [r7, #88]	; 0x58
 800c6fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c6fe:	2b3f      	cmp	r3, #63	; 0x3f
 800c700:	d806      	bhi.n	800c710 <find_volume+0x1c4>
 800c702:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c704:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c706:	4413      	add	r3, r2
 800c708:	3338      	adds	r3, #56	; 0x38
 800c70a:	781b      	ldrb	r3, [r3, #0]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d0f2      	beq.n	800c6f6 <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800c710:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c712:	2b3f      	cmp	r3, #63	; 0x3f
 800c714:	d801      	bhi.n	800c71a <find_volume+0x1ce>
 800c716:	230d      	movs	r3, #13
 800c718:	e264      	b.n	800cbe4 <find_volume+0x698>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800c71a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c71c:	3338      	adds	r3, #56	; 0x38
 800c71e:	3368      	adds	r3, #104	; 0x68
 800c720:	4618      	mov	r0, r3
 800c722:	f7fc ff05 	bl	8009530 <ld_word>
 800c726:	4603      	mov	r3, r0
 800c728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c72c:	d001      	beq.n	800c732 <find_volume+0x1e6>
 800c72e:	230d      	movs	r3, #13
 800c730:	e258      	b.n	800cbe4 <find_volume+0x698>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800c732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c734:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800c738:	2b09      	cmp	r3, #9
 800c73a:	d001      	beq.n	800c740 <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 800c73c:	230d      	movs	r3, #13
 800c73e:	e251      	b.n	800cbe4 <find_volume+0x698>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800c740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c742:	3338      	adds	r3, #56	; 0x38
 800c744:	3348      	adds	r3, #72	; 0x48
 800c746:	4618      	mov	r0, r3
 800c748:	f7fc ff2b 	bl	80095a2 <ld_qword>
 800c74c:	4602      	mov	r2, r0
 800c74e:	460b      	mov	r3, r1
 800c750:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c752:	2000      	movs	r0, #0
 800c754:	60b9      	str	r1, [r7, #8]
 800c756:	60f8      	str	r0, [r7, #12]
 800c758:	68b9      	ldr	r1, [r7, #8]
 800c75a:	1851      	adds	r1, r2, r1
 800c75c:	6039      	str	r1, [r7, #0]
 800c75e:	68f9      	ldr	r1, [r7, #12]
 800c760:	eb43 0101 	adc.w	r1, r3, r1
 800c764:	6079      	str	r1, [r7, #4]
 800c766:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c76a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800c76e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c772:	2b01      	cmp	r3, #1
 800c774:	d301      	bcc.n	800c77a <find_volume+0x22e>
 800c776:	230d      	movs	r3, #13
 800c778:	e234      	b.n	800cbe4 <find_volume+0x698>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800c77a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c77c:	3338      	adds	r3, #56	; 0x38
 800c77e:	3354      	adds	r3, #84	; 0x54
 800c780:	4618      	mov	r0, r3
 800c782:	f7fc feec 	bl	800955e <ld_dword>
 800c786:	4602      	mov	r2, r0
 800c788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c78a:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800c78c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c78e:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 800c792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c794:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800c796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c798:	789b      	ldrb	r3, [r3, #2]
 800c79a:	2b01      	cmp	r3, #1
 800c79c:	d001      	beq.n	800c7a2 <find_volume+0x256>
 800c79e:	230d      	movs	r3, #13
 800c7a0:	e220      	b.n	800cbe4 <find_volume+0x698>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800c7a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	4093      	lsls	r3, r2
 800c7ae:	b29a      	uxth	r2, r3
 800c7b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7b2:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800c7b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7b6:	895b      	ldrh	r3, [r3, #10]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d101      	bne.n	800c7c0 <find_volume+0x274>
 800c7bc:	230d      	movs	r3, #13
 800c7be:	e211      	b.n	800cbe4 <find_volume+0x698>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800c7c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7c2:	3338      	adds	r3, #56	; 0x38
 800c7c4:	335c      	adds	r3, #92	; 0x5c
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f7fc fec9 	bl	800955e <ld_dword>
 800c7cc:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800c7ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7d0:	4a03      	ldr	r2, [pc, #12]	; (800c7e0 <find_volume+0x294>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d906      	bls.n	800c7e4 <find_volume+0x298>
 800c7d6:	230d      	movs	r3, #13
 800c7d8:	e204      	b.n	800cbe4 <find_volume+0x698>
 800c7da:	bf00      	nop
 800c7dc:	20000d0c 	.word	0x20000d0c
 800c7e0:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800c7e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7e6:	1c9a      	adds	r2, r3, #2
 800c7e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7ea:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800c7ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c7f0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800c7f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7f4:	3338      	adds	r3, #56	; 0x38
 800c7f6:	3358      	adds	r3, #88	; 0x58
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f7fc feb0 	bl	800955e <ld_dword>
 800c7fe:	4602      	mov	r2, r0
 800c800:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c802:	441a      	add	r2, r3
 800c804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c806:	631a      	str	r2, [r3, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800c808:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c80a:	3338      	adds	r3, #56	; 0x38
 800c80c:	3350      	adds	r3, #80	; 0x50
 800c80e:	4618      	mov	r0, r3
 800c810:	f7fc fea5 	bl	800955e <ld_dword>
 800c814:	4602      	mov	r2, r0
 800c816:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c818:	441a      	add	r2, r3
 800c81a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c81c:	629a      	str	r2, [r3, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800c81e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c822:	2200      	movs	r2, #0
 800c824:	469a      	mov	sl, r3
 800c826:	4693      	mov	fp, r2
 800c828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c82a:	895b      	ldrh	r3, [r3, #10]
 800c82c:	461a      	mov	r2, r3
 800c82e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c830:	fb02 f303 	mul.w	r3, r2, r3
 800c834:	2200      	movs	r2, #0
 800c836:	4698      	mov	r8, r3
 800c838:	4691      	mov	r9, r2
 800c83a:	eb1a 0408 	adds.w	r4, sl, r8
 800c83e:	eb4b 0509 	adc.w	r5, fp, r9
 800c842:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c846:	42a2      	cmp	r2, r4
 800c848:	41ab      	sbcs	r3, r5
 800c84a:	d201      	bcs.n	800c850 <find_volume+0x304>
 800c84c:	230d      	movs	r3, #13
 800c84e:	e1c9      	b.n	800cbe4 <find_volume+0x698>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800c850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c852:	3338      	adds	r3, #56	; 0x38
 800c854:	3360      	adds	r3, #96	; 0x60
 800c856:	4618      	mov	r0, r3
 800c858:	f7fc fe81 	bl	800955e <ld_dword>
 800c85c:	4602      	mov	r2, r0
 800c85e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c860:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800c862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c866:	4619      	mov	r1, r3
 800c868:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c86a:	f7fd faff 	bl	8009e6c <clust2sect>
 800c86e:	4603      	mov	r3, r0
 800c870:	4619      	mov	r1, r3
 800c872:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c874:	f7fd fa5e 	bl	8009d34 <move_window>
 800c878:	4603      	mov	r3, r0
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d001      	beq.n	800c882 <find_volume+0x336>
 800c87e:	2301      	movs	r3, #1
 800c880:	e1b0      	b.n	800cbe4 <find_volume+0x698>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800c882:	2300      	movs	r3, #0
 800c884:	65bb      	str	r3, [r7, #88]	; 0x58
 800c886:	e015      	b.n	800c8b4 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800c888:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c88a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c88c:	4413      	add	r3, r2
 800c88e:	3338      	adds	r3, #56	; 0x38
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	2b81      	cmp	r3, #129	; 0x81
 800c894:	d10b      	bne.n	800c8ae <find_volume+0x362>
 800c896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c898:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c89c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c89e:	3314      	adds	r3, #20
 800c8a0:	4413      	add	r3, r2
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7fc fe5b 	bl	800955e <ld_dword>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2b02      	cmp	r3, #2
 800c8ac:	d007      	beq.n	800c8be <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800c8ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c8b0:	3320      	adds	r3, #32
 800c8b2:	65bb      	str	r3, [r7, #88]	; 0x58
 800c8b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c8b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8ba:	d3e5      	bcc.n	800c888 <find_volume+0x33c>
 800c8bc:	e000      	b.n	800c8c0 <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800c8be:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800c8c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c8c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8c6:	d101      	bne.n	800c8cc <find_volume+0x380>
 800c8c8:	230d      	movs	r3, #13
 800c8ca:	e18b      	b.n	800cbe4 <find_volume+0x698>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c8cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c8d2:	619a      	str	r2, [r3, #24]
 800c8d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8d6:	699a      	ldr	r2, [r3, #24]
 800c8d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8da:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800c8dc:	2304      	movs	r3, #4
 800c8de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800c8e2:	e167      	b.n	800cbb4 <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c8e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8e6:	3338      	adds	r3, #56	; 0x38
 800c8e8:	330b      	adds	r3, #11
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f7fc fe20 	bl	8009530 <ld_word>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8f6:	d001      	beq.n	800c8fc <find_volume+0x3b0>
 800c8f8:	230d      	movs	r3, #13
 800c8fa:	e173      	b.n	800cbe4 <find_volume+0x698>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c8fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8fe:	3338      	adds	r3, #56	; 0x38
 800c900:	3316      	adds	r3, #22
 800c902:	4618      	mov	r0, r3
 800c904:	f7fc fe14 	bl	8009530 <ld_word>
 800c908:	4603      	mov	r3, r0
 800c90a:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c90c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d106      	bne.n	800c920 <find_volume+0x3d4>
 800c912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c914:	3338      	adds	r3, #56	; 0x38
 800c916:	3324      	adds	r3, #36	; 0x24
 800c918:	4618      	mov	r0, r3
 800c91a:	f7fc fe20 	bl	800955e <ld_dword>
 800c91e:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 800c920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c922:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c924:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c928:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800c92c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c92e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c932:	789b      	ldrb	r3, [r3, #2]
 800c934:	2b01      	cmp	r3, #1
 800c936:	d005      	beq.n	800c944 <find_volume+0x3f8>
 800c938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c93a:	789b      	ldrb	r3, [r3, #2]
 800c93c:	2b02      	cmp	r3, #2
 800c93e:	d001      	beq.n	800c944 <find_volume+0x3f8>
 800c940:	230d      	movs	r3, #13
 800c942:	e14f      	b.n	800cbe4 <find_volume+0x698>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c946:	789b      	ldrb	r3, [r3, #2]
 800c948:	461a      	mov	r2, r3
 800c94a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c94c:	fb02 f303 	mul.w	r3, r2, r3
 800c950:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c954:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c958:	b29a      	uxth	r2, r3
 800c95a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c95c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c95e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c960:	895b      	ldrh	r3, [r3, #10]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d008      	beq.n	800c978 <find_volume+0x42c>
 800c966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c968:	895b      	ldrh	r3, [r3, #10]
 800c96a:	461a      	mov	r2, r3
 800c96c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c96e:	895b      	ldrh	r3, [r3, #10]
 800c970:	3b01      	subs	r3, #1
 800c972:	4013      	ands	r3, r2
 800c974:	2b00      	cmp	r3, #0
 800c976:	d001      	beq.n	800c97c <find_volume+0x430>
 800c978:	230d      	movs	r3, #13
 800c97a:	e133      	b.n	800cbe4 <find_volume+0x698>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c97c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c97e:	3338      	adds	r3, #56	; 0x38
 800c980:	3311      	adds	r3, #17
 800c982:	4618      	mov	r0, r3
 800c984:	f7fc fdd4 	bl	8009530 <ld_word>
 800c988:	4603      	mov	r3, r0
 800c98a:	461a      	mov	r2, r3
 800c98c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c98e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c992:	891b      	ldrh	r3, [r3, #8]
 800c994:	f003 030f 	and.w	r3, r3, #15
 800c998:	b29b      	uxth	r3, r3
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d001      	beq.n	800c9a2 <find_volume+0x456>
 800c99e:	230d      	movs	r3, #13
 800c9a0:	e120      	b.n	800cbe4 <find_volume+0x698>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c9a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9a4:	3338      	adds	r3, #56	; 0x38
 800c9a6:	3313      	adds	r3, #19
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f7fc fdc1 	bl	8009530 <ld_word>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c9b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d106      	bne.n	800c9c6 <find_volume+0x47a>
 800c9b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9ba:	3338      	adds	r3, #56	; 0x38
 800c9bc:	3320      	adds	r3, #32
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f7fc fdcd 	bl	800955e <ld_dword>
 800c9c4:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c9c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9c8:	3338      	adds	r3, #56	; 0x38
 800c9ca:	330e      	adds	r3, #14
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f7fc fdaf 	bl	8009530 <ld_word>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c9d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d101      	bne.n	800c9e4 <find_volume+0x498>
 800c9e0:	230d      	movs	r3, #13
 800c9e2:	e0ff      	b.n	800cbe4 <find_volume+0x698>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c9e4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800c9e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9ea:	4413      	add	r3, r2
 800c9ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c9ee:	8912      	ldrh	r2, [r2, #8]
 800c9f0:	0912      	lsrs	r2, r2, #4
 800c9f2:	b292      	uxth	r2, r2
 800c9f4:	4413      	add	r3, r2
 800c9f6:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c9f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c9fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d201      	bcs.n	800ca04 <find_volume+0x4b8>
 800ca00:	230d      	movs	r3, #13
 800ca02:	e0ef      	b.n	800cbe4 <find_volume+0x698>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ca04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ca06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca08:	1ad3      	subs	r3, r2, r3
 800ca0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ca0c:	8952      	ldrh	r2, [r2, #10]
 800ca0e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca12:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ca14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d101      	bne.n	800ca1e <find_volume+0x4d2>
 800ca1a:	230d      	movs	r3, #13
 800ca1c:	e0e2      	b.n	800cbe4 <find_volume+0x698>
		fmt = FS_FAT32;
 800ca1e:	2303      	movs	r3, #3
 800ca20:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ca24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca26:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d802      	bhi.n	800ca34 <find_volume+0x4e8>
 800ca2e:	2302      	movs	r3, #2
 800ca30:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ca34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca36:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d802      	bhi.n	800ca44 <find_volume+0x4f8>
 800ca3e:	2301      	movs	r3, #1
 800ca40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ca44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca46:	1c9a      	adds	r2, r3, #2
 800ca48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca4a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800ca4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ca50:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ca52:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ca56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ca58:	441a      	add	r2, r3
 800ca5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca5c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800ca5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ca60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca62:	441a      	add	r2, r3
 800ca64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca66:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800ca68:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ca6c:	2b03      	cmp	r3, #3
 800ca6e:	d11e      	bne.n	800caae <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ca70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca72:	3338      	adds	r3, #56	; 0x38
 800ca74:	332a      	adds	r3, #42	; 0x2a
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7fc fd5a 	bl	8009530 <ld_word>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d001      	beq.n	800ca86 <find_volume+0x53a>
 800ca82:	230d      	movs	r3, #13
 800ca84:	e0ae      	b.n	800cbe4 <find_volume+0x698>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ca86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca88:	891b      	ldrh	r3, [r3, #8]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d001      	beq.n	800ca92 <find_volume+0x546>
 800ca8e:	230d      	movs	r3, #13
 800ca90:	e0a8      	b.n	800cbe4 <find_volume+0x698>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ca92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca94:	3338      	adds	r3, #56	; 0x38
 800ca96:	332c      	adds	r3, #44	; 0x2c
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f7fc fd60 	bl	800955e <ld_dword>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800caa2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800caa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800caa6:	69db      	ldr	r3, [r3, #28]
 800caa8:	009b      	lsls	r3, r3, #2
 800caaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800caac:	e01f      	b.n	800caee <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800caae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cab0:	891b      	ldrh	r3, [r3, #8]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d101      	bne.n	800caba <find_volume+0x56e>
 800cab6:	230d      	movs	r3, #13
 800cab8:	e094      	b.n	800cbe4 <find_volume+0x698>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800caba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cabc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cabe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cac0:	441a      	add	r2, r3
 800cac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cac4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cac6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800caca:	2b02      	cmp	r3, #2
 800cacc:	d103      	bne.n	800cad6 <find_volume+0x58a>
 800cace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cad0:	69db      	ldr	r3, [r3, #28]
 800cad2:	005b      	lsls	r3, r3, #1
 800cad4:	e00a      	b.n	800caec <find_volume+0x5a0>
 800cad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cad8:	69da      	ldr	r2, [r3, #28]
 800cada:	4613      	mov	r3, r2
 800cadc:	005b      	lsls	r3, r3, #1
 800cade:	4413      	add	r3, r2
 800cae0:	085a      	lsrs	r2, r3, #1
 800cae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cae4:	69db      	ldr	r3, [r3, #28]
 800cae6:	f003 0301 	and.w	r3, r3, #1
 800caea:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800caec:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800caee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800caf0:	6a1a      	ldr	r2, [r3, #32]
 800caf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800caf4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800caf8:	0a5b      	lsrs	r3, r3, #9
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d201      	bcs.n	800cb02 <find_volume+0x5b6>
 800cafe:	230d      	movs	r3, #13
 800cb00:	e070      	b.n	800cbe4 <find_volume+0x698>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cb02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb04:	f04f 32ff 	mov.w	r2, #4294967295
 800cb08:	619a      	str	r2, [r3, #24]
 800cb0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb0c:	699a      	ldr	r2, [r3, #24]
 800cb0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb10:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800cb12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb14:	2280      	movs	r2, #128	; 0x80
 800cb16:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cb18:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800cb1c:	2b03      	cmp	r3, #3
 800cb1e:	d149      	bne.n	800cbb4 <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cb20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb22:	3338      	adds	r3, #56	; 0x38
 800cb24:	3330      	adds	r3, #48	; 0x30
 800cb26:	4618      	mov	r0, r3
 800cb28:	f7fc fd02 	bl	8009530 <ld_word>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	d140      	bne.n	800cbb4 <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cb32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cb34:	3301      	adds	r3, #1
 800cb36:	4619      	mov	r1, r3
 800cb38:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800cb3a:	f7fd f8fb 	bl	8009d34 <move_window>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d137      	bne.n	800cbb4 <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 800cb44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb46:	2200      	movs	r2, #0
 800cb48:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cb4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb4c:	3338      	adds	r3, #56	; 0x38
 800cb4e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cb52:	4618      	mov	r0, r3
 800cb54:	f7fc fcec 	bl	8009530 <ld_word>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d127      	bne.n	800cbb4 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cb64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb66:	3338      	adds	r3, #56	; 0x38
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f7fc fcf8 	bl	800955e <ld_dword>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	4a1f      	ldr	r2, [pc, #124]	; (800cbf0 <find_volume+0x6a4>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d11e      	bne.n	800cbb4 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cb76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb78:	3338      	adds	r3, #56	; 0x38
 800cb7a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7fc fced 	bl	800955e <ld_dword>
 800cb84:	4603      	mov	r3, r0
 800cb86:	4a1b      	ldr	r2, [pc, #108]	; (800cbf4 <find_volume+0x6a8>)
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	d113      	bne.n	800cbb4 <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cb8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb8e:	3338      	adds	r3, #56	; 0x38
 800cb90:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cb94:	4618      	mov	r0, r3
 800cb96:	f7fc fce2 	bl	800955e <ld_dword>
 800cb9a:	4602      	mov	r2, r0
 800cb9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb9e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cba2:	3338      	adds	r3, #56	; 0x38
 800cba4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f7fc fcd8 	bl	800955e <ld_dword>
 800cbae:	4602      	mov	r2, r0
 800cbb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbb2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cbb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbb6:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800cbba:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cbbc:	4b0e      	ldr	r3, [pc, #56]	; (800cbf8 <find_volume+0x6ac>)
 800cbbe:	881b      	ldrh	r3, [r3, #0]
 800cbc0:	3301      	adds	r3, #1
 800cbc2:	b29a      	uxth	r2, r3
 800cbc4:	4b0c      	ldr	r3, [pc, #48]	; (800cbf8 <find_volume+0x6ac>)
 800cbc6:	801a      	strh	r2, [r3, #0]
 800cbc8:	4b0b      	ldr	r3, [pc, #44]	; (800cbf8 <find_volume+0x6ac>)
 800cbca:	881a      	ldrh	r2, [r3, #0]
 800cbcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbce:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800cbd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbd2:	4a0a      	ldr	r2, [pc, #40]	; (800cbfc <find_volume+0x6b0>)
 800cbd4:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800cbd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbd8:	4a09      	ldr	r2, [pc, #36]	; (800cc00 <find_volume+0x6b4>)
 800cbda:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cbdc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800cbde:	f7fd f841 	bl	8009c64 <clear_lock>
#endif
	return FR_OK;
 800cbe2:	2300      	movs	r3, #0
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3770      	adds	r7, #112	; 0x70
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cbee:	bf00      	nop
 800cbf0:	41615252 	.word	0x41615252
 800cbf4:	61417272 	.word	0x61417272
 800cbf8:	20000d1c 	.word	0x20000d1c
 800cbfc:	20000fa0 	.word	0x20000fa0
 800cc00:	20000d40 	.word	0x20000d40

0800cc04 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b084      	sub	sp, #16
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cc0e:	2309      	movs	r3, #9
 800cc10:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d01c      	beq.n	800cc52 <validate+0x4e>
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d018      	beq.n	800cc52 <validate+0x4e>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d013      	beq.n	800cc52 <validate+0x4e>
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	889a      	ldrh	r2, [r3, #4]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	88db      	ldrh	r3, [r3, #6]
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d10c      	bne.n	800cc52 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	785b      	ldrb	r3, [r3, #1]
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7fc fbd8 	bl	80093f4 <disk_status>
 800cc44:	4603      	mov	r3, r0
 800cc46:	f003 0301 	and.w	r3, r3, #1
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d101      	bne.n	800cc52 <validate+0x4e>
			res = FR_OK;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cc52:	7bfb      	ldrb	r3, [r7, #15]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d102      	bne.n	800cc5e <validate+0x5a>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	e000      	b.n	800cc60 <validate+0x5c>
 800cc5e:	2300      	movs	r3, #0
 800cc60:	683a      	ldr	r2, [r7, #0]
 800cc62:	6013      	str	r3, [r2, #0]
	return res;
 800cc64:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3710      	adds	r7, #16
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
	...

0800cc70 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b088      	sub	sp, #32
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	60f8      	str	r0, [r7, #12]
 800cc78:	60b9      	str	r1, [r7, #8]
 800cc7a:	4613      	mov	r3, r2
 800cc7c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cc82:	f107 0310 	add.w	r3, r7, #16
 800cc86:	4618      	mov	r0, r3
 800cc88:	f7ff fbb9 	bl	800c3fe <get_ldnumber>
 800cc8c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cc8e:	69fb      	ldr	r3, [r7, #28]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	da01      	bge.n	800cc98 <f_mount+0x28>
 800cc94:	230b      	movs	r3, #11
 800cc96:	e02b      	b.n	800ccf0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cc98:	4a17      	ldr	r2, [pc, #92]	; (800ccf8 <f_mount+0x88>)
 800cc9a:	69fb      	ldr	r3, [r7, #28]
 800cc9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cca0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cca2:	69bb      	ldr	r3, [r7, #24]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d005      	beq.n	800ccb4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cca8:	69b8      	ldr	r0, [r7, #24]
 800ccaa:	f7fc ffdb 	bl	8009c64 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ccae:	69bb      	ldr	r3, [r7, #24]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d002      	beq.n	800ccc0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ccc0:	68fa      	ldr	r2, [r7, #12]
 800ccc2:	490d      	ldr	r1, [pc, #52]	; (800ccf8 <f_mount+0x88>)
 800ccc4:	69fb      	ldr	r3, [r7, #28]
 800ccc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d002      	beq.n	800ccd6 <f_mount+0x66>
 800ccd0:	79fb      	ldrb	r3, [r7, #7]
 800ccd2:	2b01      	cmp	r3, #1
 800ccd4:	d001      	beq.n	800ccda <f_mount+0x6a>
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	e00a      	b.n	800ccf0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ccda:	f107 010c 	add.w	r1, r7, #12
 800ccde:	f107 0308 	add.w	r3, r7, #8
 800cce2:	2200      	movs	r2, #0
 800cce4:	4618      	mov	r0, r3
 800cce6:	f7ff fc31 	bl	800c54c <find_volume>
 800ccea:	4603      	mov	r3, r0
 800ccec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ccee:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3720      	adds	r7, #32
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}
 800ccf8:	20000d0c 	.word	0x20000d0c

0800ccfc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ccfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cd00:	b0a6      	sub	sp, #152	; 0x98
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	61f8      	str	r0, [r7, #28]
 800cd06:	61b9      	str	r1, [r7, #24]
 800cd08:	4613      	mov	r3, r2
 800cd0a:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cd0c:	69fb      	ldr	r3, [r7, #28]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d101      	bne.n	800cd16 <f_open+0x1a>
 800cd12:	2309      	movs	r3, #9
 800cd14:	e2ae      	b.n	800d274 <f_open+0x578>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cd16:	7dfb      	ldrb	r3, [r7, #23]
 800cd18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd1c:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 800cd1e:	7dfa      	ldrb	r2, [r7, #23]
 800cd20:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800cd24:	f107 0318 	add.w	r3, r7, #24
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f7ff fc0f 	bl	800c54c <find_volume>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	if (res == FR_OK) {
 800cd34:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	f040 8292 	bne.w	800d262 <f_open+0x566>
		dj.obj.fs = fs;
 800cd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd40:	62bb      	str	r3, [r7, #40]	; 0x28
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cd42:	69ba      	ldr	r2, [r7, #24]
 800cd44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cd48:	4611      	mov	r1, r2
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f7ff faae 	bl	800c2ac <follow_path>
 800cd50:	4603      	mov	r3, r0
 800cd52:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cd56:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d11a      	bne.n	800cd94 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cd5e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800cd62:	b25b      	sxtb	r3, r3
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	da03      	bge.n	800cd70 <f_open+0x74>
				res = FR_INVALID_NAME;
 800cd68:	2306      	movs	r3, #6
 800cd6a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800cd6e:	e011      	b.n	800cd94 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cd70:	7dfb      	ldrb	r3, [r7, #23]
 800cd72:	f023 0301 	bic.w	r3, r3, #1
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	bf14      	ite	ne
 800cd7a:	2301      	movne	r3, #1
 800cd7c:	2300      	moveq	r3, #0
 800cd7e:	b2db      	uxtb	r3, r3
 800cd80:	461a      	mov	r2, r3
 800cd82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cd86:	4611      	mov	r1, r2
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f7fc fe29 	bl	80099e0 <chk_lock>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cd94:	7dfb      	ldrb	r3, [r7, #23]
 800cd96:	f003 031c 	and.w	r3, r3, #28
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	f000 8115 	beq.w	800cfca <f_open+0x2ce>
			if (res != FR_OK) {					/* No file, create new */
 800cda0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d017      	beq.n	800cdd8 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cda8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800cdac:	2b04      	cmp	r3, #4
 800cdae:	d10e      	bne.n	800cdce <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cdb0:	f7fc fe70 	bl	8009a94 <enq_lock>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d006      	beq.n	800cdc8 <f_open+0xcc>
 800cdba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f7fe fe2a 	bl	800ba18 <dir_register>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	e000      	b.n	800cdca <f_open+0xce>
 800cdc8:	2312      	movs	r3, #18
 800cdca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cdce:	7dfb      	ldrb	r3, [r7, #23]
 800cdd0:	f043 0308 	orr.w	r3, r3, #8
 800cdd4:	75fb      	strb	r3, [r7, #23]
 800cdd6:	e011      	b.n	800cdfc <f_open+0x100>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cdd8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cddc:	f003 0311 	and.w	r3, r3, #17
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d003      	beq.n	800cdec <f_open+0xf0>
					res = FR_DENIED;
 800cde4:	2307      	movs	r3, #7
 800cde6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800cdea:	e007      	b.n	800cdfc <f_open+0x100>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cdec:	7dfb      	ldrb	r3, [r7, #23]
 800cdee:	f003 0304 	and.w	r3, r3, #4
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d002      	beq.n	800cdfc <f_open+0x100>
 800cdf6:	2308      	movs	r3, #8
 800cdf8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cdfc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	f040 80fe 	bne.w	800d002 <f_open+0x306>
 800ce06:	7dfb      	ldrb	r3, [r7, #23]
 800ce08:	f003 0308 	and.w	r3, r3, #8
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	f000 80f8 	beq.w	800d002 <f_open+0x306>
				dw = GET_FATTIME();
 800ce12:	f7f9 ffeb 	bl	8006dec <get_fattime>
 800ce16:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800ce1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	2b04      	cmp	r3, #4
 800ce20:	f040 8084 	bne.w	800cf2c <f_open+0x230>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800ce24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce26:	69fb      	ldr	r3, [r7, #28]
 800ce28:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800ce2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce2c:	691b      	ldr	r3, [r3, #16]
 800ce2e:	3334      	adds	r3, #52	; 0x34
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7fc fb94 	bl	800955e <ld_dword>
 800ce36:	4602      	mov	r2, r0
 800ce38:	69fb      	ldr	r3, [r7, #28]
 800ce3a:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800ce3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3e:	691b      	ldr	r3, [r3, #16]
 800ce40:	3338      	adds	r3, #56	; 0x38
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7fc fbad 	bl	80095a2 <ld_qword>
 800ce48:	4602      	mov	r2, r0
 800ce4a:	460b      	mov	r3, r1
 800ce4c:	69f9      	ldr	r1, [r7, #28]
 800ce4e:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800ce52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce54:	691b      	ldr	r3, [r3, #16]
 800ce56:	3321      	adds	r3, #33	; 0x21
 800ce58:	781b      	ldrb	r3, [r3, #0]
 800ce5a:	f003 0302 	and.w	r3, r3, #2
 800ce5e:	b2da      	uxtb	r2, r3
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	2200      	movs	r2, #0
 800ce68:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800ce6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6c:	691b      	ldr	r3, [r3, #16]
 800ce6e:	3308      	adds	r3, #8
 800ce70:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800ce74:	4618      	mov	r0, r3
 800ce76:	f7fc fc87 	bl	8009788 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800ce7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce7c:	691b      	ldr	r3, [r3, #16]
 800ce7e:	3314      	adds	r3, #20
 800ce80:	2200      	movs	r2, #0
 800ce82:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800ce84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce86:	691b      	ldr	r3, [r3, #16]
 800ce88:	330c      	adds	r3, #12
 800ce8a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7fc fc7a 	bl	8009788 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800ce94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce96:	691b      	ldr	r3, [r3, #16]
 800ce98:	3315      	adds	r3, #21
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800ce9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea0:	691b      	ldr	r3, [r3, #16]
 800cea2:	3304      	adds	r3, #4
 800cea4:	2220      	movs	r2, #32
 800cea6:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800cea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceaa:	691b      	ldr	r3, [r3, #16]
 800ceac:	3334      	adds	r3, #52	; 0x34
 800ceae:	2100      	movs	r1, #0
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f7fc fc69 	bl	8009788 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800ceb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb8:	691b      	ldr	r3, [r3, #16]
 800ceba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cebe:	f04f 0200 	mov.w	r2, #0
 800cec2:	f04f 0300 	mov.w	r3, #0
 800cec6:	4608      	mov	r0, r1
 800cec8:	f7fc fc89 	bl	80097de <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800cecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cece:	691b      	ldr	r3, [r3, #16]
 800ced0:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800ced4:	f04f 0200 	mov.w	r2, #0
 800ced8:	f04f 0300 	mov.w	r3, #0
 800cedc:	4608      	mov	r0, r1
 800cede:	f7fc fc7e 	bl	80097de <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800cee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee4:	691b      	ldr	r3, [r3, #16]
 800cee6:	3321      	adds	r3, #33	; 0x21
 800cee8:	2201      	movs	r2, #1
 800ceea:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800ceec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cef0:	4618      	mov	r0, r3
 800cef2:	f7fe fadf 	bl	800b4b4 <store_xdir>
 800cef6:	4603      	mov	r3, r0
 800cef8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800cefc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d17e      	bne.n	800d002 <f_open+0x306>
 800cf04:	69fb      	ldr	r3, [r7, #28]
 800cf06:	689b      	ldr	r3, [r3, #8]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d07a      	beq.n	800d002 <f_open+0x306>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800cf0c:	69f8      	ldr	r0, [r7, #28]
 800cf0e:	69fb      	ldr	r3, [r7, #28]
 800cf10:	689b      	ldr	r3, [r3, #8]
 800cf12:	2200      	movs	r2, #0
 800cf14:	4619      	mov	r1, r3
 800cf16:	f7fd fb17 	bl	800a548 <remove_chain>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800cf20:	69fb      	ldr	r3, [r7, #28]
 800cf22:	689a      	ldr	r2, [r3, #8]
 800cf24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf26:	3a01      	subs	r2, #1
 800cf28:	615a      	str	r2, [r3, #20]
 800cf2a:	e06a      	b.n	800d002 <f_open+0x306>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cf2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf2e:	330e      	adds	r3, #14
 800cf30:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800cf34:	4618      	mov	r0, r3
 800cf36:	f7fc fc27 	bl	8009788 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cf3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf3c:	3316      	adds	r3, #22
 800cf3e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7fc fc20 	bl	8009788 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cf48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf4a:	330b      	adds	r3, #11
 800cf4c:	2220      	movs	r2, #32
 800cf4e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cf50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf52:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cf54:	4611      	mov	r1, r2
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7fd fea6 	bl	800aca8 <ld_clust>
 800cf5c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf62:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800cf64:	2200      	movs	r2, #0
 800cf66:	4618      	mov	r0, r3
 800cf68:	f7fd febd 	bl	800ace6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cf6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf6e:	331c      	adds	r3, #28
 800cf70:	2100      	movs	r1, #0
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7fc fc08 	bl	8009788 <st_dword>
					fs->wflag = 1;
 800cf78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf7a:	2201      	movs	r2, #1
 800cf7c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cf7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d03d      	beq.n	800d002 <f_open+0x306>
						dw = fs->winsect;
 800cf86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
						res = remove_chain(&dj.obj, cl, 0);
 800cf8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cf92:	2200      	movs	r2, #0
 800cf94:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f7fd fad5 	bl	800a548 <remove_chain>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						if (res == FR_OK) {
 800cfa4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d12a      	bne.n	800d002 <f_open+0x306>
							res = move_window(fs, dw);
 800cfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfae:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7fc febe 	bl	8009d34 <move_window>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cfc4:	3a01      	subs	r2, #1
 800cfc6:	615a      	str	r2, [r3, #20]
 800cfc8:	e01b      	b.n	800d002 <f_open+0x306>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cfca:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d117      	bne.n	800d002 <f_open+0x306>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cfd2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cfd6:	f003 0310 	and.w	r3, r3, #16
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d003      	beq.n	800cfe6 <f_open+0x2ea>
					res = FR_NO_FILE;
 800cfde:	2304      	movs	r3, #4
 800cfe0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800cfe4:	e00d      	b.n	800d002 <f_open+0x306>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cfe6:	7dfb      	ldrb	r3, [r7, #23]
 800cfe8:	f003 0302 	and.w	r3, r3, #2
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d008      	beq.n	800d002 <f_open+0x306>
 800cff0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cff4:	f003 0301 	and.w	r3, r3, #1
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d002      	beq.n	800d002 <f_open+0x306>
						res = FR_DENIED;
 800cffc:	2307      	movs	r3, #7
 800cffe:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					}
				}
			}
		}
		if (res == FR_OK) {
 800d002:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d006:	2b00      	cmp	r3, #0
 800d008:	d128      	bne.n	800d05c <f_open+0x360>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d00a:	7dfb      	ldrb	r3, [r7, #23]
 800d00c:	f003 0308 	and.w	r3, r3, #8
 800d010:	2b00      	cmp	r3, #0
 800d012:	d003      	beq.n	800d01c <f_open+0x320>
				mode |= FA_MODIFIED;
 800d014:	7dfb      	ldrb	r3, [r7, #23]
 800d016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d01a:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d020:	69fb      	ldr	r3, [r7, #28]
 800d022:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800d024:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d026:	69fb      	ldr	r3, [r7, #28]
 800d028:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d02a:	7dfb      	ldrb	r3, [r7, #23]
 800d02c:	f023 0301 	bic.w	r3, r3, #1
 800d030:	2b00      	cmp	r3, #0
 800d032:	bf14      	ite	ne
 800d034:	2301      	movne	r3, #1
 800d036:	2300      	moveq	r3, #0
 800d038:	b2db      	uxtb	r3, r3
 800d03a:	461a      	mov	r2, r3
 800d03c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d040:	4611      	mov	r1, r2
 800d042:	4618      	mov	r0, r3
 800d044:	f7fc fd46 	bl	8009ad4 <inc_lock>
 800d048:	4602      	mov	r2, r0
 800d04a:	69fb      	ldr	r3, [r7, #28]
 800d04c:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d04e:	69fb      	ldr	r3, [r7, #28]
 800d050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d052:	2b00      	cmp	r3, #0
 800d054:	d102      	bne.n	800d05c <f_open+0x360>
 800d056:	2302      	movs	r3, #2
 800d058:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d05c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d060:	2b00      	cmp	r3, #0
 800d062:	f040 80fe 	bne.w	800d262 <f_open+0x566>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800d066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d068:	781b      	ldrb	r3, [r3, #0]
 800d06a:	2b04      	cmp	r3, #4
 800d06c:	d12d      	bne.n	800d0ca <f_open+0x3ce>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800d06e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d070:	69fb      	ldr	r3, [r7, #28]
 800d072:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800d074:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d078:	4613      	mov	r3, r2
 800d07a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d07e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d082:	431a      	orrs	r2, r3
 800d084:	69fb      	ldr	r3, [r7, #28]
 800d086:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800d088:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d08a:	69fb      	ldr	r3, [r7, #28]
 800d08c:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800d08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d090:	691b      	ldr	r3, [r3, #16]
 800d092:	3334      	adds	r3, #52	; 0x34
 800d094:	4618      	mov	r0, r3
 800d096:	f7fc fa62 	bl	800955e <ld_dword>
 800d09a:	4602      	mov	r2, r0
 800d09c:	69fb      	ldr	r3, [r7, #28]
 800d09e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a2:	691b      	ldr	r3, [r3, #16]
 800d0a4:	3338      	adds	r3, #56	; 0x38
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7fc fa7b 	bl	80095a2 <ld_qword>
 800d0ac:	4602      	mov	r2, r0
 800d0ae:	460b      	mov	r3, r1
 800d0b0:	69f9      	ldr	r1, [r7, #28]
 800d0b2:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b8:	691b      	ldr	r3, [r3, #16]
 800d0ba:	3321      	adds	r3, #33	; 0x21
 800d0bc:	781b      	ldrb	r3, [r3, #0]
 800d0be:	f003 0302 	and.w	r3, r3, #2
 800d0c2:	b2da      	uxtb	r2, r3
 800d0c4:	69fb      	ldr	r3, [r7, #28]
 800d0c6:	71da      	strb	r2, [r3, #7]
 800d0c8:	e016      	b.n	800d0f8 <f_open+0x3fc>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0cc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d0ce:	4611      	mov	r1, r2
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f7fd fde9 	bl	800aca8 <ld_clust>
 800d0d6:	4602      	mov	r2, r0
 800d0d8:	69fb      	ldr	r3, [r7, #28]
 800d0da:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d0dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0de:	331c      	adds	r3, #28
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f7fc fa3c 	bl	800955e <ld_dword>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	60bb      	str	r3, [r7, #8]
 800d0ec:	60fa      	str	r2, [r7, #12]
 800d0ee:	69fb      	ldr	r3, [r7, #28]
 800d0f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d0f4:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d0f8:	69fb      	ldr	r3, [r7, #28]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d0fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d100:	69fb      	ldr	r3, [r7, #28]
 800d102:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d106:	88da      	ldrh	r2, [r3, #6]
 800d108:	69fb      	ldr	r3, [r7, #28]
 800d10a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d10c:	69fb      	ldr	r3, [r7, #28]
 800d10e:	7dfa      	ldrb	r2, [r7, #23]
 800d110:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800d114:	69fb      	ldr	r3, [r7, #28]
 800d116:	2200      	movs	r2, #0
 800d118:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800d11c:	69fb      	ldr	r3, [r7, #28]
 800d11e:	2200      	movs	r2, #0
 800d120:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d122:	69f9      	ldr	r1, [r7, #28]
 800d124:	f04f 0200 	mov.w	r2, #0
 800d128:	f04f 0300 	mov.w	r3, #0
 800d12c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d130:	69fb      	ldr	r3, [r7, #28]
 800d132:	3354      	adds	r3, #84	; 0x54
 800d134:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d138:	2100      	movs	r1, #0
 800d13a:	4618      	mov	r0, r3
 800d13c:	f7fc fbf6 	bl	800992c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d140:	7dfb      	ldrb	r3, [r7, #23]
 800d142:	f003 0320 	and.w	r3, r3, #32
 800d146:	2b00      	cmp	r3, #0
 800d148:	f000 808b 	beq.w	800d262 <f_open+0x566>
 800d14c:	69fb      	ldr	r3, [r7, #28]
 800d14e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d152:	4313      	orrs	r3, r2
 800d154:	f000 8085 	beq.w	800d262 <f_open+0x566>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d158:	69fb      	ldr	r3, [r7, #28]
 800d15a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d15e:	69f9      	ldr	r1, [r7, #28]
 800d160:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d166:	895b      	ldrh	r3, [r3, #10]
 800d168:	025b      	lsls	r3, r3, #9
 800d16a:	67fb      	str	r3, [r7, #124]	; 0x7c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d16c:	69fb      	ldr	r3, [r7, #28]
 800d16e:	689b      	ldr	r3, [r3, #8]
 800d170:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d174:	69fb      	ldr	r3, [r7, #28]
 800d176:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d17a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 800d17e:	e026      	b.n	800d1ce <f_open+0x4d2>
					clst = get_fat(&fp->obj, clst);
 800d180:	69fb      	ldr	r3, [r7, #28]
 800d182:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d186:	4618      	mov	r0, r3
 800d188:	f7fc fe8e 	bl	8009ea8 <get_fat>
 800d18c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
					if (clst <= 1) res = FR_INT_ERR;
 800d190:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d194:	2b01      	cmp	r3, #1
 800d196:	d802      	bhi.n	800d19e <f_open+0x4a2>
 800d198:	2302      	movs	r3, #2
 800d19a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d19e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1a6:	d102      	bne.n	800d1ae <f_open+0x4b2>
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d1ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	469a      	mov	sl, r3
 800d1b4:	4693      	mov	fp, r2
 800d1b6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d1ba:	ebb2 010a 	subs.w	r1, r2, sl
 800d1be:	6039      	str	r1, [r7, #0]
 800d1c0:	eb63 030b 	sbc.w	r3, r3, fp
 800d1c4:	607b      	str	r3, [r7, #4]
 800d1c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1ca:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 800d1ce:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d109      	bne.n	800d1ea <f_open+0x4ee>
 800d1d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d1d8:	2200      	movs	r2, #0
 800d1da:	4698      	mov	r8, r3
 800d1dc:	4691      	mov	r9, r2
 800d1de:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d1e2:	4590      	cmp	r8, r2
 800d1e4:	eb79 0303 	sbcs.w	r3, r9, r3
 800d1e8:	d3ca      	bcc.n	800d180 <f_open+0x484>
				}
				fp->clust = clst;
 800d1ea:	69fb      	ldr	r3, [r7, #28]
 800d1ec:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d1f0:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d1f2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d133      	bne.n	800d262 <f_open+0x566>
 800d1fa:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d1fe:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800d202:	2500      	movs	r5, #0
 800d204:	ea54 0305 	orrs.w	r3, r4, r5
 800d208:	d02b      	beq.n	800d262 <f_open+0x566>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d210:	4618      	mov	r0, r3
 800d212:	f7fc fe2b 	bl	8009e6c <clust2sect>
 800d216:	67b8      	str	r0, [r7, #120]	; 0x78
 800d218:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d103      	bne.n	800d226 <f_open+0x52a>
						res = FR_INT_ERR;
 800d21e:	2302      	movs	r3, #2
 800d220:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800d224:	e01d      	b.n	800d262 <f_open+0x566>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d226:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800d22a:	f04f 0200 	mov.w	r2, #0
 800d22e:	f04f 0300 	mov.w	r3, #0
 800d232:	0a42      	lsrs	r2, r0, #9
 800d234:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800d238:	0a4b      	lsrs	r3, r1, #9
 800d23a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d23c:	441a      	add	r2, r3
 800d23e:	69fb      	ldr	r3, [r7, #28]
 800d240:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d244:	7858      	ldrb	r0, [r3, #1]
 800d246:	69fb      	ldr	r3, [r7, #28]
 800d248:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d24c:	69fb      	ldr	r3, [r7, #28]
 800d24e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d250:	2301      	movs	r3, #1
 800d252:	f7fc f90f 	bl	8009474 <disk_read>
 800d256:	4603      	mov	r3, r0
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d002      	beq.n	800d262 <f_open+0x566>
 800d25c:	2301      	movs	r3, #1
 800d25e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d262:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d266:	2b00      	cmp	r3, #0
 800d268:	d002      	beq.n	800d270 <f_open+0x574>
 800d26a:	69fb      	ldr	r3, [r7, #28]
 800d26c:	2200      	movs	r2, #0
 800d26e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d270:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800d274:	4618      	mov	r0, r3
 800d276:	3798      	adds	r7, #152	; 0x98
 800d278:	46bd      	mov	sp, r7
 800d27a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d27e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d27e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d282:	b08c      	sub	sp, #48	; 0x30
 800d284:	af00      	add	r7, sp, #0
 800d286:	60f8      	str	r0, [r7, #12]
 800d288:	60b9      	str	r1, [r7, #8]
 800d28a:	607a      	str	r2, [r7, #4]
 800d28c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	2200      	movs	r2, #0
 800d296:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	f107 0210 	add.w	r2, r7, #16
 800d29e:	4611      	mov	r1, r2
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f7ff fcaf 	bl	800cc04 <validate>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d2ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d108      	bne.n	800d2c6 <f_write+0x48>
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d2ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d2be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d002      	beq.n	800d2cc <f_write+0x4e>
 800d2c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d2ca:	e187      	b.n	800d5dc <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d2d2:	f003 0302 	and.w	r3, r3, #2
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d101      	bne.n	800d2de <f_write+0x60>
 800d2da:	2307      	movs	r3, #7
 800d2dc:	e17e      	b.n	800d5dc <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	2b04      	cmp	r3, #4
 800d2e4:	f000 816a 	beq.w	800d5bc <f_write+0x33e>
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	18d1      	adds	r1, r2, r3
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d2f8:	4613      	mov	r3, r2
 800d2fa:	4299      	cmp	r1, r3
 800d2fc:	f080 815e 	bcs.w	800d5bc <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d306:	4613      	mov	r3, r2
 800d308:	43db      	mvns	r3, r3
 800d30a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d30c:	e156      	b.n	800d5bc <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d314:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800d318:	2500      	movs	r5, #0
 800d31a:	ea54 0305 	orrs.w	r3, r4, r5
 800d31e:	f040 80fb 	bne.w	800d518 <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800d328:	f04f 0200 	mov.w	r2, #0
 800d32c:	f04f 0300 	mov.w	r3, #0
 800d330:	0a42      	lsrs	r2, r0, #9
 800d332:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800d336:	0a4b      	lsrs	r3, r1, #9
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	895b      	ldrh	r3, [r3, #10]
 800d33c:	3b01      	subs	r3, #1
 800d33e:	4013      	ands	r3, r2
 800d340:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d342:	69bb      	ldr	r3, [r7, #24]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d146      	bne.n	800d3d6 <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d34e:	4313      	orrs	r3, r2
 800d350:	d10c      	bne.n	800d36c <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	689b      	ldr	r3, [r3, #8]
 800d356:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d11a      	bne.n	800d394 <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	2100      	movs	r1, #0
 800d362:	4618      	mov	r0, r3
 800d364:	f7fd f9a4 	bl	800a6b0 <create_chain>
 800d368:	62b8      	str	r0, [r7, #40]	; 0x28
 800d36a:	e013      	b.n	800d394 <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d370:	2b00      	cmp	r3, #0
 800d372:	d007      	beq.n	800d384 <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d37a:	68f8      	ldr	r0, [r7, #12]
 800d37c:	f7fd fa99 	bl	800a8b2 <clmt_clust>
 800d380:	62b8      	str	r0, [r7, #40]	; 0x28
 800d382:	e007      	b.n	800d394 <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d384:	68fa      	ldr	r2, [r7, #12]
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d38a:	4619      	mov	r1, r3
 800d38c:	4610      	mov	r0, r2
 800d38e:	f7fd f98f 	bl	800a6b0 <create_chain>
 800d392:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d396:	2b00      	cmp	r3, #0
 800d398:	f000 8115 	beq.w	800d5c6 <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d39e:	2b01      	cmp	r3, #1
 800d3a0:	d105      	bne.n	800d3ae <f_write+0x130>
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	2202      	movs	r2, #2
 800d3a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d3aa:	2302      	movs	r3, #2
 800d3ac:	e116      	b.n	800d5dc <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3b4:	d105      	bne.n	800d3c2 <f_write+0x144>
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d3be:	2301      	movs	r3, #1
 800d3c0:	e10c      	b.n	800d5dc <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3c6:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	689b      	ldr	r3, [r3, #8]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d102      	bne.n	800d3d6 <f_write+0x158>
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3d4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d3dc:	b25b      	sxtb	r3, r3
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	da1b      	bge.n	800d41a <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	7858      	ldrb	r0, [r3, #1]
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	f7fc f85f 	bl	80094b4 <disk_write>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d005      	beq.n	800d408 <f_write+0x18a>
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	2201      	movs	r2, #1
 800d400:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d404:	2301      	movs	r3, #1
 800d406:	e0e9      	b.n	800d5dc <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d40e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d412:	b2da      	uxtb	r2, r3
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d41a:	693a      	ldr	r2, [r7, #16]
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d420:	4619      	mov	r1, r3
 800d422:	4610      	mov	r0, r2
 800d424:	f7fc fd22 	bl	8009e6c <clust2sect>
 800d428:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d105      	bne.n	800d43c <f_write+0x1be>
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	2202      	movs	r2, #2
 800d434:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d438:	2302      	movs	r3, #2
 800d43a:	e0cf      	b.n	800d5dc <f_write+0x35e>
			sect += csect;
 800d43c:	697a      	ldr	r2, [r7, #20]
 800d43e:	69bb      	ldr	r3, [r7, #24]
 800d440:	4413      	add	r3, r2
 800d442:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	0a5b      	lsrs	r3, r3, #9
 800d448:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d44a:	6a3b      	ldr	r3, [r7, #32]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d03f      	beq.n	800d4d0 <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d450:	69ba      	ldr	r2, [r7, #24]
 800d452:	6a3b      	ldr	r3, [r7, #32]
 800d454:	4413      	add	r3, r2
 800d456:	693a      	ldr	r2, [r7, #16]
 800d458:	8952      	ldrh	r2, [r2, #10]
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d905      	bls.n	800d46a <f_write+0x1ec>
					cc = fs->csize - csect;
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	895b      	ldrh	r3, [r3, #10]
 800d462:	461a      	mov	r2, r3
 800d464:	69bb      	ldr	r3, [r7, #24]
 800d466:	1ad3      	subs	r3, r2, r3
 800d468:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d46a:	693b      	ldr	r3, [r7, #16]
 800d46c:	7858      	ldrb	r0, [r3, #1]
 800d46e:	6a3b      	ldr	r3, [r7, #32]
 800d470:	697a      	ldr	r2, [r7, #20]
 800d472:	69f9      	ldr	r1, [r7, #28]
 800d474:	f7fc f81e 	bl	80094b4 <disk_write>
 800d478:	4603      	mov	r3, r0
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d005      	beq.n	800d48a <f_write+0x20c>
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	2201      	movs	r2, #1
 800d482:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d486:	2301      	movs	r3, #1
 800d488:	e0a8      	b.n	800d5dc <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	1ad3      	subs	r3, r2, r3
 800d492:	6a3a      	ldr	r2, [r7, #32]
 800d494:	429a      	cmp	r2, r3
 800d496:	d917      	bls.n	800d4c8 <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	1ad3      	subs	r3, r2, r3
 800d4a6:	025b      	lsls	r3, r3, #9
 800d4a8:	69fa      	ldr	r2, [r7, #28]
 800d4aa:	4413      	add	r3, r2
 800d4ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d4b0:	4619      	mov	r1, r3
 800d4b2:	f7fc fa1b 	bl	80098ec <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d4bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4c0:	b2da      	uxtb	r2, r3
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d4c8:	6a3b      	ldr	r3, [r7, #32]
 800d4ca:	025b      	lsls	r3, r3, #9
 800d4cc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d4ce:	e04a      	b.n	800d566 <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4d4:	697a      	ldr	r2, [r7, #20]
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	d01b      	beq.n	800d512 <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d4e6:	4290      	cmp	r0, r2
 800d4e8:	eb71 0303 	sbcs.w	r3, r1, r3
 800d4ec:	d211      	bcs.n	800d512 <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d4ee:	693b      	ldr	r3, [r7, #16]
 800d4f0:	7858      	ldrb	r0, [r3, #1]
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	697a      	ldr	r2, [r7, #20]
 800d4fc:	f7fb ffba 	bl	8009474 <disk_read>
 800d500:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d502:	2b00      	cmp	r3, #0
 800d504:	d005      	beq.n	800d512 <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	2201      	movs	r2, #1
 800d50a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d50e:	2301      	movs	r3, #1
 800d510:	e064      	b.n	800d5dc <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	697a      	ldr	r2, [r7, #20]
 800d516:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d51e:	4613      	mov	r3, r2
 800d520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d524:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d528:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d52a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	429a      	cmp	r2, r3
 800d530:	d901      	bls.n	800d536 <f_write+0x2b8>
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d542:	4613      	mov	r3, r2
 800d544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d548:	440b      	add	r3, r1
 800d54a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d54c:	69f9      	ldr	r1, [r7, #28]
 800d54e:	4618      	mov	r0, r3
 800d550:	f7fc f9cc 	bl	80098ec <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d55a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d55e:	b2da      	uxtb	r2, r3
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d566:	69fa      	ldr	r2, [r7, #28]
 800d568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d56a:	4413      	add	r3, r2
 800d56c:	61fb      	str	r3, [r7, #28]
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d574:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d576:	2000      	movs	r0, #0
 800d578:	4688      	mov	r8, r1
 800d57a:	4681      	mov	r9, r0
 800d57c:	eb12 0a08 	adds.w	sl, r2, r8
 800d580:	eb43 0b09 	adc.w	fp, r3, r9
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d590:	68f9      	ldr	r1, [r7, #12]
 800d592:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 800d596:	4282      	cmp	r2, r0
 800d598:	eb73 0c01 	sbcs.w	ip, r3, r1
 800d59c:	d201      	bcs.n	800d5a2 <f_write+0x324>
 800d59e:	4602      	mov	r2, r0
 800d5a0:	460b      	mov	r3, r1
 800d5a2:	68f9      	ldr	r1, [r7, #12]
 800d5a4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	681a      	ldr	r2, [r3, #0]
 800d5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ae:	441a      	add	r2, r3
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	601a      	str	r2, [r3, #0]
 800d5b4:	687a      	ldr	r2, [r7, #4]
 800d5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b8:	1ad3      	subs	r3, r2, r3
 800d5ba:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	f47f aea5 	bne.w	800d30e <f_write+0x90>
 800d5c4:	e000      	b.n	800d5c8 <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d5c6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d5ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5d2:	b2da      	uxtb	r2, r3
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 800d5da:	2300      	movs	r3, #0
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	3730      	adds	r7, #48	; 0x30
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d5e6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d5e6:	b580      	push	{r7, lr}
 800d5e8:	b09a      	sub	sp, #104	; 0x68
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d5f4:	4611      	mov	r1, r2
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f7ff fb04 	bl	800cc04 <validate>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d602:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d606:	2b00      	cmp	r3, #0
 800d608:	f040 8105 	bne.w	800d816 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d616:	2b00      	cmp	r3, #0
 800d618:	f000 80fd 	beq.w	800d816 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d622:	b25b      	sxtb	r3, r3
 800d624:	2b00      	cmp	r3, #0
 800d626:	da17      	bge.n	800d658 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d628:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d62a:	7858      	ldrb	r0, [r3, #1]
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d636:	2301      	movs	r3, #1
 800d638:	f7fb ff3c 	bl	80094b4 <disk_write>
 800d63c:	4603      	mov	r3, r0
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d001      	beq.n	800d646 <f_sync+0x60>
 800d642:	2301      	movs	r3, #1
 800d644:	e0e9      	b.n	800d81a <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d64c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d650:	b2da      	uxtb	r2, r3
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d658:	f7f9 fbc8 	bl	8006dec <get_fattime>
 800d65c:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800d65e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	2b04      	cmp	r3, #4
 800d664:	f040 808c 	bne.w	800d780 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	4618      	mov	r0, r3
 800d66c:	f7fc ff0c 	bl	800a488 <fill_first_frag>
 800d670:	4603      	mov	r3, r0
 800d672:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800d676:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d10a      	bne.n	800d694 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d684:	f04f 32ff 	mov.w	r2, #4294967295
 800d688:	4619      	mov	r1, r3
 800d68a:	f7fc ff2c 	bl	800a4e6 <fill_last_frag>
 800d68e:	4603      	mov	r3, r0
 800d690:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 800d694:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d698:	2b00      	cmp	r3, #0
 800d69a:	f040 80bc 	bne.w	800d816 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800d69e:	687a      	ldr	r2, [r7, #4]
 800d6a0:	f107 0308 	add.w	r3, r7, #8
 800d6a4:	4611      	mov	r1, r2
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f7fd fece 	bl	800b448 <load_obj_dir>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 800d6b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	f040 80ad 	bne.w	800d816 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800d6bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6be:	691b      	ldr	r3, [r3, #16]
 800d6c0:	3304      	adds	r3, #4
 800d6c2:	781a      	ldrb	r2, [r3, #0]
 800d6c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6c6:	691b      	ldr	r3, [r3, #16]
 800d6c8:	3304      	adds	r3, #4
 800d6ca:	f042 0220 	orr.w	r2, r2, #32
 800d6ce:	b2d2      	uxtb	r2, r2
 800d6d0:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	79da      	ldrb	r2, [r3, #7]
 800d6d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6d8:	691b      	ldr	r3, [r3, #16]
 800d6da:	3321      	adds	r3, #33	; 0x21
 800d6dc:	f042 0201 	orr.w	r2, r2, #1
 800d6e0:	b2d2      	uxtb	r2, r2
 800d6e2:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800d6e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6e6:	691b      	ldr	r3, [r3, #16]
 800d6e8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	689b      	ldr	r3, [r3, #8]
 800d6f0:	4619      	mov	r1, r3
 800d6f2:	4610      	mov	r0, r2
 800d6f4:	f7fc f848 	bl	8009788 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800d6f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6fa:	691b      	ldr	r3, [r3, #16]
 800d6fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d706:	4608      	mov	r0, r1
 800d708:	f7fc f869 	bl	80097de <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800d70c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d70e:	691b      	ldr	r3, [r3, #16]
 800d710:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d71a:	4608      	mov	r0, r1
 800d71c:	f7fc f85f 	bl	80097de <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800d720:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d722:	691b      	ldr	r3, [r3, #16]
 800d724:	330c      	adds	r3, #12
 800d726:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d728:	4618      	mov	r0, r3
 800d72a:	f7fc f82d 	bl	8009788 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800d72e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d730:	691b      	ldr	r3, [r3, #16]
 800d732:	3315      	adds	r3, #21
 800d734:	2200      	movs	r2, #0
 800d736:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800d738:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d73a:	691b      	ldr	r3, [r3, #16]
 800d73c:	3310      	adds	r3, #16
 800d73e:	2100      	movs	r1, #0
 800d740:	4618      	mov	r0, r3
 800d742:	f7fc f821 	bl	8009788 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800d746:	f107 0308 	add.w	r3, r7, #8
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7fd feb2 	bl	800b4b4 <store_xdir>
 800d750:	4603      	mov	r3, r0
 800d752:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800d756:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d15b      	bne.n	800d816 <f_sync+0x230>
							res = sync_fs(fs);
 800d75e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d760:	4618      	mov	r0, r3
 800d762:	f7fc fb15 	bl	8009d90 <sync_fs>
 800d766:	4603      	mov	r3, r0
 800d768:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d776:	b2da      	uxtb	r2, r3
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800d77e:	e04a      	b.n	800d816 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d780:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d786:	4619      	mov	r1, r3
 800d788:	4610      	mov	r0, r2
 800d78a:	f7fc fad3 	bl	8009d34 <move_window>
 800d78e:	4603      	mov	r3, r0
 800d790:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800d794:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d13c      	bne.n	800d816 <f_sync+0x230>
					dir = fp->dir_ptr;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7a0:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d7a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7a4:	330b      	adds	r3, #11
 800d7a6:	781a      	ldrb	r2, [r3, #0]
 800d7a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7aa:	330b      	adds	r3, #11
 800d7ac:	f042 0220 	orr.w	r2, r2, #32
 800d7b0:	b2d2      	uxtb	r2, r2
 800d7b2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6818      	ldr	r0, [r3, #0]
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	689b      	ldr	r3, [r3, #8]
 800d7bc:	461a      	mov	r2, r3
 800d7be:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d7c0:	f7fd fa91 	bl	800ace6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d7c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7c6:	f103 001c 	add.w	r0, r3, #28
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d7d0:	4613      	mov	r3, r2
 800d7d2:	4619      	mov	r1, r3
 800d7d4:	f7fb ffd8 	bl	8009788 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d7d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7da:	3316      	adds	r3, #22
 800d7dc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7fb ffd2 	bl	8009788 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d7e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7e6:	3312      	adds	r3, #18
 800d7e8:	2100      	movs	r1, #0
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7fb ffb2 	bl	8009754 <st_word>
					fs->wflag = 1;
 800d7f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d7f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f7fc fac9 	bl	8009d90 <sync_fs>
 800d7fe:	4603      	mov	r3, r0
 800d800:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d80a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d80e:	b2da      	uxtb	r2, r3
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d816:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3768      	adds	r7, #104	; 0x68
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}

0800d822 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d822:	b580      	push	{r7, lr}
 800d824:	b084      	sub	sp, #16
 800d826:	af00      	add	r7, sp, #0
 800d828:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f7ff fedb 	bl	800d5e6 <f_sync>
 800d830:	4603      	mov	r3, r0
 800d832:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d834:	7bfb      	ldrb	r3, [r7, #15]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d118      	bne.n	800d86c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f107 0208 	add.w	r2, r7, #8
 800d840:	4611      	mov	r1, r2
 800d842:	4618      	mov	r0, r3
 800d844:	f7ff f9de 	bl	800cc04 <validate>
 800d848:	4603      	mov	r3, r0
 800d84a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d84c:	7bfb      	ldrb	r3, [r7, #15]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d10c      	bne.n	800d86c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d856:	4618      	mov	r0, r3
 800d858:	f7fc f9ca 	bl	8009bf0 <dec_lock>
 800d85c:	4603      	mov	r3, r0
 800d85e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d860:	7bfb      	ldrb	r3, [r7, #15]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d102      	bne.n	800d86c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2200      	movs	r2, #0
 800d86a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d86c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d86e:	4618      	mov	r0, r3
 800d870:	3710      	adds	r7, #16
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}

0800d876 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d876:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d87a:	b0b6      	sub	sp, #216	; 0xd8
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800d882:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d886:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d88a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800d88e:	4619      	mov	r1, r3
 800d890:	4610      	mov	r0, r2
 800d892:	f7ff f9b7 	bl	800cc04 <validate>
 800d896:	4603      	mov	r3, r0
 800d898:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d89c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d105      	bne.n	800d8b0 <f_lseek+0x3a>
 800d8a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d8a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d8ac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 800d8b0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d111      	bne.n	800d8dc <f_lseek+0x66>
 800d8b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d8bc:	781b      	ldrb	r3, [r3, #0]
 800d8be:	2b04      	cmp	r3, #4
 800d8c0:	d10c      	bne.n	800d8dc <f_lseek+0x66>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800d8c2:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800d8c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d8ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8cc:	f04f 32ff 	mov.w	r2, #4294967295
 800d8d0:	4619      	mov	r1, r3
 800d8d2:	f7fc fe08 	bl	800a4e6 <fill_last_frag>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d8dc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d002      	beq.n	800d8ea <f_lseek+0x74>
 800d8e4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800d8e8:	e38b      	b.n	800e002 <f_lseek+0x78c>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d8ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d8ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	f000 8141 	beq.w	800db78 <f_lseek+0x302>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d8f6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d8fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8fe:	bf08      	it	eq
 800d900:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800d904:	f040 8087 	bne.w	800da16 <f_lseek+0x1a0>
			tbl = fp->cltbl;
 800d908:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d90c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d90e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d912:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d916:	1d1a      	adds	r2, r3, #4
 800d918:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d922:	2302      	movs	r3, #2
 800d924:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d928:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d92c:	689b      	ldr	r3, [r3, #8]
 800d92e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			if (cl) {
 800d932:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d936:	2b00      	cmp	r3, #0
 800d938:	d058      	beq.n	800d9ec <f_lseek+0x176>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d93a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d93e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d942:	2300      	movs	r3, #0
 800d944:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d948:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d94c:	3302      	adds	r3, #2
 800d94e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
					do {
						pcl = cl; ncl++;
 800d952:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d956:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d95a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d95e:	3301      	adds	r3, #1
 800d960:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
						cl = get_fat(&fp->obj, cl);
 800d964:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d968:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800d96c:	4618      	mov	r0, r3
 800d96e:	f7fc fa9b 	bl	8009ea8 <get_fat>
 800d972:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d976:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d97a:	2b01      	cmp	r3, #1
 800d97c:	d806      	bhi.n	800d98c <f_lseek+0x116>
 800d97e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d982:	2202      	movs	r2, #2
 800d984:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d988:	2302      	movs	r3, #2
 800d98a:	e33a      	b.n	800e002 <f_lseek+0x78c>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d98c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d990:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d994:	d106      	bne.n	800d9a4 <f_lseek+0x12e>
 800d996:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d99a:	2201      	movs	r2, #1
 800d99c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	e32e      	b.n	800e002 <f_lseek+0x78c>
					} while (cl == pcl + 1);
 800d9a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d9a8:	3301      	adds	r3, #1
 800d9aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d9ae:	429a      	cmp	r2, r3
 800d9b0:	d0cf      	beq.n	800d952 <f_lseek+0xdc>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d9b2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d9b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	d80f      	bhi.n	800d9de <f_lseek+0x168>
						*tbl++ = ncl; *tbl++ = tcl;
 800d9be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d9c2:	1d1a      	adds	r2, r3, #4
 800d9c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d9c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d9cc:	601a      	str	r2, [r3, #0]
 800d9ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d9d2:	1d1a      	adds	r2, r3, #4
 800d9d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d9d8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d9dc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d9de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d9e2:	69db      	ldr	r3, [r3, #28]
 800d9e4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d3a6      	bcc.n	800d93a <f_lseek+0xc4>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d9ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d9f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9f2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d9f6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d9f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d9fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800da00:	429a      	cmp	r2, r3
 800da02:	d804      	bhi.n	800da0e <f_lseek+0x198>
				*tbl = 0;		/* Terminate table */
 800da04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800da08:	2200      	movs	r2, #0
 800da0a:	601a      	str	r2, [r3, #0]
 800da0c:	e2f7      	b.n	800dffe <f_lseek+0x788>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800da0e:	2311      	movs	r3, #17
 800da10:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800da14:	e2f3      	b.n	800dffe <f_lseek+0x788>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800da16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800da1a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800da1e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800da22:	4290      	cmp	r0, r2
 800da24:	eb71 0303 	sbcs.w	r3, r1, r3
 800da28:	d205      	bcs.n	800da36 <f_lseek+0x1c0>
 800da2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800da2e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800da32:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			fp->fptr = ofs;				/* Set file pointer */
 800da36:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800da3a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800da3e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			if (ofs) {
 800da42:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800da46:	4313      	orrs	r3, r2
 800da48:	f000 82d9 	beq.w	800dffe <f_lseek+0x788>
				fp->clust = clmt_clust(fp, ofs - 1);
 800da4c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800da50:	f112 3aff 	adds.w	sl, r2, #4294967295
 800da54:	f143 3bff 	adc.w	fp, r3, #4294967295
 800da58:	4652      	mov	r2, sl
 800da5a:	465b      	mov	r3, fp
 800da5c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800da60:	f7fc ff27 	bl	800a8b2 <clmt_clust>
 800da64:	4602      	mov	r2, r0
 800da66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800da6a:	641a      	str	r2, [r3, #64]	; 0x40
				dsc = clust2sect(fs, fp->clust);
 800da6c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800da70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800da74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da76:	4619      	mov	r1, r3
 800da78:	4610      	mov	r0, r2
 800da7a:	f7fc f9f7 	bl	8009e6c <clust2sect>
 800da7e:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800da82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800da86:	2b00      	cmp	r3, #0
 800da88:	d106      	bne.n	800da98 <f_lseek+0x222>
 800da8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800da8e:	2202      	movs	r2, #2
 800da90:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800da94:	2302      	movs	r3, #2
 800da96:	e2b4      	b.n	800e002 <f_lseek+0x78c>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800da98:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800da9c:	1e54      	subs	r4, r2, #1
 800da9e:	f143 35ff 	adc.w	r5, r3, #4294967295
 800daa2:	f04f 0200 	mov.w	r2, #0
 800daa6:	f04f 0300 	mov.w	r3, #0
 800daaa:	0a62      	lsrs	r2, r4, #9
 800daac:	ea42 52c5 	orr.w	r2, r2, r5, lsl #23
 800dab0:	0a6b      	lsrs	r3, r5, #9
 800dab2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dab6:	895b      	ldrh	r3, [r3, #10]
 800dab8:	3b01      	subs	r3, #1
 800daba:	4013      	ands	r3, r2
 800dabc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800dac0:	4413      	add	r3, r2
 800dac2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800dac6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800daca:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dace:	f3c2 0808 	ubfx	r8, r2, #0, #9
 800dad2:	f04f 0900 	mov.w	r9, #0
 800dad6:	ea58 0309 	orrs.w	r3, r8, r9
 800dada:	f000 8290 	beq.w	800dffe <f_lseek+0x788>
 800dade:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dae4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800dae8:	429a      	cmp	r2, r3
 800daea:	f000 8288 	beq.w	800dffe <f_lseek+0x788>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800daee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800daf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800daf6:	b25b      	sxtb	r3, r3
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	da21      	bge.n	800db40 <f_lseek+0x2ca>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dafc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800db00:	7858      	ldrb	r0, [r3, #1]
 800db02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800db06:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800db0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800db0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db10:	2301      	movs	r3, #1
 800db12:	f7fb fccf 	bl	80094b4 <disk_write>
 800db16:	4603      	mov	r3, r0
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d006      	beq.n	800db2a <f_lseek+0x2b4>
 800db1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800db20:	2201      	movs	r2, #1
 800db22:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800db26:	2301      	movs	r3, #1
 800db28:	e26b      	b.n	800e002 <f_lseek+0x78c>
						fp->flag &= (BYTE)~FA_DIRTY;
 800db2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800db2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db36:	b2da      	uxtb	r2, r3
 800db38:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800db3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800db40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800db44:	7858      	ldrb	r0, [r3, #1]
 800db46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800db4a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800db4e:	2301      	movs	r3, #1
 800db50:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800db54:	f7fb fc8e 	bl	8009474 <disk_read>
 800db58:	4603      	mov	r3, r0
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d006      	beq.n	800db6c <f_lseek+0x2f6>
 800db5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800db62:	2201      	movs	r2, #1
 800db64:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800db68:	2301      	movs	r3, #1
 800db6a:	e24a      	b.n	800e002 <f_lseek+0x78c>
#endif
					fp->sect = dsc;
 800db6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800db70:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800db74:	645a      	str	r2, [r3, #68]	; 0x44
 800db76:	e242      	b.n	800dffe <f_lseek+0x788>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 800db78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	2b04      	cmp	r3, #4
 800db80:	d009      	beq.n	800db96 <f_lseek+0x320>
 800db82:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800db86:	2b01      	cmp	r3, #1
 800db88:	d305      	bcc.n	800db96 <f_lseek+0x320>
 800db8a:	f04f 32ff 	mov.w	r2, #4294967295
 800db8e:	f04f 0300 	mov.w	r3, #0
 800db92:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800db96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800db9a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800db9e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800dba2:	4290      	cmp	r0, r2
 800dba4:	eb71 0303 	sbcs.w	r3, r1, r3
 800dba8:	d20d      	bcs.n	800dbc6 <f_lseek+0x350>
 800dbaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dbae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dbb2:	f003 0302 	and.w	r3, r3, #2
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d105      	bne.n	800dbc6 <f_lseek+0x350>
			ofs = fp->obj.objsize;
 800dbba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dbbe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800dbc2:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		}
		ifptr = fp->fptr;
 800dbc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dbca:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dbce:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
		fp->fptr = nsect = 0;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800dbd8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800dbdc:	f04f 0200 	mov.w	r2, #0
 800dbe0:	f04f 0300 	mov.w	r3, #0
 800dbe4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		if (ofs) {
 800dbe8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800dbec:	4313      	orrs	r3, r2
 800dbee:	f000 818d 	beq.w	800df0c <f_lseek+0x696>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800dbf2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dbf6:	895b      	ldrh	r3, [r3, #10]
 800dbf8:	025b      	lsls	r3, r3, #9
 800dbfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			if (ifptr > 0 &&
 800dbfe:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800dc02:	4313      	orrs	r3, r2
 800dc04:	d06a      	beq.n	800dcdc <f_lseek+0x466>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800dc06:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800dc0a:	1e51      	subs	r1, r2, #1
 800dc0c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800dc10:	f143 33ff 	adc.w	r3, r3, #4294967295
 800dc14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dc18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	67bb      	str	r3, [r7, #120]	; 0x78
 800dc20:	67fa      	str	r2, [r7, #124]	; 0x7c
 800dc22:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800dc26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800dc2a:	f7f2 fb09 	bl	8000240 <__aeabi_uldivmod>
 800dc2e:	4602      	mov	r2, r0
 800dc30:	460b      	mov	r3, r1
 800dc32:	4614      	mov	r4, r2
 800dc34:	461d      	mov	r5, r3
 800dc36:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800dc3a:	1e51      	subs	r1, r2, #1
 800dc3c:	6739      	str	r1, [r7, #112]	; 0x70
 800dc3e:	f143 33ff 	adc.w	r3, r3, #4294967295
 800dc42:	677b      	str	r3, [r7, #116]	; 0x74
 800dc44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dc48:	2200      	movs	r2, #0
 800dc4a:	66bb      	str	r3, [r7, #104]	; 0x68
 800dc4c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dc4e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800dc52:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800dc56:	f7f2 faf3 	bl	8000240 <__aeabi_uldivmod>
 800dc5a:	4602      	mov	r2, r0
 800dc5c:	460b      	mov	r3, r1
			if (ifptr > 0 &&
 800dc5e:	4294      	cmp	r4, r2
 800dc60:	eb75 0303 	sbcs.w	r3, r5, r3
 800dc64:	d33a      	bcc.n	800dcdc <f_lseek+0x466>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800dc66:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800dc6a:	1e51      	subs	r1, r2, #1
 800dc6c:	6639      	str	r1, [r7, #96]	; 0x60
 800dc6e:	f143 33ff 	adc.w	r3, r3, #4294967295
 800dc72:	667b      	str	r3, [r7, #100]	; 0x64
 800dc74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dc78:	3b01      	subs	r3, #1
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	65bb      	str	r3, [r7, #88]	; 0x58
 800dc7e:	65fa      	str	r2, [r7, #92]	; 0x5c
 800dc80:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800dc84:	460b      	mov	r3, r1
 800dc86:	43db      	mvns	r3, r3
 800dc88:	653b      	str	r3, [r7, #80]	; 0x50
 800dc8a:	4613      	mov	r3, r2
 800dc8c:	43db      	mvns	r3, r3
 800dc8e:	657b      	str	r3, [r7, #84]	; 0x54
 800dc90:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800dc94:	4618      	mov	r0, r3
 800dc96:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800dc9a:	460d      	mov	r5, r1
 800dc9c:	4028      	ands	r0, r5
 800dc9e:	64b8      	str	r0, [r7, #72]	; 0x48
 800dca0:	4623      	mov	r3, r4
 800dca2:	4013      	ands	r3, r2
 800dca4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dca6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dcaa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800dcae:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				ofs -= fp->fptr;
 800dcb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dcb6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800dcba:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800dcbe:	1a14      	subs	r4, r2, r0
 800dcc0:	60bc      	str	r4, [r7, #8]
 800dcc2:	eb63 0301 	sbc.w	r3, r3, r1
 800dcc6:	60fb      	str	r3, [r7, #12]
 800dcc8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800dccc:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
				clst = fp->clust;
 800dcd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dcd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcd6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dcda:	e031      	b.n	800dd40 <f_lseek+0x4ca>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800dcdc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dce0:	689b      	ldr	r3, [r3, #8]
 800dce2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800dce6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d123      	bne.n	800dd36 <f_lseek+0x4c0>
					clst = create_chain(&fp->obj, 0);
 800dcee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dcf2:	2100      	movs	r1, #0
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f7fc fcdb 	bl	800a6b0 <create_chain>
 800dcfa:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dcfe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800dd02:	2b01      	cmp	r3, #1
 800dd04:	d106      	bne.n	800dd14 <f_lseek+0x49e>
 800dd06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dd0a:	2202      	movs	r2, #2
 800dd0c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800dd10:	2302      	movs	r3, #2
 800dd12:	e176      	b.n	800e002 <f_lseek+0x78c>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dd14:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800dd18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd1c:	d106      	bne.n	800dd2c <f_lseek+0x4b6>
 800dd1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dd22:	2201      	movs	r2, #1
 800dd24:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800dd28:	2301      	movs	r3, #1
 800dd2a:	e16a      	b.n	800e002 <f_lseek+0x78c>
					fp->obj.sclust = clst;
 800dd2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dd30:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800dd34:	6093      	str	r3, [r2, #8]
				}
#endif
				fp->clust = clst;
 800dd36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dd3a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800dd3e:	6413      	str	r3, [r2, #64]	; 0x40
			}
			if (clst != 0) {
 800dd40:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	f000 80e1 	beq.w	800df0c <f_lseek+0x696>
				while (ofs > bcs) {						/* Cluster following loop */
 800dd4a:	e08f      	b.n	800de6c <f_lseek+0x5f6>
					ofs -= bcs; fp->fptr += bcs;
 800dd4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dd50:	2200      	movs	r2, #0
 800dd52:	643b      	str	r3, [r7, #64]	; 0x40
 800dd54:	647a      	str	r2, [r7, #68]	; 0x44
 800dd56:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800dd5a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800dd5e:	4604      	mov	r4, r0
 800dd60:	1b14      	subs	r4, r2, r4
 800dd62:	603c      	str	r4, [r7, #0]
 800dd64:	eb63 0301 	sbc.w	r3, r3, r1
 800dd68:	607b      	str	r3, [r7, #4]
 800dd6a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800dd6e:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
 800dd72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dd76:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dd7a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800dd7e:	2000      	movs	r0, #0
 800dd80:	63b9      	str	r1, [r7, #56]	; 0x38
 800dd82:	63f8      	str	r0, [r7, #60]	; 0x3c
 800dd84:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800dd88:	4621      	mov	r1, r4
 800dd8a:	1851      	adds	r1, r2, r1
 800dd8c:	6339      	str	r1, [r7, #48]	; 0x30
 800dd8e:	4629      	mov	r1, r5
 800dd90:	414b      	adcs	r3, r1
 800dd92:	637b      	str	r3, [r7, #52]	; 0x34
 800dd94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dd98:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800dd9c:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800dda0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dda4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dda8:	f003 0302 	and.w	r3, r3, #2
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d031      	beq.n	800de14 <f_lseek+0x59e>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 800ddb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ddb4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800ddb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ddbc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ddc0:	4282      	cmp	r2, r0
 800ddc2:	418b      	sbcs	r3, r1
 800ddc4:	d212      	bcs.n	800ddec <f_lseek+0x576>
							fp->obj.objsize = fp->fptr;
 800ddc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ddca:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800ddce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ddd2:	e9c3 0104 	strd	r0, r1, [r3, #16]
							fp->flag |= FA_MODIFIED;
 800ddd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ddda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ddde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dde2:	b2db      	uxtb	r3, r3
 800dde4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dde8:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800ddec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ddf0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7fc fc5b 	bl	800a6b0 <create_chain>
 800ddfa:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ddfe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800de02:	2b00      	cmp	r3, #0
 800de04:	d10f      	bne.n	800de26 <f_lseek+0x5b0>
							ofs = 0; break;
 800de06:	f04f 0200 	mov.w	r2, #0
 800de0a:	f04f 0300 	mov.w	r3, #0
 800de0e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 800de12:	e03a      	b.n	800de8a <f_lseek+0x614>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800de14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800de18:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800de1c:	4618      	mov	r0, r3
 800de1e:	f7fc f843 	bl	8009ea8 <get_fat>
 800de22:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800de26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800de2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de2e:	d106      	bne.n	800de3e <f_lseek+0x5c8>
 800de30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800de34:	2201      	movs	r2, #1
 800de36:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800de3a:	2301      	movs	r3, #1
 800de3c:	e0e1      	b.n	800e002 <f_lseek+0x78c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800de3e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800de42:	2b01      	cmp	r3, #1
 800de44:	d906      	bls.n	800de54 <f_lseek+0x5de>
 800de46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800de4a:	69da      	ldr	r2, [r3, #28]
 800de4c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800de50:	4293      	cmp	r3, r2
 800de52:	d306      	bcc.n	800de62 <f_lseek+0x5ec>
 800de54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800de58:	2202      	movs	r2, #2
 800de5a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800de5e:	2302      	movs	r3, #2
 800de60:	e0cf      	b.n	800e002 <f_lseek+0x78c>
					fp->clust = clst;
 800de62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800de66:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800de6a:	6413      	str	r3, [r2, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 800de6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800de70:	2200      	movs	r2, #0
 800de72:	62bb      	str	r3, [r7, #40]	; 0x28
 800de74:	62fa      	str	r2, [r7, #44]	; 0x2c
 800de76:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800de7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800de7e:	4604      	mov	r4, r0
 800de80:	4294      	cmp	r4, r2
 800de82:	eb71 0303 	sbcs.w	r3, r1, r3
 800de86:	f4ff af61 	bcc.w	800dd4c <f_lseek+0x4d6>
				}
				fp->fptr += ofs;
 800de8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800de8e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800de92:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800de96:	1884      	adds	r4, r0, r2
 800de98:	623c      	str	r4, [r7, #32]
 800de9a:	eb41 0303 	adc.w	r3, r1, r3
 800de9e:	627b      	str	r3, [r7, #36]	; 0x24
 800dea0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dea4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800dea8:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				if (ofs % SS(fs)) {
 800deac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800deb0:	f3c2 0308 	ubfx	r3, r2, #0, #9
 800deb4:	61bb      	str	r3, [r7, #24]
 800deb6:	2300      	movs	r3, #0
 800deb8:	61fb      	str	r3, [r7, #28]
 800deba:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800debe:	461a      	mov	r2, r3
 800dec0:	4623      	mov	r3, r4
 800dec2:	4313      	orrs	r3, r2
 800dec4:	d022      	beq.n	800df0c <f_lseek+0x696>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800dec6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800deca:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800dece:	4618      	mov	r0, r3
 800ded0:	f7fb ffcc 	bl	8009e6c <clust2sect>
 800ded4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ded8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d106      	bne.n	800deee <f_lseek+0x678>
 800dee0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dee4:	2202      	movs	r2, #2
 800dee6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800deea:	2302      	movs	r3, #2
 800deec:	e089      	b.n	800e002 <f_lseek+0x78c>
					nsect += (DWORD)(ofs / SS(fs));
 800deee:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800def2:	f04f 0200 	mov.w	r2, #0
 800def6:	f04f 0300 	mov.w	r3, #0
 800defa:	0a42      	lsrs	r2, r0, #9
 800defc:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800df00:	0a4b      	lsrs	r3, r1, #9
 800df02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800df06:	4413      	add	r3, r2
 800df08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800df0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800df10:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800df14:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800df18:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800df1c:	4290      	cmp	r0, r2
 800df1e:	eb71 0303 	sbcs.w	r3, r1, r3
 800df22:	d212      	bcs.n	800df4a <f_lseek+0x6d4>
			fp->obj.objsize = fp->fptr;
 800df24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800df28:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800df2c:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800df30:	e9c1 2304 	strd	r2, r3, [r1, #16]
			fp->flag |= FA_MODIFIED;
 800df34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800df38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800df3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df40:	b2da      	uxtb	r2, r3
 800df42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800df46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800df4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800df4e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800df52:	f3c2 0308 	ubfx	r3, r2, #0, #9
 800df56:	613b      	str	r3, [r7, #16]
 800df58:	2300      	movs	r3, #0
 800df5a:	617b      	str	r3, [r7, #20]
 800df5c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800df60:	461a      	mov	r2, r3
 800df62:	4623      	mov	r3, r4
 800df64:	4313      	orrs	r3, r2
 800df66:	d04a      	beq.n	800dffe <f_lseek+0x788>
 800df68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800df6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df6e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800df72:	429a      	cmp	r2, r3
 800df74:	d043      	beq.n	800dffe <f_lseek+0x788>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800df76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800df7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800df7e:	b25b      	sxtb	r3, r3
 800df80:	2b00      	cmp	r3, #0
 800df82:	da21      	bge.n	800dfc8 <f_lseek+0x752>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800df84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800df88:	7858      	ldrb	r0, [r3, #1]
 800df8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800df8e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800df92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800df96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df98:	2301      	movs	r3, #1
 800df9a:	f7fb fa8b 	bl	80094b4 <disk_write>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d006      	beq.n	800dfb2 <f_lseek+0x73c>
 800dfa4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dfa8:	2201      	movs	r2, #1
 800dfaa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800dfae:	2301      	movs	r3, #1
 800dfb0:	e027      	b.n	800e002 <f_lseek+0x78c>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dfb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dfb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dfba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfbe:	b2da      	uxtb	r2, r3
 800dfc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dfc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800dfc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dfcc:	7858      	ldrb	r0, [r3, #1]
 800dfce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dfd2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800dfdc:	f7fb fa4a 	bl	8009474 <disk_read>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d006      	beq.n	800dff4 <f_lseek+0x77e>
 800dfe6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dfea:	2201      	movs	r2, #1
 800dfec:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800dff0:	2301      	movs	r3, #1
 800dff2:	e006      	b.n	800e002 <f_lseek+0x78c>
#endif
			fp->sect = nsect;
 800dff4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dff8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800dffc:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}

	LEAVE_FF(fs, res);
 800dffe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800e002:	4618      	mov	r0, r3
 800e004:	37d8      	adds	r7, #216	; 0xd8
 800e006:	46bd      	mov	sp, r7
 800e008:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e00c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b086      	sub	sp, #24
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
 800e014:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d101      	bne.n	800e020 <f_opendir+0x14>
 800e01c:	2309      	movs	r3, #9
 800e01e:	e09a      	b.n	800e156 <f_opendir+0x14a>

	/* Get logical drive */
	obj = &dp->obj;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800e024:	f107 010c 	add.w	r1, r7, #12
 800e028:	463b      	mov	r3, r7
 800e02a:	2200      	movs	r2, #0
 800e02c:	4618      	mov	r0, r3
 800e02e:	f7fe fa8d 	bl	800c54c <find_volume>
 800e032:	4603      	mov	r3, r0
 800e034:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e036:	7dfb      	ldrb	r3, [r7, #23]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	f040 8085 	bne.w	800e148 <f_opendir+0x13c>
		obj->fs = fs;
 800e03e:	68fa      	ldr	r2, [r7, #12]
 800e040:	693b      	ldr	r3, [r7, #16]
 800e042:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	4619      	mov	r1, r3
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f7fe f92f 	bl	800c2ac <follow_path>
 800e04e:	4603      	mov	r3, r0
 800e050:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800e052:	7dfb      	ldrb	r3, [r7, #23]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d172      	bne.n	800e13e <f_opendir+0x132>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e05e:	b25b      	sxtb	r3, r3
 800e060:	2b00      	cmp	r3, #0
 800e062:	db47      	blt.n	800e0f4 <f_opendir+0xe8>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	799b      	ldrb	r3, [r3, #6]
 800e068:	f003 0310 	and.w	r3, r3, #16
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d03f      	beq.n	800e0f0 <f_opendir+0xe4>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	2b04      	cmp	r3, #4
 800e076:	d130      	bne.n	800e0da <f_opendir+0xce>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	689a      	ldr	r2, [r3, #8]
 800e07c:	693b      	ldr	r3, [r7, #16]
 800e07e:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e086:	4613      	mov	r3, r2
 800e088:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e08c:	693a      	ldr	r2, [r7, #16]
 800e08e:	79d2      	ldrb	r2, [r2, #7]
 800e090:	431a      	orrs	r2, r3
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	625a      	str	r2, [r3, #36]	; 0x24
						obj->c_ofs = dp->blk_ofs;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e09a:	693b      	ldr	r3, [r7, #16]
 800e09c:	629a      	str	r2, [r3, #40]	; 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	691b      	ldr	r3, [r3, #16]
 800e0a2:	3334      	adds	r3, #52	; 0x34
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f7fb fa5a 	bl	800955e <ld_dword>
 800e0aa:	4602      	mov	r2, r0
 800e0ac:	693b      	ldr	r3, [r7, #16]
 800e0ae:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	691b      	ldr	r3, [r3, #16]
 800e0b4:	3338      	adds	r3, #56	; 0x38
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7fb fa73 	bl	80095a2 <ld_qword>
 800e0bc:	4602      	mov	r2, r0
 800e0be:	460b      	mov	r3, r1
 800e0c0:	6939      	ldr	r1, [r7, #16]
 800e0c2:	e9c1 2304 	strd	r2, r3, [r1, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	691b      	ldr	r3, [r3, #16]
 800e0ca:	3321      	adds	r3, #33	; 0x21
 800e0cc:	781b      	ldrb	r3, [r3, #0]
 800e0ce:	f003 0302 	and.w	r3, r3, #2
 800e0d2:	b2da      	uxtb	r2, r3
 800e0d4:	693b      	ldr	r3, [r7, #16]
 800e0d6:	71da      	strb	r2, [r3, #7]
 800e0d8:	e00c      	b.n	800e0f4 <f_opendir+0xe8>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800e0da:	68fa      	ldr	r2, [r7, #12]
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	4610      	mov	r0, r2
 800e0e4:	f7fc fde0 	bl	800aca8 <ld_clust>
 800e0e8:	4602      	mov	r2, r0
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	609a      	str	r2, [r3, #8]
 800e0ee:	e001      	b.n	800e0f4 <f_opendir+0xe8>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800e0f0:	2305      	movs	r3, #5
 800e0f2:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800e0f4:	7dfb      	ldrb	r3, [r7, #23]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d121      	bne.n	800e13e <f_opendir+0x132>
				obj->id = fs->id;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	88da      	ldrh	r2, [r3, #6]
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800e102:	2100      	movs	r1, #0
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f7fc fc18 	bl	800a93a <dir_sdi>
 800e10a:	4603      	mov	r3, r0
 800e10c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800e10e:	7dfb      	ldrb	r3, [r7, #23]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d114      	bne.n	800e13e <f_opendir+0x132>
					if (obj->sclust) {
 800e114:	693b      	ldr	r3, [r7, #16]
 800e116:	689b      	ldr	r3, [r3, #8]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d00d      	beq.n	800e138 <f_opendir+0x12c>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800e11c:	2100      	movs	r1, #0
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f7fb fcd8 	bl	8009ad4 <inc_lock>
 800e124:	4602      	mov	r2, r0
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	62da      	str	r2, [r3, #44]	; 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800e12a:	693b      	ldr	r3, [r7, #16]
 800e12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d105      	bne.n	800e13e <f_opendir+0x132>
 800e132:	2312      	movs	r3, #18
 800e134:	75fb      	strb	r3, [r7, #23]
 800e136:	e002      	b.n	800e13e <f_opendir+0x132>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	2200      	movs	r2, #0
 800e13c:	62da      	str	r2, [r3, #44]	; 0x2c
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800e13e:	7dfb      	ldrb	r3, [r7, #23]
 800e140:	2b04      	cmp	r3, #4
 800e142:	d101      	bne.n	800e148 <f_opendir+0x13c>
 800e144:	2305      	movs	r3, #5
 800e146:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800e148:	7dfb      	ldrb	r3, [r7, #23]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d002      	beq.n	800e154 <f_opendir+0x148>
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	2200      	movs	r2, #0
 800e152:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e154:	7dfb      	ldrb	r3, [r7, #23]
}
 800e156:	4618      	mov	r0, r3
 800e158:	3718      	adds	r7, #24
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}

0800e15e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800e15e:	b580      	push	{r7, lr}
 800e160:	b084      	sub	sp, #16
 800e162:	af00      	add	r7, sp, #0
 800e164:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	f107 0208 	add.w	r2, r7, #8
 800e16c:	4611      	mov	r1, r2
 800e16e:	4618      	mov	r0, r3
 800e170:	f7fe fd48 	bl	800cc04 <validate>
 800e174:	4603      	mov	r3, r0
 800e176:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e178:	7bfb      	ldrb	r3, [r7, #15]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d110      	bne.n	800e1a0 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e182:	2b00      	cmp	r3, #0
 800e184:	d006      	beq.n	800e194 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e18a:	4618      	mov	r0, r3
 800e18c:	f7fb fd30 	bl	8009bf0 <dec_lock>
 800e190:	4603      	mov	r3, r0
 800e192:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800e194:	7bfb      	ldrb	r3, [r7, #15]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d102      	bne.n	800e1a0 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2200      	movs	r2, #0
 800e19e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800e1a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3710      	adds	r7, #16
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}

0800e1aa <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e1aa:	b580      	push	{r7, lr}
 800e1ac:	b084      	sub	sp, #16
 800e1ae:	af00      	add	r7, sp, #0
 800e1b0:	6078      	str	r0, [r7, #4]
 800e1b2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f107 0208 	add.w	r2, r7, #8
 800e1ba:	4611      	mov	r1, r2
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f7fe fd21 	bl	800cc04 <validate>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e1c6:	7bfb      	ldrb	r3, [r7, #15]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d126      	bne.n	800e21a <f_readdir+0x70>
		if (!fno) {
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d106      	bne.n	800e1e0 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800e1d2:	2100      	movs	r1, #0
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f7fc fbb0 	bl	800a93a <dir_sdi>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	73fb      	strb	r3, [r7, #15]
 800e1de:	e01c      	b.n	800e21a <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800e1e0:	2100      	movs	r1, #0
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f7fd fa28 	bl	800b638 <dir_read>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800e1ec:	7bfb      	ldrb	r3, [r7, #15]
 800e1ee:	2b04      	cmp	r3, #4
 800e1f0:	d101      	bne.n	800e1f6 <f_readdir+0x4c>
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800e1f6:	7bfb      	ldrb	r3, [r7, #15]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d10e      	bne.n	800e21a <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800e1fc:	6839      	ldr	r1, [r7, #0]
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f7fd fdb0 	bl	800bd64 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800e204:	2100      	movs	r1, #0
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f7fc fc1d 	bl	800aa46 <dir_next>
 800e20c:	4603      	mov	r3, r0
 800e20e:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800e210:	7bfb      	ldrb	r3, [r7, #15]
 800e212:	2b04      	cmp	r3, #4
 800e214:	d101      	bne.n	800e21a <f_readdir+0x70>
 800e216:	2300      	movs	r3, #0
 800e218:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800e21a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3710      	adds	r7, #16
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}

0800e224 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b09a      	sub	sp, #104	; 0x68
 800e228:	af00      	add	r7, sp, #0
 800e22a:	60f8      	str	r0, [r7, #12]
 800e22c:	60b9      	str	r1, [r7, #8]
 800e22e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800e230:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800e234:	f107 030c 	add.w	r3, r7, #12
 800e238:	2200      	movs	r2, #0
 800e23a:	4618      	mov	r0, r3
 800e23c:	f7fe f986 	bl	800c54c <find_volume>
 800e240:	4603      	mov	r3, r0
 800e242:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e246:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	f040 80e6 	bne.w	800e41c <f_getfree+0x1f8>
		*fatfs = fs;				/* Return ptr to the fs object */
 800e250:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800e256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e258:	699a      	ldr	r2, [r3, #24]
 800e25a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e25c:	69db      	ldr	r3, [r3, #28]
 800e25e:	3b02      	subs	r3, #2
 800e260:	429a      	cmp	r2, r3
 800e262:	d804      	bhi.n	800e26e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800e264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e266:	699a      	ldr	r2, [r3, #24]
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	601a      	str	r2, [r3, #0]
 800e26c:	e0d6      	b.n	800e41c <f_getfree+0x1f8>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800e26e:	2300      	movs	r3, #0
 800e270:	663b      	str	r3, [r7, #96]	; 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800e272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e274:	781b      	ldrb	r3, [r3, #0]
 800e276:	2b01      	cmp	r3, #1
 800e278:	d128      	bne.n	800e2cc <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800e27a:	2302      	movs	r3, #2
 800e27c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e27e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e280:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 800e282:	f107 0310 	add.w	r3, r7, #16
 800e286:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e288:	4618      	mov	r0, r3
 800e28a:	f7fb fe0d 	bl	8009ea8 <get_fat>
 800e28e:	6478      	str	r0, [r7, #68]	; 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800e290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e292:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e296:	d103      	bne.n	800e2a0 <f_getfree+0x7c>
 800e298:	2301      	movs	r3, #1
 800e29a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e29e:	e0b0      	b.n	800e402 <f_getfree+0x1de>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800e2a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2a2:	2b01      	cmp	r3, #1
 800e2a4:	d103      	bne.n	800e2ae <f_getfree+0x8a>
 800e2a6:	2302      	movs	r3, #2
 800e2a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e2ac:	e0a9      	b.n	800e402 <f_getfree+0x1de>
					if (stat == 0) nfree++;
 800e2ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d102      	bne.n	800e2ba <f_getfree+0x96>
 800e2b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e2b6:	3301      	adds	r3, #1
 800e2b8:	663b      	str	r3, [r7, #96]	; 0x60
				} while (++clst < fs->n_fatent);
 800e2ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e2bc:	3301      	adds	r3, #1
 800e2be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e2c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2c2:	69db      	ldr	r3, [r3, #28]
 800e2c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d3db      	bcc.n	800e282 <f_getfree+0x5e>
 800e2ca:	e09a      	b.n	800e402 <f_getfree+0x1de>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 800e2cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	2b04      	cmp	r3, #4
 800e2d2:	d146      	bne.n	800e362 <f_getfree+0x13e>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 800e2d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2d6:	69db      	ldr	r3, [r3, #28]
 800e2d8:	3b02      	subs	r3, #2
 800e2da:	65fb      	str	r3, [r7, #92]	; 0x5c
					sect = fs->database;
 800e2dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2e0:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	657b      	str	r3, [r7, #84]	; 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800e2e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d10d      	bne.n	800e308 <f_getfree+0xe4>
 800e2ec:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800e2ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e2f0:	1c5a      	adds	r2, r3, #1
 800e2f2:	65ba      	str	r2, [r7, #88]	; 0x58
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	f7fb fd1d 	bl	8009d34 <move_window>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e300:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e304:	2b00      	cmp	r3, #0
 800e306:	d179      	bne.n	800e3fc <f_getfree+0x1d8>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800e308:	2308      	movs	r3, #8
 800e30a:	64bb      	str	r3, [r7, #72]	; 0x48
 800e30c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e30e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e310:	4413      	add	r3, r2
 800e312:	3338      	adds	r3, #56	; 0x38
 800e314:	781b      	ldrb	r3, [r3, #0]
 800e316:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e31a:	e013      	b.n	800e344 <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 800e31c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e320:	f003 0301 	and.w	r3, r3, #1
 800e324:	2b00      	cmp	r3, #0
 800e326:	d102      	bne.n	800e32e <f_getfree+0x10a>
 800e328:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e32a:	3301      	adds	r3, #1
 800e32c:	663b      	str	r3, [r7, #96]	; 0x60
							bm >>= 1;
 800e32e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e332:	085b      	lsrs	r3, r3, #1
 800e334:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800e338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e33a:	3b01      	subs	r3, #1
 800e33c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e33e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e340:	3b01      	subs	r3, #1
 800e342:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e346:	2b00      	cmp	r3, #0
 800e348:	d002      	beq.n	800e350 <f_getfree+0x12c>
 800e34a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d1e5      	bne.n	800e31c <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 800e350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e352:	3301      	adds	r3, #1
 800e354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e358:	657b      	str	r3, [r7, #84]	; 0x54
					} while (clst);
 800e35a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d1c2      	bne.n	800e2e6 <f_getfree+0xc2>
 800e360:	e04f      	b.n	800e402 <f_getfree+0x1de>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800e362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e364:	69db      	ldr	r3, [r3, #28]
 800e366:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e36c:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0; p = 0;
 800e36e:	2300      	movs	r3, #0
 800e370:	657b      	str	r3, [r7, #84]	; 0x54
 800e372:	2300      	movs	r3, #0
 800e374:	653b      	str	r3, [r7, #80]	; 0x50
					do {
						if (i == 0) {
 800e376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d113      	bne.n	800e3a4 <f_getfree+0x180>
							res = move_window(fs, sect++);
 800e37c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800e37e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e380:	1c5a      	adds	r2, r3, #1
 800e382:	65ba      	str	r2, [r7, #88]	; 0x58
 800e384:	4619      	mov	r1, r3
 800e386:	f7fb fcd5 	bl	8009d34 <move_window>
 800e38a:	4603      	mov	r3, r0
 800e38c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							if (res != FR_OK) break;
 800e390:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e394:	2b00      	cmp	r3, #0
 800e396:	d133      	bne.n	800e400 <f_getfree+0x1dc>
							p = fs->win;
 800e398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e39a:	3338      	adds	r3, #56	; 0x38
 800e39c:	653b      	str	r3, [r7, #80]	; 0x50
							i = SS(fs);
 800e39e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e3a2:	657b      	str	r3, [r7, #84]	; 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 800e3a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3a6:	781b      	ldrb	r3, [r3, #0]
 800e3a8:	2b02      	cmp	r3, #2
 800e3aa:	d10f      	bne.n	800e3cc <f_getfree+0x1a8>
							if (ld_word(p) == 0) nfree++;
 800e3ac:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e3ae:	f7fb f8bf 	bl	8009530 <ld_word>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d102      	bne.n	800e3be <f_getfree+0x19a>
 800e3b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e3ba:	3301      	adds	r3, #1
 800e3bc:	663b      	str	r3, [r7, #96]	; 0x60
							p += 2; i -= 2;
 800e3be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3c0:	3302      	adds	r3, #2
 800e3c2:	653b      	str	r3, [r7, #80]	; 0x50
 800e3c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e3c6:	3b02      	subs	r3, #2
 800e3c8:	657b      	str	r3, [r7, #84]	; 0x54
 800e3ca:	e010      	b.n	800e3ee <f_getfree+0x1ca>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800e3cc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e3ce:	f7fb f8c6 	bl	800955e <ld_dword>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d102      	bne.n	800e3e2 <f_getfree+0x1be>
 800e3dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e3de:	3301      	adds	r3, #1
 800e3e0:	663b      	str	r3, [r7, #96]	; 0x60
							p += 4; i -= 4;
 800e3e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3e4:	3304      	adds	r3, #4
 800e3e6:	653b      	str	r3, [r7, #80]	; 0x50
 800e3e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e3ea:	3b04      	subs	r3, #4
 800e3ec:	657b      	str	r3, [r7, #84]	; 0x54
						}
					} while (--clst);
 800e3ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e3f0:	3b01      	subs	r3, #1
 800e3f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e3f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d1bd      	bne.n	800e376 <f_getfree+0x152>
 800e3fa:	e002      	b.n	800e402 <f_getfree+0x1de>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800e3fc:	bf00      	nop
 800e3fe:	e000      	b.n	800e402 <f_getfree+0x1de>
							if (res != FR_OK) break;
 800e400:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800e402:	68bb      	ldr	r3, [r7, #8]
 800e404:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e406:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800e408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e40a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e40c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800e40e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e410:	791a      	ldrb	r2, [r3, #4]
 800e412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e414:	f042 0201 	orr.w	r2, r2, #1
 800e418:	b2d2      	uxtb	r2, r2
 800e41a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800e41c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e420:	4618      	mov	r0, r3
 800e422:	3768      	adds	r7, #104	; 0x68
 800e424:	46bd      	mov	sp, r7
 800e426:	bd80      	pop	{r7, pc}

0800e428 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e428:	b480      	push	{r7}
 800e42a:	b087      	sub	sp, #28
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	60f8      	str	r0, [r7, #12]
 800e430:	60b9      	str	r1, [r7, #8]
 800e432:	4613      	mov	r3, r2
 800e434:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e436:	2301      	movs	r3, #1
 800e438:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e43a:	2300      	movs	r3, #0
 800e43c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e43e:	4b1e      	ldr	r3, [pc, #120]	; (800e4b8 <FATFS_LinkDriverEx+0x90>)
 800e440:	7e1b      	ldrb	r3, [r3, #24]
 800e442:	b2db      	uxtb	r3, r3
 800e444:	2b03      	cmp	r3, #3
 800e446:	d831      	bhi.n	800e4ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e448:	4b1b      	ldr	r3, [pc, #108]	; (800e4b8 <FATFS_LinkDriverEx+0x90>)
 800e44a:	7e1b      	ldrb	r3, [r3, #24]
 800e44c:	b2db      	uxtb	r3, r3
 800e44e:	461a      	mov	r2, r3
 800e450:	4b19      	ldr	r3, [pc, #100]	; (800e4b8 <FATFS_LinkDriverEx+0x90>)
 800e452:	2100      	movs	r1, #0
 800e454:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e456:	4b18      	ldr	r3, [pc, #96]	; (800e4b8 <FATFS_LinkDriverEx+0x90>)
 800e458:	7e1b      	ldrb	r3, [r3, #24]
 800e45a:	b2db      	uxtb	r3, r3
 800e45c:	4a16      	ldr	r2, [pc, #88]	; (800e4b8 <FATFS_LinkDriverEx+0x90>)
 800e45e:	009b      	lsls	r3, r3, #2
 800e460:	4413      	add	r3, r2
 800e462:	68fa      	ldr	r2, [r7, #12]
 800e464:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e466:	4b14      	ldr	r3, [pc, #80]	; (800e4b8 <FATFS_LinkDriverEx+0x90>)
 800e468:	7e1b      	ldrb	r3, [r3, #24]
 800e46a:	b2db      	uxtb	r3, r3
 800e46c:	461a      	mov	r2, r3
 800e46e:	4b12      	ldr	r3, [pc, #72]	; (800e4b8 <FATFS_LinkDriverEx+0x90>)
 800e470:	4413      	add	r3, r2
 800e472:	79fa      	ldrb	r2, [r7, #7]
 800e474:	751a      	strb	r2, [r3, #20]
    DiskNum = disk.nbr++;
 800e476:	4b10      	ldr	r3, [pc, #64]	; (800e4b8 <FATFS_LinkDriverEx+0x90>)
 800e478:	7e1b      	ldrb	r3, [r3, #24]
 800e47a:	b2db      	uxtb	r3, r3
 800e47c:	1c5a      	adds	r2, r3, #1
 800e47e:	b2d1      	uxtb	r1, r2
 800e480:	4a0d      	ldr	r2, [pc, #52]	; (800e4b8 <FATFS_LinkDriverEx+0x90>)
 800e482:	7611      	strb	r1, [r2, #24]
 800e484:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e486:	7dbb      	ldrb	r3, [r7, #22]
 800e488:	3330      	adds	r3, #48	; 0x30
 800e48a:	b2da      	uxtb	r2, r3
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	3301      	adds	r3, #1
 800e494:	223a      	movs	r2, #58	; 0x3a
 800e496:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	3302      	adds	r3, #2
 800e49c:	222f      	movs	r2, #47	; 0x2f
 800e49e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	3303      	adds	r3, #3
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e4ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	371c      	adds	r7, #28
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bc80      	pop	{r7}
 800e4b6:	4770      	bx	lr
 800e4b8:	200011a0 	.word	0x200011a0

0800e4bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b082      	sub	sp, #8
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
 800e4c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	6839      	ldr	r1, [r7, #0]
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f7ff ffac 	bl	800e428 <FATFS_LinkDriverEx>
 800e4d0:	4603      	mov	r3, r0
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3708      	adds	r7, #8
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}
	...

0800e4dc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b085      	sub	sp, #20
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	6039      	str	r1, [r7, #0]
 800e4e6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e4e8:	88fb      	ldrh	r3, [r7, #6]
 800e4ea:	2b7f      	cmp	r3, #127	; 0x7f
 800e4ec:	d802      	bhi.n	800e4f4 <ff_convert+0x18>
		c = chr;
 800e4ee:	88fb      	ldrh	r3, [r7, #6]
 800e4f0:	81fb      	strh	r3, [r7, #14]
 800e4f2:	e025      	b.n	800e540 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d00b      	beq.n	800e512 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e4fa:	88fb      	ldrh	r3, [r7, #6]
 800e4fc:	2bff      	cmp	r3, #255	; 0xff
 800e4fe:	d805      	bhi.n	800e50c <ff_convert+0x30>
 800e500:	88fb      	ldrh	r3, [r7, #6]
 800e502:	3b80      	subs	r3, #128	; 0x80
 800e504:	4a11      	ldr	r2, [pc, #68]	; (800e54c <ff_convert+0x70>)
 800e506:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e50a:	e000      	b.n	800e50e <ff_convert+0x32>
 800e50c:	2300      	movs	r3, #0
 800e50e:	81fb      	strh	r3, [r7, #14]
 800e510:	e016      	b.n	800e540 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e512:	2300      	movs	r3, #0
 800e514:	81fb      	strh	r3, [r7, #14]
 800e516:	e009      	b.n	800e52c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e518:	89fb      	ldrh	r3, [r7, #14]
 800e51a:	4a0c      	ldr	r2, [pc, #48]	; (800e54c <ff_convert+0x70>)
 800e51c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e520:	88fa      	ldrh	r2, [r7, #6]
 800e522:	429a      	cmp	r2, r3
 800e524:	d006      	beq.n	800e534 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e526:	89fb      	ldrh	r3, [r7, #14]
 800e528:	3301      	adds	r3, #1
 800e52a:	81fb      	strh	r3, [r7, #14]
 800e52c:	89fb      	ldrh	r3, [r7, #14]
 800e52e:	2b7f      	cmp	r3, #127	; 0x7f
 800e530:	d9f2      	bls.n	800e518 <ff_convert+0x3c>
 800e532:	e000      	b.n	800e536 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e534:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e536:	89fb      	ldrh	r3, [r7, #14]
 800e538:	3380      	adds	r3, #128	; 0x80
 800e53a:	b29b      	uxth	r3, r3
 800e53c:	b2db      	uxtb	r3, r3
 800e53e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e540:	89fb      	ldrh	r3, [r7, #14]
}
 800e542:	4618      	mov	r0, r3
 800e544:	3714      	adds	r7, #20
 800e546:	46bd      	mov	sp, r7
 800e548:	bc80      	pop	{r7}
 800e54a:	4770      	bx	lr
 800e54c:	08011e6c 	.word	0x08011e6c

0800e550 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e550:	b480      	push	{r7}
 800e552:	b087      	sub	sp, #28
 800e554:	af00      	add	r7, sp, #0
 800e556:	4603      	mov	r3, r0
 800e558:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e55a:	88fb      	ldrh	r3, [r7, #6]
 800e55c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e560:	d201      	bcs.n	800e566 <ff_wtoupper+0x16>
 800e562:	4b3d      	ldr	r3, [pc, #244]	; (800e658 <ff_wtoupper+0x108>)
 800e564:	e000      	b.n	800e568 <ff_wtoupper+0x18>
 800e566:	4b3d      	ldr	r3, [pc, #244]	; (800e65c <ff_wtoupper+0x10c>)
 800e568:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	1c9a      	adds	r2, r3, #2
 800e56e:	617a      	str	r2, [r7, #20]
 800e570:	881b      	ldrh	r3, [r3, #0]
 800e572:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e574:	8a7b      	ldrh	r3, [r7, #18]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d068      	beq.n	800e64c <ff_wtoupper+0xfc>
 800e57a:	88fa      	ldrh	r2, [r7, #6]
 800e57c:	8a7b      	ldrh	r3, [r7, #18]
 800e57e:	429a      	cmp	r2, r3
 800e580:	d364      	bcc.n	800e64c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	1c9a      	adds	r2, r3, #2
 800e586:	617a      	str	r2, [r7, #20]
 800e588:	881b      	ldrh	r3, [r3, #0]
 800e58a:	823b      	strh	r3, [r7, #16]
 800e58c:	8a3b      	ldrh	r3, [r7, #16]
 800e58e:	0a1b      	lsrs	r3, r3, #8
 800e590:	81fb      	strh	r3, [r7, #14]
 800e592:	8a3b      	ldrh	r3, [r7, #16]
 800e594:	b2db      	uxtb	r3, r3
 800e596:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e598:	88fa      	ldrh	r2, [r7, #6]
 800e59a:	8a79      	ldrh	r1, [r7, #18]
 800e59c:	8a3b      	ldrh	r3, [r7, #16]
 800e59e:	440b      	add	r3, r1
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	da49      	bge.n	800e638 <ff_wtoupper+0xe8>
			switch (cmd) {
 800e5a4:	89fb      	ldrh	r3, [r7, #14]
 800e5a6:	2b08      	cmp	r3, #8
 800e5a8:	d84f      	bhi.n	800e64a <ff_wtoupper+0xfa>
 800e5aa:	a201      	add	r2, pc, #4	; (adr r2, 800e5b0 <ff_wtoupper+0x60>)
 800e5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5b0:	0800e5d5 	.word	0x0800e5d5
 800e5b4:	0800e5e7 	.word	0x0800e5e7
 800e5b8:	0800e5fd 	.word	0x0800e5fd
 800e5bc:	0800e605 	.word	0x0800e605
 800e5c0:	0800e60d 	.word	0x0800e60d
 800e5c4:	0800e615 	.word	0x0800e615
 800e5c8:	0800e61d 	.word	0x0800e61d
 800e5cc:	0800e625 	.word	0x0800e625
 800e5d0:	0800e62d 	.word	0x0800e62d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e5d4:	88fa      	ldrh	r2, [r7, #6]
 800e5d6:	8a7b      	ldrh	r3, [r7, #18]
 800e5d8:	1ad3      	subs	r3, r2, r3
 800e5da:	005b      	lsls	r3, r3, #1
 800e5dc:	697a      	ldr	r2, [r7, #20]
 800e5de:	4413      	add	r3, r2
 800e5e0:	881b      	ldrh	r3, [r3, #0]
 800e5e2:	80fb      	strh	r3, [r7, #6]
 800e5e4:	e027      	b.n	800e636 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e5e6:	88fa      	ldrh	r2, [r7, #6]
 800e5e8:	8a7b      	ldrh	r3, [r7, #18]
 800e5ea:	1ad3      	subs	r3, r2, r3
 800e5ec:	b29b      	uxth	r3, r3
 800e5ee:	f003 0301 	and.w	r3, r3, #1
 800e5f2:	b29b      	uxth	r3, r3
 800e5f4:	88fa      	ldrh	r2, [r7, #6]
 800e5f6:	1ad3      	subs	r3, r2, r3
 800e5f8:	80fb      	strh	r3, [r7, #6]
 800e5fa:	e01c      	b.n	800e636 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e5fc:	88fb      	ldrh	r3, [r7, #6]
 800e5fe:	3b10      	subs	r3, #16
 800e600:	80fb      	strh	r3, [r7, #6]
 800e602:	e018      	b.n	800e636 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e604:	88fb      	ldrh	r3, [r7, #6]
 800e606:	3b20      	subs	r3, #32
 800e608:	80fb      	strh	r3, [r7, #6]
 800e60a:	e014      	b.n	800e636 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e60c:	88fb      	ldrh	r3, [r7, #6]
 800e60e:	3b30      	subs	r3, #48	; 0x30
 800e610:	80fb      	strh	r3, [r7, #6]
 800e612:	e010      	b.n	800e636 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e614:	88fb      	ldrh	r3, [r7, #6]
 800e616:	3b1a      	subs	r3, #26
 800e618:	80fb      	strh	r3, [r7, #6]
 800e61a:	e00c      	b.n	800e636 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e61c:	88fb      	ldrh	r3, [r7, #6]
 800e61e:	3308      	adds	r3, #8
 800e620:	80fb      	strh	r3, [r7, #6]
 800e622:	e008      	b.n	800e636 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e624:	88fb      	ldrh	r3, [r7, #6]
 800e626:	3b50      	subs	r3, #80	; 0x50
 800e628:	80fb      	strh	r3, [r7, #6]
 800e62a:	e004      	b.n	800e636 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e62c:	88fb      	ldrh	r3, [r7, #6]
 800e62e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800e632:	80fb      	strh	r3, [r7, #6]
 800e634:	bf00      	nop
			}
			break;
 800e636:	e008      	b.n	800e64a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e638:	89fb      	ldrh	r3, [r7, #14]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d195      	bne.n	800e56a <ff_wtoupper+0x1a>
 800e63e:	8a3b      	ldrh	r3, [r7, #16]
 800e640:	005b      	lsls	r3, r3, #1
 800e642:	697a      	ldr	r2, [r7, #20]
 800e644:	4413      	add	r3, r2
 800e646:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e648:	e78f      	b.n	800e56a <ff_wtoupper+0x1a>
			break;
 800e64a:	bf00      	nop
	}

	return chr;
 800e64c:	88fb      	ldrh	r3, [r7, #6]
}
 800e64e:	4618      	mov	r0, r3
 800e650:	371c      	adds	r7, #28
 800e652:	46bd      	mov	sp, r7
 800e654:	bc80      	pop	{r7}
 800e656:	4770      	bx	lr
 800e658:	08011f6c 	.word	0x08011f6c
 800e65c:	08012160 	.word	0x08012160

0800e660 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800e660:	b480      	push	{r7}
 800e662:	b085      	sub	sp, #20
 800e664:	af00      	add	r7, sp, #0
 800e666:	4603      	mov	r3, r0
 800e668:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800e66a:	2300      	movs	r3, #0
 800e66c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800e66e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e672:	2b84      	cmp	r3, #132	; 0x84
 800e674:	d005      	beq.n	800e682 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800e676:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	4413      	add	r3, r2
 800e67e:	3303      	adds	r3, #3
 800e680:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800e682:	68fb      	ldr	r3, [r7, #12]
}
 800e684:	4618      	mov	r0, r3
 800e686:	3714      	adds	r7, #20
 800e688:	46bd      	mov	sp, r7
 800e68a:	bc80      	pop	{r7}
 800e68c:	4770      	bx	lr

0800e68e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800e68e:	b480      	push	{r7}
 800e690:	b083      	sub	sp, #12
 800e692:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e694:	f3ef 8305 	mrs	r3, IPSR
 800e698:	607b      	str	r3, [r7, #4]
  return(result);
 800e69a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	bf14      	ite	ne
 800e6a0:	2301      	movne	r3, #1
 800e6a2:	2300      	moveq	r3, #0
 800e6a4:	b2db      	uxtb	r3, r3
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	370c      	adds	r7, #12
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bc80      	pop	{r7}
 800e6ae:	4770      	bx	lr

0800e6b0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e6b4:	f001 f908 	bl	800f8c8 <vTaskStartScheduler>
  
  return osOK;
 800e6b8:	2300      	movs	r3, #0
}
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	bd80      	pop	{r7, pc}

0800e6be <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e6be:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6c0:	b089      	sub	sp, #36	; 0x24
 800e6c2:	af04      	add	r7, sp, #16
 800e6c4:	6078      	str	r0, [r7, #4]
 800e6c6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	695b      	ldr	r3, [r3, #20]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d020      	beq.n	800e712 <osThreadCreate+0x54>
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	699b      	ldr	r3, [r3, #24]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d01c      	beq.n	800e712 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	685c      	ldr	r4, [r3, #4]
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681d      	ldr	r5, [r3, #0]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	691e      	ldr	r6, [r3, #16]
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f7ff ffb8 	bl	800e660 <makeFreeRtosPriority>
 800e6f0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	695b      	ldr	r3, [r3, #20]
 800e6f6:	687a      	ldr	r2, [r7, #4]
 800e6f8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e6fa:	9202      	str	r2, [sp, #8]
 800e6fc:	9301      	str	r3, [sp, #4]
 800e6fe:	9100      	str	r1, [sp, #0]
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	4632      	mov	r2, r6
 800e704:	4629      	mov	r1, r5
 800e706:	4620      	mov	r0, r4
 800e708:	f000 ff08 	bl	800f51c <xTaskCreateStatic>
 800e70c:	4603      	mov	r3, r0
 800e70e:	60fb      	str	r3, [r7, #12]
 800e710:	e01c      	b.n	800e74c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	685c      	ldr	r4, [r3, #4]
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e71e:	b29e      	uxth	r6, r3
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e726:	4618      	mov	r0, r3
 800e728:	f7ff ff9a 	bl	800e660 <makeFreeRtosPriority>
 800e72c:	4602      	mov	r2, r0
 800e72e:	f107 030c 	add.w	r3, r7, #12
 800e732:	9301      	str	r3, [sp, #4]
 800e734:	9200      	str	r2, [sp, #0]
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	4632      	mov	r2, r6
 800e73a:	4629      	mov	r1, r5
 800e73c:	4620      	mov	r0, r4
 800e73e:	f000 ff49 	bl	800f5d4 <xTaskCreate>
 800e742:	4603      	mov	r3, r0
 800e744:	2b01      	cmp	r3, #1
 800e746:	d001      	beq.n	800e74c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800e748:	2300      	movs	r3, #0
 800e74a:	e000      	b.n	800e74e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800e74c:	68fb      	ldr	r3, [r7, #12]
}
 800e74e:	4618      	mov	r0, r3
 800e750:	3714      	adds	r7, #20
 800e752:	46bd      	mov	sp, r7
 800e754:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e756 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e756:	b580      	push	{r7, lr}
 800e758:	b084      	sub	sp, #16
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d001      	beq.n	800e76c <osDelay+0x16>
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	e000      	b.n	800e76e <osDelay+0x18>
 800e76c:	2301      	movs	r3, #1
 800e76e:	4618      	mov	r0, r3
 800e770:	f001 f876 	bl	800f860 <vTaskDelay>
  
  return osOK;
 800e774:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e776:	4618      	mov	r0, r3
 800e778:	3710      	adds	r7, #16
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}

0800e77e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800e77e:	b590      	push	{r4, r7, lr}
 800e780:	b085      	sub	sp, #20
 800e782:	af02      	add	r7, sp, #8
 800e784:	6078      	str	r0, [r7, #4]
 800e786:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	689b      	ldr	r3, [r3, #8]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d011      	beq.n	800e7b4 <osMessageCreate+0x36>
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	68db      	ldr	r3, [r3, #12]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d00d      	beq.n	800e7b4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6818      	ldr	r0, [r3, #0]
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	6859      	ldr	r1, [r3, #4]
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	689a      	ldr	r2, [r3, #8]
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	68db      	ldr	r3, [r3, #12]
 800e7a8:	2400      	movs	r4, #0
 800e7aa:	9400      	str	r4, [sp, #0]
 800e7ac:	f000 f9dc 	bl	800eb68 <xQueueGenericCreateStatic>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	e008      	b.n	800e7c6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6818      	ldr	r0, [r3, #0]
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	685b      	ldr	r3, [r3, #4]
 800e7bc:	2200      	movs	r2, #0
 800e7be:	4619      	mov	r1, r3
 800e7c0:	f000 fa49 	bl	800ec56 <xQueueGenericCreate>
 800e7c4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	370c      	adds	r7, #12
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd90      	pop	{r4, r7, pc}
	...

0800e7d0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b086      	sub	sp, #24
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	60f8      	str	r0, [r7, #12]
 800e7d8:	60b9      	str	r1, [r7, #8]
 800e7da:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800e7dc:	2300      	movs	r3, #0
 800e7de:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800e7e4:	697b      	ldr	r3, [r7, #20]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d101      	bne.n	800e7ee <osMessagePut+0x1e>
    ticks = 1;
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800e7ee:	f7ff ff4e 	bl	800e68e <inHandlerMode>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d018      	beq.n	800e82a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800e7f8:	f107 0210 	add.w	r2, r7, #16
 800e7fc:	f107 0108 	add.w	r1, r7, #8
 800e800:	2300      	movs	r3, #0
 800e802:	68f8      	ldr	r0, [r7, #12]
 800e804:	f000 fb82 	bl	800ef0c <xQueueGenericSendFromISR>
 800e808:	4603      	mov	r3, r0
 800e80a:	2b01      	cmp	r3, #1
 800e80c:	d001      	beq.n	800e812 <osMessagePut+0x42>
      return osErrorOS;
 800e80e:	23ff      	movs	r3, #255	; 0xff
 800e810:	e018      	b.n	800e844 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e812:	693b      	ldr	r3, [r7, #16]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d014      	beq.n	800e842 <osMessagePut+0x72>
 800e818:	4b0c      	ldr	r3, [pc, #48]	; (800e84c <osMessagePut+0x7c>)
 800e81a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e81e:	601a      	str	r2, [r3, #0]
 800e820:	f3bf 8f4f 	dsb	sy
 800e824:	f3bf 8f6f 	isb	sy
 800e828:	e00b      	b.n	800e842 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800e82a:	f107 0108 	add.w	r1, r7, #8
 800e82e:	2300      	movs	r3, #0
 800e830:	697a      	ldr	r2, [r7, #20]
 800e832:	68f8      	ldr	r0, [r7, #12]
 800e834:	f000 fa6c 	bl	800ed10 <xQueueGenericSend>
 800e838:	4603      	mov	r3, r0
 800e83a:	2b01      	cmp	r3, #1
 800e83c:	d001      	beq.n	800e842 <osMessagePut+0x72>
      return osErrorOS;
 800e83e:	23ff      	movs	r3, #255	; 0xff
 800e840:	e000      	b.n	800e844 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800e842:	2300      	movs	r3, #0
}
 800e844:	4618      	mov	r0, r3
 800e846:	3718      	adds	r7, #24
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}
 800e84c:	e000ed04 	.word	0xe000ed04

0800e850 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800e850:	b590      	push	{r4, r7, lr}
 800e852:	b08b      	sub	sp, #44	; 0x2c
 800e854:	af00      	add	r7, sp, #0
 800e856:	60f8      	str	r0, [r7, #12]
 800e858:	60b9      	str	r1, [r7, #8]
 800e85a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800e860:	2300      	movs	r3, #0
 800e862:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d10a      	bne.n	800e880 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800e86a:	2380      	movs	r3, #128	; 0x80
 800e86c:	617b      	str	r3, [r7, #20]
    return event;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	461c      	mov	r4, r3
 800e872:	f107 0314 	add.w	r3, r7, #20
 800e876:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e87a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e87e:	e054      	b.n	800e92a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800e880:	2300      	movs	r3, #0
 800e882:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800e884:	2300      	movs	r3, #0
 800e886:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e88e:	d103      	bne.n	800e898 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800e890:	f04f 33ff 	mov.w	r3, #4294967295
 800e894:	627b      	str	r3, [r7, #36]	; 0x24
 800e896:	e009      	b.n	800e8ac <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d006      	beq.n	800e8ac <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800e8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d101      	bne.n	800e8ac <osMessageGet+0x5c>
      ticks = 1;
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800e8ac:	f7ff feef 	bl	800e68e <inHandlerMode>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d01c      	beq.n	800e8f0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800e8b6:	f107 0220 	add.w	r2, r7, #32
 800e8ba:	f107 0314 	add.w	r3, r7, #20
 800e8be:	3304      	adds	r3, #4
 800e8c0:	4619      	mov	r1, r3
 800e8c2:	68b8      	ldr	r0, [r7, #8]
 800e8c4:	f000 fc9a 	bl	800f1fc <xQueueReceiveFromISR>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	2b01      	cmp	r3, #1
 800e8cc:	d102      	bne.n	800e8d4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800e8ce:	2310      	movs	r3, #16
 800e8d0:	617b      	str	r3, [r7, #20]
 800e8d2:	e001      	b.n	800e8d8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e8d8:	6a3b      	ldr	r3, [r7, #32]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d01d      	beq.n	800e91a <osMessageGet+0xca>
 800e8de:	4b15      	ldr	r3, [pc, #84]	; (800e934 <osMessageGet+0xe4>)
 800e8e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8e4:	601a      	str	r2, [r3, #0]
 800e8e6:	f3bf 8f4f 	dsb	sy
 800e8ea:	f3bf 8f6f 	isb	sy
 800e8ee:	e014      	b.n	800e91a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800e8f0:	f107 0314 	add.w	r3, r7, #20
 800e8f4:	3304      	adds	r3, #4
 800e8f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8f8:	4619      	mov	r1, r3
 800e8fa:	68b8      	ldr	r0, [r7, #8]
 800e8fc:	f000 fb9e 	bl	800f03c <xQueueReceive>
 800e900:	4603      	mov	r3, r0
 800e902:	2b01      	cmp	r3, #1
 800e904:	d102      	bne.n	800e90c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800e906:	2310      	movs	r3, #16
 800e908:	617b      	str	r3, [r7, #20]
 800e90a:	e006      	b.n	800e91a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800e90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d101      	bne.n	800e916 <osMessageGet+0xc6>
 800e912:	2300      	movs	r3, #0
 800e914:	e000      	b.n	800e918 <osMessageGet+0xc8>
 800e916:	2340      	movs	r3, #64	; 0x40
 800e918:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	461c      	mov	r4, r3
 800e91e:	f107 0314 	add.w	r3, r7, #20
 800e922:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e926:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800e92a:	68f8      	ldr	r0, [r7, #12]
 800e92c:	372c      	adds	r7, #44	; 0x2c
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd90      	pop	{r4, r7, pc}
 800e932:	bf00      	nop
 800e934:	e000ed04 	.word	0xe000ed04

0800e938 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e938:	b480      	push	{r7}
 800e93a:	b083      	sub	sp, #12
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f103 0208 	add.w	r2, r3, #8
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	f04f 32ff 	mov.w	r2, #4294967295
 800e950:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f103 0208 	add.w	r2, r3, #8
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f103 0208 	add.w	r2, r3, #8
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2200      	movs	r2, #0
 800e96a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e96c:	bf00      	nop
 800e96e:	370c      	adds	r7, #12
 800e970:	46bd      	mov	sp, r7
 800e972:	bc80      	pop	{r7}
 800e974:	4770      	bx	lr

0800e976 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e976:	b480      	push	{r7}
 800e978:	b083      	sub	sp, #12
 800e97a:	af00      	add	r7, sp, #0
 800e97c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2200      	movs	r2, #0
 800e982:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e984:	bf00      	nop
 800e986:	370c      	adds	r7, #12
 800e988:	46bd      	mov	sp, r7
 800e98a:	bc80      	pop	{r7}
 800e98c:	4770      	bx	lr

0800e98e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e98e:	b480      	push	{r7}
 800e990:	b085      	sub	sp, #20
 800e992:	af00      	add	r7, sp, #0
 800e994:	6078      	str	r0, [r7, #4]
 800e996:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	685b      	ldr	r3, [r3, #4]
 800e99c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	68fa      	ldr	r2, [r7, #12]
 800e9a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	689a      	ldr	r2, [r3, #8]
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	689b      	ldr	r3, [r3, #8]
 800e9b0:	683a      	ldr	r2, [r7, #0]
 800e9b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	683a      	ldr	r2, [r7, #0]
 800e9b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	687a      	ldr	r2, [r7, #4]
 800e9be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	1c5a      	adds	r2, r3, #1
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	601a      	str	r2, [r3, #0]
}
 800e9ca:	bf00      	nop
 800e9cc:	3714      	adds	r7, #20
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bc80      	pop	{r7}
 800e9d2:	4770      	bx	lr

0800e9d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b085      	sub	sp, #20
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
 800e9dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9ea:	d103      	bne.n	800e9f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	691b      	ldr	r3, [r3, #16]
 800e9f0:	60fb      	str	r3, [r7, #12]
 800e9f2:	e00c      	b.n	800ea0e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	3308      	adds	r3, #8
 800e9f8:	60fb      	str	r3, [r7, #12]
 800e9fa:	e002      	b.n	800ea02 <vListInsert+0x2e>
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	685b      	ldr	r3, [r3, #4]
 800ea00:	60fb      	str	r3, [r7, #12]
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	685b      	ldr	r3, [r3, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	68ba      	ldr	r2, [r7, #8]
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	d2f6      	bcs.n	800e9fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	685a      	ldr	r2, [r3, #4]
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	685b      	ldr	r3, [r3, #4]
 800ea1a:	683a      	ldr	r2, [r7, #0]
 800ea1c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	68fa      	ldr	r2, [r7, #12]
 800ea22:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	683a      	ldr	r2, [r7, #0]
 800ea28:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	687a      	ldr	r2, [r7, #4]
 800ea2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	1c5a      	adds	r2, r3, #1
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	601a      	str	r2, [r3, #0]
}
 800ea3a:	bf00      	nop
 800ea3c:	3714      	adds	r7, #20
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bc80      	pop	{r7}
 800ea42:	4770      	bx	lr

0800ea44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ea44:	b480      	push	{r7}
 800ea46:	b085      	sub	sp, #20
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	691b      	ldr	r3, [r3, #16]
 800ea50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	685b      	ldr	r3, [r3, #4]
 800ea56:	687a      	ldr	r2, [r7, #4]
 800ea58:	6892      	ldr	r2, [r2, #8]
 800ea5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	689b      	ldr	r3, [r3, #8]
 800ea60:	687a      	ldr	r2, [r7, #4]
 800ea62:	6852      	ldr	r2, [r2, #4]
 800ea64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	685b      	ldr	r3, [r3, #4]
 800ea6a:	687a      	ldr	r2, [r7, #4]
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d103      	bne.n	800ea78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	689a      	ldr	r2, [r3, #8]
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	1e5a      	subs	r2, r3, #1
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	681b      	ldr	r3, [r3, #0]
}
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	3714      	adds	r7, #20
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bc80      	pop	{r7}
 800ea94:	4770      	bx	lr
	...

0800ea98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b084      	sub	sp, #16
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d10a      	bne.n	800eac2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800eaac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab0:	f383 8811 	msr	BASEPRI, r3
 800eab4:	f3bf 8f6f 	isb	sy
 800eab8:	f3bf 8f4f 	dsb	sy
 800eabc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800eabe:	bf00      	nop
 800eac0:	e7fe      	b.n	800eac0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800eac2:	f001 fd1b 	bl	80104fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	681a      	ldr	r2, [r3, #0]
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eace:	68f9      	ldr	r1, [r7, #12]
 800ead0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ead2:	fb01 f303 	mul.w	r3, r1, r3
 800ead6:	441a      	add	r2, r3
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	2200      	movs	r2, #0
 800eae0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	681a      	ldr	r2, [r3, #0]
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	681a      	ldr	r2, [r3, #0]
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaf2:	3b01      	subs	r3, #1
 800eaf4:	68f9      	ldr	r1, [r7, #12]
 800eaf6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800eaf8:	fb01 f303 	mul.w	r3, r1, r3
 800eafc:	441a      	add	r2, r3
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	22ff      	movs	r2, #255	; 0xff
 800eb06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	22ff      	movs	r2, #255	; 0xff
 800eb0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d114      	bne.n	800eb42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	691b      	ldr	r3, [r3, #16]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d01a      	beq.n	800eb56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	3310      	adds	r3, #16
 800eb24:	4618      	mov	r0, r3
 800eb26:	f001 f927 	bl	800fd78 <xTaskRemoveFromEventList>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d012      	beq.n	800eb56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800eb30:	4b0c      	ldr	r3, [pc, #48]	; (800eb64 <xQueueGenericReset+0xcc>)
 800eb32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb36:	601a      	str	r2, [r3, #0]
 800eb38:	f3bf 8f4f 	dsb	sy
 800eb3c:	f3bf 8f6f 	isb	sy
 800eb40:	e009      	b.n	800eb56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	3310      	adds	r3, #16
 800eb46:	4618      	mov	r0, r3
 800eb48:	f7ff fef6 	bl	800e938 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	3324      	adds	r3, #36	; 0x24
 800eb50:	4618      	mov	r0, r3
 800eb52:	f7ff fef1 	bl	800e938 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800eb56:	f001 fd01 	bl	801055c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800eb5a:	2301      	movs	r3, #1
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	3710      	adds	r7, #16
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}
 800eb64:	e000ed04 	.word	0xe000ed04

0800eb68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b08e      	sub	sp, #56	; 0x38
 800eb6c:	af02      	add	r7, sp, #8
 800eb6e:	60f8      	str	r0, [r7, #12]
 800eb70:	60b9      	str	r1, [r7, #8]
 800eb72:	607a      	str	r2, [r7, #4]
 800eb74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d10a      	bne.n	800eb92 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800eb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb80:	f383 8811 	msr	BASEPRI, r3
 800eb84:	f3bf 8f6f 	isb	sy
 800eb88:	f3bf 8f4f 	dsb	sy
 800eb8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800eb8e:	bf00      	nop
 800eb90:	e7fe      	b.n	800eb90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d10a      	bne.n	800ebae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800eb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb9c:	f383 8811 	msr	BASEPRI, r3
 800eba0:	f3bf 8f6f 	isb	sy
 800eba4:	f3bf 8f4f 	dsb	sy
 800eba8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ebaa:	bf00      	nop
 800ebac:	e7fe      	b.n	800ebac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d002      	beq.n	800ebba <xQueueGenericCreateStatic+0x52>
 800ebb4:	68bb      	ldr	r3, [r7, #8]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d001      	beq.n	800ebbe <xQueueGenericCreateStatic+0x56>
 800ebba:	2301      	movs	r3, #1
 800ebbc:	e000      	b.n	800ebc0 <xQueueGenericCreateStatic+0x58>
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d10a      	bne.n	800ebda <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ebc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc8:	f383 8811 	msr	BASEPRI, r3
 800ebcc:	f3bf 8f6f 	isb	sy
 800ebd0:	f3bf 8f4f 	dsb	sy
 800ebd4:	623b      	str	r3, [r7, #32]
}
 800ebd6:	bf00      	nop
 800ebd8:	e7fe      	b.n	800ebd8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d102      	bne.n	800ebe6 <xQueueGenericCreateStatic+0x7e>
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d101      	bne.n	800ebea <xQueueGenericCreateStatic+0x82>
 800ebe6:	2301      	movs	r3, #1
 800ebe8:	e000      	b.n	800ebec <xQueueGenericCreateStatic+0x84>
 800ebea:	2300      	movs	r3, #0
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d10a      	bne.n	800ec06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ebf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebf4:	f383 8811 	msr	BASEPRI, r3
 800ebf8:	f3bf 8f6f 	isb	sy
 800ebfc:	f3bf 8f4f 	dsb	sy
 800ec00:	61fb      	str	r3, [r7, #28]
}
 800ec02:	bf00      	nop
 800ec04:	e7fe      	b.n	800ec04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ec06:	2348      	movs	r3, #72	; 0x48
 800ec08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	2b48      	cmp	r3, #72	; 0x48
 800ec0e:	d00a      	beq.n	800ec26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ec10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec14:	f383 8811 	msr	BASEPRI, r3
 800ec18:	f3bf 8f6f 	isb	sy
 800ec1c:	f3bf 8f4f 	dsb	sy
 800ec20:	61bb      	str	r3, [r7, #24]
}
 800ec22:	bf00      	nop
 800ec24:	e7fe      	b.n	800ec24 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ec2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d00d      	beq.n	800ec4c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ec30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec32:	2201      	movs	r2, #1
 800ec34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ec38:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ec3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec3e:	9300      	str	r3, [sp, #0]
 800ec40:	4613      	mov	r3, r2
 800ec42:	687a      	ldr	r2, [r7, #4]
 800ec44:	68b9      	ldr	r1, [r7, #8]
 800ec46:	68f8      	ldr	r0, [r7, #12]
 800ec48:	f000 f843 	bl	800ecd2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800ec4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	3730      	adds	r7, #48	; 0x30
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bd80      	pop	{r7, pc}

0800ec56 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ec56:	b580      	push	{r7, lr}
 800ec58:	b08a      	sub	sp, #40	; 0x28
 800ec5a:	af02      	add	r7, sp, #8
 800ec5c:	60f8      	str	r0, [r7, #12]
 800ec5e:	60b9      	str	r1, [r7, #8]
 800ec60:	4613      	mov	r3, r2
 800ec62:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d10a      	bne.n	800ec80 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ec6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec6e:	f383 8811 	msr	BASEPRI, r3
 800ec72:	f3bf 8f6f 	isb	sy
 800ec76:	f3bf 8f4f 	dsb	sy
 800ec7a:	613b      	str	r3, [r7, #16]
}
 800ec7c:	bf00      	nop
 800ec7e:	e7fe      	b.n	800ec7e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d102      	bne.n	800ec8c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ec86:	2300      	movs	r3, #0
 800ec88:	61fb      	str	r3, [r7, #28]
 800ec8a:	e004      	b.n	800ec96 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	68ba      	ldr	r2, [r7, #8]
 800ec90:	fb02 f303 	mul.w	r3, r2, r3
 800ec94:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800ec96:	69fb      	ldr	r3, [r7, #28]
 800ec98:	3348      	adds	r3, #72	; 0x48
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f001 fd2e 	bl	80106fc <pvPortMalloc>
 800eca0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800eca2:	69bb      	ldr	r3, [r7, #24]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d00f      	beq.n	800ecc8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800eca8:	69bb      	ldr	r3, [r7, #24]
 800ecaa:	3348      	adds	r3, #72	; 0x48
 800ecac:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ecae:	69bb      	ldr	r3, [r7, #24]
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ecb6:	79fa      	ldrb	r2, [r7, #7]
 800ecb8:	69bb      	ldr	r3, [r7, #24]
 800ecba:	9300      	str	r3, [sp, #0]
 800ecbc:	4613      	mov	r3, r2
 800ecbe:	697a      	ldr	r2, [r7, #20]
 800ecc0:	68b9      	ldr	r1, [r7, #8]
 800ecc2:	68f8      	ldr	r0, [r7, #12]
 800ecc4:	f000 f805 	bl	800ecd2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800ecc8:	69bb      	ldr	r3, [r7, #24]
	}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3720      	adds	r7, #32
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}

0800ecd2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ecd2:	b580      	push	{r7, lr}
 800ecd4:	b084      	sub	sp, #16
 800ecd6:	af00      	add	r7, sp, #0
 800ecd8:	60f8      	str	r0, [r7, #12]
 800ecda:	60b9      	str	r1, [r7, #8]
 800ecdc:	607a      	str	r2, [r7, #4]
 800ecde:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d103      	bne.n	800ecee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ece6:	69bb      	ldr	r3, [r7, #24]
 800ece8:	69ba      	ldr	r2, [r7, #24]
 800ecea:	601a      	str	r2, [r3, #0]
 800ecec:	e002      	b.n	800ecf4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ecee:	69bb      	ldr	r3, [r7, #24]
 800ecf0:	687a      	ldr	r2, [r7, #4]
 800ecf2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ecf4:	69bb      	ldr	r3, [r7, #24]
 800ecf6:	68fa      	ldr	r2, [r7, #12]
 800ecf8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ecfa:	69bb      	ldr	r3, [r7, #24]
 800ecfc:	68ba      	ldr	r2, [r7, #8]
 800ecfe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ed00:	2101      	movs	r1, #1
 800ed02:	69b8      	ldr	r0, [r7, #24]
 800ed04:	f7ff fec8 	bl	800ea98 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ed08:	bf00      	nop
 800ed0a:	3710      	adds	r7, #16
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}

0800ed10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b08e      	sub	sp, #56	; 0x38
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	60f8      	str	r0, [r7, #12]
 800ed18:	60b9      	str	r1, [r7, #8]
 800ed1a:	607a      	str	r2, [r7, #4]
 800ed1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ed26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d10a      	bne.n	800ed42 <xQueueGenericSend+0x32>
	__asm volatile
 800ed2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed30:	f383 8811 	msr	BASEPRI, r3
 800ed34:	f3bf 8f6f 	isb	sy
 800ed38:	f3bf 8f4f 	dsb	sy
 800ed3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ed3e:	bf00      	nop
 800ed40:	e7fe      	b.n	800ed40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d103      	bne.n	800ed50 <xQueueGenericSend+0x40>
 800ed48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d101      	bne.n	800ed54 <xQueueGenericSend+0x44>
 800ed50:	2301      	movs	r3, #1
 800ed52:	e000      	b.n	800ed56 <xQueueGenericSend+0x46>
 800ed54:	2300      	movs	r3, #0
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d10a      	bne.n	800ed70 <xQueueGenericSend+0x60>
	__asm volatile
 800ed5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed5e:	f383 8811 	msr	BASEPRI, r3
 800ed62:	f3bf 8f6f 	isb	sy
 800ed66:	f3bf 8f4f 	dsb	sy
 800ed6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ed6c:	bf00      	nop
 800ed6e:	e7fe      	b.n	800ed6e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	2b02      	cmp	r3, #2
 800ed74:	d103      	bne.n	800ed7e <xQueueGenericSend+0x6e>
 800ed76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed7a:	2b01      	cmp	r3, #1
 800ed7c:	d101      	bne.n	800ed82 <xQueueGenericSend+0x72>
 800ed7e:	2301      	movs	r3, #1
 800ed80:	e000      	b.n	800ed84 <xQueueGenericSend+0x74>
 800ed82:	2300      	movs	r3, #0
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d10a      	bne.n	800ed9e <xQueueGenericSend+0x8e>
	__asm volatile
 800ed88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed8c:	f383 8811 	msr	BASEPRI, r3
 800ed90:	f3bf 8f6f 	isb	sy
 800ed94:	f3bf 8f4f 	dsb	sy
 800ed98:	623b      	str	r3, [r7, #32]
}
 800ed9a:	bf00      	nop
 800ed9c:	e7fe      	b.n	800ed9c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ed9e:	f001 f9af 	bl	8010100 <xTaskGetSchedulerState>
 800eda2:	4603      	mov	r3, r0
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d102      	bne.n	800edae <xQueueGenericSend+0x9e>
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d101      	bne.n	800edb2 <xQueueGenericSend+0xa2>
 800edae:	2301      	movs	r3, #1
 800edb0:	e000      	b.n	800edb4 <xQueueGenericSend+0xa4>
 800edb2:	2300      	movs	r3, #0
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d10a      	bne.n	800edce <xQueueGenericSend+0xbe>
	__asm volatile
 800edb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edbc:	f383 8811 	msr	BASEPRI, r3
 800edc0:	f3bf 8f6f 	isb	sy
 800edc4:	f3bf 8f4f 	dsb	sy
 800edc8:	61fb      	str	r3, [r7, #28]
}
 800edca:	bf00      	nop
 800edcc:	e7fe      	b.n	800edcc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800edce:	f001 fb95 	bl	80104fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800edd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800edd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edda:	429a      	cmp	r2, r3
 800eddc:	d302      	bcc.n	800ede4 <xQueueGenericSend+0xd4>
 800edde:	683b      	ldr	r3, [r7, #0]
 800ede0:	2b02      	cmp	r3, #2
 800ede2:	d129      	bne.n	800ee38 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ede4:	683a      	ldr	r2, [r7, #0]
 800ede6:	68b9      	ldr	r1, [r7, #8]
 800ede8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800edea:	f000 fa87 	bl	800f2fc <prvCopyDataToQueue>
 800edee:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800edf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d010      	beq.n	800ee1a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800edf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edfa:	3324      	adds	r3, #36	; 0x24
 800edfc:	4618      	mov	r0, r3
 800edfe:	f000 ffbb 	bl	800fd78 <xTaskRemoveFromEventList>
 800ee02:	4603      	mov	r3, r0
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d013      	beq.n	800ee30 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ee08:	4b3f      	ldr	r3, [pc, #252]	; (800ef08 <xQueueGenericSend+0x1f8>)
 800ee0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee0e:	601a      	str	r2, [r3, #0]
 800ee10:	f3bf 8f4f 	dsb	sy
 800ee14:	f3bf 8f6f 	isb	sy
 800ee18:	e00a      	b.n	800ee30 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ee1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d007      	beq.n	800ee30 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ee20:	4b39      	ldr	r3, [pc, #228]	; (800ef08 <xQueueGenericSend+0x1f8>)
 800ee22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee26:	601a      	str	r2, [r3, #0]
 800ee28:	f3bf 8f4f 	dsb	sy
 800ee2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ee30:	f001 fb94 	bl	801055c <vPortExitCritical>
				return pdPASS;
 800ee34:	2301      	movs	r3, #1
 800ee36:	e063      	b.n	800ef00 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d103      	bne.n	800ee46 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ee3e:	f001 fb8d 	bl	801055c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ee42:	2300      	movs	r3, #0
 800ee44:	e05c      	b.n	800ef00 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ee46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d106      	bne.n	800ee5a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ee4c:	f107 0314 	add.w	r3, r7, #20
 800ee50:	4618      	mov	r0, r3
 800ee52:	f000 fff3 	bl	800fe3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ee56:	2301      	movs	r3, #1
 800ee58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ee5a:	f001 fb7f 	bl	801055c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ee5e:	f000 fd9d 	bl	800f99c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ee62:	f001 fb4b 	bl	80104fc <vPortEnterCritical>
 800ee66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ee6c:	b25b      	sxtb	r3, r3
 800ee6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee72:	d103      	bne.n	800ee7c <xQueueGenericSend+0x16c>
 800ee74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee76:	2200      	movs	r2, #0
 800ee78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ee7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee82:	b25b      	sxtb	r3, r3
 800ee84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee88:	d103      	bne.n	800ee92 <xQueueGenericSend+0x182>
 800ee8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ee92:	f001 fb63 	bl	801055c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ee96:	1d3a      	adds	r2, r7, #4
 800ee98:	f107 0314 	add.w	r3, r7, #20
 800ee9c:	4611      	mov	r1, r2
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f000 ffe2 	bl	800fe68 <xTaskCheckForTimeOut>
 800eea4:	4603      	mov	r3, r0
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d124      	bne.n	800eef4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800eeaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eeac:	f000 fb1e 	bl	800f4ec <prvIsQueueFull>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d018      	beq.n	800eee8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800eeb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb8:	3310      	adds	r3, #16
 800eeba:	687a      	ldr	r2, [r7, #4]
 800eebc:	4611      	mov	r1, r2
 800eebe:	4618      	mov	r0, r3
 800eec0:	f000 ff36 	bl	800fd30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800eec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eec6:	f000 faa9 	bl	800f41c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800eeca:	f000 fd75 	bl	800f9b8 <xTaskResumeAll>
 800eece:	4603      	mov	r3, r0
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	f47f af7c 	bne.w	800edce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800eed6:	4b0c      	ldr	r3, [pc, #48]	; (800ef08 <xQueueGenericSend+0x1f8>)
 800eed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eedc:	601a      	str	r2, [r3, #0]
 800eede:	f3bf 8f4f 	dsb	sy
 800eee2:	f3bf 8f6f 	isb	sy
 800eee6:	e772      	b.n	800edce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800eee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eeea:	f000 fa97 	bl	800f41c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eeee:	f000 fd63 	bl	800f9b8 <xTaskResumeAll>
 800eef2:	e76c      	b.n	800edce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800eef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eef6:	f000 fa91 	bl	800f41c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eefa:	f000 fd5d 	bl	800f9b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800eefe:	2300      	movs	r3, #0
		}
	}
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	3738      	adds	r7, #56	; 0x38
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}
 800ef08:	e000ed04 	.word	0xe000ed04

0800ef0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b08e      	sub	sp, #56	; 0x38
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	60f8      	str	r0, [r7, #12]
 800ef14:	60b9      	str	r1, [r7, #8]
 800ef16:	607a      	str	r2, [r7, #4]
 800ef18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ef1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d10a      	bne.n	800ef3a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ef24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef28:	f383 8811 	msr	BASEPRI, r3
 800ef2c:	f3bf 8f6f 	isb	sy
 800ef30:	f3bf 8f4f 	dsb	sy
 800ef34:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ef36:	bf00      	nop
 800ef38:	e7fe      	b.n	800ef38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ef3a:	68bb      	ldr	r3, [r7, #8]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d103      	bne.n	800ef48 <xQueueGenericSendFromISR+0x3c>
 800ef40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d101      	bne.n	800ef4c <xQueueGenericSendFromISR+0x40>
 800ef48:	2301      	movs	r3, #1
 800ef4a:	e000      	b.n	800ef4e <xQueueGenericSendFromISR+0x42>
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d10a      	bne.n	800ef68 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ef52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef56:	f383 8811 	msr	BASEPRI, r3
 800ef5a:	f3bf 8f6f 	isb	sy
 800ef5e:	f3bf 8f4f 	dsb	sy
 800ef62:	623b      	str	r3, [r7, #32]
}
 800ef64:	bf00      	nop
 800ef66:	e7fe      	b.n	800ef66 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	2b02      	cmp	r3, #2
 800ef6c:	d103      	bne.n	800ef76 <xQueueGenericSendFromISR+0x6a>
 800ef6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef72:	2b01      	cmp	r3, #1
 800ef74:	d101      	bne.n	800ef7a <xQueueGenericSendFromISR+0x6e>
 800ef76:	2301      	movs	r3, #1
 800ef78:	e000      	b.n	800ef7c <xQueueGenericSendFromISR+0x70>
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d10a      	bne.n	800ef96 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ef80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef84:	f383 8811 	msr	BASEPRI, r3
 800ef88:	f3bf 8f6f 	isb	sy
 800ef8c:	f3bf 8f4f 	dsb	sy
 800ef90:	61fb      	str	r3, [r7, #28]
}
 800ef92:	bf00      	nop
 800ef94:	e7fe      	b.n	800ef94 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ef96:	f001 fb73 	bl	8010680 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ef9a:	f3ef 8211 	mrs	r2, BASEPRI
 800ef9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efa2:	f383 8811 	msr	BASEPRI, r3
 800efa6:	f3bf 8f6f 	isb	sy
 800efaa:	f3bf 8f4f 	dsb	sy
 800efae:	61ba      	str	r2, [r7, #24]
 800efb0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800efb2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800efb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800efb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800efba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efbe:	429a      	cmp	r2, r3
 800efc0:	d302      	bcc.n	800efc8 <xQueueGenericSendFromISR+0xbc>
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	2b02      	cmp	r3, #2
 800efc6:	d12c      	bne.n	800f022 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800efc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800efce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800efd2:	683a      	ldr	r2, [r7, #0]
 800efd4:	68b9      	ldr	r1, [r7, #8]
 800efd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800efd8:	f000 f990 	bl	800f2fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800efdc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800efe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efe4:	d112      	bne.n	800f00c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800efe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efea:	2b00      	cmp	r3, #0
 800efec:	d016      	beq.n	800f01c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800efee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff0:	3324      	adds	r3, #36	; 0x24
 800eff2:	4618      	mov	r0, r3
 800eff4:	f000 fec0 	bl	800fd78 <xTaskRemoveFromEventList>
 800eff8:	4603      	mov	r3, r0
 800effa:	2b00      	cmp	r3, #0
 800effc:	d00e      	beq.n	800f01c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d00b      	beq.n	800f01c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2201      	movs	r2, #1
 800f008:	601a      	str	r2, [r3, #0]
 800f00a:	e007      	b.n	800f01c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f00c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f010:	3301      	adds	r3, #1
 800f012:	b2db      	uxtb	r3, r3
 800f014:	b25a      	sxtb	r2, r3
 800f016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f01c:	2301      	movs	r3, #1
 800f01e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800f020:	e001      	b.n	800f026 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f022:	2300      	movs	r3, #0
 800f024:	637b      	str	r3, [r7, #52]	; 0x34
 800f026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f028:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f02a:	693b      	ldr	r3, [r7, #16]
 800f02c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f030:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f034:	4618      	mov	r0, r3
 800f036:	3738      	adds	r7, #56	; 0x38
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}

0800f03c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b08c      	sub	sp, #48	; 0x30
 800f040:	af00      	add	r7, sp, #0
 800f042:	60f8      	str	r0, [r7, #12]
 800f044:	60b9      	str	r1, [r7, #8]
 800f046:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f048:	2300      	movs	r3, #0
 800f04a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f052:	2b00      	cmp	r3, #0
 800f054:	d10a      	bne.n	800f06c <xQueueReceive+0x30>
	__asm volatile
 800f056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f05a:	f383 8811 	msr	BASEPRI, r3
 800f05e:	f3bf 8f6f 	isb	sy
 800f062:	f3bf 8f4f 	dsb	sy
 800f066:	623b      	str	r3, [r7, #32]
}
 800f068:	bf00      	nop
 800f06a:	e7fe      	b.n	800f06a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d103      	bne.n	800f07a <xQueueReceive+0x3e>
 800f072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f076:	2b00      	cmp	r3, #0
 800f078:	d101      	bne.n	800f07e <xQueueReceive+0x42>
 800f07a:	2301      	movs	r3, #1
 800f07c:	e000      	b.n	800f080 <xQueueReceive+0x44>
 800f07e:	2300      	movs	r3, #0
 800f080:	2b00      	cmp	r3, #0
 800f082:	d10a      	bne.n	800f09a <xQueueReceive+0x5e>
	__asm volatile
 800f084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f088:	f383 8811 	msr	BASEPRI, r3
 800f08c:	f3bf 8f6f 	isb	sy
 800f090:	f3bf 8f4f 	dsb	sy
 800f094:	61fb      	str	r3, [r7, #28]
}
 800f096:	bf00      	nop
 800f098:	e7fe      	b.n	800f098 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f09a:	f001 f831 	bl	8010100 <xTaskGetSchedulerState>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d102      	bne.n	800f0aa <xQueueReceive+0x6e>
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d101      	bne.n	800f0ae <xQueueReceive+0x72>
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	e000      	b.n	800f0b0 <xQueueReceive+0x74>
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d10a      	bne.n	800f0ca <xQueueReceive+0x8e>
	__asm volatile
 800f0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0b8:	f383 8811 	msr	BASEPRI, r3
 800f0bc:	f3bf 8f6f 	isb	sy
 800f0c0:	f3bf 8f4f 	dsb	sy
 800f0c4:	61bb      	str	r3, [r7, #24]
}
 800f0c6:	bf00      	nop
 800f0c8:	e7fe      	b.n	800f0c8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800f0ca:	f001 fa17 	bl	80104fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d01f      	beq.n	800f11a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f0da:	68b9      	ldr	r1, [r7, #8]
 800f0dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f0de:	f000 f977 	bl	800f3d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e4:	1e5a      	subs	r2, r3, #1
 800f0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ec:	691b      	ldr	r3, [r3, #16]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d00f      	beq.n	800f112 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f4:	3310      	adds	r3, #16
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f000 fe3e 	bl	800fd78 <xTaskRemoveFromEventList>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d007      	beq.n	800f112 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f102:	4b3d      	ldr	r3, [pc, #244]	; (800f1f8 <xQueueReceive+0x1bc>)
 800f104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f108:	601a      	str	r2, [r3, #0]
 800f10a:	f3bf 8f4f 	dsb	sy
 800f10e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f112:	f001 fa23 	bl	801055c <vPortExitCritical>
				return pdPASS;
 800f116:	2301      	movs	r3, #1
 800f118:	e069      	b.n	800f1ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d103      	bne.n	800f128 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f120:	f001 fa1c 	bl	801055c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f124:	2300      	movs	r3, #0
 800f126:	e062      	b.n	800f1ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d106      	bne.n	800f13c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f12e:	f107 0310 	add.w	r3, r7, #16
 800f132:	4618      	mov	r0, r3
 800f134:	f000 fe82 	bl	800fe3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f138:	2301      	movs	r3, #1
 800f13a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f13c:	f001 fa0e 	bl	801055c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f140:	f000 fc2c 	bl	800f99c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f144:	f001 f9da 	bl	80104fc <vPortEnterCritical>
 800f148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f14a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f14e:	b25b      	sxtb	r3, r3
 800f150:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f154:	d103      	bne.n	800f15e <xQueueReceive+0x122>
 800f156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f158:	2200      	movs	r2, #0
 800f15a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f160:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f164:	b25b      	sxtb	r3, r3
 800f166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f16a:	d103      	bne.n	800f174 <xQueueReceive+0x138>
 800f16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f16e:	2200      	movs	r2, #0
 800f170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f174:	f001 f9f2 	bl	801055c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f178:	1d3a      	adds	r2, r7, #4
 800f17a:	f107 0310 	add.w	r3, r7, #16
 800f17e:	4611      	mov	r1, r2
 800f180:	4618      	mov	r0, r3
 800f182:	f000 fe71 	bl	800fe68 <xTaskCheckForTimeOut>
 800f186:	4603      	mov	r3, r0
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d123      	bne.n	800f1d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f18c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f18e:	f000 f997 	bl	800f4c0 <prvIsQueueEmpty>
 800f192:	4603      	mov	r3, r0
 800f194:	2b00      	cmp	r3, #0
 800f196:	d017      	beq.n	800f1c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f19a:	3324      	adds	r3, #36	; 0x24
 800f19c:	687a      	ldr	r2, [r7, #4]
 800f19e:	4611      	mov	r1, r2
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f000 fdc5 	bl	800fd30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f1a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1a8:	f000 f938 	bl	800f41c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f1ac:	f000 fc04 	bl	800f9b8 <xTaskResumeAll>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d189      	bne.n	800f0ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f1b6:	4b10      	ldr	r3, [pc, #64]	; (800f1f8 <xQueueReceive+0x1bc>)
 800f1b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1bc:	601a      	str	r2, [r3, #0]
 800f1be:	f3bf 8f4f 	dsb	sy
 800f1c2:	f3bf 8f6f 	isb	sy
 800f1c6:	e780      	b.n	800f0ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f1c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1ca:	f000 f927 	bl	800f41c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f1ce:	f000 fbf3 	bl	800f9b8 <xTaskResumeAll>
 800f1d2:	e77a      	b.n	800f0ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f1d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1d6:	f000 f921 	bl	800f41c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f1da:	f000 fbed 	bl	800f9b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f1de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1e0:	f000 f96e 	bl	800f4c0 <prvIsQueueEmpty>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	f43f af6f 	beq.w	800f0ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f1ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3730      	adds	r7, #48	; 0x30
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}
 800f1f6:	bf00      	nop
 800f1f8:	e000ed04 	.word	0xe000ed04

0800f1fc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b08e      	sub	sp, #56	; 0x38
 800f200:	af00      	add	r7, sp, #0
 800f202:	60f8      	str	r0, [r7, #12]
 800f204:	60b9      	str	r1, [r7, #8]
 800f206:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d10a      	bne.n	800f228 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800f212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f216:	f383 8811 	msr	BASEPRI, r3
 800f21a:	f3bf 8f6f 	isb	sy
 800f21e:	f3bf 8f4f 	dsb	sy
 800f222:	623b      	str	r3, [r7, #32]
}
 800f224:	bf00      	nop
 800f226:	e7fe      	b.n	800f226 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d103      	bne.n	800f236 <xQueueReceiveFromISR+0x3a>
 800f22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f232:	2b00      	cmp	r3, #0
 800f234:	d101      	bne.n	800f23a <xQueueReceiveFromISR+0x3e>
 800f236:	2301      	movs	r3, #1
 800f238:	e000      	b.n	800f23c <xQueueReceiveFromISR+0x40>
 800f23a:	2300      	movs	r3, #0
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d10a      	bne.n	800f256 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800f240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f244:	f383 8811 	msr	BASEPRI, r3
 800f248:	f3bf 8f6f 	isb	sy
 800f24c:	f3bf 8f4f 	dsb	sy
 800f250:	61fb      	str	r3, [r7, #28]
}
 800f252:	bf00      	nop
 800f254:	e7fe      	b.n	800f254 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f256:	f001 fa13 	bl	8010680 <vPortValidateInterruptPriority>
	__asm volatile
 800f25a:	f3ef 8211 	mrs	r2, BASEPRI
 800f25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f262:	f383 8811 	msr	BASEPRI, r3
 800f266:	f3bf 8f6f 	isb	sy
 800f26a:	f3bf 8f4f 	dsb	sy
 800f26e:	61ba      	str	r2, [r7, #24]
 800f270:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f272:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f274:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f27a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d02f      	beq.n	800f2e2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f284:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f28c:	68b9      	ldr	r1, [r7, #8]
 800f28e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f290:	f000 f89e 	bl	800f3d0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f296:	1e5a      	subs	r2, r3, #1
 800f298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f29a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f29c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f2a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2a4:	d112      	bne.n	800f2cc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a8:	691b      	ldr	r3, [r3, #16]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d016      	beq.n	800f2dc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2b0:	3310      	adds	r3, #16
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f000 fd60 	bl	800fd78 <xTaskRemoveFromEventList>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d00e      	beq.n	800f2dc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d00b      	beq.n	800f2dc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2201      	movs	r2, #1
 800f2c8:	601a      	str	r2, [r3, #0]
 800f2ca:	e007      	b.n	800f2dc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f2cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2d0:	3301      	adds	r3, #1
 800f2d2:	b2db      	uxtb	r3, r3
 800f2d4:	b25a      	sxtb	r2, r3
 800f2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f2dc:	2301      	movs	r3, #1
 800f2de:	637b      	str	r3, [r7, #52]	; 0x34
 800f2e0:	e001      	b.n	800f2e6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	637b      	str	r3, [r7, #52]	; 0x34
 800f2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f2ea:	693b      	ldr	r3, [r7, #16]
 800f2ec:	f383 8811 	msr	BASEPRI, r3
}
 800f2f0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f2f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	3738      	adds	r7, #56	; 0x38
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd80      	pop	{r7, pc}

0800f2fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b086      	sub	sp, #24
 800f300:	af00      	add	r7, sp, #0
 800f302:	60f8      	str	r0, [r7, #12]
 800f304:	60b9      	str	r1, [r7, #8]
 800f306:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f308:	2300      	movs	r3, #0
 800f30a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f310:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f316:	2b00      	cmp	r3, #0
 800f318:	d10d      	bne.n	800f336 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d14d      	bne.n	800f3be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	685b      	ldr	r3, [r3, #4]
 800f326:	4618      	mov	r0, r3
 800f328:	f000 ff08 	bl	801013c <xTaskPriorityDisinherit>
 800f32c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	2200      	movs	r2, #0
 800f332:	605a      	str	r2, [r3, #4]
 800f334:	e043      	b.n	800f3be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d119      	bne.n	800f370 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	6898      	ldr	r0, [r3, #8]
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f344:	461a      	mov	r2, r3
 800f346:	68b9      	ldr	r1, [r7, #8]
 800f348:	f001 feec 	bl	8011124 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	689a      	ldr	r2, [r3, #8]
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f354:	441a      	add	r2, r3
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	689a      	ldr	r2, [r3, #8]
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	685b      	ldr	r3, [r3, #4]
 800f362:	429a      	cmp	r2, r3
 800f364:	d32b      	bcc.n	800f3be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	681a      	ldr	r2, [r3, #0]
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	609a      	str	r2, [r3, #8]
 800f36e:	e026      	b.n	800f3be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	68d8      	ldr	r0, [r3, #12]
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f378:	461a      	mov	r2, r3
 800f37a:	68b9      	ldr	r1, [r7, #8]
 800f37c:	f001 fed2 	bl	8011124 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	68da      	ldr	r2, [r3, #12]
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f388:	425b      	negs	r3, r3
 800f38a:	441a      	add	r2, r3
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	68da      	ldr	r2, [r3, #12]
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	429a      	cmp	r2, r3
 800f39a:	d207      	bcs.n	800f3ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	685a      	ldr	r2, [r3, #4]
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3a4:	425b      	negs	r3, r3
 800f3a6:	441a      	add	r2, r3
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2b02      	cmp	r3, #2
 800f3b0:	d105      	bne.n	800f3be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f3b2:	693b      	ldr	r3, [r7, #16]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d002      	beq.n	800f3be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f3b8:	693b      	ldr	r3, [r7, #16]
 800f3ba:	3b01      	subs	r3, #1
 800f3bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f3be:	693b      	ldr	r3, [r7, #16]
 800f3c0:	1c5a      	adds	r2, r3, #1
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f3c6:	697b      	ldr	r3, [r7, #20]
}
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	3718      	adds	r7, #24
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}

0800f3d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b082      	sub	sp, #8
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
 800f3d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d018      	beq.n	800f414 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	68da      	ldr	r2, [r3, #12]
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3ea:	441a      	add	r2, r3
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	68da      	ldr	r2, [r3, #12]
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	685b      	ldr	r3, [r3, #4]
 800f3f8:	429a      	cmp	r2, r3
 800f3fa:	d303      	bcc.n	800f404 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681a      	ldr	r2, [r3, #0]
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	68d9      	ldr	r1, [r3, #12]
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f40c:	461a      	mov	r2, r3
 800f40e:	6838      	ldr	r0, [r7, #0]
 800f410:	f001 fe88 	bl	8011124 <memcpy>
	}
}
 800f414:	bf00      	nop
 800f416:	3708      	adds	r7, #8
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}

0800f41c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b084      	sub	sp, #16
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f424:	f001 f86a 	bl	80104fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f42e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f430:	e011      	b.n	800f456 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f436:	2b00      	cmp	r3, #0
 800f438:	d012      	beq.n	800f460 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	3324      	adds	r3, #36	; 0x24
 800f43e:	4618      	mov	r0, r3
 800f440:	f000 fc9a 	bl	800fd78 <xTaskRemoveFromEventList>
 800f444:	4603      	mov	r3, r0
 800f446:	2b00      	cmp	r3, #0
 800f448:	d001      	beq.n	800f44e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f44a:	f000 fd6f 	bl	800ff2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f44e:	7bfb      	ldrb	r3, [r7, #15]
 800f450:	3b01      	subs	r3, #1
 800f452:	b2db      	uxtb	r3, r3
 800f454:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	dce9      	bgt.n	800f432 <prvUnlockQueue+0x16>
 800f45e:	e000      	b.n	800f462 <prvUnlockQueue+0x46>
					break;
 800f460:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	22ff      	movs	r2, #255	; 0xff
 800f466:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f46a:	f001 f877 	bl	801055c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f46e:	f001 f845 	bl	80104fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f478:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f47a:	e011      	b.n	800f4a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	691b      	ldr	r3, [r3, #16]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d012      	beq.n	800f4aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	3310      	adds	r3, #16
 800f488:	4618      	mov	r0, r3
 800f48a:	f000 fc75 	bl	800fd78 <xTaskRemoveFromEventList>
 800f48e:	4603      	mov	r3, r0
 800f490:	2b00      	cmp	r3, #0
 800f492:	d001      	beq.n	800f498 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f494:	f000 fd4a 	bl	800ff2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f498:	7bbb      	ldrb	r3, [r7, #14]
 800f49a:	3b01      	subs	r3, #1
 800f49c:	b2db      	uxtb	r3, r3
 800f49e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f4a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	dce9      	bgt.n	800f47c <prvUnlockQueue+0x60>
 800f4a8:	e000      	b.n	800f4ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f4aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	22ff      	movs	r2, #255	; 0xff
 800f4b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f4b4:	f001 f852 	bl	801055c <vPortExitCritical>
}
 800f4b8:	bf00      	nop
 800f4ba:	3710      	adds	r7, #16
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	bd80      	pop	{r7, pc}

0800f4c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b084      	sub	sp, #16
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f4c8:	f001 f818 	bl	80104fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d102      	bne.n	800f4da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f4d4:	2301      	movs	r3, #1
 800f4d6:	60fb      	str	r3, [r7, #12]
 800f4d8:	e001      	b.n	800f4de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f4da:	2300      	movs	r3, #0
 800f4dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f4de:	f001 f83d 	bl	801055c <vPortExitCritical>

	return xReturn;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
}
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	3710      	adds	r7, #16
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}

0800f4ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b084      	sub	sp, #16
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f4f4:	f001 f802 	bl	80104fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f500:	429a      	cmp	r2, r3
 800f502:	d102      	bne.n	800f50a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f504:	2301      	movs	r3, #1
 800f506:	60fb      	str	r3, [r7, #12]
 800f508:	e001      	b.n	800f50e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f50a:	2300      	movs	r3, #0
 800f50c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f50e:	f001 f825 	bl	801055c <vPortExitCritical>

	return xReturn;
 800f512:	68fb      	ldr	r3, [r7, #12]
}
 800f514:	4618      	mov	r0, r3
 800f516:	3710      	adds	r7, #16
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}

0800f51c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b08e      	sub	sp, #56	; 0x38
 800f520:	af04      	add	r7, sp, #16
 800f522:	60f8      	str	r0, [r7, #12]
 800f524:	60b9      	str	r1, [r7, #8]
 800f526:	607a      	str	r2, [r7, #4]
 800f528:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f52a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d10a      	bne.n	800f546 <xTaskCreateStatic+0x2a>
	__asm volatile
 800f530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f534:	f383 8811 	msr	BASEPRI, r3
 800f538:	f3bf 8f6f 	isb	sy
 800f53c:	f3bf 8f4f 	dsb	sy
 800f540:	623b      	str	r3, [r7, #32]
}
 800f542:	bf00      	nop
 800f544:	e7fe      	b.n	800f544 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d10a      	bne.n	800f562 <xTaskCreateStatic+0x46>
	__asm volatile
 800f54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f550:	f383 8811 	msr	BASEPRI, r3
 800f554:	f3bf 8f6f 	isb	sy
 800f558:	f3bf 8f4f 	dsb	sy
 800f55c:	61fb      	str	r3, [r7, #28]
}
 800f55e:	bf00      	nop
 800f560:	e7fe      	b.n	800f560 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f562:	23b4      	movs	r3, #180	; 0xb4
 800f564:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f566:	693b      	ldr	r3, [r7, #16]
 800f568:	2bb4      	cmp	r3, #180	; 0xb4
 800f56a:	d00a      	beq.n	800f582 <xTaskCreateStatic+0x66>
	__asm volatile
 800f56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f570:	f383 8811 	msr	BASEPRI, r3
 800f574:	f3bf 8f6f 	isb	sy
 800f578:	f3bf 8f4f 	dsb	sy
 800f57c:	61bb      	str	r3, [r7, #24]
}
 800f57e:	bf00      	nop
 800f580:	e7fe      	b.n	800f580 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f584:	2b00      	cmp	r3, #0
 800f586:	d01e      	beq.n	800f5c6 <xTaskCreateStatic+0xaa>
 800f588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d01b      	beq.n	800f5c6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f590:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f594:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f596:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f59a:	2202      	movs	r2, #2
 800f59c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	9303      	str	r3, [sp, #12]
 800f5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a6:	9302      	str	r3, [sp, #8]
 800f5a8:	f107 0314 	add.w	r3, r7, #20
 800f5ac:	9301      	str	r3, [sp, #4]
 800f5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b0:	9300      	str	r3, [sp, #0]
 800f5b2:	683b      	ldr	r3, [r7, #0]
 800f5b4:	687a      	ldr	r2, [r7, #4]
 800f5b6:	68b9      	ldr	r1, [r7, #8]
 800f5b8:	68f8      	ldr	r0, [r7, #12]
 800f5ba:	f000 f851 	bl	800f660 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f5be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f5c0:	f000 f8e4 	bl	800f78c <prvAddNewTaskToReadyList>
 800f5c4:	e001      	b.n	800f5ca <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f5ca:	697b      	ldr	r3, [r7, #20]
	}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	3728      	adds	r7, #40	; 0x28
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}

0800f5d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b08c      	sub	sp, #48	; 0x30
 800f5d8:	af04      	add	r7, sp, #16
 800f5da:	60f8      	str	r0, [r7, #12]
 800f5dc:	60b9      	str	r1, [r7, #8]
 800f5de:	603b      	str	r3, [r7, #0]
 800f5e0:	4613      	mov	r3, r2
 800f5e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f5e4:	88fb      	ldrh	r3, [r7, #6]
 800f5e6:	009b      	lsls	r3, r3, #2
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f001 f887 	bl	80106fc <pvPortMalloc>
 800f5ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f5f0:	697b      	ldr	r3, [r7, #20]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d00e      	beq.n	800f614 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800f5f6:	20b4      	movs	r0, #180	; 0xb4
 800f5f8:	f001 f880 	bl	80106fc <pvPortMalloc>
 800f5fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f5fe:	69fb      	ldr	r3, [r7, #28]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d003      	beq.n	800f60c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f604:	69fb      	ldr	r3, [r7, #28]
 800f606:	697a      	ldr	r2, [r7, #20]
 800f608:	631a      	str	r2, [r3, #48]	; 0x30
 800f60a:	e005      	b.n	800f618 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f60c:	6978      	ldr	r0, [r7, #20]
 800f60e:	f001 f939 	bl	8010884 <vPortFree>
 800f612:	e001      	b.n	800f618 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f614:	2300      	movs	r3, #0
 800f616:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f618:	69fb      	ldr	r3, [r7, #28]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d017      	beq.n	800f64e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f61e:	69fb      	ldr	r3, [r7, #28]
 800f620:	2200      	movs	r2, #0
 800f622:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f626:	88fa      	ldrh	r2, [r7, #6]
 800f628:	2300      	movs	r3, #0
 800f62a:	9303      	str	r3, [sp, #12]
 800f62c:	69fb      	ldr	r3, [r7, #28]
 800f62e:	9302      	str	r3, [sp, #8]
 800f630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f632:	9301      	str	r3, [sp, #4]
 800f634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f636:	9300      	str	r3, [sp, #0]
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	68b9      	ldr	r1, [r7, #8]
 800f63c:	68f8      	ldr	r0, [r7, #12]
 800f63e:	f000 f80f 	bl	800f660 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f642:	69f8      	ldr	r0, [r7, #28]
 800f644:	f000 f8a2 	bl	800f78c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f648:	2301      	movs	r3, #1
 800f64a:	61bb      	str	r3, [r7, #24]
 800f64c:	e002      	b.n	800f654 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f64e:	f04f 33ff 	mov.w	r3, #4294967295
 800f652:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f654:	69bb      	ldr	r3, [r7, #24]
	}
 800f656:	4618      	mov	r0, r3
 800f658:	3720      	adds	r7, #32
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}
	...

0800f660 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b088      	sub	sp, #32
 800f664:	af00      	add	r7, sp, #0
 800f666:	60f8      	str	r0, [r7, #12]
 800f668:	60b9      	str	r1, [r7, #8]
 800f66a:	607a      	str	r2, [r7, #4]
 800f66c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800f66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f678:	3b01      	subs	r3, #1
 800f67a:	009b      	lsls	r3, r3, #2
 800f67c:	4413      	add	r3, r2
 800f67e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800f680:	69bb      	ldr	r3, [r7, #24]
 800f682:	f023 0307 	bic.w	r3, r3, #7
 800f686:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f688:	69bb      	ldr	r3, [r7, #24]
 800f68a:	f003 0307 	and.w	r3, r3, #7
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d00a      	beq.n	800f6a8 <prvInitialiseNewTask+0x48>
	__asm volatile
 800f692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f696:	f383 8811 	msr	BASEPRI, r3
 800f69a:	f3bf 8f6f 	isb	sy
 800f69e:	f3bf 8f4f 	dsb	sy
 800f6a2:	617b      	str	r3, [r7, #20]
}
 800f6a4:	bf00      	nop
 800f6a6:	e7fe      	b.n	800f6a6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	61fb      	str	r3, [r7, #28]
 800f6ac:	e012      	b.n	800f6d4 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f6ae:	68ba      	ldr	r2, [r7, #8]
 800f6b0:	69fb      	ldr	r3, [r7, #28]
 800f6b2:	4413      	add	r3, r2
 800f6b4:	7819      	ldrb	r1, [r3, #0]
 800f6b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6b8:	69fb      	ldr	r3, [r7, #28]
 800f6ba:	4413      	add	r3, r2
 800f6bc:	3334      	adds	r3, #52	; 0x34
 800f6be:	460a      	mov	r2, r1
 800f6c0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800f6c2:	68ba      	ldr	r2, [r7, #8]
 800f6c4:	69fb      	ldr	r3, [r7, #28]
 800f6c6:	4413      	add	r3, r2
 800f6c8:	781b      	ldrb	r3, [r3, #0]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d006      	beq.n	800f6dc <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f6ce:	69fb      	ldr	r3, [r7, #28]
 800f6d0:	3301      	adds	r3, #1
 800f6d2:	61fb      	str	r3, [r7, #28]
 800f6d4:	69fb      	ldr	r3, [r7, #28]
 800f6d6:	2b0f      	cmp	r3, #15
 800f6d8:	d9e9      	bls.n	800f6ae <prvInitialiseNewTask+0x4e>
 800f6da:	e000      	b.n	800f6de <prvInitialiseNewTask+0x7e>
		{
			break;
 800f6dc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6e8:	2b06      	cmp	r3, #6
 800f6ea:	d901      	bls.n	800f6f0 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f6ec:	2306      	movs	r3, #6
 800f6ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6fa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6fe:	2200      	movs	r2, #0
 800f700:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f704:	3304      	adds	r3, #4
 800f706:	4618      	mov	r0, r3
 800f708:	f7ff f935 	bl	800e976 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f70e:	3318      	adds	r3, #24
 800f710:	4618      	mov	r0, r3
 800f712:	f7ff f930 	bl	800e976 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f71a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f71e:	f1c3 0207 	rsb	r2, r3, #7
 800f722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f724:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f72a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f72e:	2200      	movs	r2, #0
 800f730:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f736:	2200      	movs	r2, #0
 800f738:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f73e:	334c      	adds	r3, #76	; 0x4c
 800f740:	2260      	movs	r2, #96	; 0x60
 800f742:	2100      	movs	r1, #0
 800f744:	4618      	mov	r0, r3
 800f746:	f001 fcfb 	bl	8011140 <memset>
 800f74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f74c:	4a0c      	ldr	r2, [pc, #48]	; (800f780 <prvInitialiseNewTask+0x120>)
 800f74e:	651a      	str	r2, [r3, #80]	; 0x50
 800f750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f752:	4a0c      	ldr	r2, [pc, #48]	; (800f784 <prvInitialiseNewTask+0x124>)
 800f754:	655a      	str	r2, [r3, #84]	; 0x54
 800f756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f758:	4a0b      	ldr	r2, [pc, #44]	; (800f788 <prvInitialiseNewTask+0x128>)
 800f75a:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f75c:	683a      	ldr	r2, [r7, #0]
 800f75e:	68f9      	ldr	r1, [r7, #12]
 800f760:	69b8      	ldr	r0, [r7, #24]
 800f762:	f000 fdd7 	bl	8010314 <pxPortInitialiseStack>
 800f766:	4602      	mov	r2, r0
 800f768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f76a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800f76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d002      	beq.n	800f778 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f776:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f778:	bf00      	nop
 800f77a:	3720      	adds	r7, #32
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}
 800f780:	0801223c 	.word	0x0801223c
 800f784:	0801225c 	.word	0x0801225c
 800f788:	0801221c 	.word	0x0801221c

0800f78c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b082      	sub	sp, #8
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f794:	f000 feb2 	bl	80104fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f798:	4b2a      	ldr	r3, [pc, #168]	; (800f844 <prvAddNewTaskToReadyList+0xb8>)
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	3301      	adds	r3, #1
 800f79e:	4a29      	ldr	r2, [pc, #164]	; (800f844 <prvAddNewTaskToReadyList+0xb8>)
 800f7a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f7a2:	4b29      	ldr	r3, [pc, #164]	; (800f848 <prvAddNewTaskToReadyList+0xbc>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d109      	bne.n	800f7be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f7aa:	4a27      	ldr	r2, [pc, #156]	; (800f848 <prvAddNewTaskToReadyList+0xbc>)
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f7b0:	4b24      	ldr	r3, [pc, #144]	; (800f844 <prvAddNewTaskToReadyList+0xb8>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	d110      	bne.n	800f7da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f7b8:	f000 fbdc 	bl	800ff74 <prvInitialiseTaskLists>
 800f7bc:	e00d      	b.n	800f7da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f7be:	4b23      	ldr	r3, [pc, #140]	; (800f84c <prvAddNewTaskToReadyList+0xc0>)
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d109      	bne.n	800f7da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f7c6:	4b20      	ldr	r3, [pc, #128]	; (800f848 <prvAddNewTaskToReadyList+0xbc>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	d802      	bhi.n	800f7da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f7d4:	4a1c      	ldr	r2, [pc, #112]	; (800f848 <prvAddNewTaskToReadyList+0xbc>)
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f7da:	4b1d      	ldr	r3, [pc, #116]	; (800f850 <prvAddNewTaskToReadyList+0xc4>)
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	3301      	adds	r3, #1
 800f7e0:	4a1b      	ldr	r2, [pc, #108]	; (800f850 <prvAddNewTaskToReadyList+0xc4>)
 800f7e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7e8:	2201      	movs	r2, #1
 800f7ea:	409a      	lsls	r2, r3
 800f7ec:	4b19      	ldr	r3, [pc, #100]	; (800f854 <prvAddNewTaskToReadyList+0xc8>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	4313      	orrs	r3, r2
 800f7f2:	4a18      	ldr	r2, [pc, #96]	; (800f854 <prvAddNewTaskToReadyList+0xc8>)
 800f7f4:	6013      	str	r3, [r2, #0]
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7fa:	4613      	mov	r3, r2
 800f7fc:	009b      	lsls	r3, r3, #2
 800f7fe:	4413      	add	r3, r2
 800f800:	009b      	lsls	r3, r3, #2
 800f802:	4a15      	ldr	r2, [pc, #84]	; (800f858 <prvAddNewTaskToReadyList+0xcc>)
 800f804:	441a      	add	r2, r3
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	3304      	adds	r3, #4
 800f80a:	4619      	mov	r1, r3
 800f80c:	4610      	mov	r0, r2
 800f80e:	f7ff f8be 	bl	800e98e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f812:	f000 fea3 	bl	801055c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f816:	4b0d      	ldr	r3, [pc, #52]	; (800f84c <prvAddNewTaskToReadyList+0xc0>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d00e      	beq.n	800f83c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f81e:	4b0a      	ldr	r3, [pc, #40]	; (800f848 <prvAddNewTaskToReadyList+0xbc>)
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f828:	429a      	cmp	r2, r3
 800f82a:	d207      	bcs.n	800f83c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f82c:	4b0b      	ldr	r3, [pc, #44]	; (800f85c <prvAddNewTaskToReadyList+0xd0>)
 800f82e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f832:	601a      	str	r2, [r3, #0]
 800f834:	f3bf 8f4f 	dsb	sy
 800f838:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f83c:	bf00      	nop
 800f83e:	3708      	adds	r7, #8
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}
 800f844:	200012bc 	.word	0x200012bc
 800f848:	200011bc 	.word	0x200011bc
 800f84c:	200012c8 	.word	0x200012c8
 800f850:	200012d8 	.word	0x200012d8
 800f854:	200012c4 	.word	0x200012c4
 800f858:	200011c0 	.word	0x200011c0
 800f85c:	e000ed04 	.word	0xe000ed04

0800f860 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f860:	b580      	push	{r7, lr}
 800f862:	b084      	sub	sp, #16
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f868:	2300      	movs	r3, #0
 800f86a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d017      	beq.n	800f8a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f872:	4b13      	ldr	r3, [pc, #76]	; (800f8c0 <vTaskDelay+0x60>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d00a      	beq.n	800f890 <vTaskDelay+0x30>
	__asm volatile
 800f87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f87e:	f383 8811 	msr	BASEPRI, r3
 800f882:	f3bf 8f6f 	isb	sy
 800f886:	f3bf 8f4f 	dsb	sy
 800f88a:	60bb      	str	r3, [r7, #8]
}
 800f88c:	bf00      	nop
 800f88e:	e7fe      	b.n	800f88e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f890:	f000 f884 	bl	800f99c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f894:	2100      	movs	r1, #0
 800f896:	6878      	ldr	r0, [r7, #4]
 800f898:	f000 fcd6 	bl	8010248 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f89c:	f000 f88c 	bl	800f9b8 <xTaskResumeAll>
 800f8a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d107      	bne.n	800f8b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f8a8:	4b06      	ldr	r3, [pc, #24]	; (800f8c4 <vTaskDelay+0x64>)
 800f8aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8ae:	601a      	str	r2, [r3, #0]
 800f8b0:	f3bf 8f4f 	dsb	sy
 800f8b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f8b8:	bf00      	nop
 800f8ba:	3710      	adds	r7, #16
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}
 800f8c0:	200012e4 	.word	0x200012e4
 800f8c4:	e000ed04 	.word	0xe000ed04

0800f8c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b08a      	sub	sp, #40	; 0x28
 800f8cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f8d6:	463a      	mov	r2, r7
 800f8d8:	1d39      	adds	r1, r7, #4
 800f8da:	f107 0308 	add.w	r3, r7, #8
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f7f0 fe32 	bl	8000548 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f8e4:	6839      	ldr	r1, [r7, #0]
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	68ba      	ldr	r2, [r7, #8]
 800f8ea:	9202      	str	r2, [sp, #8]
 800f8ec:	9301      	str	r3, [sp, #4]
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	9300      	str	r3, [sp, #0]
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	460a      	mov	r2, r1
 800f8f6:	4921      	ldr	r1, [pc, #132]	; (800f97c <vTaskStartScheduler+0xb4>)
 800f8f8:	4821      	ldr	r0, [pc, #132]	; (800f980 <vTaskStartScheduler+0xb8>)
 800f8fa:	f7ff fe0f 	bl	800f51c <xTaskCreateStatic>
 800f8fe:	4603      	mov	r3, r0
 800f900:	4a20      	ldr	r2, [pc, #128]	; (800f984 <vTaskStartScheduler+0xbc>)
 800f902:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f904:	4b1f      	ldr	r3, [pc, #124]	; (800f984 <vTaskStartScheduler+0xbc>)
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d002      	beq.n	800f912 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f90c:	2301      	movs	r3, #1
 800f90e:	617b      	str	r3, [r7, #20]
 800f910:	e001      	b.n	800f916 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f912:	2300      	movs	r3, #0
 800f914:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	2b01      	cmp	r3, #1
 800f91a:	d11b      	bne.n	800f954 <vTaskStartScheduler+0x8c>
	__asm volatile
 800f91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f920:	f383 8811 	msr	BASEPRI, r3
 800f924:	f3bf 8f6f 	isb	sy
 800f928:	f3bf 8f4f 	dsb	sy
 800f92c:	613b      	str	r3, [r7, #16]
}
 800f92e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f930:	4b15      	ldr	r3, [pc, #84]	; (800f988 <vTaskStartScheduler+0xc0>)
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	334c      	adds	r3, #76	; 0x4c
 800f936:	4a15      	ldr	r2, [pc, #84]	; (800f98c <vTaskStartScheduler+0xc4>)
 800f938:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f93a:	4b15      	ldr	r3, [pc, #84]	; (800f990 <vTaskStartScheduler+0xc8>)
 800f93c:	f04f 32ff 	mov.w	r2, #4294967295
 800f940:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f942:	4b14      	ldr	r3, [pc, #80]	; (800f994 <vTaskStartScheduler+0xcc>)
 800f944:	2201      	movs	r2, #1
 800f946:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800f948:	4b13      	ldr	r3, [pc, #76]	; (800f998 <vTaskStartScheduler+0xd0>)
 800f94a:	2200      	movs	r2, #0
 800f94c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f94e:	f000 fd63 	bl	8010418 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f952:	e00e      	b.n	800f972 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f954:	697b      	ldr	r3, [r7, #20]
 800f956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f95a:	d10a      	bne.n	800f972 <vTaskStartScheduler+0xaa>
	__asm volatile
 800f95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f960:	f383 8811 	msr	BASEPRI, r3
 800f964:	f3bf 8f6f 	isb	sy
 800f968:	f3bf 8f4f 	dsb	sy
 800f96c:	60fb      	str	r3, [r7, #12]
}
 800f96e:	bf00      	nop
 800f970:	e7fe      	b.n	800f970 <vTaskStartScheduler+0xa8>
}
 800f972:	bf00      	nop
 800f974:	3718      	adds	r7, #24
 800f976:	46bd      	mov	sp, r7
 800f978:	bd80      	pop	{r7, pc}
 800f97a:	bf00      	nop
 800f97c:	08011dbc 	.word	0x08011dbc
 800f980:	0800ff45 	.word	0x0800ff45
 800f984:	200012e0 	.word	0x200012e0
 800f988:	200011bc 	.word	0x200011bc
 800f98c:	20000088 	.word	0x20000088
 800f990:	200012dc 	.word	0x200012dc
 800f994:	200012c8 	.word	0x200012c8
 800f998:	200012c0 	.word	0x200012c0

0800f99c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f99c:	b480      	push	{r7}
 800f99e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f9a0:	4b04      	ldr	r3, [pc, #16]	; (800f9b4 <vTaskSuspendAll+0x18>)
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	3301      	adds	r3, #1
 800f9a6:	4a03      	ldr	r2, [pc, #12]	; (800f9b4 <vTaskSuspendAll+0x18>)
 800f9a8:	6013      	str	r3, [r2, #0]
}
 800f9aa:	bf00      	nop
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bc80      	pop	{r7}
 800f9b0:	4770      	bx	lr
 800f9b2:	bf00      	nop
 800f9b4:	200012e4 	.word	0x200012e4

0800f9b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b084      	sub	sp, #16
 800f9bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f9c6:	4b41      	ldr	r3, [pc, #260]	; (800facc <xTaskResumeAll+0x114>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d10a      	bne.n	800f9e4 <xTaskResumeAll+0x2c>
	__asm volatile
 800f9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9d2:	f383 8811 	msr	BASEPRI, r3
 800f9d6:	f3bf 8f6f 	isb	sy
 800f9da:	f3bf 8f4f 	dsb	sy
 800f9de:	603b      	str	r3, [r7, #0]
}
 800f9e0:	bf00      	nop
 800f9e2:	e7fe      	b.n	800f9e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f9e4:	f000 fd8a 	bl	80104fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f9e8:	4b38      	ldr	r3, [pc, #224]	; (800facc <xTaskResumeAll+0x114>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	3b01      	subs	r3, #1
 800f9ee:	4a37      	ldr	r2, [pc, #220]	; (800facc <xTaskResumeAll+0x114>)
 800f9f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f9f2:	4b36      	ldr	r3, [pc, #216]	; (800facc <xTaskResumeAll+0x114>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d161      	bne.n	800fabe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f9fa:	4b35      	ldr	r3, [pc, #212]	; (800fad0 <xTaskResumeAll+0x118>)
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d05d      	beq.n	800fabe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fa02:	e02e      	b.n	800fa62 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800fa04:	4b33      	ldr	r3, [pc, #204]	; (800fad4 <xTaskResumeAll+0x11c>)
 800fa06:	68db      	ldr	r3, [r3, #12]
 800fa08:	68db      	ldr	r3, [r3, #12]
 800fa0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	3318      	adds	r3, #24
 800fa10:	4618      	mov	r0, r3
 800fa12:	f7ff f817 	bl	800ea44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	3304      	adds	r3, #4
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f7ff f812 	bl	800ea44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa24:	2201      	movs	r2, #1
 800fa26:	409a      	lsls	r2, r3
 800fa28:	4b2b      	ldr	r3, [pc, #172]	; (800fad8 <xTaskResumeAll+0x120>)
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	4313      	orrs	r3, r2
 800fa2e:	4a2a      	ldr	r2, [pc, #168]	; (800fad8 <xTaskResumeAll+0x120>)
 800fa30:	6013      	str	r3, [r2, #0]
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa36:	4613      	mov	r3, r2
 800fa38:	009b      	lsls	r3, r3, #2
 800fa3a:	4413      	add	r3, r2
 800fa3c:	009b      	lsls	r3, r3, #2
 800fa3e:	4a27      	ldr	r2, [pc, #156]	; (800fadc <xTaskResumeAll+0x124>)
 800fa40:	441a      	add	r2, r3
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	3304      	adds	r3, #4
 800fa46:	4619      	mov	r1, r3
 800fa48:	4610      	mov	r0, r2
 800fa4a:	f7fe ffa0 	bl	800e98e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa52:	4b23      	ldr	r3, [pc, #140]	; (800fae0 <xTaskResumeAll+0x128>)
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa58:	429a      	cmp	r2, r3
 800fa5a:	d302      	bcc.n	800fa62 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800fa5c:	4b21      	ldr	r3, [pc, #132]	; (800fae4 <xTaskResumeAll+0x12c>)
 800fa5e:	2201      	movs	r2, #1
 800fa60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fa62:	4b1c      	ldr	r3, [pc, #112]	; (800fad4 <xTaskResumeAll+0x11c>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d1cc      	bne.n	800fa04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d001      	beq.n	800fa74 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fa70:	f000 fb22 	bl	80100b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800fa74:	4b1c      	ldr	r3, [pc, #112]	; (800fae8 <xTaskResumeAll+0x130>)
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d010      	beq.n	800faa2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fa80:	f000 f836 	bl	800faf0 <xTaskIncrementTick>
 800fa84:	4603      	mov	r3, r0
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d002      	beq.n	800fa90 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800fa8a:	4b16      	ldr	r3, [pc, #88]	; (800fae4 <xTaskResumeAll+0x12c>)
 800fa8c:	2201      	movs	r2, #1
 800fa8e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	3b01      	subs	r3, #1
 800fa94:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d1f1      	bne.n	800fa80 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800fa9c:	4b12      	ldr	r3, [pc, #72]	; (800fae8 <xTaskResumeAll+0x130>)
 800fa9e:	2200      	movs	r2, #0
 800faa0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800faa2:	4b10      	ldr	r3, [pc, #64]	; (800fae4 <xTaskResumeAll+0x12c>)
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d009      	beq.n	800fabe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800faaa:	2301      	movs	r3, #1
 800faac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800faae:	4b0f      	ldr	r3, [pc, #60]	; (800faec <xTaskResumeAll+0x134>)
 800fab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fab4:	601a      	str	r2, [r3, #0]
 800fab6:	f3bf 8f4f 	dsb	sy
 800faba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fabe:	f000 fd4d 	bl	801055c <vPortExitCritical>

	return xAlreadyYielded;
 800fac2:	68bb      	ldr	r3, [r7, #8]
}
 800fac4:	4618      	mov	r0, r3
 800fac6:	3710      	adds	r7, #16
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}
 800facc:	200012e4 	.word	0x200012e4
 800fad0:	200012bc 	.word	0x200012bc
 800fad4:	2000127c 	.word	0x2000127c
 800fad8:	200012c4 	.word	0x200012c4
 800fadc:	200011c0 	.word	0x200011c0
 800fae0:	200011bc 	.word	0x200011bc
 800fae4:	200012d0 	.word	0x200012d0
 800fae8:	200012cc 	.word	0x200012cc
 800faec:	e000ed04 	.word	0xe000ed04

0800faf0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b086      	sub	sp, #24
 800faf4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800faf6:	2300      	movs	r3, #0
 800faf8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fafa:	4b51      	ldr	r3, [pc, #324]	; (800fc40 <xTaskIncrementTick+0x150>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	f040 808d 	bne.w	800fc1e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fb04:	4b4f      	ldr	r3, [pc, #316]	; (800fc44 <xTaskIncrementTick+0x154>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	3301      	adds	r3, #1
 800fb0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fb0c:	4a4d      	ldr	r2, [pc, #308]	; (800fc44 <xTaskIncrementTick+0x154>)
 800fb0e:	693b      	ldr	r3, [r7, #16]
 800fb10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fb12:	693b      	ldr	r3, [r7, #16]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d120      	bne.n	800fb5a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fb18:	4b4b      	ldr	r3, [pc, #300]	; (800fc48 <xTaskIncrementTick+0x158>)
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d00a      	beq.n	800fb38 <xTaskIncrementTick+0x48>
	__asm volatile
 800fb22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb26:	f383 8811 	msr	BASEPRI, r3
 800fb2a:	f3bf 8f6f 	isb	sy
 800fb2e:	f3bf 8f4f 	dsb	sy
 800fb32:	603b      	str	r3, [r7, #0]
}
 800fb34:	bf00      	nop
 800fb36:	e7fe      	b.n	800fb36 <xTaskIncrementTick+0x46>
 800fb38:	4b43      	ldr	r3, [pc, #268]	; (800fc48 <xTaskIncrementTick+0x158>)
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	60fb      	str	r3, [r7, #12]
 800fb3e:	4b43      	ldr	r3, [pc, #268]	; (800fc4c <xTaskIncrementTick+0x15c>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	4a41      	ldr	r2, [pc, #260]	; (800fc48 <xTaskIncrementTick+0x158>)
 800fb44:	6013      	str	r3, [r2, #0]
 800fb46:	4a41      	ldr	r2, [pc, #260]	; (800fc4c <xTaskIncrementTick+0x15c>)
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	6013      	str	r3, [r2, #0]
 800fb4c:	4b40      	ldr	r3, [pc, #256]	; (800fc50 <xTaskIncrementTick+0x160>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	3301      	adds	r3, #1
 800fb52:	4a3f      	ldr	r2, [pc, #252]	; (800fc50 <xTaskIncrementTick+0x160>)
 800fb54:	6013      	str	r3, [r2, #0]
 800fb56:	f000 faaf 	bl	80100b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fb5a:	4b3e      	ldr	r3, [pc, #248]	; (800fc54 <xTaskIncrementTick+0x164>)
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	693a      	ldr	r2, [r7, #16]
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d34d      	bcc.n	800fc00 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fb64:	4b38      	ldr	r3, [pc, #224]	; (800fc48 <xTaskIncrementTick+0x158>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d101      	bne.n	800fb72 <xTaskIncrementTick+0x82>
 800fb6e:	2301      	movs	r3, #1
 800fb70:	e000      	b.n	800fb74 <xTaskIncrementTick+0x84>
 800fb72:	2300      	movs	r3, #0
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d004      	beq.n	800fb82 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb78:	4b36      	ldr	r3, [pc, #216]	; (800fc54 <xTaskIncrementTick+0x164>)
 800fb7a:	f04f 32ff 	mov.w	r2, #4294967295
 800fb7e:	601a      	str	r2, [r3, #0]
					break;
 800fb80:	e03e      	b.n	800fc00 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800fb82:	4b31      	ldr	r3, [pc, #196]	; (800fc48 <xTaskIncrementTick+0x158>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	68db      	ldr	r3, [r3, #12]
 800fb88:	68db      	ldr	r3, [r3, #12]
 800fb8a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fb8c:	68bb      	ldr	r3, [r7, #8]
 800fb8e:	685b      	ldr	r3, [r3, #4]
 800fb90:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fb92:	693a      	ldr	r2, [r7, #16]
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	429a      	cmp	r2, r3
 800fb98:	d203      	bcs.n	800fba2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fb9a:	4a2e      	ldr	r2, [pc, #184]	; (800fc54 <xTaskIncrementTick+0x164>)
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	6013      	str	r3, [r2, #0]
						break;
 800fba0:	e02e      	b.n	800fc00 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fba2:	68bb      	ldr	r3, [r7, #8]
 800fba4:	3304      	adds	r3, #4
 800fba6:	4618      	mov	r0, r3
 800fba8:	f7fe ff4c 	bl	800ea44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d004      	beq.n	800fbbe <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fbb4:	68bb      	ldr	r3, [r7, #8]
 800fbb6:	3318      	adds	r3, #24
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f7fe ff43 	bl	800ea44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fbbe:	68bb      	ldr	r3, [r7, #8]
 800fbc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbc2:	2201      	movs	r2, #1
 800fbc4:	409a      	lsls	r2, r3
 800fbc6:	4b24      	ldr	r3, [pc, #144]	; (800fc58 <xTaskIncrementTick+0x168>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	4313      	orrs	r3, r2
 800fbcc:	4a22      	ldr	r2, [pc, #136]	; (800fc58 <xTaskIncrementTick+0x168>)
 800fbce:	6013      	str	r3, [r2, #0]
 800fbd0:	68bb      	ldr	r3, [r7, #8]
 800fbd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbd4:	4613      	mov	r3, r2
 800fbd6:	009b      	lsls	r3, r3, #2
 800fbd8:	4413      	add	r3, r2
 800fbda:	009b      	lsls	r3, r3, #2
 800fbdc:	4a1f      	ldr	r2, [pc, #124]	; (800fc5c <xTaskIncrementTick+0x16c>)
 800fbde:	441a      	add	r2, r3
 800fbe0:	68bb      	ldr	r3, [r7, #8]
 800fbe2:	3304      	adds	r3, #4
 800fbe4:	4619      	mov	r1, r3
 800fbe6:	4610      	mov	r0, r2
 800fbe8:	f7fe fed1 	bl	800e98e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbf0:	4b1b      	ldr	r3, [pc, #108]	; (800fc60 <xTaskIncrementTick+0x170>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	d3b4      	bcc.n	800fb64 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fbfa:	2301      	movs	r3, #1
 800fbfc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fbfe:	e7b1      	b.n	800fb64 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fc00:	4b17      	ldr	r3, [pc, #92]	; (800fc60 <xTaskIncrementTick+0x170>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc06:	4915      	ldr	r1, [pc, #84]	; (800fc5c <xTaskIncrementTick+0x16c>)
 800fc08:	4613      	mov	r3, r2
 800fc0a:	009b      	lsls	r3, r3, #2
 800fc0c:	4413      	add	r3, r2
 800fc0e:	009b      	lsls	r3, r3, #2
 800fc10:	440b      	add	r3, r1
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	2b01      	cmp	r3, #1
 800fc16:	d907      	bls.n	800fc28 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800fc18:	2301      	movs	r3, #1
 800fc1a:	617b      	str	r3, [r7, #20]
 800fc1c:	e004      	b.n	800fc28 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800fc1e:	4b11      	ldr	r3, [pc, #68]	; (800fc64 <xTaskIncrementTick+0x174>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	3301      	adds	r3, #1
 800fc24:	4a0f      	ldr	r2, [pc, #60]	; (800fc64 <xTaskIncrementTick+0x174>)
 800fc26:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800fc28:	4b0f      	ldr	r3, [pc, #60]	; (800fc68 <xTaskIncrementTick+0x178>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d001      	beq.n	800fc34 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800fc30:	2301      	movs	r3, #1
 800fc32:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800fc34:	697b      	ldr	r3, [r7, #20]
}
 800fc36:	4618      	mov	r0, r3
 800fc38:	3718      	adds	r7, #24
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bd80      	pop	{r7, pc}
 800fc3e:	bf00      	nop
 800fc40:	200012e4 	.word	0x200012e4
 800fc44:	200012c0 	.word	0x200012c0
 800fc48:	20001274 	.word	0x20001274
 800fc4c:	20001278 	.word	0x20001278
 800fc50:	200012d4 	.word	0x200012d4
 800fc54:	200012dc 	.word	0x200012dc
 800fc58:	200012c4 	.word	0x200012c4
 800fc5c:	200011c0 	.word	0x200011c0
 800fc60:	200011bc 	.word	0x200011bc
 800fc64:	200012cc 	.word	0x200012cc
 800fc68:	200012d0 	.word	0x200012d0

0800fc6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fc6c:	b480      	push	{r7}
 800fc6e:	b087      	sub	sp, #28
 800fc70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fc72:	4b29      	ldr	r3, [pc, #164]	; (800fd18 <vTaskSwitchContext+0xac>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d003      	beq.n	800fc82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fc7a:	4b28      	ldr	r3, [pc, #160]	; (800fd1c <vTaskSwitchContext+0xb0>)
 800fc7c:	2201      	movs	r2, #1
 800fc7e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fc80:	e044      	b.n	800fd0c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800fc82:	4b26      	ldr	r3, [pc, #152]	; (800fd1c <vTaskSwitchContext+0xb0>)
 800fc84:	2200      	movs	r2, #0
 800fc86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800fc88:	4b25      	ldr	r3, [pc, #148]	; (800fd20 <vTaskSwitchContext+0xb4>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	fab3 f383 	clz	r3, r3
 800fc94:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fc96:	7afb      	ldrb	r3, [r7, #11]
 800fc98:	f1c3 031f 	rsb	r3, r3, #31
 800fc9c:	617b      	str	r3, [r7, #20]
 800fc9e:	4921      	ldr	r1, [pc, #132]	; (800fd24 <vTaskSwitchContext+0xb8>)
 800fca0:	697a      	ldr	r2, [r7, #20]
 800fca2:	4613      	mov	r3, r2
 800fca4:	009b      	lsls	r3, r3, #2
 800fca6:	4413      	add	r3, r2
 800fca8:	009b      	lsls	r3, r3, #2
 800fcaa:	440b      	add	r3, r1
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d10a      	bne.n	800fcc8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800fcb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcb6:	f383 8811 	msr	BASEPRI, r3
 800fcba:	f3bf 8f6f 	isb	sy
 800fcbe:	f3bf 8f4f 	dsb	sy
 800fcc2:	607b      	str	r3, [r7, #4]
}
 800fcc4:	bf00      	nop
 800fcc6:	e7fe      	b.n	800fcc6 <vTaskSwitchContext+0x5a>
 800fcc8:	697a      	ldr	r2, [r7, #20]
 800fcca:	4613      	mov	r3, r2
 800fccc:	009b      	lsls	r3, r3, #2
 800fcce:	4413      	add	r3, r2
 800fcd0:	009b      	lsls	r3, r3, #2
 800fcd2:	4a14      	ldr	r2, [pc, #80]	; (800fd24 <vTaskSwitchContext+0xb8>)
 800fcd4:	4413      	add	r3, r2
 800fcd6:	613b      	str	r3, [r7, #16]
 800fcd8:	693b      	ldr	r3, [r7, #16]
 800fcda:	685b      	ldr	r3, [r3, #4]
 800fcdc:	685a      	ldr	r2, [r3, #4]
 800fcde:	693b      	ldr	r3, [r7, #16]
 800fce0:	605a      	str	r2, [r3, #4]
 800fce2:	693b      	ldr	r3, [r7, #16]
 800fce4:	685a      	ldr	r2, [r3, #4]
 800fce6:	693b      	ldr	r3, [r7, #16]
 800fce8:	3308      	adds	r3, #8
 800fcea:	429a      	cmp	r2, r3
 800fcec:	d104      	bne.n	800fcf8 <vTaskSwitchContext+0x8c>
 800fcee:	693b      	ldr	r3, [r7, #16]
 800fcf0:	685b      	ldr	r3, [r3, #4]
 800fcf2:	685a      	ldr	r2, [r3, #4]
 800fcf4:	693b      	ldr	r3, [r7, #16]
 800fcf6:	605a      	str	r2, [r3, #4]
 800fcf8:	693b      	ldr	r3, [r7, #16]
 800fcfa:	685b      	ldr	r3, [r3, #4]
 800fcfc:	68db      	ldr	r3, [r3, #12]
 800fcfe:	4a0a      	ldr	r2, [pc, #40]	; (800fd28 <vTaskSwitchContext+0xbc>)
 800fd00:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fd02:	4b09      	ldr	r3, [pc, #36]	; (800fd28 <vTaskSwitchContext+0xbc>)
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	334c      	adds	r3, #76	; 0x4c
 800fd08:	4a08      	ldr	r2, [pc, #32]	; (800fd2c <vTaskSwitchContext+0xc0>)
 800fd0a:	6013      	str	r3, [r2, #0]
}
 800fd0c:	bf00      	nop
 800fd0e:	371c      	adds	r7, #28
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bc80      	pop	{r7}
 800fd14:	4770      	bx	lr
 800fd16:	bf00      	nop
 800fd18:	200012e4 	.word	0x200012e4
 800fd1c:	200012d0 	.word	0x200012d0
 800fd20:	200012c4 	.word	0x200012c4
 800fd24:	200011c0 	.word	0x200011c0
 800fd28:	200011bc 	.word	0x200011bc
 800fd2c:	20000088 	.word	0x20000088

0800fd30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b084      	sub	sp, #16
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
 800fd38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d10a      	bne.n	800fd56 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd44:	f383 8811 	msr	BASEPRI, r3
 800fd48:	f3bf 8f6f 	isb	sy
 800fd4c:	f3bf 8f4f 	dsb	sy
 800fd50:	60fb      	str	r3, [r7, #12]
}
 800fd52:	bf00      	nop
 800fd54:	e7fe      	b.n	800fd54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fd56:	4b07      	ldr	r3, [pc, #28]	; (800fd74 <vTaskPlaceOnEventList+0x44>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	3318      	adds	r3, #24
 800fd5c:	4619      	mov	r1, r3
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f7fe fe38 	bl	800e9d4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fd64:	2101      	movs	r1, #1
 800fd66:	6838      	ldr	r0, [r7, #0]
 800fd68:	f000 fa6e 	bl	8010248 <prvAddCurrentTaskToDelayedList>
}
 800fd6c:	bf00      	nop
 800fd6e:	3710      	adds	r7, #16
 800fd70:	46bd      	mov	sp, r7
 800fd72:	bd80      	pop	{r7, pc}
 800fd74:	200011bc 	.word	0x200011bc

0800fd78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b086      	sub	sp, #24
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	68db      	ldr	r3, [r3, #12]
 800fd84:	68db      	ldr	r3, [r3, #12]
 800fd86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fd88:	693b      	ldr	r3, [r7, #16]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d10a      	bne.n	800fda4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd92:	f383 8811 	msr	BASEPRI, r3
 800fd96:	f3bf 8f6f 	isb	sy
 800fd9a:	f3bf 8f4f 	dsb	sy
 800fd9e:	60fb      	str	r3, [r7, #12]
}
 800fda0:	bf00      	nop
 800fda2:	e7fe      	b.n	800fda2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fda4:	693b      	ldr	r3, [r7, #16]
 800fda6:	3318      	adds	r3, #24
 800fda8:	4618      	mov	r0, r3
 800fdaa:	f7fe fe4b 	bl	800ea44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fdae:	4b1d      	ldr	r3, [pc, #116]	; (800fe24 <xTaskRemoveFromEventList+0xac>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d11c      	bne.n	800fdf0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fdb6:	693b      	ldr	r3, [r7, #16]
 800fdb8:	3304      	adds	r3, #4
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f7fe fe42 	bl	800ea44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fdc0:	693b      	ldr	r3, [r7, #16]
 800fdc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdc4:	2201      	movs	r2, #1
 800fdc6:	409a      	lsls	r2, r3
 800fdc8:	4b17      	ldr	r3, [pc, #92]	; (800fe28 <xTaskRemoveFromEventList+0xb0>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	4313      	orrs	r3, r2
 800fdce:	4a16      	ldr	r2, [pc, #88]	; (800fe28 <xTaskRemoveFromEventList+0xb0>)
 800fdd0:	6013      	str	r3, [r2, #0]
 800fdd2:	693b      	ldr	r3, [r7, #16]
 800fdd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdd6:	4613      	mov	r3, r2
 800fdd8:	009b      	lsls	r3, r3, #2
 800fdda:	4413      	add	r3, r2
 800fddc:	009b      	lsls	r3, r3, #2
 800fdde:	4a13      	ldr	r2, [pc, #76]	; (800fe2c <xTaskRemoveFromEventList+0xb4>)
 800fde0:	441a      	add	r2, r3
 800fde2:	693b      	ldr	r3, [r7, #16]
 800fde4:	3304      	adds	r3, #4
 800fde6:	4619      	mov	r1, r3
 800fde8:	4610      	mov	r0, r2
 800fdea:	f7fe fdd0 	bl	800e98e <vListInsertEnd>
 800fdee:	e005      	b.n	800fdfc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fdf0:	693b      	ldr	r3, [r7, #16]
 800fdf2:	3318      	adds	r3, #24
 800fdf4:	4619      	mov	r1, r3
 800fdf6:	480e      	ldr	r0, [pc, #56]	; (800fe30 <xTaskRemoveFromEventList+0xb8>)
 800fdf8:	f7fe fdc9 	bl	800e98e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fdfc:	693b      	ldr	r3, [r7, #16]
 800fdfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe00:	4b0c      	ldr	r3, [pc, #48]	; (800fe34 <xTaskRemoveFromEventList+0xbc>)
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe06:	429a      	cmp	r2, r3
 800fe08:	d905      	bls.n	800fe16 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fe0e:	4b0a      	ldr	r3, [pc, #40]	; (800fe38 <xTaskRemoveFromEventList+0xc0>)
 800fe10:	2201      	movs	r2, #1
 800fe12:	601a      	str	r2, [r3, #0]
 800fe14:	e001      	b.n	800fe1a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800fe16:	2300      	movs	r3, #0
 800fe18:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800fe1a:	697b      	ldr	r3, [r7, #20]
}
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	3718      	adds	r7, #24
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}
 800fe24:	200012e4 	.word	0x200012e4
 800fe28:	200012c4 	.word	0x200012c4
 800fe2c:	200011c0 	.word	0x200011c0
 800fe30:	2000127c 	.word	0x2000127c
 800fe34:	200011bc 	.word	0x200011bc
 800fe38:	200012d0 	.word	0x200012d0

0800fe3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fe3c:	b480      	push	{r7}
 800fe3e:	b083      	sub	sp, #12
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fe44:	4b06      	ldr	r3, [pc, #24]	; (800fe60 <vTaskInternalSetTimeOutState+0x24>)
 800fe46:	681a      	ldr	r2, [r3, #0]
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fe4c:	4b05      	ldr	r3, [pc, #20]	; (800fe64 <vTaskInternalSetTimeOutState+0x28>)
 800fe4e:	681a      	ldr	r2, [r3, #0]
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	605a      	str	r2, [r3, #4]
}
 800fe54:	bf00      	nop
 800fe56:	370c      	adds	r7, #12
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bc80      	pop	{r7}
 800fe5c:	4770      	bx	lr
 800fe5e:	bf00      	nop
 800fe60:	200012d4 	.word	0x200012d4
 800fe64:	200012c0 	.word	0x200012c0

0800fe68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b088      	sub	sp, #32
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
 800fe70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d10a      	bne.n	800fe8e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800fe78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe7c:	f383 8811 	msr	BASEPRI, r3
 800fe80:	f3bf 8f6f 	isb	sy
 800fe84:	f3bf 8f4f 	dsb	sy
 800fe88:	613b      	str	r3, [r7, #16]
}
 800fe8a:	bf00      	nop
 800fe8c:	e7fe      	b.n	800fe8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d10a      	bne.n	800feaa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800fe94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe98:	f383 8811 	msr	BASEPRI, r3
 800fe9c:	f3bf 8f6f 	isb	sy
 800fea0:	f3bf 8f4f 	dsb	sy
 800fea4:	60fb      	str	r3, [r7, #12]
}
 800fea6:	bf00      	nop
 800fea8:	e7fe      	b.n	800fea8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800feaa:	f000 fb27 	bl	80104fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800feae:	4b1d      	ldr	r3, [pc, #116]	; (800ff24 <xTaskCheckForTimeOut+0xbc>)
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	685b      	ldr	r3, [r3, #4]
 800feb8:	69ba      	ldr	r2, [r7, #24]
 800feba:	1ad3      	subs	r3, r2, r3
 800febc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800febe:	683b      	ldr	r3, [r7, #0]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fec6:	d102      	bne.n	800fece <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fec8:	2300      	movs	r3, #0
 800feca:	61fb      	str	r3, [r7, #28]
 800fecc:	e023      	b.n	800ff16 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681a      	ldr	r2, [r3, #0]
 800fed2:	4b15      	ldr	r3, [pc, #84]	; (800ff28 <xTaskCheckForTimeOut+0xc0>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	429a      	cmp	r2, r3
 800fed8:	d007      	beq.n	800feea <xTaskCheckForTimeOut+0x82>
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	685b      	ldr	r3, [r3, #4]
 800fede:	69ba      	ldr	r2, [r7, #24]
 800fee0:	429a      	cmp	r2, r3
 800fee2:	d302      	bcc.n	800feea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fee4:	2301      	movs	r3, #1
 800fee6:	61fb      	str	r3, [r7, #28]
 800fee8:	e015      	b.n	800ff16 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800feea:	683b      	ldr	r3, [r7, #0]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	697a      	ldr	r2, [r7, #20]
 800fef0:	429a      	cmp	r2, r3
 800fef2:	d20b      	bcs.n	800ff0c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	681a      	ldr	r2, [r3, #0]
 800fef8:	697b      	ldr	r3, [r7, #20]
 800fefa:	1ad2      	subs	r2, r2, r3
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ff00:	6878      	ldr	r0, [r7, #4]
 800ff02:	f7ff ff9b 	bl	800fe3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ff06:	2300      	movs	r3, #0
 800ff08:	61fb      	str	r3, [r7, #28]
 800ff0a:	e004      	b.n	800ff16 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	2200      	movs	r2, #0
 800ff10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ff12:	2301      	movs	r3, #1
 800ff14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ff16:	f000 fb21 	bl	801055c <vPortExitCritical>

	return xReturn;
 800ff1a:	69fb      	ldr	r3, [r7, #28]
}
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	3720      	adds	r7, #32
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}
 800ff24:	200012c0 	.word	0x200012c0
 800ff28:	200012d4 	.word	0x200012d4

0800ff2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ff2c:	b480      	push	{r7}
 800ff2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ff30:	4b03      	ldr	r3, [pc, #12]	; (800ff40 <vTaskMissedYield+0x14>)
 800ff32:	2201      	movs	r2, #1
 800ff34:	601a      	str	r2, [r3, #0]
}
 800ff36:	bf00      	nop
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bc80      	pop	{r7}
 800ff3c:	4770      	bx	lr
 800ff3e:	bf00      	nop
 800ff40:	200012d0 	.word	0x200012d0

0800ff44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b082      	sub	sp, #8
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ff4c:	f000 f852 	bl	800fff4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ff50:	4b06      	ldr	r3, [pc, #24]	; (800ff6c <prvIdleTask+0x28>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	2b01      	cmp	r3, #1
 800ff56:	d9f9      	bls.n	800ff4c <prvIdleTask+0x8>
			{
				taskYIELD();
 800ff58:	4b05      	ldr	r3, [pc, #20]	; (800ff70 <prvIdleTask+0x2c>)
 800ff5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff5e:	601a      	str	r2, [r3, #0]
 800ff60:	f3bf 8f4f 	dsb	sy
 800ff64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ff68:	e7f0      	b.n	800ff4c <prvIdleTask+0x8>
 800ff6a:	bf00      	nop
 800ff6c:	200011c0 	.word	0x200011c0
 800ff70:	e000ed04 	.word	0xe000ed04

0800ff74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b082      	sub	sp, #8
 800ff78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	607b      	str	r3, [r7, #4]
 800ff7e:	e00c      	b.n	800ff9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ff80:	687a      	ldr	r2, [r7, #4]
 800ff82:	4613      	mov	r3, r2
 800ff84:	009b      	lsls	r3, r3, #2
 800ff86:	4413      	add	r3, r2
 800ff88:	009b      	lsls	r3, r3, #2
 800ff8a:	4a12      	ldr	r2, [pc, #72]	; (800ffd4 <prvInitialiseTaskLists+0x60>)
 800ff8c:	4413      	add	r3, r2
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f7fe fcd2 	bl	800e938 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	3301      	adds	r3, #1
 800ff98:	607b      	str	r3, [r7, #4]
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	2b06      	cmp	r3, #6
 800ff9e:	d9ef      	bls.n	800ff80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ffa0:	480d      	ldr	r0, [pc, #52]	; (800ffd8 <prvInitialiseTaskLists+0x64>)
 800ffa2:	f7fe fcc9 	bl	800e938 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ffa6:	480d      	ldr	r0, [pc, #52]	; (800ffdc <prvInitialiseTaskLists+0x68>)
 800ffa8:	f7fe fcc6 	bl	800e938 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ffac:	480c      	ldr	r0, [pc, #48]	; (800ffe0 <prvInitialiseTaskLists+0x6c>)
 800ffae:	f7fe fcc3 	bl	800e938 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ffb2:	480c      	ldr	r0, [pc, #48]	; (800ffe4 <prvInitialiseTaskLists+0x70>)
 800ffb4:	f7fe fcc0 	bl	800e938 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ffb8:	480b      	ldr	r0, [pc, #44]	; (800ffe8 <prvInitialiseTaskLists+0x74>)
 800ffba:	f7fe fcbd 	bl	800e938 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ffbe:	4b0b      	ldr	r3, [pc, #44]	; (800ffec <prvInitialiseTaskLists+0x78>)
 800ffc0:	4a05      	ldr	r2, [pc, #20]	; (800ffd8 <prvInitialiseTaskLists+0x64>)
 800ffc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ffc4:	4b0a      	ldr	r3, [pc, #40]	; (800fff0 <prvInitialiseTaskLists+0x7c>)
 800ffc6:	4a05      	ldr	r2, [pc, #20]	; (800ffdc <prvInitialiseTaskLists+0x68>)
 800ffc8:	601a      	str	r2, [r3, #0]
}
 800ffca:	bf00      	nop
 800ffcc:	3708      	adds	r7, #8
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}
 800ffd2:	bf00      	nop
 800ffd4:	200011c0 	.word	0x200011c0
 800ffd8:	2000124c 	.word	0x2000124c
 800ffdc:	20001260 	.word	0x20001260
 800ffe0:	2000127c 	.word	0x2000127c
 800ffe4:	20001290 	.word	0x20001290
 800ffe8:	200012a8 	.word	0x200012a8
 800ffec:	20001274 	.word	0x20001274
 800fff0:	20001278 	.word	0x20001278

0800fff4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b082      	sub	sp, #8
 800fff8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fffa:	e019      	b.n	8010030 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fffc:	f000 fa7e 	bl	80104fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8010000:	4b10      	ldr	r3, [pc, #64]	; (8010044 <prvCheckTasksWaitingTermination+0x50>)
 8010002:	68db      	ldr	r3, [r3, #12]
 8010004:	68db      	ldr	r3, [r3, #12]
 8010006:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	3304      	adds	r3, #4
 801000c:	4618      	mov	r0, r3
 801000e:	f7fe fd19 	bl	800ea44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010012:	4b0d      	ldr	r3, [pc, #52]	; (8010048 <prvCheckTasksWaitingTermination+0x54>)
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	3b01      	subs	r3, #1
 8010018:	4a0b      	ldr	r2, [pc, #44]	; (8010048 <prvCheckTasksWaitingTermination+0x54>)
 801001a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801001c:	4b0b      	ldr	r3, [pc, #44]	; (801004c <prvCheckTasksWaitingTermination+0x58>)
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	3b01      	subs	r3, #1
 8010022:	4a0a      	ldr	r2, [pc, #40]	; (801004c <prvCheckTasksWaitingTermination+0x58>)
 8010024:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010026:	f000 fa99 	bl	801055c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	f000 f810 	bl	8010050 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010030:	4b06      	ldr	r3, [pc, #24]	; (801004c <prvCheckTasksWaitingTermination+0x58>)
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d1e1      	bne.n	800fffc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010038:	bf00      	nop
 801003a:	bf00      	nop
 801003c:	3708      	adds	r7, #8
 801003e:	46bd      	mov	sp, r7
 8010040:	bd80      	pop	{r7, pc}
 8010042:	bf00      	nop
 8010044:	20001290 	.word	0x20001290
 8010048:	200012bc 	.word	0x200012bc
 801004c:	200012a4 	.word	0x200012a4

08010050 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010050:	b580      	push	{r7, lr}
 8010052:	b084      	sub	sp, #16
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	334c      	adds	r3, #76	; 0x4c
 801005c:	4618      	mov	r0, r3
 801005e:	f001 f961 	bl	8011324 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8010068:	2b00      	cmp	r3, #0
 801006a:	d108      	bne.n	801007e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010070:	4618      	mov	r0, r3
 8010072:	f000 fc07 	bl	8010884 <vPortFree>
				vPortFree( pxTCB );
 8010076:	6878      	ldr	r0, [r7, #4]
 8010078:	f000 fc04 	bl	8010884 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801007c:	e018      	b.n	80100b0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8010084:	2b01      	cmp	r3, #1
 8010086:	d103      	bne.n	8010090 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010088:	6878      	ldr	r0, [r7, #4]
 801008a:	f000 fbfb 	bl	8010884 <vPortFree>
	}
 801008e:	e00f      	b.n	80100b0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8010096:	2b02      	cmp	r3, #2
 8010098:	d00a      	beq.n	80100b0 <prvDeleteTCB+0x60>
	__asm volatile
 801009a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801009e:	f383 8811 	msr	BASEPRI, r3
 80100a2:	f3bf 8f6f 	isb	sy
 80100a6:	f3bf 8f4f 	dsb	sy
 80100aa:	60fb      	str	r3, [r7, #12]
}
 80100ac:	bf00      	nop
 80100ae:	e7fe      	b.n	80100ae <prvDeleteTCB+0x5e>
	}
 80100b0:	bf00      	nop
 80100b2:	3710      	adds	r7, #16
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd80      	pop	{r7, pc}

080100b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80100b8:	b480      	push	{r7}
 80100ba:	b083      	sub	sp, #12
 80100bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80100be:	4b0e      	ldr	r3, [pc, #56]	; (80100f8 <prvResetNextTaskUnblockTime+0x40>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d101      	bne.n	80100cc <prvResetNextTaskUnblockTime+0x14>
 80100c8:	2301      	movs	r3, #1
 80100ca:	e000      	b.n	80100ce <prvResetNextTaskUnblockTime+0x16>
 80100cc:	2300      	movs	r3, #0
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d004      	beq.n	80100dc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80100d2:	4b0a      	ldr	r3, [pc, #40]	; (80100fc <prvResetNextTaskUnblockTime+0x44>)
 80100d4:	f04f 32ff 	mov.w	r2, #4294967295
 80100d8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80100da:	e008      	b.n	80100ee <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80100dc:	4b06      	ldr	r3, [pc, #24]	; (80100f8 <prvResetNextTaskUnblockTime+0x40>)
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	68db      	ldr	r3, [r3, #12]
 80100e2:	68db      	ldr	r3, [r3, #12]
 80100e4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	685b      	ldr	r3, [r3, #4]
 80100ea:	4a04      	ldr	r2, [pc, #16]	; (80100fc <prvResetNextTaskUnblockTime+0x44>)
 80100ec:	6013      	str	r3, [r2, #0]
}
 80100ee:	bf00      	nop
 80100f0:	370c      	adds	r7, #12
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bc80      	pop	{r7}
 80100f6:	4770      	bx	lr
 80100f8:	20001274 	.word	0x20001274
 80100fc:	200012dc 	.word	0x200012dc

08010100 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010100:	b480      	push	{r7}
 8010102:	b083      	sub	sp, #12
 8010104:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010106:	4b0b      	ldr	r3, [pc, #44]	; (8010134 <xTaskGetSchedulerState+0x34>)
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d102      	bne.n	8010114 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801010e:	2301      	movs	r3, #1
 8010110:	607b      	str	r3, [r7, #4]
 8010112:	e008      	b.n	8010126 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010114:	4b08      	ldr	r3, [pc, #32]	; (8010138 <xTaskGetSchedulerState+0x38>)
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d102      	bne.n	8010122 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801011c:	2302      	movs	r3, #2
 801011e:	607b      	str	r3, [r7, #4]
 8010120:	e001      	b.n	8010126 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010122:	2300      	movs	r3, #0
 8010124:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010126:	687b      	ldr	r3, [r7, #4]
	}
 8010128:	4618      	mov	r0, r3
 801012a:	370c      	adds	r7, #12
 801012c:	46bd      	mov	sp, r7
 801012e:	bc80      	pop	{r7}
 8010130:	4770      	bx	lr
 8010132:	bf00      	nop
 8010134:	200012c8 	.word	0x200012c8
 8010138:	200012e4 	.word	0x200012e4

0801013c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801013c:	b580      	push	{r7, lr}
 801013e:	b086      	sub	sp, #24
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010148:	2300      	movs	r3, #0
 801014a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d06e      	beq.n	8010230 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010152:	4b3a      	ldr	r3, [pc, #232]	; (801023c <xTaskPriorityDisinherit+0x100>)
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	693a      	ldr	r2, [r7, #16]
 8010158:	429a      	cmp	r2, r3
 801015a:	d00a      	beq.n	8010172 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801015c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010160:	f383 8811 	msr	BASEPRI, r3
 8010164:	f3bf 8f6f 	isb	sy
 8010168:	f3bf 8f4f 	dsb	sy
 801016c:	60fb      	str	r3, [r7, #12]
}
 801016e:	bf00      	nop
 8010170:	e7fe      	b.n	8010170 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010172:	693b      	ldr	r3, [r7, #16]
 8010174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010176:	2b00      	cmp	r3, #0
 8010178:	d10a      	bne.n	8010190 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801017a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801017e:	f383 8811 	msr	BASEPRI, r3
 8010182:	f3bf 8f6f 	isb	sy
 8010186:	f3bf 8f4f 	dsb	sy
 801018a:	60bb      	str	r3, [r7, #8]
}
 801018c:	bf00      	nop
 801018e:	e7fe      	b.n	801018e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010190:	693b      	ldr	r3, [r7, #16]
 8010192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010194:	1e5a      	subs	r2, r3, #1
 8010196:	693b      	ldr	r3, [r7, #16]
 8010198:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801019a:	693b      	ldr	r3, [r7, #16]
 801019c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801019e:	693b      	ldr	r3, [r7, #16]
 80101a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101a2:	429a      	cmp	r2, r3
 80101a4:	d044      	beq.n	8010230 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80101a6:	693b      	ldr	r3, [r7, #16]
 80101a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d140      	bne.n	8010230 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80101ae:	693b      	ldr	r3, [r7, #16]
 80101b0:	3304      	adds	r3, #4
 80101b2:	4618      	mov	r0, r3
 80101b4:	f7fe fc46 	bl	800ea44 <uxListRemove>
 80101b8:	4603      	mov	r3, r0
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d115      	bne.n	80101ea <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80101be:	693b      	ldr	r3, [r7, #16]
 80101c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101c2:	491f      	ldr	r1, [pc, #124]	; (8010240 <xTaskPriorityDisinherit+0x104>)
 80101c4:	4613      	mov	r3, r2
 80101c6:	009b      	lsls	r3, r3, #2
 80101c8:	4413      	add	r3, r2
 80101ca:	009b      	lsls	r3, r3, #2
 80101cc:	440b      	add	r3, r1
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d10a      	bne.n	80101ea <xTaskPriorityDisinherit+0xae>
 80101d4:	693b      	ldr	r3, [r7, #16]
 80101d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101d8:	2201      	movs	r2, #1
 80101da:	fa02 f303 	lsl.w	r3, r2, r3
 80101de:	43da      	mvns	r2, r3
 80101e0:	4b18      	ldr	r3, [pc, #96]	; (8010244 <xTaskPriorityDisinherit+0x108>)
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	4013      	ands	r3, r2
 80101e6:	4a17      	ldr	r2, [pc, #92]	; (8010244 <xTaskPriorityDisinherit+0x108>)
 80101e8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80101ea:	693b      	ldr	r3, [r7, #16]
 80101ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80101ee:	693b      	ldr	r3, [r7, #16]
 80101f0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101f2:	693b      	ldr	r3, [r7, #16]
 80101f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101f6:	f1c3 0207 	rsb	r2, r3, #7
 80101fa:	693b      	ldr	r3, [r7, #16]
 80101fc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80101fe:	693b      	ldr	r3, [r7, #16]
 8010200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010202:	2201      	movs	r2, #1
 8010204:	409a      	lsls	r2, r3
 8010206:	4b0f      	ldr	r3, [pc, #60]	; (8010244 <xTaskPriorityDisinherit+0x108>)
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	4313      	orrs	r3, r2
 801020c:	4a0d      	ldr	r2, [pc, #52]	; (8010244 <xTaskPriorityDisinherit+0x108>)
 801020e:	6013      	str	r3, [r2, #0]
 8010210:	693b      	ldr	r3, [r7, #16]
 8010212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010214:	4613      	mov	r3, r2
 8010216:	009b      	lsls	r3, r3, #2
 8010218:	4413      	add	r3, r2
 801021a:	009b      	lsls	r3, r3, #2
 801021c:	4a08      	ldr	r2, [pc, #32]	; (8010240 <xTaskPriorityDisinherit+0x104>)
 801021e:	441a      	add	r2, r3
 8010220:	693b      	ldr	r3, [r7, #16]
 8010222:	3304      	adds	r3, #4
 8010224:	4619      	mov	r1, r3
 8010226:	4610      	mov	r0, r2
 8010228:	f7fe fbb1 	bl	800e98e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801022c:	2301      	movs	r3, #1
 801022e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010230:	697b      	ldr	r3, [r7, #20]
	}
 8010232:	4618      	mov	r0, r3
 8010234:	3718      	adds	r7, #24
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}
 801023a:	bf00      	nop
 801023c:	200011bc 	.word	0x200011bc
 8010240:	200011c0 	.word	0x200011c0
 8010244:	200012c4 	.word	0x200012c4

08010248 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b084      	sub	sp, #16
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
 8010250:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010252:	4b29      	ldr	r3, [pc, #164]	; (80102f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010258:	4b28      	ldr	r3, [pc, #160]	; (80102fc <prvAddCurrentTaskToDelayedList+0xb4>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	3304      	adds	r3, #4
 801025e:	4618      	mov	r0, r3
 8010260:	f7fe fbf0 	bl	800ea44 <uxListRemove>
 8010264:	4603      	mov	r3, r0
 8010266:	2b00      	cmp	r3, #0
 8010268:	d10b      	bne.n	8010282 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 801026a:	4b24      	ldr	r3, [pc, #144]	; (80102fc <prvAddCurrentTaskToDelayedList+0xb4>)
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010270:	2201      	movs	r2, #1
 8010272:	fa02 f303 	lsl.w	r3, r2, r3
 8010276:	43da      	mvns	r2, r3
 8010278:	4b21      	ldr	r3, [pc, #132]	; (8010300 <prvAddCurrentTaskToDelayedList+0xb8>)
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	4013      	ands	r3, r2
 801027e:	4a20      	ldr	r2, [pc, #128]	; (8010300 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010280:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010288:	d10a      	bne.n	80102a0 <prvAddCurrentTaskToDelayedList+0x58>
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d007      	beq.n	80102a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010290:	4b1a      	ldr	r3, [pc, #104]	; (80102fc <prvAddCurrentTaskToDelayedList+0xb4>)
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	3304      	adds	r3, #4
 8010296:	4619      	mov	r1, r3
 8010298:	481a      	ldr	r0, [pc, #104]	; (8010304 <prvAddCurrentTaskToDelayedList+0xbc>)
 801029a:	f7fe fb78 	bl	800e98e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801029e:	e026      	b.n	80102ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80102a0:	68fa      	ldr	r2, [r7, #12]
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	4413      	add	r3, r2
 80102a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80102a8:	4b14      	ldr	r3, [pc, #80]	; (80102fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	68ba      	ldr	r2, [r7, #8]
 80102ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80102b0:	68ba      	ldr	r2, [r7, #8]
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	429a      	cmp	r2, r3
 80102b6:	d209      	bcs.n	80102cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80102b8:	4b13      	ldr	r3, [pc, #76]	; (8010308 <prvAddCurrentTaskToDelayedList+0xc0>)
 80102ba:	681a      	ldr	r2, [r3, #0]
 80102bc:	4b0f      	ldr	r3, [pc, #60]	; (80102fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	3304      	adds	r3, #4
 80102c2:	4619      	mov	r1, r3
 80102c4:	4610      	mov	r0, r2
 80102c6:	f7fe fb85 	bl	800e9d4 <vListInsert>
}
 80102ca:	e010      	b.n	80102ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80102cc:	4b0f      	ldr	r3, [pc, #60]	; (801030c <prvAddCurrentTaskToDelayedList+0xc4>)
 80102ce:	681a      	ldr	r2, [r3, #0]
 80102d0:	4b0a      	ldr	r3, [pc, #40]	; (80102fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	3304      	adds	r3, #4
 80102d6:	4619      	mov	r1, r3
 80102d8:	4610      	mov	r0, r2
 80102da:	f7fe fb7b 	bl	800e9d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80102de:	4b0c      	ldr	r3, [pc, #48]	; (8010310 <prvAddCurrentTaskToDelayedList+0xc8>)
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	68ba      	ldr	r2, [r7, #8]
 80102e4:	429a      	cmp	r2, r3
 80102e6:	d202      	bcs.n	80102ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80102e8:	4a09      	ldr	r2, [pc, #36]	; (8010310 <prvAddCurrentTaskToDelayedList+0xc8>)
 80102ea:	68bb      	ldr	r3, [r7, #8]
 80102ec:	6013      	str	r3, [r2, #0]
}
 80102ee:	bf00      	nop
 80102f0:	3710      	adds	r7, #16
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bd80      	pop	{r7, pc}
 80102f6:	bf00      	nop
 80102f8:	200012c0 	.word	0x200012c0
 80102fc:	200011bc 	.word	0x200011bc
 8010300:	200012c4 	.word	0x200012c4
 8010304:	200012a8 	.word	0x200012a8
 8010308:	20001278 	.word	0x20001278
 801030c:	20001274 	.word	0x20001274
 8010310:	200012dc 	.word	0x200012dc

08010314 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010314:	b480      	push	{r7}
 8010316:	b085      	sub	sp, #20
 8010318:	af00      	add	r7, sp, #0
 801031a:	60f8      	str	r0, [r7, #12]
 801031c:	60b9      	str	r1, [r7, #8]
 801031e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	3b04      	subs	r3, #4
 8010324:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801032c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	3b04      	subs	r3, #4
 8010332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	f023 0201 	bic.w	r2, r3, #1
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	3b04      	subs	r3, #4
 8010342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010344:	4a08      	ldr	r2, [pc, #32]	; (8010368 <pxPortInitialiseStack+0x54>)
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	3b14      	subs	r3, #20
 801034e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010350:	687a      	ldr	r2, [r7, #4]
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	3b20      	subs	r3, #32
 801035a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801035c:	68fb      	ldr	r3, [r7, #12]
}
 801035e:	4618      	mov	r0, r3
 8010360:	3714      	adds	r7, #20
 8010362:	46bd      	mov	sp, r7
 8010364:	bc80      	pop	{r7}
 8010366:	4770      	bx	lr
 8010368:	0801036d 	.word	0x0801036d

0801036c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801036c:	b480      	push	{r7}
 801036e:	b085      	sub	sp, #20
 8010370:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8010372:	2300      	movs	r3, #0
 8010374:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010376:	4b12      	ldr	r3, [pc, #72]	; (80103c0 <prvTaskExitError+0x54>)
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801037e:	d00a      	beq.n	8010396 <prvTaskExitError+0x2a>
	__asm volatile
 8010380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010384:	f383 8811 	msr	BASEPRI, r3
 8010388:	f3bf 8f6f 	isb	sy
 801038c:	f3bf 8f4f 	dsb	sy
 8010390:	60fb      	str	r3, [r7, #12]
}
 8010392:	bf00      	nop
 8010394:	e7fe      	b.n	8010394 <prvTaskExitError+0x28>
	__asm volatile
 8010396:	f04f 0350 	mov.w	r3, #80	; 0x50
 801039a:	f383 8811 	msr	BASEPRI, r3
 801039e:	f3bf 8f6f 	isb	sy
 80103a2:	f3bf 8f4f 	dsb	sy
 80103a6:	60bb      	str	r3, [r7, #8]
}
 80103a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80103aa:	bf00      	nop
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d0fc      	beq.n	80103ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80103b2:	bf00      	nop
 80103b4:	bf00      	nop
 80103b6:	3714      	adds	r7, #20
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bc80      	pop	{r7}
 80103bc:	4770      	bx	lr
 80103be:	bf00      	nop
 80103c0:	2000007c 	.word	0x2000007c
	...

080103d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80103d0:	4b07      	ldr	r3, [pc, #28]	; (80103f0 <pxCurrentTCBConst2>)
 80103d2:	6819      	ldr	r1, [r3, #0]
 80103d4:	6808      	ldr	r0, [r1, #0]
 80103d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80103da:	f380 8809 	msr	PSP, r0
 80103de:	f3bf 8f6f 	isb	sy
 80103e2:	f04f 0000 	mov.w	r0, #0
 80103e6:	f380 8811 	msr	BASEPRI, r0
 80103ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80103ee:	4770      	bx	lr

080103f0 <pxCurrentTCBConst2>:
 80103f0:	200011bc 	.word	0x200011bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80103f4:	bf00      	nop
 80103f6:	bf00      	nop

080103f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80103f8:	4806      	ldr	r0, [pc, #24]	; (8010414 <prvPortStartFirstTask+0x1c>)
 80103fa:	6800      	ldr	r0, [r0, #0]
 80103fc:	6800      	ldr	r0, [r0, #0]
 80103fe:	f380 8808 	msr	MSP, r0
 8010402:	b662      	cpsie	i
 8010404:	b661      	cpsie	f
 8010406:	f3bf 8f4f 	dsb	sy
 801040a:	f3bf 8f6f 	isb	sy
 801040e:	df00      	svc	0
 8010410:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010412:	bf00      	nop
 8010414:	e000ed08 	.word	0xe000ed08

08010418 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b084      	sub	sp, #16
 801041c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801041e:	4b32      	ldr	r3, [pc, #200]	; (80104e8 <xPortStartScheduler+0xd0>)
 8010420:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	781b      	ldrb	r3, [r3, #0]
 8010426:	b2db      	uxtb	r3, r3
 8010428:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	22ff      	movs	r2, #255	; 0xff
 801042e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	781b      	ldrb	r3, [r3, #0]
 8010434:	b2db      	uxtb	r3, r3
 8010436:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010438:	78fb      	ldrb	r3, [r7, #3]
 801043a:	b2db      	uxtb	r3, r3
 801043c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010440:	b2da      	uxtb	r2, r3
 8010442:	4b2a      	ldr	r3, [pc, #168]	; (80104ec <xPortStartScheduler+0xd4>)
 8010444:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010446:	4b2a      	ldr	r3, [pc, #168]	; (80104f0 <xPortStartScheduler+0xd8>)
 8010448:	2207      	movs	r2, #7
 801044a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801044c:	e009      	b.n	8010462 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 801044e:	4b28      	ldr	r3, [pc, #160]	; (80104f0 <xPortStartScheduler+0xd8>)
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	3b01      	subs	r3, #1
 8010454:	4a26      	ldr	r2, [pc, #152]	; (80104f0 <xPortStartScheduler+0xd8>)
 8010456:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010458:	78fb      	ldrb	r3, [r7, #3]
 801045a:	b2db      	uxtb	r3, r3
 801045c:	005b      	lsls	r3, r3, #1
 801045e:	b2db      	uxtb	r3, r3
 8010460:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010462:	78fb      	ldrb	r3, [r7, #3]
 8010464:	b2db      	uxtb	r3, r3
 8010466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801046a:	2b80      	cmp	r3, #128	; 0x80
 801046c:	d0ef      	beq.n	801044e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801046e:	4b20      	ldr	r3, [pc, #128]	; (80104f0 <xPortStartScheduler+0xd8>)
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	f1c3 0307 	rsb	r3, r3, #7
 8010476:	2b04      	cmp	r3, #4
 8010478:	d00a      	beq.n	8010490 <xPortStartScheduler+0x78>
	__asm volatile
 801047a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801047e:	f383 8811 	msr	BASEPRI, r3
 8010482:	f3bf 8f6f 	isb	sy
 8010486:	f3bf 8f4f 	dsb	sy
 801048a:	60bb      	str	r3, [r7, #8]
}
 801048c:	bf00      	nop
 801048e:	e7fe      	b.n	801048e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010490:	4b17      	ldr	r3, [pc, #92]	; (80104f0 <xPortStartScheduler+0xd8>)
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	021b      	lsls	r3, r3, #8
 8010496:	4a16      	ldr	r2, [pc, #88]	; (80104f0 <xPortStartScheduler+0xd8>)
 8010498:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801049a:	4b15      	ldr	r3, [pc, #84]	; (80104f0 <xPortStartScheduler+0xd8>)
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80104a2:	4a13      	ldr	r2, [pc, #76]	; (80104f0 <xPortStartScheduler+0xd8>)
 80104a4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	b2da      	uxtb	r2, r3
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80104ae:	4b11      	ldr	r3, [pc, #68]	; (80104f4 <xPortStartScheduler+0xdc>)
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	4a10      	ldr	r2, [pc, #64]	; (80104f4 <xPortStartScheduler+0xdc>)
 80104b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80104b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80104ba:	4b0e      	ldr	r3, [pc, #56]	; (80104f4 <xPortStartScheduler+0xdc>)
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	4a0d      	ldr	r2, [pc, #52]	; (80104f4 <xPortStartScheduler+0xdc>)
 80104c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80104c4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80104c6:	f000 f8b9 	bl	801063c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80104ca:	4b0b      	ldr	r3, [pc, #44]	; (80104f8 <xPortStartScheduler+0xe0>)
 80104cc:	2200      	movs	r2, #0
 80104ce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80104d0:	f7ff ff92 	bl	80103f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80104d4:	f7ff fbca 	bl	800fc6c <vTaskSwitchContext>
	prvTaskExitError();
 80104d8:	f7ff ff48 	bl	801036c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80104dc:	2300      	movs	r3, #0
}
 80104de:	4618      	mov	r0, r3
 80104e0:	3710      	adds	r7, #16
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}
 80104e6:	bf00      	nop
 80104e8:	e000e400 	.word	0xe000e400
 80104ec:	200012e8 	.word	0x200012e8
 80104f0:	200012ec 	.word	0x200012ec
 80104f4:	e000ed20 	.word	0xe000ed20
 80104f8:	2000007c 	.word	0x2000007c

080104fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80104fc:	b480      	push	{r7}
 80104fe:	b083      	sub	sp, #12
 8010500:	af00      	add	r7, sp, #0
	__asm volatile
 8010502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010506:	f383 8811 	msr	BASEPRI, r3
 801050a:	f3bf 8f6f 	isb	sy
 801050e:	f3bf 8f4f 	dsb	sy
 8010512:	607b      	str	r3, [r7, #4]
}
 8010514:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010516:	4b0f      	ldr	r3, [pc, #60]	; (8010554 <vPortEnterCritical+0x58>)
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	3301      	adds	r3, #1
 801051c:	4a0d      	ldr	r2, [pc, #52]	; (8010554 <vPortEnterCritical+0x58>)
 801051e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010520:	4b0c      	ldr	r3, [pc, #48]	; (8010554 <vPortEnterCritical+0x58>)
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	2b01      	cmp	r3, #1
 8010526:	d10f      	bne.n	8010548 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010528:	4b0b      	ldr	r3, [pc, #44]	; (8010558 <vPortEnterCritical+0x5c>)
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	b2db      	uxtb	r3, r3
 801052e:	2b00      	cmp	r3, #0
 8010530:	d00a      	beq.n	8010548 <vPortEnterCritical+0x4c>
	__asm volatile
 8010532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010536:	f383 8811 	msr	BASEPRI, r3
 801053a:	f3bf 8f6f 	isb	sy
 801053e:	f3bf 8f4f 	dsb	sy
 8010542:	603b      	str	r3, [r7, #0]
}
 8010544:	bf00      	nop
 8010546:	e7fe      	b.n	8010546 <vPortEnterCritical+0x4a>
	}
}
 8010548:	bf00      	nop
 801054a:	370c      	adds	r7, #12
 801054c:	46bd      	mov	sp, r7
 801054e:	bc80      	pop	{r7}
 8010550:	4770      	bx	lr
 8010552:	bf00      	nop
 8010554:	2000007c 	.word	0x2000007c
 8010558:	e000ed04 	.word	0xe000ed04

0801055c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801055c:	b480      	push	{r7}
 801055e:	b083      	sub	sp, #12
 8010560:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010562:	4b11      	ldr	r3, [pc, #68]	; (80105a8 <vPortExitCritical+0x4c>)
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d10a      	bne.n	8010580 <vPortExitCritical+0x24>
	__asm volatile
 801056a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801056e:	f383 8811 	msr	BASEPRI, r3
 8010572:	f3bf 8f6f 	isb	sy
 8010576:	f3bf 8f4f 	dsb	sy
 801057a:	607b      	str	r3, [r7, #4]
}
 801057c:	bf00      	nop
 801057e:	e7fe      	b.n	801057e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010580:	4b09      	ldr	r3, [pc, #36]	; (80105a8 <vPortExitCritical+0x4c>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	3b01      	subs	r3, #1
 8010586:	4a08      	ldr	r2, [pc, #32]	; (80105a8 <vPortExitCritical+0x4c>)
 8010588:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801058a:	4b07      	ldr	r3, [pc, #28]	; (80105a8 <vPortExitCritical+0x4c>)
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d105      	bne.n	801059e <vPortExitCritical+0x42>
 8010592:	2300      	movs	r3, #0
 8010594:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010596:	683b      	ldr	r3, [r7, #0]
 8010598:	f383 8811 	msr	BASEPRI, r3
}
 801059c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801059e:	bf00      	nop
 80105a0:	370c      	adds	r7, #12
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bc80      	pop	{r7}
 80105a6:	4770      	bx	lr
 80105a8:	2000007c 	.word	0x2000007c
 80105ac:	00000000 	.word	0x00000000

080105b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80105b0:	f3ef 8009 	mrs	r0, PSP
 80105b4:	f3bf 8f6f 	isb	sy
 80105b8:	4b0d      	ldr	r3, [pc, #52]	; (80105f0 <pxCurrentTCBConst>)
 80105ba:	681a      	ldr	r2, [r3, #0]
 80105bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80105c0:	6010      	str	r0, [r2, #0]
 80105c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80105c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80105ca:	f380 8811 	msr	BASEPRI, r0
 80105ce:	f7ff fb4d 	bl	800fc6c <vTaskSwitchContext>
 80105d2:	f04f 0000 	mov.w	r0, #0
 80105d6:	f380 8811 	msr	BASEPRI, r0
 80105da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80105de:	6819      	ldr	r1, [r3, #0]
 80105e0:	6808      	ldr	r0, [r1, #0]
 80105e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80105e6:	f380 8809 	msr	PSP, r0
 80105ea:	f3bf 8f6f 	isb	sy
 80105ee:	4770      	bx	lr

080105f0 <pxCurrentTCBConst>:
 80105f0:	200011bc 	.word	0x200011bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80105f4:	bf00      	nop
 80105f6:	bf00      	nop

080105f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b082      	sub	sp, #8
 80105fc:	af00      	add	r7, sp, #0
	__asm volatile
 80105fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010602:	f383 8811 	msr	BASEPRI, r3
 8010606:	f3bf 8f6f 	isb	sy
 801060a:	f3bf 8f4f 	dsb	sy
 801060e:	607b      	str	r3, [r7, #4]
}
 8010610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010612:	f7ff fa6d 	bl	800faf0 <xTaskIncrementTick>
 8010616:	4603      	mov	r3, r0
 8010618:	2b00      	cmp	r3, #0
 801061a:	d003      	beq.n	8010624 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801061c:	4b06      	ldr	r3, [pc, #24]	; (8010638 <SysTick_Handler+0x40>)
 801061e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010622:	601a      	str	r2, [r3, #0]
 8010624:	2300      	movs	r3, #0
 8010626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010628:	683b      	ldr	r3, [r7, #0]
 801062a:	f383 8811 	msr	BASEPRI, r3
}
 801062e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010630:	bf00      	nop
 8010632:	3708      	adds	r7, #8
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}
 8010638:	e000ed04 	.word	0xe000ed04

0801063c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801063c:	b480      	push	{r7}
 801063e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010640:	4b0a      	ldr	r3, [pc, #40]	; (801066c <vPortSetupTimerInterrupt+0x30>)
 8010642:	2200      	movs	r2, #0
 8010644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010646:	4b0a      	ldr	r3, [pc, #40]	; (8010670 <vPortSetupTimerInterrupt+0x34>)
 8010648:	2200      	movs	r2, #0
 801064a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801064c:	4b09      	ldr	r3, [pc, #36]	; (8010674 <vPortSetupTimerInterrupt+0x38>)
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	4a09      	ldr	r2, [pc, #36]	; (8010678 <vPortSetupTimerInterrupt+0x3c>)
 8010652:	fba2 2303 	umull	r2, r3, r2, r3
 8010656:	099b      	lsrs	r3, r3, #6
 8010658:	4a08      	ldr	r2, [pc, #32]	; (801067c <vPortSetupTimerInterrupt+0x40>)
 801065a:	3b01      	subs	r3, #1
 801065c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801065e:	4b03      	ldr	r3, [pc, #12]	; (801066c <vPortSetupTimerInterrupt+0x30>)
 8010660:	2207      	movs	r2, #7
 8010662:	601a      	str	r2, [r3, #0]
}
 8010664:	bf00      	nop
 8010666:	46bd      	mov	sp, r7
 8010668:	bc80      	pop	{r7}
 801066a:	4770      	bx	lr
 801066c:	e000e010 	.word	0xe000e010
 8010670:	e000e018 	.word	0xe000e018
 8010674:	20000000 	.word	0x20000000
 8010678:	10624dd3 	.word	0x10624dd3
 801067c:	e000e014 	.word	0xe000e014

08010680 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010680:	b480      	push	{r7}
 8010682:	b085      	sub	sp, #20
 8010684:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010686:	f3ef 8305 	mrs	r3, IPSR
 801068a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	2b0f      	cmp	r3, #15
 8010690:	d914      	bls.n	80106bc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010692:	4a16      	ldr	r2, [pc, #88]	; (80106ec <vPortValidateInterruptPriority+0x6c>)
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	4413      	add	r3, r2
 8010698:	781b      	ldrb	r3, [r3, #0]
 801069a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801069c:	4b14      	ldr	r3, [pc, #80]	; (80106f0 <vPortValidateInterruptPriority+0x70>)
 801069e:	781b      	ldrb	r3, [r3, #0]
 80106a0:	7afa      	ldrb	r2, [r7, #11]
 80106a2:	429a      	cmp	r2, r3
 80106a4:	d20a      	bcs.n	80106bc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80106a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106aa:	f383 8811 	msr	BASEPRI, r3
 80106ae:	f3bf 8f6f 	isb	sy
 80106b2:	f3bf 8f4f 	dsb	sy
 80106b6:	607b      	str	r3, [r7, #4]
}
 80106b8:	bf00      	nop
 80106ba:	e7fe      	b.n	80106ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80106bc:	4b0d      	ldr	r3, [pc, #52]	; (80106f4 <vPortValidateInterruptPriority+0x74>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80106c4:	4b0c      	ldr	r3, [pc, #48]	; (80106f8 <vPortValidateInterruptPriority+0x78>)
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	429a      	cmp	r2, r3
 80106ca:	d90a      	bls.n	80106e2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80106cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106d0:	f383 8811 	msr	BASEPRI, r3
 80106d4:	f3bf 8f6f 	isb	sy
 80106d8:	f3bf 8f4f 	dsb	sy
 80106dc:	603b      	str	r3, [r7, #0]
}
 80106de:	bf00      	nop
 80106e0:	e7fe      	b.n	80106e0 <vPortValidateInterruptPriority+0x60>
	}
 80106e2:	bf00      	nop
 80106e4:	3714      	adds	r7, #20
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bc80      	pop	{r7}
 80106ea:	4770      	bx	lr
 80106ec:	e000e3f0 	.word	0xe000e3f0
 80106f0:	200012e8 	.word	0x200012e8
 80106f4:	e000ed0c 	.word	0xe000ed0c
 80106f8:	200012ec 	.word	0x200012ec

080106fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b08a      	sub	sp, #40	; 0x28
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010704:	2300      	movs	r3, #0
 8010706:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010708:	f7ff f948 	bl	800f99c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801070c:	4b58      	ldr	r3, [pc, #352]	; (8010870 <pvPortMalloc+0x174>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d101      	bne.n	8010718 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010714:	f000 f910 	bl	8010938 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010718:	4b56      	ldr	r3, [pc, #344]	; (8010874 <pvPortMalloc+0x178>)
 801071a:	681a      	ldr	r2, [r3, #0]
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	4013      	ands	r3, r2
 8010720:	2b00      	cmp	r3, #0
 8010722:	f040 808e 	bne.w	8010842 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d01d      	beq.n	8010768 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801072c:	2208      	movs	r2, #8
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	4413      	add	r3, r2
 8010732:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	f003 0307 	and.w	r3, r3, #7
 801073a:	2b00      	cmp	r3, #0
 801073c:	d014      	beq.n	8010768 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f023 0307 	bic.w	r3, r3, #7
 8010744:	3308      	adds	r3, #8
 8010746:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	f003 0307 	and.w	r3, r3, #7
 801074e:	2b00      	cmp	r3, #0
 8010750:	d00a      	beq.n	8010768 <pvPortMalloc+0x6c>
	__asm volatile
 8010752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010756:	f383 8811 	msr	BASEPRI, r3
 801075a:	f3bf 8f6f 	isb	sy
 801075e:	f3bf 8f4f 	dsb	sy
 8010762:	617b      	str	r3, [r7, #20]
}
 8010764:	bf00      	nop
 8010766:	e7fe      	b.n	8010766 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d069      	beq.n	8010842 <pvPortMalloc+0x146>
 801076e:	4b42      	ldr	r3, [pc, #264]	; (8010878 <pvPortMalloc+0x17c>)
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	687a      	ldr	r2, [r7, #4]
 8010774:	429a      	cmp	r2, r3
 8010776:	d864      	bhi.n	8010842 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010778:	4b40      	ldr	r3, [pc, #256]	; (801087c <pvPortMalloc+0x180>)
 801077a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801077c:	4b3f      	ldr	r3, [pc, #252]	; (801087c <pvPortMalloc+0x180>)
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010782:	e004      	b.n	801078e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010786:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801078e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010790:	685b      	ldr	r3, [r3, #4]
 8010792:	687a      	ldr	r2, [r7, #4]
 8010794:	429a      	cmp	r2, r3
 8010796:	d903      	bls.n	80107a0 <pvPortMalloc+0xa4>
 8010798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d1f1      	bne.n	8010784 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80107a0:	4b33      	ldr	r3, [pc, #204]	; (8010870 <pvPortMalloc+0x174>)
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107a6:	429a      	cmp	r2, r3
 80107a8:	d04b      	beq.n	8010842 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80107aa:	6a3b      	ldr	r3, [r7, #32]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	2208      	movs	r2, #8
 80107b0:	4413      	add	r3, r2
 80107b2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80107b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107b6:	681a      	ldr	r2, [r3, #0]
 80107b8:	6a3b      	ldr	r3, [r7, #32]
 80107ba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80107bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107be:	685a      	ldr	r2, [r3, #4]
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	1ad2      	subs	r2, r2, r3
 80107c4:	2308      	movs	r3, #8
 80107c6:	005b      	lsls	r3, r3, #1
 80107c8:	429a      	cmp	r2, r3
 80107ca:	d91f      	bls.n	801080c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80107cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	4413      	add	r3, r2
 80107d2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80107d4:	69bb      	ldr	r3, [r7, #24]
 80107d6:	f003 0307 	and.w	r3, r3, #7
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d00a      	beq.n	80107f4 <pvPortMalloc+0xf8>
	__asm volatile
 80107de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107e2:	f383 8811 	msr	BASEPRI, r3
 80107e6:	f3bf 8f6f 	isb	sy
 80107ea:	f3bf 8f4f 	dsb	sy
 80107ee:	613b      	str	r3, [r7, #16]
}
 80107f0:	bf00      	nop
 80107f2:	e7fe      	b.n	80107f2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80107f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107f6:	685a      	ldr	r2, [r3, #4]
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	1ad2      	subs	r2, r2, r3
 80107fc:	69bb      	ldr	r3, [r7, #24]
 80107fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010802:	687a      	ldr	r2, [r7, #4]
 8010804:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010806:	69b8      	ldr	r0, [r7, #24]
 8010808:	f000 f8f8 	bl	80109fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801080c:	4b1a      	ldr	r3, [pc, #104]	; (8010878 <pvPortMalloc+0x17c>)
 801080e:	681a      	ldr	r2, [r3, #0]
 8010810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010812:	685b      	ldr	r3, [r3, #4]
 8010814:	1ad3      	subs	r3, r2, r3
 8010816:	4a18      	ldr	r2, [pc, #96]	; (8010878 <pvPortMalloc+0x17c>)
 8010818:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801081a:	4b17      	ldr	r3, [pc, #92]	; (8010878 <pvPortMalloc+0x17c>)
 801081c:	681a      	ldr	r2, [r3, #0]
 801081e:	4b18      	ldr	r3, [pc, #96]	; (8010880 <pvPortMalloc+0x184>)
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	429a      	cmp	r2, r3
 8010824:	d203      	bcs.n	801082e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010826:	4b14      	ldr	r3, [pc, #80]	; (8010878 <pvPortMalloc+0x17c>)
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	4a15      	ldr	r2, [pc, #84]	; (8010880 <pvPortMalloc+0x184>)
 801082c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801082e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010830:	685a      	ldr	r2, [r3, #4]
 8010832:	4b10      	ldr	r3, [pc, #64]	; (8010874 <pvPortMalloc+0x178>)
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	431a      	orrs	r2, r3
 8010838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801083a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801083c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801083e:	2200      	movs	r2, #0
 8010840:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010842:	f7ff f8b9 	bl	800f9b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010846:	69fb      	ldr	r3, [r7, #28]
 8010848:	f003 0307 	and.w	r3, r3, #7
 801084c:	2b00      	cmp	r3, #0
 801084e:	d00a      	beq.n	8010866 <pvPortMalloc+0x16a>
	__asm volatile
 8010850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010854:	f383 8811 	msr	BASEPRI, r3
 8010858:	f3bf 8f6f 	isb	sy
 801085c:	f3bf 8f4f 	dsb	sy
 8010860:	60fb      	str	r3, [r7, #12]
}
 8010862:	bf00      	nop
 8010864:	e7fe      	b.n	8010864 <pvPortMalloc+0x168>
	return pvReturn;
 8010866:	69fb      	ldr	r3, [r7, #28]
}
 8010868:	4618      	mov	r0, r3
 801086a:	3728      	adds	r7, #40	; 0x28
 801086c:	46bd      	mov	sp, r7
 801086e:	bd80      	pop	{r7, pc}
 8010870:	200041d8 	.word	0x200041d8
 8010874:	200041e4 	.word	0x200041e4
 8010878:	200041dc 	.word	0x200041dc
 801087c:	200041d0 	.word	0x200041d0
 8010880:	200041e0 	.word	0x200041e0

08010884 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b086      	sub	sp, #24
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d048      	beq.n	8010928 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010896:	2308      	movs	r3, #8
 8010898:	425b      	negs	r3, r3
 801089a:	697a      	ldr	r2, [r7, #20]
 801089c:	4413      	add	r3, r2
 801089e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80108a0:	697b      	ldr	r3, [r7, #20]
 80108a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80108a4:	693b      	ldr	r3, [r7, #16]
 80108a6:	685a      	ldr	r2, [r3, #4]
 80108a8:	4b21      	ldr	r3, [pc, #132]	; (8010930 <vPortFree+0xac>)
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	4013      	ands	r3, r2
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d10a      	bne.n	80108c8 <vPortFree+0x44>
	__asm volatile
 80108b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108b6:	f383 8811 	msr	BASEPRI, r3
 80108ba:	f3bf 8f6f 	isb	sy
 80108be:	f3bf 8f4f 	dsb	sy
 80108c2:	60fb      	str	r3, [r7, #12]
}
 80108c4:	bf00      	nop
 80108c6:	e7fe      	b.n	80108c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80108c8:	693b      	ldr	r3, [r7, #16]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d00a      	beq.n	80108e6 <vPortFree+0x62>
	__asm volatile
 80108d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108d4:	f383 8811 	msr	BASEPRI, r3
 80108d8:	f3bf 8f6f 	isb	sy
 80108dc:	f3bf 8f4f 	dsb	sy
 80108e0:	60bb      	str	r3, [r7, #8]
}
 80108e2:	bf00      	nop
 80108e4:	e7fe      	b.n	80108e4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80108e6:	693b      	ldr	r3, [r7, #16]
 80108e8:	685a      	ldr	r2, [r3, #4]
 80108ea:	4b11      	ldr	r3, [pc, #68]	; (8010930 <vPortFree+0xac>)
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	4013      	ands	r3, r2
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d019      	beq.n	8010928 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80108f4:	693b      	ldr	r3, [r7, #16]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d115      	bne.n	8010928 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80108fc:	693b      	ldr	r3, [r7, #16]
 80108fe:	685a      	ldr	r2, [r3, #4]
 8010900:	4b0b      	ldr	r3, [pc, #44]	; (8010930 <vPortFree+0xac>)
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	43db      	mvns	r3, r3
 8010906:	401a      	ands	r2, r3
 8010908:	693b      	ldr	r3, [r7, #16]
 801090a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801090c:	f7ff f846 	bl	800f99c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010910:	693b      	ldr	r3, [r7, #16]
 8010912:	685a      	ldr	r2, [r3, #4]
 8010914:	4b07      	ldr	r3, [pc, #28]	; (8010934 <vPortFree+0xb0>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	4413      	add	r3, r2
 801091a:	4a06      	ldr	r2, [pc, #24]	; (8010934 <vPortFree+0xb0>)
 801091c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801091e:	6938      	ldr	r0, [r7, #16]
 8010920:	f000 f86c 	bl	80109fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010924:	f7ff f848 	bl	800f9b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010928:	bf00      	nop
 801092a:	3718      	adds	r7, #24
 801092c:	46bd      	mov	sp, r7
 801092e:	bd80      	pop	{r7, pc}
 8010930:	200041e4 	.word	0x200041e4
 8010934:	200041dc 	.word	0x200041dc

08010938 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010938:	b480      	push	{r7}
 801093a:	b085      	sub	sp, #20
 801093c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801093e:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8010942:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010944:	4b27      	ldr	r3, [pc, #156]	; (80109e4 <prvHeapInit+0xac>)
 8010946:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	f003 0307 	and.w	r3, r3, #7
 801094e:	2b00      	cmp	r3, #0
 8010950:	d00c      	beq.n	801096c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	3307      	adds	r3, #7
 8010956:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	f023 0307 	bic.w	r3, r3, #7
 801095e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010960:	68ba      	ldr	r2, [r7, #8]
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	1ad3      	subs	r3, r2, r3
 8010966:	4a1f      	ldr	r2, [pc, #124]	; (80109e4 <prvHeapInit+0xac>)
 8010968:	4413      	add	r3, r2
 801096a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010970:	4a1d      	ldr	r2, [pc, #116]	; (80109e8 <prvHeapInit+0xb0>)
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010976:	4b1c      	ldr	r3, [pc, #112]	; (80109e8 <prvHeapInit+0xb0>)
 8010978:	2200      	movs	r2, #0
 801097a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	68ba      	ldr	r2, [r7, #8]
 8010980:	4413      	add	r3, r2
 8010982:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010984:	2208      	movs	r2, #8
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	1a9b      	subs	r3, r3, r2
 801098a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	f023 0307 	bic.w	r3, r3, #7
 8010992:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	4a15      	ldr	r2, [pc, #84]	; (80109ec <prvHeapInit+0xb4>)
 8010998:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801099a:	4b14      	ldr	r3, [pc, #80]	; (80109ec <prvHeapInit+0xb4>)
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	2200      	movs	r2, #0
 80109a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80109a2:	4b12      	ldr	r3, [pc, #72]	; (80109ec <prvHeapInit+0xb4>)
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	2200      	movs	r2, #0
 80109a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80109ae:	683b      	ldr	r3, [r7, #0]
 80109b0:	68fa      	ldr	r2, [r7, #12]
 80109b2:	1ad2      	subs	r2, r2, r3
 80109b4:	683b      	ldr	r3, [r7, #0]
 80109b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80109b8:	4b0c      	ldr	r3, [pc, #48]	; (80109ec <prvHeapInit+0xb4>)
 80109ba:	681a      	ldr	r2, [r3, #0]
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80109c0:	683b      	ldr	r3, [r7, #0]
 80109c2:	685b      	ldr	r3, [r3, #4]
 80109c4:	4a0a      	ldr	r2, [pc, #40]	; (80109f0 <prvHeapInit+0xb8>)
 80109c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	685b      	ldr	r3, [r3, #4]
 80109cc:	4a09      	ldr	r2, [pc, #36]	; (80109f4 <prvHeapInit+0xbc>)
 80109ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80109d0:	4b09      	ldr	r3, [pc, #36]	; (80109f8 <prvHeapInit+0xc0>)
 80109d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80109d6:	601a      	str	r2, [r3, #0]
}
 80109d8:	bf00      	nop
 80109da:	3714      	adds	r7, #20
 80109dc:	46bd      	mov	sp, r7
 80109de:	bc80      	pop	{r7}
 80109e0:	4770      	bx	lr
 80109e2:	bf00      	nop
 80109e4:	200012f0 	.word	0x200012f0
 80109e8:	200041d0 	.word	0x200041d0
 80109ec:	200041d8 	.word	0x200041d8
 80109f0:	200041e0 	.word	0x200041e0
 80109f4:	200041dc 	.word	0x200041dc
 80109f8:	200041e4 	.word	0x200041e4

080109fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80109fc:	b480      	push	{r7}
 80109fe:	b085      	sub	sp, #20
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010a04:	4b27      	ldr	r3, [pc, #156]	; (8010aa4 <prvInsertBlockIntoFreeList+0xa8>)
 8010a06:	60fb      	str	r3, [r7, #12]
 8010a08:	e002      	b.n	8010a10 <prvInsertBlockIntoFreeList+0x14>
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	60fb      	str	r3, [r7, #12]
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	687a      	ldr	r2, [r7, #4]
 8010a16:	429a      	cmp	r2, r3
 8010a18:	d8f7      	bhi.n	8010a0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	685b      	ldr	r3, [r3, #4]
 8010a22:	68ba      	ldr	r2, [r7, #8]
 8010a24:	4413      	add	r3, r2
 8010a26:	687a      	ldr	r2, [r7, #4]
 8010a28:	429a      	cmp	r2, r3
 8010a2a:	d108      	bne.n	8010a3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	685a      	ldr	r2, [r3, #4]
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	685b      	ldr	r3, [r3, #4]
 8010a34:	441a      	add	r2, r3
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	685b      	ldr	r3, [r3, #4]
 8010a46:	68ba      	ldr	r2, [r7, #8]
 8010a48:	441a      	add	r2, r3
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	d118      	bne.n	8010a84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	681a      	ldr	r2, [r3, #0]
 8010a56:	4b14      	ldr	r3, [pc, #80]	; (8010aa8 <prvInsertBlockIntoFreeList+0xac>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	429a      	cmp	r2, r3
 8010a5c:	d00d      	beq.n	8010a7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	685a      	ldr	r2, [r3, #4]
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	685b      	ldr	r3, [r3, #4]
 8010a68:	441a      	add	r2, r3
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	681a      	ldr	r2, [r3, #0]
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	601a      	str	r2, [r3, #0]
 8010a78:	e008      	b.n	8010a8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010a7a:	4b0b      	ldr	r3, [pc, #44]	; (8010aa8 <prvInsertBlockIntoFreeList+0xac>)
 8010a7c:	681a      	ldr	r2, [r3, #0]
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	601a      	str	r2, [r3, #0]
 8010a82:	e003      	b.n	8010a8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	681a      	ldr	r2, [r3, #0]
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010a8c:	68fa      	ldr	r2, [r7, #12]
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	429a      	cmp	r2, r3
 8010a92:	d002      	beq.n	8010a9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	687a      	ldr	r2, [r7, #4]
 8010a98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010a9a:	bf00      	nop
 8010a9c:	3714      	adds	r7, #20
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bc80      	pop	{r7}
 8010aa2:	4770      	bx	lr
 8010aa4:	200041d0 	.word	0x200041d0
 8010aa8:	200041d8 	.word	0x200041d8

08010aac <send_function>:
/*
 * -- Insert your variables declaration here --
 */
/* USER CODE BEGIN 0 */

void send_function(){
 8010aac:	b580      	push	{r7, lr}
 8010aae:	af00      	add	r7, sp, #0
	 if(Appli_state == APPLICATION_READY ){
 8010ab0:	4b05      	ldr	r3, [pc, #20]	; (8010ac8 <send_function+0x1c>)
 8010ab2:	781b      	ldrb	r3, [r3, #0]
 8010ab4:	2b02      	cmp	r3, #2
 8010ab6:	d104      	bne.n	8010ac2 <send_function+0x16>
		USBH_CDC_Transmit(&hUsbHostFS,read_info,6);
 8010ab8:	2206      	movs	r2, #6
 8010aba:	4904      	ldr	r1, [pc, #16]	; (8010acc <send_function+0x20>)
 8010abc:	4804      	ldr	r0, [pc, #16]	; (8010ad0 <send_function+0x24>)
 8010abe:	f7f6 fee1 	bl	8007884 <USBH_CDC_Transmit>
	  }
}
 8010ac2:	bf00      	nop
 8010ac4:	bd80      	pop	{r7, pc}
 8010ac6:	bf00      	nop
 8010ac8:	200045dc 	.word	0x200045dc
 8010acc:	20000080 	.word	0x20000080
 8010ad0:	200041fc 	.word	0x200041fc

08010ad4 <USBH_CDC_TransmitCallback>:
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */

void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b082      	sub	sp, #8
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
  USBH_CDC_Receive(phost,usb_rx_buf,1);
 8010adc:	2201      	movs	r2, #1
 8010ade:	4904      	ldr	r1, [pc, #16]	; (8010af0 <USBH_CDC_TransmitCallback+0x1c>)
 8010ae0:	6878      	ldr	r0, [r7, #4]
 8010ae2:	f7f6 ff09 	bl	80078f8 <USBH_CDC_Receive>
}
 8010ae6:	bf00      	nop
 8010ae8:	3708      	adds	r7, #8
 8010aea:	46bd      	mov	sp, r7
 8010aec:	bd80      	pop	{r7, pc}
 8010aee:	bf00      	nop
 8010af0:	200041e8 	.word	0x200041e8

08010af4 <USBH_CDC_ReceiveCallback>:

void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8010af4:	b480      	push	{r7}
 8010af6:	b083      	sub	sp, #12
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]

}
 8010afc:	bf00      	nop
 8010afe:	370c      	adds	r7, #12
 8010b00:	46bd      	mov	sp, r7
 8010b02:	bc80      	pop	{r7}
 8010b04:	4770      	bx	lr
	...

08010b08 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010b0c:	2201      	movs	r2, #1
 8010b0e:	490e      	ldr	r1, [pc, #56]	; (8010b48 <MX_USB_HOST_Init+0x40>)
 8010b10:	480e      	ldr	r0, [pc, #56]	; (8010b4c <MX_USB_HOST_Init+0x44>)
 8010b12:	f7f7 f82f 	bl	8007b74 <USBH_Init>
 8010b16:	4603      	mov	r3, r0
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d001      	beq.n	8010b20 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010b1c:	f7f0 f8a8 	bl	8000c70 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8010b20:	490b      	ldr	r1, [pc, #44]	; (8010b50 <MX_USB_HOST_Init+0x48>)
 8010b22:	480a      	ldr	r0, [pc, #40]	; (8010b4c <MX_USB_HOST_Init+0x44>)
 8010b24:	f7f7 f8d3 	bl	8007cce <USBH_RegisterClass>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d001      	beq.n	8010b32 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8010b2e:	f7f0 f89f 	bl	8000c70 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010b32:	4806      	ldr	r0, [pc, #24]	; (8010b4c <MX_USB_HOST_Init+0x44>)
 8010b34:	f7f7 f955 	bl	8007de2 <USBH_Start>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d001      	beq.n	8010b42 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8010b3e:	f7f0 f897 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010b42:	bf00      	nop
 8010b44:	bd80      	pop	{r7, pc}
 8010b46:	bf00      	nop
 8010b48:	08010b55 	.word	0x08010b55
 8010b4c:	200041fc 	.word	0x200041fc
 8010b50:	2000005c 	.word	0x2000005c

08010b54 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b082      	sub	sp, #8
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
 8010b5c:	460b      	mov	r3, r1
 8010b5e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010b60:	78fb      	ldrb	r3, [r7, #3]
 8010b62:	3b01      	subs	r3, #1
 8010b64:	2b04      	cmp	r3, #4
 8010b66:	d82e      	bhi.n	8010bc6 <USBH_UserProcess+0x72>
 8010b68:	a201      	add	r2, pc, #4	; (adr r2, 8010b70 <USBH_UserProcess+0x1c>)
 8010b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b6e:	bf00      	nop
 8010b70:	08010bc7 	.word	0x08010bc7
 8010b74:	08010b9b 	.word	0x08010b9b
 8010b78:	08010bc7 	.word	0x08010bc7
 8010b7c:	08010bb1 	.word	0x08010bb1
 8010b80:	08010b85 	.word	0x08010b85
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010b84:	4b12      	ldr	r3, [pc, #72]	; (8010bd0 <USBH_UserProcess+0x7c>)
 8010b86:	2203      	movs	r2, #3
 8010b88:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_DISCONNECT, 0);
 8010b8a:	4b12      	ldr	r3, [pc, #72]	; (8010bd4 <USBH_UserProcess+0x80>)
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	2200      	movs	r2, #0
 8010b90:	2103      	movs	r1, #3
 8010b92:	4618      	mov	r0, r3
 8010b94:	f7fd fe1c 	bl	800e7d0 <osMessagePut>
  break;
 8010b98:	e016      	b.n	8010bc8 <USBH_UserProcess+0x74>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010b9a:	4b0d      	ldr	r3, [pc, #52]	; (8010bd0 <USBH_UserProcess+0x7c>)
 8010b9c:	2202      	movs	r2, #2
 8010b9e:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_READY, 0);
 8010ba0:	4b0c      	ldr	r3, [pc, #48]	; (8010bd4 <USBH_UserProcess+0x80>)
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	2102      	movs	r1, #2
 8010ba8:	4618      	mov	r0, r3
 8010baa:	f7fd fe11 	bl	800e7d0 <osMessagePut>
  break;
 8010bae:	e00b      	b.n	8010bc8 <USBH_UserProcess+0x74>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010bb0:	4b07      	ldr	r3, [pc, #28]	; (8010bd0 <USBH_UserProcess+0x7c>)
 8010bb2:	2201      	movs	r2, #1
 8010bb4:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_START, 0);
 8010bb6:	4b07      	ldr	r3, [pc, #28]	; (8010bd4 <USBH_UserProcess+0x80>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	2200      	movs	r2, #0
 8010bbc:	2101      	movs	r1, #1
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	f7fd fe06 	bl	800e7d0 <osMessagePut>
  break;
 8010bc4:	e000      	b.n	8010bc8 <USBH_UserProcess+0x74>

  default:
  break;
 8010bc6:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8010bc8:	bf00      	nop
 8010bca:	3708      	adds	r7, #8
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	bd80      	pop	{r7, pc}
 8010bd0:	200045dc 	.word	0x200045dc
 8010bd4:	200004ac 	.word	0x200004ac

08010bd8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b084      	sub	sp, #16
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
  if(hcdHandle->Instance==USB_OTG_FS)
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010be8:	d113      	bne.n	8010c12 <HAL_HCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010bea:	4b0c      	ldr	r3, [pc, #48]	; (8010c1c <HAL_HCD_MspInit+0x44>)
 8010bec:	695b      	ldr	r3, [r3, #20]
 8010bee:	4a0b      	ldr	r2, [pc, #44]	; (8010c1c <HAL_HCD_MspInit+0x44>)
 8010bf0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010bf4:	6153      	str	r3, [r2, #20]
 8010bf6:	4b09      	ldr	r3, [pc, #36]	; (8010c1c <HAL_HCD_MspInit+0x44>)
 8010bf8:	695b      	ldr	r3, [r3, #20]
 8010bfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010bfe:	60fb      	str	r3, [r7, #12]
 8010c00:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010c02:	2200      	movs	r2, #0
 8010c04:	2105      	movs	r1, #5
 8010c06:	2043      	movs	r0, #67	; 0x43
 8010c08:	f7f0 ff1b 	bl	8001a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010c0c:	2043      	movs	r0, #67	; 0x43
 8010c0e:	f7f0 ff34 	bl	8001a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010c12:	bf00      	nop
 8010c14:	3710      	adds	r7, #16
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bd80      	pop	{r7, pc}
 8010c1a:	bf00      	nop
 8010c1c:	40021000 	.word	0x40021000

08010c20 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b082      	sub	sp, #8
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f7f7 fc58 	bl	80084e4 <USBH_LL_IncTimer>
}
 8010c34:	bf00      	nop
 8010c36:	3708      	adds	r7, #8
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}

08010c3c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b082      	sub	sp, #8
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f7f7 fc9b 	bl	8008586 <USBH_LL_Connect>
}
 8010c50:	bf00      	nop
 8010c52:	3708      	adds	r7, #8
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}

08010c58 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b082      	sub	sp, #8
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010c66:	4618      	mov	r0, r3
 8010c68:	f7f7 fcb0 	bl	80085cc <USBH_LL_Disconnect>
}
 8010c6c:	bf00      	nop
 8010c6e:	3708      	adds	r7, #8
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd80      	pop	{r7, pc}

08010c74 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b082      	sub	sp, #8
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
 8010c7c:	460b      	mov	r3, r1
 8010c7e:	70fb      	strb	r3, [r7, #3]
 8010c80:	4613      	mov	r3, r2
 8010c82:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f7f7 fce5 	bl	800865a <USBH_LL_NotifyURBChange>
#endif
}
 8010c90:	bf00      	nop
 8010c92:	3708      	adds	r7, #8
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}

08010c98 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b082      	sub	sp, #8
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	f7f7 fc46 	bl	8008538 <USBH_LL_PortEnabled>
}
 8010cac:	bf00      	nop
 8010cae:	3708      	adds	r7, #8
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	bd80      	pop	{r7, pc}

08010cb4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b082      	sub	sp, #8
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	f7f7 fc52 	bl	800856c <USBH_LL_PortDisabled>
}
 8010cc8:	bf00      	nop
 8010cca:	3708      	adds	r7, #8
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	bd80      	pop	{r7, pc}

08010cd0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b082      	sub	sp, #8
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8010cde:	2b01      	cmp	r3, #1
 8010ce0:	d127      	bne.n	8010d32 <USBH_LL_Init+0x62>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010ce2:	4a16      	ldr	r2, [pc, #88]	; (8010d3c <USBH_LL_Init+0x6c>)
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	4a13      	ldr	r2, [pc, #76]	; (8010d3c <USBH_LL_Init+0x6c>)
 8010cee:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010cf2:	4b12      	ldr	r3, [pc, #72]	; (8010d3c <USBH_LL_Init+0x6c>)
 8010cf4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010cf8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8010cfa:	4b10      	ldr	r3, [pc, #64]	; (8010d3c <USBH_LL_Init+0x6c>)
 8010cfc:	2208      	movs	r2, #8
 8010cfe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010d00:	4b0e      	ldr	r3, [pc, #56]	; (8010d3c <USBH_LL_Init+0x6c>)
 8010d02:	2201      	movs	r2, #1
 8010d04:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010d06:	4b0d      	ldr	r3, [pc, #52]	; (8010d3c <USBH_LL_Init+0x6c>)
 8010d08:	2202      	movs	r2, #2
 8010d0a:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8010d0c:	4b0b      	ldr	r3, [pc, #44]	; (8010d3c <USBH_LL_Init+0x6c>)
 8010d0e:	2201      	movs	r2, #1
 8010d10:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010d12:	480a      	ldr	r0, [pc, #40]	; (8010d3c <USBH_LL_Init+0x6c>)
 8010d14:	f7f1 f99e 	bl	8002054 <HAL_HCD_Init>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d001      	beq.n	8010d22 <USBH_LL_Init+0x52>
  {
    Error_Handler( );
 8010d1e:	f7ef ffa7 	bl	8000c70 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010d22:	4806      	ldr	r0, [pc, #24]	; (8010d3c <USBH_LL_Init+0x6c>)
 8010d24:	f7f1 fd74 	bl	8002810 <HAL_HCD_GetCurrentFrame>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	4619      	mov	r1, r3
 8010d2c:	6878      	ldr	r0, [r7, #4]
 8010d2e:	f7f7 fbcb 	bl	80084c8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010d32:	2300      	movs	r3, #0
}
 8010d34:	4618      	mov	r0, r3
 8010d36:	3708      	adds	r7, #8
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bd80      	pop	{r7, pc}
 8010d3c:	200045e0 	.word	0x200045e0

08010d40 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b084      	sub	sp, #16
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d48:	2300      	movs	r3, #0
 8010d4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8010d56:	4618      	mov	r0, r3
 8010d58:	f7f1 fce6 	bl	8002728 <HAL_HCD_Start>
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010d60:	7bfb      	ldrb	r3, [r7, #15]
 8010d62:	4618      	mov	r0, r3
 8010d64:	f000 f95a 	bl	801101c <USBH_Get_USB_Status>
 8010d68:	4603      	mov	r3, r0
 8010d6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d6e:	4618      	mov	r0, r3
 8010d70:	3710      	adds	r7, #16
 8010d72:	46bd      	mov	sp, r7
 8010d74:	bd80      	pop	{r7, pc}

08010d76 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010d76:	b580      	push	{r7, lr}
 8010d78:	b084      	sub	sp, #16
 8010d7a:	af00      	add	r7, sp, #0
 8010d7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d7e:	2300      	movs	r3, #0
 8010d80:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010d82:	2300      	movs	r3, #0
 8010d84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	f7f1 fcee 	bl	800276e <HAL_HCD_Stop>
 8010d92:	4603      	mov	r3, r0
 8010d94:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010d96:	7bfb      	ldrb	r3, [r7, #15]
 8010d98:	4618      	mov	r0, r3
 8010d9a:	f000 f93f 	bl	801101c <USBH_Get_USB_Status>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010da2:	7bbb      	ldrb	r3, [r7, #14]
}
 8010da4:	4618      	mov	r0, r3
 8010da6:	3710      	adds	r7, #16
 8010da8:	46bd      	mov	sp, r7
 8010daa:	bd80      	pop	{r7, pc}

08010dac <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b084      	sub	sp, #16
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010db4:	2301      	movs	r3, #1
 8010db6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f7f1 fd34 	bl	800282c <HAL_HCD_GetCurrentSpeed>
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	2b02      	cmp	r3, #2
 8010dc8:	d00c      	beq.n	8010de4 <USBH_LL_GetSpeed+0x38>
 8010dca:	2b02      	cmp	r3, #2
 8010dcc:	d80d      	bhi.n	8010dea <USBH_LL_GetSpeed+0x3e>
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d002      	beq.n	8010dd8 <USBH_LL_GetSpeed+0x2c>
 8010dd2:	2b01      	cmp	r3, #1
 8010dd4:	d003      	beq.n	8010dde <USBH_LL_GetSpeed+0x32>
 8010dd6:	e008      	b.n	8010dea <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	73fb      	strb	r3, [r7, #15]
    break;
 8010ddc:	e008      	b.n	8010df0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010dde:	2301      	movs	r3, #1
 8010de0:	73fb      	strb	r3, [r7, #15]
    break;
 8010de2:	e005      	b.n	8010df0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010de4:	2302      	movs	r3, #2
 8010de6:	73fb      	strb	r3, [r7, #15]
    break;
 8010de8:	e002      	b.n	8010df0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010dea:	2301      	movs	r3, #1
 8010dec:	73fb      	strb	r3, [r7, #15]
    break;
 8010dee:	bf00      	nop
  }
  return  speed;
 8010df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010df2:	4618      	mov	r0, r3
 8010df4:	3710      	adds	r7, #16
 8010df6:	46bd      	mov	sp, r7
 8010df8:	bd80      	pop	{r7, pc}

08010dfa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010dfa:	b580      	push	{r7, lr}
 8010dfc:	b084      	sub	sp, #16
 8010dfe:	af00      	add	r7, sp, #0
 8010e00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e02:	2300      	movs	r3, #0
 8010e04:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010e06:	2300      	movs	r3, #0
 8010e08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8010e10:	4618      	mov	r0, r3
 8010e12:	f7f1 fcc9 	bl	80027a8 <HAL_HCD_ResetPort>
 8010e16:	4603      	mov	r3, r0
 8010e18:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010e1a:	7bfb      	ldrb	r3, [r7, #15]
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	f000 f8fd 	bl	801101c <USBH_Get_USB_Status>
 8010e22:	4603      	mov	r3, r0
 8010e24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e26:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e28:	4618      	mov	r0, r3
 8010e2a:	3710      	adds	r7, #16
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	bd80      	pop	{r7, pc}

08010e30 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b082      	sub	sp, #8
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
 8010e38:	460b      	mov	r3, r1
 8010e3a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8010e42:	78fa      	ldrb	r2, [r7, #3]
 8010e44:	4611      	mov	r1, r2
 8010e46:	4618      	mov	r0, r3
 8010e48:	f7f1 fccf 	bl	80027ea <HAL_HCD_HC_GetXferCount>
 8010e4c:	4603      	mov	r3, r0
}
 8010e4e:	4618      	mov	r0, r3
 8010e50:	3708      	adds	r7, #8
 8010e52:	46bd      	mov	sp, r7
 8010e54:	bd80      	pop	{r7, pc}

08010e56 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010e56:	b590      	push	{r4, r7, lr}
 8010e58:	b089      	sub	sp, #36	; 0x24
 8010e5a:	af04      	add	r7, sp, #16
 8010e5c:	6078      	str	r0, [r7, #4]
 8010e5e:	4608      	mov	r0, r1
 8010e60:	4611      	mov	r1, r2
 8010e62:	461a      	mov	r2, r3
 8010e64:	4603      	mov	r3, r0
 8010e66:	70fb      	strb	r3, [r7, #3]
 8010e68:	460b      	mov	r3, r1
 8010e6a:	70bb      	strb	r3, [r7, #2]
 8010e6c:	4613      	mov	r3, r2
 8010e6e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e70:	2300      	movs	r3, #0
 8010e72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010e74:	2300      	movs	r3, #0
 8010e76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010e7e:	787c      	ldrb	r4, [r7, #1]
 8010e80:	78ba      	ldrb	r2, [r7, #2]
 8010e82:	78f9      	ldrb	r1, [r7, #3]
 8010e84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010e86:	9302      	str	r3, [sp, #8]
 8010e88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010e8c:	9301      	str	r3, [sp, #4]
 8010e8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010e92:	9300      	str	r3, [sp, #0]
 8010e94:	4623      	mov	r3, r4
 8010e96:	f7f1 f93f 	bl	8002118 <HAL_HCD_HC_Init>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010e9e:	7bfb      	ldrb	r3, [r7, #15]
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f000 f8bb 	bl	801101c <USBH_Get_USB_Status>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010eaa:	7bbb      	ldrb	r3, [r7, #14]
}
 8010eac:	4618      	mov	r0, r3
 8010eae:	3714      	adds	r7, #20
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd90      	pop	{r4, r7, pc}

08010eb4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b084      	sub	sp, #16
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
 8010ebc:	460b      	mov	r3, r1
 8010ebe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8010ece:	78fa      	ldrb	r2, [r7, #3]
 8010ed0:	4611      	mov	r1, r2
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f7f1 f9af 	bl	8002236 <HAL_HCD_HC_Halt>
 8010ed8:	4603      	mov	r3, r0
 8010eda:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010edc:	7bfb      	ldrb	r3, [r7, #15]
 8010ede:	4618      	mov	r0, r3
 8010ee0:	f000 f89c 	bl	801101c <USBH_Get_USB_Status>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ee8:	7bbb      	ldrb	r3, [r7, #14]
}
 8010eea:	4618      	mov	r0, r3
 8010eec:	3710      	adds	r7, #16
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd80      	pop	{r7, pc}

08010ef2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010ef2:	b590      	push	{r4, r7, lr}
 8010ef4:	b089      	sub	sp, #36	; 0x24
 8010ef6:	af04      	add	r7, sp, #16
 8010ef8:	6078      	str	r0, [r7, #4]
 8010efa:	4608      	mov	r0, r1
 8010efc:	4611      	mov	r1, r2
 8010efe:	461a      	mov	r2, r3
 8010f00:	4603      	mov	r3, r0
 8010f02:	70fb      	strb	r3, [r7, #3]
 8010f04:	460b      	mov	r3, r1
 8010f06:	70bb      	strb	r3, [r7, #2]
 8010f08:	4613      	mov	r3, r2
 8010f0a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010f10:	2300      	movs	r3, #0
 8010f12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010f1a:	787c      	ldrb	r4, [r7, #1]
 8010f1c:	78ba      	ldrb	r2, [r7, #2]
 8010f1e:	78f9      	ldrb	r1, [r7, #3]
 8010f20:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010f24:	9303      	str	r3, [sp, #12]
 8010f26:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010f28:	9302      	str	r3, [sp, #8]
 8010f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f2c:	9301      	str	r3, [sp, #4]
 8010f2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010f32:	9300      	str	r3, [sp, #0]
 8010f34:	4623      	mov	r3, r4
 8010f36:	f7f1 f9a1 	bl	800227c <HAL_HCD_HC_SubmitRequest>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010f3e:	7bfb      	ldrb	r3, [r7, #15]
 8010f40:	4618      	mov	r0, r3
 8010f42:	f000 f86b 	bl	801101c <USBH_Get_USB_Status>
 8010f46:	4603      	mov	r3, r0
 8010f48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	3714      	adds	r7, #20
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bd90      	pop	{r4, r7, pc}

08010f54 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b082      	sub	sp, #8
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
 8010f5c:	460b      	mov	r3, r1
 8010f5e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8010f66:	78fa      	ldrb	r2, [r7, #3]
 8010f68:	4611      	mov	r1, r2
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f7f1 fc2a 	bl	80027c4 <HAL_HCD_HC_GetURBState>
 8010f70:	4603      	mov	r3, r0
}
 8010f72:	4618      	mov	r0, r3
 8010f74:	3708      	adds	r7, #8
 8010f76:	46bd      	mov	sp, r7
 8010f78:	bd80      	pop	{r7, pc}

08010f7a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010f7a:	b580      	push	{r7, lr}
 8010f7c:	b082      	sub	sp, #8
 8010f7e:	af00      	add	r7, sp, #0
 8010f80:	6078      	str	r0, [r7, #4]
 8010f82:	460b      	mov	r3, r1
 8010f84:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8010f8c:	2b01      	cmp	r3, #1
 8010f8e:	d103      	bne.n	8010f98 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8010f90:	78fb      	ldrb	r3, [r7, #3]
 8010f92:	4618      	mov	r0, r3
 8010f94:	f000 f86e 	bl	8011074 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010f98:	20c8      	movs	r0, #200	; 0xc8
 8010f9a:	f7f0 fc79 	bl	8001890 <HAL_Delay>
  return USBH_OK;
 8010f9e:	2300      	movs	r3, #0
}
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	3708      	adds	r7, #8
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	bd80      	pop	{r7, pc}

08010fa8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010fa8:	b480      	push	{r7}
 8010faa:	b085      	sub	sp, #20
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	6078      	str	r0, [r7, #4]
 8010fb0:	460b      	mov	r3, r1
 8010fb2:	70fb      	strb	r3, [r7, #3]
 8010fb4:	4613      	mov	r3, r2
 8010fb6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8010fbe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010fc0:	78fb      	ldrb	r3, [r7, #3]
 8010fc2:	68fa      	ldr	r2, [r7, #12]
 8010fc4:	212c      	movs	r1, #44	; 0x2c
 8010fc6:	fb01 f303 	mul.w	r3, r1, r3
 8010fca:	4413      	add	r3, r2
 8010fcc:	333b      	adds	r3, #59	; 0x3b
 8010fce:	781b      	ldrb	r3, [r3, #0]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d009      	beq.n	8010fe8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010fd4:	78fb      	ldrb	r3, [r7, #3]
 8010fd6:	68fa      	ldr	r2, [r7, #12]
 8010fd8:	212c      	movs	r1, #44	; 0x2c
 8010fda:	fb01 f303 	mul.w	r3, r1, r3
 8010fde:	4413      	add	r3, r2
 8010fe0:	3354      	adds	r3, #84	; 0x54
 8010fe2:	78ba      	ldrb	r2, [r7, #2]
 8010fe4:	701a      	strb	r2, [r3, #0]
 8010fe6:	e008      	b.n	8010ffa <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010fe8:	78fb      	ldrb	r3, [r7, #3]
 8010fea:	68fa      	ldr	r2, [r7, #12]
 8010fec:	212c      	movs	r1, #44	; 0x2c
 8010fee:	fb01 f303 	mul.w	r3, r1, r3
 8010ff2:	4413      	add	r3, r2
 8010ff4:	3355      	adds	r3, #85	; 0x55
 8010ff6:	78ba      	ldrb	r2, [r7, #2]
 8010ff8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010ffa:	2300      	movs	r3, #0
}
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	3714      	adds	r7, #20
 8011000:	46bd      	mov	sp, r7
 8011002:	bc80      	pop	{r7}
 8011004:	4770      	bx	lr

08011006 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8011006:	b580      	push	{r7, lr}
 8011008:	b082      	sub	sp, #8
 801100a:	af00      	add	r7, sp, #0
 801100c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801100e:	6878      	ldr	r0, [r7, #4]
 8011010:	f7f0 fc3e 	bl	8001890 <HAL_Delay>
}
 8011014:	bf00      	nop
 8011016:	3708      	adds	r7, #8
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}

0801101c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801101c:	b480      	push	{r7}
 801101e:	b085      	sub	sp, #20
 8011020:	af00      	add	r7, sp, #0
 8011022:	4603      	mov	r3, r0
 8011024:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011026:	2300      	movs	r3, #0
 8011028:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801102a:	79fb      	ldrb	r3, [r7, #7]
 801102c:	2b03      	cmp	r3, #3
 801102e:	d817      	bhi.n	8011060 <USBH_Get_USB_Status+0x44>
 8011030:	a201      	add	r2, pc, #4	; (adr r2, 8011038 <USBH_Get_USB_Status+0x1c>)
 8011032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011036:	bf00      	nop
 8011038:	08011049 	.word	0x08011049
 801103c:	0801104f 	.word	0x0801104f
 8011040:	08011055 	.word	0x08011055
 8011044:	0801105b 	.word	0x0801105b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011048:	2300      	movs	r3, #0
 801104a:	73fb      	strb	r3, [r7, #15]
    break;
 801104c:	e00b      	b.n	8011066 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801104e:	2302      	movs	r3, #2
 8011050:	73fb      	strb	r3, [r7, #15]
    break;
 8011052:	e008      	b.n	8011066 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011054:	2301      	movs	r3, #1
 8011056:	73fb      	strb	r3, [r7, #15]
    break;
 8011058:	e005      	b.n	8011066 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801105a:	2302      	movs	r3, #2
 801105c:	73fb      	strb	r3, [r7, #15]
    break;
 801105e:	e002      	b.n	8011066 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011060:	2302      	movs	r3, #2
 8011062:	73fb      	strb	r3, [r7, #15]
    break;
 8011064:	bf00      	nop
  }
  return usb_status;
 8011066:	7bfb      	ldrb	r3, [r7, #15]
}
 8011068:	4618      	mov	r0, r3
 801106a:	3714      	adds	r7, #20
 801106c:	46bd      	mov	sp, r7
 801106e:	bc80      	pop	{r7}
 8011070:	4770      	bx	lr
 8011072:	bf00      	nop

08011074 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8011074:	b580      	push	{r7, lr}
 8011076:	b084      	sub	sp, #16
 8011078:	af00      	add	r7, sp, #0
 801107a:	4603      	mov	r3, r0
 801107c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801107e:	79fb      	ldrb	r3, [r7, #7]
 8011080:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8011082:	79fb      	ldrb	r3, [r7, #7]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d102      	bne.n	801108e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8011088:	2301      	movs	r3, #1
 801108a:	73fb      	strb	r3, [r7, #15]
 801108c:	e001      	b.n	8011092 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801108e:	2300      	movs	r3, #0
 8011090:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,(GPIO_PinState)data);
 8011092:	7bfb      	ldrb	r3, [r7, #15]
 8011094:	461a      	mov	r2, r3
 8011096:	2101      	movs	r1, #1
 8011098:	4803      	ldr	r0, [pc, #12]	; (80110a8 <MX_DriverVbusFS+0x34>)
 801109a:	f7f0 ffc3 	bl	8002024 <HAL_GPIO_WritePin>
}
 801109e:	bf00      	nop
 80110a0:	3710      	adds	r7, #16
 80110a2:	46bd      	mov	sp, r7
 80110a4:	bd80      	pop	{r7, pc}
 80110a6:	bf00      	nop
 80110a8:	40010c00 	.word	0x40010c00

080110ac <__errno>:
 80110ac:	4b01      	ldr	r3, [pc, #4]	; (80110b4 <__errno+0x8>)
 80110ae:	6818      	ldr	r0, [r3, #0]
 80110b0:	4770      	bx	lr
 80110b2:	bf00      	nop
 80110b4:	20000088 	.word	0x20000088

080110b8 <__libc_init_array>:
 80110b8:	b570      	push	{r4, r5, r6, lr}
 80110ba:	2600      	movs	r6, #0
 80110bc:	4d0c      	ldr	r5, [pc, #48]	; (80110f0 <__libc_init_array+0x38>)
 80110be:	4c0d      	ldr	r4, [pc, #52]	; (80110f4 <__libc_init_array+0x3c>)
 80110c0:	1b64      	subs	r4, r4, r5
 80110c2:	10a4      	asrs	r4, r4, #2
 80110c4:	42a6      	cmp	r6, r4
 80110c6:	d109      	bne.n	80110dc <__libc_init_array+0x24>
 80110c8:	f000 fd16 	bl	8011af8 <_init>
 80110cc:	2600      	movs	r6, #0
 80110ce:	4d0a      	ldr	r5, [pc, #40]	; (80110f8 <__libc_init_array+0x40>)
 80110d0:	4c0a      	ldr	r4, [pc, #40]	; (80110fc <__libc_init_array+0x44>)
 80110d2:	1b64      	subs	r4, r4, r5
 80110d4:	10a4      	asrs	r4, r4, #2
 80110d6:	42a6      	cmp	r6, r4
 80110d8:	d105      	bne.n	80110e6 <__libc_init_array+0x2e>
 80110da:	bd70      	pop	{r4, r5, r6, pc}
 80110dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80110e0:	4798      	blx	r3
 80110e2:	3601      	adds	r6, #1
 80110e4:	e7ee      	b.n	80110c4 <__libc_init_array+0xc>
 80110e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80110ea:	4798      	blx	r3
 80110ec:	3601      	adds	r6, #1
 80110ee:	e7f2      	b.n	80110d6 <__libc_init_array+0x1e>
 80110f0:	080122b8 	.word	0x080122b8
 80110f4:	080122b8 	.word	0x080122b8
 80110f8:	080122b8 	.word	0x080122b8
 80110fc:	080122bc 	.word	0x080122bc

08011100 <__retarget_lock_acquire_recursive>:
 8011100:	4770      	bx	lr

08011102 <__retarget_lock_release_recursive>:
 8011102:	4770      	bx	lr

08011104 <malloc>:
 8011104:	4b02      	ldr	r3, [pc, #8]	; (8011110 <malloc+0xc>)
 8011106:	4601      	mov	r1, r0
 8011108:	6818      	ldr	r0, [r3, #0]
 801110a:	f000 b889 	b.w	8011220 <_malloc_r>
 801110e:	bf00      	nop
 8011110:	20000088 	.word	0x20000088

08011114 <free>:
 8011114:	4b02      	ldr	r3, [pc, #8]	; (8011120 <free+0xc>)
 8011116:	4601      	mov	r1, r0
 8011118:	6818      	ldr	r0, [r3, #0]
 801111a:	f000 b819 	b.w	8011150 <_free_r>
 801111e:	bf00      	nop
 8011120:	20000088 	.word	0x20000088

08011124 <memcpy>:
 8011124:	440a      	add	r2, r1
 8011126:	4291      	cmp	r1, r2
 8011128:	f100 33ff 	add.w	r3, r0, #4294967295
 801112c:	d100      	bne.n	8011130 <memcpy+0xc>
 801112e:	4770      	bx	lr
 8011130:	b510      	push	{r4, lr}
 8011132:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011136:	4291      	cmp	r1, r2
 8011138:	f803 4f01 	strb.w	r4, [r3, #1]!
 801113c:	d1f9      	bne.n	8011132 <memcpy+0xe>
 801113e:	bd10      	pop	{r4, pc}

08011140 <memset>:
 8011140:	4603      	mov	r3, r0
 8011142:	4402      	add	r2, r0
 8011144:	4293      	cmp	r3, r2
 8011146:	d100      	bne.n	801114a <memset+0xa>
 8011148:	4770      	bx	lr
 801114a:	f803 1b01 	strb.w	r1, [r3], #1
 801114e:	e7f9      	b.n	8011144 <memset+0x4>

08011150 <_free_r>:
 8011150:	b538      	push	{r3, r4, r5, lr}
 8011152:	4605      	mov	r5, r0
 8011154:	2900      	cmp	r1, #0
 8011156:	d040      	beq.n	80111da <_free_r+0x8a>
 8011158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801115c:	1f0c      	subs	r4, r1, #4
 801115e:	2b00      	cmp	r3, #0
 8011160:	bfb8      	it	lt
 8011162:	18e4      	addlt	r4, r4, r3
 8011164:	f000 f96a 	bl	801143c <__malloc_lock>
 8011168:	4a1c      	ldr	r2, [pc, #112]	; (80111dc <_free_r+0x8c>)
 801116a:	6813      	ldr	r3, [r2, #0]
 801116c:	b933      	cbnz	r3, 801117c <_free_r+0x2c>
 801116e:	6063      	str	r3, [r4, #4]
 8011170:	6014      	str	r4, [r2, #0]
 8011172:	4628      	mov	r0, r5
 8011174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011178:	f000 b966 	b.w	8011448 <__malloc_unlock>
 801117c:	42a3      	cmp	r3, r4
 801117e:	d908      	bls.n	8011192 <_free_r+0x42>
 8011180:	6820      	ldr	r0, [r4, #0]
 8011182:	1821      	adds	r1, r4, r0
 8011184:	428b      	cmp	r3, r1
 8011186:	bf01      	itttt	eq
 8011188:	6819      	ldreq	r1, [r3, #0]
 801118a:	685b      	ldreq	r3, [r3, #4]
 801118c:	1809      	addeq	r1, r1, r0
 801118e:	6021      	streq	r1, [r4, #0]
 8011190:	e7ed      	b.n	801116e <_free_r+0x1e>
 8011192:	461a      	mov	r2, r3
 8011194:	685b      	ldr	r3, [r3, #4]
 8011196:	b10b      	cbz	r3, 801119c <_free_r+0x4c>
 8011198:	42a3      	cmp	r3, r4
 801119a:	d9fa      	bls.n	8011192 <_free_r+0x42>
 801119c:	6811      	ldr	r1, [r2, #0]
 801119e:	1850      	adds	r0, r2, r1
 80111a0:	42a0      	cmp	r0, r4
 80111a2:	d10b      	bne.n	80111bc <_free_r+0x6c>
 80111a4:	6820      	ldr	r0, [r4, #0]
 80111a6:	4401      	add	r1, r0
 80111a8:	1850      	adds	r0, r2, r1
 80111aa:	4283      	cmp	r3, r0
 80111ac:	6011      	str	r1, [r2, #0]
 80111ae:	d1e0      	bne.n	8011172 <_free_r+0x22>
 80111b0:	6818      	ldr	r0, [r3, #0]
 80111b2:	685b      	ldr	r3, [r3, #4]
 80111b4:	4401      	add	r1, r0
 80111b6:	6011      	str	r1, [r2, #0]
 80111b8:	6053      	str	r3, [r2, #4]
 80111ba:	e7da      	b.n	8011172 <_free_r+0x22>
 80111bc:	d902      	bls.n	80111c4 <_free_r+0x74>
 80111be:	230c      	movs	r3, #12
 80111c0:	602b      	str	r3, [r5, #0]
 80111c2:	e7d6      	b.n	8011172 <_free_r+0x22>
 80111c4:	6820      	ldr	r0, [r4, #0]
 80111c6:	1821      	adds	r1, r4, r0
 80111c8:	428b      	cmp	r3, r1
 80111ca:	bf01      	itttt	eq
 80111cc:	6819      	ldreq	r1, [r3, #0]
 80111ce:	685b      	ldreq	r3, [r3, #4]
 80111d0:	1809      	addeq	r1, r1, r0
 80111d2:	6021      	streq	r1, [r4, #0]
 80111d4:	6063      	str	r3, [r4, #4]
 80111d6:	6054      	str	r4, [r2, #4]
 80111d8:	e7cb      	b.n	8011172 <_free_r+0x22>
 80111da:	bd38      	pop	{r3, r4, r5, pc}
 80111dc:	200048e8 	.word	0x200048e8

080111e0 <sbrk_aligned>:
 80111e0:	b570      	push	{r4, r5, r6, lr}
 80111e2:	4e0e      	ldr	r6, [pc, #56]	; (801121c <sbrk_aligned+0x3c>)
 80111e4:	460c      	mov	r4, r1
 80111e6:	6831      	ldr	r1, [r6, #0]
 80111e8:	4605      	mov	r5, r0
 80111ea:	b911      	cbnz	r1, 80111f2 <sbrk_aligned+0x12>
 80111ec:	f000 f8f6 	bl	80113dc <_sbrk_r>
 80111f0:	6030      	str	r0, [r6, #0]
 80111f2:	4621      	mov	r1, r4
 80111f4:	4628      	mov	r0, r5
 80111f6:	f000 f8f1 	bl	80113dc <_sbrk_r>
 80111fa:	1c43      	adds	r3, r0, #1
 80111fc:	d00a      	beq.n	8011214 <sbrk_aligned+0x34>
 80111fe:	1cc4      	adds	r4, r0, #3
 8011200:	f024 0403 	bic.w	r4, r4, #3
 8011204:	42a0      	cmp	r0, r4
 8011206:	d007      	beq.n	8011218 <sbrk_aligned+0x38>
 8011208:	1a21      	subs	r1, r4, r0
 801120a:	4628      	mov	r0, r5
 801120c:	f000 f8e6 	bl	80113dc <_sbrk_r>
 8011210:	3001      	adds	r0, #1
 8011212:	d101      	bne.n	8011218 <sbrk_aligned+0x38>
 8011214:	f04f 34ff 	mov.w	r4, #4294967295
 8011218:	4620      	mov	r0, r4
 801121a:	bd70      	pop	{r4, r5, r6, pc}
 801121c:	200048ec 	.word	0x200048ec

08011220 <_malloc_r>:
 8011220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011224:	1ccd      	adds	r5, r1, #3
 8011226:	f025 0503 	bic.w	r5, r5, #3
 801122a:	3508      	adds	r5, #8
 801122c:	2d0c      	cmp	r5, #12
 801122e:	bf38      	it	cc
 8011230:	250c      	movcc	r5, #12
 8011232:	2d00      	cmp	r5, #0
 8011234:	4607      	mov	r7, r0
 8011236:	db01      	blt.n	801123c <_malloc_r+0x1c>
 8011238:	42a9      	cmp	r1, r5
 801123a:	d905      	bls.n	8011248 <_malloc_r+0x28>
 801123c:	230c      	movs	r3, #12
 801123e:	2600      	movs	r6, #0
 8011240:	603b      	str	r3, [r7, #0]
 8011242:	4630      	mov	r0, r6
 8011244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011248:	4e2e      	ldr	r6, [pc, #184]	; (8011304 <_malloc_r+0xe4>)
 801124a:	f000 f8f7 	bl	801143c <__malloc_lock>
 801124e:	6833      	ldr	r3, [r6, #0]
 8011250:	461c      	mov	r4, r3
 8011252:	bb34      	cbnz	r4, 80112a2 <_malloc_r+0x82>
 8011254:	4629      	mov	r1, r5
 8011256:	4638      	mov	r0, r7
 8011258:	f7ff ffc2 	bl	80111e0 <sbrk_aligned>
 801125c:	1c43      	adds	r3, r0, #1
 801125e:	4604      	mov	r4, r0
 8011260:	d14d      	bne.n	80112fe <_malloc_r+0xde>
 8011262:	6834      	ldr	r4, [r6, #0]
 8011264:	4626      	mov	r6, r4
 8011266:	2e00      	cmp	r6, #0
 8011268:	d140      	bne.n	80112ec <_malloc_r+0xcc>
 801126a:	6823      	ldr	r3, [r4, #0]
 801126c:	4631      	mov	r1, r6
 801126e:	4638      	mov	r0, r7
 8011270:	eb04 0803 	add.w	r8, r4, r3
 8011274:	f000 f8b2 	bl	80113dc <_sbrk_r>
 8011278:	4580      	cmp	r8, r0
 801127a:	d13a      	bne.n	80112f2 <_malloc_r+0xd2>
 801127c:	6821      	ldr	r1, [r4, #0]
 801127e:	3503      	adds	r5, #3
 8011280:	1a6d      	subs	r5, r5, r1
 8011282:	f025 0503 	bic.w	r5, r5, #3
 8011286:	3508      	adds	r5, #8
 8011288:	2d0c      	cmp	r5, #12
 801128a:	bf38      	it	cc
 801128c:	250c      	movcc	r5, #12
 801128e:	4638      	mov	r0, r7
 8011290:	4629      	mov	r1, r5
 8011292:	f7ff ffa5 	bl	80111e0 <sbrk_aligned>
 8011296:	3001      	adds	r0, #1
 8011298:	d02b      	beq.n	80112f2 <_malloc_r+0xd2>
 801129a:	6823      	ldr	r3, [r4, #0]
 801129c:	442b      	add	r3, r5
 801129e:	6023      	str	r3, [r4, #0]
 80112a0:	e00e      	b.n	80112c0 <_malloc_r+0xa0>
 80112a2:	6822      	ldr	r2, [r4, #0]
 80112a4:	1b52      	subs	r2, r2, r5
 80112a6:	d41e      	bmi.n	80112e6 <_malloc_r+0xc6>
 80112a8:	2a0b      	cmp	r2, #11
 80112aa:	d916      	bls.n	80112da <_malloc_r+0xba>
 80112ac:	1961      	adds	r1, r4, r5
 80112ae:	42a3      	cmp	r3, r4
 80112b0:	6025      	str	r5, [r4, #0]
 80112b2:	bf18      	it	ne
 80112b4:	6059      	strne	r1, [r3, #4]
 80112b6:	6863      	ldr	r3, [r4, #4]
 80112b8:	bf08      	it	eq
 80112ba:	6031      	streq	r1, [r6, #0]
 80112bc:	5162      	str	r2, [r4, r5]
 80112be:	604b      	str	r3, [r1, #4]
 80112c0:	4638      	mov	r0, r7
 80112c2:	f104 060b 	add.w	r6, r4, #11
 80112c6:	f000 f8bf 	bl	8011448 <__malloc_unlock>
 80112ca:	f026 0607 	bic.w	r6, r6, #7
 80112ce:	1d23      	adds	r3, r4, #4
 80112d0:	1af2      	subs	r2, r6, r3
 80112d2:	d0b6      	beq.n	8011242 <_malloc_r+0x22>
 80112d4:	1b9b      	subs	r3, r3, r6
 80112d6:	50a3      	str	r3, [r4, r2]
 80112d8:	e7b3      	b.n	8011242 <_malloc_r+0x22>
 80112da:	6862      	ldr	r2, [r4, #4]
 80112dc:	42a3      	cmp	r3, r4
 80112de:	bf0c      	ite	eq
 80112e0:	6032      	streq	r2, [r6, #0]
 80112e2:	605a      	strne	r2, [r3, #4]
 80112e4:	e7ec      	b.n	80112c0 <_malloc_r+0xa0>
 80112e6:	4623      	mov	r3, r4
 80112e8:	6864      	ldr	r4, [r4, #4]
 80112ea:	e7b2      	b.n	8011252 <_malloc_r+0x32>
 80112ec:	4634      	mov	r4, r6
 80112ee:	6876      	ldr	r6, [r6, #4]
 80112f0:	e7b9      	b.n	8011266 <_malloc_r+0x46>
 80112f2:	230c      	movs	r3, #12
 80112f4:	4638      	mov	r0, r7
 80112f6:	603b      	str	r3, [r7, #0]
 80112f8:	f000 f8a6 	bl	8011448 <__malloc_unlock>
 80112fc:	e7a1      	b.n	8011242 <_malloc_r+0x22>
 80112fe:	6025      	str	r5, [r4, #0]
 8011300:	e7de      	b.n	80112c0 <_malloc_r+0xa0>
 8011302:	bf00      	nop
 8011304:	200048e8 	.word	0x200048e8

08011308 <cleanup_glue>:
 8011308:	b538      	push	{r3, r4, r5, lr}
 801130a:	460c      	mov	r4, r1
 801130c:	6809      	ldr	r1, [r1, #0]
 801130e:	4605      	mov	r5, r0
 8011310:	b109      	cbz	r1, 8011316 <cleanup_glue+0xe>
 8011312:	f7ff fff9 	bl	8011308 <cleanup_glue>
 8011316:	4621      	mov	r1, r4
 8011318:	4628      	mov	r0, r5
 801131a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801131e:	f7ff bf17 	b.w	8011150 <_free_r>
	...

08011324 <_reclaim_reent>:
 8011324:	4b2c      	ldr	r3, [pc, #176]	; (80113d8 <_reclaim_reent+0xb4>)
 8011326:	b570      	push	{r4, r5, r6, lr}
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	4604      	mov	r4, r0
 801132c:	4283      	cmp	r3, r0
 801132e:	d051      	beq.n	80113d4 <_reclaim_reent+0xb0>
 8011330:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011332:	b143      	cbz	r3, 8011346 <_reclaim_reent+0x22>
 8011334:	68db      	ldr	r3, [r3, #12]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d14a      	bne.n	80113d0 <_reclaim_reent+0xac>
 801133a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801133c:	6819      	ldr	r1, [r3, #0]
 801133e:	b111      	cbz	r1, 8011346 <_reclaim_reent+0x22>
 8011340:	4620      	mov	r0, r4
 8011342:	f7ff ff05 	bl	8011150 <_free_r>
 8011346:	6961      	ldr	r1, [r4, #20]
 8011348:	b111      	cbz	r1, 8011350 <_reclaim_reent+0x2c>
 801134a:	4620      	mov	r0, r4
 801134c:	f7ff ff00 	bl	8011150 <_free_r>
 8011350:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011352:	b111      	cbz	r1, 801135a <_reclaim_reent+0x36>
 8011354:	4620      	mov	r0, r4
 8011356:	f7ff fefb 	bl	8011150 <_free_r>
 801135a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801135c:	b111      	cbz	r1, 8011364 <_reclaim_reent+0x40>
 801135e:	4620      	mov	r0, r4
 8011360:	f7ff fef6 	bl	8011150 <_free_r>
 8011364:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011366:	b111      	cbz	r1, 801136e <_reclaim_reent+0x4a>
 8011368:	4620      	mov	r0, r4
 801136a:	f7ff fef1 	bl	8011150 <_free_r>
 801136e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011370:	b111      	cbz	r1, 8011378 <_reclaim_reent+0x54>
 8011372:	4620      	mov	r0, r4
 8011374:	f7ff feec 	bl	8011150 <_free_r>
 8011378:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801137a:	b111      	cbz	r1, 8011382 <_reclaim_reent+0x5e>
 801137c:	4620      	mov	r0, r4
 801137e:	f7ff fee7 	bl	8011150 <_free_r>
 8011382:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011384:	b111      	cbz	r1, 801138c <_reclaim_reent+0x68>
 8011386:	4620      	mov	r0, r4
 8011388:	f7ff fee2 	bl	8011150 <_free_r>
 801138c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801138e:	b111      	cbz	r1, 8011396 <_reclaim_reent+0x72>
 8011390:	4620      	mov	r0, r4
 8011392:	f7ff fedd 	bl	8011150 <_free_r>
 8011396:	69a3      	ldr	r3, [r4, #24]
 8011398:	b1e3      	cbz	r3, 80113d4 <_reclaim_reent+0xb0>
 801139a:	4620      	mov	r0, r4
 801139c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801139e:	4798      	blx	r3
 80113a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80113a2:	b1b9      	cbz	r1, 80113d4 <_reclaim_reent+0xb0>
 80113a4:	4620      	mov	r0, r4
 80113a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80113aa:	f7ff bfad 	b.w	8011308 <cleanup_glue>
 80113ae:	5949      	ldr	r1, [r1, r5]
 80113b0:	b941      	cbnz	r1, 80113c4 <_reclaim_reent+0xa0>
 80113b2:	3504      	adds	r5, #4
 80113b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80113b6:	2d80      	cmp	r5, #128	; 0x80
 80113b8:	68d9      	ldr	r1, [r3, #12]
 80113ba:	d1f8      	bne.n	80113ae <_reclaim_reent+0x8a>
 80113bc:	4620      	mov	r0, r4
 80113be:	f7ff fec7 	bl	8011150 <_free_r>
 80113c2:	e7ba      	b.n	801133a <_reclaim_reent+0x16>
 80113c4:	680e      	ldr	r6, [r1, #0]
 80113c6:	4620      	mov	r0, r4
 80113c8:	f7ff fec2 	bl	8011150 <_free_r>
 80113cc:	4631      	mov	r1, r6
 80113ce:	e7ef      	b.n	80113b0 <_reclaim_reent+0x8c>
 80113d0:	2500      	movs	r5, #0
 80113d2:	e7ef      	b.n	80113b4 <_reclaim_reent+0x90>
 80113d4:	bd70      	pop	{r4, r5, r6, pc}
 80113d6:	bf00      	nop
 80113d8:	20000088 	.word	0x20000088

080113dc <_sbrk_r>:
 80113dc:	b538      	push	{r3, r4, r5, lr}
 80113de:	2300      	movs	r3, #0
 80113e0:	4d05      	ldr	r5, [pc, #20]	; (80113f8 <_sbrk_r+0x1c>)
 80113e2:	4604      	mov	r4, r0
 80113e4:	4608      	mov	r0, r1
 80113e6:	602b      	str	r3, [r5, #0]
 80113e8:	f7f0 f8b4 	bl	8001554 <_sbrk>
 80113ec:	1c43      	adds	r3, r0, #1
 80113ee:	d102      	bne.n	80113f6 <_sbrk_r+0x1a>
 80113f0:	682b      	ldr	r3, [r5, #0]
 80113f2:	b103      	cbz	r3, 80113f6 <_sbrk_r+0x1a>
 80113f4:	6023      	str	r3, [r4, #0]
 80113f6:	bd38      	pop	{r3, r4, r5, pc}
 80113f8:	200048f0 	.word	0x200048f0

080113fc <siprintf>:
 80113fc:	b40e      	push	{r1, r2, r3}
 80113fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011402:	b500      	push	{lr}
 8011404:	b09c      	sub	sp, #112	; 0x70
 8011406:	ab1d      	add	r3, sp, #116	; 0x74
 8011408:	9002      	str	r0, [sp, #8]
 801140a:	9006      	str	r0, [sp, #24]
 801140c:	9107      	str	r1, [sp, #28]
 801140e:	9104      	str	r1, [sp, #16]
 8011410:	4808      	ldr	r0, [pc, #32]	; (8011434 <siprintf+0x38>)
 8011412:	4909      	ldr	r1, [pc, #36]	; (8011438 <siprintf+0x3c>)
 8011414:	f853 2b04 	ldr.w	r2, [r3], #4
 8011418:	9105      	str	r1, [sp, #20]
 801141a:	6800      	ldr	r0, [r0, #0]
 801141c:	a902      	add	r1, sp, #8
 801141e:	9301      	str	r3, [sp, #4]
 8011420:	f000 f874 	bl	801150c <_svfiprintf_r>
 8011424:	2200      	movs	r2, #0
 8011426:	9b02      	ldr	r3, [sp, #8]
 8011428:	701a      	strb	r2, [r3, #0]
 801142a:	b01c      	add	sp, #112	; 0x70
 801142c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011430:	b003      	add	sp, #12
 8011432:	4770      	bx	lr
 8011434:	20000088 	.word	0x20000088
 8011438:	ffff0208 	.word	0xffff0208

0801143c <__malloc_lock>:
 801143c:	4801      	ldr	r0, [pc, #4]	; (8011444 <__malloc_lock+0x8>)
 801143e:	f7ff be5f 	b.w	8011100 <__retarget_lock_acquire_recursive>
 8011442:	bf00      	nop
 8011444:	200048e4 	.word	0x200048e4

08011448 <__malloc_unlock>:
 8011448:	4801      	ldr	r0, [pc, #4]	; (8011450 <__malloc_unlock+0x8>)
 801144a:	f7ff be5a 	b.w	8011102 <__retarget_lock_release_recursive>
 801144e:	bf00      	nop
 8011450:	200048e4 	.word	0x200048e4

08011454 <__ssputs_r>:
 8011454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011458:	688e      	ldr	r6, [r1, #8]
 801145a:	4682      	mov	sl, r0
 801145c:	429e      	cmp	r6, r3
 801145e:	460c      	mov	r4, r1
 8011460:	4690      	mov	r8, r2
 8011462:	461f      	mov	r7, r3
 8011464:	d838      	bhi.n	80114d8 <__ssputs_r+0x84>
 8011466:	898a      	ldrh	r2, [r1, #12]
 8011468:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801146c:	d032      	beq.n	80114d4 <__ssputs_r+0x80>
 801146e:	6825      	ldr	r5, [r4, #0]
 8011470:	6909      	ldr	r1, [r1, #16]
 8011472:	3301      	adds	r3, #1
 8011474:	eba5 0901 	sub.w	r9, r5, r1
 8011478:	6965      	ldr	r5, [r4, #20]
 801147a:	444b      	add	r3, r9
 801147c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011480:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011484:	106d      	asrs	r5, r5, #1
 8011486:	429d      	cmp	r5, r3
 8011488:	bf38      	it	cc
 801148a:	461d      	movcc	r5, r3
 801148c:	0553      	lsls	r3, r2, #21
 801148e:	d531      	bpl.n	80114f4 <__ssputs_r+0xa0>
 8011490:	4629      	mov	r1, r5
 8011492:	f7ff fec5 	bl	8011220 <_malloc_r>
 8011496:	4606      	mov	r6, r0
 8011498:	b950      	cbnz	r0, 80114b0 <__ssputs_r+0x5c>
 801149a:	230c      	movs	r3, #12
 801149c:	f04f 30ff 	mov.w	r0, #4294967295
 80114a0:	f8ca 3000 	str.w	r3, [sl]
 80114a4:	89a3      	ldrh	r3, [r4, #12]
 80114a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114aa:	81a3      	strh	r3, [r4, #12]
 80114ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114b0:	464a      	mov	r2, r9
 80114b2:	6921      	ldr	r1, [r4, #16]
 80114b4:	f7ff fe36 	bl	8011124 <memcpy>
 80114b8:	89a3      	ldrh	r3, [r4, #12]
 80114ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80114be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114c2:	81a3      	strh	r3, [r4, #12]
 80114c4:	6126      	str	r6, [r4, #16]
 80114c6:	444e      	add	r6, r9
 80114c8:	6026      	str	r6, [r4, #0]
 80114ca:	463e      	mov	r6, r7
 80114cc:	6165      	str	r5, [r4, #20]
 80114ce:	eba5 0509 	sub.w	r5, r5, r9
 80114d2:	60a5      	str	r5, [r4, #8]
 80114d4:	42be      	cmp	r6, r7
 80114d6:	d900      	bls.n	80114da <__ssputs_r+0x86>
 80114d8:	463e      	mov	r6, r7
 80114da:	4632      	mov	r2, r6
 80114dc:	4641      	mov	r1, r8
 80114de:	6820      	ldr	r0, [r4, #0]
 80114e0:	f000 fab8 	bl	8011a54 <memmove>
 80114e4:	68a3      	ldr	r3, [r4, #8]
 80114e6:	2000      	movs	r0, #0
 80114e8:	1b9b      	subs	r3, r3, r6
 80114ea:	60a3      	str	r3, [r4, #8]
 80114ec:	6823      	ldr	r3, [r4, #0]
 80114ee:	4433      	add	r3, r6
 80114f0:	6023      	str	r3, [r4, #0]
 80114f2:	e7db      	b.n	80114ac <__ssputs_r+0x58>
 80114f4:	462a      	mov	r2, r5
 80114f6:	f000 fac7 	bl	8011a88 <_realloc_r>
 80114fa:	4606      	mov	r6, r0
 80114fc:	2800      	cmp	r0, #0
 80114fe:	d1e1      	bne.n	80114c4 <__ssputs_r+0x70>
 8011500:	4650      	mov	r0, sl
 8011502:	6921      	ldr	r1, [r4, #16]
 8011504:	f7ff fe24 	bl	8011150 <_free_r>
 8011508:	e7c7      	b.n	801149a <__ssputs_r+0x46>
	...

0801150c <_svfiprintf_r>:
 801150c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011510:	4698      	mov	r8, r3
 8011512:	898b      	ldrh	r3, [r1, #12]
 8011514:	4607      	mov	r7, r0
 8011516:	061b      	lsls	r3, r3, #24
 8011518:	460d      	mov	r5, r1
 801151a:	4614      	mov	r4, r2
 801151c:	b09d      	sub	sp, #116	; 0x74
 801151e:	d50e      	bpl.n	801153e <_svfiprintf_r+0x32>
 8011520:	690b      	ldr	r3, [r1, #16]
 8011522:	b963      	cbnz	r3, 801153e <_svfiprintf_r+0x32>
 8011524:	2140      	movs	r1, #64	; 0x40
 8011526:	f7ff fe7b 	bl	8011220 <_malloc_r>
 801152a:	6028      	str	r0, [r5, #0]
 801152c:	6128      	str	r0, [r5, #16]
 801152e:	b920      	cbnz	r0, 801153a <_svfiprintf_r+0x2e>
 8011530:	230c      	movs	r3, #12
 8011532:	603b      	str	r3, [r7, #0]
 8011534:	f04f 30ff 	mov.w	r0, #4294967295
 8011538:	e0d1      	b.n	80116de <_svfiprintf_r+0x1d2>
 801153a:	2340      	movs	r3, #64	; 0x40
 801153c:	616b      	str	r3, [r5, #20]
 801153e:	2300      	movs	r3, #0
 8011540:	9309      	str	r3, [sp, #36]	; 0x24
 8011542:	2320      	movs	r3, #32
 8011544:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011548:	2330      	movs	r3, #48	; 0x30
 801154a:	f04f 0901 	mov.w	r9, #1
 801154e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011552:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80116f8 <_svfiprintf_r+0x1ec>
 8011556:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801155a:	4623      	mov	r3, r4
 801155c:	469a      	mov	sl, r3
 801155e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011562:	b10a      	cbz	r2, 8011568 <_svfiprintf_r+0x5c>
 8011564:	2a25      	cmp	r2, #37	; 0x25
 8011566:	d1f9      	bne.n	801155c <_svfiprintf_r+0x50>
 8011568:	ebba 0b04 	subs.w	fp, sl, r4
 801156c:	d00b      	beq.n	8011586 <_svfiprintf_r+0x7a>
 801156e:	465b      	mov	r3, fp
 8011570:	4622      	mov	r2, r4
 8011572:	4629      	mov	r1, r5
 8011574:	4638      	mov	r0, r7
 8011576:	f7ff ff6d 	bl	8011454 <__ssputs_r>
 801157a:	3001      	adds	r0, #1
 801157c:	f000 80aa 	beq.w	80116d4 <_svfiprintf_r+0x1c8>
 8011580:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011582:	445a      	add	r2, fp
 8011584:	9209      	str	r2, [sp, #36]	; 0x24
 8011586:	f89a 3000 	ldrb.w	r3, [sl]
 801158a:	2b00      	cmp	r3, #0
 801158c:	f000 80a2 	beq.w	80116d4 <_svfiprintf_r+0x1c8>
 8011590:	2300      	movs	r3, #0
 8011592:	f04f 32ff 	mov.w	r2, #4294967295
 8011596:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801159a:	f10a 0a01 	add.w	sl, sl, #1
 801159e:	9304      	str	r3, [sp, #16]
 80115a0:	9307      	str	r3, [sp, #28]
 80115a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80115a6:	931a      	str	r3, [sp, #104]	; 0x68
 80115a8:	4654      	mov	r4, sl
 80115aa:	2205      	movs	r2, #5
 80115ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115b0:	4851      	ldr	r0, [pc, #324]	; (80116f8 <_svfiprintf_r+0x1ec>)
 80115b2:	f000 fa41 	bl	8011a38 <memchr>
 80115b6:	9a04      	ldr	r2, [sp, #16]
 80115b8:	b9d8      	cbnz	r0, 80115f2 <_svfiprintf_r+0xe6>
 80115ba:	06d0      	lsls	r0, r2, #27
 80115bc:	bf44      	itt	mi
 80115be:	2320      	movmi	r3, #32
 80115c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80115c4:	0711      	lsls	r1, r2, #28
 80115c6:	bf44      	itt	mi
 80115c8:	232b      	movmi	r3, #43	; 0x2b
 80115ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80115ce:	f89a 3000 	ldrb.w	r3, [sl]
 80115d2:	2b2a      	cmp	r3, #42	; 0x2a
 80115d4:	d015      	beq.n	8011602 <_svfiprintf_r+0xf6>
 80115d6:	4654      	mov	r4, sl
 80115d8:	2000      	movs	r0, #0
 80115da:	f04f 0c0a 	mov.w	ip, #10
 80115de:	9a07      	ldr	r2, [sp, #28]
 80115e0:	4621      	mov	r1, r4
 80115e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80115e6:	3b30      	subs	r3, #48	; 0x30
 80115e8:	2b09      	cmp	r3, #9
 80115ea:	d94e      	bls.n	801168a <_svfiprintf_r+0x17e>
 80115ec:	b1b0      	cbz	r0, 801161c <_svfiprintf_r+0x110>
 80115ee:	9207      	str	r2, [sp, #28]
 80115f0:	e014      	b.n	801161c <_svfiprintf_r+0x110>
 80115f2:	eba0 0308 	sub.w	r3, r0, r8
 80115f6:	fa09 f303 	lsl.w	r3, r9, r3
 80115fa:	4313      	orrs	r3, r2
 80115fc:	46a2      	mov	sl, r4
 80115fe:	9304      	str	r3, [sp, #16]
 8011600:	e7d2      	b.n	80115a8 <_svfiprintf_r+0x9c>
 8011602:	9b03      	ldr	r3, [sp, #12]
 8011604:	1d19      	adds	r1, r3, #4
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	9103      	str	r1, [sp, #12]
 801160a:	2b00      	cmp	r3, #0
 801160c:	bfbb      	ittet	lt
 801160e:	425b      	neglt	r3, r3
 8011610:	f042 0202 	orrlt.w	r2, r2, #2
 8011614:	9307      	strge	r3, [sp, #28]
 8011616:	9307      	strlt	r3, [sp, #28]
 8011618:	bfb8      	it	lt
 801161a:	9204      	strlt	r2, [sp, #16]
 801161c:	7823      	ldrb	r3, [r4, #0]
 801161e:	2b2e      	cmp	r3, #46	; 0x2e
 8011620:	d10c      	bne.n	801163c <_svfiprintf_r+0x130>
 8011622:	7863      	ldrb	r3, [r4, #1]
 8011624:	2b2a      	cmp	r3, #42	; 0x2a
 8011626:	d135      	bne.n	8011694 <_svfiprintf_r+0x188>
 8011628:	9b03      	ldr	r3, [sp, #12]
 801162a:	3402      	adds	r4, #2
 801162c:	1d1a      	adds	r2, r3, #4
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	9203      	str	r2, [sp, #12]
 8011632:	2b00      	cmp	r3, #0
 8011634:	bfb8      	it	lt
 8011636:	f04f 33ff 	movlt.w	r3, #4294967295
 801163a:	9305      	str	r3, [sp, #20]
 801163c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80116fc <_svfiprintf_r+0x1f0>
 8011640:	2203      	movs	r2, #3
 8011642:	4650      	mov	r0, sl
 8011644:	7821      	ldrb	r1, [r4, #0]
 8011646:	f000 f9f7 	bl	8011a38 <memchr>
 801164a:	b140      	cbz	r0, 801165e <_svfiprintf_r+0x152>
 801164c:	2340      	movs	r3, #64	; 0x40
 801164e:	eba0 000a 	sub.w	r0, r0, sl
 8011652:	fa03 f000 	lsl.w	r0, r3, r0
 8011656:	9b04      	ldr	r3, [sp, #16]
 8011658:	3401      	adds	r4, #1
 801165a:	4303      	orrs	r3, r0
 801165c:	9304      	str	r3, [sp, #16]
 801165e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011662:	2206      	movs	r2, #6
 8011664:	4826      	ldr	r0, [pc, #152]	; (8011700 <_svfiprintf_r+0x1f4>)
 8011666:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801166a:	f000 f9e5 	bl	8011a38 <memchr>
 801166e:	2800      	cmp	r0, #0
 8011670:	d038      	beq.n	80116e4 <_svfiprintf_r+0x1d8>
 8011672:	4b24      	ldr	r3, [pc, #144]	; (8011704 <_svfiprintf_r+0x1f8>)
 8011674:	bb1b      	cbnz	r3, 80116be <_svfiprintf_r+0x1b2>
 8011676:	9b03      	ldr	r3, [sp, #12]
 8011678:	3307      	adds	r3, #7
 801167a:	f023 0307 	bic.w	r3, r3, #7
 801167e:	3308      	adds	r3, #8
 8011680:	9303      	str	r3, [sp, #12]
 8011682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011684:	4433      	add	r3, r6
 8011686:	9309      	str	r3, [sp, #36]	; 0x24
 8011688:	e767      	b.n	801155a <_svfiprintf_r+0x4e>
 801168a:	460c      	mov	r4, r1
 801168c:	2001      	movs	r0, #1
 801168e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011692:	e7a5      	b.n	80115e0 <_svfiprintf_r+0xd4>
 8011694:	2300      	movs	r3, #0
 8011696:	f04f 0c0a 	mov.w	ip, #10
 801169a:	4619      	mov	r1, r3
 801169c:	3401      	adds	r4, #1
 801169e:	9305      	str	r3, [sp, #20]
 80116a0:	4620      	mov	r0, r4
 80116a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80116a6:	3a30      	subs	r2, #48	; 0x30
 80116a8:	2a09      	cmp	r2, #9
 80116aa:	d903      	bls.n	80116b4 <_svfiprintf_r+0x1a8>
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d0c5      	beq.n	801163c <_svfiprintf_r+0x130>
 80116b0:	9105      	str	r1, [sp, #20]
 80116b2:	e7c3      	b.n	801163c <_svfiprintf_r+0x130>
 80116b4:	4604      	mov	r4, r0
 80116b6:	2301      	movs	r3, #1
 80116b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80116bc:	e7f0      	b.n	80116a0 <_svfiprintf_r+0x194>
 80116be:	ab03      	add	r3, sp, #12
 80116c0:	9300      	str	r3, [sp, #0]
 80116c2:	462a      	mov	r2, r5
 80116c4:	4638      	mov	r0, r7
 80116c6:	4b10      	ldr	r3, [pc, #64]	; (8011708 <_svfiprintf_r+0x1fc>)
 80116c8:	a904      	add	r1, sp, #16
 80116ca:	f3af 8000 	nop.w
 80116ce:	1c42      	adds	r2, r0, #1
 80116d0:	4606      	mov	r6, r0
 80116d2:	d1d6      	bne.n	8011682 <_svfiprintf_r+0x176>
 80116d4:	89ab      	ldrh	r3, [r5, #12]
 80116d6:	065b      	lsls	r3, r3, #25
 80116d8:	f53f af2c 	bmi.w	8011534 <_svfiprintf_r+0x28>
 80116dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80116de:	b01d      	add	sp, #116	; 0x74
 80116e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116e4:	ab03      	add	r3, sp, #12
 80116e6:	9300      	str	r3, [sp, #0]
 80116e8:	462a      	mov	r2, r5
 80116ea:	4638      	mov	r0, r7
 80116ec:	4b06      	ldr	r3, [pc, #24]	; (8011708 <_svfiprintf_r+0x1fc>)
 80116ee:	a904      	add	r1, sp, #16
 80116f0:	f000 f87c 	bl	80117ec <_printf_i>
 80116f4:	e7eb      	b.n	80116ce <_svfiprintf_r+0x1c2>
 80116f6:	bf00      	nop
 80116f8:	0801227c 	.word	0x0801227c
 80116fc:	08012282 	.word	0x08012282
 8011700:	08012286 	.word	0x08012286
 8011704:	00000000 	.word	0x00000000
 8011708:	08011455 	.word	0x08011455

0801170c <_printf_common>:
 801170c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011710:	4616      	mov	r6, r2
 8011712:	4699      	mov	r9, r3
 8011714:	688a      	ldr	r2, [r1, #8]
 8011716:	690b      	ldr	r3, [r1, #16]
 8011718:	4607      	mov	r7, r0
 801171a:	4293      	cmp	r3, r2
 801171c:	bfb8      	it	lt
 801171e:	4613      	movlt	r3, r2
 8011720:	6033      	str	r3, [r6, #0]
 8011722:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011726:	460c      	mov	r4, r1
 8011728:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801172c:	b10a      	cbz	r2, 8011732 <_printf_common+0x26>
 801172e:	3301      	adds	r3, #1
 8011730:	6033      	str	r3, [r6, #0]
 8011732:	6823      	ldr	r3, [r4, #0]
 8011734:	0699      	lsls	r1, r3, #26
 8011736:	bf42      	ittt	mi
 8011738:	6833      	ldrmi	r3, [r6, #0]
 801173a:	3302      	addmi	r3, #2
 801173c:	6033      	strmi	r3, [r6, #0]
 801173e:	6825      	ldr	r5, [r4, #0]
 8011740:	f015 0506 	ands.w	r5, r5, #6
 8011744:	d106      	bne.n	8011754 <_printf_common+0x48>
 8011746:	f104 0a19 	add.w	sl, r4, #25
 801174a:	68e3      	ldr	r3, [r4, #12]
 801174c:	6832      	ldr	r2, [r6, #0]
 801174e:	1a9b      	subs	r3, r3, r2
 8011750:	42ab      	cmp	r3, r5
 8011752:	dc28      	bgt.n	80117a6 <_printf_common+0x9a>
 8011754:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011758:	1e13      	subs	r3, r2, #0
 801175a:	6822      	ldr	r2, [r4, #0]
 801175c:	bf18      	it	ne
 801175e:	2301      	movne	r3, #1
 8011760:	0692      	lsls	r2, r2, #26
 8011762:	d42d      	bmi.n	80117c0 <_printf_common+0xb4>
 8011764:	4649      	mov	r1, r9
 8011766:	4638      	mov	r0, r7
 8011768:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801176c:	47c0      	blx	r8
 801176e:	3001      	adds	r0, #1
 8011770:	d020      	beq.n	80117b4 <_printf_common+0xa8>
 8011772:	6823      	ldr	r3, [r4, #0]
 8011774:	68e5      	ldr	r5, [r4, #12]
 8011776:	f003 0306 	and.w	r3, r3, #6
 801177a:	2b04      	cmp	r3, #4
 801177c:	bf18      	it	ne
 801177e:	2500      	movne	r5, #0
 8011780:	6832      	ldr	r2, [r6, #0]
 8011782:	f04f 0600 	mov.w	r6, #0
 8011786:	68a3      	ldr	r3, [r4, #8]
 8011788:	bf08      	it	eq
 801178a:	1aad      	subeq	r5, r5, r2
 801178c:	6922      	ldr	r2, [r4, #16]
 801178e:	bf08      	it	eq
 8011790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011794:	4293      	cmp	r3, r2
 8011796:	bfc4      	itt	gt
 8011798:	1a9b      	subgt	r3, r3, r2
 801179a:	18ed      	addgt	r5, r5, r3
 801179c:	341a      	adds	r4, #26
 801179e:	42b5      	cmp	r5, r6
 80117a0:	d11a      	bne.n	80117d8 <_printf_common+0xcc>
 80117a2:	2000      	movs	r0, #0
 80117a4:	e008      	b.n	80117b8 <_printf_common+0xac>
 80117a6:	2301      	movs	r3, #1
 80117a8:	4652      	mov	r2, sl
 80117aa:	4649      	mov	r1, r9
 80117ac:	4638      	mov	r0, r7
 80117ae:	47c0      	blx	r8
 80117b0:	3001      	adds	r0, #1
 80117b2:	d103      	bne.n	80117bc <_printf_common+0xb0>
 80117b4:	f04f 30ff 	mov.w	r0, #4294967295
 80117b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117bc:	3501      	adds	r5, #1
 80117be:	e7c4      	b.n	801174a <_printf_common+0x3e>
 80117c0:	2030      	movs	r0, #48	; 0x30
 80117c2:	18e1      	adds	r1, r4, r3
 80117c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80117c8:	1c5a      	adds	r2, r3, #1
 80117ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80117ce:	4422      	add	r2, r4
 80117d0:	3302      	adds	r3, #2
 80117d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80117d6:	e7c5      	b.n	8011764 <_printf_common+0x58>
 80117d8:	2301      	movs	r3, #1
 80117da:	4622      	mov	r2, r4
 80117dc:	4649      	mov	r1, r9
 80117de:	4638      	mov	r0, r7
 80117e0:	47c0      	blx	r8
 80117e2:	3001      	adds	r0, #1
 80117e4:	d0e6      	beq.n	80117b4 <_printf_common+0xa8>
 80117e6:	3601      	adds	r6, #1
 80117e8:	e7d9      	b.n	801179e <_printf_common+0x92>
	...

080117ec <_printf_i>:
 80117ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80117f0:	7e0f      	ldrb	r7, [r1, #24]
 80117f2:	4691      	mov	r9, r2
 80117f4:	2f78      	cmp	r7, #120	; 0x78
 80117f6:	4680      	mov	r8, r0
 80117f8:	460c      	mov	r4, r1
 80117fa:	469a      	mov	sl, r3
 80117fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80117fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011802:	d807      	bhi.n	8011814 <_printf_i+0x28>
 8011804:	2f62      	cmp	r7, #98	; 0x62
 8011806:	d80a      	bhi.n	801181e <_printf_i+0x32>
 8011808:	2f00      	cmp	r7, #0
 801180a:	f000 80d9 	beq.w	80119c0 <_printf_i+0x1d4>
 801180e:	2f58      	cmp	r7, #88	; 0x58
 8011810:	f000 80a4 	beq.w	801195c <_printf_i+0x170>
 8011814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011818:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801181c:	e03a      	b.n	8011894 <_printf_i+0xa8>
 801181e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011822:	2b15      	cmp	r3, #21
 8011824:	d8f6      	bhi.n	8011814 <_printf_i+0x28>
 8011826:	a101      	add	r1, pc, #4	; (adr r1, 801182c <_printf_i+0x40>)
 8011828:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801182c:	08011885 	.word	0x08011885
 8011830:	08011899 	.word	0x08011899
 8011834:	08011815 	.word	0x08011815
 8011838:	08011815 	.word	0x08011815
 801183c:	08011815 	.word	0x08011815
 8011840:	08011815 	.word	0x08011815
 8011844:	08011899 	.word	0x08011899
 8011848:	08011815 	.word	0x08011815
 801184c:	08011815 	.word	0x08011815
 8011850:	08011815 	.word	0x08011815
 8011854:	08011815 	.word	0x08011815
 8011858:	080119a7 	.word	0x080119a7
 801185c:	080118c9 	.word	0x080118c9
 8011860:	08011989 	.word	0x08011989
 8011864:	08011815 	.word	0x08011815
 8011868:	08011815 	.word	0x08011815
 801186c:	080119c9 	.word	0x080119c9
 8011870:	08011815 	.word	0x08011815
 8011874:	080118c9 	.word	0x080118c9
 8011878:	08011815 	.word	0x08011815
 801187c:	08011815 	.word	0x08011815
 8011880:	08011991 	.word	0x08011991
 8011884:	682b      	ldr	r3, [r5, #0]
 8011886:	1d1a      	adds	r2, r3, #4
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	602a      	str	r2, [r5, #0]
 801188c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011890:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011894:	2301      	movs	r3, #1
 8011896:	e0a4      	b.n	80119e2 <_printf_i+0x1f6>
 8011898:	6820      	ldr	r0, [r4, #0]
 801189a:	6829      	ldr	r1, [r5, #0]
 801189c:	0606      	lsls	r6, r0, #24
 801189e:	f101 0304 	add.w	r3, r1, #4
 80118a2:	d50a      	bpl.n	80118ba <_printf_i+0xce>
 80118a4:	680e      	ldr	r6, [r1, #0]
 80118a6:	602b      	str	r3, [r5, #0]
 80118a8:	2e00      	cmp	r6, #0
 80118aa:	da03      	bge.n	80118b4 <_printf_i+0xc8>
 80118ac:	232d      	movs	r3, #45	; 0x2d
 80118ae:	4276      	negs	r6, r6
 80118b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80118b4:	230a      	movs	r3, #10
 80118b6:	485e      	ldr	r0, [pc, #376]	; (8011a30 <_printf_i+0x244>)
 80118b8:	e019      	b.n	80118ee <_printf_i+0x102>
 80118ba:	680e      	ldr	r6, [r1, #0]
 80118bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80118c0:	602b      	str	r3, [r5, #0]
 80118c2:	bf18      	it	ne
 80118c4:	b236      	sxthne	r6, r6
 80118c6:	e7ef      	b.n	80118a8 <_printf_i+0xbc>
 80118c8:	682b      	ldr	r3, [r5, #0]
 80118ca:	6820      	ldr	r0, [r4, #0]
 80118cc:	1d19      	adds	r1, r3, #4
 80118ce:	6029      	str	r1, [r5, #0]
 80118d0:	0601      	lsls	r1, r0, #24
 80118d2:	d501      	bpl.n	80118d8 <_printf_i+0xec>
 80118d4:	681e      	ldr	r6, [r3, #0]
 80118d6:	e002      	b.n	80118de <_printf_i+0xf2>
 80118d8:	0646      	lsls	r6, r0, #25
 80118da:	d5fb      	bpl.n	80118d4 <_printf_i+0xe8>
 80118dc:	881e      	ldrh	r6, [r3, #0]
 80118de:	2f6f      	cmp	r7, #111	; 0x6f
 80118e0:	bf0c      	ite	eq
 80118e2:	2308      	moveq	r3, #8
 80118e4:	230a      	movne	r3, #10
 80118e6:	4852      	ldr	r0, [pc, #328]	; (8011a30 <_printf_i+0x244>)
 80118e8:	2100      	movs	r1, #0
 80118ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80118ee:	6865      	ldr	r5, [r4, #4]
 80118f0:	2d00      	cmp	r5, #0
 80118f2:	bfa8      	it	ge
 80118f4:	6821      	ldrge	r1, [r4, #0]
 80118f6:	60a5      	str	r5, [r4, #8]
 80118f8:	bfa4      	itt	ge
 80118fa:	f021 0104 	bicge.w	r1, r1, #4
 80118fe:	6021      	strge	r1, [r4, #0]
 8011900:	b90e      	cbnz	r6, 8011906 <_printf_i+0x11a>
 8011902:	2d00      	cmp	r5, #0
 8011904:	d04d      	beq.n	80119a2 <_printf_i+0x1b6>
 8011906:	4615      	mov	r5, r2
 8011908:	fbb6 f1f3 	udiv	r1, r6, r3
 801190c:	fb03 6711 	mls	r7, r3, r1, r6
 8011910:	5dc7      	ldrb	r7, [r0, r7]
 8011912:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011916:	4637      	mov	r7, r6
 8011918:	42bb      	cmp	r3, r7
 801191a:	460e      	mov	r6, r1
 801191c:	d9f4      	bls.n	8011908 <_printf_i+0x11c>
 801191e:	2b08      	cmp	r3, #8
 8011920:	d10b      	bne.n	801193a <_printf_i+0x14e>
 8011922:	6823      	ldr	r3, [r4, #0]
 8011924:	07de      	lsls	r6, r3, #31
 8011926:	d508      	bpl.n	801193a <_printf_i+0x14e>
 8011928:	6923      	ldr	r3, [r4, #16]
 801192a:	6861      	ldr	r1, [r4, #4]
 801192c:	4299      	cmp	r1, r3
 801192e:	bfde      	ittt	le
 8011930:	2330      	movle	r3, #48	; 0x30
 8011932:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011936:	f105 35ff 	addle.w	r5, r5, #4294967295
 801193a:	1b52      	subs	r2, r2, r5
 801193c:	6122      	str	r2, [r4, #16]
 801193e:	464b      	mov	r3, r9
 8011940:	4621      	mov	r1, r4
 8011942:	4640      	mov	r0, r8
 8011944:	f8cd a000 	str.w	sl, [sp]
 8011948:	aa03      	add	r2, sp, #12
 801194a:	f7ff fedf 	bl	801170c <_printf_common>
 801194e:	3001      	adds	r0, #1
 8011950:	d14c      	bne.n	80119ec <_printf_i+0x200>
 8011952:	f04f 30ff 	mov.w	r0, #4294967295
 8011956:	b004      	add	sp, #16
 8011958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801195c:	4834      	ldr	r0, [pc, #208]	; (8011a30 <_printf_i+0x244>)
 801195e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011962:	6829      	ldr	r1, [r5, #0]
 8011964:	6823      	ldr	r3, [r4, #0]
 8011966:	f851 6b04 	ldr.w	r6, [r1], #4
 801196a:	6029      	str	r1, [r5, #0]
 801196c:	061d      	lsls	r5, r3, #24
 801196e:	d514      	bpl.n	801199a <_printf_i+0x1ae>
 8011970:	07df      	lsls	r7, r3, #31
 8011972:	bf44      	itt	mi
 8011974:	f043 0320 	orrmi.w	r3, r3, #32
 8011978:	6023      	strmi	r3, [r4, #0]
 801197a:	b91e      	cbnz	r6, 8011984 <_printf_i+0x198>
 801197c:	6823      	ldr	r3, [r4, #0]
 801197e:	f023 0320 	bic.w	r3, r3, #32
 8011982:	6023      	str	r3, [r4, #0]
 8011984:	2310      	movs	r3, #16
 8011986:	e7af      	b.n	80118e8 <_printf_i+0xfc>
 8011988:	6823      	ldr	r3, [r4, #0]
 801198a:	f043 0320 	orr.w	r3, r3, #32
 801198e:	6023      	str	r3, [r4, #0]
 8011990:	2378      	movs	r3, #120	; 0x78
 8011992:	4828      	ldr	r0, [pc, #160]	; (8011a34 <_printf_i+0x248>)
 8011994:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011998:	e7e3      	b.n	8011962 <_printf_i+0x176>
 801199a:	0659      	lsls	r1, r3, #25
 801199c:	bf48      	it	mi
 801199e:	b2b6      	uxthmi	r6, r6
 80119a0:	e7e6      	b.n	8011970 <_printf_i+0x184>
 80119a2:	4615      	mov	r5, r2
 80119a4:	e7bb      	b.n	801191e <_printf_i+0x132>
 80119a6:	682b      	ldr	r3, [r5, #0]
 80119a8:	6826      	ldr	r6, [r4, #0]
 80119aa:	1d18      	adds	r0, r3, #4
 80119ac:	6961      	ldr	r1, [r4, #20]
 80119ae:	6028      	str	r0, [r5, #0]
 80119b0:	0635      	lsls	r5, r6, #24
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	d501      	bpl.n	80119ba <_printf_i+0x1ce>
 80119b6:	6019      	str	r1, [r3, #0]
 80119b8:	e002      	b.n	80119c0 <_printf_i+0x1d4>
 80119ba:	0670      	lsls	r0, r6, #25
 80119bc:	d5fb      	bpl.n	80119b6 <_printf_i+0x1ca>
 80119be:	8019      	strh	r1, [r3, #0]
 80119c0:	2300      	movs	r3, #0
 80119c2:	4615      	mov	r5, r2
 80119c4:	6123      	str	r3, [r4, #16]
 80119c6:	e7ba      	b.n	801193e <_printf_i+0x152>
 80119c8:	682b      	ldr	r3, [r5, #0]
 80119ca:	2100      	movs	r1, #0
 80119cc:	1d1a      	adds	r2, r3, #4
 80119ce:	602a      	str	r2, [r5, #0]
 80119d0:	681d      	ldr	r5, [r3, #0]
 80119d2:	6862      	ldr	r2, [r4, #4]
 80119d4:	4628      	mov	r0, r5
 80119d6:	f000 f82f 	bl	8011a38 <memchr>
 80119da:	b108      	cbz	r0, 80119e0 <_printf_i+0x1f4>
 80119dc:	1b40      	subs	r0, r0, r5
 80119de:	6060      	str	r0, [r4, #4]
 80119e0:	6863      	ldr	r3, [r4, #4]
 80119e2:	6123      	str	r3, [r4, #16]
 80119e4:	2300      	movs	r3, #0
 80119e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119ea:	e7a8      	b.n	801193e <_printf_i+0x152>
 80119ec:	462a      	mov	r2, r5
 80119ee:	4649      	mov	r1, r9
 80119f0:	4640      	mov	r0, r8
 80119f2:	6923      	ldr	r3, [r4, #16]
 80119f4:	47d0      	blx	sl
 80119f6:	3001      	adds	r0, #1
 80119f8:	d0ab      	beq.n	8011952 <_printf_i+0x166>
 80119fa:	6823      	ldr	r3, [r4, #0]
 80119fc:	079b      	lsls	r3, r3, #30
 80119fe:	d413      	bmi.n	8011a28 <_printf_i+0x23c>
 8011a00:	68e0      	ldr	r0, [r4, #12]
 8011a02:	9b03      	ldr	r3, [sp, #12]
 8011a04:	4298      	cmp	r0, r3
 8011a06:	bfb8      	it	lt
 8011a08:	4618      	movlt	r0, r3
 8011a0a:	e7a4      	b.n	8011956 <_printf_i+0x16a>
 8011a0c:	2301      	movs	r3, #1
 8011a0e:	4632      	mov	r2, r6
 8011a10:	4649      	mov	r1, r9
 8011a12:	4640      	mov	r0, r8
 8011a14:	47d0      	blx	sl
 8011a16:	3001      	adds	r0, #1
 8011a18:	d09b      	beq.n	8011952 <_printf_i+0x166>
 8011a1a:	3501      	adds	r5, #1
 8011a1c:	68e3      	ldr	r3, [r4, #12]
 8011a1e:	9903      	ldr	r1, [sp, #12]
 8011a20:	1a5b      	subs	r3, r3, r1
 8011a22:	42ab      	cmp	r3, r5
 8011a24:	dcf2      	bgt.n	8011a0c <_printf_i+0x220>
 8011a26:	e7eb      	b.n	8011a00 <_printf_i+0x214>
 8011a28:	2500      	movs	r5, #0
 8011a2a:	f104 0619 	add.w	r6, r4, #25
 8011a2e:	e7f5      	b.n	8011a1c <_printf_i+0x230>
 8011a30:	0801228d 	.word	0x0801228d
 8011a34:	0801229e 	.word	0x0801229e

08011a38 <memchr>:
 8011a38:	4603      	mov	r3, r0
 8011a3a:	b510      	push	{r4, lr}
 8011a3c:	b2c9      	uxtb	r1, r1
 8011a3e:	4402      	add	r2, r0
 8011a40:	4293      	cmp	r3, r2
 8011a42:	4618      	mov	r0, r3
 8011a44:	d101      	bne.n	8011a4a <memchr+0x12>
 8011a46:	2000      	movs	r0, #0
 8011a48:	e003      	b.n	8011a52 <memchr+0x1a>
 8011a4a:	7804      	ldrb	r4, [r0, #0]
 8011a4c:	3301      	adds	r3, #1
 8011a4e:	428c      	cmp	r4, r1
 8011a50:	d1f6      	bne.n	8011a40 <memchr+0x8>
 8011a52:	bd10      	pop	{r4, pc}

08011a54 <memmove>:
 8011a54:	4288      	cmp	r0, r1
 8011a56:	b510      	push	{r4, lr}
 8011a58:	eb01 0402 	add.w	r4, r1, r2
 8011a5c:	d902      	bls.n	8011a64 <memmove+0x10>
 8011a5e:	4284      	cmp	r4, r0
 8011a60:	4623      	mov	r3, r4
 8011a62:	d807      	bhi.n	8011a74 <memmove+0x20>
 8011a64:	1e43      	subs	r3, r0, #1
 8011a66:	42a1      	cmp	r1, r4
 8011a68:	d008      	beq.n	8011a7c <memmove+0x28>
 8011a6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011a6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011a72:	e7f8      	b.n	8011a66 <memmove+0x12>
 8011a74:	4601      	mov	r1, r0
 8011a76:	4402      	add	r2, r0
 8011a78:	428a      	cmp	r2, r1
 8011a7a:	d100      	bne.n	8011a7e <memmove+0x2a>
 8011a7c:	bd10      	pop	{r4, pc}
 8011a7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011a82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011a86:	e7f7      	b.n	8011a78 <memmove+0x24>

08011a88 <_realloc_r>:
 8011a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a8c:	4680      	mov	r8, r0
 8011a8e:	4614      	mov	r4, r2
 8011a90:	460e      	mov	r6, r1
 8011a92:	b921      	cbnz	r1, 8011a9e <_realloc_r+0x16>
 8011a94:	4611      	mov	r1, r2
 8011a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a9a:	f7ff bbc1 	b.w	8011220 <_malloc_r>
 8011a9e:	b92a      	cbnz	r2, 8011aac <_realloc_r+0x24>
 8011aa0:	f7ff fb56 	bl	8011150 <_free_r>
 8011aa4:	4625      	mov	r5, r4
 8011aa6:	4628      	mov	r0, r5
 8011aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011aac:	f000 f81b 	bl	8011ae6 <_malloc_usable_size_r>
 8011ab0:	4284      	cmp	r4, r0
 8011ab2:	4607      	mov	r7, r0
 8011ab4:	d802      	bhi.n	8011abc <_realloc_r+0x34>
 8011ab6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011aba:	d812      	bhi.n	8011ae2 <_realloc_r+0x5a>
 8011abc:	4621      	mov	r1, r4
 8011abe:	4640      	mov	r0, r8
 8011ac0:	f7ff fbae 	bl	8011220 <_malloc_r>
 8011ac4:	4605      	mov	r5, r0
 8011ac6:	2800      	cmp	r0, #0
 8011ac8:	d0ed      	beq.n	8011aa6 <_realloc_r+0x1e>
 8011aca:	42bc      	cmp	r4, r7
 8011acc:	4622      	mov	r2, r4
 8011ace:	4631      	mov	r1, r6
 8011ad0:	bf28      	it	cs
 8011ad2:	463a      	movcs	r2, r7
 8011ad4:	f7ff fb26 	bl	8011124 <memcpy>
 8011ad8:	4631      	mov	r1, r6
 8011ada:	4640      	mov	r0, r8
 8011adc:	f7ff fb38 	bl	8011150 <_free_r>
 8011ae0:	e7e1      	b.n	8011aa6 <_realloc_r+0x1e>
 8011ae2:	4635      	mov	r5, r6
 8011ae4:	e7df      	b.n	8011aa6 <_realloc_r+0x1e>

08011ae6 <_malloc_usable_size_r>:
 8011ae6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011aea:	1f18      	subs	r0, r3, #4
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	bfbc      	itt	lt
 8011af0:	580b      	ldrlt	r3, [r1, r0]
 8011af2:	18c0      	addlt	r0, r0, r3
 8011af4:	4770      	bx	lr
	...

08011af8 <_init>:
 8011af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011afa:	bf00      	nop
 8011afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011afe:	bc08      	pop	{r3}
 8011b00:	469e      	mov	lr, r3
 8011b02:	4770      	bx	lr

08011b04 <_fini>:
 8011b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b06:	bf00      	nop
 8011b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b0a:	bc08      	pop	{r3}
 8011b0c:	469e      	mov	lr, r3
 8011b0e:	4770      	bx	lr
