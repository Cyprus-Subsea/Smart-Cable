
icListen_SD9_USB_R_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d640  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  0800d830  0800d830  0001d830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da6c  0800da6c  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800da6c  0800da6c  0001da6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da74  0800da74  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da74  0800da74  0001da74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da78  0800da78  0001da78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0800da7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004944  200000ec  0800db68  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a30  0800db68  00024a30  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027796  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d36  00000000  00000000  000478ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f90  00000000  00000000  0004d5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d68  00000000  00000000  0004f578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026ffe  00000000  00000000  000512e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002801f  00000000  00000000  000782de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbffe  00000000  00000000  000a02fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016c2fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000898c  00000000  00000000  0016c34c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200000ec 	.word	0x200000ec
 800020c:	00000000 	.word	0x00000000
 8000210:	0800d818 	.word	0x0800d818

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000f0 	.word	0x200000f0
 800022c:	0800d818 	.word	0x0800d818

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b976 	b.w	8000544 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	4688      	mov	r8, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14d      	bne.n	800031c <__udivmoddi4+0xac>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d968      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000286:	fab2 f282 	clz	r2, r2
 800028a:	b152      	cbz	r2, 80002a2 <__udivmoddi4+0x32>
 800028c:	fa01 f302 	lsl.w	r3, r1, r2
 8000290:	f1c2 0120 	rsb	r1, r2, #32
 8000294:	fa20 f101 	lsr.w	r1, r0, r1
 8000298:	fa0c fc02 	lsl.w	ip, ip, r2
 800029c:	ea41 0803 	orr.w	r8, r1, r3
 80002a0:	4094      	lsls	r4, r2
 80002a2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002a6:	fbb8 f7f1 	udiv	r7, r8, r1
 80002aa:	fa1f fe8c 	uxth.w	lr, ip
 80002ae:	fb01 8817 	mls	r8, r1, r7, r8
 80002b2:	fb07 f00e 	mul.w	r0, r7, lr
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002bc:	4298      	cmp	r0, r3
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x66>
 80002c0:	eb1c 0303 	adds.w	r3, ip, r3
 80002c4:	f107 35ff 	add.w	r5, r7, #4294967295
 80002c8:	f080 811e 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002cc:	4298      	cmp	r0, r3
 80002ce:	f240 811b 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d2:	3f02      	subs	r7, #2
 80002d4:	4463      	add	r3, ip
 80002d6:	1a1b      	subs	r3, r3, r0
 80002d8:	fbb3 f0f1 	udiv	r0, r3, r1
 80002dc:	fb01 3310 	mls	r3, r1, r0, r3
 80002e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002e4:	b2a4      	uxth	r4, r4
 80002e6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x94>
 80002ee:	eb1c 0404 	adds.w	r4, ip, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8109 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8106 	bls.w	800050c <__udivmoddi4+0x29c>
 8000300:	4464      	add	r4, ip
 8000302:	3802      	subs	r0, #2
 8000304:	2100      	movs	r1, #0
 8000306:	eba4 040e 	sub.w	r4, r4, lr
 800030a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800030e:	b11e      	cbz	r6, 8000318 <__udivmoddi4+0xa8>
 8000310:	2300      	movs	r3, #0
 8000312:	40d4      	lsrs	r4, r2
 8000314:	e9c6 4300 	strd	r4, r3, [r6]
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	428b      	cmp	r3, r1
 800031e:	d908      	bls.n	8000332 <__udivmoddi4+0xc2>
 8000320:	2e00      	cmp	r6, #0
 8000322:	f000 80ee 	beq.w	8000502 <__udivmoddi4+0x292>
 8000326:	2100      	movs	r1, #0
 8000328:	e9c6 0500 	strd	r0, r5, [r6]
 800032c:	4608      	mov	r0, r1
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f183 	clz	r1, r3
 8000336:	2900      	cmp	r1, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80fc 	bhi.w	800053c <__udivmoddi4+0x2cc>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb65 0303 	sbc.w	r3, r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	4698      	mov	r8, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d0e2      	beq.n	8000318 <__udivmoddi4+0xa8>
 8000352:	e9c6 4800 	strd	r4, r8, [r6]
 8000356:	e7df      	b.n	8000318 <__udivmoddi4+0xa8>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8091 	bne.w	8000488 <__udivmoddi4+0x218>
 8000366:	eba1 000c 	sub.w	r0, r1, ip
 800036a:	2101      	movs	r1, #1
 800036c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000370:	fa1f fe8c 	uxth.w	lr, ip
 8000374:	fbb0 f3f7 	udiv	r3, r0, r7
 8000378:	fb07 0013 	mls	r0, r7, r3, r0
 800037c:	0c25      	lsrs	r5, r4, #16
 800037e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	42a8      	cmp	r0, r5
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0505 	adds.w	r5, ip, r5
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	42a8      	cmp	r0, r5
 8000396:	f200 80ce 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 800039a:	4643      	mov	r3, r8
 800039c:	1a2d      	subs	r5, r5, r0
 800039e:	fbb5 f0f7 	udiv	r0, r5, r7
 80003a2:	fb07 5510 	mls	r5, r7, r0, r5
 80003a6:	fb0e fe00 	mul.w	lr, lr, r0
 80003aa:	b2a4      	uxth	r4, r4
 80003ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80b6 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 80003c4:	4628      	mov	r0, r5
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79e      	b.n	800030e <__udivmoddi4+0x9e>
 80003d0:	f1c1 0720 	rsb	r7, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa25 fa07 	lsr.w	sl, r5, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fbba f8f9 	udiv	r8, sl, r9
 80003ea:	fa20 f307 	lsr.w	r3, r0, r7
 80003ee:	fb09 aa18 	mls	sl, r9, r8, sl
 80003f2:	408d      	lsls	r5, r1
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	431d      	orrs	r5, r3
 80003fa:	fa00 f301 	lsl.w	r3, r0, r1
 80003fe:	fb08 f00e 	mul.w	r0, r8, lr
 8000402:	0c2c      	lsrs	r4, r5, #16
 8000404:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000408:	42a0      	cmp	r0, r4
 800040a:	fa02 f201 	lsl.w	r2, r2, r1
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	42a0      	cmp	r0, r4
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4464      	add	r4, ip
 8000428:	1a24      	subs	r4, r4, r0
 800042a:	fbb4 f0f9 	udiv	r0, r4, r9
 800042e:	fb09 4410 	mls	r4, r9, r0, r4
 8000432:	fb00 fe0e 	mul.w	lr, r0, lr
 8000436:	b2ad      	uxth	r5, r5
 8000438:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800043c:	45a6      	cmp	lr, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f100 35ff 	add.w	r5, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	45a6      	cmp	lr, r4
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4464      	add	r4, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9502 	umull	r9, r5, r0, r2
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	42ac      	cmp	r4, r5
 8000460:	46c8      	mov	r8, r9
 8000462:	46ae      	mov	lr, r5
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	2e00      	cmp	r6, #0
 800046a:	d069      	beq.n	8000540 <__udivmoddi4+0x2d0>
 800046c:	ebb3 0208 	subs.w	r2, r3, r8
 8000470:	eb64 040e 	sbc.w	r4, r4, lr
 8000474:	fa22 f301 	lsr.w	r3, r2, r1
 8000478:	fa04 f707 	lsl.w	r7, r4, r7
 800047c:	431f      	orrs	r7, r3
 800047e:	40cc      	lsrs	r4, r1
 8000480:	e9c6 7400 	strd	r7, r4, [r6]
 8000484:	2100      	movs	r1, #0
 8000486:	e747      	b.n	8000318 <__udivmoddi4+0xa8>
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	f1c2 0120 	rsb	r1, r2, #32
 8000490:	fa25 f301 	lsr.w	r3, r5, r1
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa20 f101 	lsr.w	r1, r0, r1
 800049c:	4095      	lsls	r5, r2
 800049e:	430d      	orrs	r5, r1
 80004a0:	fbb3 f1f7 	udiv	r1, r3, r7
 80004a4:	fb07 3311 	mls	r3, r7, r1, r3
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	0c28      	lsrs	r0, r5, #16
 80004ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004b2:	fb01 f30e 	mul.w	r3, r1, lr
 80004b6:	4283      	cmp	r3, r0
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0000 	adds.w	r0, ip, r0
 80004c2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	4283      	cmp	r3, r0
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3902      	subs	r1, #2
 80004ce:	4460      	add	r0, ip
 80004d0:	1ac0      	subs	r0, r0, r3
 80004d2:	fbb0 f3f7 	udiv	r3, r0, r7
 80004d6:	fb07 0013 	mls	r0, r7, r3, r0
 80004da:	b2ad      	uxth	r5, r5
 80004dc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004e0:	fb03 f00e 	mul.w	r0, r3, lr
 80004e4:	42a8      	cmp	r0, r5
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0505 	adds.w	r5, ip, r5
 80004ec:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	42a8      	cmp	r0, r5
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4465      	add	r5, ip
 80004fa:	1a28      	subs	r0, r5, r0
 80004fc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	4631      	mov	r1, r6
 8000504:	4630      	mov	r0, r6
 8000506:	e707      	b.n	8000318 <__udivmoddi4+0xa8>
 8000508:	462f      	mov	r7, r5
 800050a:	e6e4      	b.n	80002d6 <__udivmoddi4+0x66>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f9      	b.n	8000304 <__udivmoddi4+0x94>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb65 0e0c 	sbc.w	lr, r5, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4643      	mov	r3, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4628      	mov	r0, r5
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4641      	mov	r1, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	4464      	add	r4, ip
 8000532:	3802      	subs	r0, #2
 8000534:	e747      	b.n	80003c6 <__udivmoddi4+0x156>
 8000536:	3b02      	subs	r3, #2
 8000538:	4465      	add	r5, ip
 800053a:	e72f      	b.n	800039c <__udivmoddi4+0x12c>
 800053c:	4608      	mov	r0, r1
 800053e:	e706      	b.n	800034e <__udivmoddi4+0xde>
 8000540:	4631      	mov	r1, r6
 8000542:	e6e9      	b.n	8000318 <__udivmoddi4+0xa8>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <sd_storage_init>:

extern ss_pp sd_cards_ss[4];
extern UART_HandleTypeDef huart1;

F_RES sd_storage_init(sd_storage_t* self_object)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b08e      	sub	sp, #56	; 0x38
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  char t5[10];
  FRESULT res;
  DWORD fre_clust, fre_sect, tot_sect;
  FATFS*  fs;

  MX_FATFS_Init();
 8000550:	f006 face 	bl	8006af0 <MX_FATFS_Init>

  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000554:	2300      	movs	r3, #0
 8000556:	637b      	str	r3, [r7, #52]	; 0x34
 8000558:	e08c      	b.n	8000674 <sd_storage_init+0x12c>
  {
	  sprintf(tt,"%d:",i);
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000560:	4949      	ldr	r1, [pc, #292]	; (8000688 <sd_storage_init+0x140>)
 8000562:	4618      	mov	r0, r3
 8000564:	f00c fdda 	bl	800d11c <siprintf>
	  if(f_mount(&self_object->disks[i].fs,tt,1)==FR_OK){
 8000568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800056a:	f44f 7211 	mov.w	r2, #580	; 0x244
 800056e:	fb02 f303 	mul.w	r3, r2, r3
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	4413      	add	r3, r2
 8000576:	f107 0120 	add.w	r1, r7, #32
 800057a:	2201      	movs	r2, #1
 800057c:	4618      	mov	r0, r3
 800057e:	f009 fd61 	bl	800a044 <f_mount>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d167      	bne.n	8000658 <sd_storage_init+0x110>
		  self_object->disks[i].status=DISK_PRESENT;
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800058c:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000590:	fb01 f303 	mul.w	r3, r1, r3
 8000594:	4413      	add	r3, r2
 8000596:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
		  sprintf(t5,"ID:%d\n",i);
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80005a4:	4939      	ldr	r1, [pc, #228]	; (800068c <sd_storage_init+0x144>)
 80005a6:	4618      	mov	r0, r3
 80005a8:	f00c fdb8 	bl	800d11c <siprintf>
		  HAL_UART_Transmit(&huart1,t5,strlen(t5),100);
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff fe3d 	bl	8000230 <strlen>
 80005b6:	4603      	mov	r3, r0
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	f107 0114 	add.w	r1, r7, #20
 80005be:	2364      	movs	r3, #100	; 0x64
 80005c0:	4833      	ldr	r0, [pc, #204]	; (8000690 <sd_storage_init+0x148>)
 80005c2:	f004 ff88 	bl	80054d6 <HAL_UART_Transmit>
  		  if(f_getfree(tt, &fre_clust, &fs)==FR_OK){
 80005c6:	f107 020c 	add.w	r2, r7, #12
 80005ca:	f107 0110 	add.w	r1, r7, #16
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	4618      	mov	r0, r3
 80005d4:	f009 fd7c 	bl	800a0d0 <f_getfree>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d147      	bne.n	800066e <sd_storage_init+0x126>
		    tot_sect = (self_object->disks[i].fs.n_fatent - 2) * self_object->disks[i].fs.csize;
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005e2:	f44f 7111 	mov.w	r1, #580	; 0x244
 80005e6:	fb01 f303 	mul.w	r3, r1, r3
 80005ea:	4413      	add	r3, r2
 80005ec:	331c      	adds	r3, #28
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	3b02      	subs	r3, #2
 80005f2:	6879      	ldr	r1, [r7, #4]
 80005f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80005f6:	f44f 7011 	mov.w	r0, #580	; 0x244
 80005fa:	fb00 f202 	mul.w	r2, r0, r2
 80005fe:	440a      	add	r2, r1
 8000600:	320a      	adds	r2, #10
 8000602:	8812      	ldrh	r2, [r2, #0]
 8000604:	fb02 f303 	mul.w	r3, r2, r3
 8000608:	633b      	str	r3, [r7, #48]	; 0x30
			fre_sect = fre_clust * self_object->disks[i].fs.csize;
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800060e:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000612:	fb01 f303 	mul.w	r3, r1, r3
 8000616:	4413      	add	r3, r2
 8000618:	330a      	adds	r3, #10
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	693b      	ldr	r3, [r7, #16]
 8000620:	fb02 f303 	mul.w	r3, r2, r3
 8000624:	62fb      	str	r3, [r7, #44]	; 0x2c
			self_object->disks[i].size=tot_sect/2;
 8000626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000628:	085a      	lsrs	r2, r3, #1
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800062e:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000632:	fb00 f303 	mul.w	r3, r0, r3
 8000636:	440b      	add	r3, r1
 8000638:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800063c:	601a      	str	r2, [r3, #0]
			self_object->disks[i].free_space=fre_sect/2;
 800063e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000640:	085a      	lsrs	r2, r3, #1
 8000642:	6879      	ldr	r1, [r7, #4]
 8000644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000646:	f44f 7011 	mov.w	r0, #580	; 0x244
 800064a:	fb00 f303 	mul.w	r3, r0, r3
 800064e:	440b      	add	r3, r1
 8000650:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	e00a      	b.n	800066e <sd_storage_init+0x126>
		  }
	  }
	  else
	  {
		 self_object->disks[i].status=DISK_ABSENT;
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800065c:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000660:	fb01 f303 	mul.w	r3, r1, r3
 8000664:	4413      	add	r3, r2
 8000666:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800066a:	2201      	movs	r2, #1
 800066c:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 800066e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000670:	3301      	adds	r3, #1
 8000672:	637b      	str	r3, [r7, #52]	; 0x34
 8000674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000676:	2b03      	cmp	r3, #3
 8000678:	f77f af6f 	ble.w	800055a <sd_storage_init+0x12>
	  }
  }
  return F_OK;
 800067c:	2300      	movs	r3, #0
}
 800067e:	4618      	mov	r0, r3
 8000680:	3738      	adds	r7, #56	; 0x38
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	0800d830 	.word	0x0800d830
 800068c:	0800d834 	.word	0x0800d834
 8000690:	2000045c 	.word	0x2000045c

08000694 <sd_storage_link_ss>:

F_RES sd_storage_link_ss(sd_storage_t* self_object,uint8_t disk_num, uint16_t sd_ss_pin,GPIO_TypeDef* sd_ss_port)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	460b      	mov	r3, r1
 80006a0:	72fb      	strb	r3, [r7, #11]
 80006a2:	4613      	mov	r3, r2
 80006a4:	813b      	strh	r3, [r7, #8]
	  sd_cards_ss[disk_num].sd_ss_pin=sd_ss_pin;
 80006a6:	7afb      	ldrb	r3, [r7, #11]
 80006a8:	4907      	ldr	r1, [pc, #28]	; (80006c8 <sd_storage_link_ss+0x34>)
 80006aa:	893a      	ldrh	r2, [r7, #8]
 80006ac:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
	  sd_cards_ss[disk_num].sd_ss_port=sd_ss_port;
 80006b0:	7afb      	ldrb	r3, [r7, #11]
 80006b2:	4a05      	ldr	r2, [pc, #20]	; (80006c8 <sd_storage_link_ss+0x34>)
 80006b4:	00db      	lsls	r3, r3, #3
 80006b6:	4413      	add	r3, r2
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	605a      	str	r2, [r3, #4]
	  return F_OK;
 80006bc:	2300      	movs	r3, #0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	20000dc8 	.word	0x20000dc8

080006cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	4a06      	ldr	r2, [pc, #24]	; (80006f4 <vApplicationGetIdleTaskMemory+0x28>)
 80006dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	4a05      	ldr	r2, [pc, #20]	; (80006f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80006e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2280      	movs	r2, #128	; 0x80
 80006e8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006ea:	bf00      	nop
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	20000108 	.word	0x20000108
 80006f8:	200001bc 	.word	0x200001bc

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b5b0      	push	{r4, r5, r7, lr}
 80006fe:	b09a      	sub	sp, #104	; 0x68
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000702:	f000 ff39 	bl	8001578 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000706:	f000 f861 	bl	80007cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070a:	f000 f977 	bl	80009fc <MX_GPIO_Init>
  MX_SPI1_Init();
 800070e:	f000 f8c7 	bl	80008a0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000712:	f000 f949 	bl	80009a8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000716:	f000 f8f9 	bl	800090c <MX_TIM2_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of AppliEvent */
  osMessageQDef(AppliEvent, 16, uint16_t);
 800071a:	4b24      	ldr	r3, [pc, #144]	; (80007ac <main+0xb0>)
 800071c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000720:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000722:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  AppliEventHandle = osMessageCreate(osMessageQ(AppliEvent), NULL);
 8000726:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800072a:	2100      	movs	r1, #0
 800072c:	4618      	mov	r0, r3
 800072e:	f009 feb9 	bl	800a4a4 <osMessageCreate>
 8000732:	4603      	mov	r3, r0
 8000734:	4a1e      	ldr	r2, [pc, #120]	; (80007b0 <main+0xb4>)
 8000736:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000738:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <main+0xb8>)
 800073a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800073e:	461d      	mov	r5, r3
 8000740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000744:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000748:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800074c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f009 fe46 	bl	800a3e4 <osThreadCreate>
 8000758:	4603      	mov	r3, r0
 800075a:	4a17      	ldr	r2, [pc, #92]	; (80007b8 <main+0xbc>)
 800075c:	6013      	str	r3, [r2, #0]

  /* definition and creation of storage_t */
  osThreadDef(storage_t, storage_f, osPriorityNormal, 0, 1024);
 800075e:	4b17      	ldr	r3, [pc, #92]	; (80007bc <main+0xc0>)
 8000760:	f107 0420 	add.w	r4, r7, #32
 8000764:	461d      	mov	r5, r3
 8000766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800076a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800076e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  storage_tHandle = osThreadCreate(osThread(storage_t), NULL);
 8000772:	f107 0320 	add.w	r3, r7, #32
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f009 fe33 	bl	800a3e4 <osThreadCreate>
 800077e:	4603      	mov	r3, r0
 8000780:	4a0f      	ldr	r2, [pc, #60]	; (80007c0 <main+0xc4>)
 8000782:	6013      	str	r3, [r2, #0]

  /* definition and creation of sensor_t */
  osThreadDef(sensor_t, sensor_f, osPriorityNormal, 0, 128);
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <main+0xc8>)
 8000786:	1d3c      	adds	r4, r7, #4
 8000788:	461d      	mov	r5, r3
 800078a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800078c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800078e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000792:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sensor_tHandle = osThreadCreate(osThread(sensor_t), NULL);
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f009 fe22 	bl	800a3e4 <osThreadCreate>
 80007a0:	4603      	mov	r3, r0
 80007a2:	4a09      	ldr	r2, [pc, #36]	; (80007c8 <main+0xcc>)
 80007a4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007a6:	f009 fe16 	bl	800a3d6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <main+0xae>
 80007ac:	0800d860 	.word	0x0800d860
 80007b0:	200004ac 	.word	0x200004ac
 80007b4:	0800d870 	.word	0x0800d870
 80007b8:	200004a0 	.word	0x200004a0
 80007bc:	0800d88c 	.word	0x0800d88c
 80007c0:	200004a4 	.word	0x200004a4
 80007c4:	0800d8a8 	.word	0x0800d8a8
 80007c8:	200004a8 	.word	0x200004a8

080007cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b09c      	sub	sp, #112	; 0x70
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007d6:	2238      	movs	r2, #56	; 0x38
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f00c fb40 	bl	800ce60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2220      	movs	r2, #32
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f00c fb32 	bl	800ce60 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007fc:	2301      	movs	r3, #1
 80007fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000800:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000804:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8000806:	2304      	movs	r3, #4
 8000808:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080a:	2301      	movs	r3, #1
 800080c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 800080e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000812:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000814:	2302      	movs	r3, #2
 8000816:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000818:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800081c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800081e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000822:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8000824:	2302      	movs	r3, #2
 8000826:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8000828:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800082c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV2;
 800082e:	2310      	movs	r3, #16
 8000830:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000832:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000836:	4618      	mov	r0, r3
 8000838:	f002 ff8c 	bl	8003754 <HAL_RCC_OscConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000842:	f000 fa43 	bl	8000ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000846:	230f      	movs	r3, #15
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084a:	2302      	movs	r3, #2
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000856:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800085c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000860:	2102      	movs	r1, #2
 8000862:	4618      	mov	r0, r3
 8000864:	f003 fa8c 	bl	8003d80 <HAL_RCC_ClockConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800086e:	f000 fa2d 	bl	8000ccc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000872:	2310      	movs	r3, #16
 8000874:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	4618      	mov	r0, r3
 800087e:	f003 fcc7 	bl	8004210 <HAL_RCCEx_PeriphCLKConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000888:	f000 fa20 	bl	8000ccc <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800088c:	4b03      	ldr	r3, [pc, #12]	; (800089c <SystemClock_Config+0xd0>)
 800088e:	2201      	movs	r2, #1
 8000890:	601a      	str	r2, [r3, #0]
}
 8000892:	bf00      	nop
 8000894:	3770      	adds	r7, #112	; 0x70
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	42420070 	.word	0x42420070

080008a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008a4:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_SPI1_Init+0x64>)
 80008a6:	4a18      	ldr	r2, [pc, #96]	; (8000908 <MX_SPI1_Init+0x68>)
 80008a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_SPI1_Init+0x64>)
 80008ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_SPI1_Init+0x64>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_SPI1_Init+0x64>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_SPI1_Init+0x64>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_SPI1_Init+0x64>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_SPI1_Init+0x64>)
 80008cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_SPI1_Init+0x64>)
 80008d4:	2208      	movs	r2, #8
 80008d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <MX_SPI1_Init+0x64>)
 80008da:	2200      	movs	r2, #0
 80008dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_SPI1_Init+0x64>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <MX_SPI1_Init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_SPI1_Init+0x64>)
 80008ec:	220a      	movs	r2, #10
 80008ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <MX_SPI1_Init+0x64>)
 80008f2:	f003 fdbf 	bl	8004474 <HAL_SPI_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008fc:	f000 f9e6 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200003bc 	.word	0x200003bc
 8000908:	40013000 	.word	0x40013000

0800090c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000912:	f107 0308 	add.w	r3, r7, #8
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000920:	463b      	mov	r3, r7
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000928:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <MX_TIM2_Init+0x98>)
 800092a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800092e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39999;
 8000930:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <MX_TIM2_Init+0x98>)
 8000932:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000936:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000938:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <MX_TIM2_Init+0x98>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800093e:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <MX_TIM2_Init+0x98>)
 8000940:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000944:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <MX_TIM2_Init+0x98>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094c:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <MX_TIM2_Init+0x98>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000952:	4814      	ldr	r0, [pc, #80]	; (80009a4 <MX_TIM2_Init+0x98>)
 8000954:	f004 f95e 	bl	8004c14 <HAL_TIM_Base_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800095e:	f000 f9b5 	bl	8000ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000966:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	4619      	mov	r1, r3
 800096e:	480d      	ldr	r0, [pc, #52]	; (80009a4 <MX_TIM2_Init+0x98>)
 8000970:	f004 fb02 	bl	8004f78 <HAL_TIM_ConfigClockSource>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800097a:	f000 f9a7 	bl	8000ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000986:	463b      	mov	r3, r7
 8000988:	4619      	mov	r1, r3
 800098a:	4806      	ldr	r0, [pc, #24]	; (80009a4 <MX_TIM2_Init+0x98>)
 800098c:	f004 fcde 	bl	800534c <HAL_TIMEx_MasterConfigSynchronization>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000996:	f000 f999 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	3718      	adds	r7, #24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000414 	.word	0x20000414

080009a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009ae:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <MX_USART1_UART_Init+0x50>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009e0:	f004 fd2c 	bl	800543c <HAL_UART_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009ea:	f000 f96f 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	2000045c 	.word	0x2000045c
 80009f8:	40013800 	.word	0x40013800

080009fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a02:	f107 0310 	add.w	r3, r7, #16
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a10:	4b36      	ldr	r3, [pc, #216]	; (8000aec <MX_GPIO_Init+0xf0>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	4a35      	ldr	r2, [pc, #212]	; (8000aec <MX_GPIO_Init+0xf0>)
 8000a16:	f043 0320 	orr.w	r3, r3, #32
 8000a1a:	6193      	str	r3, [r2, #24]
 8000a1c:	4b33      	ldr	r3, [pc, #204]	; (8000aec <MX_GPIO_Init+0xf0>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	f003 0320 	and.w	r3, r3, #32
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a28:	4b30      	ldr	r3, [pc, #192]	; (8000aec <MX_GPIO_Init+0xf0>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	4a2f      	ldr	r2, [pc, #188]	; (8000aec <MX_GPIO_Init+0xf0>)
 8000a2e:	f043 0310 	orr.w	r3, r3, #16
 8000a32:	6193      	str	r3, [r2, #24]
 8000a34:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <MX_GPIO_Init+0xf0>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	f003 0310 	and.w	r3, r3, #16
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a40:	4b2a      	ldr	r3, [pc, #168]	; (8000aec <MX_GPIO_Init+0xf0>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	4a29      	ldr	r2, [pc, #164]	; (8000aec <MX_GPIO_Init+0xf0>)
 8000a46:	f043 0304 	orr.w	r3, r3, #4
 8000a4a:	6193      	str	r3, [r2, #24]
 8000a4c:	4b27      	ldr	r3, [pc, #156]	; (8000aec <MX_GPIO_Init+0xf0>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	f003 0304 	and.w	r3, r3, #4
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a58:	4b24      	ldr	r3, [pc, #144]	; (8000aec <MX_GPIO_Init+0xf0>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	4a23      	ldr	r2, [pc, #140]	; (8000aec <MX_GPIO_Init+0xf0>)
 8000a5e:	f043 0308 	orr.w	r3, r3, #8
 8000a62:	6193      	str	r3, [r2, #24]
 8000a64:	4b21      	ldr	r3, [pc, #132]	; (8000aec <MX_GPIO_Init+0xf0>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	f003 0308 	and.w	r3, r3, #8
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_SD3_GPIO_Port, SS_SD3_Pin, GPIO_PIN_SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	2102      	movs	r1, #2
 8000a74:	481e      	ldr	r0, [pc, #120]	; (8000af0 <MX_GPIO_Init+0xf4>)
 8000a76:	f001 f97b 	bl	8001d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin, GPIO_PIN_SET);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	2186      	movs	r1, #134	; 0x86
 8000a7e:	481d      	ldr	r0, [pc, #116]	; (8000af4 <MX_GPIO_Init+0xf8>)
 8000a80:	f001 f976 	bl	8001d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_VBUS_GPIO_Port, USB_VBUS_Pin, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2101      	movs	r1, #1
 8000a88:	481b      	ldr	r0, [pc, #108]	; (8000af8 <MX_GPIO_Init+0xfc>)
 8000a8a:	f001 f971 	bl	8001d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SS_SD3_Pin */
  GPIO_InitStruct.Pin = SS_SD3_Pin;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SS_SD3_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 0310 	add.w	r3, r7, #16
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4812      	ldr	r0, [pc, #72]	; (8000af0 <MX_GPIO_Init+0xf4>)
 8000aa6:	f000 ffdf 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS_SD1_Pin SS_SD2_Pin SS_SD4_Pin */
  GPIO_InitStruct.Pin = SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin;
 8000aaa:	2386      	movs	r3, #134	; 0x86
 8000aac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0310 	add.w	r3, r7, #16
 8000abe:	4619      	mov	r1, r3
 8000ac0:	480c      	ldr	r0, [pc, #48]	; (8000af4 <MX_GPIO_Init+0xf8>)
 8000ac2:	f000 ffd1 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 0310 	add.w	r3, r7, #16
 8000ada:	4619      	mov	r1, r3
 8000adc:	4806      	ldr	r0, [pc, #24]	; (8000af8 <MX_GPIO_Init+0xfc>)
 8000ade:	f000 ffc3 	bl	8001a68 <HAL_GPIO_Init>

}
 8000ae2:	bf00      	nop
 8000ae4:	3720      	adds	r7, #32
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40011000 	.word	0x40011000
 8000af4:	40010800 	.word	0x40010800
 8000af8:	40010c00 	.word	0x40010c00

08000afc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_IT(&huart1,uart_tx_msg,1);
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr

08000b0e <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000b16:	f00b fe87 	bl	800c828 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f009 fcae 	bl	800a47c <osDelay>
 8000b20:	e7fb      	b.n	8000b1a <StartDefaultTask+0xc>
	...

08000b24 <storage_f>:
* @retval None
*/

/* USER CODE END Header_storage_f */
void storage_f(void const * argument)
{
 8000b24:	b590      	push	{r4, r7, lr}
 8000b26:	b091      	sub	sp, #68	; 0x44
 8000b28:	af02      	add	r7, sp, #8
 8000b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN storage_f */
  char t5[40];
  osDelay(500);
 8000b2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b30:	f009 fca4 	bl	800a47c <osDelay>
  HAL_UART_Transmit(&huart1,"FATFS start\n",12,100);
 8000b34:	2364      	movs	r3, #100	; 0x64
 8000b36:	220c      	movs	r2, #12
 8000b38:	4933      	ldr	r1, [pc, #204]	; (8000c08 <storage_f+0xe4>)
 8000b3a:	4834      	ldr	r0, [pc, #208]	; (8000c0c <storage_f+0xe8>)
 8000b3c:	f004 fccb 	bl	80054d6 <HAL_UART_Transmit>

  sd_storage_link_ss(&storage1,0,SS_SD1_Pin,GPIOA);
 8000b40:	4b33      	ldr	r3, [pc, #204]	; (8000c10 <storage_f+0xec>)
 8000b42:	2202      	movs	r2, #2
 8000b44:	2100      	movs	r1, #0
 8000b46:	4833      	ldr	r0, [pc, #204]	; (8000c14 <storage_f+0xf0>)
 8000b48:	f7ff fda4 	bl	8000694 <sd_storage_link_ss>
  sd_storage_link_ss(&storage1,1,SS_SD2_Pin,GPIOA);
 8000b4c:	4b30      	ldr	r3, [pc, #192]	; (8000c10 <storage_f+0xec>)
 8000b4e:	2204      	movs	r2, #4
 8000b50:	2101      	movs	r1, #1
 8000b52:	4830      	ldr	r0, [pc, #192]	; (8000c14 <storage_f+0xf0>)
 8000b54:	f7ff fd9e 	bl	8000694 <sd_storage_link_ss>
  sd_storage_link_ss(&storage1,2,SS_SD3_Pin,SS_SD3_GPIO_Port);
 8000b58:	4b2f      	ldr	r3, [pc, #188]	; (8000c18 <storage_f+0xf4>)
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	2102      	movs	r1, #2
 8000b5e:	482d      	ldr	r0, [pc, #180]	; (8000c14 <storage_f+0xf0>)
 8000b60:	f7ff fd98 	bl	8000694 <sd_storage_link_ss>
  sd_storage_link_ss(&storage1,3,SS_SD4_Pin,GPIOA);
 8000b64:	4b2a      	ldr	r3, [pc, #168]	; (8000c10 <storage_f+0xec>)
 8000b66:	2280      	movs	r2, #128	; 0x80
 8000b68:	2103      	movs	r1, #3
 8000b6a:	482a      	ldr	r0, [pc, #168]	; (8000c14 <storage_f+0xf0>)
 8000b6c:	f7ff fd92 	bl	8000694 <sd_storage_link_ss>
  sd_storage_init(&storage1);
 8000b70:	4828      	ldr	r0, [pc, #160]	; (8000c14 <storage_f+0xf0>)
 8000b72:	f7ff fce9 	bl	8000548 <sd_storage_init>

  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000b76:	2300      	movs	r3, #0
 8000b78:	637b      	str	r3, [r7, #52]	; 0x34
 8000b7a:	e037      	b.n	8000bec <storage_f+0xc8>
  {
	sprintf(t5,"I:%d S:%d T:%d F:%d\n",i,storage1.disks[i].status,storage1.disks[i].size,storage1.disks[i].free_space);
 8000b7c:	4a25      	ldr	r2, [pc, #148]	; (8000c14 <storage_f+0xf0>)
 8000b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b80:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000b84:	fb01 f303 	mul.w	r3, r1, r3
 8000b88:	4413      	add	r3, r2
 8000b8a:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	461c      	mov	r4, r3
 8000b92:	4a20      	ldr	r2, [pc, #128]	; (8000c14 <storage_f+0xf0>)
 8000b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b96:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000b9a:	fb01 f303 	mul.w	r3, r1, r3
 8000b9e:	4413      	add	r3, r2
 8000ba0:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	491b      	ldr	r1, [pc, #108]	; (8000c14 <storage_f+0xf0>)
 8000ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000baa:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000bae:	fb00 f202 	mul.w	r2, r0, r2
 8000bb2:	440a      	add	r2, r1
 8000bb4:	f502 7210 	add.w	r2, r2, #576	; 0x240
 8000bb8:	6812      	ldr	r2, [r2, #0]
 8000bba:	f107 000c 	add.w	r0, r7, #12
 8000bbe:	9201      	str	r2, [sp, #4]
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	4623      	mov	r3, r4
 8000bc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bc6:	4915      	ldr	r1, [pc, #84]	; (8000c1c <storage_f+0xf8>)
 8000bc8:	f00c faa8 	bl	800d11c <siprintf>
	HAL_UART_Transmit(&huart1,t5,strlen(t5),100);
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fb2d 	bl	8000230 <strlen>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	f107 010c 	add.w	r1, r7, #12
 8000bde:	2364      	movs	r3, #100	; 0x64
 8000be0:	480a      	ldr	r0, [pc, #40]	; (8000c0c <storage_f+0xe8>)
 8000be2:	f004 fc78 	bl	80054d6 <HAL_UART_Transmit>
  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000be8:	3301      	adds	r3, #1
 8000bea:	637b      	str	r3, [r7, #52]	; 0x34
 8000bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bee:	2b03      	cmp	r3, #3
 8000bf0:	ddc4      	ble.n	8000b7c <storage_f+0x58>
  readDir("2:/");
  HAL_UART_Transmit(&huart1,"read SD4\n",9,100);
  readDir("3:/");
  */

  HAL_UART_Transmit(&huart1,"FATFS finished\n",15,100);
 8000bf2:	2364      	movs	r3, #100	; 0x64
 8000bf4:	220f      	movs	r2, #15
 8000bf6:	490a      	ldr	r1, [pc, #40]	; (8000c20 <storage_f+0xfc>)
 8000bf8:	4804      	ldr	r0, [pc, #16]	; (8000c0c <storage_f+0xe8>)
 8000bfa:	f004 fc6c 	bl	80054d6 <HAL_UART_Transmit>

  /* Infinite loop */
  for(;;)
  {
    osDelay(200);
 8000bfe:	20c8      	movs	r0, #200	; 0xc8
 8000c00:	f009 fc3c 	bl	800a47c <osDelay>
 8000c04:	e7fb      	b.n	8000bfe <storage_f+0xda>
 8000c06:	bf00      	nop
 8000c08:	0800d8c4 	.word	0x0800d8c4
 8000c0c:	2000045c 	.word	0x2000045c
 8000c10:	40010800 	.word	0x40010800
 8000c14:	200004b0 	.word	0x200004b0
 8000c18:	40011000 	.word	0x40011000
 8000c1c:	0800d8d4 	.word	0x0800d8d4
 8000c20:	0800d8ec 	.word	0x0800d8ec

08000c24 <sensor_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensor_f */
void sensor_f(void const * argument)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensor_f */
  /* Infinite loop */
  /* USER CODE BEGIN 5 */

  MX_USB_HOST_Init();
 8000c2c:	f00b fdfc 	bl	800c828 <MX_USB_HOST_Init>

  osEvent event;
  /* Infinite loop */
  for(;;)
  {
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 8000c30:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <sensor_f+0x70>)
 8000c32:	6819      	ldr	r1, [r3, #0]
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	f04f 32ff 	mov.w	r2, #4294967295
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f009 fc99 	bl	800a574 <osMessageGet>

	  if(event.status == osEventMessage)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	2b10      	cmp	r3, #16
 8000c46:	d120      	bne.n	8000c8a <sensor_f+0x66>
	  {
		switch(event.value.v)
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	2b03      	cmp	r3, #3
 8000c4c:	d006      	beq.n	8000c5c <sensor_f+0x38>
 8000c4e:	2b03      	cmp	r3, #3
 8000c50:	d81d      	bhi.n	8000c8e <sensor_f+0x6a>
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d012      	beq.n	8000c7c <sensor_f+0x58>
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d007      	beq.n	8000c6a <sensor_f+0x46>
		 case APPLICATION_START:
		   HAL_UART_Transmit(&huart1,"st",2,100);
		 break;

		 default:
		 break;
 8000c5a:	e018      	b.n	8000c8e <sensor_f+0x6a>
		  HAL_UART_Transmit(&huart1,"ds",2,100);
 8000c5c:	2364      	movs	r3, #100	; 0x64
 8000c5e:	2202      	movs	r2, #2
 8000c60:	490d      	ldr	r1, [pc, #52]	; (8000c98 <sensor_f+0x74>)
 8000c62:	480e      	ldr	r0, [pc, #56]	; (8000c9c <sensor_f+0x78>)
 8000c64:	f004 fc37 	bl	80054d6 <HAL_UART_Transmit>
		 break;
 8000c68:	e012      	b.n	8000c90 <sensor_f+0x6c>
		   HAL_UART_Transmit(&huart1,"rd",2,100);
 8000c6a:	2364      	movs	r3, #100	; 0x64
 8000c6c:	2202      	movs	r2, #2
 8000c6e:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <sensor_f+0x7c>)
 8000c70:	480a      	ldr	r0, [pc, #40]	; (8000c9c <sensor_f+0x78>)
 8000c72:	f004 fc30 	bl	80054d6 <HAL_UART_Transmit>
		   send_function();
 8000c76:	f00b fda9 	bl	800c7cc <send_function>
		 break;
 8000c7a:	e009      	b.n	8000c90 <sensor_f+0x6c>
		   HAL_UART_Transmit(&huart1,"st",2,100);
 8000c7c:	2364      	movs	r3, #100	; 0x64
 8000c7e:	2202      	movs	r2, #2
 8000c80:	4908      	ldr	r1, [pc, #32]	; (8000ca4 <sensor_f+0x80>)
 8000c82:	4806      	ldr	r0, [pc, #24]	; (8000c9c <sensor_f+0x78>)
 8000c84:	f004 fc27 	bl	80054d6 <HAL_UART_Transmit>
		 break;
 8000c88:	e002      	b.n	8000c90 <sensor_f+0x6c>
		 }
	   }
 8000c8a:	bf00      	nop
 8000c8c:	e7d0      	b.n	8000c30 <sensor_f+0xc>
		 break;
 8000c8e:	bf00      	nop
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 8000c90:	e7ce      	b.n	8000c30 <sensor_f+0xc>
 8000c92:	bf00      	nop
 8000c94:	200004ac 	.word	0x200004ac
 8000c98:	0800d8fc 	.word	0x0800d8fc
 8000c9c:	2000045c 	.word	0x2000045c
 8000ca0:	0800d900 	.word	0x0800d900
 8000ca4:	0800d904 	.word	0x0800d904

08000ca8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d101      	bne.n	8000cbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cba:	f000 fc73 	bl	80015a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40012c00 	.word	0x40012c00

08000ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd0:	b672      	cpsid	i
}
 8000cd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <Error_Handler+0x8>
	...

08000cd8 <sd_ss_set_active>:
extern UART_HandleTypeDef huart1;
extern volatile uint16_t htim2;


void sd_ss_set_active(uint8_t drv)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
  active_sd_ss_pin=sd_cards_ss[drv].sd_ss_pin;
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	4a08      	ldr	r2, [pc, #32]	; (8000d08 <sd_ss_set_active+0x30>)
 8000ce6:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <sd_ss_set_active+0x34>)
 8000cec:	801a      	strh	r2, [r3, #0]
  active_sd_ss_port=sd_cards_ss[drv].sd_ss_port;
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	4a05      	ldr	r2, [pc, #20]	; (8000d08 <sd_ss_set_active+0x30>)
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	4413      	add	r3, r2
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <sd_ss_set_active+0x38>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000dc8 	.word	0x20000dc8
 8000d0c:	20000dc2 	.word	0x20000dc2
 8000d10:	20000dc4 	.word	0x20000dc4

08000d14 <sd_ss_active_pin_down>:

void sd_ss_active_pin_down()
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(active_sd_ss_port, active_sd_ss_pin, GPIO_PIN_RESET);
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <sd_ss_active_pin_down+0x18>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <sd_ss_active_pin_down+0x1c>)
 8000d1e:	8811      	ldrh	r1, [r2, #0]
 8000d20:	2200      	movs	r2, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f001 f824 	bl	8001d70 <HAL_GPIO_WritePin>
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000dc4 	.word	0x20000dc4
 8000d30:	20000dc2 	.word	0x20000dc2

08000d34 <sd_ss_active_pin_up>:
void sd_ss_active_pin_up()
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(active_sd_ss_port, active_sd_ss_pin, GPIO_PIN_SET);
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <sd_ss_active_pin_up+0x18>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <sd_ss_active_pin_up+0x1c>)
 8000d3e:	8811      	ldrh	r1, [r2, #0]
 8000d40:	2201      	movs	r2, #1
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 f814 	bl	8001d70 <HAL_GPIO_WritePin>
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000dc4 	.word	0x20000dc4
 8000d50:	20000dc2 	.word	0x20000dc2

08000d54 <SD_cmd>:



//-----------------------------------------------
static uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
  uint8_t n, res;
  // ACMD<n> is the command sequense of CMD55-CMD<n>
  if (cmd & 0x80)
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	da0e      	bge.n	8000d86 <SD_cmd+0x32>
  {
    cmd &= 0x7F;
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d6e:	71fb      	strb	r3, [r7, #7]
    res = SD_cmd(CMD55, 0);
 8000d70:	2100      	movs	r1, #0
 8000d72:	2077      	movs	r0, #119	; 0x77
 8000d74:	f7ff ffee 	bl	8000d54 <SD_cmd>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	73bb      	strb	r3, [r7, #14]
    if (res > 1) return res;
 8000d7c:	7bbb      	ldrb	r3, [r7, #14]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d901      	bls.n	8000d86 <SD_cmd+0x32>
 8000d82:	7bbb      	ldrb	r3, [r7, #14]
 8000d84:	e043      	b.n	8000e0e <SD_cmd+0xba>
  }
  // Select the card
  SS_SD_DESELECT();
 8000d86:	f7ff ffd5 	bl	8000d34 <sd_ss_active_pin_up>
  SPI_ReceiveByte();
 8000d8a:	f000 f94a 	bl	8001022 <SPI_ReceiveByte>

  SS_SD_SELECT();
 8000d8e:	f7ff ffc1 	bl	8000d14 <sd_ss_active_pin_down>
  SPI_ReceiveByte();
 8000d92:	f000 f946 	bl	8001022 <SPI_ReceiveByte>
  // Send a command packet
  SPI_SendByte(cmd); // Start + Command index
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 f935 	bl	8001008 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 24)); // Argument[31..24]
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	0e1b      	lsrs	r3, r3, #24
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 f92f 	bl	8001008 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 16)); // Argument[23..16]
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	0c1b      	lsrs	r3, r3, #16
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 f929 	bl	8001008 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 8)); // Argument[15..8]
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	0a1b      	lsrs	r3, r3, #8
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 f923 	bl	8001008 <SPI_SendByte>
  SPI_SendByte((uint8_t)arg); // Argument[7..0]
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 f91e 	bl	8001008 <SPI_SendByte>

  n = 0x01; // Dummy CRC + Stop
 8000dcc:	2301      	movs	r3, #1
 8000dce:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0) {n = 0x95;} // Valid CRC for CMD0(0)
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	2b40      	cmp	r3, #64	; 0x40
 8000dd4:	d101      	bne.n	8000dda <SD_cmd+0x86>
 8000dd6:	2395      	movs	r3, #149	; 0x95
 8000dd8:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD8) {n = 0x87;} // Valid CRC for CMD8(0x1AA)
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2b48      	cmp	r3, #72	; 0x48
 8000dde:	d101      	bne.n	8000de4 <SD_cmd+0x90>
 8000de0:	2387      	movs	r3, #135	; 0x87
 8000de2:	73fb      	strb	r3, [r7, #15]
  SPI_SendByte(n);
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f90e 	bl	8001008 <SPI_SendByte>
  // Receive a command response
  n = 10; // Wait for a valid response in timeout of 10 attempts
 8000dec:	230a      	movs	r3, #10
 8000dee:	73fb      	strb	r3, [r7, #15]
  do {
    res = SPI_ReceiveByte();
 8000df0:	f000 f917 	bl	8001022 <SPI_ReceiveByte>
 8000df4:	4603      	mov	r3, r0
 8000df6:	73bb      	strb	r3, [r7, #14]
  } while ((res & 0x80) && --n);
 8000df8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	da05      	bge.n	8000e0c <SD_cmd+0xb8>
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	73fb      	strb	r3, [r7, #15]
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1f1      	bne.n	8000df0 <SD_cmd+0x9c>
  return res;
 8000e0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <sd_ini>:
//-----------------------------------------------

uint8_t sd_ini(void)
{
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
	  uint8_t i, cmd;;
	  uint8_t ocr[4];
	  int16_t tmr;
	  uint32_t temp;
	  //LD_OFF;
	  sdinfo.type = 0;
 8000e1e:	4b57      	ldr	r3, [pc, #348]	; (8000f7c <sd_ini+0x164>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]

	  hspi1.Init.BaudRatePrescaler = temp;
	  HAL_SPI_Init(&hspi1);
	  */

	  SS_SD_SELECT();
 8000e24:	f7ff ff76 	bl	8000d14 <sd_ss_active_pin_down>
	  if (SD_cmd(CMD0, 0) == 1) // Enter Idle state
 8000e28:	2100      	movs	r1, #0
 8000e2a:	2040      	movs	r0, #64	; 0x40
 8000e2c:	f7ff ff92 	bl	8000d54 <SD_cmd>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	f040 809a 	bne.w	8000f6c <sd_ini+0x154>
	  {
		  SPI_Release();
 8000e38:	f000 f900 	bl	800103c <SPI_Release>
		  if (SD_cmd(CMD8, 0x1AA) == 1) // SDv2
 8000e3c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000e40:	2048      	movs	r0, #72	; 0x48
 8000e42:	f7ff ff87 	bl	8000d54 <SD_cmd>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d157      	bne.n	8000efc <sd_ini+0xe4>
		  {
			  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	71fb      	strb	r3, [r7, #7]
 8000e50:	e00c      	b.n	8000e6c <sd_ini+0x54>
 8000e52:	79fc      	ldrb	r4, [r7, #7]
 8000e54:	f000 f8e5 	bl	8001022 <SPI_ReceiveByte>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	f104 0308 	add.w	r3, r4, #8
 8000e60:	443b      	add	r3, r7
 8000e62:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	71fb      	strb	r3, [r7, #7]
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	2b03      	cmp	r3, #3
 8000e70:	d9ef      	bls.n	8000e52 <sd_ini+0x3a>

			    // Get trailing return value of R7 resp
			    if (ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 8000e72:	78bb      	ldrb	r3, [r7, #2]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d17b      	bne.n	8000f70 <sd_ini+0x158>
 8000e78:	78fb      	ldrb	r3, [r7, #3]
 8000e7a:	2baa      	cmp	r3, #170	; 0xaa
 8000e7c:	d178      	bne.n	8000f70 <sd_ini+0x158>
			    {
			    	for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--)
 8000e7e:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8000e82:	80bb      	strh	r3, [r7, #4]
 8000e84:	e005      	b.n	8000e92 <sd_ini+0x7a>
 8000e86:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	80bb      	strh	r3, [r7, #4]
 8000e92:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d007      	beq.n	8000eaa <sd_ini+0x92>
 8000e9a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000e9e:	20e9      	movs	r0, #233	; 0xe9
 8000ea0:	f7ff ff58 	bl	8000d54 <SD_cmd>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d1ed      	bne.n	8000e86 <sd_ini+0x6e>
			    	    ; // Wait for leaving idle state (ACMD41 with HCS bit)
			    	if (tmr && SD_cmd(CMD58, 0) == 0)
 8000eaa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d05e      	beq.n	8000f70 <sd_ini+0x158>
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	207a      	movs	r0, #122	; 0x7a
 8000eb6:	f7ff ff4d 	bl	8000d54 <SD_cmd>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d157      	bne.n	8000f70 <sd_ini+0x158>
			    	 { // Check CCS bit in the OCR
			    	  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	71fb      	strb	r3, [r7, #7]
 8000ec4:	e00c      	b.n	8000ee0 <sd_ini+0xc8>
 8000ec6:	79fc      	ldrb	r4, [r7, #7]
 8000ec8:	f000 f8ab 	bl	8001022 <SPI_ReceiveByte>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	461a      	mov	r2, r3
 8000ed0:	f104 0308 	add.w	r3, r4, #8
 8000ed4:	443b      	add	r3, r7
 8000ed6:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	3301      	adds	r3, #1
 8000ede:	71fb      	strb	r3, [r7, #7]
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	2b03      	cmp	r3, #3
 8000ee4:	d9ef      	bls.n	8000ec6 <sd_ini+0xae>
			     	   sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 8000ee6:	783b      	ldrb	r3, [r7, #0]
 8000ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <sd_ini+0xdc>
 8000ef0:	220c      	movs	r2, #12
 8000ef2:	e000      	b.n	8000ef6 <sd_ini+0xde>
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <sd_ini+0x164>)
 8000ef8:	701a      	strb	r2, [r3, #0]
 8000efa:	e039      	b.n	8000f70 <sd_ini+0x158>
			    	}
			    }
		  }
		  else //SDv1 or MMCv3
		  {
			  if (SD_cmd(ACMD41, 0) <= 1)
 8000efc:	2100      	movs	r1, #0
 8000efe:	20e9      	movs	r0, #233	; 0xe9
 8000f00:	f7ff ff28 	bl	8000d54 <SD_cmd>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d805      	bhi.n	8000f16 <sd_ini+0xfe>
			    {
			      sdinfo.type = CT_SD1; cmd = ACMD41; // SDv1
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <sd_ini+0x164>)
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	701a      	strb	r2, [r3, #0]
 8000f10:	23e9      	movs	r3, #233	; 0xe9
 8000f12:	71bb      	strb	r3, [r7, #6]
 8000f14:	e004      	b.n	8000f20 <sd_ini+0x108>
			    }
			    else
			    {
			      sdinfo.type = CT_MMC; cmd = CMD1; // MMCv3
 8000f16:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <sd_ini+0x164>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]
 8000f1c:	2341      	movs	r3, #65	; 0x41
 8000f1e:	71bb      	strb	r3, [r7, #6]
			    }
			    for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; // Wait for leaving idle state
 8000f20:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8000f24:	80bb      	strh	r3, [r7, #4]
 8000f26:	e005      	b.n	8000f34 <sd_ini+0x11c>
 8000f28:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	80bb      	strh	r3, [r7, #4]
 8000f34:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d007      	beq.n	8000f4c <sd_ini+0x134>
 8000f3c:	79bb      	ldrb	r3, [r7, #6]
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff07 	bl	8000d54 <SD_cmd>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1ed      	bne.n	8000f28 <sd_ini+0x110>
			    if (!tmr || SD_cmd(CMD16, 512) != 0) // Set R/W block length to 512
 8000f4c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d007      	beq.n	8000f64 <sd_ini+0x14c>
 8000f54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f58:	2050      	movs	r0, #80	; 0x50
 8000f5a:	f7ff fefb 	bl	8000d54 <SD_cmd>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d005      	beq.n	8000f70 <sd_ini+0x158>
			    sdinfo.type = 0;
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <sd_ini+0x164>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
 8000f6a:	e001      	b.n	8000f70 <sd_ini+0x158>

	  }
	  else
	  {

	    return 1;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e000      	b.n	8000f72 <sd_ini+0x15a>
	  }




  return 0;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd90      	pop	{r4, r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000dc0 	.word	0x20000dc0

08000f80 <Error>:

//-----------------------------------------------
static void Error (void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  //LD_ON;
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr

08000f8c <SPI_wait_ready>:
//-----------------------------------------------
//-----------------------------------------------
uint8_t SPI_wait_ready(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
  uint8_t res;
  uint16_t cnt;
  cnt=0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	80fb      	strh	r3, [r7, #6]
  do {
    res=SPI_ReceiveByte();
 8000f96:	f000 f844 	bl	8001022 <SPI_ReceiveByte>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	717b      	strb	r3, [r7, #5]
    cnt++;
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	80fb      	strh	r3, [r7, #6]
  } while ( (res!=0xFF)&&(cnt<0xFFFF) );
 8000fa4:	797b      	ldrb	r3, [r7, #5]
 8000fa6:	2bff      	cmp	r3, #255	; 0xff
 8000fa8:	d004      	beq.n	8000fb4 <SPI_wait_ready+0x28>
 8000faa:	88fb      	ldrh	r3, [r7, #6]
 8000fac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d1f0      	bne.n	8000f96 <SPI_wait_ready+0xa>
  if (cnt>=0xFFFF) return 1;
 8000fb4:	88fb      	ldrh	r3, [r7, #6]
 8000fb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d101      	bne.n	8000fc2 <SPI_wait_ready+0x36>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e000      	b.n	8000fc4 <SPI_wait_ready+0x38>
  return res;
 8000fc2:	797b      	ldrb	r3, [r7, #5]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <SPIx_WriteRead>:
//-----------------------------------------------

//-----------------------------------------------
uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 8000fda:	f107 020f 	add.w	r2, r7, #15
 8000fde:	1df9      	adds	r1, r7, #7
 8000fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	4806      	ldr	r0, [pc, #24]	; (8001004 <SPIx_WriteRead+0x38>)
 8000fea:	f003 fac7 	bl	800457c <HAL_SPI_TransmitReceive>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SPIx_WriteRead+0x2c>
  {
    Error();
 8000ff4:	f7ff ffc4 	bl	8000f80 <Error>
  }
  return receivedbyte;
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200003bc 	.word	0x200003bc

08001008 <SPI_SendByte>:
//-----------------------------------------------

//-----------------------------------------------
void SPI_SendByte(uint8_t bt)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  SPIx_WriteRead(bt);
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ffd9 	bl	8000fcc <SPIx_WriteRead>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <SPI_ReceiveByte>:
//-----------------------------------------------
uint8_t SPI_ReceiveByte(void)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
  uint8_t bt = SPIx_WriteRead(0xFF);
 8001028:	20ff      	movs	r0, #255	; 0xff
 800102a:	f7ff ffcf 	bl	8000fcc <SPIx_WriteRead>
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
  return bt;
 8001032:	79fb      	ldrb	r3, [r7, #7]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <SPI_Release>:
//-----------------------------------------------
void SPI_Release(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  SPIx_WriteRead(0xFF);
 8001040:	20ff      	movs	r0, #255	; 0xff
 8001042:	f7ff ffc3 	bl	8000fcc <SPIx_WriteRead>
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}

0800104a <SD_Read_Block>:
//-----------------------------------------------

//-----------------------------------------------
uint8_t SD_Read_Block (uint8_t *buff, uint32_t lba)
{
 800104a:	b590      	push	{r4, r7, lr}
 800104c:	b085      	sub	sp, #20
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	6039      	str	r1, [r7, #0]
  uint8_t result;
  uint16_t cnt;

  result=SD_cmd (CMD17, lba);
 8001054:	6839      	ldr	r1, [r7, #0]
 8001056:	2051      	movs	r0, #81	; 0x51
 8001058:	f7ff fe7c 	bl	8000d54 <SD_cmd>
 800105c:	4603      	mov	r3, r0
 800105e:	737b      	strb	r3, [r7, #13]
  if (result!=0x00){
 8001060:	7b7b      	ldrb	r3, [r7, #13]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SD_Read_Block+0x20>
	  return 5;
 8001066:	2305      	movs	r3, #5
 8001068:	e02f      	b.n	80010ca <SD_Read_Block+0x80>
  }

  SPI_Release();
 800106a:	f7ff ffe7 	bl	800103c <SPI_Release>
   cnt=0;
 800106e:	2300      	movs	r3, #0
 8001070:	81fb      	strh	r3, [r7, #14]
   do{
     result=SPI_ReceiveByte();
 8001072:	f7ff ffd6 	bl	8001022 <SPI_ReceiveByte>
 8001076:	4603      	mov	r3, r0
 8001078:	737b      	strb	r3, [r7, #13]
     cnt++;
 800107a:	89fb      	ldrh	r3, [r7, #14]
 800107c:	3301      	adds	r3, #1
 800107e:	81fb      	strh	r3, [r7, #14]
   } while ( (result!=0xFE)&&(cnt<0xFFFF) );
 8001080:	7b7b      	ldrb	r3, [r7, #13]
 8001082:	2bfe      	cmp	r3, #254	; 0xfe
 8001084:	d004      	beq.n	8001090 <SD_Read_Block+0x46>
 8001086:	89fb      	ldrh	r3, [r7, #14]
 8001088:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800108c:	4293      	cmp	r3, r2
 800108e:	d1f0      	bne.n	8001072 <SD_Read_Block+0x28>
   if (cnt>=0xFFFF) {
 8001090:	89fb      	ldrh	r3, [r7, #14]
 8001092:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001096:	4293      	cmp	r3, r2
 8001098:	d101      	bne.n	800109e <SD_Read_Block+0x54>
	   return 5;
 800109a:	2305      	movs	r3, #5
 800109c:	e015      	b.n	80010ca <SD_Read_Block+0x80>
   }
   for (cnt=0;cnt<512;cnt++) buff[cnt]=SPI_ReceiveByte();
 800109e:	2300      	movs	r3, #0
 80010a0:	81fb      	strh	r3, [r7, #14]
 80010a2:	e009      	b.n	80010b8 <SD_Read_Block+0x6e>
 80010a4:	89fb      	ldrh	r3, [r7, #14]
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	18d4      	adds	r4, r2, r3
 80010aa:	f7ff ffba 	bl	8001022 <SPI_ReceiveByte>
 80010ae:	4603      	mov	r3, r0
 80010b0:	7023      	strb	r3, [r4, #0]
 80010b2:	89fb      	ldrh	r3, [r7, #14]
 80010b4:	3301      	adds	r3, #1
 80010b6:	81fb      	strh	r3, [r7, #14]
 80010b8:	89fb      	ldrh	r3, [r7, #14]
 80010ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010be:	d3f1      	bcc.n	80010a4 <SD_Read_Block+0x5a>
   SPI_Release();
 80010c0:	f7ff ffbc 	bl	800103c <SPI_Release>
   SPI_Release();
 80010c4:	f7ff ffba 	bl	800103c <SPI_Release>



  return 0;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd90      	pop	{r4, r7, pc}

080010d2 <SD_Write_Block>:
//-----------------------------------------------

//-----------------------------------------------
uint8_t SD_Write_Block (uint8_t *buff, uint32_t lba)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b084      	sub	sp, #16
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	6039      	str	r1, [r7, #0]

  uint8_t result;
  uint16_t cnt;
  result=SD_cmd(CMD24,lba);
 80010dc:	6839      	ldr	r1, [r7, #0]
 80010de:	2058      	movs	r0, #88	; 0x58
 80010e0:	f7ff fe38 	bl	8000d54 <SD_cmd>
 80010e4:	4603      	mov	r3, r0
 80010e6:	737b      	strb	r3, [r7, #13]
  if (result!=0x00){
 80010e8:	7b7b      	ldrb	r3, [r7, #13]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SD_Write_Block+0x20>
	  return 6;
 80010ee:	2306      	movs	r3, #6
 80010f0:	e03d      	b.n	800116e <SD_Write_Block+0x9c>
  }
  SPI_Release();
 80010f2:	f7ff ffa3 	bl	800103c <SPI_Release>
  SPI_SendByte (0xFE);
 80010f6:	20fe      	movs	r0, #254	; 0xfe
 80010f8:	f7ff ff86 	bl	8001008 <SPI_SendByte>
  for (cnt=0;cnt<512;cnt++) SPI_SendByte(buff[cnt]);
 80010fc:	2300      	movs	r3, #0
 80010fe:	81fb      	strh	r3, [r7, #14]
 8001100:	e009      	b.n	8001116 <SD_Write_Block+0x44>
 8001102:	89fb      	ldrh	r3, [r7, #14]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	4413      	add	r3, r2
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff7c 	bl	8001008 <SPI_SendByte>
 8001110:	89fb      	ldrh	r3, [r7, #14]
 8001112:	3301      	adds	r3, #1
 8001114:	81fb      	strh	r3, [r7, #14]
 8001116:	89fb      	ldrh	r3, [r7, #14]
 8001118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800111c:	d3f1      	bcc.n	8001102 <SD_Write_Block+0x30>
  SPI_Release();
 800111e:	f7ff ff8d 	bl	800103c <SPI_Release>
  SPI_Release();
 8001122:	f7ff ff8b 	bl	800103c <SPI_Release>
  result=SPI_ReceiveByte();
 8001126:	f7ff ff7c 	bl	8001022 <SPI_ReceiveByte>
 800112a:	4603      	mov	r3, r0
 800112c:	737b      	strb	r3, [r7, #13]
  if ((result&0x05)!=0x05) {
 800112e:	7b7b      	ldrb	r3, [r7, #13]
 8001130:	f003 0305 	and.w	r3, r3, #5
 8001134:	2b05      	cmp	r3, #5
 8001136:	d001      	beq.n	800113c <SD_Write_Block+0x6a>
	  return 6;
 8001138:	2306      	movs	r3, #6
 800113a:	e018      	b.n	800116e <SD_Write_Block+0x9c>
  }
  cnt=0;
 800113c:	2300      	movs	r3, #0
 800113e:	81fb      	strh	r3, [r7, #14]
  do {
    result=SPI_ReceiveByte();
 8001140:	f7ff ff6f 	bl	8001022 <SPI_ReceiveByte>
 8001144:	4603      	mov	r3, r0
 8001146:	737b      	strb	r3, [r7, #13]
    cnt++;
 8001148:	89fb      	ldrh	r3, [r7, #14]
 800114a:	3301      	adds	r3, #1
 800114c:	81fb      	strh	r3, [r7, #14]
  } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 800114e:	7b7b      	ldrb	r3, [r7, #13]
 8001150:	2bff      	cmp	r3, #255	; 0xff
 8001152:	d004      	beq.n	800115e <SD_Write_Block+0x8c>
 8001154:	89fb      	ldrh	r3, [r7, #14]
 8001156:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800115a:	4293      	cmp	r3, r2
 800115c:	d1f0      	bne.n	8001140 <SD_Write_Block+0x6e>
  if (cnt>=0xFFFF) {
 800115e:	89fb      	ldrh	r3, [r7, #14]
 8001160:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001164:	4293      	cmp	r3, r2
 8001166:	d101      	bne.n	800116c <SD_Write_Block+0x9a>
	  return 6;
 8001168:	2306      	movs	r3, #6
 800116a:	e000      	b.n	800116e <SD_Write_Block+0x9c>
  }

  return 0;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <HAL_MspInit+0x68>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	4a17      	ldr	r2, [pc, #92]	; (80011e0 <HAL_MspInit+0x68>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6193      	str	r3, [r2, #24]
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <HAL_MspInit+0x68>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_MspInit+0x68>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	4a11      	ldr	r2, [pc, #68]	; (80011e0 <HAL_MspInit+0x68>)
 800119c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a0:	61d3      	str	r3, [r2, #28]
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <HAL_MspInit+0x68>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	210f      	movs	r1, #15
 80011b2:	f06f 0001 	mvn.w	r0, #1
 80011b6:	f000 faea 	bl	800178e <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_MspInit+0x6c>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <HAL_MspInit+0x6c>)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40010000 	.word	0x40010000

080011e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	; 0x28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a26      	ldr	r2, [pc, #152]	; (800129c <HAL_SPI_MspInit+0xb4>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d145      	bne.n	8001294 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001208:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <HAL_SPI_MspInit+0xb8>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4a24      	ldr	r2, [pc, #144]	; (80012a0 <HAL_SPI_MspInit+0xb8>)
 800120e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001212:	6193      	str	r3, [r2, #24]
 8001214:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <HAL_SPI_MspInit+0xb8>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001220:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <HAL_SPI_MspInit+0xb8>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	4a1e      	ldr	r2, [pc, #120]	; (80012a0 <HAL_SPI_MspInit+0xb8>)
 8001226:	f043 0308 	orr.w	r3, r3, #8
 800122a:	6193      	str	r3, [r2, #24]
 800122c:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <HAL_SPI_MspInit+0xb8>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	f003 0308 	and.w	r3, r3, #8
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001238:	2328      	movs	r3, #40	; 0x28
 800123a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4619      	mov	r1, r3
 800124a:	4816      	ldr	r0, [pc, #88]	; (80012a4 <HAL_SPI_MspInit+0xbc>)
 800124c:	f000 fc0c 	bl	8001a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001250:	2310      	movs	r3, #16
 8001252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001254:	2300      	movs	r3, #0
 8001256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	4619      	mov	r1, r3
 8001262:	4810      	ldr	r0, [pc, #64]	; (80012a4 <HAL_SPI_MspInit+0xbc>)
 8001264:	f000 fc00 	bl	8001a68 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <HAL_SPI_MspInit+0xc0>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
 8001276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <HAL_SPI_MspInit+0xc0>)
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001284:	2200      	movs	r2, #0
 8001286:	2105      	movs	r1, #5
 8001288:	2023      	movs	r0, #35	; 0x23
 800128a:	f000 fa80 	bl	800178e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800128e:	2023      	movs	r0, #35	; 0x23
 8001290:	f000 fa99 	bl	80017c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001294:	bf00      	nop
 8001296:	3728      	adds	r7, #40	; 0x28
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40013000 	.word	0x40013000
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40010c00 	.word	0x40010c00
 80012a8:	40010000 	.word	0x40010000

080012ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012bc:	d10b      	bne.n	80012d6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <HAL_TIM_Base_MspInit+0x34>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	4a07      	ldr	r2, [pc, #28]	; (80012e0 <HAL_TIM_Base_MspInit+0x34>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	61d3      	str	r3, [r2, #28]
 80012ca:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_TIM_Base_MspInit+0x34>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012d6:	bf00      	nop
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	40021000 	.word	0x40021000

080012e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a20      	ldr	r2, [pc, #128]	; (8001380 <HAL_UART_MspInit+0x9c>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d139      	bne.n	8001378 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001304:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <HAL_UART_MspInit+0xa0>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	4a1e      	ldr	r2, [pc, #120]	; (8001384 <HAL_UART_MspInit+0xa0>)
 800130a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800130e:	6193      	str	r3, [r2, #24]
 8001310:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <HAL_UART_MspInit+0xa0>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <HAL_UART_MspInit+0xa0>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	4a18      	ldr	r2, [pc, #96]	; (8001384 <HAL_UART_MspInit+0xa0>)
 8001322:	f043 0304 	orr.w	r3, r3, #4
 8001326:	6193      	str	r3, [r2, #24]
 8001328:	4b16      	ldr	r3, [pc, #88]	; (8001384 <HAL_UART_MspInit+0xa0>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001334:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001338:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	2302      	movs	r3, #2
 800133c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001342:	f107 0310 	add.w	r3, r7, #16
 8001346:	4619      	mov	r1, r3
 8001348:	480f      	ldr	r0, [pc, #60]	; (8001388 <HAL_UART_MspInit+0xa4>)
 800134a:	f000 fb8d 	bl	8001a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800134e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001352:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	4619      	mov	r1, r3
 8001362:	4809      	ldr	r0, [pc, #36]	; (8001388 <HAL_UART_MspInit+0xa4>)
 8001364:	f000 fb80 	bl	8001a68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001368:	2200      	movs	r2, #0
 800136a:	2105      	movs	r1, #5
 800136c:	2025      	movs	r0, #37	; 0x25
 800136e:	f000 fa0e 	bl	800178e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001372:	2025      	movs	r0, #37	; 0x25
 8001374:	f000 fa27 	bl	80017c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001378:	bf00      	nop
 800137a:	3720      	adds	r7, #32
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40013800 	.word	0x40013800
 8001384:	40021000 	.word	0x40021000
 8001388:	40010800 	.word	0x40010800

0800138c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08c      	sub	sp, #48	; 0x30
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800139c:	2200      	movs	r2, #0
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	2019      	movs	r0, #25
 80013a2:	f000 f9f4 	bl	800178e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80013a6:	2019      	movs	r0, #25
 80013a8:	f000 fa0d 	bl	80017c6 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80013ac:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <HAL_InitTick+0x9c>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	4a1d      	ldr	r2, [pc, #116]	; (8001428 <HAL_InitTick+0x9c>)
 80013b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013b6:	6193      	str	r3, [r2, #24]
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <HAL_InitTick+0x9c>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013c4:	f107 0210 	add.w	r2, r7, #16
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	4611      	mov	r1, r2
 80013ce:	4618      	mov	r0, r3
 80013d0:	f002 fed0 	bl	8004174 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80013d4:	f002 feba 	bl	800414c <HAL_RCC_GetPCLK2Freq>
 80013d8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013dc:	4a13      	ldr	r2, [pc, #76]	; (800142c <HAL_InitTick+0xa0>)
 80013de:	fba2 2303 	umull	r2, r3, r2, r3
 80013e2:	0c9b      	lsrs	r3, r3, #18
 80013e4:	3b01      	subs	r3, #1
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <HAL_InitTick+0xa4>)
 80013ea:	4a12      	ldr	r2, [pc, #72]	; (8001434 <HAL_InitTick+0xa8>)
 80013ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <HAL_InitTick+0xa4>)
 80013f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013f4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80013f6:	4a0e      	ldr	r2, [pc, #56]	; (8001430 <HAL_InitTick+0xa4>)
 80013f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <HAL_InitTick+0xa4>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <HAL_InitTick+0xa4>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001408:	4809      	ldr	r0, [pc, #36]	; (8001430 <HAL_InitTick+0xa4>)
 800140a:	f003 fc03 	bl	8004c14 <HAL_TIM_Base_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d104      	bne.n	800141e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001414:	4806      	ldr	r0, [pc, #24]	; (8001430 <HAL_InitTick+0xa4>)
 8001416:	f003 fc4d 	bl	8004cb4 <HAL_TIM_Base_Start_IT>
 800141a:	4603      	mov	r3, r0
 800141c:	e000      	b.n	8001420 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
}
 8001420:	4618      	mov	r0, r3
 8001422:	3730      	adds	r7, #48	; 0x30
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40021000 	.word	0x40021000
 800142c:	431bde83 	.word	0x431bde83
 8001430:	20000de8 	.word	0x20000de8
 8001434:	40012c00 	.word	0x40012c00

08001438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800143c:	e7fe      	b.n	800143c <NMI_Handler+0x4>

0800143e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001442:	e7fe      	b.n	8001442 <HardFault_Handler+0x4>

08001444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <MemManage_Handler+0x4>

0800144a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800144e:	e7fe      	b.n	800144e <BusFault_Handler+0x4>

08001450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <UsageFault_Handler+0x4>

08001456 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
	...

08001464 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001468:	4802      	ldr	r0, [pc, #8]	; (8001474 <TIM1_UP_IRQHandler+0x10>)
 800146a:	f003 fc7d 	bl	8004d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000de8 	.word	0x20000de8

08001478 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <SPI1_IRQHandler+0x10>)
 800147e:	f003 fa1f 	bl	80048c0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200003bc 	.word	0x200003bc

0800148c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <USART1_IRQHandler+0x10>)
 8001492:	f004 f8b3 	bl	80055fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2000045c 	.word	0x2000045c

080014a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <OTG_FS_IRQHandler+0x10>)
 80014a6:	f000 fee1 	bl	800226c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	2000471c 	.word	0x2000471c

080014b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014bc:	4a14      	ldr	r2, [pc, #80]	; (8001510 <_sbrk+0x5c>)
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <_sbrk+0x60>)
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c8:	4b13      	ldr	r3, [pc, #76]	; (8001518 <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <_sbrk+0x64>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	; (800151c <_sbrk+0x68>)
 80014d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <_sbrk+0x64>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d207      	bcs.n	80014f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e4:	f00b fc72 	bl	800cdcc <__errno>
 80014e8:	4603      	mov	r3, r0
 80014ea:	220c      	movs	r2, #12
 80014ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295
 80014f2:	e009      	b.n	8001508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <_sbrk+0x64>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014fa:	4b07      	ldr	r3, [pc, #28]	; (8001518 <_sbrk+0x64>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	4a05      	ldr	r2, [pc, #20]	; (8001518 <_sbrk+0x64>)
 8001504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001506:	68fb      	ldr	r3, [r7, #12]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20010000 	.word	0x20010000
 8001514:	00000400 	.word	0x00000400
 8001518:	20000e30 	.word	0x20000e30
 800151c:	20004a30 	.word	0x20004a30

08001520 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr

0800152c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800152c:	480c      	ldr	r0, [pc, #48]	; (8001560 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800152e:	490d      	ldr	r1, [pc, #52]	; (8001564 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001530:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001534:	e002      	b.n	800153c <LoopCopyDataInit>

08001536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153a:	3304      	adds	r3, #4

0800153c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800153c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001540:	d3f9      	bcc.n	8001536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001542:	4a0a      	ldr	r2, [pc, #40]	; (800156c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001544:	4c0a      	ldr	r4, [pc, #40]	; (8001570 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001548:	e001      	b.n	800154e <LoopFillZerobss>

0800154a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800154c:	3204      	adds	r2, #4

0800154e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001550:	d3fb      	bcc.n	800154a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001552:	f7ff ffe5 	bl	8001520 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001556:	f00b fc3f 	bl	800cdd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800155a:	f7ff f8cf 	bl	80006fc <main>
  bx lr
 800155e:	4770      	bx	lr
  ldr r0, =_sdata
 8001560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001564:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8001568:	0800da7c 	.word	0x0800da7c
  ldr r2, =_sbss
 800156c:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8001570:	20004a30 	.word	0x20004a30

08001574 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001574:	e7fe      	b.n	8001574 <ADC1_2_IRQHandler>
	...

08001578 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_Init+0x28>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a07      	ldr	r2, [pc, #28]	; (80015a0 <HAL_Init+0x28>)
 8001582:	f043 0310 	orr.w	r3, r3, #16
 8001586:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001588:	2003      	movs	r0, #3
 800158a:	f000 f8f5 	bl	8001778 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800158e:	200f      	movs	r0, #15
 8001590:	f7ff fefc 	bl	800138c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001594:	f7ff fdf0 	bl	8001178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40022000 	.word	0x40022000

080015a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <HAL_IncTick+0x1c>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <HAL_IncTick+0x20>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4413      	add	r3, r2
 80015b4:	4a03      	ldr	r2, [pc, #12]	; (80015c4 <HAL_IncTick+0x20>)
 80015b6:	6013      	str	r3, [r2, #0]
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	20000008 	.word	0x20000008
 80015c4:	20000e34 	.word	0x20000e34

080015c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return uwTick;
 80015cc:	4b02      	ldr	r3, [pc, #8]	; (80015d8 <HAL_GetTick+0x10>)
 80015ce:	681b      	ldr	r3, [r3, #0]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	20000e34 	.word	0x20000e34

080015dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e4:	f7ff fff0 	bl	80015c8 <HAL_GetTick>
 80015e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f4:	d005      	beq.n	8001602 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <HAL_Delay+0x44>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4413      	add	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001602:	bf00      	nop
 8001604:	f7ff ffe0 	bl	80015c8 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	429a      	cmp	r2, r3
 8001612:	d8f7      	bhi.n	8001604 <HAL_Delay+0x28>
  {
  }
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000008 	.word	0x20000008

08001624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001640:	4013      	ands	r3, r2
 8001642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800164c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001656:	4a04      	ldr	r2, [pc, #16]	; (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	60d3      	str	r3, [r2, #12]
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <__NVIC_GetPriorityGrouping+0x18>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	f003 0307 	and.w	r3, r3, #7
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	2b00      	cmp	r3, #0
 8001698:	db0b      	blt.n	80016b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	f003 021f 	and.w	r2, r3, #31
 80016a0:	4906      	ldr	r1, [pc, #24]	; (80016bc <__NVIC_EnableIRQ+0x34>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	2001      	movs	r0, #1
 80016aa:	fa00 f202 	lsl.w	r2, r0, r2
 80016ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	e000e100 	.word	0xe000e100

080016c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	db0a      	blt.n	80016ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	490c      	ldr	r1, [pc, #48]	; (800170c <__NVIC_SetPriority+0x4c>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	0112      	lsls	r2, r2, #4
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	440b      	add	r3, r1
 80016e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e8:	e00a      	b.n	8001700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4908      	ldr	r1, [pc, #32]	; (8001710 <__NVIC_SetPriority+0x50>)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	3b04      	subs	r3, #4
 80016f8:	0112      	lsls	r2, r2, #4
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	440b      	add	r3, r1
 80016fe:	761a      	strb	r2, [r3, #24]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000e100 	.word	0xe000e100
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f1c3 0307 	rsb	r3, r3, #7
 800172e:	2b04      	cmp	r3, #4
 8001730:	bf28      	it	cs
 8001732:	2304      	movcs	r3, #4
 8001734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	2b06      	cmp	r3, #6
 800173c:	d902      	bls.n	8001744 <NVIC_EncodePriority+0x30>
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3b03      	subs	r3, #3
 8001742:	e000      	b.n	8001746 <NVIC_EncodePriority+0x32>
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	f04f 32ff 	mov.w	r2, #4294967295
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43da      	mvns	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800175c:	f04f 31ff 	mov.w	r1, #4294967295
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	43d9      	mvns	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	4313      	orrs	r3, r2
         );
}
 800176e:	4618      	mov	r0, r3
 8001770:	3724      	adds	r7, #36	; 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff ff4f 	bl	8001624 <__NVIC_SetPriorityGrouping>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800178e:	b580      	push	{r7, lr}
 8001790:	b086      	sub	sp, #24
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	60b9      	str	r1, [r7, #8]
 8001798:	607a      	str	r2, [r7, #4]
 800179a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a0:	f7ff ff64 	bl	800166c <__NVIC_GetPriorityGrouping>
 80017a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	68b9      	ldr	r1, [r7, #8]
 80017aa:	6978      	ldr	r0, [r7, #20]
 80017ac:	f7ff ffb2 	bl	8001714 <NVIC_EncodePriority>
 80017b0:	4602      	mov	r2, r0
 80017b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b6:	4611      	mov	r1, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff81 	bl	80016c0 <__NVIC_SetPriority>
}
 80017be:	bf00      	nop
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	4603      	mov	r3, r0
 80017ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff57 	bl	8001688 <__NVIC_EnableIRQ>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b085      	sub	sp, #20
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017ea:	2300      	movs	r3, #0
 80017ec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d008      	beq.n	800180a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2204      	movs	r2, #4
 80017fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e020      	b.n	800184c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 020e 	bic.w	r2, r2, #14
 8001818:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 0201 	bic.w	r2, r2, #1
 8001828:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001832:	2101      	movs	r1, #1
 8001834:	fa01 f202 	lsl.w	r2, r1, r2
 8001838:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800184a:	7bfb      	ldrb	r3, [r7, #15]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
	...

08001858 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800186a:	2b02      	cmp	r3, #2
 800186c:	d005      	beq.n	800187a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2204      	movs	r2, #4
 8001872:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	73fb      	strb	r3, [r7, #15]
 8001878:	e0d6      	b.n	8001a28 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 020e 	bic.w	r2, r2, #14
 8001888:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0201 	bic.w	r2, r2, #1
 8001898:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	4b64      	ldr	r3, [pc, #400]	; (8001a34 <HAL_DMA_Abort_IT+0x1dc>)
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d958      	bls.n	8001958 <HAL_DMA_Abort_IT+0x100>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a63      	ldr	r2, [pc, #396]	; (8001a38 <HAL_DMA_Abort_IT+0x1e0>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d04f      	beq.n	8001950 <HAL_DMA_Abort_IT+0xf8>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a61      	ldr	r2, [pc, #388]	; (8001a3c <HAL_DMA_Abort_IT+0x1e4>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d048      	beq.n	800194c <HAL_DMA_Abort_IT+0xf4>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a60      	ldr	r2, [pc, #384]	; (8001a40 <HAL_DMA_Abort_IT+0x1e8>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d040      	beq.n	8001946 <HAL_DMA_Abort_IT+0xee>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a5e      	ldr	r2, [pc, #376]	; (8001a44 <HAL_DMA_Abort_IT+0x1ec>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d038      	beq.n	8001940 <HAL_DMA_Abort_IT+0xe8>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a5d      	ldr	r2, [pc, #372]	; (8001a48 <HAL_DMA_Abort_IT+0x1f0>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d030      	beq.n	800193a <HAL_DMA_Abort_IT+0xe2>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a5b      	ldr	r2, [pc, #364]	; (8001a4c <HAL_DMA_Abort_IT+0x1f4>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d028      	beq.n	8001934 <HAL_DMA_Abort_IT+0xdc>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a53      	ldr	r2, [pc, #332]	; (8001a34 <HAL_DMA_Abort_IT+0x1dc>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d020      	beq.n	800192e <HAL_DMA_Abort_IT+0xd6>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a57      	ldr	r2, [pc, #348]	; (8001a50 <HAL_DMA_Abort_IT+0x1f8>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d019      	beq.n	800192a <HAL_DMA_Abort_IT+0xd2>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a56      	ldr	r2, [pc, #344]	; (8001a54 <HAL_DMA_Abort_IT+0x1fc>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d012      	beq.n	8001926 <HAL_DMA_Abort_IT+0xce>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a54      	ldr	r2, [pc, #336]	; (8001a58 <HAL_DMA_Abort_IT+0x200>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d00a      	beq.n	8001920 <HAL_DMA_Abort_IT+0xc8>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a53      	ldr	r2, [pc, #332]	; (8001a5c <HAL_DMA_Abort_IT+0x204>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d102      	bne.n	800191a <HAL_DMA_Abort_IT+0xc2>
 8001914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001918:	e01b      	b.n	8001952 <HAL_DMA_Abort_IT+0xfa>
 800191a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800191e:	e018      	b.n	8001952 <HAL_DMA_Abort_IT+0xfa>
 8001920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001924:	e015      	b.n	8001952 <HAL_DMA_Abort_IT+0xfa>
 8001926:	2310      	movs	r3, #16
 8001928:	e013      	b.n	8001952 <HAL_DMA_Abort_IT+0xfa>
 800192a:	2301      	movs	r3, #1
 800192c:	e011      	b.n	8001952 <HAL_DMA_Abort_IT+0xfa>
 800192e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001932:	e00e      	b.n	8001952 <HAL_DMA_Abort_IT+0xfa>
 8001934:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001938:	e00b      	b.n	8001952 <HAL_DMA_Abort_IT+0xfa>
 800193a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800193e:	e008      	b.n	8001952 <HAL_DMA_Abort_IT+0xfa>
 8001940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001944:	e005      	b.n	8001952 <HAL_DMA_Abort_IT+0xfa>
 8001946:	f44f 7380 	mov.w	r3, #256	; 0x100
 800194a:	e002      	b.n	8001952 <HAL_DMA_Abort_IT+0xfa>
 800194c:	2310      	movs	r3, #16
 800194e:	e000      	b.n	8001952 <HAL_DMA_Abort_IT+0xfa>
 8001950:	2301      	movs	r3, #1
 8001952:	4a43      	ldr	r2, [pc, #268]	; (8001a60 <HAL_DMA_Abort_IT+0x208>)
 8001954:	6053      	str	r3, [r2, #4]
 8001956:	e057      	b.n	8001a08 <HAL_DMA_Abort_IT+0x1b0>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a36      	ldr	r2, [pc, #216]	; (8001a38 <HAL_DMA_Abort_IT+0x1e0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d04f      	beq.n	8001a02 <HAL_DMA_Abort_IT+0x1aa>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a35      	ldr	r2, [pc, #212]	; (8001a3c <HAL_DMA_Abort_IT+0x1e4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d048      	beq.n	80019fe <HAL_DMA_Abort_IT+0x1a6>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a33      	ldr	r2, [pc, #204]	; (8001a40 <HAL_DMA_Abort_IT+0x1e8>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d040      	beq.n	80019f8 <HAL_DMA_Abort_IT+0x1a0>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a32      	ldr	r2, [pc, #200]	; (8001a44 <HAL_DMA_Abort_IT+0x1ec>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d038      	beq.n	80019f2 <HAL_DMA_Abort_IT+0x19a>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a30      	ldr	r2, [pc, #192]	; (8001a48 <HAL_DMA_Abort_IT+0x1f0>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d030      	beq.n	80019ec <HAL_DMA_Abort_IT+0x194>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a2f      	ldr	r2, [pc, #188]	; (8001a4c <HAL_DMA_Abort_IT+0x1f4>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d028      	beq.n	80019e6 <HAL_DMA_Abort_IT+0x18e>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a26      	ldr	r2, [pc, #152]	; (8001a34 <HAL_DMA_Abort_IT+0x1dc>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d020      	beq.n	80019e0 <HAL_DMA_Abort_IT+0x188>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a2b      	ldr	r2, [pc, #172]	; (8001a50 <HAL_DMA_Abort_IT+0x1f8>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d019      	beq.n	80019dc <HAL_DMA_Abort_IT+0x184>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a29      	ldr	r2, [pc, #164]	; (8001a54 <HAL_DMA_Abort_IT+0x1fc>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d012      	beq.n	80019d8 <HAL_DMA_Abort_IT+0x180>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a28      	ldr	r2, [pc, #160]	; (8001a58 <HAL_DMA_Abort_IT+0x200>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d00a      	beq.n	80019d2 <HAL_DMA_Abort_IT+0x17a>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a26      	ldr	r2, [pc, #152]	; (8001a5c <HAL_DMA_Abort_IT+0x204>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d102      	bne.n	80019cc <HAL_DMA_Abort_IT+0x174>
 80019c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ca:	e01b      	b.n	8001a04 <HAL_DMA_Abort_IT+0x1ac>
 80019cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019d0:	e018      	b.n	8001a04 <HAL_DMA_Abort_IT+0x1ac>
 80019d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019d6:	e015      	b.n	8001a04 <HAL_DMA_Abort_IT+0x1ac>
 80019d8:	2310      	movs	r3, #16
 80019da:	e013      	b.n	8001a04 <HAL_DMA_Abort_IT+0x1ac>
 80019dc:	2301      	movs	r3, #1
 80019de:	e011      	b.n	8001a04 <HAL_DMA_Abort_IT+0x1ac>
 80019e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019e4:	e00e      	b.n	8001a04 <HAL_DMA_Abort_IT+0x1ac>
 80019e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019ea:	e00b      	b.n	8001a04 <HAL_DMA_Abort_IT+0x1ac>
 80019ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019f0:	e008      	b.n	8001a04 <HAL_DMA_Abort_IT+0x1ac>
 80019f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f6:	e005      	b.n	8001a04 <HAL_DMA_Abort_IT+0x1ac>
 80019f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019fc:	e002      	b.n	8001a04 <HAL_DMA_Abort_IT+0x1ac>
 80019fe:	2310      	movs	r3, #16
 8001a00:	e000      	b.n	8001a04 <HAL_DMA_Abort_IT+0x1ac>
 8001a02:	2301      	movs	r3, #1
 8001a04:	4a17      	ldr	r2, [pc, #92]	; (8001a64 <HAL_DMA_Abort_IT+0x20c>)
 8001a06:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	4798      	blx	r3
    } 
  }
  return status;
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40020080 	.word	0x40020080
 8001a38:	40020008 	.word	0x40020008
 8001a3c:	4002001c 	.word	0x4002001c
 8001a40:	40020030 	.word	0x40020030
 8001a44:	40020044 	.word	0x40020044
 8001a48:	40020058 	.word	0x40020058
 8001a4c:	4002006c 	.word	0x4002006c
 8001a50:	40020408 	.word	0x40020408
 8001a54:	4002041c 	.word	0x4002041c
 8001a58:	40020430 	.word	0x40020430
 8001a5c:	40020444 	.word	0x40020444
 8001a60:	40020400 	.word	0x40020400
 8001a64:	40020000 	.word	0x40020000

08001a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b08b      	sub	sp, #44	; 0x2c
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a72:	2300      	movs	r3, #0
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a76:	2300      	movs	r3, #0
 8001a78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a7a:	e169      	b.n	8001d50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	69fa      	ldr	r2, [r7, #28]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	f040 8158 	bne.w	8001d4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	4a9a      	ldr	r2, [pc, #616]	; (8001d08 <HAL_GPIO_Init+0x2a0>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d05e      	beq.n	8001b62 <HAL_GPIO_Init+0xfa>
 8001aa4:	4a98      	ldr	r2, [pc, #608]	; (8001d08 <HAL_GPIO_Init+0x2a0>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d875      	bhi.n	8001b96 <HAL_GPIO_Init+0x12e>
 8001aaa:	4a98      	ldr	r2, [pc, #608]	; (8001d0c <HAL_GPIO_Init+0x2a4>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d058      	beq.n	8001b62 <HAL_GPIO_Init+0xfa>
 8001ab0:	4a96      	ldr	r2, [pc, #600]	; (8001d0c <HAL_GPIO_Init+0x2a4>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d86f      	bhi.n	8001b96 <HAL_GPIO_Init+0x12e>
 8001ab6:	4a96      	ldr	r2, [pc, #600]	; (8001d10 <HAL_GPIO_Init+0x2a8>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d052      	beq.n	8001b62 <HAL_GPIO_Init+0xfa>
 8001abc:	4a94      	ldr	r2, [pc, #592]	; (8001d10 <HAL_GPIO_Init+0x2a8>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d869      	bhi.n	8001b96 <HAL_GPIO_Init+0x12e>
 8001ac2:	4a94      	ldr	r2, [pc, #592]	; (8001d14 <HAL_GPIO_Init+0x2ac>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d04c      	beq.n	8001b62 <HAL_GPIO_Init+0xfa>
 8001ac8:	4a92      	ldr	r2, [pc, #584]	; (8001d14 <HAL_GPIO_Init+0x2ac>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d863      	bhi.n	8001b96 <HAL_GPIO_Init+0x12e>
 8001ace:	4a92      	ldr	r2, [pc, #584]	; (8001d18 <HAL_GPIO_Init+0x2b0>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d046      	beq.n	8001b62 <HAL_GPIO_Init+0xfa>
 8001ad4:	4a90      	ldr	r2, [pc, #576]	; (8001d18 <HAL_GPIO_Init+0x2b0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d85d      	bhi.n	8001b96 <HAL_GPIO_Init+0x12e>
 8001ada:	2b12      	cmp	r3, #18
 8001adc:	d82a      	bhi.n	8001b34 <HAL_GPIO_Init+0xcc>
 8001ade:	2b12      	cmp	r3, #18
 8001ae0:	d859      	bhi.n	8001b96 <HAL_GPIO_Init+0x12e>
 8001ae2:	a201      	add	r2, pc, #4	; (adr r2, 8001ae8 <HAL_GPIO_Init+0x80>)
 8001ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae8:	08001b63 	.word	0x08001b63
 8001aec:	08001b3d 	.word	0x08001b3d
 8001af0:	08001b4f 	.word	0x08001b4f
 8001af4:	08001b91 	.word	0x08001b91
 8001af8:	08001b97 	.word	0x08001b97
 8001afc:	08001b97 	.word	0x08001b97
 8001b00:	08001b97 	.word	0x08001b97
 8001b04:	08001b97 	.word	0x08001b97
 8001b08:	08001b97 	.word	0x08001b97
 8001b0c:	08001b97 	.word	0x08001b97
 8001b10:	08001b97 	.word	0x08001b97
 8001b14:	08001b97 	.word	0x08001b97
 8001b18:	08001b97 	.word	0x08001b97
 8001b1c:	08001b97 	.word	0x08001b97
 8001b20:	08001b97 	.word	0x08001b97
 8001b24:	08001b97 	.word	0x08001b97
 8001b28:	08001b97 	.word	0x08001b97
 8001b2c:	08001b45 	.word	0x08001b45
 8001b30:	08001b59 	.word	0x08001b59
 8001b34:	4a79      	ldr	r2, [pc, #484]	; (8001d1c <HAL_GPIO_Init+0x2b4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d013      	beq.n	8001b62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b3a:	e02c      	b.n	8001b96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	623b      	str	r3, [r7, #32]
          break;
 8001b42:	e029      	b.n	8001b98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	623b      	str	r3, [r7, #32]
          break;
 8001b4c:	e024      	b.n	8001b98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	3308      	adds	r3, #8
 8001b54:	623b      	str	r3, [r7, #32]
          break;
 8001b56:	e01f      	b.n	8001b98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	330c      	adds	r3, #12
 8001b5e:	623b      	str	r3, [r7, #32]
          break;
 8001b60:	e01a      	b.n	8001b98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d102      	bne.n	8001b70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	623b      	str	r3, [r7, #32]
          break;
 8001b6e:	e013      	b.n	8001b98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d105      	bne.n	8001b84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b78:	2308      	movs	r3, #8
 8001b7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69fa      	ldr	r2, [r7, #28]
 8001b80:	611a      	str	r2, [r3, #16]
          break;
 8001b82:	e009      	b.n	8001b98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b84:	2308      	movs	r3, #8
 8001b86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69fa      	ldr	r2, [r7, #28]
 8001b8c:	615a      	str	r2, [r3, #20]
          break;
 8001b8e:	e003      	b.n	8001b98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b90:	2300      	movs	r3, #0
 8001b92:	623b      	str	r3, [r7, #32]
          break;
 8001b94:	e000      	b.n	8001b98 <HAL_GPIO_Init+0x130>
          break;
 8001b96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	2bff      	cmp	r3, #255	; 0xff
 8001b9c:	d801      	bhi.n	8001ba2 <HAL_GPIO_Init+0x13a>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	e001      	b.n	8001ba6 <HAL_GPIO_Init+0x13e>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	2bff      	cmp	r3, #255	; 0xff
 8001bac:	d802      	bhi.n	8001bb4 <HAL_GPIO_Init+0x14c>
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	e002      	b.n	8001bba <HAL_GPIO_Init+0x152>
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	3b08      	subs	r3, #8
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	210f      	movs	r1, #15
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	401a      	ands	r2, r3
 8001bcc:	6a39      	ldr	r1, [r7, #32]
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 80b1 	beq.w	8001d4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001be8:	4b4d      	ldr	r3, [pc, #308]	; (8001d20 <HAL_GPIO_Init+0x2b8>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	4a4c      	ldr	r2, [pc, #304]	; (8001d20 <HAL_GPIO_Init+0x2b8>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6193      	str	r3, [r2, #24]
 8001bf4:	4b4a      	ldr	r3, [pc, #296]	; (8001d20 <HAL_GPIO_Init+0x2b8>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c00:	4a48      	ldr	r2, [pc, #288]	; (8001d24 <HAL_GPIO_Init+0x2bc>)
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	089b      	lsrs	r3, r3, #2
 8001c06:	3302      	adds	r3, #2
 8001c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	220f      	movs	r2, #15
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	4013      	ands	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a40      	ldr	r2, [pc, #256]	; (8001d28 <HAL_GPIO_Init+0x2c0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d013      	beq.n	8001c54 <HAL_GPIO_Init+0x1ec>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a3f      	ldr	r2, [pc, #252]	; (8001d2c <HAL_GPIO_Init+0x2c4>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d00d      	beq.n	8001c50 <HAL_GPIO_Init+0x1e8>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a3e      	ldr	r2, [pc, #248]	; (8001d30 <HAL_GPIO_Init+0x2c8>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d007      	beq.n	8001c4c <HAL_GPIO_Init+0x1e4>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a3d      	ldr	r2, [pc, #244]	; (8001d34 <HAL_GPIO_Init+0x2cc>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d101      	bne.n	8001c48 <HAL_GPIO_Init+0x1e0>
 8001c44:	2303      	movs	r3, #3
 8001c46:	e006      	b.n	8001c56 <HAL_GPIO_Init+0x1ee>
 8001c48:	2304      	movs	r3, #4
 8001c4a:	e004      	b.n	8001c56 <HAL_GPIO_Init+0x1ee>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e002      	b.n	8001c56 <HAL_GPIO_Init+0x1ee>
 8001c50:	2301      	movs	r3, #1
 8001c52:	e000      	b.n	8001c56 <HAL_GPIO_Init+0x1ee>
 8001c54:	2300      	movs	r3, #0
 8001c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c58:	f002 0203 	and.w	r2, r2, #3
 8001c5c:	0092      	lsls	r2, r2, #2
 8001c5e:	4093      	lsls	r3, r2
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c66:	492f      	ldr	r1, [pc, #188]	; (8001d24 <HAL_GPIO_Init+0x2bc>)
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	089b      	lsrs	r3, r3, #2
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d006      	beq.n	8001c8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c80:	4b2d      	ldr	r3, [pc, #180]	; (8001d38 <HAL_GPIO_Init+0x2d0>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	492c      	ldr	r1, [pc, #176]	; (8001d38 <HAL_GPIO_Init+0x2d0>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	600b      	str	r3, [r1, #0]
 8001c8c:	e006      	b.n	8001c9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c8e:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <HAL_GPIO_Init+0x2d0>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	4928      	ldr	r1, [pc, #160]	; (8001d38 <HAL_GPIO_Init+0x2d0>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d006      	beq.n	8001cb6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ca8:	4b23      	ldr	r3, [pc, #140]	; (8001d38 <HAL_GPIO_Init+0x2d0>)
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	4922      	ldr	r1, [pc, #136]	; (8001d38 <HAL_GPIO_Init+0x2d0>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
 8001cb4:	e006      	b.n	8001cc4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cb6:	4b20      	ldr	r3, [pc, #128]	; (8001d38 <HAL_GPIO_Init+0x2d0>)
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	491e      	ldr	r1, [pc, #120]	; (8001d38 <HAL_GPIO_Init+0x2d0>)
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d006      	beq.n	8001cde <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cd0:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <HAL_GPIO_Init+0x2d0>)
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	4918      	ldr	r1, [pc, #96]	; (8001d38 <HAL_GPIO_Init+0x2d0>)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	608b      	str	r3, [r1, #8]
 8001cdc:	e006      	b.n	8001cec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cde:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <HAL_GPIO_Init+0x2d0>)
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	4914      	ldr	r1, [pc, #80]	; (8001d38 <HAL_GPIO_Init+0x2d0>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d021      	beq.n	8001d3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <HAL_GPIO_Init+0x2d0>)
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	490e      	ldr	r1, [pc, #56]	; (8001d38 <HAL_GPIO_Init+0x2d0>)
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	60cb      	str	r3, [r1, #12]
 8001d04:	e021      	b.n	8001d4a <HAL_GPIO_Init+0x2e2>
 8001d06:	bf00      	nop
 8001d08:	10320000 	.word	0x10320000
 8001d0c:	10310000 	.word	0x10310000
 8001d10:	10220000 	.word	0x10220000
 8001d14:	10210000 	.word	0x10210000
 8001d18:	10120000 	.word	0x10120000
 8001d1c:	10110000 	.word	0x10110000
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40010000 	.word	0x40010000
 8001d28:	40010800 	.word	0x40010800
 8001d2c:	40010c00 	.word	0x40010c00
 8001d30:	40011000 	.word	0x40011000
 8001d34:	40011400 	.word	0x40011400
 8001d38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <HAL_GPIO_Init+0x304>)
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	4909      	ldr	r1, [pc, #36]	; (8001d6c <HAL_GPIO_Init+0x304>)
 8001d46:	4013      	ands	r3, r2
 8001d48:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f47f ae8e 	bne.w	8001a7c <HAL_GPIO_Init+0x14>
  }
}
 8001d60:	bf00      	nop
 8001d62:	bf00      	nop
 8001d64:	372c      	adds	r7, #44	; 0x2c
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr
 8001d6c:	40010400 	.word	0x40010400

08001d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	807b      	strh	r3, [r7, #2]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d80:	787b      	ldrb	r3, [r7, #1]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d86:	887a      	ldrh	r2, [r7, #2]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d8c:	e003      	b.n	8001d96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d8e:	887b      	ldrh	r3, [r7, #2]
 8001d90:	041a      	lsls	r2, r3, #16
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	611a      	str	r2, [r3, #16]
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr

08001da0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001da2:	b08f      	sub	sp, #60	; 0x3c
 8001da4:	af0a      	add	r7, sp, #40	; 0x28
 8001da6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e054      	b.n	8001e5c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d106      	bne.n	8001dd2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f00a fd93 	bl	800c8f8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d102      	bne.n	8001dec <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f004 f825 	bl	8005e40 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	687e      	ldr	r6, [r7, #4]
 8001dfe:	466d      	mov	r5, sp
 8001e00:	f106 0410 	add.w	r4, r6, #16
 8001e04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e10:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e14:	1d33      	adds	r3, r6, #4
 8001e16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e18:	6838      	ldr	r0, [r7, #0]
 8001e1a:	f003 ffdf 	bl	8005ddc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2101      	movs	r1, #1
 8001e24:	4618      	mov	r0, r3
 8001e26:	f004 f81b 	bl	8005e60 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	687e      	ldr	r6, [r7, #4]
 8001e32:	466d      	mov	r5, sp
 8001e34:	f106 0410 	add.w	r4, r6, #16
 8001e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e44:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e48:	1d33      	adds	r3, r6, #4
 8001e4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e4c:	6838      	ldr	r0, [r7, #0]
 8001e4e:	f004 f979 	bl	8006144 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e64 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001e64:	b590      	push	{r4, r7, lr}
 8001e66:	b089      	sub	sp, #36	; 0x24
 8001e68:	af04      	add	r7, sp, #16
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	4608      	mov	r0, r1
 8001e6e:	4611      	mov	r1, r2
 8001e70:	461a      	mov	r2, r3
 8001e72:	4603      	mov	r3, r0
 8001e74:	70fb      	strb	r3, [r7, #3]
 8001e76:	460b      	mov	r3, r1
 8001e78:	70bb      	strb	r3, [r7, #2]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_HCD_HC_Init+0x28>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e076      	b.n	8001f7a <HAL_HCD_HC_Init+0x116>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	212c      	movs	r1, #44	; 0x2c
 8001e9a:	fb01 f303 	mul.w	r3, r1, r3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	333d      	adds	r3, #61	; 0x3d
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	212c      	movs	r1, #44	; 0x2c
 8001eac:	fb01 f303 	mul.w	r3, r1, r3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3338      	adds	r3, #56	; 0x38
 8001eb4:	787a      	ldrb	r2, [r7, #1]
 8001eb6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	212c      	movs	r1, #44	; 0x2c
 8001ebe:	fb01 f303 	mul.w	r3, r1, r3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3340      	adds	r3, #64	; 0x40
 8001ec6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001ec8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001eca:	78fb      	ldrb	r3, [r7, #3]
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	212c      	movs	r1, #44	; 0x2c
 8001ed0:	fb01 f303 	mul.w	r3, r1, r3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3339      	adds	r3, #57	; 0x39
 8001ed8:	78fa      	ldrb	r2, [r7, #3]
 8001eda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	212c      	movs	r1, #44	; 0x2c
 8001ee2:	fb01 f303 	mul.w	r3, r1, r3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	333f      	adds	r3, #63	; 0x3f
 8001eea:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001eee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	78ba      	ldrb	r2, [r7, #2]
 8001ef4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ef8:	b2d0      	uxtb	r0, r2
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	212c      	movs	r1, #44	; 0x2c
 8001efe:	fb01 f303 	mul.w	r3, r1, r3
 8001f02:	4413      	add	r3, r2
 8001f04:	333a      	adds	r3, #58	; 0x3a
 8001f06:	4602      	mov	r2, r0
 8001f08:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001f0a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	da09      	bge.n	8001f26 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001f12:	78fb      	ldrb	r3, [r7, #3]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	212c      	movs	r1, #44	; 0x2c
 8001f18:	fb01 f303 	mul.w	r3, r1, r3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	333b      	adds	r3, #59	; 0x3b
 8001f20:	2201      	movs	r2, #1
 8001f22:	701a      	strb	r2, [r3, #0]
 8001f24:	e008      	b.n	8001f38 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	212c      	movs	r1, #44	; 0x2c
 8001f2c:	fb01 f303 	mul.w	r3, r1, r3
 8001f30:	4413      	add	r3, r2
 8001f32:	333b      	adds	r3, #59	; 0x3b
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	212c      	movs	r1, #44	; 0x2c
 8001f3e:	fb01 f303 	mul.w	r3, r1, r3
 8001f42:	4413      	add	r3, r2
 8001f44:	333c      	adds	r3, #60	; 0x3c
 8001f46:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001f4a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6818      	ldr	r0, [r3, #0]
 8001f50:	787c      	ldrb	r4, [r7, #1]
 8001f52:	78ba      	ldrb	r2, [r7, #2]
 8001f54:	78f9      	ldrb	r1, [r7, #3]
 8001f56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f58:	9302      	str	r3, [sp, #8]
 8001f5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f5e:	9301      	str	r3, [sp, #4]
 8001f60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	4623      	mov	r3, r4
 8001f68:	f004 fa24 	bl	80063b4 <USB_HC_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd90      	pop	{r4, r7, pc}

08001f82 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b084      	sub	sp, #16
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_HCD_HC_Halt+0x1e>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e00f      	b.n	8001fc0 <HAL_HCD_HC_Halt+0x3e>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	78fa      	ldrb	r2, [r7, #3]
 8001fae:	4611      	mov	r1, r2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f004 fbff 	bl	80067b4 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	4608      	mov	r0, r1
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	70fb      	strb	r3, [r7, #3]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	70bb      	strb	r3, [r7, #2]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001fe2:	78fb      	ldrb	r3, [r7, #3]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	212c      	movs	r1, #44	; 0x2c
 8001fe8:	fb01 f303 	mul.w	r3, r1, r3
 8001fec:	4413      	add	r3, r2
 8001fee:	333b      	adds	r3, #59	; 0x3b
 8001ff0:	78ba      	ldrb	r2, [r7, #2]
 8001ff2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001ff4:	78fb      	ldrb	r3, [r7, #3]
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	212c      	movs	r1, #44	; 0x2c
 8001ffa:	fb01 f303 	mul.w	r3, r1, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	333f      	adds	r3, #63	; 0x3f
 8002002:	787a      	ldrb	r2, [r7, #1]
 8002004:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002006:	7c3b      	ldrb	r3, [r7, #16]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d112      	bne.n	8002032 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	212c      	movs	r1, #44	; 0x2c
 8002012:	fb01 f303 	mul.w	r3, r1, r3
 8002016:	4413      	add	r3, r2
 8002018:	3342      	adds	r3, #66	; 0x42
 800201a:	2203      	movs	r2, #3
 800201c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	212c      	movs	r1, #44	; 0x2c
 8002024:	fb01 f303 	mul.w	r3, r1, r3
 8002028:	4413      	add	r3, r2
 800202a:	333d      	adds	r3, #61	; 0x3d
 800202c:	7f3a      	ldrb	r2, [r7, #28]
 800202e:	701a      	strb	r2, [r3, #0]
 8002030:	e008      	b.n	8002044 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	212c      	movs	r1, #44	; 0x2c
 8002038:	fb01 f303 	mul.w	r3, r1, r3
 800203c:	4413      	add	r3, r2
 800203e:	3342      	adds	r3, #66	; 0x42
 8002040:	2202      	movs	r2, #2
 8002042:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002044:	787b      	ldrb	r3, [r7, #1]
 8002046:	2b03      	cmp	r3, #3
 8002048:	f200 80c6 	bhi.w	80021d8 <HAL_HCD_HC_SubmitRequest+0x210>
 800204c:	a201      	add	r2, pc, #4	; (adr r2, 8002054 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800204e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002052:	bf00      	nop
 8002054:	08002065 	.word	0x08002065
 8002058:	080021c5 	.word	0x080021c5
 800205c:	080020c9 	.word	0x080020c9
 8002060:	08002147 	.word	0x08002147
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002064:	7c3b      	ldrb	r3, [r7, #16]
 8002066:	2b01      	cmp	r3, #1
 8002068:	f040 80b8 	bne.w	80021dc <HAL_HCD_HC_SubmitRequest+0x214>
 800206c:	78bb      	ldrb	r3, [r7, #2]
 800206e:	2b00      	cmp	r3, #0
 8002070:	f040 80b4 	bne.w	80021dc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002074:	8b3b      	ldrh	r3, [r7, #24]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d108      	bne.n	800208c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	212c      	movs	r1, #44	; 0x2c
 8002080:	fb01 f303 	mul.w	r3, r1, r3
 8002084:	4413      	add	r3, r2
 8002086:	3355      	adds	r3, #85	; 0x55
 8002088:	2201      	movs	r2, #1
 800208a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	212c      	movs	r1, #44	; 0x2c
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	4413      	add	r3, r2
 8002098:	3355      	adds	r3, #85	; 0x55
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d109      	bne.n	80020b4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	212c      	movs	r1, #44	; 0x2c
 80020a6:	fb01 f303 	mul.w	r3, r1, r3
 80020aa:	4413      	add	r3, r2
 80020ac:	3342      	adds	r3, #66	; 0x42
 80020ae:	2200      	movs	r2, #0
 80020b0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80020b2:	e093      	b.n	80021dc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	212c      	movs	r1, #44	; 0x2c
 80020ba:	fb01 f303 	mul.w	r3, r1, r3
 80020be:	4413      	add	r3, r2
 80020c0:	3342      	adds	r3, #66	; 0x42
 80020c2:	2202      	movs	r2, #2
 80020c4:	701a      	strb	r2, [r3, #0]
      break;
 80020c6:	e089      	b.n	80021dc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80020c8:	78bb      	ldrb	r3, [r7, #2]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d11d      	bne.n	800210a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020ce:	78fb      	ldrb	r3, [r7, #3]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	212c      	movs	r1, #44	; 0x2c
 80020d4:	fb01 f303 	mul.w	r3, r1, r3
 80020d8:	4413      	add	r3, r2
 80020da:	3355      	adds	r3, #85	; 0x55
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d109      	bne.n	80020f6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020e2:	78fb      	ldrb	r3, [r7, #3]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	212c      	movs	r1, #44	; 0x2c
 80020e8:	fb01 f303 	mul.w	r3, r1, r3
 80020ec:	4413      	add	r3, r2
 80020ee:	3342      	adds	r3, #66	; 0x42
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80020f4:	e073      	b.n	80021de <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020f6:	78fb      	ldrb	r3, [r7, #3]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	212c      	movs	r1, #44	; 0x2c
 80020fc:	fb01 f303 	mul.w	r3, r1, r3
 8002100:	4413      	add	r3, r2
 8002102:	3342      	adds	r3, #66	; 0x42
 8002104:	2202      	movs	r2, #2
 8002106:	701a      	strb	r2, [r3, #0]
      break;
 8002108:	e069      	b.n	80021de <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800210a:	78fb      	ldrb	r3, [r7, #3]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	212c      	movs	r1, #44	; 0x2c
 8002110:	fb01 f303 	mul.w	r3, r1, r3
 8002114:	4413      	add	r3, r2
 8002116:	3354      	adds	r3, #84	; 0x54
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d109      	bne.n	8002132 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800211e:	78fb      	ldrb	r3, [r7, #3]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	212c      	movs	r1, #44	; 0x2c
 8002124:	fb01 f303 	mul.w	r3, r1, r3
 8002128:	4413      	add	r3, r2
 800212a:	3342      	adds	r3, #66	; 0x42
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
      break;
 8002130:	e055      	b.n	80021de <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	212c      	movs	r1, #44	; 0x2c
 8002138:	fb01 f303 	mul.w	r3, r1, r3
 800213c:	4413      	add	r3, r2
 800213e:	3342      	adds	r3, #66	; 0x42
 8002140:	2202      	movs	r2, #2
 8002142:	701a      	strb	r2, [r3, #0]
      break;
 8002144:	e04b      	b.n	80021de <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002146:	78bb      	ldrb	r3, [r7, #2]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d11d      	bne.n	8002188 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	212c      	movs	r1, #44	; 0x2c
 8002152:	fb01 f303 	mul.w	r3, r1, r3
 8002156:	4413      	add	r3, r2
 8002158:	3355      	adds	r3, #85	; 0x55
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d109      	bne.n	8002174 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	212c      	movs	r1, #44	; 0x2c
 8002166:	fb01 f303 	mul.w	r3, r1, r3
 800216a:	4413      	add	r3, r2
 800216c:	3342      	adds	r3, #66	; 0x42
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002172:	e034      	b.n	80021de <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	212c      	movs	r1, #44	; 0x2c
 800217a:	fb01 f303 	mul.w	r3, r1, r3
 800217e:	4413      	add	r3, r2
 8002180:	3342      	adds	r3, #66	; 0x42
 8002182:	2202      	movs	r2, #2
 8002184:	701a      	strb	r2, [r3, #0]
      break;
 8002186:	e02a      	b.n	80021de <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002188:	78fb      	ldrb	r3, [r7, #3]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	212c      	movs	r1, #44	; 0x2c
 800218e:	fb01 f303 	mul.w	r3, r1, r3
 8002192:	4413      	add	r3, r2
 8002194:	3354      	adds	r3, #84	; 0x54
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d109      	bne.n	80021b0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	212c      	movs	r1, #44	; 0x2c
 80021a2:	fb01 f303 	mul.w	r3, r1, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	3342      	adds	r3, #66	; 0x42
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
      break;
 80021ae:	e016      	b.n	80021de <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	212c      	movs	r1, #44	; 0x2c
 80021b6:	fb01 f303 	mul.w	r3, r1, r3
 80021ba:	4413      	add	r3, r2
 80021bc:	3342      	adds	r3, #66	; 0x42
 80021be:	2202      	movs	r2, #2
 80021c0:	701a      	strb	r2, [r3, #0]
      break;
 80021c2:	e00c      	b.n	80021de <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	212c      	movs	r1, #44	; 0x2c
 80021ca:	fb01 f303 	mul.w	r3, r1, r3
 80021ce:	4413      	add	r3, r2
 80021d0:	3342      	adds	r3, #66	; 0x42
 80021d2:	2200      	movs	r2, #0
 80021d4:	701a      	strb	r2, [r3, #0]
      break;
 80021d6:	e002      	b.n	80021de <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80021d8:	bf00      	nop
 80021da:	e000      	b.n	80021de <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80021dc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80021de:	78fb      	ldrb	r3, [r7, #3]
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	212c      	movs	r1, #44	; 0x2c
 80021e4:	fb01 f303 	mul.w	r3, r1, r3
 80021e8:	4413      	add	r3, r2
 80021ea:	3344      	adds	r3, #68	; 0x44
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80021f0:	78fb      	ldrb	r3, [r7, #3]
 80021f2:	8b3a      	ldrh	r2, [r7, #24]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	202c      	movs	r0, #44	; 0x2c
 80021f8:	fb00 f303 	mul.w	r3, r0, r3
 80021fc:	440b      	add	r3, r1
 80021fe:	334c      	adds	r3, #76	; 0x4c
 8002200:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002202:	78fb      	ldrb	r3, [r7, #3]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	212c      	movs	r1, #44	; 0x2c
 8002208:	fb01 f303 	mul.w	r3, r1, r3
 800220c:	4413      	add	r3, r2
 800220e:	3360      	adds	r3, #96	; 0x60
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002214:	78fb      	ldrb	r3, [r7, #3]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	212c      	movs	r1, #44	; 0x2c
 800221a:	fb01 f303 	mul.w	r3, r1, r3
 800221e:	4413      	add	r3, r2
 8002220:	3350      	adds	r3, #80	; 0x50
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002226:	78fb      	ldrb	r3, [r7, #3]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	212c      	movs	r1, #44	; 0x2c
 800222c:	fb01 f303 	mul.w	r3, r1, r3
 8002230:	4413      	add	r3, r2
 8002232:	3339      	adds	r3, #57	; 0x39
 8002234:	78fa      	ldrb	r2, [r7, #3]
 8002236:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	212c      	movs	r1, #44	; 0x2c
 800223e:	fb01 f303 	mul.w	r3, r1, r3
 8002242:	4413      	add	r3, r2
 8002244:	3361      	adds	r3, #97	; 0x61
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	78fb      	ldrb	r3, [r7, #3]
 8002250:	222c      	movs	r2, #44	; 0x2c
 8002252:	fb02 f303 	mul.w	r3, r2, r3
 8002256:	3338      	adds	r3, #56	; 0x38
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	4413      	add	r3, r2
 800225c:	4619      	mov	r1, r3
 800225e:	f004 f9a1 	bl	80065a4 <USB_HC_StartXfer>
 8002262:	4603      	mov	r3, r0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f003 ff1e 	bl	80060c4 <USB_GetMode>
 8002288:	4603      	mov	r3, r0
 800228a:	2b01      	cmp	r3, #1
 800228c:	f040 80ef 	bne.w	800246e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f003 ff03 	bl	80060a0 <USB_ReadInterrupts>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 80e5 	beq.w	800246c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f003 fefa 	bl	80060a0 <USB_ReadInterrupts>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022b6:	d104      	bne.n	80022c2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80022c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f003 feea 	bl	80060a0 <USB_ReadInterrupts>
 80022cc:	4603      	mov	r3, r0
 80022ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022d6:	d104      	bne.n	80022e2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80022e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f003 feda 	bl	80060a0 <USB_ReadInterrupts>
 80022ec:	4603      	mov	r3, r0
 80022ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022f6:	d104      	bne.n	8002302 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002300:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f003 feca 	bl	80060a0 <USB_ReadInterrupts>
 800230c:	4603      	mov	r3, r0
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b02      	cmp	r3, #2
 8002314:	d103      	bne.n	800231e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2202      	movs	r2, #2
 800231c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f003 febc 	bl	80060a0 <USB_ReadInterrupts>
 8002328:	4603      	mov	r3, r0
 800232a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800232e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002332:	d115      	bne.n	8002360 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800233c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d108      	bne.n	8002360 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f00a fb12 	bl	800c978 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2101      	movs	r1, #1
 800235a:	4618      	mov	r0, r3
 800235c:	f003 ff68 	bl	8006230 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f003 fe9b 	bl	80060a0 <USB_ReadInterrupts>
 800236a:	4603      	mov	r3, r0
 800236c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002374:	d102      	bne.n	800237c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f001 f978 	bl	800366c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f003 fe8d 	bl	80060a0 <USB_ReadInterrupts>
 8002386:	4603      	mov	r3, r0
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b08      	cmp	r3, #8
 800238e:	d106      	bne.n	800239e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f00a fad5 	bl	800c940 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2208      	movs	r2, #8
 800239c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f003 fe7c 	bl	80060a0 <USB_ReadInterrupts>
 80023a8:	4603      	mov	r3, r0
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	2b10      	cmp	r3, #16
 80023b0:	d101      	bne.n	80023b6 <HAL_HCD_IRQHandler+0x14a>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <HAL_HCD_IRQHandler+0x14c>
 80023b6:	2300      	movs	r3, #0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d012      	beq.n	80023e2 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699a      	ldr	r2, [r3, #24]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0210 	bic.w	r2, r2, #16
 80023ca:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f001 f87b 	bl	80034c8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699a      	ldr	r2, [r3, #24]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0210 	orr.w	r2, r2, #16
 80023e0:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f003 fe5a 	bl	80060a0 <USB_ReadInterrupts>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023f6:	d13a      	bne.n	800246e <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f004 f9c9 	bl	8006794 <USB_HC_ReadInterrupt>
 8002402:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	e025      	b.n	8002456 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f003 030f 	and.w	r3, r3, #15
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	fa22 f303 	lsr.w	r3, r2, r3
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d018      	beq.n	8002450 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	015a      	lsls	r2, r3, #5
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	4413      	add	r3, r2
 8002426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002434:	d106      	bne.n	8002444 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	b2db      	uxtb	r3, r3
 800243a:	4619      	mov	r1, r3
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f8a9 	bl	8002594 <HCD_HC_IN_IRQHandler>
 8002442:	e005      	b.n	8002450 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	b2db      	uxtb	r3, r3
 8002448:	4619      	mov	r1, r3
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 fca2 	bl	8002d94 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	3301      	adds	r3, #1
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	429a      	cmp	r2, r3
 800245e:	d3d4      	bcc.n	800240a <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002468:	615a      	str	r2, [r3, #20]
 800246a:	e000      	b.n	800246e <HAL_HCD_IRQHandler+0x202>
      return;
 800246c:	bf00      	nop
    }
  }
}
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002482:	2b01      	cmp	r3, #1
 8002484:	d101      	bne.n	800248a <HAL_HCD_Start+0x16>
 8002486:	2302      	movs	r3, #2
 8002488:	e013      	b.n	80024b2 <HAL_HCD_Start+0x3e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2101      	movs	r1, #1
 8002498:	4618      	mov	r0, r3
 800249a:	f003 ff2c 	bl	80062f6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f003 fcbc 	bl	8005e20 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d101      	bne.n	80024d0 <HAL_HCD_Stop+0x16>
 80024cc:	2302      	movs	r3, #2
 80024ce:	e00d      	b.n	80024ec <HAL_HCD_Stop+0x32>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f004 fa84 	bl	80069ea <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f003 fece 	bl	80062a2 <USB_ResetPort>
 8002506:	4603      	mov	r3, r0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800251c:	78fb      	ldrb	r3, [r7, #3]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	212c      	movs	r1, #44	; 0x2c
 8002522:	fb01 f303 	mul.w	r3, r1, r3
 8002526:	4413      	add	r3, r2
 8002528:	3360      	adds	r3, #96	; 0x60
 800252a:	781b      	ldrb	r3, [r3, #0]
}
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr

08002536 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	460b      	mov	r3, r1
 8002540:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002542:	78fb      	ldrb	r3, [r7, #3]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	212c      	movs	r1, #44	; 0x2c
 8002548:	fb01 f303 	mul.w	r3, r1, r3
 800254c:	4413      	add	r3, r2
 800254e:	3350      	adds	r3, #80	; 0x50
 8002550:	681b      	ldr	r3, [r3, #0]
}
 8002552:	4618      	mov	r0, r3
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr

0800255c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f003 ff12 	bl	8006392 <USB_GetCurrentFrame>
 800256e:	4603      	mov	r3, r0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f003 feee 	bl	8006366 <USB_GetHostSpeed>
 800258a:	4603      	mov	r3, r0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80025aa:	78fb      	ldrb	r3, [r7, #3]
 80025ac:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d119      	bne.n	80025f8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	015a      	lsls	r2, r3, #5
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d0:	461a      	mov	r2, r3
 80025d2:	2304      	movs	r3, #4
 80025d4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	015a      	lsls	r2, r3, #5
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4413      	add	r3, r2
 80025de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	0151      	lsls	r1, r2, #5
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	440a      	add	r2, r1
 80025ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025f0:	f043 0302 	orr.w	r3, r3, #2
 80025f4:	60d3      	str	r3, [r2, #12]
 80025f6:	e101      	b.n	80027fc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800260e:	d12b      	bne.n	8002668 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	015a      	lsls	r2, r3, #5
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	4413      	add	r3, r2
 8002618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261c:	461a      	mov	r2, r3
 800261e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002622:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	212c      	movs	r1, #44	; 0x2c
 800262a:	fb01 f303 	mul.w	r3, r1, r3
 800262e:	4413      	add	r3, r2
 8002630:	3361      	adds	r3, #97	; 0x61
 8002632:	2207      	movs	r2, #7
 8002634:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	015a      	lsls	r2, r3, #5
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4413      	add	r3, r2
 800263e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	0151      	lsls	r1, r2, #5
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	440a      	add	r2, r1
 800264c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002650:	f043 0302 	orr.w	r3, r3, #2
 8002654:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f004 f8a7 	bl	80067b4 <USB_HC_Halt>
 8002666:	e0c9      	b.n	80027fc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4413      	add	r3, r2
 8002670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 0320 	and.w	r3, r3, #32
 800267a:	2b20      	cmp	r3, #32
 800267c:	d109      	bne.n	8002692 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	015a      	lsls	r2, r3, #5
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4413      	add	r3, r2
 8002686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268a:	461a      	mov	r2, r3
 800268c:	2320      	movs	r3, #32
 800268e:	6093      	str	r3, [r2, #8]
 8002690:	e0b4      	b.n	80027fc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	015a      	lsls	r2, r3, #5
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4413      	add	r3, r2
 800269a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	d133      	bne.n	8002710 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	015a      	lsls	r2, r3, #5
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4413      	add	r3, r2
 80026b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	0151      	lsls	r1, r2, #5
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	440a      	add	r2, r1
 80026be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026c2:	f043 0302 	orr.w	r3, r3, #2
 80026c6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	212c      	movs	r1, #44	; 0x2c
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	3361      	adds	r3, #97	; 0x61
 80026d6:	2205      	movs	r2, #5
 80026d8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	015a      	lsls	r2, r3, #5
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4413      	add	r3, r2
 80026e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e6:	461a      	mov	r2, r3
 80026e8:	2310      	movs	r3, #16
 80026ea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f8:	461a      	mov	r2, r3
 80026fa:	2308      	movs	r3, #8
 80026fc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	4611      	mov	r1, r2
 8002708:	4618      	mov	r0, r3
 800270a:	f004 f853 	bl	80067b4 <USB_HC_Halt>
 800270e:	e075      	b.n	80027fc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	015a      	lsls	r2, r3, #5
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4413      	add	r3, r2
 8002718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002726:	d134      	bne.n	8002792 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	015a      	lsls	r2, r3, #5
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4413      	add	r3, r2
 8002730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	0151      	lsls	r1, r2, #5
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	440a      	add	r2, r1
 800273e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002742:	f043 0302 	orr.w	r3, r3, #2
 8002746:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	212c      	movs	r1, #44	; 0x2c
 800274e:	fb01 f303 	mul.w	r3, r1, r3
 8002752:	4413      	add	r3, r2
 8002754:	3361      	adds	r3, #97	; 0x61
 8002756:	2208      	movs	r2, #8
 8002758:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	015a      	lsls	r2, r3, #5
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4413      	add	r3, r2
 8002762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002766:	461a      	mov	r2, r3
 8002768:	2310      	movs	r3, #16
 800276a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4413      	add	r3, r2
 8002774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002778:	461a      	mov	r2, r3
 800277a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800277e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	4611      	mov	r1, r2
 800278a:	4618      	mov	r0, r3
 800278c:	f004 f812 	bl	80067b4 <USB_HC_Halt>
 8002790:	e034      	b.n	80027fc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4413      	add	r3, r2
 800279a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a4:	2b80      	cmp	r3, #128	; 0x80
 80027a6:	d129      	bne.n	80027fc <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	0151      	lsls	r1, r2, #5
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	440a      	add	r2, r1
 80027be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027c2:	f043 0302 	orr.w	r3, r3, #2
 80027c6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	212c      	movs	r1, #44	; 0x2c
 80027ce:	fb01 f303 	mul.w	r3, r1, r3
 80027d2:	4413      	add	r3, r2
 80027d4:	3361      	adds	r3, #97	; 0x61
 80027d6:	2206      	movs	r2, #6
 80027d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	4611      	mov	r1, r2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f003 ffe5 	bl	80067b4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	015a      	lsls	r2, r3, #5
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4413      	add	r3, r2
 80027f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f6:	461a      	mov	r2, r3
 80027f8:	2380      	movs	r3, #128	; 0x80
 80027fa:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	015a      	lsls	r2, r3, #5
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4413      	add	r3, r2
 8002804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800280e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002812:	d122      	bne.n	800285a <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	4413      	add	r3, r2
 800281c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	0151      	lsls	r1, r2, #5
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	440a      	add	r2, r1
 800282a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800282e:	f043 0302 	orr.w	r3, r3, #2
 8002832:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	4611      	mov	r1, r2
 800283e:	4618      	mov	r0, r3
 8002840:	f003 ffb8 	bl	80067b4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4413      	add	r3, r2
 800284c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002850:	461a      	mov	r2, r3
 8002852:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002856:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002858:	e298      	b.n	8002d8c <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	015a      	lsls	r2, r3, #5
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4413      	add	r3, r2
 8002862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b01      	cmp	r3, #1
 800286e:	f040 80fd 	bne.w	8002a6c <HCD_HC_IN_IRQHandler+0x4d8>
    hhcd->hc[ch_num].state = HC_XFRC;
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	212c      	movs	r1, #44	; 0x2c
 8002878:	fb01 f303 	mul.w	r3, r1, r3
 800287c:	4413      	add	r3, r2
 800287e:	3361      	adds	r3, #97	; 0x61
 8002880:	2201      	movs	r2, #1
 8002882:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	212c      	movs	r1, #44	; 0x2c
 800288a:	fb01 f303 	mul.w	r3, r1, r3
 800288e:	4413      	add	r3, r2
 8002890:	335c      	adds	r3, #92	; 0x5c
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4413      	add	r3, r2
 800289e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a2:	461a      	mov	r2, r3
 80028a4:	2301      	movs	r3, #1
 80028a6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	212c      	movs	r1, #44	; 0x2c
 80028ae:	fb01 f303 	mul.w	r3, r1, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	333f      	adds	r3, #63	; 0x3f
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d009      	beq.n	80028d0 <HCD_HC_IN_IRQHandler+0x33c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	212c      	movs	r1, #44	; 0x2c
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	333f      	adds	r3, #63	; 0x3f
 80028ca:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d121      	bne.n	8002914 <HCD_HC_IN_IRQHandler+0x380>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	0151      	lsls	r1, r2, #5
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	440a      	add	r2, r1
 80028e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028ea:	f043 0302 	orr.w	r3, r3, #2
 80028ee:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	4611      	mov	r1, r2
 80028fa:	4618      	mov	r0, r3
 80028fc:	f003 ff5a 	bl	80067b4 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	015a      	lsls	r2, r3, #5
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4413      	add	r3, r2
 8002908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290c:	461a      	mov	r2, r3
 800290e:	2310      	movs	r3, #16
 8002910:	6093      	str	r3, [r2, #8]
 8002912:	e066      	b.n	80029e2 <HCD_HC_IN_IRQHandler+0x44e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	212c      	movs	r1, #44	; 0x2c
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	4413      	add	r3, r2
 8002920:	333f      	adds	r3, #63	; 0x3f
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b03      	cmp	r3, #3
 8002926:	d127      	bne.n	8002978 <HCD_HC_IN_IRQHandler+0x3e4>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	015a      	lsls	r2, r3, #5
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	4413      	add	r3, r2
 8002930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	0151      	lsls	r1, r2, #5
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	440a      	add	r2, r1
 800293e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002942:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002946:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	212c      	movs	r1, #44	; 0x2c
 800294e:	fb01 f303 	mul.w	r3, r1, r3
 8002952:	4413      	add	r3, r2
 8002954:	3360      	adds	r3, #96	; 0x60
 8002956:	2201      	movs	r2, #1
 8002958:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	b2d9      	uxtb	r1, r3
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	202c      	movs	r0, #44	; 0x2c
 8002964:	fb00 f303 	mul.w	r3, r0, r3
 8002968:	4413      	add	r3, r2
 800296a:	3360      	adds	r3, #96	; 0x60
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	461a      	mov	r2, r3
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f00a f80f 	bl	800c994 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002976:	e034      	b.n	80029e2 <HCD_HC_IN_IRQHandler+0x44e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	212c      	movs	r1, #44	; 0x2c
 800297e:	fb01 f303 	mul.w	r3, r1, r3
 8002982:	4413      	add	r3, r2
 8002984:	333f      	adds	r3, #63	; 0x3f
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d12a      	bne.n	80029e2 <HCD_HC_IN_IRQHandler+0x44e>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	212c      	movs	r1, #44	; 0x2c
 8002992:	fb01 f303 	mul.w	r3, r1, r3
 8002996:	4413      	add	r3, r2
 8002998:	3360      	adds	r3, #96	; 0x60
 800299a:	2201      	movs	r2, #1
 800299c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	212c      	movs	r1, #44	; 0x2c
 80029a4:	fb01 f303 	mul.w	r3, r1, r3
 80029a8:	4413      	add	r3, r2
 80029aa:	3354      	adds	r3, #84	; 0x54
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	f083 0301 	eor.w	r3, r3, #1
 80029b2:	b2d8      	uxtb	r0, r3
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	212c      	movs	r1, #44	; 0x2c
 80029ba:	fb01 f303 	mul.w	r3, r1, r3
 80029be:	4413      	add	r3, r2
 80029c0:	3354      	adds	r3, #84	; 0x54
 80029c2:	4602      	mov	r2, r0
 80029c4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	b2d9      	uxtb	r1, r3
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	202c      	movs	r0, #44	; 0x2c
 80029d0:	fb00 f303 	mul.w	r3, r0, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	3360      	adds	r3, #96	; 0x60
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f009 ffd9 	bl	800c994 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d12b      	bne.n	8002a42 <HCD_HC_IN_IRQHandler+0x4ae>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	212c      	movs	r1, #44	; 0x2c
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	4413      	add	r3, r2
 80029f6:	3348      	adds	r3, #72	; 0x48
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	202c      	movs	r0, #44	; 0x2c
 8002a00:	fb00 f202 	mul.w	r2, r0, r2
 8002a04:	440a      	add	r2, r1
 8002a06:	3240      	adds	r2, #64	; 0x40
 8002a08:	8812      	ldrh	r2, [r2, #0]
 8002a0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 81ba 	beq.w	8002d8c <HCD_HC_IN_IRQHandler+0x7f8>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	212c      	movs	r1, #44	; 0x2c
 8002a1e:	fb01 f303 	mul.w	r3, r1, r3
 8002a22:	4413      	add	r3, r2
 8002a24:	3354      	adds	r3, #84	; 0x54
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	f083 0301 	eor.w	r3, r3, #1
 8002a2c:	b2d8      	uxtb	r0, r3
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	212c      	movs	r1, #44	; 0x2c
 8002a34:	fb01 f303 	mul.w	r3, r1, r3
 8002a38:	4413      	add	r3, r2
 8002a3a:	3354      	adds	r3, #84	; 0x54
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	701a      	strb	r2, [r3, #0]
}
 8002a40:	e1a4      	b.n	8002d8c <HCD_HC_IN_IRQHandler+0x7f8>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	212c      	movs	r1, #44	; 0x2c
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3354      	adds	r3, #84	; 0x54
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	f083 0301 	eor.w	r3, r3, #1
 8002a56:	b2d8      	uxtb	r0, r3
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	212c      	movs	r1, #44	; 0x2c
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	3354      	adds	r3, #84	; 0x54
 8002a66:	4602      	mov	r2, r0
 8002a68:	701a      	strb	r2, [r3, #0]
}
 8002a6a:	e18f      	b.n	8002d8c <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	f040 8106 	bne.w	8002c90 <HCD_HC_IN_IRQHandler+0x6fc>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	0151      	lsls	r1, r2, #5
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	440a      	add	r2, r1
 8002a9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a9e:	f023 0302 	bic.w	r3, r3, #2
 8002aa2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	212c      	movs	r1, #44	; 0x2c
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	3361      	adds	r3, #97	; 0x61
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d109      	bne.n	8002acc <HCD_HC_IN_IRQHandler+0x538>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	212c      	movs	r1, #44	; 0x2c
 8002abe:	fb01 f303 	mul.w	r3, r1, r3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3360      	adds	r3, #96	; 0x60
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	701a      	strb	r2, [r3, #0]
 8002aca:	e0c9      	b.n	8002c60 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	212c      	movs	r1, #44	; 0x2c
 8002ad2:	fb01 f303 	mul.w	r3, r1, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3361      	adds	r3, #97	; 0x61
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b05      	cmp	r3, #5
 8002ade:	d109      	bne.n	8002af4 <HCD_HC_IN_IRQHandler+0x560>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	212c      	movs	r1, #44	; 0x2c
 8002ae6:	fb01 f303 	mul.w	r3, r1, r3
 8002aea:	4413      	add	r3, r2
 8002aec:	3360      	adds	r3, #96	; 0x60
 8002aee:	2205      	movs	r2, #5
 8002af0:	701a      	strb	r2, [r3, #0]
 8002af2:	e0b5      	b.n	8002c60 <HCD_HC_IN_IRQHandler+0x6cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	212c      	movs	r1, #44	; 0x2c
 8002afa:	fb01 f303 	mul.w	r3, r1, r3
 8002afe:	4413      	add	r3, r2
 8002b00:	3361      	adds	r3, #97	; 0x61
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b06      	cmp	r3, #6
 8002b06:	d009      	beq.n	8002b1c <HCD_HC_IN_IRQHandler+0x588>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	212c      	movs	r1, #44	; 0x2c
 8002b0e:	fb01 f303 	mul.w	r3, r1, r3
 8002b12:	4413      	add	r3, r2
 8002b14:	3361      	adds	r3, #97	; 0x61
 8002b16:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d150      	bne.n	8002bbe <HCD_HC_IN_IRQHandler+0x62a>
      hhcd->hc[ch_num].ErrCnt++;
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	212c      	movs	r1, #44	; 0x2c
 8002b22:	fb01 f303 	mul.w	r3, r1, r3
 8002b26:	4413      	add	r3, r2
 8002b28:	335c      	adds	r3, #92	; 0x5c
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	202c      	movs	r0, #44	; 0x2c
 8002b34:	fb00 f303 	mul.w	r3, r0, r3
 8002b38:	440b      	add	r3, r1
 8002b3a:	335c      	adds	r3, #92	; 0x5c
 8002b3c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	212c      	movs	r1, #44	; 0x2c
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	4413      	add	r3, r2
 8002b4a:	335c      	adds	r3, #92	; 0x5c
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d912      	bls.n	8002b78 <HCD_HC_IN_IRQHandler+0x5e4>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	212c      	movs	r1, #44	; 0x2c
 8002b58:	fb01 f303 	mul.w	r3, r1, r3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	335c      	adds	r3, #92	; 0x5c
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	212c      	movs	r1, #44	; 0x2c
 8002b6a:	fb01 f303 	mul.w	r3, r1, r3
 8002b6e:	4413      	add	r3, r2
 8002b70:	3360      	adds	r3, #96	; 0x60
 8002b72:	2204      	movs	r2, #4
 8002b74:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b76:	e073      	b.n	8002c60 <HCD_HC_IN_IRQHandler+0x6cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	212c      	movs	r1, #44	; 0x2c
 8002b7e:	fb01 f303 	mul.w	r3, r1, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	3360      	adds	r3, #96	; 0x60
 8002b86:	2202      	movs	r2, #2
 8002b88:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ba0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ba8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bbc:	e050      	b.n	8002c60 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	212c      	movs	r1, #44	; 0x2c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	3361      	adds	r3, #97	; 0x61
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d122      	bne.n	8002c18 <HCD_HC_IN_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	212c      	movs	r1, #44	; 0x2c
 8002bd8:	fb01 f303 	mul.w	r3, r1, r3
 8002bdc:	4413      	add	r3, r2
 8002bde:	3360      	adds	r3, #96	; 0x60
 8002be0:	2202      	movs	r2, #2
 8002be2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	015a      	lsls	r2, r3, #5
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4413      	add	r3, r2
 8002bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bfa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c02:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c10:	461a      	mov	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	e023      	b.n	8002c60 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	212c      	movs	r1, #44	; 0x2c
 8002c1e:	fb01 f303 	mul.w	r3, r1, r3
 8002c22:	4413      	add	r3, r2
 8002c24:	3361      	adds	r3, #97	; 0x61
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b07      	cmp	r3, #7
 8002c2a:	d119      	bne.n	8002c60 <HCD_HC_IN_IRQHandler+0x6cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	212c      	movs	r1, #44	; 0x2c
 8002c32:	fb01 f303 	mul.w	r3, r1, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	335c      	adds	r3, #92	; 0x5c
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	202c      	movs	r0, #44	; 0x2c
 8002c44:	fb00 f303 	mul.w	r3, r0, r3
 8002c48:	440b      	add	r3, r1
 8002c4a:	335c      	adds	r3, #92	; 0x5c
 8002c4c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	212c      	movs	r1, #44	; 0x2c
 8002c54:	fb01 f303 	mul.w	r3, r1, r3
 8002c58:	4413      	add	r3, r2
 8002c5a:	3360      	adds	r3, #96	; 0x60
 8002c5c:	2204      	movs	r2, #4
 8002c5e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	015a      	lsls	r2, r3, #5
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	2302      	movs	r3, #2
 8002c70:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	b2d9      	uxtb	r1, r3
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	202c      	movs	r0, #44	; 0x2c
 8002c7c:	fb00 f303 	mul.w	r3, r0, r3
 8002c80:	4413      	add	r3, r2
 8002c82:	3360      	adds	r3, #96	; 0x60
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f009 fe83 	bl	800c994 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c8e:	e07d      	b.n	8002d8c <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 0310 	and.w	r3, r3, #16
 8002ca2:	2b10      	cmp	r3, #16
 8002ca4:	d172      	bne.n	8002d8c <HCD_HC_IN_IRQHandler+0x7f8>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	212c      	movs	r1, #44	; 0x2c
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	333f      	adds	r3, #63	; 0x3f
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b03      	cmp	r3, #3
 8002cb8:	d121      	bne.n	8002cfe <HCD_HC_IN_IRQHandler+0x76a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	212c      	movs	r1, #44	; 0x2c
 8002cc0:	fb01 f303 	mul.w	r3, r1, r3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	335c      	adds	r3, #92	; 0x5c
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	015a      	lsls	r2, r3, #5
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	0151      	lsls	r1, r2, #5
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	440a      	add	r2, r1
 8002ce2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ce6:	f043 0302 	orr.w	r3, r3, #2
 8002cea:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f003 fd5c 	bl	80067b4 <USB_HC_Halt>
 8002cfc:	e03d      	b.n	8002d7a <HCD_HC_IN_IRQHandler+0x7e6>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	212c      	movs	r1, #44	; 0x2c
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	333f      	adds	r3, #63	; 0x3f
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d009      	beq.n	8002d26 <HCD_HC_IN_IRQHandler+0x792>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	212c      	movs	r1, #44	; 0x2c
 8002d18:	fb01 f303 	mul.w	r3, r1, r3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	333f      	adds	r3, #63	; 0x3f
 8002d20:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d129      	bne.n	8002d7a <HCD_HC_IN_IRQHandler+0x7e6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	212c      	movs	r1, #44	; 0x2c
 8002d2c:	fb01 f303 	mul.w	r3, r1, r3
 8002d30:	4413      	add	r3, r2
 8002d32:	335c      	adds	r3, #92	; 0x5c
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	212c      	movs	r1, #44	; 0x2c
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	3361      	adds	r3, #97	; 0x61
 8002d46:	2203      	movs	r2, #3
 8002d48:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	015a      	lsls	r2, r3, #5
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	0151      	lsls	r1, r2, #5
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	440a      	add	r2, r1
 8002d60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d64:	f043 0302 	orr.w	r3, r3, #2
 8002d68:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	4611      	mov	r1, r2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f003 fd1d 	bl	80067b4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	015a      	lsls	r2, r3, #5
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d86:	461a      	mov	r2, r3
 8002d88:	2310      	movs	r3, #16
 8002d8a:	6093      	str	r3, [r2, #8]
}
 8002d8c:	bf00      	nop
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002daa:	78fb      	ldrb	r3, [r7, #3]
 8002dac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d119      	bne.n	8002df8 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	015a      	lsls	r2, r3, #5
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	4413      	add	r3, r2
 8002dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	2304      	movs	r3, #4
 8002dd4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	0151      	lsls	r1, r2, #5
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	440a      	add	r2, r1
 8002dec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002df0:	f043 0302 	orr.w	r3, r3, #2
 8002df4:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002df6:	e363      	b.n	80034c0 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	015a      	lsls	r2, r3, #5
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 0320 	and.w	r3, r3, #32
 8002e0a:	2b20      	cmp	r3, #32
 8002e0c:	d13e      	bne.n	8002e8c <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	015a      	lsls	r2, r3, #5
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	2320      	movs	r3, #32
 8002e1e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	212c      	movs	r1, #44	; 0x2c
 8002e26:	fb01 f303 	mul.w	r3, r1, r3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	333d      	adds	r3, #61	; 0x3d
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	f040 8345 	bne.w	80034c0 <HCD_HC_OUT_IRQHandler+0x72c>
      hhcd->hc[ch_num].do_ping = 0U;
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	212c      	movs	r1, #44	; 0x2c
 8002e3c:	fb01 f303 	mul.w	r3, r1, r3
 8002e40:	4413      	add	r3, r2
 8002e42:	333d      	adds	r3, #61	; 0x3d
 8002e44:	2200      	movs	r2, #0
 8002e46:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	212c      	movs	r1, #44	; 0x2c
 8002e4e:	fb01 f303 	mul.w	r3, r1, r3
 8002e52:	4413      	add	r3, r2
 8002e54:	3360      	adds	r3, #96	; 0x60
 8002e56:	2202      	movs	r2, #2
 8002e58:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	0151      	lsls	r1, r2, #5
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	440a      	add	r2, r1
 8002e70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e74:	f043 0302 	orr.w	r3, r3, #2
 8002e78:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	4611      	mov	r1, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f003 fc95 	bl	80067b4 <USB_HC_Halt>
}
 8002e8a:	e319      	b.n	80034c0 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	4413      	add	r3, r2
 8002e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ea2:	d122      	bne.n	8002eea <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	0151      	lsls	r1, r2, #5
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	440a      	add	r2, r1
 8002eba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ebe:	f043 0302 	orr.w	r3, r3, #2
 8002ec2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	4611      	mov	r1, r2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f003 fc70 	bl	80067b4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	015a      	lsls	r2, r3, #5
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ee6:	6093      	str	r3, [r2, #8]
}
 8002ee8:	e2ea      	b.n	80034c0 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	015a      	lsls	r2, r3, #5
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d150      	bne.n	8002fa2 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	212c      	movs	r1, #44	; 0x2c
 8002f06:	fb01 f303 	mul.w	r3, r1, r3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	335c      	adds	r3, #92	; 0x5c
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f24:	2b40      	cmp	r3, #64	; 0x40
 8002f26:	d111      	bne.n	8002f4c <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	212c      	movs	r1, #44	; 0x2c
 8002f2e:	fb01 f303 	mul.w	r3, r1, r3
 8002f32:	4413      	add	r3, r2
 8002f34:	333d      	adds	r3, #61	; 0x3d
 8002f36:	2201      	movs	r2, #1
 8002f38:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	015a      	lsls	r2, r3, #5
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	4413      	add	r3, r2
 8002f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f46:	461a      	mov	r2, r3
 8002f48:	2340      	movs	r3, #64	; 0x40
 8002f4a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	0151      	lsls	r1, r2, #5
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	440a      	add	r2, r1
 8002f62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f66:	f043 0302 	orr.w	r3, r3, #2
 8002f6a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	4611      	mov	r1, r2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f003 fc1c 	bl	80067b4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f88:	461a      	mov	r2, r3
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	212c      	movs	r1, #44	; 0x2c
 8002f94:	fb01 f303 	mul.w	r3, r1, r3
 8002f98:	4413      	add	r3, r2
 8002f9a:	3361      	adds	r3, #97	; 0x61
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	701a      	strb	r2, [r3, #0]
}
 8002fa0:	e28e      	b.n	80034c0 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	015a      	lsls	r2, r3, #5
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	4413      	add	r3, r2
 8002faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb4:	2b40      	cmp	r3, #64	; 0x40
 8002fb6:	d13c      	bne.n	8003032 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	212c      	movs	r1, #44	; 0x2c
 8002fbe:	fb01 f303 	mul.w	r3, r1, r3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	3361      	adds	r3, #97	; 0x61
 8002fc6:	2204      	movs	r2, #4
 8002fc8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	212c      	movs	r1, #44	; 0x2c
 8002fd0:	fb01 f303 	mul.w	r3, r1, r3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	333d      	adds	r3, #61	; 0x3d
 8002fd8:	2201      	movs	r2, #1
 8002fda:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	212c      	movs	r1, #44	; 0x2c
 8002fe2:	fb01 f303 	mul.w	r3, r1, r3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	335c      	adds	r3, #92	; 0x5c
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	015a      	lsls	r2, r3, #5
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	0151      	lsls	r1, r2, #5
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	440a      	add	r2, r1
 8003004:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003008:	f043 0302 	orr.w	r3, r3, #2
 800300c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	4611      	mov	r1, r2
 8003018:	4618      	mov	r0, r3
 800301a:	f003 fbcb 	bl	80067b4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	4413      	add	r3, r2
 8003026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302a:	461a      	mov	r2, r3
 800302c:	2340      	movs	r3, #64	; 0x40
 800302e:	6093      	str	r3, [r2, #8]
}
 8003030:	e246      	b.n	80034c0 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	4413      	add	r3, r2
 800303a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	2b08      	cmp	r3, #8
 8003046:	d12a      	bne.n	800309e <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	015a      	lsls	r2, r3, #5
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	4413      	add	r3, r2
 8003050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003054:	461a      	mov	r2, r3
 8003056:	2308      	movs	r3, #8
 8003058:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	4413      	add	r3, r2
 8003062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	0151      	lsls	r1, r2, #5
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	440a      	add	r2, r1
 8003070:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003074:	f043 0302 	orr.w	r3, r3, #2
 8003078:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	4611      	mov	r1, r2
 8003084:	4618      	mov	r0, r3
 8003086:	f003 fb95 	bl	80067b4 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	212c      	movs	r1, #44	; 0x2c
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	4413      	add	r3, r2
 8003096:	3361      	adds	r3, #97	; 0x61
 8003098:	2205      	movs	r2, #5
 800309a:	701a      	strb	r2, [r3, #0]
}
 800309c:	e210      	b.n	80034c0 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	2b10      	cmp	r3, #16
 80030b2:	d133      	bne.n	800311c <HCD_HC_OUT_IRQHandler+0x388>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	212c      	movs	r1, #44	; 0x2c
 80030ba:	fb01 f303 	mul.w	r3, r1, r3
 80030be:	4413      	add	r3, r2
 80030c0:	335c      	adds	r3, #92	; 0x5c
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	212c      	movs	r1, #44	; 0x2c
 80030cc:	fb01 f303 	mul.w	r3, r1, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	3361      	adds	r3, #97	; 0x61
 80030d4:	2203      	movs	r2, #3
 80030d6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	0151      	lsls	r1, r2, #5
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	440a      	add	r2, r1
 80030ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030f2:	f043 0302 	orr.w	r3, r3, #2
 80030f6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	4611      	mov	r1, r2
 8003102:	4618      	mov	r0, r3
 8003104:	f003 fb56 	bl	80067b4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	015a      	lsls	r2, r3, #5
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	4413      	add	r3, r2
 8003110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003114:	461a      	mov	r2, r3
 8003116:	2310      	movs	r3, #16
 8003118:	6093      	str	r3, [r2, #8]
}
 800311a:	e1d1      	b.n	80034c0 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	015a      	lsls	r2, r3, #5
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	4413      	add	r3, r2
 8003124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312e:	2b80      	cmp	r3, #128	; 0x80
 8003130:	d12a      	bne.n	8003188 <HCD_HC_OUT_IRQHandler+0x3f4>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	212c      	movs	r1, #44	; 0x2c
 8003138:	fb01 f303 	mul.w	r3, r1, r3
 800313c:	4413      	add	r3, r2
 800313e:	3361      	adds	r3, #97	; 0x61
 8003140:	2206      	movs	r2, #6
 8003142:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	015a      	lsls	r2, r3, #5
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	4413      	add	r3, r2
 800314c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	0151      	lsls	r1, r2, #5
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	440a      	add	r2, r1
 800315a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800315e:	f043 0302 	orr.w	r3, r3, #2
 8003162:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	4611      	mov	r1, r2
 800316e:	4618      	mov	r0, r3
 8003170:	f003 fb20 	bl	80067b4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	4413      	add	r3, r2
 800317c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003180:	461a      	mov	r2, r3
 8003182:	2380      	movs	r3, #128	; 0x80
 8003184:	6093      	str	r3, [r2, #8]
}
 8003186:	e19b      	b.n	80034c0 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	4413      	add	r3, r2
 8003190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800319a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800319e:	d134      	bne.n	800320a <HCD_HC_OUT_IRQHandler+0x476>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	015a      	lsls	r2, r3, #5
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	0151      	lsls	r1, r2, #5
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	440a      	add	r2, r1
 80031b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031ba:	f043 0302 	orr.w	r3, r3, #2
 80031be:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	4611      	mov	r1, r2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f003 faf2 	bl	80067b4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	015a      	lsls	r2, r3, #5
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	4413      	add	r3, r2
 80031d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031dc:	461a      	mov	r2, r3
 80031de:	2310      	movs	r3, #16
 80031e0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	015a      	lsls	r2, r3, #5
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ee:	461a      	mov	r2, r3
 80031f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	212c      	movs	r1, #44	; 0x2c
 80031fc:	fb01 f303 	mul.w	r3, r1, r3
 8003200:	4413      	add	r3, r2
 8003202:	3361      	adds	r3, #97	; 0x61
 8003204:	2208      	movs	r2, #8
 8003206:	701a      	strb	r2, [r3, #0]
}
 8003208:	e15a      	b.n	80034c0 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	015a      	lsls	r2, r3, #5
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	4413      	add	r3, r2
 8003212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b02      	cmp	r3, #2
 800321e:	f040 814f 	bne.w	80034c0 <HCD_HC_OUT_IRQHandler+0x72c>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	4413      	add	r3, r2
 800322a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	0151      	lsls	r1, r2, #5
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	440a      	add	r2, r1
 8003238:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800323c:	f023 0302 	bic.w	r3, r3, #2
 8003240:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	212c      	movs	r1, #44	; 0x2c
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	4413      	add	r3, r2
 800324e:	3361      	adds	r3, #97	; 0x61
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d17d      	bne.n	8003352 <HCD_HC_OUT_IRQHandler+0x5be>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	212c      	movs	r1, #44	; 0x2c
 800325c:	fb01 f303 	mul.w	r3, r1, r3
 8003260:	4413      	add	r3, r2
 8003262:	3360      	adds	r3, #96	; 0x60
 8003264:	2201      	movs	r2, #1
 8003266:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	212c      	movs	r1, #44	; 0x2c
 800326e:	fb01 f303 	mul.w	r3, r1, r3
 8003272:	4413      	add	r3, r2
 8003274:	333f      	adds	r3, #63	; 0x3f
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b02      	cmp	r3, #2
 800327a:	d00a      	beq.n	8003292 <HCD_HC_OUT_IRQHandler+0x4fe>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	212c      	movs	r1, #44	; 0x2c
 8003282:	fb01 f303 	mul.w	r3, r1, r3
 8003286:	4413      	add	r3, r2
 8003288:	333f      	adds	r3, #63	; 0x3f
 800328a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800328c:	2b03      	cmp	r3, #3
 800328e:	f040 8100 	bne.w	8003492 <HCD_HC_OUT_IRQHandler+0x6fe>
        if (hhcd->Init.dma_enable == 0U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d113      	bne.n	80032c2 <HCD_HC_OUT_IRQHandler+0x52e>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	212c      	movs	r1, #44	; 0x2c
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	4413      	add	r3, r2
 80032a6:	3355      	adds	r3, #85	; 0x55
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	f083 0301 	eor.w	r3, r3, #1
 80032ae:	b2d8      	uxtb	r0, r3
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	212c      	movs	r1, #44	; 0x2c
 80032b6:	fb01 f303 	mul.w	r3, r1, r3
 80032ba:	4413      	add	r3, r2
 80032bc:	3355      	adds	r3, #85	; 0x55
 80032be:	4602      	mov	r2, r0
 80032c0:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	f040 80e3 	bne.w	8003492 <HCD_HC_OUT_IRQHandler+0x6fe>
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	212c      	movs	r1, #44	; 0x2c
 80032d2:	fb01 f303 	mul.w	r3, r1, r3
 80032d6:	4413      	add	r3, r2
 80032d8:	334c      	adds	r3, #76	; 0x4c
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 80d8 	beq.w	8003492 <HCD_HC_OUT_IRQHandler+0x6fe>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	212c      	movs	r1, #44	; 0x2c
 80032e8:	fb01 f303 	mul.w	r3, r1, r3
 80032ec:	4413      	add	r3, r2
 80032ee:	334c      	adds	r3, #76	; 0x4c
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	202c      	movs	r0, #44	; 0x2c
 80032f8:	fb00 f202 	mul.w	r2, r0, r2
 80032fc:	440a      	add	r2, r1
 80032fe:	3240      	adds	r2, #64	; 0x40
 8003300:	8812      	ldrh	r2, [r2, #0]
 8003302:	4413      	add	r3, r2
 8003304:	3b01      	subs	r3, #1
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	202c      	movs	r0, #44	; 0x2c
 800330c:	fb00 f202 	mul.w	r2, r0, r2
 8003310:	440a      	add	r2, r1
 8003312:	3240      	adds	r2, #64	; 0x40
 8003314:	8812      	ldrh	r2, [r2, #0]
 8003316:	fbb3 f3f2 	udiv	r3, r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 80b5 	beq.w	8003492 <HCD_HC_OUT_IRQHandler+0x6fe>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	212c      	movs	r1, #44	; 0x2c
 800332e:	fb01 f303 	mul.w	r3, r1, r3
 8003332:	4413      	add	r3, r2
 8003334:	3355      	adds	r3, #85	; 0x55
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	f083 0301 	eor.w	r3, r3, #1
 800333c:	b2d8      	uxtb	r0, r3
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	212c      	movs	r1, #44	; 0x2c
 8003344:	fb01 f303 	mul.w	r3, r1, r3
 8003348:	4413      	add	r3, r2
 800334a:	3355      	adds	r3, #85	; 0x55
 800334c:	4602      	mov	r2, r0
 800334e:	701a      	strb	r2, [r3, #0]
 8003350:	e09f      	b.n	8003492 <HCD_HC_OUT_IRQHandler+0x6fe>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	212c      	movs	r1, #44	; 0x2c
 8003358:	fb01 f303 	mul.w	r3, r1, r3
 800335c:	4413      	add	r3, r2
 800335e:	3361      	adds	r3, #97	; 0x61
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b03      	cmp	r3, #3
 8003364:	d109      	bne.n	800337a <HCD_HC_OUT_IRQHandler+0x5e6>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	212c      	movs	r1, #44	; 0x2c
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	4413      	add	r3, r2
 8003372:	3360      	adds	r3, #96	; 0x60
 8003374:	2202      	movs	r2, #2
 8003376:	701a      	strb	r2, [r3, #0]
 8003378:	e08b      	b.n	8003492 <HCD_HC_OUT_IRQHandler+0x6fe>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	212c      	movs	r1, #44	; 0x2c
 8003380:	fb01 f303 	mul.w	r3, r1, r3
 8003384:	4413      	add	r3, r2
 8003386:	3361      	adds	r3, #97	; 0x61
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b04      	cmp	r3, #4
 800338c:	d109      	bne.n	80033a2 <HCD_HC_OUT_IRQHandler+0x60e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	212c      	movs	r1, #44	; 0x2c
 8003394:	fb01 f303 	mul.w	r3, r1, r3
 8003398:	4413      	add	r3, r2
 800339a:	3360      	adds	r3, #96	; 0x60
 800339c:	2202      	movs	r2, #2
 800339e:	701a      	strb	r2, [r3, #0]
 80033a0:	e077      	b.n	8003492 <HCD_HC_OUT_IRQHandler+0x6fe>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	212c      	movs	r1, #44	; 0x2c
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	4413      	add	r3, r2
 80033ae:	3361      	adds	r3, #97	; 0x61
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b05      	cmp	r3, #5
 80033b4:	d109      	bne.n	80033ca <HCD_HC_OUT_IRQHandler+0x636>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	212c      	movs	r1, #44	; 0x2c
 80033bc:	fb01 f303 	mul.w	r3, r1, r3
 80033c0:	4413      	add	r3, r2
 80033c2:	3360      	adds	r3, #96	; 0x60
 80033c4:	2205      	movs	r2, #5
 80033c6:	701a      	strb	r2, [r3, #0]
 80033c8:	e063      	b.n	8003492 <HCD_HC_OUT_IRQHandler+0x6fe>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	212c      	movs	r1, #44	; 0x2c
 80033d0:	fb01 f303 	mul.w	r3, r1, r3
 80033d4:	4413      	add	r3, r2
 80033d6:	3361      	adds	r3, #97	; 0x61
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b06      	cmp	r3, #6
 80033dc:	d009      	beq.n	80033f2 <HCD_HC_OUT_IRQHandler+0x65e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	212c      	movs	r1, #44	; 0x2c
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	4413      	add	r3, r2
 80033ea:	3361      	adds	r3, #97	; 0x61
 80033ec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d14f      	bne.n	8003492 <HCD_HC_OUT_IRQHandler+0x6fe>
      hhcd->hc[ch_num].ErrCnt++;
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	212c      	movs	r1, #44	; 0x2c
 80033f8:	fb01 f303 	mul.w	r3, r1, r3
 80033fc:	4413      	add	r3, r2
 80033fe:	335c      	adds	r3, #92	; 0x5c
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	202c      	movs	r0, #44	; 0x2c
 800340a:	fb00 f303 	mul.w	r3, r0, r3
 800340e:	440b      	add	r3, r1
 8003410:	335c      	adds	r3, #92	; 0x5c
 8003412:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	212c      	movs	r1, #44	; 0x2c
 800341a:	fb01 f303 	mul.w	r3, r1, r3
 800341e:	4413      	add	r3, r2
 8003420:	335c      	adds	r3, #92	; 0x5c
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b02      	cmp	r3, #2
 8003426:	d912      	bls.n	800344e <HCD_HC_OUT_IRQHandler+0x6ba>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	212c      	movs	r1, #44	; 0x2c
 800342e:	fb01 f303 	mul.w	r3, r1, r3
 8003432:	4413      	add	r3, r2
 8003434:	335c      	adds	r3, #92	; 0x5c
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	212c      	movs	r1, #44	; 0x2c
 8003440:	fb01 f303 	mul.w	r3, r1, r3
 8003444:	4413      	add	r3, r2
 8003446:	3360      	adds	r3, #96	; 0x60
 8003448:	2204      	movs	r2, #4
 800344a:	701a      	strb	r2, [r3, #0]
 800344c:	e021      	b.n	8003492 <HCD_HC_OUT_IRQHandler+0x6fe>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	212c      	movs	r1, #44	; 0x2c
 8003454:	fb01 f303 	mul.w	r3, r1, r3
 8003458:	4413      	add	r3, r2
 800345a:	3360      	adds	r3, #96	; 0x60
 800345c:	2202      	movs	r2, #2
 800345e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	4413      	add	r3, r2
 8003468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003476:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800347e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	4413      	add	r3, r2
 8003488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800348c:	461a      	mov	r2, r3
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	4413      	add	r3, r2
 800349a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349e:	461a      	mov	r2, r3
 80034a0:	2302      	movs	r3, #2
 80034a2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	b2d9      	uxtb	r1, r3
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	202c      	movs	r0, #44	; 0x2c
 80034ae:	fb00 f303 	mul.w	r3, r0, r3
 80034b2:	4413      	add	r3, r2
 80034b4:	3360      	adds	r3, #96	; 0x60
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	461a      	mov	r2, r3
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f009 fa6a 	bl	800c994 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80034c0:	bf00      	nop
 80034c2:	3720      	adds	r7, #32
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08a      	sub	sp, #40	; 0x28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	f003 030f 	and.w	r3, r3, #15
 80034e8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	0c5b      	lsrs	r3, r3, #17
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	091b      	lsrs	r3, r3, #4
 80034f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034fc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2b02      	cmp	r3, #2
 8003502:	d004      	beq.n	800350e <HCD_RXQLVL_IRQHandler+0x46>
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	2b05      	cmp	r3, #5
 8003508:	f000 80a9 	beq.w	800365e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800350c:	e0aa      	b.n	8003664 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80a6 	beq.w	8003662 <HCD_RXQLVL_IRQHandler+0x19a>
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	212c      	movs	r1, #44	; 0x2c
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	4413      	add	r3, r2
 8003522:	3344      	adds	r3, #68	; 0x44
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 809b 	beq.w	8003662 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	212c      	movs	r1, #44	; 0x2c
 8003532:	fb01 f303 	mul.w	r3, r1, r3
 8003536:	4413      	add	r3, r2
 8003538:	3350      	adds	r3, #80	; 0x50
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	441a      	add	r2, r3
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	202c      	movs	r0, #44	; 0x2c
 8003546:	fb00 f303 	mul.w	r3, r0, r3
 800354a:	440b      	add	r3, r1
 800354c:	334c      	adds	r3, #76	; 0x4c
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	429a      	cmp	r2, r3
 8003552:	d87a      	bhi.n	800364a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6818      	ldr	r0, [r3, #0]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	212c      	movs	r1, #44	; 0x2c
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	4413      	add	r3, r2
 8003564:	3344      	adds	r3, #68	; 0x44
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	b292      	uxth	r2, r2
 800356c:	4619      	mov	r1, r3
 800356e:	f002 fd40 	bl	8005ff2 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	212c      	movs	r1, #44	; 0x2c
 8003578:	fb01 f303 	mul.w	r3, r1, r3
 800357c:	4413      	add	r3, r2
 800357e:	3344      	adds	r3, #68	; 0x44
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	441a      	add	r2, r3
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	202c      	movs	r0, #44	; 0x2c
 800358c:	fb00 f303 	mul.w	r3, r0, r3
 8003590:	440b      	add	r3, r1
 8003592:	3344      	adds	r3, #68	; 0x44
 8003594:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	212c      	movs	r1, #44	; 0x2c
 800359c:	fb01 f303 	mul.w	r3, r1, r3
 80035a0:	4413      	add	r3, r2
 80035a2:	3350      	adds	r3, #80	; 0x50
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	441a      	add	r2, r3
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	202c      	movs	r0, #44	; 0x2c
 80035b0:	fb00 f303 	mul.w	r3, r0, r3
 80035b4:	440b      	add	r3, r1
 80035b6:	3350      	adds	r3, #80	; 0x50
 80035b8:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	0cdb      	lsrs	r3, r3, #19
 80035ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ce:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	212c      	movs	r1, #44	; 0x2c
 80035d6:	fb01 f303 	mul.w	r3, r1, r3
 80035da:	4413      	add	r3, r2
 80035dc:	3340      	adds	r3, #64	; 0x40
 80035de:	881b      	ldrh	r3, [r3, #0]
 80035e0:	461a      	mov	r2, r3
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d13c      	bne.n	8003662 <HCD_RXQLVL_IRQHandler+0x19a>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d039      	beq.n	8003662 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	015a      	lsls	r2, r3, #5
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	4413      	add	r3, r2
 80035f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003604:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800360c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	4413      	add	r3, r2
 8003616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361a:	461a      	mov	r2, r3
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	212c      	movs	r1, #44	; 0x2c
 8003626:	fb01 f303 	mul.w	r3, r1, r3
 800362a:	4413      	add	r3, r2
 800362c:	3354      	adds	r3, #84	; 0x54
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	f083 0301 	eor.w	r3, r3, #1
 8003634:	b2d8      	uxtb	r0, r3
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	212c      	movs	r1, #44	; 0x2c
 800363c:	fb01 f303 	mul.w	r3, r1, r3
 8003640:	4413      	add	r3, r2
 8003642:	3354      	adds	r3, #84	; 0x54
 8003644:	4602      	mov	r2, r0
 8003646:	701a      	strb	r2, [r3, #0]
      break;
 8003648:	e00b      	b.n	8003662 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	212c      	movs	r1, #44	; 0x2c
 8003650:	fb01 f303 	mul.w	r3, r1, r3
 8003654:	4413      	add	r3, r2
 8003656:	3360      	adds	r3, #96	; 0x60
 8003658:	2204      	movs	r2, #4
 800365a:	701a      	strb	r2, [r3, #0]
      break;
 800365c:	e001      	b.n	8003662 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800365e:	bf00      	nop
 8003660:	e000      	b.n	8003664 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003662:	bf00      	nop
  }
}
 8003664:	bf00      	nop
 8003666:	3728      	adds	r7, #40	; 0x28
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003698:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d10b      	bne.n	80036bc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d102      	bne.n	80036b4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f009 f954 	bl	800c95c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f043 0302 	orr.w	r3, r3, #2
 80036ba:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b08      	cmp	r3, #8
 80036c4:	d132      	bne.n	800372c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	f043 0308 	orr.w	r3, r3, #8
 80036cc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d126      	bne.n	8003726 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d113      	bne.n	8003708 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80036e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036ea:	d106      	bne.n	80036fa <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2102      	movs	r1, #2
 80036f2:	4618      	mov	r0, r3
 80036f4:	f002 fd9c 	bl	8006230 <USB_InitFSLSPClkSel>
 80036f8:	e011      	b.n	800371e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2101      	movs	r1, #1
 8003700:	4618      	mov	r0, r3
 8003702:	f002 fd95 	bl	8006230 <USB_InitFSLSPClkSel>
 8003706:	e00a      	b.n	800371e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d106      	bne.n	800371e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003716:	461a      	mov	r2, r3
 8003718:	f64e 2360 	movw	r3, #60000	; 0xea60
 800371c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f009 f94a 	bl	800c9b8 <HAL_HCD_PortEnabled_Callback>
 8003724:	e002      	b.n	800372c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f009 f954 	bl	800c9d4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b20      	cmp	r3, #32
 8003734:	d103      	bne.n	800373e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f043 0320 	orr.w	r3, r3, #32
 800373c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003744:	461a      	mov	r2, r3
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	6013      	str	r3, [r2, #0]
}
 800374a:	bf00      	nop
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e304      	b.n	8003d70 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 8087 	beq.w	8003882 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003774:	4b92      	ldr	r3, [pc, #584]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 030c 	and.w	r3, r3, #12
 800377c:	2b04      	cmp	r3, #4
 800377e:	d00c      	beq.n	800379a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003780:	4b8f      	ldr	r3, [pc, #572]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 030c 	and.w	r3, r3, #12
 8003788:	2b08      	cmp	r3, #8
 800378a:	d112      	bne.n	80037b2 <HAL_RCC_OscConfig+0x5e>
 800378c:	4b8c      	ldr	r3, [pc, #560]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003798:	d10b      	bne.n	80037b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800379a:	4b89      	ldr	r3, [pc, #548]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d06c      	beq.n	8003880 <HAL_RCC_OscConfig+0x12c>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d168      	bne.n	8003880 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e2de      	b.n	8003d70 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ba:	d106      	bne.n	80037ca <HAL_RCC_OscConfig+0x76>
 80037bc:	4b80      	ldr	r3, [pc, #512]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a7f      	ldr	r2, [pc, #508]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 80037c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	e02e      	b.n	8003828 <HAL_RCC_OscConfig+0xd4>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10c      	bne.n	80037ec <HAL_RCC_OscConfig+0x98>
 80037d2:	4b7b      	ldr	r3, [pc, #492]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a7a      	ldr	r2, [pc, #488]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 80037d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	4b78      	ldr	r3, [pc, #480]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a77      	ldr	r2, [pc, #476]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 80037e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	e01d      	b.n	8003828 <HAL_RCC_OscConfig+0xd4>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037f4:	d10c      	bne.n	8003810 <HAL_RCC_OscConfig+0xbc>
 80037f6:	4b72      	ldr	r3, [pc, #456]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a71      	ldr	r2, [pc, #452]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 80037fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	4b6f      	ldr	r3, [pc, #444]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a6e      	ldr	r2, [pc, #440]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 8003808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	e00b      	b.n	8003828 <HAL_RCC_OscConfig+0xd4>
 8003810:	4b6b      	ldr	r3, [pc, #428]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a6a      	ldr	r2, [pc, #424]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 8003816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	4b68      	ldr	r3, [pc, #416]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a67      	ldr	r2, [pc, #412]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 8003822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003826:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d013      	beq.n	8003858 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003830:	f7fd feca 	bl	80015c8 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003838:	f7fd fec6 	bl	80015c8 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b64      	cmp	r3, #100	; 0x64
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e292      	b.n	8003d70 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384a:	4b5d      	ldr	r3, [pc, #372]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f0      	beq.n	8003838 <HAL_RCC_OscConfig+0xe4>
 8003856:	e014      	b.n	8003882 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003858:	f7fd feb6 	bl	80015c8 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003860:	f7fd feb2 	bl	80015c8 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b64      	cmp	r3, #100	; 0x64
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e27e      	b.n	8003d70 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003872:	4b53      	ldr	r3, [pc, #332]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1f0      	bne.n	8003860 <HAL_RCC_OscConfig+0x10c>
 800387e:	e000      	b.n	8003882 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d063      	beq.n	8003956 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800388e:	4b4c      	ldr	r3, [pc, #304]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f003 030c 	and.w	r3, r3, #12
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00b      	beq.n	80038b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800389a:	4b49      	ldr	r3, [pc, #292]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f003 030c 	and.w	r3, r3, #12
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d11c      	bne.n	80038e0 <HAL_RCC_OscConfig+0x18c>
 80038a6:	4b46      	ldr	r3, [pc, #280]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d116      	bne.n	80038e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038b2:	4b43      	ldr	r3, [pc, #268]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d005      	beq.n	80038ca <HAL_RCC_OscConfig+0x176>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d001      	beq.n	80038ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e252      	b.n	8003d70 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ca:	4b3d      	ldr	r3, [pc, #244]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	4939      	ldr	r1, [pc, #228]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038de:	e03a      	b.n	8003956 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d020      	beq.n	800392a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038e8:	4b36      	ldr	r3, [pc, #216]	; (80039c4 <HAL_RCC_OscConfig+0x270>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ee:	f7fd fe6b 	bl	80015c8 <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f4:	e008      	b.n	8003908 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038f6:	f7fd fe67 	bl	80015c8 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e233      	b.n	8003d70 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003908:	4b2d      	ldr	r3, [pc, #180]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0f0      	beq.n	80038f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003914:	4b2a      	ldr	r3, [pc, #168]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	4927      	ldr	r1, [pc, #156]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 8003924:	4313      	orrs	r3, r2
 8003926:	600b      	str	r3, [r1, #0]
 8003928:	e015      	b.n	8003956 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800392a:	4b26      	ldr	r3, [pc, #152]	; (80039c4 <HAL_RCC_OscConfig+0x270>)
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003930:	f7fd fe4a 	bl	80015c8 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003938:	f7fd fe46 	bl	80015c8 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e212      	b.n	8003d70 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800394a:	4b1d      	ldr	r3, [pc, #116]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1f0      	bne.n	8003938 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d03a      	beq.n	80039d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d019      	beq.n	800399e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800396a:	4b17      	ldr	r3, [pc, #92]	; (80039c8 <HAL_RCC_OscConfig+0x274>)
 800396c:	2201      	movs	r2, #1
 800396e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003970:	f7fd fe2a 	bl	80015c8 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003978:	f7fd fe26 	bl	80015c8 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e1f2      	b.n	8003d70 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800398a:	4b0d      	ldr	r3, [pc, #52]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0f0      	beq.n	8003978 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003996:	2001      	movs	r0, #1
 8003998:	f000 fc1c 	bl	80041d4 <RCC_Delay>
 800399c:	e01c      	b.n	80039d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800399e:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <HAL_RCC_OscConfig+0x274>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a4:	f7fd fe10 	bl	80015c8 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039aa:	e00f      	b.n	80039cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ac:	f7fd fe0c 	bl	80015c8 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d908      	bls.n	80039cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e1d8      	b.n	8003d70 <HAL_RCC_OscConfig+0x61c>
 80039be:	bf00      	nop
 80039c0:	40021000 	.word	0x40021000
 80039c4:	42420000 	.word	0x42420000
 80039c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039cc:	4b9b      	ldr	r3, [pc, #620]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1e9      	bne.n	80039ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 80a6 	beq.w	8003b32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039e6:	2300      	movs	r3, #0
 80039e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ea:	4b94      	ldr	r3, [pc, #592]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10d      	bne.n	8003a12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f6:	4b91      	ldr	r3, [pc, #580]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	4a90      	ldr	r2, [pc, #576]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 80039fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a00:	61d3      	str	r3, [r2, #28]
 8003a02:	4b8e      	ldr	r3, [pc, #568]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0a:	60bb      	str	r3, [r7, #8]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a12:	4b8b      	ldr	r3, [pc, #556]	; (8003c40 <HAL_RCC_OscConfig+0x4ec>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d118      	bne.n	8003a50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a1e:	4b88      	ldr	r3, [pc, #544]	; (8003c40 <HAL_RCC_OscConfig+0x4ec>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a87      	ldr	r2, [pc, #540]	; (8003c40 <HAL_RCC_OscConfig+0x4ec>)
 8003a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a2a:	f7fd fdcd 	bl	80015c8 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a32:	f7fd fdc9 	bl	80015c8 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b64      	cmp	r3, #100	; 0x64
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e195      	b.n	8003d70 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a44:	4b7e      	ldr	r3, [pc, #504]	; (8003c40 <HAL_RCC_OscConfig+0x4ec>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d106      	bne.n	8003a66 <HAL_RCC_OscConfig+0x312>
 8003a58:	4b78      	ldr	r3, [pc, #480]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	4a77      	ldr	r2, [pc, #476]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003a5e:	f043 0301 	orr.w	r3, r3, #1
 8003a62:	6213      	str	r3, [r2, #32]
 8003a64:	e02d      	b.n	8003ac2 <HAL_RCC_OscConfig+0x36e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10c      	bne.n	8003a88 <HAL_RCC_OscConfig+0x334>
 8003a6e:	4b73      	ldr	r3, [pc, #460]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	4a72      	ldr	r2, [pc, #456]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003a74:	f023 0301 	bic.w	r3, r3, #1
 8003a78:	6213      	str	r3, [r2, #32]
 8003a7a:	4b70      	ldr	r3, [pc, #448]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	4a6f      	ldr	r2, [pc, #444]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003a80:	f023 0304 	bic.w	r3, r3, #4
 8003a84:	6213      	str	r3, [r2, #32]
 8003a86:	e01c      	b.n	8003ac2 <HAL_RCC_OscConfig+0x36e>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	2b05      	cmp	r3, #5
 8003a8e:	d10c      	bne.n	8003aaa <HAL_RCC_OscConfig+0x356>
 8003a90:	4b6a      	ldr	r3, [pc, #424]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	4a69      	ldr	r2, [pc, #420]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003a96:	f043 0304 	orr.w	r3, r3, #4
 8003a9a:	6213      	str	r3, [r2, #32]
 8003a9c:	4b67      	ldr	r3, [pc, #412]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	4a66      	ldr	r2, [pc, #408]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003aa2:	f043 0301 	orr.w	r3, r3, #1
 8003aa6:	6213      	str	r3, [r2, #32]
 8003aa8:	e00b      	b.n	8003ac2 <HAL_RCC_OscConfig+0x36e>
 8003aaa:	4b64      	ldr	r3, [pc, #400]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	4a63      	ldr	r2, [pc, #396]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003ab0:	f023 0301 	bic.w	r3, r3, #1
 8003ab4:	6213      	str	r3, [r2, #32]
 8003ab6:	4b61      	ldr	r3, [pc, #388]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	4a60      	ldr	r2, [pc, #384]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003abc:	f023 0304 	bic.w	r3, r3, #4
 8003ac0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d015      	beq.n	8003af6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aca:	f7fd fd7d 	bl	80015c8 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad0:	e00a      	b.n	8003ae8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad2:	f7fd fd79 	bl	80015c8 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e143      	b.n	8003d70 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae8:	4b54      	ldr	r3, [pc, #336]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0ee      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x37e>
 8003af4:	e014      	b.n	8003b20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af6:	f7fd fd67 	bl	80015c8 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003afc:	e00a      	b.n	8003b14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afe:	f7fd fd63 	bl	80015c8 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e12d      	b.n	8003d70 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b14:	4b49      	ldr	r3, [pc, #292]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1ee      	bne.n	8003afe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b20:	7dfb      	ldrb	r3, [r7, #23]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d105      	bne.n	8003b32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b26:	4b45      	ldr	r3, [pc, #276]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	4a44      	ldr	r2, [pc, #272]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b30:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 808c 	beq.w	8003c54 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003b3c:	4b3f      	ldr	r3, [pc, #252]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b48:	d10e      	bne.n	8003b68 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003b4a:	4b3c      	ldr	r3, [pc, #240]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d108      	bne.n	8003b68 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8003b56:	4b39      	ldr	r3, [pc, #228]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b62:	d101      	bne.n	8003b68 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e103      	b.n	8003d70 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d14e      	bne.n	8003c0e <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003b70:	4b32      	ldr	r3, [pc, #200]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d009      	beq.n	8003b90 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8003b7c:	4b2f      	ldr	r3, [pc, #188]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d001      	beq.n	8003b90 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e0ef      	b.n	8003d70 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003b90:	4b2c      	ldr	r3, [pc, #176]	; (8003c44 <HAL_RCC_OscConfig+0x4f0>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b96:	f7fd fd17 	bl	80015c8 <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003b9e:	f7fd fd13 	bl	80015c8 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b64      	cmp	r3, #100	; 0x64
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e0df      	b.n	8003d70 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003bb0:	4b22      	ldr	r3, [pc, #136]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1f0      	bne.n	8003b9e <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003bbc:	4b1f      	ldr	r3, [pc, #124]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc8:	491c      	ldr	r1, [pc, #112]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8003bce:	4b1b      	ldr	r3, [pc, #108]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	4918      	ldr	r1, [pc, #96]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8003be0:	4b18      	ldr	r3, [pc, #96]	; (8003c44 <HAL_RCC_OscConfig+0x4f0>)
 8003be2:	2201      	movs	r2, #1
 8003be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be6:	f7fd fcef 	bl	80015c8 <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003bee:	f7fd fceb 	bl	80015c8 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b64      	cmp	r3, #100	; 0x64
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e0b7      	b.n	8003d70 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003c00:	4b0e      	ldr	r3, [pc, #56]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0f0      	beq.n	8003bee <HAL_RCC_OscConfig+0x49a>
 8003c0c:	e022      	b.n	8003c54 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8003c0e:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	4a0a      	ldr	r2, [pc, #40]	; (8003c3c <HAL_RCC_OscConfig+0x4e8>)
 8003c14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003c1a:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <HAL_RCC_OscConfig+0x4f0>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c20:	f7fd fcd2 	bl	80015c8 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003c26:	e00f      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003c28:	f7fd fcce 	bl	80015c8 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b64      	cmp	r3, #100	; 0x64
 8003c34:	d908      	bls.n	8003c48 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e09a      	b.n	8003d70 <HAL_RCC_OscConfig+0x61c>
 8003c3a:	bf00      	nop
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	40007000 	.word	0x40007000
 8003c44:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003c48:	4b4b      	ldr	r3, [pc, #300]	; (8003d78 <HAL_RCC_OscConfig+0x624>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e9      	bne.n	8003c28 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 8088 	beq.w	8003d6e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c5e:	4b46      	ldr	r3, [pc, #280]	; (8003d78 <HAL_RCC_OscConfig+0x624>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f003 030c 	and.w	r3, r3, #12
 8003c66:	2b08      	cmp	r3, #8
 8003c68:	d068      	beq.n	8003d3c <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d14d      	bne.n	8003d0e <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c72:	4b42      	ldr	r3, [pc, #264]	; (8003d7c <HAL_RCC_OscConfig+0x628>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c78:	f7fd fca6 	bl	80015c8 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c80:	f7fd fca2 	bl	80015c8 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e06e      	b.n	8003d70 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c92:	4b39      	ldr	r3, [pc, #228]	; (8003d78 <HAL_RCC_OscConfig+0x624>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f0      	bne.n	8003c80 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca6:	d10f      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8003ca8:	4b33      	ldr	r3, [pc, #204]	; (8003d78 <HAL_RCC_OscConfig+0x624>)
 8003caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	4931      	ldr	r1, [pc, #196]	; (8003d78 <HAL_RCC_OscConfig+0x624>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cb6:	4b30      	ldr	r3, [pc, #192]	; (8003d78 <HAL_RCC_OscConfig+0x624>)
 8003cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cba:	f023 020f 	bic.w	r2, r3, #15
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	492d      	ldr	r1, [pc, #180]	; (8003d78 <HAL_RCC_OscConfig+0x624>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cc8:	4b2b      	ldr	r3, [pc, #172]	; (8003d78 <HAL_RCC_OscConfig+0x624>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	4927      	ldr	r1, [pc, #156]	; (8003d78 <HAL_RCC_OscConfig+0x624>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ce0:	4b26      	ldr	r3, [pc, #152]	; (8003d7c <HAL_RCC_OscConfig+0x628>)
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce6:	f7fd fc6f 	bl	80015c8 <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cec:	e008      	b.n	8003d00 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cee:	f7fd fc6b 	bl	80015c8 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e037      	b.n	8003d70 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d00:	4b1d      	ldr	r3, [pc, #116]	; (8003d78 <HAL_RCC_OscConfig+0x624>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0f0      	beq.n	8003cee <HAL_RCC_OscConfig+0x59a>
 8003d0c:	e02f      	b.n	8003d6e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d0e:	4b1b      	ldr	r3, [pc, #108]	; (8003d7c <HAL_RCC_OscConfig+0x628>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d14:	f7fd fc58 	bl	80015c8 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d1c:	f7fd fc54 	bl	80015c8 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e020      	b.n	8003d70 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d2e:	4b12      	ldr	r3, [pc, #72]	; (8003d78 <HAL_RCC_OscConfig+0x624>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1f0      	bne.n	8003d1c <HAL_RCC_OscConfig+0x5c8>
 8003d3a:	e018      	b.n	8003d6e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d101      	bne.n	8003d48 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e013      	b.n	8003d70 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d48:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <HAL_RCC_OscConfig+0x624>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d106      	bne.n	8003d6a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d001      	beq.n	8003d6e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	42420060 	.word	0x42420060

08003d80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e0d0      	b.n	8003f36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d94:	4b6a      	ldr	r3, [pc, #424]	; (8003f40 <HAL_RCC_ClockConfig+0x1c0>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d910      	bls.n	8003dc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da2:	4b67      	ldr	r3, [pc, #412]	; (8003f40 <HAL_RCC_ClockConfig+0x1c0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f023 0207 	bic.w	r2, r3, #7
 8003daa:	4965      	ldr	r1, [pc, #404]	; (8003f40 <HAL_RCC_ClockConfig+0x1c0>)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db2:	4b63      	ldr	r3, [pc, #396]	; (8003f40 <HAL_RCC_ClockConfig+0x1c0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d001      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e0b8      	b.n	8003f36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d020      	beq.n	8003e12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ddc:	4b59      	ldr	r3, [pc, #356]	; (8003f44 <HAL_RCC_ClockConfig+0x1c4>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	4a58      	ldr	r2, [pc, #352]	; (8003f44 <HAL_RCC_ClockConfig+0x1c4>)
 8003de2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003de6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d005      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003df4:	4b53      	ldr	r3, [pc, #332]	; (8003f44 <HAL_RCC_ClockConfig+0x1c4>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	4a52      	ldr	r2, [pc, #328]	; (8003f44 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003dfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e00:	4b50      	ldr	r3, [pc, #320]	; (8003f44 <HAL_RCC_ClockConfig+0x1c4>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	494d      	ldr	r1, [pc, #308]	; (8003f44 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d040      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d107      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e26:	4b47      	ldr	r3, [pc, #284]	; (8003f44 <HAL_RCC_ClockConfig+0x1c4>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d115      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e07f      	b.n	8003f36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d107      	bne.n	8003e4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e3e:	4b41      	ldr	r3, [pc, #260]	; (8003f44 <HAL_RCC_ClockConfig+0x1c4>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d109      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e073      	b.n	8003f36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e4e:	4b3d      	ldr	r3, [pc, #244]	; (8003f44 <HAL_RCC_ClockConfig+0x1c4>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e06b      	b.n	8003f36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e5e:	4b39      	ldr	r3, [pc, #228]	; (8003f44 <HAL_RCC_ClockConfig+0x1c4>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f023 0203 	bic.w	r2, r3, #3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	4936      	ldr	r1, [pc, #216]	; (8003f44 <HAL_RCC_ClockConfig+0x1c4>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e70:	f7fd fbaa 	bl	80015c8 <HAL_GetTick>
 8003e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e76:	e00a      	b.n	8003e8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e78:	f7fd fba6 	bl	80015c8 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e053      	b.n	8003f36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e8e:	4b2d      	ldr	r3, [pc, #180]	; (8003f44 <HAL_RCC_ClockConfig+0x1c4>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f003 020c 	and.w	r2, r3, #12
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d1eb      	bne.n	8003e78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ea0:	4b27      	ldr	r3, [pc, #156]	; (8003f40 <HAL_RCC_ClockConfig+0x1c0>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d210      	bcs.n	8003ed0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eae:	4b24      	ldr	r3, [pc, #144]	; (8003f40 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f023 0207 	bic.w	r2, r3, #7
 8003eb6:	4922      	ldr	r1, [pc, #136]	; (8003f40 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ebe:	4b20      	ldr	r3, [pc, #128]	; (8003f40 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d001      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e032      	b.n	8003f36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d008      	beq.n	8003eee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003edc:	4b19      	ldr	r3, [pc, #100]	; (8003f44 <HAL_RCC_ClockConfig+0x1c4>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	4916      	ldr	r1, [pc, #88]	; (8003f44 <HAL_RCC_ClockConfig+0x1c4>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d009      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003efa:	4b12      	ldr	r3, [pc, #72]	; (8003f44 <HAL_RCC_ClockConfig+0x1c4>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	490e      	ldr	r1, [pc, #56]	; (8003f44 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f0e:	f000 f821 	bl	8003f54 <HAL_RCC_GetSysClockFreq>
 8003f12:	4602      	mov	r2, r0
 8003f14:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <HAL_RCC_ClockConfig+0x1c4>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	091b      	lsrs	r3, r3, #4
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	490a      	ldr	r1, [pc, #40]	; (8003f48 <HAL_RCC_ClockConfig+0x1c8>)
 8003f20:	5ccb      	ldrb	r3, [r1, r3]
 8003f22:	fa22 f303 	lsr.w	r3, r2, r3
 8003f26:	4a09      	ldr	r2, [pc, #36]	; (8003f4c <HAL_RCC_ClockConfig+0x1cc>)
 8003f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f2a:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <HAL_RCC_ClockConfig+0x1d0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fd fa2c 	bl	800138c <HAL_InitTick>

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	40022000 	.word	0x40022000
 8003f44:	40021000 	.word	0x40021000
 8003f48:	0800d9c0 	.word	0x0800d9c0
 8003f4c:	20000000 	.word	0x20000000
 8003f50:	20000004 	.word	0x20000004

08003f54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f58:	b099      	sub	sp, #100	; 0x64
 8003f5a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8003f5c:	4b66      	ldr	r3, [pc, #408]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f5e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8003f62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f64:	c407      	stmia	r4!, {r0, r1, r2}
 8003f66:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8003f68:	4b64      	ldr	r3, [pc, #400]	; (80040fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003f6a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8003f6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	657b      	str	r3, [r7, #84]	; 0x54
 8003f78:	2300      	movs	r3, #0
 8003f7a:	653b      	str	r3, [r7, #80]	; 0x50
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f80:	2300      	movs	r3, #0
 8003f82:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t sysclockfreq = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	65bb      	str	r3, [r7, #88]	; 0x58
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	647b      	str	r3, [r7, #68]	; 0x44
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f90:	4b5b      	ldr	r3, [pc, #364]	; (8004100 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f98:	f003 030c 	and.w	r3, r3, #12
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d002      	beq.n	8003fa6 <HAL_RCC_GetSysClockFreq+0x52>
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d003      	beq.n	8003fac <HAL_RCC_GetSysClockFreq+0x58>
 8003fa4:	e09f      	b.n	80040e6 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fa6:	4b57      	ldr	r3, [pc, #348]	; (8004104 <HAL_RCC_GetSysClockFreq+0x1b0>)
 8003fa8:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 8003faa:	e09f      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fae:	0c9b      	lsrs	r3, r3, #18
 8003fb0:	f003 030f 	and.w	r3, r3, #15
 8003fb4:	3340      	adds	r3, #64	; 0x40
 8003fb6:	f107 0220 	add.w	r2, r7, #32
 8003fba:	4413      	add	r3, r2
 8003fbc:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8003fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 8084 	beq.w	80040d6 <HAL_RCC_GetSysClockFreq+0x182>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003fce:	4b4c      	ldr	r3, [pc, #304]	; (8004100 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	3340      	adds	r3, #64	; 0x40
 8003fd8:	f107 0220 	add.w	r2, r7, #32
 8003fdc:	4413      	add	r3, r2
 8003fde:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8003fe2:	653b      	str	r3, [r7, #80]	; 0x50
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8003fe4:	4b46      	ldr	r3, [pc, #280]	; (8004100 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d060      	beq.n	80040b2 <HAL_RCC_GetSysClockFreq+0x15e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8003ff0:	4b43      	ldr	r3, [pc, #268]	; (8004100 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	091b      	lsrs	r3, r3, #4
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	64bb      	str	r3, [r7, #72]	; 0x48
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8003ffe:	4b40      	ldr	r3, [pc, #256]	; (8004100 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004002:	0a1b      	lsrs	r3, r3, #8
 8004004:	f003 030f 	and.w	r3, r3, #15
 8004008:	3302      	adds	r3, #2
 800400a:	647b      	str	r3, [r7, #68]	; 0x44
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800400c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800400e:	2200      	movs	r2, #0
 8004010:	613b      	str	r3, [r7, #16]
 8004012:	617a      	str	r2, [r7, #20]
 8004014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004016:	2200      	movs	r2, #0
 8004018:	61bb      	str	r3, [r7, #24]
 800401a:	61fa      	str	r2, [r7, #28]
 800401c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004020:	4622      	mov	r2, r4
 8004022:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004026:	4684      	mov	ip, r0
 8004028:	fb0c f202 	mul.w	r2, ip, r2
 800402c:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8004030:	468c      	mov	ip, r1
 8004032:	4618      	mov	r0, r3
 8004034:	4621      	mov	r1, r4
 8004036:	4603      	mov	r3, r0
 8004038:	fb03 f30c 	mul.w	r3, r3, ip
 800403c:	4413      	add	r3, r2
 800403e:	4602      	mov	r2, r0
 8004040:	69b9      	ldr	r1, [r7, #24]
 8004042:	fba2 8901 	umull	r8, r9, r2, r1
 8004046:	444b      	add	r3, r9
 8004048:	4699      	mov	r9, r3
 800404a:	4b2e      	ldr	r3, [pc, #184]	; (8004104 <HAL_RCC_GetSysClockFreq+0x1b0>)
 800404c:	fb03 f209 	mul.w	r2, r3, r9
 8004050:	2300      	movs	r3, #0
 8004052:	fb03 f308 	mul.w	r3, r3, r8
 8004056:	4413      	add	r3, r2
 8004058:	4a2a      	ldr	r2, [pc, #168]	; (8004104 <HAL_RCC_GetSysClockFreq+0x1b0>)
 800405a:	fba8 ab02 	umull	sl, fp, r8, r2
 800405e:	445b      	add	r3, fp
 8004060:	469b      	mov	fp, r3
 8004062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004064:	2200      	movs	r2, #0
 8004066:	60bb      	str	r3, [r7, #8]
 8004068:	60fa      	str	r2, [r7, #12]
 800406a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800406c:	2200      	movs	r2, #0
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	607a      	str	r2, [r7, #4]
 8004072:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004076:	4622      	mov	r2, r4
 8004078:	e9d7 8900 	ldrd	r8, r9, [r7]
 800407c:	4641      	mov	r1, r8
 800407e:	fb01 f202 	mul.w	r2, r1, r2
 8004082:	46cc      	mov	ip, r9
 8004084:	4618      	mov	r0, r3
 8004086:	4621      	mov	r1, r4
 8004088:	4603      	mov	r3, r0
 800408a:	fb03 f30c 	mul.w	r3, r3, ip
 800408e:	4413      	add	r3, r2
 8004090:	4602      	mov	r2, r0
 8004092:	4641      	mov	r1, r8
 8004094:	fba2 5601 	umull	r5, r6, r2, r1
 8004098:	4433      	add	r3, r6
 800409a:	461e      	mov	r6, r3
 800409c:	462a      	mov	r2, r5
 800409e:	4633      	mov	r3, r6
 80040a0:	4650      	mov	r0, sl
 80040a2:	4659      	mov	r1, fp
 80040a4:	f7fc f8cc 	bl	8000240 <__aeabi_uldivmod>
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
 80040ac:	4613      	mov	r3, r2
 80040ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040b0:	e007      	b.n	80040c2 <HAL_RCC_GetSysClockFreq+0x16e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80040b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040b4:	4a13      	ldr	r2, [pc, #76]	; (8004104 <HAL_RCC_GetSysClockFreq+0x1b0>)
 80040b6:	fb03 f202 	mul.w	r2, r3, r2
 80040ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c0:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80040c2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80040c6:	461a      	mov	r2, r3
 80040c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d108      	bne.n	80040e0 <HAL_RCC_GetSysClockFreq+0x18c>
        {
          pllclk = pllclk / 2;
 80040ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040d0:	085b      	lsrs	r3, r3, #1
 80040d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040d4:	e004      	b.n	80040e0 <HAL_RCC_GetSysClockFreq+0x18c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040d8:	4a0b      	ldr	r2, [pc, #44]	; (8004108 <HAL_RCC_GetSysClockFreq+0x1b4>)
 80040da:	fb02 f303 	mul.w	r3, r2, r3
 80040de:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
      sysclockfreq = pllclk;
 80040e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040e2:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 80040e4:	e002      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040e6:	4b09      	ldr	r3, [pc, #36]	; (800410c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040e8:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 80040ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3764      	adds	r7, #100	; 0x64
 80040f2:	46bd      	mov	sp, r7
 80040f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040f8:	0800d908 	.word	0x0800d908
 80040fc:	0800d918 	.word	0x0800d918
 8004100:	40021000 	.word	0x40021000
 8004104:	00989680 	.word	0x00989680
 8004108:	003d0900 	.word	0x003d0900
 800410c:	007a1200 	.word	0x007a1200

08004110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004114:	4b02      	ldr	r3, [pc, #8]	; (8004120 <HAL_RCC_GetHCLKFreq+0x10>)
 8004116:	681b      	ldr	r3, [r3, #0]
}
 8004118:	4618      	mov	r0, r3
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr
 8004120:	20000000 	.word	0x20000000

08004124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004128:	f7ff fff2 	bl	8004110 <HAL_RCC_GetHCLKFreq>
 800412c:	4602      	mov	r2, r0
 800412e:	4b05      	ldr	r3, [pc, #20]	; (8004144 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	0a1b      	lsrs	r3, r3, #8
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	4903      	ldr	r1, [pc, #12]	; (8004148 <HAL_RCC_GetPCLK1Freq+0x24>)
 800413a:	5ccb      	ldrb	r3, [r1, r3]
 800413c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004140:	4618      	mov	r0, r3
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40021000 	.word	0x40021000
 8004148:	0800d9d0 	.word	0x0800d9d0

0800414c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004150:	f7ff ffde 	bl	8004110 <HAL_RCC_GetHCLKFreq>
 8004154:	4602      	mov	r2, r0
 8004156:	4b05      	ldr	r3, [pc, #20]	; (800416c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	0adb      	lsrs	r3, r3, #11
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	4903      	ldr	r1, [pc, #12]	; (8004170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004162:	5ccb      	ldrb	r3, [r1, r3]
 8004164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004168:	4618      	mov	r0, r3
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40021000 	.word	0x40021000
 8004170:	0800d9d0 	.word	0x0800d9d0

08004174 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	220f      	movs	r2, #15
 8004182:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004184:	4b11      	ldr	r3, [pc, #68]	; (80041cc <HAL_RCC_GetClockConfig+0x58>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f003 0203 	and.w	r2, r3, #3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004190:	4b0e      	ldr	r3, [pc, #56]	; (80041cc <HAL_RCC_GetClockConfig+0x58>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800419c:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <HAL_RCC_GetClockConfig+0x58>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80041a8:	4b08      	ldr	r3, [pc, #32]	; (80041cc <HAL_RCC_GetClockConfig+0x58>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	08db      	lsrs	r3, r3, #3
 80041ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80041b6:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <HAL_RCC_GetClockConfig+0x5c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0207 	and.w	r2, r3, #7
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bc80      	pop	{r7}
 80041ca:	4770      	bx	lr
 80041cc:	40021000 	.word	0x40021000
 80041d0:	40022000 	.word	0x40022000

080041d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80041dc:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <RCC_Delay+0x34>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a0a      	ldr	r2, [pc, #40]	; (800420c <RCC_Delay+0x38>)
 80041e2:	fba2 2303 	umull	r2, r3, r2, r3
 80041e6:	0a5b      	lsrs	r3, r3, #9
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	fb02 f303 	mul.w	r3, r2, r3
 80041ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80041f0:	bf00      	nop
  }
  while (Delay --);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1e5a      	subs	r2, r3, #1
 80041f6:	60fa      	str	r2, [r7, #12]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1f9      	bne.n	80041f0 <RCC_Delay+0x1c>
}
 80041fc:	bf00      	nop
 80041fe:	bf00      	nop
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	bc80      	pop	{r7}
 8004206:	4770      	bx	lr
 8004208:	20000000 	.word	0x20000000
 800420c:	10624dd3 	.word	0x10624dd3

08004210 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	2300      	movs	r3, #0
 800421e:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	d07d      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8004230:	2300      	movs	r3, #0
 8004232:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004234:	4b8b      	ldr	r3, [pc, #556]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10d      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004240:	4b88      	ldr	r3, [pc, #544]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	4a87      	ldr	r2, [pc, #540]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800424a:	61d3      	str	r3, [r2, #28]
 800424c:	4b85      	ldr	r3, [pc, #532]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004258:	2301      	movs	r3, #1
 800425a:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800425c:	4b82      	ldr	r3, [pc, #520]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004264:	2b00      	cmp	r3, #0
 8004266:	d118      	bne.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004268:	4b7f      	ldr	r3, [pc, #508]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a7e      	ldr	r2, [pc, #504]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800426e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004272:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004274:	f7fd f9a8 	bl	80015c8 <HAL_GetTick>
 8004278:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800427a:	e008      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800427c:	f7fd f9a4 	bl	80015c8 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b64      	cmp	r3, #100	; 0x64
 8004288:	d901      	bls.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e0e5      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428e:	4b76      	ldr	r3, [pc, #472]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0f0      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800429a:	4b72      	ldr	r3, [pc, #456]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042a2:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d02e      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d027      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042b8:	4b6a      	ldr	r3, [pc, #424]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042c2:	4b6a      	ldr	r3, [pc, #424]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042c8:	4b68      	ldr	r3, [pc, #416]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042ce:	4a65      	ldr	r2, [pc, #404]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d014      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042de:	f7fd f973 	bl	80015c8 <HAL_GetTick>
 80042e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e4:	e00a      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e6:	f7fd f96f 	bl	80015c8 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d901      	bls.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e0ae      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042fc:	4b59      	ldr	r3, [pc, #356]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0ee      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004308:	4b56      	ldr	r3, [pc, #344]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	4953      	ldr	r1, [pc, #332]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004316:	4313      	orrs	r3, r2
 8004318:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800431a:	7efb      	ldrb	r3, [r7, #27]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d105      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004320:	4b50      	ldr	r3, [pc, #320]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	4a4f      	ldr	r2, [pc, #316]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800432a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d008      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004338:	4b4a      	ldr	r3, [pc, #296]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	4947      	ldr	r1, [pc, #284]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004346:	4313      	orrs	r3, r2
 8004348:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b00      	cmp	r3, #0
 8004354:	d008      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004356:	4b43      	ldr	r3, [pc, #268]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	4940      	ldr	r1, [pc, #256]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004364:	4313      	orrs	r3, r2
 8004366:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0308 	and.w	r3, r3, #8
 8004370:	2b00      	cmp	r3, #0
 8004372:	d008      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8004374:	4b3b      	ldr	r3, [pc, #236]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004378:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	4938      	ldr	r1, [pc, #224]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004382:	4313      	orrs	r3, r2
 8004384:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8004386:	4b37      	ldr	r3, [pc, #220]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d105      	bne.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8004392:	4b34      	ldr	r3, [pc, #208]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004396:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 800439e:	2301      	movs	r3, #1
 80043a0:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d148      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 80043a8:	4b2e      	ldr	r3, [pc, #184]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d138      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80043b4:	4b2b      	ldr	r3, [pc, #172]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d009      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 80043c0:	4b28      	ldr	r3, [pc, #160]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d001      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e042      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 80043d4:	4b23      	ldr	r3, [pc, #140]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80043d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	4920      	ldr	r1, [pc, #128]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80043e6:	4b1f      	ldr	r3, [pc, #124]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80043e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ea:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	491c      	ldr	r1, [pc, #112]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 80043f8:	4b1d      	ldr	r3, [pc, #116]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043fa:	2201      	movs	r2, #1
 80043fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fe:	f7fd f8e3 	bl	80015c8 <HAL_GetTick>
 8004402:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004404:	e008      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004406:	f7fd f8df 	bl	80015c8 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b64      	cmp	r3, #100	; 0x64
 8004412:	d901      	bls.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e020      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004418:	4b12      	ldr	r3, [pc, #72]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f0      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004424:	e009      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8004426:	4b0f      	ldr	r3, [pc, #60]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	429a      	cmp	r2, r3
 8004434:	d001      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e00f      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0310 	and.w	r3, r3, #16
 8004442:	2b00      	cmp	r3, #0
 8004444:	d008      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004446:	4b07      	ldr	r3, [pc, #28]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	4904      	ldr	r1, [pc, #16]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004454:	4313      	orrs	r3, r2
 8004456:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3720      	adds	r7, #32
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	40021000 	.word	0x40021000
 8004468:	40007000 	.word	0x40007000
 800446c:	42420440 	.word	0x42420440
 8004470:	42420070 	.word	0x42420070

08004474 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e076      	b.n	8004574 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	2b00      	cmp	r3, #0
 800448c:	d108      	bne.n	80044a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004496:	d009      	beq.n	80044ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	61da      	str	r2, [r3, #28]
 800449e:	e005      	b.n	80044ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d106      	bne.n	80044cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7fc fe8e 	bl	80011e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044f4:	431a      	orrs	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	431a      	orrs	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800451c:	431a      	orrs	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004530:	ea42 0103 	orr.w	r1, r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004538:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	0c1a      	lsrs	r2, r3, #16
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f002 0204 	and.w	r2, r2, #4
 8004552:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	69da      	ldr	r2, [r3, #28]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004562:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3708      	adds	r7, #8
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08c      	sub	sp, #48	; 0x30
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
 8004588:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800458a:	2301      	movs	r3, #1
 800458c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800459a:	2b01      	cmp	r3, #1
 800459c:	d101      	bne.n	80045a2 <HAL_SPI_TransmitReceive+0x26>
 800459e:	2302      	movs	r3, #2
 80045a0:	e18a      	b.n	80048b8 <HAL_SPI_TransmitReceive+0x33c>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045aa:	f7fd f80d 	bl	80015c8 <HAL_GetTick>
 80045ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80045c0:	887b      	ldrh	r3, [r7, #2]
 80045c2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d00f      	beq.n	80045ec <HAL_SPI_TransmitReceive+0x70>
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045d2:	d107      	bne.n	80045e4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d103      	bne.n	80045e4 <HAL_SPI_TransmitReceive+0x68>
 80045dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d003      	beq.n	80045ec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80045e4:	2302      	movs	r3, #2
 80045e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80045ea:	e15b      	b.n	80048a4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d005      	beq.n	80045fe <HAL_SPI_TransmitReceive+0x82>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <HAL_SPI_TransmitReceive+0x82>
 80045f8:	887b      	ldrh	r3, [r7, #2]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d103      	bne.n	8004606 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004604:	e14e      	b.n	80048a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b04      	cmp	r3, #4
 8004610:	d003      	beq.n	800461a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2205      	movs	r2, #5
 8004616:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	887a      	ldrh	r2, [r7, #2]
 800462a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	887a      	ldrh	r2, [r7, #2]
 8004630:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	887a      	ldrh	r2, [r7, #2]
 800463c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	887a      	ldrh	r2, [r7, #2]
 8004642:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465a:	2b40      	cmp	r3, #64	; 0x40
 800465c:	d007      	beq.n	800466e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800466c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004676:	d178      	bne.n	800476a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <HAL_SPI_TransmitReceive+0x10a>
 8004680:	8b7b      	ldrh	r3, [r7, #26]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d166      	bne.n	8004754 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	881a      	ldrh	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	1c9a      	adds	r2, r3, #2
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046aa:	e053      	b.n	8004754 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d11b      	bne.n	80046f2 <HAL_SPI_TransmitReceive+0x176>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046be:	b29b      	uxth	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d016      	beq.n	80046f2 <HAL_SPI_TransmitReceive+0x176>
 80046c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d113      	bne.n	80046f2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ce:	881a      	ldrh	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	1c9a      	adds	r2, r3, #2
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d119      	bne.n	8004734 <HAL_SPI_TransmitReceive+0x1b8>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d014      	beq.n	8004734 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004714:	b292      	uxth	r2, r2
 8004716:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471c:	1c9a      	adds	r2, r3, #2
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004726:	b29b      	uxth	r3, r3
 8004728:	3b01      	subs	r3, #1
 800472a:	b29a      	uxth	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004730:	2301      	movs	r3, #1
 8004732:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004734:	f7fc ff48 	bl	80015c8 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004740:	429a      	cmp	r2, r3
 8004742:	d807      	bhi.n	8004754 <HAL_SPI_TransmitReceive+0x1d8>
 8004744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474a:	d003      	beq.n	8004754 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004752:	e0a7      	b.n	80048a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1a6      	bne.n	80046ac <HAL_SPI_TransmitReceive+0x130>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1a1      	bne.n	80046ac <HAL_SPI_TransmitReceive+0x130>
 8004768:	e07c      	b.n	8004864 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <HAL_SPI_TransmitReceive+0x1fc>
 8004772:	8b7b      	ldrh	r3, [r7, #26]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d16b      	bne.n	8004850 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	330c      	adds	r3, #12
 8004782:	7812      	ldrb	r2, [r2, #0]
 8004784:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478a:	1c5a      	adds	r2, r3, #1
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004794:	b29b      	uxth	r3, r3
 8004796:	3b01      	subs	r3, #1
 8004798:	b29a      	uxth	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800479e:	e057      	b.n	8004850 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d11c      	bne.n	80047e8 <HAL_SPI_TransmitReceive+0x26c>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d017      	beq.n	80047e8 <HAL_SPI_TransmitReceive+0x26c>
 80047b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d114      	bne.n	80047e8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	330c      	adds	r3, #12
 80047c8:	7812      	ldrb	r2, [r2, #0]
 80047ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d0:	1c5a      	adds	r2, r3, #1
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047da:	b29b      	uxth	r3, r3
 80047dc:	3b01      	subs	r3, #1
 80047de:	b29a      	uxth	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d119      	bne.n	800482a <HAL_SPI_TransmitReceive+0x2ae>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d014      	beq.n	800482a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800481c:	b29b      	uxth	r3, r3
 800481e:	3b01      	subs	r3, #1
 8004820:	b29a      	uxth	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004826:	2301      	movs	r3, #1
 8004828:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800482a:	f7fc fecd 	bl	80015c8 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004836:	429a      	cmp	r2, r3
 8004838:	d803      	bhi.n	8004842 <HAL_SPI_TransmitReceive+0x2c6>
 800483a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004840:	d102      	bne.n	8004848 <HAL_SPI_TransmitReceive+0x2cc>
 8004842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004844:	2b00      	cmp	r3, #0
 8004846:	d103      	bne.n	8004850 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800484e:	e029      	b.n	80048a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004854:	b29b      	uxth	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1a2      	bne.n	80047a0 <HAL_SPI_TransmitReceive+0x224>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800485e:	b29b      	uxth	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d19d      	bne.n	80047a0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004866:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 f9b5 	bl	8004bd8 <SPI_EndRxTxTransaction>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d006      	beq.n	8004882 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2220      	movs	r2, #32
 800487e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004880:	e010      	b.n	80048a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10b      	bne.n	80048a2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800488a:	2300      	movs	r3, #0
 800488c:	617b      	str	r3, [r7, #20]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	617b      	str	r3, [r7, #20]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	617b      	str	r3, [r7, #20]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	e000      	b.n	80048a4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80048a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80048b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3730      	adds	r7, #48	; 0x30
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b088      	sub	sp, #32
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	099b      	lsrs	r3, r3, #6
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10f      	bne.n	8004904 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	099b      	lsrs	r3, r3, #6
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d004      	beq.n	8004904 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	4798      	blx	r3
    return;
 8004902:	e0be      	b.n	8004a82 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	085b      	lsrs	r3, r3, #1
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <HAL_SPI_IRQHandler+0x66>
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	09db      	lsrs	r3, r3, #7
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b00      	cmp	r3, #0
 800491a:	d004      	beq.n	8004926 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	4798      	blx	r3
    return;
 8004924:	e0ad      	b.n	8004a82 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	095b      	lsrs	r3, r3, #5
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d106      	bne.n	8004940 <HAL_SPI_IRQHandler+0x80>
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	099b      	lsrs	r3, r3, #6
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 80a1 	beq.w	8004a82 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	095b      	lsrs	r3, r3, #5
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 809a 	beq.w	8004a82 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	099b      	lsrs	r3, r3, #6
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d023      	beq.n	80049a2 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b03      	cmp	r3, #3
 8004964:	d011      	beq.n	800498a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496a:	f043 0204 	orr.w	r2, r3, #4
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004972:	2300      	movs	r3, #0
 8004974:	617b      	str	r3, [r7, #20]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	617b      	str	r3, [r7, #20]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	617b      	str	r3, [r7, #20]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	e00b      	b.n	80049a2 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800498a:	2300      	movs	r3, #0
 800498c:	613b      	str	r3, [r7, #16]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	613b      	str	r3, [r7, #16]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	613b      	str	r3, [r7, #16]
 800499e:	693b      	ldr	r3, [r7, #16]
        return;
 80049a0:	e06f      	b.n	8004a82 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	095b      	lsrs	r3, r3, #5
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d014      	beq.n	80049d8 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b2:	f043 0201 	orr.w	r2, r3, #1
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80049ba:	2300      	movs	r3, #0
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d04f      	beq.n	8004a80 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049ee:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d104      	bne.n	8004a0c <HAL_SPI_IRQHandler+0x14c>
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d034      	beq.n	8004a76 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 0203 	bic.w	r2, r2, #3
 8004a1a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d011      	beq.n	8004a48 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a28:	4a17      	ldr	r2, [pc, #92]	; (8004a88 <HAL_SPI_IRQHandler+0x1c8>)
 8004a2a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fc ff11 	bl	8001858 <HAL_DMA_Abort_IT>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d016      	beq.n	8004a7e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a54:	4a0c      	ldr	r2, [pc, #48]	; (8004a88 <HAL_SPI_IRQHandler+0x1c8>)
 8004a56:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fc fefb 	bl	8001858 <HAL_DMA_Abort_IT>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00a      	beq.n	8004a7e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004a74:	e003      	b.n	8004a7e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f808 	bl	8004a8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004a7c:	e000      	b.n	8004a80 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8004a7e:	bf00      	nop
    return;
 8004a80:	bf00      	nop
  }
}
 8004a82:	3720      	adds	r7, #32
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	08004a9f 	.word	0x08004a9f

08004a8c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bc80      	pop	{r7}
 8004a9c:	4770      	bx	lr

08004a9e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b084      	sub	sp, #16
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f7ff ffe7 	bl	8004a8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004abe:	bf00      	nop
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b088      	sub	sp, #32
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	603b      	str	r3, [r7, #0]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ad8:	f7fc fd76 	bl	80015c8 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae0:	1a9b      	subs	r3, r3, r2
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ae8:	f7fc fd6e 	bl	80015c8 <HAL_GetTick>
 8004aec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004aee:	4b39      	ldr	r3, [pc, #228]	; (8004bd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	015b      	lsls	r3, r3, #5
 8004af4:	0d1b      	lsrs	r3, r3, #20
 8004af6:	69fa      	ldr	r2, [r7, #28]
 8004af8:	fb02 f303 	mul.w	r3, r2, r3
 8004afc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004afe:	e054      	b.n	8004baa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b06:	d050      	beq.n	8004baa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b08:	f7fc fd5e 	bl	80015c8 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	69fa      	ldr	r2, [r7, #28]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d902      	bls.n	8004b1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d13d      	bne.n	8004b9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b36:	d111      	bne.n	8004b5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b40:	d004      	beq.n	8004b4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b4a:	d107      	bne.n	8004b5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b64:	d10f      	bne.n	8004b86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e017      	b.n	8004bca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	bf0c      	ite	eq
 8004bba:	2301      	moveq	r3, #1
 8004bbc:	2300      	movne	r3, #0
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	79fb      	ldrb	r3, [r7, #7]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d19b      	bne.n	8004b00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3720      	adds	r7, #32
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20000000 	.word	0x20000000

08004bd8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af02      	add	r7, sp, #8
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2200      	movs	r2, #0
 8004bec:	2180      	movs	r1, #128	; 0x80
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f7ff ff6a 	bl	8004ac8 <SPI_WaitFlagStateUntilTimeout>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d007      	beq.n	8004c0a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfe:	f043 0220 	orr.w	r2, r3, #32
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e000      	b.n	8004c0c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e041      	b.n	8004caa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d106      	bne.n	8004c40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7fc fb36 	bl	80012ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3304      	adds	r3, #4
 8004c50:	4619      	mov	r1, r3
 8004c52:	4610      	mov	r0, r2
 8004c54:	f000 fa78 	bl	8005148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
	...

08004cb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d001      	beq.n	8004ccc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e03f      	b.n	8004d4c <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0201 	orr.w	r2, r2, #1
 8004ce2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a1b      	ldr	r2, [pc, #108]	; (8004d58 <HAL_TIM_Base_Start_IT+0xa4>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d013      	beq.n	8004d16 <HAL_TIM_Base_Start_IT+0x62>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf6:	d00e      	beq.n	8004d16 <HAL_TIM_Base_Start_IT+0x62>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a17      	ldr	r2, [pc, #92]	; (8004d5c <HAL_TIM_Base_Start_IT+0xa8>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d009      	beq.n	8004d16 <HAL_TIM_Base_Start_IT+0x62>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a16      	ldr	r2, [pc, #88]	; (8004d60 <HAL_TIM_Base_Start_IT+0xac>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d004      	beq.n	8004d16 <HAL_TIM_Base_Start_IT+0x62>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a14      	ldr	r2, [pc, #80]	; (8004d64 <HAL_TIM_Base_Start_IT+0xb0>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d111      	bne.n	8004d3a <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 0307 	and.w	r3, r3, #7
 8004d20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2b06      	cmp	r3, #6
 8004d26:	d010      	beq.n	8004d4a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0201 	orr.w	r2, r2, #1
 8004d36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d38:	e007      	b.n	8004d4a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f042 0201 	orr.w	r2, r2, #1
 8004d48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bc80      	pop	{r7}
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	40012c00 	.word	0x40012c00
 8004d5c:	40000400 	.word	0x40000400
 8004d60:	40000800 	.word	0x40000800
 8004d64:	40000c00 	.word	0x40000c00

08004d68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d122      	bne.n	8004dc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d11b      	bne.n	8004dc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f06f 0202 	mvn.w	r2, #2
 8004d94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	f003 0303 	and.w	r3, r3, #3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f9b1 	bl	8005112 <HAL_TIM_IC_CaptureCallback>
 8004db0:	e005      	b.n	8004dbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f9a4 	bl	8005100 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f9b3 	bl	8005124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	f003 0304 	and.w	r3, r3, #4
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d122      	bne.n	8004e18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b04      	cmp	r3, #4
 8004dde:	d11b      	bne.n	8004e18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f06f 0204 	mvn.w	r2, #4
 8004de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2202      	movs	r2, #2
 8004dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d003      	beq.n	8004e06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f987 	bl	8005112 <HAL_TIM_IC_CaptureCallback>
 8004e04:	e005      	b.n	8004e12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f97a 	bl	8005100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f989 	bl	8005124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	f003 0308 	and.w	r3, r3, #8
 8004e22:	2b08      	cmp	r3, #8
 8004e24:	d122      	bne.n	8004e6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f003 0308 	and.w	r3, r3, #8
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d11b      	bne.n	8004e6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f06f 0208 	mvn.w	r2, #8
 8004e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2204      	movs	r2, #4
 8004e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	f003 0303 	and.w	r3, r3, #3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f95d 	bl	8005112 <HAL_TIM_IC_CaptureCallback>
 8004e58:	e005      	b.n	8004e66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f950 	bl	8005100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f95f 	bl	8005124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f003 0310 	and.w	r3, r3, #16
 8004e76:	2b10      	cmp	r3, #16
 8004e78:	d122      	bne.n	8004ec0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f003 0310 	and.w	r3, r3, #16
 8004e84:	2b10      	cmp	r3, #16
 8004e86:	d11b      	bne.n	8004ec0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f06f 0210 	mvn.w	r2, #16
 8004e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2208      	movs	r2, #8
 8004e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f933 	bl	8005112 <HAL_TIM_IC_CaptureCallback>
 8004eac:	e005      	b.n	8004eba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f926 	bl	8005100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f935 	bl	8005124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d10e      	bne.n	8004eec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d107      	bne.n	8004eec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f06f 0201 	mvn.w	r2, #1
 8004ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7fb fede 	bl	8000ca8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef6:	2b80      	cmp	r3, #128	; 0x80
 8004ef8:	d10e      	bne.n	8004f18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f04:	2b80      	cmp	r3, #128	; 0x80
 8004f06:	d107      	bne.n	8004f18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fa89 	bl	800542a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f22:	2b40      	cmp	r3, #64	; 0x40
 8004f24:	d10e      	bne.n	8004f44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f30:	2b40      	cmp	r3, #64	; 0x40
 8004f32:	d107      	bne.n	8004f44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f8f9 	bl	8005136 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f003 0320 	and.w	r3, r3, #32
 8004f4e:	2b20      	cmp	r3, #32
 8004f50:	d10e      	bne.n	8004f70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f003 0320 	and.w	r3, r3, #32
 8004f5c:	2b20      	cmp	r3, #32
 8004f5e:	d107      	bne.n	8004f70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f06f 0220 	mvn.w	r2, #32
 8004f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fa54 	bl	8005418 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f70:	bf00      	nop
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d101      	bne.n	8004f90 <HAL_TIM_ConfigClockSource+0x18>
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	e0b3      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x180>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fb6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fc8:	d03e      	beq.n	8005048 <HAL_TIM_ConfigClockSource+0xd0>
 8004fca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fce:	f200 8087 	bhi.w	80050e0 <HAL_TIM_ConfigClockSource+0x168>
 8004fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fd6:	f000 8085 	beq.w	80050e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fde:	d87f      	bhi.n	80050e0 <HAL_TIM_ConfigClockSource+0x168>
 8004fe0:	2b70      	cmp	r3, #112	; 0x70
 8004fe2:	d01a      	beq.n	800501a <HAL_TIM_ConfigClockSource+0xa2>
 8004fe4:	2b70      	cmp	r3, #112	; 0x70
 8004fe6:	d87b      	bhi.n	80050e0 <HAL_TIM_ConfigClockSource+0x168>
 8004fe8:	2b60      	cmp	r3, #96	; 0x60
 8004fea:	d050      	beq.n	800508e <HAL_TIM_ConfigClockSource+0x116>
 8004fec:	2b60      	cmp	r3, #96	; 0x60
 8004fee:	d877      	bhi.n	80050e0 <HAL_TIM_ConfigClockSource+0x168>
 8004ff0:	2b50      	cmp	r3, #80	; 0x50
 8004ff2:	d03c      	beq.n	800506e <HAL_TIM_ConfigClockSource+0xf6>
 8004ff4:	2b50      	cmp	r3, #80	; 0x50
 8004ff6:	d873      	bhi.n	80050e0 <HAL_TIM_ConfigClockSource+0x168>
 8004ff8:	2b40      	cmp	r3, #64	; 0x40
 8004ffa:	d058      	beq.n	80050ae <HAL_TIM_ConfigClockSource+0x136>
 8004ffc:	2b40      	cmp	r3, #64	; 0x40
 8004ffe:	d86f      	bhi.n	80050e0 <HAL_TIM_ConfigClockSource+0x168>
 8005000:	2b30      	cmp	r3, #48	; 0x30
 8005002:	d064      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0x156>
 8005004:	2b30      	cmp	r3, #48	; 0x30
 8005006:	d86b      	bhi.n	80050e0 <HAL_TIM_ConfigClockSource+0x168>
 8005008:	2b20      	cmp	r3, #32
 800500a:	d060      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0x156>
 800500c:	2b20      	cmp	r3, #32
 800500e:	d867      	bhi.n	80050e0 <HAL_TIM_ConfigClockSource+0x168>
 8005010:	2b00      	cmp	r3, #0
 8005012:	d05c      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0x156>
 8005014:	2b10      	cmp	r3, #16
 8005016:	d05a      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005018:	e062      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6818      	ldr	r0, [r3, #0]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	6899      	ldr	r1, [r3, #8]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	f000 f970 	bl	800530e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800503c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	609a      	str	r2, [r3, #8]
      break;
 8005046:	e04e      	b.n	80050e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6818      	ldr	r0, [r3, #0]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	6899      	ldr	r1, [r3, #8]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f000 f959 	bl	800530e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689a      	ldr	r2, [r3, #8]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800506a:	609a      	str	r2, [r3, #8]
      break;
 800506c:	e03b      	b.n	80050e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6818      	ldr	r0, [r3, #0]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	6859      	ldr	r1, [r3, #4]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	461a      	mov	r2, r3
 800507c:	f000 f8d0 	bl	8005220 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2150      	movs	r1, #80	; 0x50
 8005086:	4618      	mov	r0, r3
 8005088:	f000 f927 	bl	80052da <TIM_ITRx_SetConfig>
      break;
 800508c:	e02b      	b.n	80050e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6818      	ldr	r0, [r3, #0]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	6859      	ldr	r1, [r3, #4]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	461a      	mov	r2, r3
 800509c:	f000 f8ee 	bl	800527c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2160      	movs	r1, #96	; 0x60
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 f917 	bl	80052da <TIM_ITRx_SetConfig>
      break;
 80050ac:	e01b      	b.n	80050e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6818      	ldr	r0, [r3, #0]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	6859      	ldr	r1, [r3, #4]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	461a      	mov	r2, r3
 80050bc:	f000 f8b0 	bl	8005220 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2140      	movs	r1, #64	; 0x40
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 f907 	bl	80052da <TIM_ITRx_SetConfig>
      break;
 80050cc:	e00b      	b.n	80050e6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4619      	mov	r1, r3
 80050d8:	4610      	mov	r0, r2
 80050da:	f000 f8fe 	bl	80052da <TIM_ITRx_SetConfig>
        break;
 80050de:	e002      	b.n	80050e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80050e0:	bf00      	nop
 80050e2:	e000      	b.n	80050e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80050e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	bc80      	pop	{r7}
 8005110:	4770      	bx	lr

08005112 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005112:	b480      	push	{r7}
 8005114:	b083      	sub	sp, #12
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	bc80      	pop	{r7}
 8005122:	4770      	bx	lr

08005124 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	bc80      	pop	{r7}
 8005134:	4770      	bx	lr

08005136 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	bc80      	pop	{r7}
 8005146:	4770      	bx	lr

08005148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a2d      	ldr	r2, [pc, #180]	; (8005210 <TIM_Base_SetConfig+0xc8>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d00f      	beq.n	8005180 <TIM_Base_SetConfig+0x38>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005166:	d00b      	beq.n	8005180 <TIM_Base_SetConfig+0x38>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a2a      	ldr	r2, [pc, #168]	; (8005214 <TIM_Base_SetConfig+0xcc>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d007      	beq.n	8005180 <TIM_Base_SetConfig+0x38>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a29      	ldr	r2, [pc, #164]	; (8005218 <TIM_Base_SetConfig+0xd0>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d003      	beq.n	8005180 <TIM_Base_SetConfig+0x38>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a28      	ldr	r2, [pc, #160]	; (800521c <TIM_Base_SetConfig+0xd4>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d108      	bne.n	8005192 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	4313      	orrs	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a1e      	ldr	r2, [pc, #120]	; (8005210 <TIM_Base_SetConfig+0xc8>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d00f      	beq.n	80051ba <TIM_Base_SetConfig+0x72>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a0:	d00b      	beq.n	80051ba <TIM_Base_SetConfig+0x72>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a1b      	ldr	r2, [pc, #108]	; (8005214 <TIM_Base_SetConfig+0xcc>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d007      	beq.n	80051ba <TIM_Base_SetConfig+0x72>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a1a      	ldr	r2, [pc, #104]	; (8005218 <TIM_Base_SetConfig+0xd0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d003      	beq.n	80051ba <TIM_Base_SetConfig+0x72>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a19      	ldr	r2, [pc, #100]	; (800521c <TIM_Base_SetConfig+0xd4>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d108      	bne.n	80051cc <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a07      	ldr	r2, [pc, #28]	; (8005210 <TIM_Base_SetConfig+0xc8>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d103      	bne.n	8005200 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	691a      	ldr	r2, [r3, #16]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	615a      	str	r2, [r3, #20]
}
 8005206:	bf00      	nop
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	bc80      	pop	{r7}
 800520e:	4770      	bx	lr
 8005210:	40012c00 	.word	0x40012c00
 8005214:	40000400 	.word	0x40000400
 8005218:	40000800 	.word	0x40000800
 800521c:	40000c00 	.word	0x40000c00

08005220 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005220:	b480      	push	{r7}
 8005222:	b087      	sub	sp, #28
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	f023 0201 	bic.w	r2, r3, #1
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800524a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	011b      	lsls	r3, r3, #4
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	4313      	orrs	r3, r2
 8005254:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f023 030a 	bic.w	r3, r3, #10
 800525c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	4313      	orrs	r3, r2
 8005264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	621a      	str	r2, [r3, #32]
}
 8005272:	bf00      	nop
 8005274:	371c      	adds	r7, #28
 8005276:	46bd      	mov	sp, r7
 8005278:	bc80      	pop	{r7}
 800527a:	4770      	bx	lr

0800527c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	f023 0210 	bic.w	r2, r3, #16
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	031b      	lsls	r3, r3, #12
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	621a      	str	r2, [r3, #32]
}
 80052d0:	bf00      	nop
 80052d2:	371c      	adds	r7, #28
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bc80      	pop	{r7}
 80052d8:	4770      	bx	lr

080052da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052da:	b480      	push	{r7}
 80052dc:	b085      	sub	sp, #20
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	f043 0307 	orr.w	r3, r3, #7
 80052fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	609a      	str	r2, [r3, #8]
}
 8005304:	bf00      	nop
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	bc80      	pop	{r7}
 800530c:	4770      	bx	lr

0800530e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800530e:	b480      	push	{r7}
 8005310:	b087      	sub	sp, #28
 8005312:	af00      	add	r7, sp, #0
 8005314:	60f8      	str	r0, [r7, #12]
 8005316:	60b9      	str	r1, [r7, #8]
 8005318:	607a      	str	r2, [r7, #4]
 800531a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005328:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	021a      	lsls	r2, r3, #8
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	431a      	orrs	r2, r3
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	4313      	orrs	r3, r2
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4313      	orrs	r3, r2
 800533a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	609a      	str	r2, [r3, #8]
}
 8005342:	bf00      	nop
 8005344:	371c      	adds	r7, #28
 8005346:	46bd      	mov	sp, r7
 8005348:	bc80      	pop	{r7}
 800534a:	4770      	bx	lr

0800534c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800535c:	2b01      	cmp	r3, #1
 800535e:	d101      	bne.n	8005364 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005360:	2302      	movs	r3, #2
 8005362:	e04b      	b.n	80053fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	4313      	orrs	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a19      	ldr	r2, [pc, #100]	; (8005408 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d013      	beq.n	80053d0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b0:	d00e      	beq.n	80053d0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a15      	ldr	r2, [pc, #84]	; (800540c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d009      	beq.n	80053d0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a13      	ldr	r2, [pc, #76]	; (8005410 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d004      	beq.n	80053d0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a12      	ldr	r2, [pc, #72]	; (8005414 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d10c      	bne.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	4313      	orrs	r3, r2
 80053e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	bc80      	pop	{r7}
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	40012c00 	.word	0x40012c00
 800540c:	40000400 	.word	0x40000400
 8005410:	40000800 	.word	0x40000800
 8005414:	40000c00 	.word	0x40000c00

08005418 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	bc80      	pop	{r7}
 8005428:	4770      	bx	lr

0800542a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005432:	bf00      	nop
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	bc80      	pop	{r7}
 800543a:	4770      	bx	lr

0800543c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e03f      	b.n	80054ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d106      	bne.n	8005468 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7fb ff3e 	bl	80012e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2224      	movs	r2, #36	; 0x24
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68da      	ldr	r2, [r3, #12]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800547e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fc1d 	bl	8005cc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	691a      	ldr	r2, [r3, #16]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005494:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	695a      	ldr	r2, [r3, #20]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68da      	ldr	r2, [r3, #12]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2220      	movs	r2, #32
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2220      	movs	r2, #32
 80054c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b08a      	sub	sp, #40	; 0x28
 80054da:	af02      	add	r7, sp, #8
 80054dc:	60f8      	str	r0, [r7, #12]
 80054de:	60b9      	str	r1, [r7, #8]
 80054e0:	603b      	str	r3, [r7, #0]
 80054e2:	4613      	mov	r3, r2
 80054e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054e6:	2300      	movs	r3, #0
 80054e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b20      	cmp	r3, #32
 80054f4:	d17c      	bne.n	80055f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <HAL_UART_Transmit+0x2c>
 80054fc:	88fb      	ldrh	r3, [r7, #6]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e075      	b.n	80055f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800550c:	2b01      	cmp	r3, #1
 800550e:	d101      	bne.n	8005514 <HAL_UART_Transmit+0x3e>
 8005510:	2302      	movs	r3, #2
 8005512:	e06e      	b.n	80055f2 <HAL_UART_Transmit+0x11c>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2221      	movs	r2, #33	; 0x21
 8005526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800552a:	f7fc f84d 	bl	80015c8 <HAL_GetTick>
 800552e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	88fa      	ldrh	r2, [r7, #6]
 8005534:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	88fa      	ldrh	r2, [r7, #6]
 800553a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005544:	d108      	bne.n	8005558 <HAL_UART_Transmit+0x82>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d104      	bne.n	8005558 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800554e:	2300      	movs	r3, #0
 8005550:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	61bb      	str	r3, [r7, #24]
 8005556:	e003      	b.n	8005560 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800555c:	2300      	movs	r3, #0
 800555e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005568:	e02a      	b.n	80055c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2200      	movs	r2, #0
 8005572:	2180      	movs	r1, #128	; 0x80
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 fa08 	bl	800598a <UART_WaitOnFlagUntilTimeout>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e036      	b.n	80055f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10b      	bne.n	80055a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	881b      	ldrh	r3, [r3, #0]
 800558e:	461a      	mov	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005598:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	3302      	adds	r3, #2
 800559e:	61bb      	str	r3, [r7, #24]
 80055a0:	e007      	b.n	80055b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	781a      	ldrb	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	3301      	adds	r3, #1
 80055b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1cf      	bne.n	800556a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2200      	movs	r2, #0
 80055d2:	2140      	movs	r1, #64	; 0x40
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 f9d8 	bl	800598a <UART_WaitOnFlagUntilTimeout>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d001      	beq.n	80055e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e006      	b.n	80055f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	e000      	b.n	80055f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80055f0:	2302      	movs	r3, #2
  }
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3720      	adds	r7, #32
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
	...

080055fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b08a      	sub	sp, #40	; 0x28
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800561c:	2300      	movs	r3, #0
 800561e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005620:	2300      	movs	r3, #0
 8005622:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	f003 030f 	and.w	r3, r3, #15
 800562a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10d      	bne.n	800564e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	f003 0320 	and.w	r3, r3, #32
 8005638:	2b00      	cmp	r3, #0
 800563a:	d008      	beq.n	800564e <HAL_UART_IRQHandler+0x52>
 800563c:	6a3b      	ldr	r3, [r7, #32]
 800563e:	f003 0320 	and.w	r3, r3, #32
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 fa90 	bl	8005b6c <UART_Receive_IT>
      return;
 800564c:	e17b      	b.n	8005946 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 80b1 	beq.w	80057b8 <HAL_UART_IRQHandler+0x1bc>
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b00      	cmp	r3, #0
 800565e:	d105      	bne.n	800566c <HAL_UART_IRQHandler+0x70>
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 80a6 	beq.w	80057b8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <HAL_UART_IRQHandler+0x90>
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567c:	2b00      	cmp	r3, #0
 800567e:	d005      	beq.n	800568c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005684:	f043 0201 	orr.w	r2, r3, #1
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	f003 0304 	and.w	r3, r3, #4
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00a      	beq.n	80056ac <HAL_UART_IRQHandler+0xb0>
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b00      	cmp	r3, #0
 800569e:	d005      	beq.n	80056ac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a4:	f043 0202 	orr.w	r2, r3, #2
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00a      	beq.n	80056cc <HAL_UART_IRQHandler+0xd0>
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d005      	beq.n	80056cc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c4:	f043 0204 	orr.w	r2, r3, #4
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	f003 0308 	and.w	r3, r3, #8
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00f      	beq.n	80056f6 <HAL_UART_IRQHandler+0xfa>
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	f003 0320 	and.w	r3, r3, #32
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d104      	bne.n	80056ea <HAL_UART_IRQHandler+0xee>
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d005      	beq.n	80056f6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	f043 0208 	orr.w	r2, r3, #8
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 811e 	beq.w	800593c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	f003 0320 	and.w	r3, r3, #32
 8005706:	2b00      	cmp	r3, #0
 8005708:	d007      	beq.n	800571a <HAL_UART_IRQHandler+0x11e>
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	f003 0320 	and.w	r3, r3, #32
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fa29 	bl	8005b6c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005724:	2b00      	cmp	r3, #0
 8005726:	bf14      	ite	ne
 8005728:	2301      	movne	r3, #1
 800572a:	2300      	moveq	r3, #0
 800572c:	b2db      	uxtb	r3, r3
 800572e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005734:	f003 0308 	and.w	r3, r3, #8
 8005738:	2b00      	cmp	r3, #0
 800573a:	d102      	bne.n	8005742 <HAL_UART_IRQHandler+0x146>
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d031      	beq.n	80057a6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f96b 	bl	8005a1e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005752:	2b00      	cmp	r3, #0
 8005754:	d023      	beq.n	800579e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	695a      	ldr	r2, [r3, #20]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005764:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576a:	2b00      	cmp	r3, #0
 800576c:	d013      	beq.n	8005796 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005772:	4a76      	ldr	r2, [pc, #472]	; (800594c <HAL_UART_IRQHandler+0x350>)
 8005774:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577a:	4618      	mov	r0, r3
 800577c:	f7fc f86c 	bl	8001858 <HAL_DMA_Abort_IT>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d016      	beq.n	80057b4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005790:	4610      	mov	r0, r2
 8005792:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005794:	e00e      	b.n	80057b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f8e3 	bl	8005962 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800579c:	e00a      	b.n	80057b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f8df 	bl	8005962 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a4:	e006      	b.n	80057b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f8db 	bl	8005962 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80057b2:	e0c3      	b.n	800593c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b4:	bf00      	nop
    return;
 80057b6:	e0c1      	b.n	800593c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057bc:	2b01      	cmp	r3, #1
 80057be:	f040 80a1 	bne.w	8005904 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c4:	f003 0310 	and.w	r3, r3, #16
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 809b 	beq.w	8005904 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	f003 0310 	and.w	r3, r3, #16
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 8095 	beq.w	8005904 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057da:	2300      	movs	r3, #0
 80057dc:	60fb      	str	r3, [r7, #12]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	60fb      	str	r3, [r7, #12]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	60fb      	str	r3, [r7, #12]
 80057ee:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d04e      	beq.n	800589c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005808:	8a3b      	ldrh	r3, [r7, #16]
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 8098 	beq.w	8005940 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005814:	8a3a      	ldrh	r2, [r7, #16]
 8005816:	429a      	cmp	r2, r3
 8005818:	f080 8092 	bcs.w	8005940 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	8a3a      	ldrh	r2, [r7, #16]
 8005820:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	2b20      	cmp	r3, #32
 800582a:	d02b      	beq.n	8005884 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800583a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695a      	ldr	r2, [r3, #20]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0201 	bic.w	r2, r2, #1
 800584a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	695a      	ldr	r2, [r3, #20]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800585a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2220      	movs	r2, #32
 8005860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68da      	ldr	r2, [r3, #12]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0210 	bic.w	r2, r2, #16
 8005878:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587e:	4618      	mov	r0, r3
 8005880:	f7fb ffaf 	bl	80017e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800588c:	b29b      	uxth	r3, r3
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	b29b      	uxth	r3, r3
 8005892:	4619      	mov	r1, r3
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f86d 	bl	8005974 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800589a:	e051      	b.n	8005940 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d047      	beq.n	8005944 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80058b4:	8a7b      	ldrh	r3, [r7, #18]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d044      	beq.n	8005944 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68da      	ldr	r2, [r3, #12]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80058c8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	695a      	ldr	r2, [r3, #20]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 0201 	bic.w	r2, r2, #1
 80058d8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2220      	movs	r2, #32
 80058de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68da      	ldr	r2, [r3, #12]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0210 	bic.w	r2, r2, #16
 80058f6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058f8:	8a7b      	ldrh	r3, [r7, #18]
 80058fa:	4619      	mov	r1, r3
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f839 	bl	8005974 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005902:	e01f      	b.n	8005944 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590a:	2b00      	cmp	r3, #0
 800590c:	d008      	beq.n	8005920 <HAL_UART_IRQHandler+0x324>
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005914:	2b00      	cmp	r3, #0
 8005916:	d003      	beq.n	8005920 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f8c0 	bl	8005a9e <UART_Transmit_IT>
    return;
 800591e:	e012      	b.n	8005946 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00d      	beq.n	8005946 <HAL_UART_IRQHandler+0x34a>
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005930:	2b00      	cmp	r3, #0
 8005932:	d008      	beq.n	8005946 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f901 	bl	8005b3c <UART_EndTransmit_IT>
    return;
 800593a:	e004      	b.n	8005946 <HAL_UART_IRQHandler+0x34a>
    return;
 800593c:	bf00      	nop
 800593e:	e002      	b.n	8005946 <HAL_UART_IRQHandler+0x34a>
      return;
 8005940:	bf00      	nop
 8005942:	e000      	b.n	8005946 <HAL_UART_IRQHandler+0x34a>
      return;
 8005944:	bf00      	nop
  }
}
 8005946:	3728      	adds	r7, #40	; 0x28
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	08005a77 	.word	0x08005a77

08005950 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	bc80      	pop	{r7}
 8005960:	4770      	bx	lr

08005962 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005962:	b480      	push	{r7}
 8005964:	b083      	sub	sp, #12
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	bc80      	pop	{r7}
 8005972:	4770      	bx	lr

08005974 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	460b      	mov	r3, r1
 800597e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	bc80      	pop	{r7}
 8005988:	4770      	bx	lr

0800598a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b084      	sub	sp, #16
 800598e:	af00      	add	r7, sp, #0
 8005990:	60f8      	str	r0, [r7, #12]
 8005992:	60b9      	str	r1, [r7, #8]
 8005994:	603b      	str	r3, [r7, #0]
 8005996:	4613      	mov	r3, r2
 8005998:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800599a:	e02c      	b.n	80059f6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a2:	d028      	beq.n	80059f6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d007      	beq.n	80059ba <UART_WaitOnFlagUntilTimeout+0x30>
 80059aa:	f7fb fe0d 	bl	80015c8 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d21d      	bcs.n	80059f6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68da      	ldr	r2, [r3, #12]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80059c8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	695a      	ldr	r2, [r3, #20]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 0201 	bic.w	r2, r2, #1
 80059d8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2220      	movs	r2, #32
 80059de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2220      	movs	r2, #32
 80059e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e00f      	b.n	8005a16 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4013      	ands	r3, r2
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	bf0c      	ite	eq
 8005a06:	2301      	moveq	r3, #1
 8005a08:	2300      	movne	r3, #0
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	79fb      	ldrb	r3, [r7, #7]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d0c3      	beq.n	800599c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b083      	sub	sp, #12
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a34:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	695a      	ldr	r2, [r3, #20]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0201 	bic.w	r2, r2, #1
 8005a44:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d107      	bne.n	8005a5e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68da      	ldr	r2, [r3, #12]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0210 	bic.w	r2, r2, #16
 8005a5c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2220      	movs	r2, #32
 8005a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bc80      	pop	{r7}
 8005a74:	4770      	bx	lr

08005a76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b084      	sub	sp, #16
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f7ff ff66 	bl	8005962 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a96:	bf00      	nop
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b085      	sub	sp, #20
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b21      	cmp	r3, #33	; 0x21
 8005ab0:	d13e      	bne.n	8005b30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aba:	d114      	bne.n	8005ae6 <UART_Transmit_IT+0x48>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d110      	bne.n	8005ae6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	881b      	ldrh	r3, [r3, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ad8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	1c9a      	adds	r2, r3, #2
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	621a      	str	r2, [r3, #32]
 8005ae4:	e008      	b.n	8005af8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	1c59      	adds	r1, r3, #1
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6211      	str	r1, [r2, #32]
 8005af0:	781a      	ldrb	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	3b01      	subs	r3, #1
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	4619      	mov	r1, r3
 8005b06:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10f      	bne.n	8005b2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68da      	ldr	r2, [r3, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68da      	ldr	r2, [r3, #12]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	e000      	b.n	8005b32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b30:	2302      	movs	r3, #2
  }
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bc80      	pop	{r7}
 8005b3a:	4770      	bx	lr

08005b3c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b52:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2220      	movs	r2, #32
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7ff fef7 	bl	8005950 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b22      	cmp	r3, #34	; 0x22
 8005b7e:	f040 8099 	bne.w	8005cb4 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b8a:	d117      	bne.n	8005bbc <UART_Receive_IT+0x50>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d113      	bne.n	8005bbc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b94:	2300      	movs	r3, #0
 8005b96:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb4:	1c9a      	adds	r2, r3, #2
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	629a      	str	r2, [r3, #40]	; 0x28
 8005bba:	e026      	b.n	8005c0a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc0:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bce:	d007      	beq.n	8005be0 <UART_Receive_IT+0x74>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10a      	bne.n	8005bee <UART_Receive_IT+0x82>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d106      	bne.n	8005bee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	701a      	strb	r2, [r3, #0]
 8005bec:	e008      	b.n	8005c00 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	3b01      	subs	r3, #1
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	4619      	mov	r1, r3
 8005c18:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d148      	bne.n	8005cb0 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68da      	ldr	r2, [r3, #12]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 0220 	bic.w	r2, r2, #32
 8005c2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68da      	ldr	r2, [r3, #12]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	695a      	ldr	r2, [r3, #20]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0201 	bic.w	r2, r2, #1
 8005c4c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2220      	movs	r2, #32
 8005c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d123      	bne.n	8005ca6 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68da      	ldr	r2, [r3, #12]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 0210 	bic.w	r2, r2, #16
 8005c72:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0310 	and.w	r3, r3, #16
 8005c7e:	2b10      	cmp	r3, #16
 8005c80:	d10a      	bne.n	8005c98 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c82:	2300      	movs	r3, #0
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	60fb      	str	r3, [r7, #12]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7ff fe68 	bl	8005974 <HAL_UARTEx_RxEventCallback>
 8005ca4:	e002      	b.n	8005cac <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7fa ff28 	bl	8000afc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005cac:	2300      	movs	r3, #0
 8005cae:	e002      	b.n	8005cb6 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	e000      	b.n	8005cb6 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005cb4:	2302      	movs	r3, #2
  }
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
	...

08005cc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	689a      	ldr	r2, [r3, #8]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005cfa:	f023 030c 	bic.w	r3, r3, #12
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	6812      	ldr	r2, [r2, #0]
 8005d02:	68b9      	ldr	r1, [r7, #8]
 8005d04:	430b      	orrs	r3, r1
 8005d06:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	699a      	ldr	r2, [r3, #24]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a2c      	ldr	r2, [pc, #176]	; (8005dd4 <UART_SetConfig+0x114>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d103      	bne.n	8005d30 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005d28:	f7fe fa10 	bl	800414c <HAL_RCC_GetPCLK2Freq>
 8005d2c:	60f8      	str	r0, [r7, #12]
 8005d2e:	e002      	b.n	8005d36 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005d30:	f7fe f9f8 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 8005d34:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	009a      	lsls	r2, r3, #2
 8005d40:	441a      	add	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4c:	4a22      	ldr	r2, [pc, #136]	; (8005dd8 <UART_SetConfig+0x118>)
 8005d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d52:	095b      	lsrs	r3, r3, #5
 8005d54:	0119      	lsls	r1, r3, #4
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4413      	add	r3, r2
 8005d5e:	009a      	lsls	r2, r3, #2
 8005d60:	441a      	add	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d6c:	4b1a      	ldr	r3, [pc, #104]	; (8005dd8 <UART_SetConfig+0x118>)
 8005d6e:	fba3 0302 	umull	r0, r3, r3, r2
 8005d72:	095b      	lsrs	r3, r3, #5
 8005d74:	2064      	movs	r0, #100	; 0x64
 8005d76:	fb00 f303 	mul.w	r3, r0, r3
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	011b      	lsls	r3, r3, #4
 8005d7e:	3332      	adds	r3, #50	; 0x32
 8005d80:	4a15      	ldr	r2, [pc, #84]	; (8005dd8 <UART_SetConfig+0x118>)
 8005d82:	fba2 2303 	umull	r2, r3, r2, r3
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d8c:	4419      	add	r1, r3
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	4613      	mov	r3, r2
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4413      	add	r3, r2
 8005d96:	009a      	lsls	r2, r3, #2
 8005d98:	441a      	add	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005da4:	4b0c      	ldr	r3, [pc, #48]	; (8005dd8 <UART_SetConfig+0x118>)
 8005da6:	fba3 0302 	umull	r0, r3, r3, r2
 8005daa:	095b      	lsrs	r3, r3, #5
 8005dac:	2064      	movs	r0, #100	; 0x64
 8005dae:	fb00 f303 	mul.w	r3, r0, r3
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	011b      	lsls	r3, r3, #4
 8005db6:	3332      	adds	r3, #50	; 0x32
 8005db8:	4a07      	ldr	r2, [pc, #28]	; (8005dd8 <UART_SetConfig+0x118>)
 8005dba:	fba2 2303 	umull	r2, r3, r2, r3
 8005dbe:	095b      	lsrs	r3, r3, #5
 8005dc0:	f003 020f 	and.w	r2, r3, #15
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	440a      	add	r2, r1
 8005dca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005dcc:	bf00      	nop
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	40013800 	.word	0x40013800
 8005dd8:	51eb851f 	.word	0x51eb851f

08005ddc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ddc:	b084      	sub	sp, #16
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b084      	sub	sp, #16
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	f107 001c 	add.w	r0, r7, #28
 8005dea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f970 	bl	80060e0 <USB_CoreReset>
 8005e00:	4603      	mov	r3, r0
 8005e02:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	639a      	str	r2, [r3, #56]	; 0x38

  return ret;
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e1c:	b004      	add	sp, #16
 8005e1e:	4770      	bx	lr

08005e20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f043 0201 	orr.w	r2, r3, #1
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bc80      	pop	{r7}
 8005e3e:	4770      	bx	lr

08005e40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f023 0201 	bic.w	r2, r3, #1
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bc80      	pop	{r7}
 8005e5e:	4770      	bx	lr

08005e60 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e7c:	78fb      	ldrb	r3, [r7, #3]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d115      	bne.n	8005eae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e8e:	2001      	movs	r0, #1
 8005e90:	f7fb fba4 	bl	80015dc <HAL_Delay>
      ms++;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	3301      	adds	r3, #1
 8005e98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f912 	bl	80060c4 <USB_GetMode>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d01e      	beq.n	8005ee4 <USB_SetCurrentMode+0x84>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b31      	cmp	r3, #49	; 0x31
 8005eaa:	d9f0      	bls.n	8005e8e <USB_SetCurrentMode+0x2e>
 8005eac:	e01a      	b.n	8005ee4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005eae:	78fb      	ldrb	r3, [r7, #3]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d115      	bne.n	8005ee0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ec0:	2001      	movs	r0, #1
 8005ec2:	f7fb fb8b 	bl	80015dc <HAL_Delay>
      ms++;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 f8f9 	bl	80060c4 <USB_GetMode>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d005      	beq.n	8005ee4 <USB_SetCurrentMode+0x84>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2b31      	cmp	r3, #49	; 0x31
 8005edc:	d9f0      	bls.n	8005ec0 <USB_SetCurrentMode+0x60>
 8005ede:	e001      	b.n	8005ee4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e005      	b.n	8005ef0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b32      	cmp	r3, #50	; 0x32
 8005ee8:	d101      	bne.n	8005eee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e000      	b.n	8005ef0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005f02:	2300      	movs	r3, #0
 8005f04:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	019b      	lsls	r3, r3, #6
 8005f0a:	f043 0220 	orr.w	r2, r3, #32
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	3301      	adds	r3, #1
 8005f16:	60fb      	str	r3, [r7, #12]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4a08      	ldr	r2, [pc, #32]	; (8005f3c <USB_FlushTxFifo+0x44>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d901      	bls.n	8005f24 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e006      	b.n	8005f32 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	f003 0320 	and.w	r3, r3, #32
 8005f2c:	2b20      	cmp	r3, #32
 8005f2e:	d0f0      	beq.n	8005f12 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3714      	adds	r7, #20
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bc80      	pop	{r7}
 8005f3a:	4770      	bx	lr
 8005f3c:	00030d40 	.word	0x00030d40

08005f40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2210      	movs	r2, #16
 8005f50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	3301      	adds	r3, #1
 8005f56:	60fb      	str	r3, [r7, #12]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4a08      	ldr	r2, [pc, #32]	; (8005f7c <USB_FlushRxFifo+0x3c>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d901      	bls.n	8005f64 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e006      	b.n	8005f72 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	f003 0310 	and.w	r3, r3, #16
 8005f6c:	2b10      	cmp	r3, #16
 8005f6e:	d0f0      	beq.n	8005f52 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bc80      	pop	{r7}
 8005f7a:	4770      	bx	lr
 8005f7c:	00030d40 	.word	0x00030d40

08005f80 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b089      	sub	sp, #36	; 0x24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	460b      	mov	r3, r1
 8005f90:	71fb      	strb	r3, [r7, #7]
 8005f92:	4613      	mov	r3, r2
 8005f94:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005f9e:	88bb      	ldrh	r3, [r7, #4]
 8005fa0:	3303      	adds	r3, #3
 8005fa2:	089b      	lsrs	r3, r3, #2
 8005fa4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	61bb      	str	r3, [r7, #24]
 8005faa:	e018      	b.n	8005fde <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005fac:	79fb      	ldrb	r3, [r7, #7]
 8005fae:	031a      	lsls	r2, r3, #12
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fb8:	461a      	mov	r2, r3
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	61bb      	str	r3, [r7, #24]
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d3e2      	bcc.n	8005fac <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3724      	adds	r7, #36	; 0x24
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bc80      	pop	{r7}
 8005ff0:	4770      	bx	lr

08005ff2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b08b      	sub	sp, #44	; 0x2c
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	60f8      	str	r0, [r7, #12]
 8005ffa:	60b9      	str	r1, [r7, #8]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006008:	88fb      	ldrh	r3, [r7, #6]
 800600a:	089b      	lsrs	r3, r3, #2
 800600c:	b29b      	uxth	r3, r3
 800600e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006010:	88fb      	ldrh	r3, [r7, #6]
 8006012:	f003 0303 	and.w	r3, r3, #3
 8006016:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006018:	2300      	movs	r3, #0
 800601a:	623b      	str	r3, [r7, #32]
 800601c:	e014      	b.n	8006048 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	601a      	str	r2, [r3, #0]
    pDest++;
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	3301      	adds	r3, #1
 800602e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	3301      	adds	r3, #1
 8006034:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006038:	3301      	adds	r3, #1
 800603a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603e:	3301      	adds	r3, #1
 8006040:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006042:	6a3b      	ldr	r3, [r7, #32]
 8006044:	3301      	adds	r3, #1
 8006046:	623b      	str	r3, [r7, #32]
 8006048:	6a3a      	ldr	r2, [r7, #32]
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	429a      	cmp	r2, r3
 800604e:	d3e6      	bcc.n	800601e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006050:	8bfb      	ldrh	r3, [r7, #30]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d01e      	beq.n	8006094 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006060:	461a      	mov	r2, r3
 8006062:	f107 0310 	add.w	r3, r7, #16
 8006066:	6812      	ldr	r2, [r2, #0]
 8006068:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	b2db      	uxtb	r3, r3
 8006070:	00db      	lsls	r3, r3, #3
 8006072:	fa22 f303 	lsr.w	r3, r2, r3
 8006076:	b2da      	uxtb	r2, r3
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	701a      	strb	r2, [r3, #0]
      i++;
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	3301      	adds	r3, #1
 8006080:	623b      	str	r3, [r7, #32]
      pDest++;
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	3301      	adds	r3, #1
 8006086:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006088:	8bfb      	ldrh	r3, [r7, #30]
 800608a:	3b01      	subs	r3, #1
 800608c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800608e:	8bfb      	ldrh	r3, [r7, #30]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1ea      	bne.n	800606a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006096:	4618      	mov	r0, r3
 8006098:	372c      	adds	r7, #44	; 0x2c
 800609a:	46bd      	mov	sp, r7
 800609c:	bc80      	pop	{r7}
 800609e:	4770      	bx	lr

080060a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	4013      	ands	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80060b8:	68fb      	ldr	r3, [r7, #12]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	bc80      	pop	{r7}
 80060c2:	4770      	bx	lr

080060c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	f003 0301 	and.w	r3, r3, #1
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	bc80      	pop	{r7}
 80060dc:	4770      	bx	lr
	...

080060e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80060e8:	2300      	movs	r3, #0
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	3301      	adds	r3, #1
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	4a12      	ldr	r2, [pc, #72]	; (8006140 <USB_CoreReset+0x60>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d901      	bls.n	80060fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e01b      	b.n	8006136 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	2b00      	cmp	r3, #0
 8006104:	daf2      	bge.n	80060ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006106:	2300      	movs	r3, #0
 8006108:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	f043 0201 	orr.w	r2, r3, #1
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3301      	adds	r3, #1
 800611a:	60fb      	str	r3, [r7, #12]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4a08      	ldr	r2, [pc, #32]	; (8006140 <USB_CoreReset+0x60>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d901      	bls.n	8006128 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e006      	b.n	8006136 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	2b01      	cmp	r3, #1
 8006132:	d0f0      	beq.n	8006116 <USB_CoreReset+0x36>

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	bc80      	pop	{r7}
 800613e:	4770      	bx	lr
 8006140:	00030d40 	.word	0x00030d40

08006144 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006144:	b084      	sub	sp, #16
 8006146:	b580      	push	{r7, lr}
 8006148:	b084      	sub	sp, #16
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
 800614e:	f107 001c 	add.w	r0, r7, #28
 8006152:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006160:	461a      	mov	r2, r3
 8006162:	2300      	movs	r3, #0
 8006164:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSASEN);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSBSEN);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006176:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800618c:	f023 0304 	bic.w	r3, r3, #4
 8006190:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006192:	2110      	movs	r1, #16
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f7ff feaf 	bl	8005ef8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7ff fed0 	bl	8005f40 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80061a0:	2300      	movs	r3, #0
 80061a2:	60fb      	str	r3, [r7, #12]
 80061a4:	e015      	b.n	80061d2 <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b2:	461a      	mov	r2, r3
 80061b4:	f04f 33ff 	mov.w	r3, #4294967295
 80061b8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c6:	461a      	mov	r2, r3
 80061c8:	2300      	movs	r3, #0
 80061ca:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	3301      	adds	r3, #1
 80061d0:	60fb      	str	r3, [r7, #12]
 80061d2:	6a3b      	ldr	r3, [r7, #32]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d3e5      	bcc.n	80061a6 <USB_HostInit+0x62>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f04f 32ff 	mov.w	r2, #4294967295
 80061e6:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2280      	movs	r2, #128	; 0x80
 80061ec:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a0c      	ldr	r2, [pc, #48]	; (8006224 <USB_HostInit+0xe0>)
 80061f2:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a0c      	ldr	r2, [pc, #48]	; (8006228 <USB_HostInit+0xe4>)
 80061f8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	f043 0210 	orr.w	r2, r3, #16
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	699a      	ldr	r2, [r3, #24]
 800620c:	4b07      	ldr	r3, [pc, #28]	; (800622c <USB_HostInit+0xe8>)
 800620e:	4313      	orrs	r3, r2
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006220:	b004      	add	sp, #16
 8006222:	4770      	bx	lr
 8006224:	00600080 	.word	0x00600080
 8006228:	004000e0 	.word	0x004000e0
 800622c:	a3200008 	.word	0xa3200008

08006230 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	460b      	mov	r3, r1
 800623a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800624e:	f023 0303 	bic.w	r3, r3, #3
 8006252:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	78fb      	ldrb	r3, [r7, #3]
 800625e:	f003 0303 	and.w	r3, r3, #3
 8006262:	68f9      	ldr	r1, [r7, #12]
 8006264:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006268:	4313      	orrs	r3, r2
 800626a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800626c:	78fb      	ldrb	r3, [r7, #3]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d107      	bne.n	8006282 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006278:	461a      	mov	r2, r3
 800627a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800627e:	6053      	str	r3, [r2, #4]
 8006280:	e009      	b.n	8006296 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006282:	78fb      	ldrb	r3, [r7, #3]
 8006284:	2b02      	cmp	r3, #2
 8006286:	d106      	bne.n	8006296 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800628e:	461a      	mov	r2, r3
 8006290:	f241 7370 	movw	r3, #6000	; 0x1770
 8006294:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	bc80      	pop	{r7}
 80062a0:	4770      	bx	lr

080062a2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b084      	sub	sp, #16
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80062ae:	2300      	movs	r3, #0
 80062b0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80062c2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80062cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062d0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80062d2:	2064      	movs	r0, #100	; 0x64
 80062d4:	f7fb f982 	bl	80015dc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80062e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062e4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80062e6:	200a      	movs	r0, #10
 80062e8:	f7fb f978 	bl	80015dc <HAL_Delay>

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b085      	sub	sp, #20
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	460b      	mov	r3, r1
 8006300:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800631a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d109      	bne.n	800633a <USB_DriveVbus+0x44>
 8006326:	78fb      	ldrb	r3, [r7, #3]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d106      	bne.n	800633a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006334:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006338:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006344:	d109      	bne.n	800635a <USB_DriveVbus+0x64>
 8006346:	78fb      	ldrb	r3, [r7, #3]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d106      	bne.n	800635a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006354:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006358:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	bc80      	pop	{r7}
 8006364:	4770      	bx	lr

08006366 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006366:	b480      	push	{r7}
 8006368:	b085      	sub	sp, #20
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006372:	2300      	movs	r3, #0
 8006374:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	0c5b      	lsrs	r3, r3, #17
 8006384:	f003 0303 	and.w	r3, r3, #3
}
 8006388:	4618      	mov	r0, r3
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	bc80      	pop	{r7}
 8006390:	4770      	bx	lr

08006392 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006392:	b480      	push	{r7}
 8006394:	b085      	sub	sp, #20
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	b29b      	uxth	r3, r3
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3714      	adds	r7, #20
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bc80      	pop	{r7}
 80063b0:	4770      	bx	lr
	...

080063b4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b088      	sub	sp, #32
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	4608      	mov	r0, r1
 80063be:	4611      	mov	r1, r2
 80063c0:	461a      	mov	r2, r3
 80063c2:	4603      	mov	r3, r0
 80063c4:	70fb      	strb	r3, [r7, #3]
 80063c6:	460b      	mov	r3, r1
 80063c8:	70bb      	strb	r3, [r7, #2]
 80063ca:	4613      	mov	r3, r2
 80063cc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80063ce:	2300      	movs	r3, #0
 80063d0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80063d6:	78fb      	ldrb	r3, [r7, #3]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e2:	461a      	mov	r2, r3
 80063e4:	f04f 33ff 	mov.w	r3, #4294967295
 80063e8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80063ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80063ee:	2b03      	cmp	r3, #3
 80063f0:	d867      	bhi.n	80064c2 <USB_HC_Init+0x10e>
 80063f2:	a201      	add	r2, pc, #4	; (adr r2, 80063f8 <USB_HC_Init+0x44>)
 80063f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f8:	08006409 	.word	0x08006409
 80063fc:	08006485 	.word	0x08006485
 8006400:	08006409 	.word	0x08006409
 8006404:	08006447 	.word	0x08006447
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006408:	78fb      	ldrb	r3, [r7, #3]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	4413      	add	r3, r2
 8006410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006414:	461a      	mov	r2, r3
 8006416:	f240 439d 	movw	r3, #1181	; 0x49d
 800641a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800641c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006420:	2b00      	cmp	r3, #0
 8006422:	da51      	bge.n	80064c8 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006424:	78fb      	ldrb	r3, [r7, #3]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	4413      	add	r3, r2
 800642c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	78fa      	ldrb	r2, [r7, #3]
 8006434:	0151      	lsls	r1, r2, #5
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	440a      	add	r2, r1
 800643a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800643e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006442:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006444:	e040      	b.n	80064c8 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006446:	78fb      	ldrb	r3, [r7, #3]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	4413      	add	r3, r2
 800644e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006452:	461a      	mov	r2, r3
 8006454:	f240 639d 	movw	r3, #1693	; 0x69d
 8006458:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800645a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800645e:	2b00      	cmp	r3, #0
 8006460:	da34      	bge.n	80064cc <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006462:	78fb      	ldrb	r3, [r7, #3]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	4413      	add	r3, r2
 800646a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	78fa      	ldrb	r2, [r7, #3]
 8006472:	0151      	lsls	r1, r2, #5
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	440a      	add	r2, r1
 8006478:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800647c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006480:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006482:	e023      	b.n	80064cc <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006484:	78fb      	ldrb	r3, [r7, #3]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	4413      	add	r3, r2
 800648c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006490:	461a      	mov	r2, r3
 8006492:	f240 2325 	movw	r3, #549	; 0x225
 8006496:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006498:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800649c:	2b00      	cmp	r3, #0
 800649e:	da17      	bge.n	80064d0 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80064a0:	78fb      	ldrb	r3, [r7, #3]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	78fa      	ldrb	r2, [r7, #3]
 80064b0:	0151      	lsls	r1, r2, #5
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	440a      	add	r2, r1
 80064b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ba:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80064be:	60d3      	str	r3, [r2, #12]
      }
      break;
 80064c0:	e006      	b.n	80064d0 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	77fb      	strb	r3, [r7, #31]
      break;
 80064c6:	e004      	b.n	80064d2 <USB_HC_Init+0x11e>
      break;
 80064c8:	bf00      	nop
 80064ca:	e002      	b.n	80064d2 <USB_HC_Init+0x11e>
      break;
 80064cc:	bf00      	nop
 80064ce:	e000      	b.n	80064d2 <USB_HC_Init+0x11e>
      break;
 80064d0:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064d8:	699a      	ldr	r2, [r3, #24]
 80064da:	78fb      	ldrb	r3, [r7, #3]
 80064dc:	f003 030f 	and.w	r3, r3, #15
 80064e0:	2101      	movs	r1, #1
 80064e2:	fa01 f303 	lsl.w	r3, r1, r3
 80064e6:	6939      	ldr	r1, [r7, #16]
 80064e8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80064ec:	4313      	orrs	r3, r2
 80064ee:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80064fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006500:	2b00      	cmp	r3, #0
 8006502:	da03      	bge.n	800650c <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006504:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006508:	61bb      	str	r3, [r7, #24]
 800650a:	e001      	b.n	8006510 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 800650c:	2300      	movs	r3, #0
 800650e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f7ff ff28 	bl	8006366 <USB_GetHostSpeed>
 8006516:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006518:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800651c:	2b02      	cmp	r3, #2
 800651e:	d106      	bne.n	800652e <USB_HC_Init+0x17a>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2b02      	cmp	r3, #2
 8006524:	d003      	beq.n	800652e <USB_HC_Init+0x17a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006526:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800652a:	617b      	str	r3, [r7, #20]
 800652c:	e001      	b.n	8006532 <USB_HC_Init+0x17e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006532:	787b      	ldrb	r3, [r7, #1]
 8006534:	059b      	lsls	r3, r3, #22
 8006536:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800653a:	78bb      	ldrb	r3, [r7, #2]
 800653c:	02db      	lsls	r3, r3, #11
 800653e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006542:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006544:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006548:	049b      	lsls	r3, r3, #18
 800654a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800654e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006550:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006552:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006556:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800655c:	78fb      	ldrb	r3, [r7, #3]
 800655e:	0159      	lsls	r1, r3, #5
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	440b      	add	r3, r1
 8006564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006568:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800656e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006570:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006574:	2b03      	cmp	r3, #3
 8006576:	d10f      	bne.n	8006598 <USB_HC_Init+0x1e4>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006578:	78fb      	ldrb	r3, [r7, #3]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	4413      	add	r3, r2
 8006580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	78fa      	ldrb	r2, [r7, #3]
 8006588:	0151      	lsls	r1, r2, #5
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	440a      	add	r2, r1
 800658e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006592:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006596:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006598:	7ffb      	ldrb	r3, [r7, #31]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3720      	adds	r7, #32
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop

080065a4 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b088      	sub	sp, #32
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	785b      	ldrb	r3, [r3, #1]
 80065b6:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80065b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065bc:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d018      	beq.n	80065f8 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	8912      	ldrh	r2, [r2, #8]
 80065ce:	4413      	add	r3, r2
 80065d0:	3b01      	subs	r3, #1
 80065d2:	683a      	ldr	r2, [r7, #0]
 80065d4:	8912      	ldrh	r2, [r2, #8]
 80065d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80065da:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 80065dc:	8bfa      	ldrh	r2, [r7, #30]
 80065de:	8a7b      	ldrh	r3, [r7, #18]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d90b      	bls.n	80065fc <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 80065e4:	8a7b      	ldrh	r3, [r7, #18]
 80065e6:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80065e8:	8bfb      	ldrh	r3, [r7, #30]
 80065ea:	683a      	ldr	r2, [r7, #0]
 80065ec:	8912      	ldrh	r2, [r2, #8]
 80065ee:	fb03 f202 	mul.w	r2, r3, r2
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	611a      	str	r2, [r3, #16]
 80065f6:	e001      	b.n	80065fc <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 80065f8:	2301      	movs	r3, #1
 80065fa:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	78db      	ldrb	r3, [r3, #3]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d007      	beq.n	8006614 <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006604:	8bfb      	ldrh	r3, [r7, #30]
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	8912      	ldrh	r2, [r2, #8]
 800660a:	fb03 f202 	mul.w	r2, r3, r2
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	611a      	str	r2, [r3, #16]
 8006612:	e003      	b.n	800661c <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	695a      	ldr	r2, [r3, #20]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006624:	8bfb      	ldrh	r3, [r7, #30]
 8006626:	04d9      	lsls	r1, r3, #19
 8006628:	4b59      	ldr	r3, [pc, #356]	; (8006790 <USB_HC_StartXfer+0x1ec>)
 800662a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800662c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	7a9b      	ldrb	r3, [r3, #10]
 8006632:	075b      	lsls	r3, r3, #29
 8006634:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006638:	6979      	ldr	r1, [r7, #20]
 800663a:	0148      	lsls	r0, r1, #5
 800663c:	69b9      	ldr	r1, [r7, #24]
 800663e:	4401      	add	r1, r0
 8006640:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006644:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006646:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f003 0301 	and.w	r3, r3, #1
 8006654:	2b00      	cmp	r3, #0
 8006656:	bf0c      	ite	eq
 8006658:	2301      	moveq	r3, #1
 800665a:	2300      	movne	r3, #0
 800665c:	b2db      	uxtb	r3, r3
 800665e:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	4413      	add	r3, r2
 8006668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	0151      	lsls	r1, r2, #5
 8006672:	69ba      	ldr	r2, [r7, #24]
 8006674:	440a      	add	r2, r1
 8006676:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800667a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800667e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	4413      	add	r3, r2
 8006688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	7c7b      	ldrb	r3, [r7, #17]
 8006690:	075b      	lsls	r3, r3, #29
 8006692:	6979      	ldr	r1, [r7, #20]
 8006694:	0148      	lsls	r0, r1, #5
 8006696:	69b9      	ldr	r1, [r7, #24]
 8006698:	4401      	add	r1, r0
 800669a:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800669e:	4313      	orrs	r3, r2
 80066a0:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066b8:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	78db      	ldrb	r3, [r3, #3]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d004      	beq.n	80066cc <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066c8:	60bb      	str	r3, [r7, #8]
 80066ca:	e003      	b.n	80066d4 <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066d2:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066da:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e8:	461a      	mov	r2, r3
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	78db      	ldrb	r3, [r3, #3]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d147      	bne.n	8006786 <USB_HC_StartXfer+0x1e2>
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d043      	beq.n	8006786 <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	79db      	ldrb	r3, [r3, #7]
 8006702:	2b03      	cmp	r3, #3
 8006704:	d830      	bhi.n	8006768 <USB_HC_StartXfer+0x1c4>
 8006706:	a201      	add	r2, pc, #4	; (adr r2, 800670c <USB_HC_StartXfer+0x168>)
 8006708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670c:	0800671d 	.word	0x0800671d
 8006710:	08006741 	.word	0x08006741
 8006714:	0800671d 	.word	0x0800671d
 8006718:	08006741 	.word	0x08006741
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	3303      	adds	r3, #3
 8006722:	089b      	lsrs	r3, r3, #2
 8006724:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006726:	89fa      	ldrh	r2, [r7, #14]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672c:	b29b      	uxth	r3, r3
 800672e:	429a      	cmp	r2, r3
 8006730:	d91c      	bls.n	800676c <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	f043 0220 	orr.w	r2, r3, #32
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	619a      	str	r2, [r3, #24]
        }
        break;
 800673e:	e015      	b.n	800676c <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	695b      	ldr	r3, [r3, #20]
 8006744:	3303      	adds	r3, #3
 8006746:	089b      	lsrs	r3, r3, #2
 8006748:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800674a:	89fa      	ldrh	r2, [r7, #14]
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	b29b      	uxth	r3, r3
 8006756:	429a      	cmp	r2, r3
 8006758:	d90a      	bls.n	8006770 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	619a      	str	r2, [r3, #24]
        }
        break;
 8006766:	e003      	b.n	8006770 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 8006768:	bf00      	nop
 800676a:	e002      	b.n	8006772 <USB_HC_StartXfer+0x1ce>
        break;
 800676c:	bf00      	nop
 800676e:	e000      	b.n	8006772 <USB_HC_StartXfer+0x1ce>
        break;
 8006770:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	68d9      	ldr	r1, [r3, #12]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	785a      	ldrb	r2, [r3, #1]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	b29b      	uxth	r3, r3
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7ff fbfd 	bl	8005f80 <USB_WritePacket>
  }

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3720      	adds	r7, #32
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	1ff80000 	.word	0x1ff80000

08006794 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	b29b      	uxth	r3, r3
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bc80      	pop	{r7}
 80067b2:	4770      	bx	lr

080067b4 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b089      	sub	sp, #36	; 0x24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	460b      	mov	r3, r1
 80067be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80067c4:	78fb      	ldrb	r3, [r7, #3]
 80067c6:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80067c8:	2300      	movs	r3, #0
 80067ca:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	015a      	lsls	r2, r3, #5
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	4413      	add	r3, r2
 80067d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	0c9b      	lsrs	r3, r3, #18
 80067dc:	f003 0303 	and.w	r3, r3, #3
 80067e0:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	0fdb      	lsrs	r3, r3, #31
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f003 0320 	and.w	r3, r3, #32
 8006800:	2b20      	cmp	r3, #32
 8006802:	d104      	bne.n	800680e <USB_HC_Halt+0x5a>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800680a:	2300      	movs	r3, #0
 800680c:	e0e8      	b.n	80069e0 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d002      	beq.n	800681a <USB_HC_Halt+0x66>
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	2b02      	cmp	r3, #2
 8006818:	d173      	bne.n	8006902 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	015a      	lsls	r2, r3, #5
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	4413      	add	r3, r2
 8006822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	0151      	lsls	r1, r2, #5
 800682c:	69ba      	ldr	r2, [r7, #24]
 800682e:	440a      	add	r2, r1
 8006830:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006834:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006838:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f003 0320 	and.w	r3, r3, #32
 8006842:	2b00      	cmp	r3, #0
 8006844:	f040 80cb 	bne.w	80069de <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d143      	bne.n	80068dc <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	4413      	add	r3, r2
 800685c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	0151      	lsls	r1, r2, #5
 8006866:	69ba      	ldr	r2, [r7, #24]
 8006868:	440a      	add	r2, r1
 800686a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800686e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006872:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	4413      	add	r3, r2
 800687c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	0151      	lsls	r1, r2, #5
 8006886:	69ba      	ldr	r2, [r7, #24]
 8006888:	440a      	add	r2, r1
 800688a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800688e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006892:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	4413      	add	r3, r2
 800689c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	0151      	lsls	r1, r2, #5
 80068a6:	69ba      	ldr	r2, [r7, #24]
 80068a8:	440a      	add	r2, r1
 80068aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068b2:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	3301      	adds	r3, #1
 80068b8:	61fb      	str	r3, [r7, #28]
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068c0:	d81d      	bhi.n	80068fe <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068d8:	d0ec      	beq.n	80068b4 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80068da:	e080      	b.n	80069de <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	0151      	lsls	r1, r2, #5
 80068ee:	69ba      	ldr	r2, [r7, #24]
 80068f0:	440a      	add	r2, r1
 80068f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068fa:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80068fc:	e06f      	b.n	80069de <USB_HC_Halt+0x22a>
            break;
 80068fe:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006900:	e06d      	b.n	80069de <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	4413      	add	r3, r2
 800690a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	0151      	lsls	r1, r2, #5
 8006914:	69ba      	ldr	r2, [r7, #24]
 8006916:	440a      	add	r2, r1
 8006918:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800691c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006920:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d143      	bne.n	80069ba <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	4413      	add	r3, r2
 800693a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	697a      	ldr	r2, [r7, #20]
 8006942:	0151      	lsls	r1, r2, #5
 8006944:	69ba      	ldr	r2, [r7, #24]
 8006946:	440a      	add	r2, r1
 8006948:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800694c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006950:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	4413      	add	r3, r2
 800695a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	0151      	lsls	r1, r2, #5
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	440a      	add	r2, r1
 8006968:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800696c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006970:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	015a      	lsls	r2, r3, #5
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	4413      	add	r3, r2
 800697a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	0151      	lsls	r1, r2, #5
 8006984:	69ba      	ldr	r2, [r7, #24]
 8006986:	440a      	add	r2, r1
 8006988:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800698c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006990:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	3301      	adds	r3, #1
 8006996:	61fb      	str	r3, [r7, #28]
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800699e:	d81d      	bhi.n	80069dc <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069b6:	d0ec      	beq.n	8006992 <USB_HC_Halt+0x1de>
 80069b8:	e011      	b.n	80069de <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	0151      	lsls	r1, r2, #5
 80069cc:	69ba      	ldr	r2, [r7, #24]
 80069ce:	440a      	add	r2, r1
 80069d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069d8:	6013      	str	r3, [r2, #0]
 80069da:	e000      	b.n	80069de <USB_HC_Halt+0x22a>
          break;
 80069dc:	bf00      	nop
    }
  }

  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3724      	adds	r7, #36	; 0x24
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bc80      	pop	{r7}
 80069e8:	4770      	bx	lr

080069ea <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b086      	sub	sp, #24
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7ff fa20 	bl	8005e40 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006a00:	2110      	movs	r1, #16
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f7ff fa78 	bl	8005ef8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7ff fa99 	bl	8005f40 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006a0e:	2300      	movs	r3, #0
 8006a10:	613b      	str	r3, [r7, #16]
 8006a12:	e01f      	b.n	8006a54 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a2a:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a32:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a3a:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a48:	461a      	mov	r2, r3
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	3301      	adds	r3, #1
 8006a52:	613b      	str	r3, [r7, #16]
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	2b0f      	cmp	r3, #15
 8006a58:	d9dc      	bls.n	8006a14 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	613b      	str	r3, [r7, #16]
 8006a5e:	e034      	b.n	8006aca <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a76:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a7e:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a86:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	015a      	lsls	r2, r3, #5
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a94:	461a      	mov	r2, r3
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	617b      	str	r3, [r7, #20]
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006aa6:	d80c      	bhi.n	8006ac2 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006aba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006abe:	d0ec      	beq.n	8006a9a <USB_StopHost+0xb0>
 8006ac0:	e000      	b.n	8006ac4 <USB_StopHost+0xda>
        break;
 8006ac2:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	613b      	str	r3, [r7, #16]
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	2b0f      	cmp	r3, #15
 8006ace:	d9c7      	bls.n	8006a60 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8006adc:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3718      	adds	r7, #24
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  //retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
	FATFS_LinkDriver(&SD0_Driver, SD0Path);
 8006af4:	4908      	ldr	r1, [pc, #32]	; (8006b18 <MX_FATFS_Init+0x28>)
 8006af6:	4809      	ldr	r0, [pc, #36]	; (8006b1c <MX_FATFS_Init+0x2c>)
 8006af8:	f003 fc36 	bl	800a368 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD1_Driver, SD1Path);
 8006afc:	4908      	ldr	r1, [pc, #32]	; (8006b20 <MX_FATFS_Init+0x30>)
 8006afe:	4809      	ldr	r0, [pc, #36]	; (8006b24 <MX_FATFS_Init+0x34>)
 8006b00:	f003 fc32 	bl	800a368 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD2_Driver, SD2Path);
 8006b04:	4908      	ldr	r1, [pc, #32]	; (8006b28 <MX_FATFS_Init+0x38>)
 8006b06:	4809      	ldr	r0, [pc, #36]	; (8006b2c <MX_FATFS_Init+0x3c>)
 8006b08:	f003 fc2e 	bl	800a368 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD3_Driver, SD3Path);
 8006b0c:	4908      	ldr	r1, [pc, #32]	; (8006b30 <MX_FATFS_Init+0x40>)
 8006b0e:	4809      	ldr	r0, [pc, #36]	; (8006b34 <MX_FATFS_Init+0x44>)
 8006b10:	f003 fc2a 	bl	800a368 <FATFS_LinkDriver>


  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006b14:	bf00      	nop
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	20000e38 	.word	0x20000e38
 8006b1c:	2000000c 	.word	0x2000000c
 8006b20:	20000e3c 	.word	0x20000e3c
 8006b24:	20000020 	.word	0x20000020
 8006b28:	20000e40 	.word	0x20000e40
 8006b2c:	20000034 	.word	0x20000034
 8006b30:	20000e44 	.word	0x20000e44
 8006b34:	20000048 	.word	0x20000048

08006b38 <SD0_initialize>:
  * @brief  Initializes a Drive
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS SD0_initialize (BYTE pdrv)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	4603      	mov	r3, r0
 8006b40:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(0);
 8006b42:	2000      	movs	r0, #0
 8006b44:	f7fa f8c8 	bl	8000cd8 <sd_ss_set_active>
	return USER_initialize(pdrv);
 8006b48:	79fb      	ldrb	r3, [r7, #7]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 f838 	bl	8006bc0 <USER_initialize>
 8006b50:	4603      	mov	r3, r0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3708      	adds	r7, #8
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <SD1_initialize>:
DSTATUS SD1_initialize (BYTE pdrv)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b082      	sub	sp, #8
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	4603      	mov	r3, r0
 8006b62:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(1);
 8006b64:	2001      	movs	r0, #1
 8006b66:	f7fa f8b7 	bl	8000cd8 <sd_ss_set_active>
	return USER_initialize(pdrv);
 8006b6a:	79fb      	ldrb	r3, [r7, #7]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f000 f827 	bl	8006bc0 <USER_initialize>
 8006b72:	4603      	mov	r3, r0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <SD2_initialize>:
DSTATUS SD2_initialize (BYTE pdrv)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	4603      	mov	r3, r0
 8006b84:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(2);
 8006b86:	2002      	movs	r0, #2
 8006b88:	f7fa f8a6 	bl	8000cd8 <sd_ss_set_active>
	return USER_initialize(pdrv);
 8006b8c:	79fb      	ldrb	r3, [r7, #7]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f000 f816 	bl	8006bc0 <USER_initialize>
 8006b94:	4603      	mov	r3, r0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <SD3_initialize>:
DSTATUS SD3_initialize (BYTE pdrv)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b082      	sub	sp, #8
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(3);
 8006ba8:	2003      	movs	r0, #3
 8006baa:	f7fa f895 	bl	8000cd8 <sd_ss_set_active>
	return USER_initialize(pdrv);
 8006bae:	79fb      	ldrb	r3, [r7, #7]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f000 f805 	bl	8006bc0 <USER_initialize>
 8006bb6:	4603      	mov	r3, r0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3708      	adds	r7, #8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <USER_initialize>:

DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	//SD_PowerOn();
	SS_SD_SELECT();
 8006bca:	f7fa f8a3 	bl	8000d14 <sd_ss_active_pin_down>
	if(sd_ini()==0) {Stat &= ~STA_NOINIT;} // STA_NOINIT
 8006bce:	f7fa f923 	bl	8000e18 <sd_ini>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d107      	bne.n	8006be8 <USER_initialize+0x28>
 8006bd8:	4b08      	ldr	r3, [pc, #32]	; (8006bfc <USER_initialize+0x3c>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	f023 0301 	bic.w	r3, r3, #1
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	4b05      	ldr	r3, [pc, #20]	; (8006bfc <USER_initialize+0x3c>)
 8006be6:	701a      	strb	r2, [r3, #0]
	SS_SD_DESELECT();
 8006be8:	f7fa f8a4 	bl	8000d34 <sd_ss_active_pin_up>
    return Stat;
 8006bec:	4b03      	ldr	r3, [pc, #12]	; (8006bfc <USER_initialize+0x3c>)
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20000009 	.word	0x20000009

08006c00 <SD0_status>:
  * @brief  Gets Disk Status
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS SD0_status (BYTE pdrv)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	4603      	mov	r3, r0
 8006c08:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(0);
 8006c0a:	2000      	movs	r0, #0
 8006c0c:	f7fa f864 	bl	8000cd8 <sd_ss_set_active>
	return USER_status(pdrv);
 8006c10:	79fb      	ldrb	r3, [r7, #7]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 f838 	bl	8006c88 <USER_status>
 8006c18:	4603      	mov	r3, r0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3708      	adds	r7, #8
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <SD1_status>:
DSTATUS SD1_status (BYTE pdrv)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b082      	sub	sp, #8
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	4603      	mov	r3, r0
 8006c2a:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(1);
 8006c2c:	2001      	movs	r0, #1
 8006c2e:	f7fa f853 	bl	8000cd8 <sd_ss_set_active>
	return USER_status(pdrv);
 8006c32:	79fb      	ldrb	r3, [r7, #7]
 8006c34:	4618      	mov	r0, r3
 8006c36:	f000 f827 	bl	8006c88 <USER_status>
 8006c3a:	4603      	mov	r3, r0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3708      	adds	r7, #8
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <SD2_status>:
DSTATUS SD2_status (BYTE pdrv)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(2);
 8006c4e:	2002      	movs	r0, #2
 8006c50:	f7fa f842 	bl	8000cd8 <sd_ss_set_active>
	return USER_status(pdrv);
 8006c54:	79fb      	ldrb	r3, [r7, #7]
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 f816 	bl	8006c88 <USER_status>
 8006c5c:	4603      	mov	r3, r0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <SD3_status>:
DSTATUS SD3_status (BYTE pdrv)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b082      	sub	sp, #8
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(3);
 8006c70:	2003      	movs	r0, #3
 8006c72:	f7fa f831 	bl	8000cd8 <sd_ss_set_active>
	return USER_status(pdrv);
 8006c76:	79fb      	ldrb	r3, [r7, #7]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 f805 	bl	8006c88 <USER_status>
 8006c7e:	4603      	mov	r3, r0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <USER_status>:

DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	4603      	mov	r3, r0
 8006c90:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	SS_SD_SELECT();
 8006c92:	f7fa f83f 	bl	8000d14 <sd_ss_active_pin_down>
	if (pdrv) return STA_NOINIT;
 8006c96:	79fb      	ldrb	r3, [r7, #7]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d001      	beq.n	8006ca0 <USER_status+0x18>
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e004      	b.n	8006caa <USER_status+0x22>
	SS_SD_DESELECT();
 8006ca0:	f7fa f848 	bl	8000d34 <sd_ss_active_pin_up>
    return Stat;
 8006ca4:	4b03      	ldr	r3, [pc, #12]	; (8006cb4 <USER_status+0x2c>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	20000009 	.word	0x20000009

08006cb8 <SD0_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DSTATUS SD0_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60b9      	str	r1, [r7, #8]
 8006cc0:	607a      	str	r2, [r7, #4]
 8006cc2:	603b      	str	r3, [r7, #0]
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(0);
 8006cc8:	2000      	movs	r0, #0
 8006cca:	f7fa f805 	bl	8000cd8 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 8006cce:	7bf8      	ldrb	r0, [r7, #15]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	68b9      	ldr	r1, [r7, #8]
 8006cd6:	f000 f847 	bl	8006d68 <USER_read>
 8006cda:	4603      	mov	r3, r0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <SD1_read>:
DSTATUS SD1_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60b9      	str	r1, [r7, #8]
 8006cec:	607a      	str	r2, [r7, #4]
 8006cee:	603b      	str	r3, [r7, #0]
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(1);
 8006cf4:	2001      	movs	r0, #1
 8006cf6:	f7f9 ffef 	bl	8000cd8 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 8006cfa:	7bf8      	ldrb	r0, [r7, #15]
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	68b9      	ldr	r1, [r7, #8]
 8006d02:	f000 f831 	bl	8006d68 <USER_read>
 8006d06:	4603      	mov	r3, r0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <SD2_read>:
DSTATUS SD2_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60b9      	str	r1, [r7, #8]
 8006d18:	607a      	str	r2, [r7, #4]
 8006d1a:	603b      	str	r3, [r7, #0]
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(2);
 8006d20:	2002      	movs	r0, #2
 8006d22:	f7f9 ffd9 	bl	8000cd8 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 8006d26:	7bf8      	ldrb	r0, [r7, #15]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	68b9      	ldr	r1, [r7, #8]
 8006d2e:	f000 f81b 	bl	8006d68 <USER_read>
 8006d32:	4603      	mov	r3, r0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <SD3_read>:
DSTATUS SD3_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60b9      	str	r1, [r7, #8]
 8006d44:	607a      	str	r2, [r7, #4]
 8006d46:	603b      	str	r3, [r7, #0]
 8006d48:	4603      	mov	r3, r0
 8006d4a:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(3);
 8006d4c:	2003      	movs	r0, #3
 8006d4e:	f7f9 ffc3 	bl	8000cd8 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 8006d52:	7bf8      	ldrb	r0, [r7, #15]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	68b9      	ldr	r1, [r7, #8]
 8006d5a:	f000 f805 	bl	8006d68 <USER_read>
 8006d5e:	4603      	mov	r3, r0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60b9      	str	r1, [r7, #8]
 8006d70:	607a      	str	r2, [r7, #4]
 8006d72:	603b      	str	r3, [r7, #0]
 8006d74:	4603      	mov	r3, r0
 8006d76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	SS_SD_SELECT();
 8006d78:	f7f9 ffcc 	bl	8000d14 <sd_ss_active_pin_down>
	if (pdrv || !count) return RES_PARERR;
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d102      	bne.n	8006d88 <USER_read+0x20>
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <USER_read+0x24>
 8006d88:	2304      	movs	r3, #4
 8006d8a:	e025      	b.n	8006dd8 <USER_read+0x70>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006d8c:	4b14      	ldr	r3, [pc, #80]	; (8006de0 <USER_read+0x78>)
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <USER_read+0x36>
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e01c      	b.n	8006dd8 <USER_read+0x70>
	if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 8006d9e:	4b11      	ldr	r3, [pc, #68]	; (8006de4 <USER_read+0x7c>)
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	f003 0304 	and.w	r3, r3, #4
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d102      	bne.n	8006db2 <USER_read+0x4a>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	025b      	lsls	r3, r3, #9
 8006db0:	607b      	str	r3, [r7, #4]
	if (count == 1) /* Single block read */
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d105      	bne.n	8006dc4 <USER_read+0x5c>
	{
	  SD_Read_Block(buff,sector); //Ð¡Ñ‡Ð¸Ñ‚Ð°ÐµÐ¼ Ð±Ð»Ð¾Ðº Ð² Ð±ÑƒÑ„ÐµÑ€
 8006db8:	6879      	ldr	r1, [r7, #4]
 8006dba:	68b8      	ldr	r0, [r7, #8]
 8006dbc:	f7fa f945 	bl	800104a <SD_Read_Block>
	  count = 0;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	603b      	str	r3, [r7, #0]
	}
	else /* Multiple block read */
	{
	}
	SPI_Release();
 8006dc4:	f7fa f93a 	bl	800103c <SPI_Release>
	SS_SD_DESELECT();
 8006dc8:	f7f9 ffb4 	bl	8000d34 <sd_ss_active_pin_up>
	return count ? RES_ERROR : RES_OK;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	bf14      	ite	ne
 8006dd2:	2301      	movne	r3, #1
 8006dd4:	2300      	moveq	r3, #0
 8006dd6:	b2db      	uxtb	r3, r3
    return RES_OK;
  /* USER CODE END READ */
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	20000009 	.word	0x20000009
 8006de4:	20000dc0 	.word	0x20000dc0

08006de8 <SD0_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DSTATUS SD0_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60b9      	str	r1, [r7, #8]
 8006df0:	607a      	str	r2, [r7, #4]
 8006df2:	603b      	str	r3, [r7, #0]
 8006df4:	4603      	mov	r3, r0
 8006df6:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(0);
 8006df8:	2000      	movs	r0, #0
 8006dfa:	f7f9 ff6d 	bl	8000cd8 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 8006dfe:	7bf8      	ldrb	r0, [r7, #15]
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	68b9      	ldr	r1, [r7, #8]
 8006e06:	f000 f847 	bl	8006e98 <USER_write>
 8006e0a:	4603      	mov	r3, r0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <SD1_write>:
DSTATUS SD1_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60b9      	str	r1, [r7, #8]
 8006e1c:	607a      	str	r2, [r7, #4]
 8006e1e:	603b      	str	r3, [r7, #0]
 8006e20:	4603      	mov	r3, r0
 8006e22:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(1);
 8006e24:	2001      	movs	r0, #1
 8006e26:	f7f9 ff57 	bl	8000cd8 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 8006e2a:	7bf8      	ldrb	r0, [r7, #15]
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	68b9      	ldr	r1, [r7, #8]
 8006e32:	f000 f831 	bl	8006e98 <USER_write>
 8006e36:	4603      	mov	r3, r0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <SD2_write>:
DSTATUS SD2_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60b9      	str	r1, [r7, #8]
 8006e48:	607a      	str	r2, [r7, #4]
 8006e4a:	603b      	str	r3, [r7, #0]
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(2);
 8006e50:	2002      	movs	r0, #2
 8006e52:	f7f9 ff41 	bl	8000cd8 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 8006e56:	7bf8      	ldrb	r0, [r7, #15]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	68b9      	ldr	r1, [r7, #8]
 8006e5e:	f000 f81b 	bl	8006e98 <USER_write>
 8006e62:	4603      	mov	r3, r0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <SD3_write>:
DSTATUS SD3_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60b9      	str	r1, [r7, #8]
 8006e74:	607a      	str	r2, [r7, #4]
 8006e76:	603b      	str	r3, [r7, #0]
 8006e78:	4603      	mov	r3, r0
 8006e7a:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(3);
 8006e7c:	2003      	movs	r0, #3
 8006e7e:	f7f9 ff2b 	bl	8000cd8 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 8006e82:	7bf8      	ldrb	r0, [r7, #15]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	68b9      	ldr	r1, [r7, #8]
 8006e8a:	f000 f805 	bl	8006e98 <USER_write>
 8006e8e:	4603      	mov	r3, r0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60b9      	str	r1, [r7, #8]
 8006ea0:	607a      	str	r2, [r7, #4]
 8006ea2:	603b      	str	r3, [r7, #0]
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	SS_SD_SELECT();
 8006ea8:	f7f9 ff34 	bl	8000d14 <sd_ss_active_pin_down>
	if (pdrv || !count) return RES_PARERR;
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d102      	bne.n	8006eb8 <USER_write+0x20>
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <USER_write+0x24>
 8006eb8:	2304      	movs	r3, #4
 8006eba:	e02e      	b.n	8006f1a <USER_write+0x82>
	  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006ebc:	4b19      	ldr	r3, [pc, #100]	; (8006f24 <USER_write+0x8c>)
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	f003 0301 	and.w	r3, r3, #1
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <USER_write+0x36>
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e025      	b.n	8006f1a <USER_write+0x82>
	  if (Stat & STA_PROTECT) return RES_WRPRT;
 8006ece:	4b15      	ldr	r3, [pc, #84]	; (8006f24 <USER_write+0x8c>)
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	f003 0304 	and.w	r3, r3, #4
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <USER_write+0x48>
 8006edc:	2302      	movs	r3, #2
 8006ede:	e01c      	b.n	8006f1a <USER_write+0x82>
	  if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 8006ee0:	4b11      	ldr	r3, [pc, #68]	; (8006f28 <USER_write+0x90>)
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	f003 0304 	and.w	r3, r3, #4
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d102      	bne.n	8006ef4 <USER_write+0x5c>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	025b      	lsls	r3, r3, #9
 8006ef2:	607b      	str	r3, [r7, #4]
	  if (count == 1) /* Single block read */
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d105      	bne.n	8006f06 <USER_write+0x6e>
	  {
	    SD_Write_Block((BYTE*)buff,sector); //Ð¡Ñ‡Ð¸Ñ‚Ð°ÐµÐ¼ Ð±Ð»Ð¾Ðº Ð² Ð±ÑƒÑ„ÐµÑ€
 8006efa:	6879      	ldr	r1, [r7, #4]
 8006efc:	68b8      	ldr	r0, [r7, #8]
 8006efe:	f7fa f8e8 	bl	80010d2 <SD_Write_Block>
	    count = 0;
 8006f02:	2300      	movs	r3, #0
 8006f04:	603b      	str	r3, [r7, #0]
	  }
	  else /* Multiple block read */
	  {
	}
	SPI_Release();
 8006f06:	f7fa f899 	bl	800103c <SPI_Release>
	SS_SD_DESELECT();
 8006f0a:	f7f9 ff13 	bl	8000d34 <sd_ss_active_pin_up>
	return count ? RES_ERROR : RES_OK;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	bf14      	ite	ne
 8006f14:	2301      	movne	r3, #1
 8006f16:	2300      	moveq	r3, #0
 8006f18:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	20000009 	.word	0x20000009
 8006f28:	20000dc0 	.word	0x20000dc0

08006f2c <SD0_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DSTATUS SD0_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	4603      	mov	r3, r0
 8006f34:	603a      	str	r2, [r7, #0]
 8006f36:	71fb      	strb	r3, [r7, #7]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(0);
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	f7f9 fecb 	bl	8000cd8 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 8006f42:	79b9      	ldrb	r1, [r7, #6]
 8006f44:	79fb      	ldrb	r3, [r7, #7]
 8006f46:	683a      	ldr	r2, [r7, #0]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f000 f847 	bl	8006fdc <USER_ioctl>
 8006f4e:	4603      	mov	r3, r0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <SD1_ioctl>:
DSTATUS SD1_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	4603      	mov	r3, r0
 8006f60:	603a      	str	r2, [r7, #0]
 8006f62:	71fb      	strb	r3, [r7, #7]
 8006f64:	460b      	mov	r3, r1
 8006f66:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(1);
 8006f68:	2001      	movs	r0, #1
 8006f6a:	f7f9 feb5 	bl	8000cd8 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 8006f6e:	79b9      	ldrb	r1, [r7, #6]
 8006f70:	79fb      	ldrb	r3, [r7, #7]
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 f831 	bl	8006fdc <USER_ioctl>
 8006f7a:	4603      	mov	r3, r0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <SD2_ioctl>:
DSTATUS SD2_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	603a      	str	r2, [r7, #0]
 8006f8e:	71fb      	strb	r3, [r7, #7]
 8006f90:	460b      	mov	r3, r1
 8006f92:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(2);
 8006f94:	2002      	movs	r0, #2
 8006f96:	f7f9 fe9f 	bl	8000cd8 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 8006f9a:	79b9      	ldrb	r1, [r7, #6]
 8006f9c:	79fb      	ldrb	r3, [r7, #7]
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f000 f81b 	bl	8006fdc <USER_ioctl>
 8006fa6:	4603      	mov	r3, r0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <SD3_ioctl>:
DSTATUS SD3_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	603a      	str	r2, [r7, #0]
 8006fba:	71fb      	strb	r3, [r7, #7]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(3);
 8006fc0:	2003      	movs	r0, #3
 8006fc2:	f7f9 fe89 	bl	8000cd8 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 8006fc6:	79b9      	ldrb	r1, [r7, #6]
 8006fc8:	79fb      	ldrb	r3, [r7, #7]
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f000 f805 	bl	8006fdc <USER_ioctl>
 8006fd2:	4603      	mov	r3, r0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	603a      	str	r2, [r7, #0]
 8006fe6:	71fb      	strb	r3, [r7, #7]
 8006fe8:	460b      	mov	r3, r1
 8006fea:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res;
	sd_ss_set_active(pdrv);
 8006fec:	79fb      	ldrb	r3, [r7, #7]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7f9 fe72 	bl	8000cd8 <sd_ss_set_active>
	SS_SD_SELECT();
 8006ff4:	f7f9 fe8e 	bl	8000d14 <sd_ss_active_pin_down>
	if (pdrv) return RES_PARERR;
 8006ff8:	79fb      	ldrb	r3, [r7, #7]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <USER_ioctl+0x26>
 8006ffe:	2304      	movs	r3, #4
 8007000:	e02a      	b.n	8007058 <USER_ioctl+0x7c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007002:	4b17      	ldr	r3, [pc, #92]	; (8007060 <USER_ioctl+0x84>)
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	b2db      	uxtb	r3, r3
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	2b00      	cmp	r3, #0
 800700e:	d001      	beq.n	8007014 <USER_ioctl+0x38>
 8007010:	2303      	movs	r3, #3
 8007012:	e021      	b.n	8007058 <USER_ioctl+0x7c>
	res = RES_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	73fb      	strb	r3, [r7, #15]
	switch (cmd)
 8007018:	79bb      	ldrb	r3, [r7, #6]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d002      	beq.n	8007024 <USER_ioctl+0x48>
 800701e:	2b02      	cmp	r3, #2
 8007020:	d00a      	beq.n	8007038 <USER_ioctl+0x5c>
 8007022:	e010      	b.n	8007046 <USER_ioctl+0x6a>
	{
	  case CTRL_SYNC : /* Flush dirty buffer if present */
	    SS_SD_SELECT();
 8007024:	f7f9 fe76 	bl	8000d14 <sd_ss_active_pin_down>
	    if (SPI_wait_ready() == 0xFF)
 8007028:	f7f9 ffb0 	bl	8000f8c <SPI_wait_ready>
 800702c:	4603      	mov	r3, r0
 800702e:	2bff      	cmp	r3, #255	; 0xff
 8007030:	d10c      	bne.n	800704c <USER_ioctl+0x70>
	    res = RES_OK;
 8007032:	2300      	movs	r3, #0
 8007034:	73fb      	strb	r3, [r7, #15]
	    break;
 8007036:	e009      	b.n	800704c <USER_ioctl+0x70>
	  case GET_SECTOR_SIZE : /* Get sectors on the disk (WORD) */
	    *(WORD*)buff = 512;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800703e:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 8007040:	2300      	movs	r3, #0
 8007042:	73fb      	strb	r3, [r7, #15]
	    break;
 8007044:	e003      	b.n	800704e <USER_ioctl+0x72>
	  default:
	    res = RES_PARERR;
 8007046:	2304      	movs	r3, #4
 8007048:	73fb      	strb	r3, [r7, #15]
 800704a:	e000      	b.n	800704e <USER_ioctl+0x72>
	    break;
 800704c:	bf00      	nop
	}
	SPI_Release();
 800704e:	f7f9 fff5 	bl	800103c <SPI_Release>
	SS_SD_DESELECT();
 8007052:	f7f9 fe6f 	bl	8000d34 <sd_ss_active_pin_up>
    return res;
 8007056:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	20000009 	.word	0x20000009

08007064 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007064:	b590      	push	{r4, r7, lr}
 8007066:	b089      	sub	sp, #36	; 0x24
 8007068:	af04      	add	r7, sp, #16
 800706a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800706c:	2301      	movs	r3, #1
 800706e:	2202      	movs	r2, #2
 8007070:	2102      	movs	r1, #2
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fd0e 	bl	8007a94 <USBH_FindInterface>
 8007078:	4603      	mov	r3, r0
 800707a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800707c:	7bfb      	ldrb	r3, [r7, #15]
 800707e:	2bff      	cmp	r3, #255	; 0xff
 8007080:	d002      	beq.n	8007088 <USBH_CDC_InterfaceInit+0x24>
 8007082:	7bfb      	ldrb	r3, [r7, #15]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d901      	bls.n	800708c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007088:	2302      	movs	r3, #2
 800708a:	e13d      	b.n	8007308 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800708c:	7bfb      	ldrb	r3, [r7, #15]
 800708e:	4619      	mov	r1, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fce4 	bl	8007a5e <USBH_SelectInterface>
 8007096:	4603      	mov	r3, r0
 8007098:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800709a:	7bbb      	ldrb	r3, [r7, #14]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d001      	beq.n	80070a4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80070a0:	2302      	movs	r3, #2
 80070a2:	e131      	b.n	8007308 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80070aa:	2050      	movs	r0, #80	; 0x50
 80070ac:	f005 feba 	bl	800ce24 <malloc>
 80070b0:	4603      	mov	r3, r0
 80070b2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070ba:	69db      	ldr	r3, [r3, #28]
 80070bc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80070c4:	2302      	movs	r3, #2
 80070c6:	e11f      	b.n	8007308 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80070c8:	2250      	movs	r2, #80	; 0x50
 80070ca:	2100      	movs	r1, #0
 80070cc:	68b8      	ldr	r0, [r7, #8]
 80070ce:	f005 fec7 	bl	800ce60 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80070d2:	7bfb      	ldrb	r3, [r7, #15]
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	211a      	movs	r1, #26
 80070d8:	fb01 f303 	mul.w	r3, r1, r3
 80070dc:	4413      	add	r3, r2
 80070de:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	b25b      	sxtb	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	da15      	bge.n	8007116 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80070ea:	7bfb      	ldrb	r3, [r7, #15]
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	211a      	movs	r1, #26
 80070f0:	fb01 f303 	mul.w	r3, r1, r3
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80070fa:	781a      	ldrb	r2, [r3, #0]
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007100:	7bfb      	ldrb	r3, [r7, #15]
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	211a      	movs	r1, #26
 8007106:	fb01 f303 	mul.w	r3, r1, r3
 800710a:	4413      	add	r3, r2
 800710c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007110:	881a      	ldrh	r2, [r3, #0]
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	785b      	ldrb	r3, [r3, #1]
 800711a:	4619      	mov	r1, r3
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f001 ffa6 	bl	800906e <USBH_AllocPipe>
 8007122:	4603      	mov	r3, r0
 8007124:	461a      	mov	r2, r3
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	7819      	ldrb	r1, [r3, #0]
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	7858      	ldrb	r0, [r3, #1]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	8952      	ldrh	r2, [r2, #10]
 8007142:	9202      	str	r2, [sp, #8]
 8007144:	2203      	movs	r2, #3
 8007146:	9201      	str	r2, [sp, #4]
 8007148:	9300      	str	r3, [sp, #0]
 800714a:	4623      	mov	r3, r4
 800714c:	4602      	mov	r2, r0
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f001 ff5e 	bl	8009010 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	2200      	movs	r2, #0
 800715a:	4619      	mov	r1, r3
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f005 fdb3 	bl	800ccc8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007162:	2300      	movs	r3, #0
 8007164:	2200      	movs	r2, #0
 8007166:	210a      	movs	r1, #10
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fc93 	bl	8007a94 <USBH_FindInterface>
 800716e:	4603      	mov	r3, r0
 8007170:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007172:	7bfb      	ldrb	r3, [r7, #15]
 8007174:	2bff      	cmp	r3, #255	; 0xff
 8007176:	d002      	beq.n	800717e <USBH_CDC_InterfaceInit+0x11a>
 8007178:	7bfb      	ldrb	r3, [r7, #15]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d901      	bls.n	8007182 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800717e:	2302      	movs	r3, #2
 8007180:	e0c2      	b.n	8007308 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007182:	7bfb      	ldrb	r3, [r7, #15]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	211a      	movs	r1, #26
 8007188:	fb01 f303 	mul.w	r3, r1, r3
 800718c:	4413      	add	r3, r2
 800718e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	b25b      	sxtb	r3, r3
 8007196:	2b00      	cmp	r3, #0
 8007198:	da16      	bge.n	80071c8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800719a:	7bfb      	ldrb	r3, [r7, #15]
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	211a      	movs	r1, #26
 80071a0:	fb01 f303 	mul.w	r3, r1, r3
 80071a4:	4413      	add	r3, r2
 80071a6:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80071aa:	781a      	ldrb	r2, [r3, #0]
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80071b0:	7bfb      	ldrb	r3, [r7, #15]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	211a      	movs	r1, #26
 80071b6:	fb01 f303 	mul.w	r3, r1, r3
 80071ba:	4413      	add	r3, r2
 80071bc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80071c0:	881a      	ldrh	r2, [r3, #0]
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	835a      	strh	r2, [r3, #26]
 80071c6:	e015      	b.n	80071f4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	211a      	movs	r1, #26
 80071ce:	fb01 f303 	mul.w	r3, r1, r3
 80071d2:	4413      	add	r3, r2
 80071d4:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80071d8:	781a      	ldrb	r2, [r3, #0]
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80071de:	7bfb      	ldrb	r3, [r7, #15]
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	211a      	movs	r1, #26
 80071e4:	fb01 f303 	mul.w	r3, r1, r3
 80071e8:	4413      	add	r3, r2
 80071ea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80071ee:	881a      	ldrh	r2, [r3, #0]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80071f4:	7bfb      	ldrb	r3, [r7, #15]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	211a      	movs	r1, #26
 80071fa:	fb01 f303 	mul.w	r3, r1, r3
 80071fe:	4413      	add	r3, r2
 8007200:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	b25b      	sxtb	r3, r3
 8007208:	2b00      	cmp	r3, #0
 800720a:	da16      	bge.n	800723a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800720c:	7bfb      	ldrb	r3, [r7, #15]
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	211a      	movs	r1, #26
 8007212:	fb01 f303 	mul.w	r3, r1, r3
 8007216:	4413      	add	r3, r2
 8007218:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800721c:	781a      	ldrb	r2, [r3, #0]
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007222:	7bfb      	ldrb	r3, [r7, #15]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	211a      	movs	r1, #26
 8007228:	fb01 f303 	mul.w	r3, r1, r3
 800722c:	4413      	add	r3, r2
 800722e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007232:	881a      	ldrh	r2, [r3, #0]
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	835a      	strh	r2, [r3, #26]
 8007238:	e015      	b.n	8007266 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800723a:	7bfb      	ldrb	r3, [r7, #15]
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	211a      	movs	r1, #26
 8007240:	fb01 f303 	mul.w	r3, r1, r3
 8007244:	4413      	add	r3, r2
 8007246:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800724a:	781a      	ldrb	r2, [r3, #0]
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007250:	7bfb      	ldrb	r3, [r7, #15]
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	211a      	movs	r1, #26
 8007256:	fb01 f303 	mul.w	r3, r1, r3
 800725a:	4413      	add	r3, r2
 800725c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007260:	881a      	ldrh	r2, [r3, #0]
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	7b9b      	ldrb	r3, [r3, #14]
 800726a:	4619      	mov	r1, r3
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f001 fefe 	bl	800906e <USBH_AllocPipe>
 8007272:	4603      	mov	r3, r0
 8007274:	461a      	mov	r2, r3
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	7bdb      	ldrb	r3, [r3, #15]
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f001 fef4 	bl	800906e <USBH_AllocPipe>
 8007286:	4603      	mov	r3, r0
 8007288:	461a      	mov	r2, r3
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	7b59      	ldrb	r1, [r3, #13]
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	7b98      	ldrb	r0, [r3, #14]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	8b12      	ldrh	r2, [r2, #24]
 80072a6:	9202      	str	r2, [sp, #8]
 80072a8:	2202      	movs	r2, #2
 80072aa:	9201      	str	r2, [sp, #4]
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	4623      	mov	r3, r4
 80072b0:	4602      	mov	r2, r0
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f001 feac 	bl	8009010 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	7b19      	ldrb	r1, [r3, #12]
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	7bd8      	ldrb	r0, [r3, #15]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	8b52      	ldrh	r2, [r2, #26]
 80072d0:	9202      	str	r2, [sp, #8]
 80072d2:	2202      	movs	r2, #2
 80072d4:	9201      	str	r2, [sp, #4]
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	4623      	mov	r3, r4
 80072da:	4602      	mov	r2, r0
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f001 fe97 	bl	8009010 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	7b5b      	ldrb	r3, [r3, #13]
 80072ee:	2200      	movs	r2, #0
 80072f0:	4619      	mov	r1, r3
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f005 fce8 	bl	800ccc8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	7b1b      	ldrb	r3, [r3, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	4619      	mov	r1, r3
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f005 fce1 	bl	800ccc8 <USBH_LL_SetToggle>

  return USBH_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3714      	adds	r7, #20
 800730c:	46bd      	mov	sp, r7
 800730e:	bd90      	pop	{r4, r7, pc}

08007310 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800731e:	69db      	ldr	r3, [r3, #28]
 8007320:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00e      	beq.n	8007348 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	4619      	mov	r1, r3
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f001 fe8c 	bl	800904e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	4619      	mov	r1, r3
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f001 feb7 	bl	80090b0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	7b1b      	ldrb	r3, [r3, #12]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00e      	beq.n	800736e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	7b1b      	ldrb	r3, [r3, #12]
 8007354:	4619      	mov	r1, r3
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f001 fe79 	bl	800904e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	7b1b      	ldrb	r3, [r3, #12]
 8007360:	4619      	mov	r1, r3
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f001 fea4 	bl	80090b0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	7b5b      	ldrb	r3, [r3, #13]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00e      	beq.n	8007394 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	7b5b      	ldrb	r3, [r3, #13]
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f001 fe66 	bl	800904e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	7b5b      	ldrb	r3, [r3, #13]
 8007386:	4619      	mov	r1, r3
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f001 fe91 	bl	80090b0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800739a:	69db      	ldr	r3, [r3, #28]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00b      	beq.n	80073b8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073a6:	69db      	ldr	r3, [r3, #28]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f005 fd43 	bl	800ce34 <free>
    phost->pActiveClass->pData = 0U;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073b4:	2200      	movs	r2, #0
 80073b6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b084      	sub	sp, #16
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 80073ca:	2302      	movs	r3, #2
 80073cc:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	3340      	adds	r3, #64	; 0x40
 80073dc:	4619      	mov	r1, r3
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f8b0 	bl	8007544 <GetLineCoding>
 80073e4:	4603      	mov	r3, r0
 80073e6:	73fb      	strb	r3, [r7, #15]
  if (status == USBH_OK)
 80073e8:	7bfb      	ldrb	r3, [r7, #15]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d105      	bne.n	80073fa <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80073f4:	2102      	movs	r1, #2
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	4798      	blx	r3
  }
  return status;
 80073fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800740c:	2301      	movs	r3, #1
 800740e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007410:	2300      	movs	r3, #0
 8007412:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800741a:	69db      	ldr	r3, [r3, #28]
 800741c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007424:	2b04      	cmp	r3, #4
 8007426:	d877      	bhi.n	8007518 <USBH_CDC_Process+0x114>
 8007428:	a201      	add	r2, pc, #4	; (adr r2, 8007430 <USBH_CDC_Process+0x2c>)
 800742a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742e:	bf00      	nop
 8007430:	08007445 	.word	0x08007445
 8007434:	0800744b 	.word	0x0800744b
 8007438:	0800747b 	.word	0x0800747b
 800743c:	080074ef 	.word	0x080074ef
 8007440:	080074fd 	.word	0x080074fd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007444:	2300      	movs	r3, #0
 8007446:	73fb      	strb	r3, [r7, #15]
      break;
 8007448:	e06d      	b.n	8007526 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800744e:	4619      	mov	r1, r3
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f896 	bl	8007582 <SetLineCoding>
 8007456:	4603      	mov	r3, r0
 8007458:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800745a:	7bbb      	ldrb	r3, [r7, #14]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d104      	bne.n	800746a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	2202      	movs	r2, #2
 8007464:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007468:	e058      	b.n	800751c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800746a:	7bbb      	ldrb	r3, [r7, #14]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d055      	beq.n	800751c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	2204      	movs	r2, #4
 8007474:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007478:	e050      	b.n	800751c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	3340      	adds	r3, #64	; 0x40
 800747e:	4619      	mov	r1, r3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 f85f 	bl	8007544 <GetLineCoding>
 8007486:	4603      	mov	r3, r0
 8007488:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800748a:	7bbb      	ldrb	r3, [r7, #14]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d126      	bne.n	80074de <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074a2:	791b      	ldrb	r3, [r3, #4]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d13b      	bne.n	8007520 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074b2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d133      	bne.n	8007520 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074c2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d12b      	bne.n	8007520 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074d0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d124      	bne.n	8007520 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f9e1 	bl	800789e <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80074dc:	e020      	b.n	8007520 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80074de:	7bbb      	ldrb	r3, [r7, #14]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d01d      	beq.n	8007520 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	2204      	movs	r2, #4
 80074e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80074ec:	e018      	b.n	8007520 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f8da 	bl	80076a8 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 f969 	bl	80077cc <CDC_ProcessReception>
      break;
 80074fa:	e014      	b.n	8007526 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80074fc:	2100      	movs	r1, #0
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f001 f877 	bl	80085f2 <USBH_ClrFeature>
 8007504:	4603      	mov	r3, r0
 8007506:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007508:	7bbb      	ldrb	r3, [r7, #14]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10a      	bne.n	8007524 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE ;
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007516:	e005      	b.n	8007524 <USBH_CDC_Process+0x120>

    default:
      break;
 8007518:	bf00      	nop
 800751a:	e004      	b.n	8007526 <USBH_CDC_Process+0x122>
      break;
 800751c:	bf00      	nop
 800751e:	e002      	b.n	8007526 <USBH_CDC_Process+0x122>
      break;
 8007520:	bf00      	nop
 8007522:	e000      	b.n	8007526 <USBH_CDC_Process+0x122>
      break;
 8007524:	bf00      	nop

  }

  return status;
 8007526:	7bfb      	ldrb	r3, [r7, #15]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	bc80      	pop	{r7}
 8007542:	4770      	bx	lr

08007544 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	22a1      	movs	r2, #161	; 0xa1
 8007552:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2221      	movs	r2, #33	; 0x21
 8007558:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2207      	movs	r2, #7
 800756a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	2207      	movs	r2, #7
 8007570:	4619      	mov	r1, r3
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f001 fa18 	bl	80089a8 <USBH_CtlReq>
 8007578:	4603      	mov	r3, r0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3708      	adds	r7, #8
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b082      	sub	sp, #8
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2221      	movs	r2, #33	; 0x21
 8007590:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2220      	movs	r2, #32
 8007596:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2207      	movs	r2, #7
 80075a8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2207      	movs	r2, #7
 80075ae:	4619      	mov	r1, r3
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f001 f9f9 	bl	80089a8 <USBH_CtlReq>
 80075b6:	4603      	mov	r3, r0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3708      	adds	r7, #8
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <USBH_CDC_Transmit>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Transmit(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80075cc:	2301      	movs	r3, #1
 80075ce:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075d6:	69db      	ldr	r3, [r3, #28]
 80075d8:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d004      	beq.n	80075ee <USBH_CDC_Transmit+0x2e>
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80075ea:	2b03      	cmp	r3, #3
 80075ec:	d11d      	bne.n	800762a <USBH_CDC_Transmit+0x6a>
  {
    CDC_Handle->pTxData = pbuff;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	61da      	str	r2, [r3, #28]
    CDC_Handle->TxDataLength = length;
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	625a      	str	r2, [r3, #36]	; 0x24
    CDC_Handle->state = CDC_TRANSFER_DATA;
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	2203      	movs	r2, #3
 80075fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    Status = USBH_OK;
 800760a:	2300      	movs	r3, #0
 800760c:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2204      	movs	r2, #4
 8007612:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007622:	2200      	movs	r2, #0
 8007624:	4619      	mov	r1, r3
 8007626:	f002 ff65 	bl	800a4f4 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }
  return Status;
 800762a:	7dfb      	ldrb	r3, [r7, #23]
}
 800762c:	4618      	mov	r0, r3
 800762e:	3718      	adds	r7, #24
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <USBH_CDC_Receive>:
* @brief  This function prepares the state before issuing the class specific commands
* @param  None
* @retval None
*/
USBH_StatusTypeDef  USBH_CDC_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b086      	sub	sp, #24
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007640:	2301      	movs	r3, #1
 8007642:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800764a:	69db      	ldr	r3, [r3, #28]
 800764c:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007654:	2b00      	cmp	r3, #0
 8007656:	d004      	beq.n	8007662 <USBH_CDC_Receive+0x2e>
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800765e:	2b03      	cmp	r3, #3
 8007660:	d11d      	bne.n	800769e <USBH_CDC_Receive+0x6a>
  {
    CDC_Handle->pRxData = pbuff;
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	621a      	str	r2, [r3, #32]
    CDC_Handle->RxDataLength = length;
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	629a      	str	r2, [r3, #40]	; 0x28
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	2203      	movs	r2, #3
 8007672:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	2203      	movs	r2, #3
 800767a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    Status = USBH_OK;
 800767e:	2300      	movs	r3, #0
 8007680:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2204      	movs	r2, #4
 8007686:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007696:	2200      	movs	r2, #0
 8007698:	4619      	mov	r1, r3
 800769a:	f002 ff2b 	bl	800a4f4 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }
  return Status;
 800769e:	7dfb      	ldrb	r3, [r7, #23]
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3718      	adds	r7, #24
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b086      	sub	sp, #24
 80076ac:	af02      	add	r7, sp, #8
 80076ae:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076b6:	69db      	ldr	r3, [r3, #28]
 80076b8:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80076ba:	2300      	movs	r3, #0
 80076bc:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d002      	beq.n	80076ce <CDC_ProcessTransmission+0x26>
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d023      	beq.n	8007714 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80076cc:	e07a      	b.n	80077c4 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	8b12      	ldrh	r2, [r2, #24]
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d90b      	bls.n	80076f2 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	69d9      	ldr	r1, [r3, #28]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	8b1a      	ldrh	r2, [r3, #24]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	7b5b      	ldrb	r3, [r3, #13]
 80076e6:	2001      	movs	r0, #1
 80076e8:	9000      	str	r0, [sp, #0]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f001 fc4d 	bl	8008f8a <USBH_BulkSendData>
 80076f0:	e00b      	b.n	800770a <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	7b5b      	ldrb	r3, [r3, #13]
 8007700:	2001      	movs	r0, #1
 8007702:	9000      	str	r0, [sp, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f001 fc40 	bl	8008f8a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2202      	movs	r2, #2
 800770e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007712:	e057      	b.n	80077c4 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	7b5b      	ldrb	r3, [r3, #13]
 8007718:	4619      	mov	r1, r3
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f005 faaa 	bl	800cc74 <USBH_LL_GetURBState>
 8007720:	4603      	mov	r3, r0
 8007722:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007724:	7afb      	ldrb	r3, [r7, #11]
 8007726:	2b01      	cmp	r3, #1
 8007728:	d136      	bne.n	8007798 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	8b12      	ldrh	r2, [r2, #24]
 8007732:	4293      	cmp	r3, r2
 8007734:	d90e      	bls.n	8007754 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	8b12      	ldrh	r2, [r2, #24]
 800773e:	1a9a      	subs	r2, r3, r2
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	69db      	ldr	r3, [r3, #28]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	8b12      	ldrh	r2, [r2, #24]
 800774c:	441a      	add	r2, r3
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	61da      	str	r2, [r3, #28]
 8007752:	e002      	b.n	800775a <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775e:	2b00      	cmp	r3, #0
 8007760:	d004      	beq.n	800776c <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800776a:	e006      	b.n	800777a <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f005 f83d 	bl	800c7f4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2204      	movs	r2, #4
 800777e:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800778e:	2200      	movs	r2, #0
 8007790:	4619      	mov	r1, r3
 8007792:	f002 feaf 	bl	800a4f4 <osMessagePut>
      break;
 8007796:	e014      	b.n	80077c2 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8007798:	7afb      	ldrb	r3, [r7, #11]
 800779a:	2b02      	cmp	r3, #2
 800779c:	d111      	bne.n	80077c2 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2204      	movs	r2, #4
 80077aa:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80077ba:	2200      	movs	r2, #0
 80077bc:	4619      	mov	r1, r3
 80077be:	f002 fe99 	bl	800a4f4 <osMessagePut>
      break;
 80077c2:	bf00      	nop
  }
}
 80077c4:	bf00      	nop
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077da:	69db      	ldr	r3, [r3, #28]
 80077dc:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80077de:	2300      	movs	r3, #0
 80077e0:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80077e8:	2b03      	cmp	r3, #3
 80077ea:	d002      	beq.n	80077f2 <CDC_ProcessReception+0x26>
 80077ec:	2b04      	cmp	r3, #4
 80077ee:	d00e      	beq.n	800780e <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80077f0:	e051      	b.n	8007896 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	6a19      	ldr	r1, [r3, #32]
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	8b5a      	ldrh	r2, [r3, #26]
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	7b1b      	ldrb	r3, [r3, #12]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f001 fbe8 	bl	8008fd4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	2204      	movs	r2, #4
 8007808:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800780c:	e043      	b.n	8007896 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	7b1b      	ldrb	r3, [r3, #12]
 8007812:	4619      	mov	r1, r3
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f005 fa2d 	bl	800cc74 <USBH_LL_GetURBState>
 800781a:	4603      	mov	r3, r0
 800781c:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800781e:	7cfb      	ldrb	r3, [r7, #19]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d137      	bne.n	8007894 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	7b1b      	ldrb	r3, [r3, #12]
 8007828:	4619      	mov	r1, r3
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f005 f990 	bl	800cb50 <USBH_LL_GetLastXferSize>
 8007830:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	429a      	cmp	r2, r3
 800783a:	d016      	beq.n	800786a <CDC_ProcessReception+0x9e>
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	8b5b      	ldrh	r3, [r3, #26]
 8007840:	461a      	mov	r2, r3
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	4293      	cmp	r3, r2
 8007846:	d910      	bls.n	800786a <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	1ad2      	subs	r2, r2, r3
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	6a1a      	ldr	r2, [r3, #32]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	441a      	add	r2, r3
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	2203      	movs	r2, #3
 8007864:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8007868:	e006      	b.n	8007878 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f004 ffce 	bl	800c814 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2204      	movs	r2, #4
 800787c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800788c:	2200      	movs	r2, #0
 800788e:	4619      	mov	r1, r3
 8007890:	f002 fe30 	bl	800a4f4 <osMessagePut>
      break;
 8007894:	bf00      	nop
  }
}
 8007896:	bf00      	nop
 8007898:	3718      	adds	r7, #24
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800789e:	b480      	push	{r7}
 80078a0:	b083      	sub	sp, #12
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80078a6:	bf00      	nop
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bc80      	pop	{r7}
 80078ae:	4770      	bx	lr

080078b0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80078b0:	b5b0      	push	{r4, r5, r7, lr}
 80078b2:	b090      	sub	sp, #64	; 0x40
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	4613      	mov	r3, r2
 80078bc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d101      	bne.n	80078c8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80078c4:	2302      	movs	r3, #2
 80078c6:	e04d      	b.n	8007964 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	79fa      	ldrb	r2, [r7, #7]
 80078cc:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2200      	movs	r2, #0
 80078dc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 f847 	bl	8007974 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d003      	beq.n	8007914 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8007914:	4b15      	ldr	r3, [pc, #84]	; (800796c <USBH_Init+0xbc>)
 8007916:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800791a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800791c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8007920:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007924:	2100      	movs	r1, #0
 8007926:	4618      	mov	r0, r3
 8007928:	f002 fdbc 	bl	800a4a4 <osMessageCreate>
 800792c:	4602      	mov	r2, r0
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8007934:	4b0e      	ldr	r3, [pc, #56]	; (8007970 <USBH_Init+0xc0>)
 8007936:	f107 0414 	add.w	r4, r7, #20
 800793a:	461d      	mov	r5, r3
 800793c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800793e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007940:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007944:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8007948:	f107 0314 	add.w	r3, r7, #20
 800794c:	68f9      	ldr	r1, [r7, #12]
 800794e:	4618      	mov	r0, r3
 8007950:	f002 fd48 	bl	800a3e4 <osThreadCreate>
 8007954:	4602      	mov	r2, r0
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f005 f847 	bl	800c9f0 <USBH_LL_Init>

  return USBH_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3740      	adds	r7, #64	; 0x40
 8007968:	46bd      	mov	sp, r7
 800796a:	bdb0      	pop	{r4, r5, r7, pc}
 800796c:	0800d938 	.word	0x0800d938
 8007970:	0800d948 	.word	0x0800d948

08007974 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800797c:	2300      	movs	r3, #0
 800797e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007980:	2300      	movs	r3, #0
 8007982:	60fb      	str	r3, [r7, #12]
 8007984:	e009      	b.n	800799a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	33e0      	adds	r3, #224	; 0xe0
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4413      	add	r3, r2
 8007990:	2200      	movs	r2, #0
 8007992:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	3301      	adds	r3, #1
 8007998:	60fb      	str	r3, [r7, #12]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2b0e      	cmp	r3, #14
 800799e:	d9f2      	bls.n	8007986 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80079a0:	2300      	movs	r3, #0
 80079a2:	60fb      	str	r3, [r7, #12]
 80079a4:	e009      	b.n	80079ba <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	4413      	add	r3, r2
 80079ac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80079b0:	2200      	movs	r2, #0
 80079b2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	3301      	adds	r3, #1
 80079b8:	60fb      	str	r3, [r7, #12]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079c0:	d3f1      	bcc.n	80079a6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2240      	movs	r2, #64	; 0x40
 80079e6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3714      	adds	r7, #20
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bc80      	pop	{r7}
 8007a08:	4770      	bx	lr

08007a0a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b085      	sub	sp, #20
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007a14:	2300      	movs	r3, #0
 8007a16:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d017      	beq.n	8007a4e <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d80f      	bhi.n	8007a48 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007a2e:	1c59      	adds	r1, r3, #1
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	33dc      	adds	r3, #220	; 0xdc
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	4413      	add	r3, r2
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	73fb      	strb	r3, [r7, #15]
 8007a46:	e004      	b.n	8007a52 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007a48:	2302      	movs	r3, #2
 8007a4a:	73fb      	strb	r3, [r7, #15]
 8007a4c:	e001      	b.n	8007a52 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007a4e:	2302      	movs	r3, #2
 8007a50:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3714      	adds	r7, #20
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bc80      	pop	{r7}
 8007a5c:	4770      	bx	lr

08007a5e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b085      	sub	sp, #20
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
 8007a66:	460b      	mov	r3, r1
 8007a68:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 8007a74:	78fa      	ldrb	r2, [r7, #3]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d204      	bcs.n	8007a84 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	78fa      	ldrb	r2, [r7, #3]
 8007a7e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 8007a82:	e001      	b.n	8007a88 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007a84:	2302      	movs	r3, #2
 8007a86:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3714      	adds	r7, #20
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bc80      	pop	{r7}
 8007a92:	4770      	bx	lr

08007a94 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b087      	sub	sp, #28
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	4608      	mov	r0, r1
 8007a9e:	4611      	mov	r1, r2
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	70fb      	strb	r3, [r7, #3]
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	70bb      	strb	r3, [r7, #2]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f203 3336 	addw	r3, r3, #822	; 0x336
 8007abc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007abe:	e025      	b.n	8007b0c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007ac0:	7dfb      	ldrb	r3, [r7, #23]
 8007ac2:	221a      	movs	r2, #26
 8007ac4:	fb02 f303 	mul.w	r3, r2, r3
 8007ac8:	3308      	adds	r3, #8
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	4413      	add	r3, r2
 8007ace:	3302      	adds	r3, #2
 8007ad0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	795b      	ldrb	r3, [r3, #5]
 8007ad6:	78fa      	ldrb	r2, [r7, #3]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d002      	beq.n	8007ae2 <USBH_FindInterface+0x4e>
 8007adc:	78fb      	ldrb	r3, [r7, #3]
 8007ade:	2bff      	cmp	r3, #255	; 0xff
 8007ae0:	d111      	bne.n	8007b06 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007ae6:	78ba      	ldrb	r2, [r7, #2]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d002      	beq.n	8007af2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007aec:	78bb      	ldrb	r3, [r7, #2]
 8007aee:	2bff      	cmp	r3, #255	; 0xff
 8007af0:	d109      	bne.n	8007b06 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007af6:	787a      	ldrb	r2, [r7, #1]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d002      	beq.n	8007b02 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007afc:	787b      	ldrb	r3, [r7, #1]
 8007afe:	2bff      	cmp	r3, #255	; 0xff
 8007b00:	d101      	bne.n	8007b06 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007b02:	7dfb      	ldrb	r3, [r7, #23]
 8007b04:	e006      	b.n	8007b14 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007b06:	7dfb      	ldrb	r3, [r7, #23]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007b0c:	7dfb      	ldrb	r3, [r7, #23]
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d9d6      	bls.n	8007ac0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007b12:	23ff      	movs	r3, #255	; 0xff
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	371c      	adds	r7, #28
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bc80      	pop	{r7}
 8007b1c:	4770      	bx	lr

08007b1e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b082      	sub	sp, #8
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f004 ff9a 	bl	800ca60 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007b2c:	2101      	movs	r1, #1
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f005 f8b3 	bl	800cc9a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3708      	adds	r7, #8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
	...

08007b40 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b088      	sub	sp, #32
 8007b44:	af04      	add	r7, sp, #16
 8007b46:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007b48:	2302      	movs	r3, #2
 8007b4a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d102      	bne.n	8007b62 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2203      	movs	r2, #3
 8007b60:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	2b0b      	cmp	r3, #11
 8007b6a:	f200 81e4 	bhi.w	8007f36 <USBH_Process+0x3f6>
 8007b6e:	a201      	add	r2, pc, #4	; (adr r2, 8007b74 <USBH_Process+0x34>)
 8007b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b74:	08007ba5 	.word	0x08007ba5
 8007b78:	08007be3 	.word	0x08007be3
 8007b7c:	08007bf7 	.word	0x08007bf7
 8007b80:	08007eb5 	.word	0x08007eb5
 8007b84:	08007f37 	.word	0x08007f37
 8007b88:	08007cb7 	.word	0x08007cb7
 8007b8c:	08007e4f 	.word	0x08007e4f
 8007b90:	08007ce7 	.word	0x08007ce7
 8007b94:	08007d23 	.word	0x08007d23
 8007b98:	08007d5d 	.word	0x08007d5d
 8007b9c:	08007da5 	.word	0x08007da5
 8007ba0:	08007e9d 	.word	0x08007e9d
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f000 81c4 	beq.w	8007f3a <USBH_Process+0x3fa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007bb8:	20c8      	movs	r0, #200	; 0xc8
 8007bba:	f005 f8b4 	bl	800cd26 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f004 ffab 	bl	800cb1a <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007bd8:	2200      	movs	r2, #0
 8007bda:	4619      	mov	r1, r3
 8007bdc:	f002 fc8a 	bl	800a4f4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007be0:	e1ab      	b.n	8007f3a <USBH_Process+0x3fa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	f040 81a8 	bne.w	8007f3e <USBH_Process+0x3fe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->gState = HOST_DEV_ATTACHED;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2202      	movs	r2, #2
 8007bf2:	701a      	strb	r2, [r3, #0]
      }
      break;
 8007bf4:	e1a3      	b.n	8007f3e <USBH_Process+0x3fe>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d005      	beq.n	8007c0c <USBH_Process+0xcc>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007c06:	2104      	movs	r1, #4
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007c0c:	2064      	movs	r0, #100	; 0x64
 8007c0e:	f005 f88a 	bl	800cd26 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f004 ff5a 	bl	800cacc <USBH_LL_GetSpeed>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2205      	movs	r2, #5
 8007c26:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007c28:	2100      	movs	r1, #0
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f001 fa1f 	bl	800906e <USBH_AllocPipe>
 8007c30:	4603      	mov	r3, r0
 8007c32:	461a      	mov	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007c38:	2180      	movs	r1, #128	; 0x80
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f001 fa17 	bl	800906e <USBH_AllocPipe>
 8007c40:	4603      	mov	r3, r0
 8007c42:	461a      	mov	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	711a      	strb	r2, [r3, #4]


      /* Open Control pipes */
      USBH_OpenPipe(phost,
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	7919      	ldrb	r1, [r3, #4]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_in,
                    0x80U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 8007c5c:	b292      	uxth	r2, r2
 8007c5e:	9202      	str	r2, [sp, #8]
 8007c60:	2200      	movs	r2, #0
 8007c62:	9201      	str	r2, [sp, #4]
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	4603      	mov	r3, r0
 8007c68:	2280      	movs	r2, #128	; 0x80
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f001 f9d0 	bl	8009010 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost,
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	7959      	ldrb	r1, [r3, #5]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_out,
                    0x00U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 8007c84:	b292      	uxth	r2, r2
 8007c86:	9202      	str	r2, [sp, #8]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	9201      	str	r2, [sp, #4]
 8007c8c:	9300      	str	r3, [sp, #0]
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2200      	movs	r2, #0
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f001 f9bc 	bl	8009010 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007cac:	2200      	movs	r2, #0
 8007cae:	4619      	mov	r1, r3
 8007cb0:	f002 fc20 	bl	800a4f4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007cb4:	e14c      	b.n	8007f50 <USBH_Process+0x410>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      if (USBH_HandleEnum(phost) == USBH_OK)
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f950 	bl	8007f5c <USBH_HandleEnum>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f040 813f 	bne.w	8007f42 <USBH_Process+0x402>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d103      	bne.n	8007cde <USBH_Process+0x19e>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2208      	movs	r2, #8
 8007cda:	701a      	strb	r2, [r3, #0]
        {
          phost->gState = HOST_INPUT;
        }

      }
      break;
 8007cdc:	e131      	b.n	8007f42 <USBH_Process+0x402>
          phost->gState = HOST_INPUT;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2207      	movs	r2, #7
 8007ce2:	701a      	strb	r2, [r3, #0]
      break;
 8007ce4:	e12d      	b.n	8007f42 <USBH_Process+0x402>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f000 812a 	beq.w	8007f46 <USBH_Process+0x406>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007cf8:	2101      	movs	r1, #1
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2208      	movs	r2, #8
 8007d02:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2205      	movs	r2, #5
 8007d08:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007d18:	2200      	movs	r2, #0
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	f002 fbea 	bl	800a4f4 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007d20:	e111      	b.n	8007f46 <USBH_Process+0x406>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fc19 	bl	8008564 <USBH_SetCfg>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d102      	bne.n	8007d3e <USBH_Process+0x1fe>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2209      	movs	r2, #9
 8007d3c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2201      	movs	r2, #1
 8007d42:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007d52:	2200      	movs	r2, #0
 8007d54:	4619      	mov	r1, r3
 8007d56:	f002 fbcd 	bl	800a4f4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007d5a:	e0f9      	b.n	8007f50 <USBH_Process+0x410>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007d62:	f003 0320 	and.w	r3, r3, #32
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00a      	beq.n	8007d80 <USBH_Process+0x240>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007d6a:	2101      	movs	r1, #1
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 fc1c 	bl	80085aa <USBH_SetFeature>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d106      	bne.n	8007d86 <USBH_Process+0x246>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	220a      	movs	r2, #10
 8007d7c:	701a      	strb	r2, [r3, #0]
 8007d7e:	e002      	b.n	8007d86 <USBH_Process+0x246>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	220a      	movs	r2, #10
 8007d84:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	f002 fba9 	bl	800a4f4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007da2:	e0d5      	b.n	8007f50 <USBH_Process+0x410>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d040      	beq.n	8007e30 <USBH_Process+0x2f0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007db6:	2300      	movs	r3, #0
 8007db8:	73fb      	strb	r3, [r7, #15]
 8007dba:	e017      	b.n	8007dec <USBH_Process+0x2ac>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007dbc:	7bfb      	ldrb	r3, [r7, #15]
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	33dc      	adds	r3, #220	; 0xdc
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4413      	add	r3, r2
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	791a      	ldrb	r2, [r3, #4]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 3345 	ldrb.w	r3, [r3, #837]	; 0x345
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d108      	bne.n	8007de6 <USBH_Process+0x2a6>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007dd4:	7bfb      	ldrb	r3, [r7, #15]
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	33dc      	adds	r3, #220	; 0xdc
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	685a      	ldr	r2, [r3, #4]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
 8007de8:	3301      	adds	r3, #1
 8007dea:	73fb      	strb	r3, [r7, #15]
 8007dec:	7bfb      	ldrb	r3, [r7, #15]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d9e4      	bls.n	8007dbc <USBH_Process+0x27c>
          }
        }

        if (phost->pActiveClass != NULL)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d016      	beq.n	8007e2a <USBH_Process+0x2ea>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	4798      	blx	r3
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d109      	bne.n	8007e22 <USBH_Process+0x2e2>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2206      	movs	r2, #6
 8007e12:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007e1a:	2103      	movs	r1, #3
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	4798      	blx	r3
 8007e20:	e006      	b.n	8007e30 <USBH_Process+0x2f0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	220d      	movs	r2, #13
 8007e26:	701a      	strb	r2, [r3, #0]
 8007e28:	e002      	b.n	8007e30 <USBH_Process+0x2f0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	220d      	movs	r2, #13
 8007e2e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2205      	movs	r2, #5
 8007e34:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007e44:	2200      	movs	r2, #0
 8007e46:	4619      	mov	r1, r3
 8007e48:	f002 fb54 	bl	800a4f4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007e4c:	e080      	b.n	8007f50 <USBH_Process+0x410>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00f      	beq.n	8007e78 <USBH_Process+0x338>
      {
        status = phost->pActiveClass->Requests(phost);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	4798      	blx	r3
 8007e64:	4603      	mov	r3, r0
 8007e66:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007e68:	7bbb      	ldrb	r3, [r7, #14]
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d16c      	bne.n	8007f4a <USBH_Process+0x40a>
        {
          phost->gState = HOST_CLASS;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	220b      	movs	r2, #11
 8007e74:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007e76:	e068      	b.n	8007f4a <USBH_Process+0x40a>
        phost->gState = HOST_ABORT_STATE;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	220d      	movs	r2, #13
 8007e7c:	701a      	strb	r2, [r3, #0]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2205      	movs	r2, #5
 8007e82:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007e92:	2200      	movs	r2, #0
 8007e94:	4619      	mov	r1, r3
 8007e96:	f002 fb2d 	bl	800a4f4 <osMessagePut>
      break;
 8007e9a:	e056      	b.n	8007f4a <USBH_Process+0x40a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d053      	beq.n	8007f4e <USBH_Process+0x40e>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	4798      	blx	r3
      }
      break;
 8007eb2:	e04c      	b.n	8007f4e <USBH_Process+0x40e>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

      DeInitStateMachine(phost);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f7ff fd59 	bl	8007974 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d009      	beq.n	8007ee0 <USBH_Process+0x3a0>
      {
        phost->pActiveClass->DeInit(phost);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d005      	beq.n	8007ef6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ef0:	2105      	movs	r1, #5
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d107      	bne.n	8007f12 <USBH_Process+0x3d2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7ff fe07 	bl	8007b1e <USBH_Start>
 8007f10:	e002      	b.n	8007f18 <USBH_Process+0x3d8>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f004 fda4 	bl	800ca60 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	4619      	mov	r1, r3
 8007f30:	f002 fae0 	bl	800a4f4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f34:	e00c      	b.n	8007f50 <USBH_Process+0x410>

    case HOST_ABORT_STATE:
    default :
      break;
 8007f36:	bf00      	nop
 8007f38:	e00a      	b.n	8007f50 <USBH_Process+0x410>
      break;
 8007f3a:	bf00      	nop
 8007f3c:	e008      	b.n	8007f50 <USBH_Process+0x410>
      break;
 8007f3e:	bf00      	nop
 8007f40:	e006      	b.n	8007f50 <USBH_Process+0x410>
      break;
 8007f42:	bf00      	nop
 8007f44:	e004      	b.n	8007f50 <USBH_Process+0x410>
    break;
 8007f46:	bf00      	nop
 8007f48:	e002      	b.n	8007f50 <USBH_Process+0x410>
      break;
 8007f4a:	bf00      	nop
 8007f4c:	e000      	b.n	8007f50 <USBH_Process+0x410>
      break;
 8007f4e:	bf00      	nop
  }
  return USBH_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop

08007f5c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b088      	sub	sp, #32
 8007f60:	af04      	add	r7, sp, #16
 8007f62:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007f64:	2301      	movs	r3, #1
 8007f66:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	785b      	ldrb	r3, [r3, #1]
 8007f6c:	2b07      	cmp	r3, #7
 8007f6e:	f200 8132 	bhi.w	80081d6 <USBH_HandleEnum+0x27a>
 8007f72:	a201      	add	r2, pc, #4	; (adr r2, 8007f78 <USBH_HandleEnum+0x1c>)
 8007f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f78:	08007f99 	.word	0x08007f99
 8007f7c:	0800800b 	.word	0x0800800b
 8007f80:	08008023 	.word	0x08008023
 8007f84:	08008099 	.word	0x08008099
 8007f88:	080080b1 	.word	0x080080b1
 8007f8c:	080080cf 	.word	0x080080cf
 8007f90:	0800813b 	.word	0x0800813b
 8007f94:	0800818b 	.word	0x0800818b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      if (USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8007f98:	2108      	movs	r1, #8
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fa12 	bl	80083c4 <USBH_Get_DevDesc>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	f040 8119 	bne.w	80081da <USBH_HandleEnum+0x27e>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 232b 	ldrb.w	r2, [r3, #811]	; 0x32b
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost,
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	7919      	ldrb	r1, [r3, #4]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8007fcc:	b292      	uxth	r2, r2
 8007fce:	9202      	str	r2, [sp, #8]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	9201      	str	r2, [sp, #4]
 8007fd4:	9300      	str	r3, [sp, #0]
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2280      	movs	r2, #128	; 0x80
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f001 f818 	bl	8009010 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	7959      	ldrb	r1, [r3, #5]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8007ff4:	b292      	uxth	r2, r2
 8007ff6:	9202      	str	r2, [sp, #8]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	9201      	str	r2, [sp, #4]
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	4603      	mov	r3, r0
 8008000:	2200      	movs	r2, #0
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f001 f804 	bl	8009010 <USBH_OpenPipe>
      }
      break;
 8008008:	e0e7      	b.n	80081da <USBH_HandleEnum+0x27e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      if (USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE) == USBH_OK)
 800800a:	2112      	movs	r1, #18
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f9d9 	bl	80083c4 <USBH_Get_DevDesc>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	f040 80e2 	bne.w	80081de <USBH_HandleEnum+0x282>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2202      	movs	r2, #2
 800801e:	705a      	strb	r2, [r3, #1]

      }
      break;
 8008020:	e0dd      	b.n	80081de <USBH_HandleEnum+0x282>

    case ENUM_SET_ADDR:
      /* set address */
      if (USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8008022:	2101      	movs	r1, #1
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fa79 	bl	800851c <USBH_SetAddress>
 800802a:	4603      	mov	r3, r0
 800802c:	2b00      	cmp	r3, #0
 800802e:	f040 80d8 	bne.w	80081e2 <USBH_HandleEnum+0x286>
      {
        USBH_Delay(2U);
 8008032:	2002      	movs	r0, #2
 8008034:	f004 fe77 	bl	800cd26 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2203      	movs	r2, #3
 8008044:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost,
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	7919      	ldrb	r1, [r3, #4]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800805a:	b292      	uxth	r2, r2
 800805c:	9202      	str	r2, [sp, #8]
 800805e:	2200      	movs	r2, #0
 8008060:	9201      	str	r2, [sp, #4]
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	4603      	mov	r3, r0
 8008066:	2280      	movs	r2, #128	; 0x80
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 ffd1 	bl	8009010 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	7959      	ldrb	r1, [r3, #5]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8008082:	b292      	uxth	r2, r2
 8008084:	9202      	str	r2, [sp, #8]
 8008086:	2200      	movs	r2, #0
 8008088:	9201      	str	r2, [sp, #4]
 800808a:	9300      	str	r3, [sp, #0]
 800808c:	4603      	mov	r3, r0
 800808e:	2200      	movs	r2, #0
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 ffbd 	bl	8009010 <USBH_OpenPipe>
      }
      break;
 8008096:	e0a4      	b.n	80081e2 <USBH_HandleEnum+0x286>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      if (USBH_Get_CfgDesc(phost,
 8008098:	2109      	movs	r1, #9
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 f9ba 	bl	8008414 <USBH_Get_CfgDesc>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f040 809f 	bne.w	80081e6 <USBH_HandleEnum+0x28a>
                           USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2204      	movs	r2, #4
 80080ac:	705a      	strb	r2, [r3, #1]
      }
      break;
 80080ae:	e09a      	b.n	80081e6 <USBH_HandleEnum+0x28a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      if (USBH_Get_CfgDesc(phost,
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
 80080b6:	4619      	mov	r1, r3
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f9ab 	bl	8008414 <USBH_Get_CfgDesc>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f040 8092 	bne.w	80081ea <USBH_HandleEnum+0x28e>
                           phost->device.CfgDesc.wTotalLength) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2205      	movs	r2, #5
 80080ca:	705a      	strb	r2, [r3, #1]
      }
      break;
 80080cc:	e08d      	b.n	80081ea <USBH_HandleEnum+0x28e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d01e      	beq.n	8008116 <USBH_HandleEnum+0x1ba>
      {
        /* Check that Manufacturer String is available */

        if (USBH_Get_StringDesc(phost,
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                                phost->device.DevDesc.iManufacturer,
                                phost->device.Data,
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 80080e4:	23ff      	movs	r3, #255	; 0xff
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f9b8 	bl	800845c <USBH_Get_StringDesc>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d17d      	bne.n	80081ee <USBH_HandleEnum+0x292>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2206      	movs	r2, #6
 80080f6:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2205      	movs	r2, #5
 80080fc:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800810c:	2200      	movs	r2, #0
 800810e:	4619      	mov	r1, r3
 8008110:	f002 f9f0 	bl	800a4f4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008114:	e06b      	b.n	80081ee <USBH_HandleEnum+0x292>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2206      	movs	r2, #6
 800811a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2205      	movs	r2, #5
 8008120:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008130:	2200      	movs	r2, #0
 8008132:	4619      	mov	r1, r3
 8008134:	f002 f9de 	bl	800a4f4 <osMessagePut>
      break;
 8008138:	e059      	b.n	80081ee <USBH_HandleEnum+0x292>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8008140:	2b00      	cmp	r3, #0
 8008142:	d010      	beq.n	8008166 <USBH_HandleEnum+0x20a>
      {
        /* Check that Product string is available */
        if (USBH_Get_StringDesc(phost,
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 1333 	ldrb.w	r1, [r3, #819]	; 0x333
                                phost->device.DevDesc.iProduct,
                                phost->device.Data,
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 8008150:	23ff      	movs	r3, #255	; 0xff
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f982 	bl	800845c <USBH_Get_StringDesc>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d149      	bne.n	80081f2 <USBH_HandleEnum+0x296>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2207      	movs	r2, #7
 8008162:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008164:	e045      	b.n	80081f2 <USBH_HandleEnum+0x296>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2207      	movs	r2, #7
 800816a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2205      	movs	r2, #5
 8008170:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008180:	2200      	movs	r2, #0
 8008182:	4619      	mov	r1, r3
 8008184:	f002 f9b6 	bl	800a4f4 <osMessagePut>
      break;
 8008188:	e033      	b.n	80081f2 <USBH_HandleEnum+0x296>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00f      	beq.n	80081b4 <USBH_HandleEnum+0x258>
      {
        /* Check that Serial number string is available */
        if (USBH_Get_StringDesc(phost,
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                phost->device.DevDesc.iSerialNumber,
                                phost->device.Data,
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 80081a0:	23ff      	movs	r3, #255	; 0xff
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f95a 	bl	800845c <USBH_Get_StringDesc>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d123      	bne.n	80081f6 <USBH_HandleEnum+0x29a>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80081ae:	2300      	movs	r3, #0
 80081b0:	73fb      	strb	r3, [r7, #15]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80081b2:	e020      	b.n	80081f6 <USBH_HandleEnum+0x29a>
        Status = USBH_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2205      	movs	r2, #5
 80081bc:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80081cc:	2200      	movs	r2, #0
 80081ce:	4619      	mov	r1, r3
 80081d0:	f002 f990 	bl	800a4f4 <osMessagePut>
      break;
 80081d4:	e00f      	b.n	80081f6 <USBH_HandleEnum+0x29a>

    default:
      break;
 80081d6:	bf00      	nop
 80081d8:	e00e      	b.n	80081f8 <USBH_HandleEnum+0x29c>
      break;
 80081da:	bf00      	nop
 80081dc:	e00c      	b.n	80081f8 <USBH_HandleEnum+0x29c>
      break;
 80081de:	bf00      	nop
 80081e0:	e00a      	b.n	80081f8 <USBH_HandleEnum+0x29c>
      break;
 80081e2:	bf00      	nop
 80081e4:	e008      	b.n	80081f8 <USBH_HandleEnum+0x29c>
      break;
 80081e6:	bf00      	nop
 80081e8:	e006      	b.n	80081f8 <USBH_HandleEnum+0x29c>
      break;
 80081ea:	bf00      	nop
 80081ec:	e004      	b.n	80081f8 <USBH_HandleEnum+0x29c>
      break;
 80081ee:	bf00      	nop
 80081f0:	e002      	b.n	80081f8 <USBH_HandleEnum+0x29c>
      break;
 80081f2:	bf00      	nop
 80081f4:	e000      	b.n	80081f8 <USBH_HandleEnum+0x29c>
      break;
 80081f6:	bf00      	nop
  }
  return Status;
 80081f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop

08008204 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	683a      	ldr	r2, [r7, #0]
 8008212:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008216:	bf00      	nop
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	bc80      	pop	{r7}
 800821e:	4770      	bx	lr

08008220 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800822e:	1c5a      	adds	r2, r3, #1
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f804 	bl	8008244 <USBH_HandleSof>
}
 800823c:	bf00      	nop
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	b2db      	uxtb	r3, r3
 8008252:	2b0b      	cmp	r3, #11
 8008254:	d10a      	bne.n	800826c <USBH_HandleSof+0x28>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800825c:	2b00      	cmp	r3, #0
 800825e:	d005      	beq.n	800826c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	4798      	blx	r3
  }
}
 800826c:	bf00      	nop
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008298:	2200      	movs	r2, #0
 800829a:	4619      	mov	r1, r3
 800829c:	f002 f92a 	bl	800a4f4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80082a0:	bf00      	nop
}
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  return;
 80082b8:	bf00      	nop
}
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	bc80      	pop	{r7}
 80082c0:	4770      	bx	lr

080082c2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b082      	sub	sp, #8
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80082f6:	2200      	movs	r2, #0
 80082f8:	4619      	mov	r1, r3
 80082fa:	f002 f8fb 	bl	800a4f4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_connected = 0U;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.PortEnabled = 0U;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f004 fbb4 	bl	800ca96 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	791b      	ldrb	r3, [r3, #4]
 8008332:	4619      	mov	r1, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 febb 	bl	80090b0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	795b      	ldrb	r3, [r3, #5]
 800833e:	4619      	mov	r1, r3
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 feb5 	bl	80090b0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2201      	movs	r2, #1
 800834a:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800835a:	2200      	movs	r2, #0
 800835c:	4619      	mov	r1, r3
 800835e:	f002 f8c9 	bl	800a4f4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b086      	sub	sp, #24
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 13d4 	ldr.w	r1, [r3, #980]	; 0x3d4
 800837a:	f107 030c 	add.w	r3, r7, #12
 800837e:	f04f 32ff 	mov.w	r2, #4294967295
 8008382:	4618      	mov	r0, r3
 8008384:	f002 f8f6 	bl	800a574 <osMessageGet>
    if (event.status == osEventMessage)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2b10      	cmp	r3, #16
 800838c:	d1f2      	bne.n	8008374 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f7ff fbd6 	bl	8007b40 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8008394:	e7ee      	b.n	8008374 <USBH_Process_OS+0x8>

08008396 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b082      	sub	sp, #8
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2201      	movs	r2, #1
 80083a2:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80083b2:	2200      	movs	r2, #0
 80083b4:	4619      	mov	r1, r3
 80083b6:	f002 f89d 	bl	800a4f4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af02      	add	r7, sp, #8
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	460b      	mov	r3, r1
 80083ce:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80083d6:	78fb      	ldrb	r3, [r7, #3]
 80083d8:	b29b      	uxth	r3, r3
 80083da:	9300      	str	r3, [sp, #0]
 80083dc:	4613      	mov	r3, r2
 80083de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083e2:	2100      	movs	r1, #0
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 f864 	bl	80084b2 <USBH_GetDescriptor>
 80083ea:	4603      	mov	r3, r0
 80083ec:	73fb      	strb	r3, [r7, #15]
 80083ee:	7bfb      	ldrb	r3, [r7, #15]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d10a      	bne.n	800840a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f503 7049 	add.w	r0, r3, #804	; 0x324
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008400:	78fa      	ldrb	r2, [r7, #3]
 8008402:	b292      	uxth	r2, r2
 8008404:	4619      	mov	r1, r3
 8008406:	f000 f918 	bl	800863a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800840a:	7bfb      	ldrb	r3, [r7, #15]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af02      	add	r7, sp, #8
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	460b      	mov	r3, r1
 800841e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;

#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	331c      	adds	r3, #28
 8008424:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008426:	887b      	ldrh	r3, [r7, #2]
 8008428:	9300      	str	r3, [sp, #0]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008430:	2100      	movs	r1, #0
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f83d 	bl	80084b2 <USBH_GetDescriptor>
 8008438:	4603      	mov	r3, r0
 800843a:	72fb      	strb	r3, [r7, #11]
 800843c:	7afb      	ldrb	r3, [r7, #11]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d107      	bne.n	8008452 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f203 3336 	addw	r3, r3, #822	; 0x336
 8008448:	887a      	ldrh	r2, [r7, #2]
 800844a:	68f9      	ldr	r1, [r7, #12]
 800844c:	4618      	mov	r0, r3
 800844e:	f000 f963 	bl	8008718 <USBH_ParseCfgDesc>
  }

  return status;
 8008452:	7afb      	ldrb	r3, [r7, #11]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b088      	sub	sp, #32
 8008460:	af02      	add	r7, sp, #8
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	607a      	str	r2, [r7, #4]
 8008466:	461a      	mov	r2, r3
 8008468:	460b      	mov	r3, r1
 800846a:	72fb      	strb	r3, [r7, #11]
 800846c:	4613      	mov	r3, r2
 800846e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008470:	7afb      	ldrb	r3, [r7, #11]
 8008472:	b29b      	uxth	r3, r3
 8008474:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008478:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008480:	893b      	ldrh	r3, [r7, #8]
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	460b      	mov	r3, r1
 8008486:	2100      	movs	r1, #0
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f000 f812 	bl	80084b2 <USBH_GetDescriptor>
 800848e:	4603      	mov	r3, r0
 8008490:	75fb      	strb	r3, [r7, #23]
 8008492:	7dfb      	ldrb	r3, [r7, #23]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d107      	bne.n	80084a8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800849e:	893a      	ldrh	r2, [r7, #8]
 80084a0:	6879      	ldr	r1, [r7, #4]
 80084a2:	4618      	mov	r0, r3
 80084a4:	f000 fa34 	bl	8008910 <USBH_ParseStringDesc>
  }

  return status;
 80084a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3718      	adds	r7, #24
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b084      	sub	sp, #16
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	60f8      	str	r0, [r7, #12]
 80084ba:	607b      	str	r3, [r7, #4]
 80084bc:	460b      	mov	r3, r1
 80084be:	72fb      	strb	r3, [r7, #11]
 80084c0:	4613      	mov	r3, r2
 80084c2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	789b      	ldrb	r3, [r3, #2]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d11c      	bne.n	8008506 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80084cc:	7afb      	ldrb	r3, [r7, #11]
 80084ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80084d2:	b2da      	uxtb	r2, r3
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2206      	movs	r2, #6
 80084dc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	893a      	ldrh	r2, [r7, #8]
 80084e2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80084e4:	893b      	ldrh	r3, [r7, #8]
 80084e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80084ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084ee:	d104      	bne.n	80084fa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f240 4209 	movw	r2, #1033	; 0x409
 80084f6:	829a      	strh	r2, [r3, #20]
 80084f8:	e002      	b.n	8008500 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2200      	movs	r2, #0
 80084fe:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	8b3a      	ldrh	r2, [r7, #24]
 8008504:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008506:	8b3b      	ldrh	r3, [r7, #24]
 8008508:	461a      	mov	r2, r3
 800850a:	6879      	ldr	r1, [r7, #4]
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f000 fa4b 	bl	80089a8 <USBH_CtlReq>
 8008512:	4603      	mov	r3, r0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3710      	adds	r7, #16
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	460b      	mov	r3, r1
 8008526:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	789b      	ldrb	r3, [r3, #2]
 800852c:	2b01      	cmp	r3, #1
 800852e:	d10f      	bne.n	8008550 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2205      	movs	r2, #5
 800853a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800853c:	78fb      	ldrb	r3, [r7, #3]
 800853e:	b29a      	uxth	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008550:	2200      	movs	r2, #0
 8008552:	2100      	movs	r1, #0
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 fa27 	bl	80089a8 <USBH_CtlReq>
 800855a:	4603      	mov	r3, r0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	460b      	mov	r3, r1
 800856e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	789b      	ldrb	r3, [r3, #2]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d10e      	bne.n	8008596 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2209      	movs	r2, #9
 8008582:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	887a      	ldrh	r2, [r7, #2]
 8008588:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008596:	2200      	movs	r2, #0
 8008598:	2100      	movs	r1, #0
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 fa04 	bl	80089a8 <USBH_CtlReq>
 80085a0:	4603      	mov	r3, r0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3708      	adds	r7, #8
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b082      	sub	sp, #8
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
 80085b2:	460b      	mov	r3, r1
 80085b4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	789b      	ldrb	r3, [r3, #2]
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d10f      	bne.n	80085de <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2203      	movs	r2, #3
 80085c8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80085ca:	78fb      	ldrb	r3, [r7, #3]
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80085de:	2200      	movs	r2, #0
 80085e0:	2100      	movs	r1, #0
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f9e0 	bl	80089a8 <USBH_CtlReq>
 80085e8:	4603      	mov	r3, r0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b082      	sub	sp, #8
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	460b      	mov	r3, r1
 80085fc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	789b      	ldrb	r3, [r3, #2]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d10f      	bne.n	8008626 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2202      	movs	r2, #2
 800860a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008618:	78fb      	ldrb	r3, [r7, #3]
 800861a:	b29a      	uxth	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008626:	2200      	movs	r2, #0
 8008628:	2100      	movs	r1, #0
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 f9bc 	bl	80089a8 <USBH_CtlReq>
 8008630:	4603      	mov	r3, r0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800863a:	b480      	push	{r7}
 800863c:	b085      	sub	sp, #20
 800863e:	af00      	add	r7, sp, #0
 8008640:	60f8      	str	r0, [r7, #12]
 8008642:	60b9      	str	r1, [r7, #8]
 8008644:	4613      	mov	r3, r2
 8008646:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	781a      	ldrb	r2, [r3, #0]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	785a      	ldrb	r2, [r3, #1]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	3302      	adds	r3, #2
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	b29a      	uxth	r2, r3
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	3303      	adds	r3, #3
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	b29b      	uxth	r3, r3
 8008668:	021b      	lsls	r3, r3, #8
 800866a:	b29b      	uxth	r3, r3
 800866c:	4313      	orrs	r3, r2
 800866e:	b29a      	uxth	r2, r3
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	791a      	ldrb	r2, [r3, #4]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	795a      	ldrb	r2, [r3, #5]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	799a      	ldrb	r2, [r3, #6]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	79da      	ldrb	r2, [r3, #7]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008694:	88fb      	ldrh	r3, [r7, #6]
 8008696:	2b08      	cmp	r3, #8
 8008698:	d939      	bls.n	800870e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	3308      	adds	r3, #8
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	3309      	adds	r3, #9
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	021b      	lsls	r3, r3, #8
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	4313      	orrs	r3, r2
 80086b0:	b29a      	uxth	r2, r3
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	330a      	adds	r3, #10
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	b29a      	uxth	r2, r3
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	330b      	adds	r3, #11
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	021b      	lsls	r3, r3, #8
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	4313      	orrs	r3, r2
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	330c      	adds	r3, #12
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	b29a      	uxth	r2, r3
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	330d      	adds	r3, #13
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	021b      	lsls	r3, r3, #8
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	4313      	orrs	r3, r2
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	7b9a      	ldrb	r2, [r3, #14]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	7bda      	ldrb	r2, [r3, #15]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	7c1a      	ldrb	r2, [r3, #16]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	7c5a      	ldrb	r2, [r3, #17]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	745a      	strb	r2, [r3, #17]
  }
}
 800870e:	bf00      	nop
 8008710:	3714      	adds	r7, #20
 8008712:	46bd      	mov	sp, r7
 8008714:	bc80      	pop	{r7}
 8008716:	4770      	bx	lr

08008718 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b08a      	sub	sp, #40	; 0x28
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	4613      	mov	r3, r2
 8008724:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800872a:	2300      	movs	r3, #0
 800872c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008730:	2300      	movs	r3, #0
 8008732:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	781a      	ldrb	r2, [r3, #0]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	785a      	ldrb	r2, [r3, #1]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	3302      	adds	r3, #2
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	b29a      	uxth	r2, r3
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	3303      	adds	r3, #3
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	b29b      	uxth	r3, r3
 800875a:	021b      	lsls	r3, r3, #8
 800875c:	b29b      	uxth	r3, r3
 800875e:	4313      	orrs	r3, r2
 8008760:	b29a      	uxth	r2, r3
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	791a      	ldrb	r2, [r3, #4]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	795a      	ldrb	r2, [r3, #5]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	799a      	ldrb	r2, [r3, #6]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	79da      	ldrb	r2, [r3, #7]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	7a1a      	ldrb	r2, [r3, #8]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800878e:	88fb      	ldrh	r3, [r7, #6]
 8008790:	2b09      	cmp	r3, #9
 8008792:	d95f      	bls.n	8008854 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008794:	2309      	movs	r3, #9
 8008796:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008798:	2300      	movs	r3, #0
 800879a:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800879c:	e051      	b.n	8008842 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800879e:	f107 0316 	add.w	r3, r7, #22
 80087a2:	4619      	mov	r1, r3
 80087a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087a6:	f000 f8e5 	bl	8008974 <USBH_GetNextDesc>
 80087aa:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80087ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ae:	785b      	ldrb	r3, [r3, #1]
 80087b0:	2b04      	cmp	r3, #4
 80087b2:	d146      	bne.n	8008842 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80087b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087b8:	221a      	movs	r2, #26
 80087ba:	fb02 f303 	mul.w	r3, r2, r3
 80087be:	3308      	adds	r3, #8
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	4413      	add	r3, r2
 80087c4:	3302      	adds	r3, #2
 80087c6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80087c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087ca:	69f8      	ldr	r0, [r7, #28]
 80087cc:	f000 f846 	bl	800885c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80087d0:	2300      	movs	r3, #0
 80087d2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80087d6:	2300      	movs	r3, #0
 80087d8:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80087da:	e022      	b.n	8008822 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80087dc:	f107 0316 	add.w	r3, r7, #22
 80087e0:	4619      	mov	r1, r3
 80087e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087e4:	f000 f8c6 	bl	8008974 <USBH_GetNextDesc>
 80087e8:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80087ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ec:	785b      	ldrb	r3, [r3, #1]
 80087ee:	2b05      	cmp	r3, #5
 80087f0:	d117      	bne.n	8008822 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80087f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087f6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80087fa:	3201      	adds	r2, #1
 80087fc:	00d2      	lsls	r2, r2, #3
 80087fe:	211a      	movs	r1, #26
 8008800:	fb01 f303 	mul.w	r3, r1, r3
 8008804:	4413      	add	r3, r2
 8008806:	3308      	adds	r3, #8
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	4413      	add	r3, r2
 800880c:	3304      	adds	r3, #4
 800880e:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008810:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008812:	69b8      	ldr	r0, [r7, #24]
 8008814:	f000 f850 	bl	80088b8 <USBH_ParseEPDesc>
            ep_ix++;
 8008818:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800881c:	3301      	adds	r3, #1
 800881e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	791b      	ldrb	r3, [r3, #4]
 8008826:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800882a:	429a      	cmp	r2, r3
 800882c:	d204      	bcs.n	8008838 <USBH_ParseCfgDesc+0x120>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	885a      	ldrh	r2, [r3, #2]
 8008832:	8afb      	ldrh	r3, [r7, #22]
 8008834:	429a      	cmp	r2, r3
 8008836:	d8d1      	bhi.n	80087dc <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008838:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800883c:	3301      	adds	r3, #1
 800883e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008842:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008846:	2b01      	cmp	r3, #1
 8008848:	d804      	bhi.n	8008854 <USBH_ParseCfgDesc+0x13c>
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	885a      	ldrh	r2, [r3, #2]
 800884e:	8afb      	ldrh	r3, [r7, #22]
 8008850:	429a      	cmp	r2, r3
 8008852:	d8a4      	bhi.n	800879e <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008854:	bf00      	nop
 8008856:	3728      	adds	r7, #40	; 0x28
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	781a      	ldrb	r2, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	785a      	ldrb	r2, [r3, #1]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	789a      	ldrb	r2, [r3, #2]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	78da      	ldrb	r2, [r3, #3]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	791a      	ldrb	r2, [r3, #4]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	795a      	ldrb	r2, [r3, #5]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	799a      	ldrb	r2, [r3, #6]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	79da      	ldrb	r2, [r3, #7]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	7a1a      	ldrb	r2, [r3, #8]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	721a      	strb	r2, [r3, #8]
}
 80088ae:	bf00      	nop
 80088b0:	370c      	adds	r7, #12
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bc80      	pop	{r7}
 80088b6:	4770      	bx	lr

080088b8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	781a      	ldrb	r2, [r3, #0]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	785a      	ldrb	r2, [r3, #1]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	789a      	ldrb	r2, [r3, #2]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	78da      	ldrb	r2, [r3, #3]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	3304      	adds	r3, #4
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	b29a      	uxth	r2, r3
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	3305      	adds	r3, #5
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	021b      	lsls	r3, r3, #8
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	4313      	orrs	r3, r2
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	799a      	ldrb	r2, [r3, #6]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	719a      	strb	r2, [r3, #6]
}
 8008906:	bf00      	nop
 8008908:	370c      	adds	r7, #12
 800890a:	46bd      	mov	sp, r7
 800890c:	bc80      	pop	{r7}
 800890e:	4770      	bx	lr

08008910 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008910:	b480      	push	{r7}
 8008912:	b087      	sub	sp, #28
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	4613      	mov	r3, r2
 800891c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	3301      	adds	r3, #1
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	2b03      	cmp	r3, #3
 8008926:	d120      	bne.n	800896a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	1e9a      	subs	r2, r3, #2
 800892e:	88fb      	ldrh	r3, [r7, #6]
 8008930:	4293      	cmp	r3, r2
 8008932:	bf28      	it	cs
 8008934:	4613      	movcs	r3, r2
 8008936:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	3302      	adds	r3, #2
 800893c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800893e:	2300      	movs	r3, #0
 8008940:	82fb      	strh	r3, [r7, #22]
 8008942:	e00b      	b.n	800895c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008944:	8afb      	ldrh	r3, [r7, #22]
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	4413      	add	r3, r2
 800894a:	781a      	ldrb	r2, [r3, #0]
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	3301      	adds	r3, #1
 8008954:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008956:	8afb      	ldrh	r3, [r7, #22]
 8008958:	3302      	adds	r3, #2
 800895a:	82fb      	strh	r3, [r7, #22]
 800895c:	8afa      	ldrh	r2, [r7, #22]
 800895e:	8abb      	ldrh	r3, [r7, #20]
 8008960:	429a      	cmp	r2, r3
 8008962:	d3ef      	bcc.n	8008944 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	2200      	movs	r2, #0
 8008968:	701a      	strb	r2, [r3, #0]
  }
}
 800896a:	bf00      	nop
 800896c:	371c      	adds	r7, #28
 800896e:	46bd      	mov	sp, r7
 8008970:	bc80      	pop	{r7}
 8008972:	4770      	bx	lr

08008974 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	881a      	ldrh	r2, [r3, #0]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	b29b      	uxth	r3, r3
 8008988:	4413      	add	r3, r2
 800898a:	b29a      	uxth	r2, r3
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4413      	add	r3, r2
 800899a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800899c:	68fb      	ldr	r3, [r7, #12]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3714      	adds	r7, #20
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bc80      	pop	{r7}
 80089a6:	4770      	bx	lr

080089a8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b086      	sub	sp, #24
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	4613      	mov	r3, r2
 80089b4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80089b6:	2301      	movs	r3, #1
 80089b8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	789b      	ldrb	r3, [r3, #2]
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d002      	beq.n	80089c8 <USBH_CtlReq+0x20>
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d01d      	beq.n	8008a02 <USBH_CtlReq+0x5a>
        }
      }
      break;

    default:
      break;
 80089c6:	e042      	b.n	8008a4e <USBH_CtlReq+0xa6>
      phost->Control.buff = buff;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	88fa      	ldrh	r2, [r7, #6]
 80089d2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2201      	movs	r2, #1
 80089d8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2202      	movs	r2, #2
 80089de:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80089e0:	2301      	movs	r3, #1
 80089e2:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2203      	movs	r2, #3
 80089e8:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80089f8:	2200      	movs	r2, #0
 80089fa:	4619      	mov	r1, r3
 80089fc:	f001 fd7a 	bl	800a4f4 <osMessagePut>
      break;
 8008a00:	e025      	b.n	8008a4e <USBH_CtlReq+0xa6>
      status = USBH_HandleControl(phost);
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	f000 f828 	bl	8008a58 <USBH_HandleControl>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8008a0c:	7dfb      	ldrb	r3, [r7, #23]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d108      	bne.n	8008a24 <USBH_CtlReq+0x7c>
        phost->RequestState = CMD_SEND;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2201      	movs	r2, #1
 8008a16:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	75fb      	strb	r3, [r7, #23]
      break;
 8008a22:	e013      	b.n	8008a4c <USBH_CtlReq+0xa4>
      else if (status == USBH_NOT_SUPPORTED)
 8008a24:	7dfb      	ldrb	r3, [r7, #23]
 8008a26:	2b03      	cmp	r3, #3
 8008a28:	d108      	bne.n	8008a3c <USBH_CtlReq+0x94>
        phost->RequestState = CMD_SEND;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2200      	movs	r2, #0
 8008a34:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008a36:	2303      	movs	r3, #3
 8008a38:	75fb      	strb	r3, [r7, #23]
      break;
 8008a3a:	e007      	b.n	8008a4c <USBH_CtlReq+0xa4>
        if (status == USBH_FAIL)
 8008a3c:	7dfb      	ldrb	r3, [r7, #23]
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d104      	bne.n	8008a4c <USBH_CtlReq+0xa4>
          phost->RequestState = CMD_SEND;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2201      	movs	r2, #1
 8008a46:	709a      	strb	r2, [r3, #2]
          status = USBH_FAIL;
 8008a48:	2302      	movs	r3, #2
 8008a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8008a4c:	bf00      	nop
  }
  return status;
 8008a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3718      	adds	r7, #24
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b086      	sub	sp, #24
 8008a5c:	af02      	add	r7, sp, #8
 8008a5e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008a60:	2301      	movs	r3, #1
 8008a62:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008a64:	2300      	movs	r3, #0
 8008a66:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	7e1b      	ldrb	r3, [r3, #24]
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	2b0a      	cmp	r3, #10
 8008a70:	f200 821d 	bhi.w	8008eae <USBH_HandleControl+0x456>
 8008a74:	a201      	add	r2, pc, #4	; (adr r2, 8008a7c <USBH_HandleControl+0x24>)
 8008a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a7a:	bf00      	nop
 8008a7c:	08008aa9 	.word	0x08008aa9
 8008a80:	08008ac3 	.word	0x08008ac3
 8008a84:	08008b65 	.word	0x08008b65
 8008a88:	08008b8b 	.word	0x08008b8b
 8008a8c:	08008c17 	.word	0x08008c17
 8008a90:	08008c41 	.word	0x08008c41
 8008a94:	08008d03 	.word	0x08008d03
 8008a98:	08008d25 	.word	0x08008d25
 8008a9c:	08008db7 	.word	0x08008db7
 8008aa0:	08008ddd 	.word	0x08008ddd
 8008aa4:	08008e6f 	.word	0x08008e6f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f103 0110 	add.w	r1, r3, #16
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	795b      	ldrb	r3, [r3, #5]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 fa0b 	bl	8008ed0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2202      	movs	r2, #2
 8008abe:	761a      	strb	r2, [r3, #24]
      break;
 8008ac0:	e200      	b.n	8008ec4 <USBH_HandleControl+0x46c>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	795b      	ldrb	r3, [r3, #5]
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f004 f8d3 	bl	800cc74 <USBH_LL_GetURBState>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008ad2:	7bbb      	ldrb	r3, [r7, #14]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d12c      	bne.n	8008b32 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	7c1b      	ldrb	r3, [r3, #16]
 8008adc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ae0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	8adb      	ldrh	r3, [r3, #22]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d00a      	beq.n	8008b00 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008aea:	7b7b      	ldrb	r3, [r7, #13]
 8008aec:	2b80      	cmp	r3, #128	; 0x80
 8008aee:	d103      	bne.n	8008af8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2203      	movs	r2, #3
 8008af4:	761a      	strb	r2, [r3, #24]
 8008af6:	e00d      	b.n	8008b14 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2205      	movs	r2, #5
 8008afc:	761a      	strb	r2, [r3, #24]
 8008afe:	e009      	b.n	8008b14 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8008b00:	7b7b      	ldrb	r3, [r7, #13]
 8008b02:	2b80      	cmp	r3, #128	; 0x80
 8008b04:	d103      	bne.n	8008b0e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2209      	movs	r2, #9
 8008b0a:	761a      	strb	r2, [r3, #24]
 8008b0c:	e002      	b.n	8008b14 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2207      	movs	r2, #7
 8008b12:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2203      	movs	r2, #3
 8008b18:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008b28:	2200      	movs	r2, #0
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	f001 fce2 	bl	800a4f4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008b30:	e1bf      	b.n	8008eb2 <USBH_HandleControl+0x45a>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008b32:	7bbb      	ldrb	r3, [r7, #14]
 8008b34:	2b04      	cmp	r3, #4
 8008b36:	d003      	beq.n	8008b40 <USBH_HandleControl+0xe8>
 8008b38:	7bbb      	ldrb	r3, [r7, #14]
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	f040 81b9 	bne.w	8008eb2 <USBH_HandleControl+0x45a>
          phost->Control.state = CTRL_ERROR;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	220b      	movs	r2, #11
 8008b44:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2203      	movs	r2, #3
 8008b4a:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	f001 fcc9 	bl	800a4f4 <osMessagePut>
      break;
 8008b62:	e1a6      	b.n	8008eb2 <USBH_HandleControl+0x45a>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6899      	ldr	r1, [r3, #8]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	899a      	ldrh	r2, [r3, #12]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	791b      	ldrb	r3, [r3, #4]
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 f9e6 	bl	8008f4e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2204      	movs	r2, #4
 8008b86:	761a      	strb	r2, [r3, #24]
      break;
 8008b88:	e19c      	b.n	8008ec4 <USBH_HandleControl+0x46c>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	791b      	ldrb	r3, [r3, #4]
 8008b8e:	4619      	mov	r1, r3
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f004 f86f 	bl	800cc74 <USBH_LL_GetURBState>
 8008b96:	4603      	mov	r3, r0
 8008b98:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008b9a:	7bbb      	ldrb	r3, [r7, #14]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d110      	bne.n	8008bc2 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2209      	movs	r2, #9
 8008ba4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2203      	movs	r2, #3
 8008baa:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008bba:	2200      	movs	r2, #0
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	f001 fc99 	bl	800a4f4 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008bc2:	7bbb      	ldrb	r3, [r7, #14]
 8008bc4:	2b05      	cmp	r3, #5
 8008bc6:	d110      	bne.n	8008bea <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2203      	movs	r2, #3
 8008bd0:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008be0:	2200      	movs	r2, #0
 8008be2:	4619      	mov	r1, r3
 8008be4:	f001 fc86 	bl	800a4f4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008be8:	e165      	b.n	8008eb6 <USBH_HandleControl+0x45e>
        if (URB_Status == USBH_URB_ERROR)
 8008bea:	7bbb      	ldrb	r3, [r7, #14]
 8008bec:	2b04      	cmp	r3, #4
 8008bee:	f040 8162 	bne.w	8008eb6 <USBH_HandleControl+0x45e>
          phost->Control.state = CTRL_ERROR;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	220b      	movs	r2, #11
 8008bf6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2203      	movs	r2, #3
 8008bfc:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	4619      	mov	r1, r3
 8008c10:	f001 fc70 	bl	800a4f4 <osMessagePut>
      break;
 8008c14:	e14f      	b.n	8008eb6 <USBH_HandleControl+0x45e>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6899      	ldr	r1, [r3, #8]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	899a      	ldrh	r2, [r3, #12]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	795b      	ldrb	r3, [r3, #5]
 8008c22:	2001      	movs	r0, #1
 8008c24:	9000      	str	r0, [sp, #0]
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 f96c 	bl	8008f04 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2206      	movs	r2, #6
 8008c3c:	761a      	strb	r2, [r3, #24]
      break;
 8008c3e:	e141      	b.n	8008ec4 <USBH_HandleControl+0x46c>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	795b      	ldrb	r3, [r3, #5]
 8008c44:	4619      	mov	r1, r3
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f004 f814 	bl	800cc74 <USBH_LL_GetURBState>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008c50:	7bbb      	ldrb	r3, [r7, #14]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d111      	bne.n	8008c7a <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2207      	movs	r2, #7
 8008c5a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2203      	movs	r2, #3
 8008c60:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008c70:	2200      	movs	r2, #0
 8008c72:	4619      	mov	r1, r3
 8008c74:	f001 fc3e 	bl	800a4f4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008c78:	e11f      	b.n	8008eba <USBH_HandleControl+0x462>
      else if (URB_Status == USBH_URB_STALL)
 8008c7a:	7bbb      	ldrb	r3, [r7, #14]
 8008c7c:	2b05      	cmp	r3, #5
 8008c7e:	d113      	bne.n	8008ca8 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	220c      	movs	r2, #12
 8008c84:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008c86:	2303      	movs	r3, #3
 8008c88:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2203      	movs	r2, #3
 8008c8e:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	f001 fc27 	bl	800a4f4 <osMessagePut>
      break;
 8008ca6:	e108      	b.n	8008eba <USBH_HandleControl+0x462>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008ca8:	7bbb      	ldrb	r3, [r7, #14]
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	d111      	bne.n	8008cd2 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2205      	movs	r2, #5
 8008cb2:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2203      	movs	r2, #3
 8008cb8:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008cc8:	2200      	movs	r2, #0
 8008cca:	4619      	mov	r1, r3
 8008ccc:	f001 fc12 	bl	800a4f4 <osMessagePut>
      break;
 8008cd0:	e0f3      	b.n	8008eba <USBH_HandleControl+0x462>
        if (URB_Status == USBH_URB_ERROR)
 8008cd2:	7bbb      	ldrb	r3, [r7, #14]
 8008cd4:	2b04      	cmp	r3, #4
 8008cd6:	f040 80f0 	bne.w	8008eba <USBH_HandleControl+0x462>
          phost->Control.state = CTRL_ERROR;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	220b      	movs	r2, #11
 8008cde:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2203      	movs	r2, #3
 8008ce8:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	f001 fbfa 	bl	800a4f4 <osMessagePut>
      break;
 8008d00:	e0db      	b.n	8008eba <USBH_HandleControl+0x462>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	791b      	ldrb	r3, [r3, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	2100      	movs	r1, #0
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f91f 	bl	8008f4e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d16:	b29a      	uxth	r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2208      	movs	r2, #8
 8008d20:	761a      	strb	r2, [r3, #24]

      break;
 8008d22:	e0cf      	b.n	8008ec4 <USBH_HandleControl+0x46c>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	791b      	ldrb	r3, [r3, #4]
 8008d28:	4619      	mov	r1, r3
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f003 ffa2 	bl	800cc74 <USBH_LL_GetURBState>
 8008d30:	4603      	mov	r3, r0
 8008d32:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008d34:	7bbb      	ldrb	r3, [r7, #14]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d113      	bne.n	8008d62 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	220d      	movs	r2, #13
 8008d3e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2203      	movs	r2, #3
 8008d48:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008d58:	2200      	movs	r2, #0
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	f001 fbca 	bl	800a4f4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008d60:	e0ad      	b.n	8008ebe <USBH_HandleControl+0x466>
      else if (URB_Status == USBH_URB_ERROR)
 8008d62:	7bbb      	ldrb	r3, [r7, #14]
 8008d64:	2b04      	cmp	r3, #4
 8008d66:	d111      	bne.n	8008d8c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	220b      	movs	r2, #11
 8008d6c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2203      	movs	r2, #3
 8008d72:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008d82:	2200      	movs	r2, #0
 8008d84:	4619      	mov	r1, r3
 8008d86:	f001 fbb5 	bl	800a4f4 <osMessagePut>
      break;
 8008d8a:	e098      	b.n	8008ebe <USBH_HandleControl+0x466>
        if (URB_Status == USBH_URB_STALL)
 8008d8c:	7bbb      	ldrb	r3, [r7, #14]
 8008d8e:	2b05      	cmp	r3, #5
 8008d90:	f040 8095 	bne.w	8008ebe <USBH_HandleControl+0x466>
          status = USBH_NOT_SUPPORTED;
 8008d94:	2303      	movs	r3, #3
 8008d96:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2203      	movs	r2, #3
 8008d9c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008dac:	2200      	movs	r2, #0
 8008dae:	4619      	mov	r1, r3
 8008db0:	f001 fba0 	bl	800a4f4 <osMessagePut>
      break;
 8008db4:	e083      	b.n	8008ebe <USBH_HandleControl+0x466>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	795b      	ldrb	r3, [r3, #5]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	9200      	str	r2, [sp, #0]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f89e 	bl	8008f04 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008dce:	b29a      	uxth	r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	220a      	movs	r2, #10
 8008dd8:	761a      	strb	r2, [r3, #24]
      break;
 8008dda:	e073      	b.n	8008ec4 <USBH_HandleControl+0x46c>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	795b      	ldrb	r3, [r3, #5]
 8008de0:	4619      	mov	r1, r3
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f003 ff46 	bl	800cc74 <USBH_LL_GetURBState>
 8008de8:	4603      	mov	r3, r0
 8008dea:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008dec:	7bbb      	ldrb	r3, [r7, #14]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d113      	bne.n	8008e1a <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8008df2:	2300      	movs	r3, #0
 8008df4:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	220d      	movs	r2, #13
 8008dfa:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2203      	movs	r2, #3
 8008e00:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008e10:	2200      	movs	r2, #0
 8008e12:	4619      	mov	r1, r3
 8008e14:	f001 fb6e 	bl	800a4f4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008e18:	e053      	b.n	8008ec2 <USBH_HandleControl+0x46a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008e1a:	7bbb      	ldrb	r3, [r7, #14]
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d111      	bne.n	8008e44 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2209      	movs	r2, #9
 8008e24:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2203      	movs	r2, #3
 8008e2a:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	f001 fb59 	bl	800a4f4 <osMessagePut>
      break;
 8008e42:	e03e      	b.n	8008ec2 <USBH_HandleControl+0x46a>
        if (URB_Status == USBH_URB_ERROR)
 8008e44:	7bbb      	ldrb	r3, [r7, #14]
 8008e46:	2b04      	cmp	r3, #4
 8008e48:	d13b      	bne.n	8008ec2 <USBH_HandleControl+0x46a>
          phost->Control.state = CTRL_ERROR;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	220b      	movs	r2, #11
 8008e4e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2203      	movs	r2, #3
 8008e54:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008e64:	2200      	movs	r2, #0
 8008e66:	4619      	mov	r1, r3
 8008e68:	f001 fb44 	bl	800a4f4 <osMessagePut>
      break;
 8008e6c:	e029      	b.n	8008ec2 <USBH_HandleControl+0x46a>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	7e5b      	ldrb	r3, [r3, #25]
 8008e72:	3301      	adds	r3, #1
 8008e74:	b2da      	uxtb	r2, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	765a      	strb	r2, [r3, #25]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	7e5b      	ldrb	r3, [r3, #25]
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	d806      	bhi.n	8008e90 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2201      	movs	r2, #1
 8008e86:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	709a      	strb	r2, [r3, #2]
        phost->Control.errorcount = 0U;
        USBH_ErrLog("Control error: Device not responding");
        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008e8e:	e019      	b.n	8008ec4 <USBH_HandleControl+0x46c>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e96:	2106      	movs	r1, #6
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	765a      	strb	r2, [r3, #25]
        phost->gState = HOST_IDLE;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008ea8:	2302      	movs	r3, #2
 8008eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8008eac:	e00a      	b.n	8008ec4 <USBH_HandleControl+0x46c>

    default:
      break;
 8008eae:	bf00      	nop
 8008eb0:	e008      	b.n	8008ec4 <USBH_HandleControl+0x46c>
      break;
 8008eb2:	bf00      	nop
 8008eb4:	e006      	b.n	8008ec4 <USBH_HandleControl+0x46c>
      break;
 8008eb6:	bf00      	nop
 8008eb8:	e004      	b.n	8008ec4 <USBH_HandleControl+0x46c>
      break;
 8008eba:	bf00      	nop
 8008ebc:	e002      	b.n	8008ec4 <USBH_HandleControl+0x46c>
      break;
 8008ebe:	bf00      	nop
 8008ec0:	e000      	b.n	8008ec4 <USBH_HandleControl+0x46c>
      break;
 8008ec2:	bf00      	nop
  }

  return status;
 8008ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop

08008ed0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b088      	sub	sp, #32
 8008ed4:	af04      	add	r7, sp, #16
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	4613      	mov	r3, r2
 8008edc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008ede:	79f9      	ldrb	r1, [r7, #7]
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	9303      	str	r3, [sp, #12]
 8008ee4:	2308      	movs	r3, #8
 8008ee6:	9302      	str	r3, [sp, #8]
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	9301      	str	r3, [sp, #4]
 8008eec:	2300      	movs	r3, #0
 8008eee:	9300      	str	r3, [sp, #0]
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f003 fe8c 	bl	800cc12 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b088      	sub	sp, #32
 8008f08:	af04      	add	r7, sp, #16
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	4611      	mov	r1, r2
 8008f10:	461a      	mov	r2, r3
 8008f12:	460b      	mov	r3, r1
 8008f14:	80fb      	strh	r3, [r7, #6]
 8008f16:	4613      	mov	r3, r2
 8008f18:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d001      	beq.n	8008f28 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008f24:	2300      	movs	r3, #0
 8008f26:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008f28:	7979      	ldrb	r1, [r7, #5]
 8008f2a:	7e3b      	ldrb	r3, [r7, #24]
 8008f2c:	9303      	str	r3, [sp, #12]
 8008f2e:	88fb      	ldrh	r3, [r7, #6]
 8008f30:	9302      	str	r3, [sp, #8]
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	9301      	str	r3, [sp, #4]
 8008f36:	2301      	movs	r3, #1
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f003 fe67 	bl	800cc12 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b088      	sub	sp, #32
 8008f52:	af04      	add	r7, sp, #16
 8008f54:	60f8      	str	r0, [r7, #12]
 8008f56:	60b9      	str	r1, [r7, #8]
 8008f58:	4611      	mov	r1, r2
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	80fb      	strh	r3, [r7, #6]
 8008f60:	4613      	mov	r3, r2
 8008f62:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008f64:	7979      	ldrb	r1, [r7, #5]
 8008f66:	2300      	movs	r3, #0
 8008f68:	9303      	str	r3, [sp, #12]
 8008f6a:	88fb      	ldrh	r3, [r7, #6]
 8008f6c:	9302      	str	r3, [sp, #8]
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	9301      	str	r3, [sp, #4]
 8008f72:	2301      	movs	r3, #1
 8008f74:	9300      	str	r3, [sp, #0]
 8008f76:	2300      	movs	r3, #0
 8008f78:	2201      	movs	r2, #1
 8008f7a:	68f8      	ldr	r0, [r7, #12]
 8008f7c:	f003 fe49 	bl	800cc12 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008f80:	2300      	movs	r3, #0

}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b088      	sub	sp, #32
 8008f8e:	af04      	add	r7, sp, #16
 8008f90:	60f8      	str	r0, [r7, #12]
 8008f92:	60b9      	str	r1, [r7, #8]
 8008f94:	4611      	mov	r1, r2
 8008f96:	461a      	mov	r2, r3
 8008f98:	460b      	mov	r3, r1
 8008f9a:	80fb      	strh	r3, [r7, #6]
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d001      	beq.n	8008fae <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008faa:	2300      	movs	r3, #0
 8008fac:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008fae:	7979      	ldrb	r1, [r7, #5]
 8008fb0:	7e3b      	ldrb	r3, [r7, #24]
 8008fb2:	9303      	str	r3, [sp, #12]
 8008fb4:	88fb      	ldrh	r3, [r7, #6]
 8008fb6:	9302      	str	r3, [sp, #8]
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	9301      	str	r3, [sp, #4]
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	9300      	str	r3, [sp, #0]
 8008fc0:	2302      	movs	r3, #2
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f003 fe24 	bl	800cc12 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b088      	sub	sp, #32
 8008fd8:	af04      	add	r7, sp, #16
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	4611      	mov	r1, r2
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	80fb      	strh	r3, [r7, #6]
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008fea:	7979      	ldrb	r1, [r7, #5]
 8008fec:	2300      	movs	r3, #0
 8008fee:	9303      	str	r3, [sp, #12]
 8008ff0:	88fb      	ldrh	r3, [r7, #6]
 8008ff2:	9302      	str	r3, [sp, #8]
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	9301      	str	r3, [sp, #4]
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	9300      	str	r3, [sp, #0]
 8008ffc:	2302      	movs	r3, #2
 8008ffe:	2201      	movs	r2, #1
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f003 fe06 	bl	800cc12 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b086      	sub	sp, #24
 8009014:	af04      	add	r7, sp, #16
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	4608      	mov	r0, r1
 800901a:	4611      	mov	r1, r2
 800901c:	461a      	mov	r2, r3
 800901e:	4603      	mov	r3, r0
 8009020:	70fb      	strb	r3, [r7, #3]
 8009022:	460b      	mov	r3, r1
 8009024:	70bb      	strb	r3, [r7, #2]
 8009026:	4613      	mov	r3, r2
 8009028:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800902a:	7878      	ldrb	r0, [r7, #1]
 800902c:	78ba      	ldrb	r2, [r7, #2]
 800902e:	78f9      	ldrb	r1, [r7, #3]
 8009030:	8b3b      	ldrh	r3, [r7, #24]
 8009032:	9302      	str	r3, [sp, #8]
 8009034:	7d3b      	ldrb	r3, [r7, #20]
 8009036:	9301      	str	r3, [sp, #4]
 8009038:	7c3b      	ldrb	r3, [r7, #16]
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	4603      	mov	r3, r0
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f003 fd99 	bl	800cb76 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009044:	2300      	movs	r3, #0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b082      	sub	sp, #8
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
 8009056:	460b      	mov	r3, r1
 8009058:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800905a:	78fb      	ldrb	r3, [r7, #3]
 800905c:	4619      	mov	r1, r3
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f003 fdb8 	bl	800cbd4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3708      	adds	r7, #8
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b084      	sub	sp, #16
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
 8009076:	460b      	mov	r3, r1
 8009078:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f835 	bl	80090ea <USBH_GetFreePipe>
 8009080:	4603      	mov	r3, r0
 8009082:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009084:	89fb      	ldrh	r3, [r7, #14]
 8009086:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800908a:	4293      	cmp	r3, r2
 800908c:	d00a      	beq.n	80090a4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800908e:	78fa      	ldrb	r2, [r7, #3]
 8009090:	89fb      	ldrh	r3, [r7, #14]
 8009092:	f003 030f 	and.w	r3, r3, #15
 8009096:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800909a:	6879      	ldr	r1, [r7, #4]
 800909c:	33e0      	adds	r3, #224	; 0xe0
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	440b      	add	r3, r1
 80090a2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80090a4:	89fb      	ldrh	r3, [r7, #14]
 80090a6:	b2db      	uxtb	r3, r3
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	460b      	mov	r3, r1
 80090ba:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80090bc:	78fb      	ldrb	r3, [r7, #3]
 80090be:	2b0a      	cmp	r3, #10
 80090c0:	d80d      	bhi.n	80090de <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80090c2:	78fb      	ldrb	r3, [r7, #3]
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	33e0      	adds	r3, #224	; 0xe0
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	4413      	add	r3, r2
 80090cc:	685a      	ldr	r2, [r3, #4]
 80090ce:	78fb      	ldrb	r3, [r7, #3]
 80090d0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80090d4:	6879      	ldr	r1, [r7, #4]
 80090d6:	33e0      	adds	r3, #224	; 0xe0
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	440b      	add	r3, r1
 80090dc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80090de:	2300      	movs	r3, #0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bc80      	pop	{r7}
 80090e8:	4770      	bx	lr

080090ea <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80090ea:	b480      	push	{r7}
 80090ec:	b085      	sub	sp, #20
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80090f2:	2300      	movs	r3, #0
 80090f4:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80090f6:	2300      	movs	r3, #0
 80090f8:	73fb      	strb	r3, [r7, #15]
 80090fa:	e00f      	b.n	800911c <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80090fc:	7bfb      	ldrb	r3, [r7, #15]
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	33e0      	adds	r3, #224	; 0xe0
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	4413      	add	r3, r2
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800910c:	2b00      	cmp	r3, #0
 800910e:	d102      	bne.n	8009116 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009110:	7bfb      	ldrb	r3, [r7, #15]
 8009112:	b29b      	uxth	r3, r3
 8009114:	e007      	b.n	8009126 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009116:	7bfb      	ldrb	r3, [r7, #15]
 8009118:	3301      	adds	r3, #1
 800911a:	73fb      	strb	r3, [r7, #15]
 800911c:	7bfb      	ldrb	r3, [r7, #15]
 800911e:	2b0a      	cmp	r3, #10
 8009120:	d9ec      	bls.n	80090fc <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009122:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009126:	4618      	mov	r0, r3
 8009128:	3714      	adds	r7, #20
 800912a:	46bd      	mov	sp, r7
 800912c:	bc80      	pop	{r7}
 800912e:	4770      	bx	lr

08009130 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	4603      	mov	r3, r0
 8009138:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800913a:	79fb      	ldrb	r3, [r7, #7]
 800913c:	4a08      	ldr	r2, [pc, #32]	; (8009160 <disk_status+0x30>)
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	4413      	add	r3, r2
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	79fa      	ldrb	r2, [r7, #7]
 8009148:	4905      	ldr	r1, [pc, #20]	; (8009160 <disk_status+0x30>)
 800914a:	440a      	add	r2, r1
 800914c:	7d12      	ldrb	r2, [r2, #20]
 800914e:	4610      	mov	r0, r2
 8009150:	4798      	blx	r3
 8009152:	4603      	mov	r3, r0
 8009154:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009156:	7bfb      	ldrb	r3, [r7, #15]
}
 8009158:	4618      	mov	r0, r3
 800915a:	3710      	adds	r7, #16
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	200012dc 	.word	0x200012dc

08009164 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	4603      	mov	r3, r0
 800916c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009172:	79fb      	ldrb	r3, [r7, #7]
 8009174:	4a0d      	ldr	r2, [pc, #52]	; (80091ac <disk_initialize+0x48>)
 8009176:	5cd3      	ldrb	r3, [r2, r3]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d111      	bne.n	80091a0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800917c:	79fb      	ldrb	r3, [r7, #7]
 800917e:	4a0b      	ldr	r2, [pc, #44]	; (80091ac <disk_initialize+0x48>)
 8009180:	2101      	movs	r1, #1
 8009182:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009184:	79fb      	ldrb	r3, [r7, #7]
 8009186:	4a09      	ldr	r2, [pc, #36]	; (80091ac <disk_initialize+0x48>)
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	4413      	add	r3, r2
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	79fa      	ldrb	r2, [r7, #7]
 8009192:	4906      	ldr	r1, [pc, #24]	; (80091ac <disk_initialize+0x48>)
 8009194:	440a      	add	r2, r1
 8009196:	7d12      	ldrb	r2, [r2, #20]
 8009198:	4610      	mov	r0, r2
 800919a:	4798      	blx	r3
 800919c:	4603      	mov	r3, r0
 800919e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	200012dc 	.word	0x200012dc

080091b0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80091b0:	b590      	push	{r4, r7, lr}
 80091b2:	b087      	sub	sp, #28
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	60b9      	str	r1, [r7, #8]
 80091b8:	607a      	str	r2, [r7, #4]
 80091ba:	603b      	str	r3, [r7, #0]
 80091bc:	4603      	mov	r3, r0
 80091be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80091c0:	7bfb      	ldrb	r3, [r7, #15]
 80091c2:	4a0a      	ldr	r2, [pc, #40]	; (80091ec <disk_read+0x3c>)
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	4413      	add	r3, r2
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	689c      	ldr	r4, [r3, #8]
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
 80091ce:	4a07      	ldr	r2, [pc, #28]	; (80091ec <disk_read+0x3c>)
 80091d0:	4413      	add	r3, r2
 80091d2:	7d18      	ldrb	r0, [r3, #20]
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	68b9      	ldr	r1, [r7, #8]
 80091da:	47a0      	blx	r4
 80091dc:	4603      	mov	r3, r0
 80091de:	75fb      	strb	r3, [r7, #23]
  return res;
 80091e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	371c      	adds	r7, #28
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd90      	pop	{r4, r7, pc}
 80091ea:	bf00      	nop
 80091ec:	200012dc 	.word	0x200012dc

080091f0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80091f0:	b590      	push	{r4, r7, lr}
 80091f2:	b087      	sub	sp, #28
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60b9      	str	r1, [r7, #8]
 80091f8:	607a      	str	r2, [r7, #4]
 80091fa:	603b      	str	r3, [r7, #0]
 80091fc:	4603      	mov	r3, r0
 80091fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009200:	7bfb      	ldrb	r3, [r7, #15]
 8009202:	4a0a      	ldr	r2, [pc, #40]	; (800922c <disk_write+0x3c>)
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	4413      	add	r3, r2
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	68dc      	ldr	r4, [r3, #12]
 800920c:	7bfb      	ldrb	r3, [r7, #15]
 800920e:	4a07      	ldr	r2, [pc, #28]	; (800922c <disk_write+0x3c>)
 8009210:	4413      	add	r3, r2
 8009212:	7d18      	ldrb	r0, [r3, #20]
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	68b9      	ldr	r1, [r7, #8]
 800921a:	47a0      	blx	r4
 800921c:	4603      	mov	r3, r0
 800921e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009220:	7dfb      	ldrb	r3, [r7, #23]
}
 8009222:	4618      	mov	r0, r3
 8009224:	371c      	adds	r7, #28
 8009226:	46bd      	mov	sp, r7
 8009228:	bd90      	pop	{r4, r7, pc}
 800922a:	bf00      	nop
 800922c:	200012dc 	.word	0x200012dc

08009230 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009230:	b480      	push	{r7}
 8009232:	b085      	sub	sp, #20
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	3301      	adds	r3, #1
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009240:	89fb      	ldrh	r3, [r7, #14]
 8009242:	021b      	lsls	r3, r3, #8
 8009244:	b21a      	sxth	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	b21b      	sxth	r3, r3
 800924c:	4313      	orrs	r3, r2
 800924e:	b21b      	sxth	r3, r3
 8009250:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009252:	89fb      	ldrh	r3, [r7, #14]
}
 8009254:	4618      	mov	r0, r3
 8009256:	3714      	adds	r7, #20
 8009258:	46bd      	mov	sp, r7
 800925a:	bc80      	pop	{r7}
 800925c:	4770      	bx	lr

0800925e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800925e:	b480      	push	{r7}
 8009260:	b085      	sub	sp, #20
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	3303      	adds	r3, #3
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	021b      	lsls	r3, r3, #8
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	3202      	adds	r2, #2
 8009276:	7812      	ldrb	r2, [r2, #0]
 8009278:	4313      	orrs	r3, r2
 800927a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	021b      	lsls	r3, r3, #8
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	3201      	adds	r2, #1
 8009284:	7812      	ldrb	r2, [r2, #0]
 8009286:	4313      	orrs	r3, r2
 8009288:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	021b      	lsls	r3, r3, #8
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	7812      	ldrb	r2, [r2, #0]
 8009292:	4313      	orrs	r3, r2
 8009294:	60fb      	str	r3, [r7, #12]
	return rv;
 8009296:	68fb      	ldr	r3, [r7, #12]
}
 8009298:	4618      	mov	r0, r3
 800929a:	3714      	adds	r7, #20
 800929c:	46bd      	mov	sp, r7
 800929e:	bc80      	pop	{r7}
 80092a0:	4770      	bx	lr

080092a2 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 80092a2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80092a6:	b09d      	sub	sp, #116	; 0x74
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 80092ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092ae:	3307      	adds	r3, #7
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	2200      	movs	r2, #0
 80092b6:	469a      	mov	sl, r3
 80092b8:	4693      	mov	fp, r2
 80092ba:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 80092be:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80092c2:	f04f 0000 	mov.w	r0, #0
 80092c6:	f04f 0100 	mov.w	r1, #0
 80092ca:	0219      	lsls	r1, r3, #8
 80092cc:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80092d0:	0210      	lsls	r0, r2, #8
 80092d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092d4:	3306      	adds	r3, #6
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	2200      	movs	r2, #0
 80092dc:	461c      	mov	r4, r3
 80092de:	4615      	mov	r5, r2
 80092e0:	ea40 0804 	orr.w	r8, r0, r4
 80092e4:	ea41 0905 	orr.w	r9, r1, r5
 80092e8:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 80092ec:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80092f0:	f04f 0000 	mov.w	r0, #0
 80092f4:	f04f 0100 	mov.w	r1, #0
 80092f8:	0219      	lsls	r1, r3, #8
 80092fa:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80092fe:	0210      	lsls	r0, r2, #8
 8009300:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009302:	3305      	adds	r3, #5
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	b2db      	uxtb	r3, r3
 8009308:	2200      	movs	r2, #0
 800930a:	65bb      	str	r3, [r7, #88]	; 0x58
 800930c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800930e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8009312:	461a      	mov	r2, r3
 8009314:	4302      	orrs	r2, r0
 8009316:	62ba      	str	r2, [r7, #40]	; 0x28
 8009318:	4623      	mov	r3, r4
 800931a:	430b      	orrs	r3, r1
 800931c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800931e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8009322:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 8009326:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800932a:	f04f 0000 	mov.w	r0, #0
 800932e:	f04f 0100 	mov.w	r1, #0
 8009332:	0219      	lsls	r1, r3, #8
 8009334:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009338:	0210      	lsls	r0, r2, #8
 800933a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800933c:	3304      	adds	r3, #4
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	b2db      	uxtb	r3, r3
 8009342:	2200      	movs	r2, #0
 8009344:	653b      	str	r3, [r7, #80]	; 0x50
 8009346:	657a      	str	r2, [r7, #84]	; 0x54
 8009348:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800934c:	461a      	mov	r2, r3
 800934e:	4302      	orrs	r2, r0
 8009350:	623a      	str	r2, [r7, #32]
 8009352:	4623      	mov	r3, r4
 8009354:	430b      	orrs	r3, r1
 8009356:	627b      	str	r3, [r7, #36]	; 0x24
 8009358:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800935c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 8009360:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009364:	f04f 0000 	mov.w	r0, #0
 8009368:	f04f 0100 	mov.w	r1, #0
 800936c:	0219      	lsls	r1, r3, #8
 800936e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009372:	0210      	lsls	r0, r2, #8
 8009374:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009376:	3303      	adds	r3, #3
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	b2db      	uxtb	r3, r3
 800937c:	2200      	movs	r2, #0
 800937e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009380:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009382:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8009386:	461a      	mov	r2, r3
 8009388:	4302      	orrs	r2, r0
 800938a:	61ba      	str	r2, [r7, #24]
 800938c:	4623      	mov	r3, r4
 800938e:	430b      	orrs	r3, r1
 8009390:	61fb      	str	r3, [r7, #28]
 8009392:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009396:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 800939a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800939e:	f04f 0000 	mov.w	r0, #0
 80093a2:	f04f 0100 	mov.w	r1, #0
 80093a6:	0219      	lsls	r1, r3, #8
 80093a8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80093ac:	0210      	lsls	r0, r2, #8
 80093ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093b0:	3302      	adds	r3, #2
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	2200      	movs	r2, #0
 80093b8:	643b      	str	r3, [r7, #64]	; 0x40
 80093ba:	647a      	str	r2, [r7, #68]	; 0x44
 80093bc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80093c0:	461a      	mov	r2, r3
 80093c2:	4302      	orrs	r2, r0
 80093c4:	613a      	str	r2, [r7, #16]
 80093c6:	4623      	mov	r3, r4
 80093c8:	430b      	orrs	r3, r1
 80093ca:	617b      	str	r3, [r7, #20]
 80093cc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80093d0:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 80093d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80093d8:	f04f 0200 	mov.w	r2, #0
 80093dc:	f04f 0300 	mov.w	r3, #0
 80093e0:	020b      	lsls	r3, r1, #8
 80093e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80093e6:	0202      	lsls	r2, r0, #8
 80093e8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80093ea:	3101      	adds	r1, #1
 80093ec:	7809      	ldrb	r1, [r1, #0]
 80093ee:	b2c9      	uxtb	r1, r1
 80093f0:	2000      	movs	r0, #0
 80093f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80093f4:	63f8      	str	r0, [r7, #60]	; 0x3c
 80093f6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80093fa:	4604      	mov	r4, r0
 80093fc:	4314      	orrs	r4, r2
 80093fe:	60bc      	str	r4, [r7, #8]
 8009400:	4319      	orrs	r1, r3
 8009402:	60f9      	str	r1, [r7, #12]
 8009404:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009408:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 800940c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009410:	f04f 0200 	mov.w	r2, #0
 8009414:	f04f 0300 	mov.w	r3, #0
 8009418:	020b      	lsls	r3, r1, #8
 800941a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800941e:	0202      	lsls	r2, r0, #8
 8009420:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009422:	7809      	ldrb	r1, [r1, #0]
 8009424:	b2c9      	uxtb	r1, r1
 8009426:	2000      	movs	r0, #0
 8009428:	6339      	str	r1, [r7, #48]	; 0x30
 800942a:	6378      	str	r0, [r7, #52]	; 0x34
 800942c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8009430:	4604      	mov	r4, r0
 8009432:	4314      	orrs	r4, r2
 8009434:	603c      	str	r4, [r7, #0]
 8009436:	4319      	orrs	r1, r3
 8009438:	6079      	str	r1, [r7, #4]
 800943a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800943e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 8009442:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 8009446:	4610      	mov	r0, r2
 8009448:	4619      	mov	r1, r3
 800944a:	3774      	adds	r7, #116	; 0x74
 800944c:	46bd      	mov	sp, r7
 800944e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009452:	4770      	bx	lr

08009454 <mem_cmp>:
	} while (--cnt);
}

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009454:	b480      	push	{r7}
 8009456:	b089      	sub	sp, #36	; 0x24
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	61fb      	str	r3, [r7, #28]
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009468:	2300      	movs	r3, #0
 800946a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	1c5a      	adds	r2, r3, #1
 8009470:	61fa      	str	r2, [r7, #28]
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	4619      	mov	r1, r3
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	1c5a      	adds	r2, r3, #1
 800947a:	61ba      	str	r2, [r7, #24]
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	1acb      	subs	r3, r1, r3
 8009480:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	3b01      	subs	r3, #1
 8009486:	607b      	str	r3, [r7, #4]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d002      	beq.n	8009494 <mem_cmp+0x40>
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d0eb      	beq.n	800946c <mem_cmp+0x18>

	return r;
 8009494:	697b      	ldr	r3, [r7, #20]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3724      	adds	r7, #36	; 0x24
 800949a:	46bd      	mov	sp, r7
 800949c:	bc80      	pop	{r7}
 800949e:	4770      	bx	lr

080094a0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b085      	sub	sp, #20
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80094a8:	2300      	movs	r3, #0
 80094aa:	60fb      	str	r3, [r7, #12]
 80094ac:	e010      	b.n	80094d0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80094ae:	4a0d      	ldr	r2, [pc, #52]	; (80094e4 <clear_lock+0x44>)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	011b      	lsls	r3, r3, #4
 80094b4:	4413      	add	r3, r2
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d105      	bne.n	80094ca <clear_lock+0x2a>
 80094be:	4a09      	ldr	r2, [pc, #36]	; (80094e4 <clear_lock+0x44>)
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	011b      	lsls	r3, r3, #4
 80094c4:	4413      	add	r3, r2
 80094c6:	2200      	movs	r2, #0
 80094c8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	3301      	adds	r3, #1
 80094ce:	60fb      	str	r3, [r7, #12]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d9eb      	bls.n	80094ae <clear_lock+0xe>
	}
}
 80094d6:	bf00      	nop
 80094d8:	bf00      	nop
 80094da:	3714      	adds	r7, #20
 80094dc:	46bd      	mov	sp, r7
 80094de:	bc80      	pop	{r7}
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	20000e5c 	.word	0x20000e5c

080094e8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b086      	sub	sp, #24
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80094f0:	2300      	movs	r3, #0
 80094f2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	78db      	ldrb	r3, [r3, #3]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d034      	beq.n	8009566 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009500:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	7858      	ldrb	r0, [r3, #1]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800950c:	2301      	movs	r3, #1
 800950e:	697a      	ldr	r2, [r7, #20]
 8009510:	f7ff fe6e 	bl	80091f0 <disk_write>
 8009514:	4603      	mov	r3, r0
 8009516:	2b00      	cmp	r3, #0
 8009518:	d002      	beq.n	8009520 <sync_window+0x38>
			res = FR_DISK_ERR;
 800951a:	2301      	movs	r3, #1
 800951c:	73fb      	strb	r3, [r7, #15]
 800951e:	e022      	b.n	8009566 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800952a:	697a      	ldr	r2, [r7, #20]
 800952c:	1ad2      	subs	r2, r2, r3
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6a1b      	ldr	r3, [r3, #32]
 8009532:	429a      	cmp	r2, r3
 8009534:	d217      	bcs.n	8009566 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	789b      	ldrb	r3, [r3, #2]
 800953a:	613b      	str	r3, [r7, #16]
 800953c:	e010      	b.n	8009560 <sync_window+0x78>
					wsect += fs->fsize;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a1b      	ldr	r3, [r3, #32]
 8009542:	697a      	ldr	r2, [r7, #20]
 8009544:	4413      	add	r3, r2
 8009546:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	7858      	ldrb	r0, [r3, #1]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009552:	2301      	movs	r3, #1
 8009554:	697a      	ldr	r2, [r7, #20]
 8009556:	f7ff fe4b 	bl	80091f0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	3b01      	subs	r3, #1
 800955e:	613b      	str	r3, [r7, #16]
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	2b01      	cmp	r3, #1
 8009564:	d8eb      	bhi.n	800953e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009566:	7bfb      	ldrb	r3, [r7, #15]
}
 8009568:	4618      	mov	r0, r3
 800956a:	3718      	adds	r7, #24
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b084      	sub	sp, #16
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800957a:	2300      	movs	r3, #0
 800957c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009582:	683a      	ldr	r2, [r7, #0]
 8009584:	429a      	cmp	r2, r3
 8009586:	d01b      	beq.n	80095c0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f7ff ffad 	bl	80094e8 <sync_window>
 800958e:	4603      	mov	r3, r0
 8009590:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009592:	7bfb      	ldrb	r3, [r7, #15]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d113      	bne.n	80095c0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	7858      	ldrb	r0, [r3, #1]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80095a2:	2301      	movs	r3, #1
 80095a4:	683a      	ldr	r2, [r7, #0]
 80095a6:	f7ff fe03 	bl	80091b0 <disk_read>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d004      	beq.n	80095ba <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80095b0:	f04f 33ff 	mov.w	r3, #4294967295
 80095b4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	683a      	ldr	r2, [r7, #0]
 80095be:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80095ca:	b480      	push	{r7}
 80095cc:	b083      	sub	sp, #12
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
 80095d2:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	3b02      	subs	r3, #2
 80095d8:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	69db      	ldr	r3, [r3, #28]
 80095de:	3b02      	subs	r3, #2
 80095e0:	683a      	ldr	r2, [r7, #0]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d301      	bcc.n	80095ea <clust2sect+0x20>
 80095e6:	2300      	movs	r3, #0
 80095e8:	e008      	b.n	80095fc <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	895b      	ldrh	r3, [r3, #10]
 80095ee:	461a      	mov	r2, r3
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	fb03 f202 	mul.w	r2, r3, r2
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095fa:	4413      	add	r3, r2
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	bc80      	pop	{r7}
 8009604:	4770      	bx	lr
	...

08009608 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b088      	sub	sp, #32
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009612:	6879      	ldr	r1, [r7, #4]
 8009614:	6809      	ldr	r1, [r1, #0]
 8009616:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009618:	6839      	ldr	r1, [r7, #0]
 800961a:	2901      	cmp	r1, #1
 800961c:	d904      	bls.n	8009628 <get_fat+0x20>
 800961e:	69b9      	ldr	r1, [r7, #24]
 8009620:	69c9      	ldr	r1, [r1, #28]
 8009622:	6838      	ldr	r0, [r7, #0]
 8009624:	4288      	cmp	r0, r1
 8009626:	d302      	bcc.n	800962e <get_fat+0x26>
		val = 1;	/* Internal error */
 8009628:	2301      	movs	r3, #1
 800962a:	61fb      	str	r3, [r7, #28]
 800962c:	e101      	b.n	8009832 <get_fat+0x22a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800962e:	f04f 31ff 	mov.w	r1, #4294967295
 8009632:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 8009634:	69b9      	ldr	r1, [r7, #24]
 8009636:	7809      	ldrb	r1, [r1, #0]
 8009638:	3901      	subs	r1, #1
 800963a:	2903      	cmp	r1, #3
 800963c:	f200 80ed 	bhi.w	800981a <get_fat+0x212>
 8009640:	a001      	add	r0, pc, #4	; (adr r0, 8009648 <get_fat+0x40>)
 8009642:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009646:	bf00      	nop
 8009648:	08009659 	.word	0x08009659
 800964c:	080096e1 	.word	0x080096e1
 8009650:	08009717 	.word	0x08009717
 8009654:	0800974f 	.word	0x0800974f
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	60fb      	str	r3, [r7, #12]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	085b      	lsrs	r3, r3, #1
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	4413      	add	r3, r2
 8009664:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	0a5b      	lsrs	r3, r3, #9
 800966e:	4413      	add	r3, r2
 8009670:	4619      	mov	r1, r3
 8009672:	69b8      	ldr	r0, [r7, #24]
 8009674:	f7ff ff7c 	bl	8009570 <move_window>
 8009678:	4603      	mov	r3, r0
 800967a:	2b00      	cmp	r3, #0
 800967c:	f040 80d0 	bne.w	8009820 <get_fat+0x218>
			wc = fs->win[bc++ % SS(fs)];
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	1c5a      	adds	r2, r3, #1
 8009684:	60fa      	str	r2, [r7, #12]
 8009686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800968a:	69ba      	ldr	r2, [r7, #24]
 800968c:	4413      	add	r3, r2
 800968e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009692:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009694:	69bb      	ldr	r3, [r7, #24]
 8009696:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	0a5b      	lsrs	r3, r3, #9
 800969c:	4413      	add	r3, r2
 800969e:	4619      	mov	r1, r3
 80096a0:	69b8      	ldr	r0, [r7, #24]
 80096a2:	f7ff ff65 	bl	8009570 <move_window>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f040 80bb 	bne.w	8009824 <get_fat+0x21c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096b4:	69ba      	ldr	r2, [r7, #24]
 80096b6:	4413      	add	r3, r2
 80096b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80096bc:	021b      	lsls	r3, r3, #8
 80096be:	461a      	mov	r2, r3
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	4313      	orrs	r3, r2
 80096c4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	f003 0301 	and.w	r3, r3, #1
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d002      	beq.n	80096d6 <get_fat+0xce>
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	091b      	lsrs	r3, r3, #4
 80096d4:	e002      	b.n	80096dc <get_fat+0xd4>
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80096dc:	61fb      	str	r3, [r7, #28]
			break;
 80096de:	e0a8      	b.n	8009832 <get_fat+0x22a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80096e0:	69bb      	ldr	r3, [r7, #24]
 80096e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	0a1b      	lsrs	r3, r3, #8
 80096e8:	4413      	add	r3, r2
 80096ea:	4619      	mov	r1, r3
 80096ec:	69b8      	ldr	r0, [r7, #24]
 80096ee:	f7ff ff3f 	bl	8009570 <move_window>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f040 8097 	bne.w	8009828 <get_fat+0x220>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80096fa:	69bb      	ldr	r3, [r7, #24]
 80096fc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	005b      	lsls	r3, r3, #1
 8009704:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009708:	4413      	add	r3, r2
 800970a:	4618      	mov	r0, r3
 800970c:	f7ff fd90 	bl	8009230 <ld_word>
 8009710:	4603      	mov	r3, r0
 8009712:	61fb      	str	r3, [r7, #28]
			break;
 8009714:	e08d      	b.n	8009832 <get_fat+0x22a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	09db      	lsrs	r3, r3, #7
 800971e:	4413      	add	r3, r2
 8009720:	4619      	mov	r1, r3
 8009722:	69b8      	ldr	r0, [r7, #24]
 8009724:	f7ff ff24 	bl	8009570 <move_window>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d17e      	bne.n	800982c <get_fat+0x224>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800973c:	4413      	add	r3, r2
 800973e:	4618      	mov	r0, r3
 8009740:	f7ff fd8d 	bl	800925e <ld_dword>
 8009744:	4603      	mov	r3, r0
 8009746:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800974a:	61fb      	str	r3, [r7, #28]
			break;
 800974c:	e071      	b.n	8009832 <get_fat+0x22a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800974e:	6879      	ldr	r1, [r7, #4]
 8009750:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8009754:	4301      	orrs	r1, r0
 8009756:	d060      	beq.n	800981a <get_fat+0x212>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8009758:	6879      	ldr	r1, [r7, #4]
 800975a:	6889      	ldr	r1, [r1, #8]
 800975c:	6838      	ldr	r0, [r7, #0]
 800975e:	1a41      	subs	r1, r0, r1
 8009760:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8009762:	6879      	ldr	r1, [r7, #4]
 8009764:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8009768:	1e42      	subs	r2, r0, #1
 800976a:	f141 33ff 	adc.w	r3, r1, #4294967295
 800976e:	f04f 0000 	mov.w	r0, #0
 8009772:	f04f 0100 	mov.w	r1, #0
 8009776:	0a50      	lsrs	r0, r2, #9
 8009778:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800977c:	0a59      	lsrs	r1, r3, #9
 800977e:	4602      	mov	r2, r0
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	895b      	ldrh	r3, [r3, #10]
 8009784:	fbb2 f3f3 	udiv	r3, r2, r3
 8009788:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	79db      	ldrb	r3, [r3, #7]
 800978e:	2b02      	cmp	r3, #2
 8009790:	d10e      	bne.n	80097b0 <get_fat+0x1a8>
					if (cofs <= clen) {
 8009792:	697a      	ldr	r2, [r7, #20]
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	429a      	cmp	r2, r3
 8009798:	d80a      	bhi.n	80097b0 <get_fat+0x1a8>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800979a:	697a      	ldr	r2, [r7, #20]
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	429a      	cmp	r2, r3
 80097a0:	d002      	beq.n	80097a8 <get_fat+0x1a0>
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	3301      	adds	r3, #1
 80097a6:	e001      	b.n	80097ac <get_fat+0x1a4>
 80097a8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80097ac:	61fb      	str	r3, [r7, #28]
						break;
 80097ae:	e040      	b.n	8009832 <get_fat+0x22a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	79db      	ldrb	r3, [r3, #7]
 80097b4:	2b03      	cmp	r3, #3
 80097b6:	d108      	bne.n	80097ca <get_fat+0x1c2>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	699b      	ldr	r3, [r3, #24]
 80097bc:	697a      	ldr	r2, [r7, #20]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d203      	bcs.n	80097ca <get_fat+0x1c2>
					val = clst + 1; 	/* Generate the value */
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	3301      	adds	r3, #1
 80097c6:	61fb      	str	r3, [r7, #28]
					break;
 80097c8:	e033      	b.n	8009832 <get_fat+0x22a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	79db      	ldrb	r3, [r3, #7]
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	d023      	beq.n	800981a <get_fat+0x212>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	69db      	ldr	r3, [r3, #28]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d003      	beq.n	80097e2 <get_fat+0x1da>
						val = 0x7FFFFFFF;	/* Generate EOC */
 80097da:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80097de:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 80097e0:	e027      	b.n	8009832 <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80097e2:	69bb      	ldr	r3, [r7, #24]
 80097e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	09db      	lsrs	r3, r3, #7
 80097ea:	4413      	add	r3, r2
 80097ec:	4619      	mov	r1, r3
 80097ee:	69b8      	ldr	r0, [r7, #24]
 80097f0:	f7ff febe 	bl	8009570 <move_window>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d11a      	bne.n	8009830 <get_fat+0x228>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009808:	4413      	add	r3, r2
 800980a:	4618      	mov	r0, r3
 800980c:	f7ff fd27 	bl	800925e <ld_dword>
 8009810:	4603      	mov	r3, r0
 8009812:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009816:	61fb      	str	r3, [r7, #28]
					break;
 8009818:	e00b      	b.n	8009832 <get_fat+0x22a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800981a:	2301      	movs	r3, #1
 800981c:	61fb      	str	r3, [r7, #28]
 800981e:	e008      	b.n	8009832 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009820:	bf00      	nop
 8009822:	e006      	b.n	8009832 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009824:	bf00      	nop
 8009826:	e004      	b.n	8009832 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009828:	bf00      	nop
 800982a:	e002      	b.n	8009832 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800982c:	bf00      	nop
 800982e:	e000      	b.n	8009832 <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009830:	bf00      	nop
		}
	}

	return val;
 8009832:	69fb      	ldr	r3, [r7, #28]
}
 8009834:	4618      	mov	r0, r3
 8009836:	3720      	adds	r7, #32
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800983c:	b480      	push	{r7}
 800983e:	b087      	sub	sp, #28
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009844:	f04f 33ff 	mov.w	r3, #4294967295
 8009848:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d031      	beq.n	80098b6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	617b      	str	r3, [r7, #20]
 8009858:	e002      	b.n	8009860 <get_ldnumber+0x24>
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	3301      	adds	r3, #1
 800985e:	617b      	str	r3, [r7, #20]
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	2b1f      	cmp	r3, #31
 8009866:	d903      	bls.n	8009870 <get_ldnumber+0x34>
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	2b3a      	cmp	r3, #58	; 0x3a
 800986e:	d1f4      	bne.n	800985a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	2b3a      	cmp	r3, #58	; 0x3a
 8009876:	d11c      	bne.n	80098b2 <get_ldnumber+0x76>
			tp = *path;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	1c5a      	adds	r2, r3, #1
 8009882:	60fa      	str	r2, [r7, #12]
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	3b30      	subs	r3, #48	; 0x30
 8009888:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	2b09      	cmp	r3, #9
 800988e:	d80e      	bhi.n	80098ae <get_ldnumber+0x72>
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	429a      	cmp	r2, r3
 8009896:	d10a      	bne.n	80098ae <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	2b03      	cmp	r3, #3
 800989c:	d807      	bhi.n	80098ae <get_ldnumber+0x72>
					vol = (int)i;
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	3301      	adds	r3, #1
 80098a6:	617b      	str	r3, [r7, #20]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	697a      	ldr	r2, [r7, #20]
 80098ac:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	e002      	b.n	80098b8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80098b2:	2300      	movs	r3, #0
 80098b4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80098b6:	693b      	ldr	r3, [r7, #16]
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	371c      	adds	r7, #28
 80098bc:	46bd      	mov	sp, r7
 80098be:	bc80      	pop	{r7}
 80098c0:	4770      	bx	lr
	...

080098c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	70da      	strb	r2, [r3, #3]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f04f 32ff 	mov.w	r2, #4294967295
 80098da:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80098dc:	6839      	ldr	r1, [r7, #0]
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f7ff fe46 	bl	8009570 <move_window>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d001      	beq.n	80098ee <check_fs+0x2a>
 80098ea:	2304      	movs	r3, #4
 80098ec:	e044      	b.n	8009978 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	3338      	adds	r3, #56	; 0x38
 80098f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7ff fc9a 	bl	8009230 <ld_word>
 80098fc:	4603      	mov	r3, r0
 80098fe:	461a      	mov	r2, r3
 8009900:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009904:	429a      	cmp	r2, r3
 8009906:	d001      	beq.n	800990c <check_fs+0x48>
 8009908:	2303      	movs	r3, #3
 800990a:	e035      	b.n	8009978 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009912:	2be9      	cmp	r3, #233	; 0xe9
 8009914:	d009      	beq.n	800992a <check_fs+0x66>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800991c:	2beb      	cmp	r3, #235	; 0xeb
 800991e:	d11e      	bne.n	800995e <check_fs+0x9a>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009926:	2b90      	cmp	r3, #144	; 0x90
 8009928:	d119      	bne.n	800995e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	3338      	adds	r3, #56	; 0x38
 800992e:	3336      	adds	r3, #54	; 0x36
 8009930:	4618      	mov	r0, r3
 8009932:	f7ff fc94 	bl	800925e <ld_dword>
 8009936:	4603      	mov	r3, r0
 8009938:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800993c:	4a10      	ldr	r2, [pc, #64]	; (8009980 <check_fs+0xbc>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d101      	bne.n	8009946 <check_fs+0x82>
 8009942:	2300      	movs	r3, #0
 8009944:	e018      	b.n	8009978 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	3338      	adds	r3, #56	; 0x38
 800994a:	3352      	adds	r3, #82	; 0x52
 800994c:	4618      	mov	r0, r3
 800994e:	f7ff fc86 	bl	800925e <ld_dword>
 8009952:	4603      	mov	r3, r0
 8009954:	4a0b      	ldr	r2, [pc, #44]	; (8009984 <check_fs+0xc0>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d101      	bne.n	800995e <check_fs+0x9a>
 800995a:	2300      	movs	r3, #0
 800995c:	e00c      	b.n	8009978 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	3338      	adds	r3, #56	; 0x38
 8009962:	220b      	movs	r2, #11
 8009964:	4908      	ldr	r1, [pc, #32]	; (8009988 <check_fs+0xc4>)
 8009966:	4618      	mov	r0, r3
 8009968:	f7ff fd74 	bl	8009454 <mem_cmp>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d101      	bne.n	8009976 <check_fs+0xb2>
 8009972:	2301      	movs	r3, #1
 8009974:	e000      	b.n	8009978 <check_fs+0xb4>
#endif
	return 2;
 8009976:	2302      	movs	r3, #2
}
 8009978:	4618      	mov	r0, r3
 800997a:	3708      	adds	r7, #8
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}
 8009980:	00544146 	.word	0x00544146
 8009984:	33544146 	.word	0x33544146
 8009988:	0800d978 	.word	0x0800d978

0800998c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800998c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009990:	b09c      	sub	sp, #112	; 0x70
 8009992:	af00      	add	r7, sp, #0
 8009994:	61f8      	str	r0, [r7, #28]
 8009996:	61b9      	str	r1, [r7, #24]
 8009998:	4613      	mov	r3, r2
 800999a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800999c:	69bb      	ldr	r3, [r7, #24]
 800999e:	2200      	movs	r2, #0
 80099a0:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80099a2:	69f8      	ldr	r0, [r7, #28]
 80099a4:	f7ff ff4a 	bl	800983c <get_ldnumber>
 80099a8:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 80099aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	da01      	bge.n	80099b4 <find_volume+0x28>
 80099b0:	230b      	movs	r3, #11
 80099b2:	e337      	b.n	800a024 <find_volume+0x698>


	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80099b4:	4a99      	ldr	r2, [pc, #612]	; (8009c1c <find_volume+0x290>)
 80099b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099bc:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80099be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d101      	bne.n	80099c8 <find_volume+0x3c>
 80099c4:	230c      	movs	r3, #12
 80099c6:	e32d      	b.n	800a024 <find_volume+0x698>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80099cc:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80099ce:	7dfb      	ldrb	r3, [r7, #23]
 80099d0:	f023 0301 	bic.w	r3, r3, #1
 80099d4:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80099d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d01a      	beq.n	8009a14 <find_volume+0x88>

		stat = disk_status(fs->drv);
 80099de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099e0:	785b      	ldrb	r3, [r3, #1]
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7ff fba4 	bl	8009130 <disk_status>
 80099e8:	4603      	mov	r3, r0
 80099ea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80099ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80099f2:	f003 0301 	and.w	r3, r3, #1
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10c      	bne.n	8009a14 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80099fa:	7dfb      	ldrb	r3, [r7, #23]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d007      	beq.n	8009a10 <find_volume+0x84>
 8009a00:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009a04:	f003 0304 	and.w	r3, r3, #4
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d001      	beq.n	8009a10 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8009a0c:	230a      	movs	r3, #10
 8009a0e:	e309      	b.n	800a024 <find_volume+0x698>
			}
			return FR_OK;				/* The file system object is valid */
 8009a10:	2300      	movs	r3, #0
 8009a12:	e307      	b.n	800a024 <find_volume+0x698>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a16:	2200      	movs	r2, #0
 8009a18:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a1c:	b2da      	uxtb	r2, r3
 8009a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a20:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a24:	785b      	ldrb	r3, [r3, #1]
 8009a26:	4618      	mov	r0, r3
 8009a28:	f7ff fb9c 	bl	8009164 <disk_initialize>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009a32:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009a36:	f003 0301 	and.w	r3, r3, #1
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d001      	beq.n	8009a42 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009a3e:	2303      	movs	r3, #3
 8009a40:	e2f0      	b.n	800a024 <find_volume+0x698>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009a42:	7dfb      	ldrb	r3, [r7, #23]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d007      	beq.n	8009a58 <find_volume+0xcc>
 8009a48:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009a4c:	f003 0304 	and.w	r3, r3, #4
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d001      	beq.n	8009a58 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8009a54:	230a      	movs	r3, #10
 8009a56:	e2e5      	b.n	800a024 <find_volume+0x698>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009a5c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009a5e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009a60:	f7ff ff30 	bl	80098c4 <check_fs>
 8009a64:	4603      	mov	r3, r0
 8009a66:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009a6a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	d14d      	bne.n	8009b0e <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009a72:	2300      	movs	r3, #0
 8009a74:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a76:	e020      	b.n	8009aba <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a7a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009a7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a80:	011b      	lsls	r3, r3, #4
 8009a82:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009a86:	4413      	add	r3, r2
 8009a88:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a8c:	3304      	adds	r3, #4
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d006      	beq.n	8009aa2 <find_volume+0x116>
 8009a94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a96:	3308      	adds	r3, #8
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7ff fbe0 	bl	800925e <ld_dword>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	e000      	b.n	8009aa4 <find_volume+0x118>
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	3360      	adds	r3, #96	; 0x60
 8009aaa:	f107 0110 	add.w	r1, r7, #16
 8009aae:	440b      	add	r3, r1
 8009ab0:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009ab4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	65bb      	str	r3, [r7, #88]	; 0x58
 8009aba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009abc:	2b03      	cmp	r3, #3
 8009abe:	d9db      	bls.n	8009a78 <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 8009ac4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d002      	beq.n	8009ad0 <find_volume+0x144>
 8009aca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009acc:	3b01      	subs	r3, #1
 8009ace:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009ad0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	3360      	adds	r3, #96	; 0x60
 8009ad6:	f107 0210 	add.w	r2, r7, #16
 8009ada:	4413      	add	r3, r2
 8009adc:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8009ae0:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009ae2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d005      	beq.n	8009af4 <find_volume+0x168>
 8009ae8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009aea:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009aec:	f7ff feea 	bl	80098c4 <check_fs>
 8009af0:	4603      	mov	r3, r0
 8009af2:	e000      	b.n	8009af6 <find_volume+0x16a>
 8009af4:	2303      	movs	r3, #3
 8009af6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009afa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d905      	bls.n	8009b0e <find_volume+0x182>
 8009b02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b04:	3301      	adds	r3, #1
 8009b06:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b0a:	2b03      	cmp	r3, #3
 8009b0c:	d9e0      	bls.n	8009ad0 <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009b0e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009b12:	2b04      	cmp	r3, #4
 8009b14:	d101      	bne.n	8009b1a <find_volume+0x18e>
 8009b16:	2301      	movs	r3, #1
 8009b18:	e284      	b.n	800a024 <find_volume+0x698>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009b1a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d901      	bls.n	8009b26 <find_volume+0x19a>
 8009b22:	230d      	movs	r3, #13
 8009b24:	e27e      	b.n	800a024 <find_volume+0x698>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 8009b26:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	f040 80fa 	bne.w	8009d24 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8009b30:	230b      	movs	r3, #11
 8009b32:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b34:	e002      	b.n	8009b3c <find_volume+0x1b0>
 8009b36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b38:	3301      	adds	r3, #1
 8009b3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b3e:	2b3f      	cmp	r3, #63	; 0x3f
 8009b40:	d806      	bhi.n	8009b50 <find_volume+0x1c4>
 8009b42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009b44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b46:	4413      	add	r3, r2
 8009b48:	3338      	adds	r3, #56	; 0x38
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d0f2      	beq.n	8009b36 <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8009b50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b52:	2b3f      	cmp	r3, #63	; 0x3f
 8009b54:	d801      	bhi.n	8009b5a <find_volume+0x1ce>
 8009b56:	230d      	movs	r3, #13
 8009b58:	e264      	b.n	800a024 <find_volume+0x698>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 8009b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b5c:	3338      	adds	r3, #56	; 0x38
 8009b5e:	3368      	adds	r3, #104	; 0x68
 8009b60:	4618      	mov	r0, r3
 8009b62:	f7ff fb65 	bl	8009230 <ld_word>
 8009b66:	4603      	mov	r3, r0
 8009b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b6c:	d001      	beq.n	8009b72 <find_volume+0x1e6>
 8009b6e:	230d      	movs	r3, #13
 8009b70:	e258      	b.n	800a024 <find_volume+0x698>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8009b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b74:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8009b78:	2b09      	cmp	r3, #9
 8009b7a:	d001      	beq.n	8009b80 <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 8009b7c:	230d      	movs	r3, #13
 8009b7e:	e251      	b.n	800a024 <find_volume+0x698>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8009b80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b82:	3338      	adds	r3, #56	; 0x38
 8009b84:	3348      	adds	r3, #72	; 0x48
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7ff fb8b 	bl	80092a2 <ld_qword>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009b92:	2000      	movs	r0, #0
 8009b94:	60b9      	str	r1, [r7, #8]
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	68b9      	ldr	r1, [r7, #8]
 8009b9a:	1851      	adds	r1, r2, r1
 8009b9c:	6039      	str	r1, [r7, #0]
 8009b9e:	68f9      	ldr	r1, [r7, #12]
 8009ba0:	eb43 0101 	adc.w	r1, r3, r1
 8009ba4:	6079      	str	r1, [r7, #4]
 8009ba6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009baa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8009bae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d301      	bcc.n	8009bba <find_volume+0x22e>
 8009bb6:	230d      	movs	r3, #13
 8009bb8:	e234      	b.n	800a024 <find_volume+0x698>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8009bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bbc:	3338      	adds	r3, #56	; 0x38
 8009bbe:	3354      	adds	r3, #84	; 0x54
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7ff fb4c 	bl	800925e <ld_dword>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bca:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8009bcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bce:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 8009bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bd4:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8009bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bd8:	789b      	ldrb	r3, [r3, #2]
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d001      	beq.n	8009be2 <find_volume+0x256>
 8009bde:	230d      	movs	r3, #13
 8009be0:	e220      	b.n	800a024 <find_volume+0x698>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8009be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009be4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009be8:	461a      	mov	r2, r3
 8009bea:	2301      	movs	r3, #1
 8009bec:	4093      	lsls	r3, r2
 8009bee:	b29a      	uxth	r2, r3
 8009bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bf2:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8009bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bf6:	895b      	ldrh	r3, [r3, #10]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d101      	bne.n	8009c00 <find_volume+0x274>
 8009bfc:	230d      	movs	r3, #13
 8009bfe:	e211      	b.n	800a024 <find_volume+0x698>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8009c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c02:	3338      	adds	r3, #56	; 0x38
 8009c04:	335c      	adds	r3, #92	; 0x5c
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7ff fb29 	bl	800925e <ld_dword>
 8009c0c:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8009c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c10:	4a03      	ldr	r2, [pc, #12]	; (8009c20 <find_volume+0x294>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d906      	bls.n	8009c24 <find_volume+0x298>
 8009c16:	230d      	movs	r3, #13
 8009c18:	e204      	b.n	800a024 <find_volume+0x698>
 8009c1a:	bf00      	nop
 8009c1c:	20000e48 	.word	0x20000e48
 8009c20:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 8009c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c26:	1c9a      	adds	r2, r3, #2
 8009c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c2a:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 8009c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009c30:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8009c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c34:	3338      	adds	r3, #56	; 0x38
 8009c36:	3358      	adds	r3, #88	; 0x58
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7ff fb10 	bl	800925e <ld_dword>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c42:	441a      	add	r2, r3
 8009c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c46:	631a      	str	r2, [r3, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8009c48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c4a:	3338      	adds	r3, #56	; 0x38
 8009c4c:	3350      	adds	r3, #80	; 0x50
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7ff fb05 	bl	800925e <ld_dword>
 8009c54:	4602      	mov	r2, r0
 8009c56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c58:	441a      	add	r2, r3
 8009c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c5c:	629a      	str	r2, [r3, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8009c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c62:	2200      	movs	r2, #0
 8009c64:	469a      	mov	sl, r3
 8009c66:	4693      	mov	fp, r2
 8009c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c6a:	895b      	ldrh	r3, [r3, #10]
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c70:	fb02 f303 	mul.w	r3, r2, r3
 8009c74:	2200      	movs	r2, #0
 8009c76:	4698      	mov	r8, r3
 8009c78:	4691      	mov	r9, r2
 8009c7a:	eb1a 0408 	adds.w	r4, sl, r8
 8009c7e:	eb4b 0509 	adc.w	r5, fp, r9
 8009c82:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009c86:	42a2      	cmp	r2, r4
 8009c88:	41ab      	sbcs	r3, r5
 8009c8a:	d201      	bcs.n	8009c90 <find_volume+0x304>
 8009c8c:	230d      	movs	r3, #13
 8009c8e:	e1c9      	b.n	800a024 <find_volume+0x698>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8009c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c92:	3338      	adds	r3, #56	; 0x38
 8009c94:	3360      	adds	r3, #96	; 0x60
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7ff fae1 	bl	800925e <ld_dword>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ca0:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8009ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009caa:	f7ff fc8e 	bl	80095ca <clust2sect>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009cb4:	f7ff fc5c 	bl	8009570 <move_window>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d001      	beq.n	8009cc2 <find_volume+0x336>
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e1b0      	b.n	800a024 <find_volume+0x698>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8009cc6:	e015      	b.n	8009cf4 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8009cc8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009cca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ccc:	4413      	add	r3, r2
 8009cce:	3338      	adds	r3, #56	; 0x38
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	2b81      	cmp	r3, #129	; 0x81
 8009cd4:	d10b      	bne.n	8009cee <find_volume+0x362>
 8009cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cd8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009cdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cde:	3314      	adds	r3, #20
 8009ce0:	4413      	add	r3, r2
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f7ff fabb 	bl	800925e <ld_dword>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b02      	cmp	r3, #2
 8009cec:	d007      	beq.n	8009cfe <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8009cee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cf0:	3320      	adds	r3, #32
 8009cf2:	65bb      	str	r3, [r7, #88]	; 0x58
 8009cf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cfa:	d3e5      	bcc.n	8009cc8 <find_volume+0x33c>
 8009cfc:	e000      	b.n	8009d00 <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8009cfe:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8009d00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d06:	d101      	bne.n	8009d0c <find_volume+0x380>
 8009d08:	230d      	movs	r3, #13
 8009d0a:	e18b      	b.n	800a024 <find_volume+0x698>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009d0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d12:	619a      	str	r2, [r3, #24]
 8009d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d16:	699a      	ldr	r2, [r3, #24]
 8009d18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d1a:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8009d1c:	2304      	movs	r3, #4
 8009d1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8009d22:	e167      	b.n	8009ff4 <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d26:	3338      	adds	r3, #56	; 0x38
 8009d28:	330b      	adds	r3, #11
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7ff fa80 	bl	8009230 <ld_word>
 8009d30:	4603      	mov	r3, r0
 8009d32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d36:	d001      	beq.n	8009d3c <find_volume+0x3b0>
 8009d38:	230d      	movs	r3, #13
 8009d3a:	e173      	b.n	800a024 <find_volume+0x698>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d3e:	3338      	adds	r3, #56	; 0x38
 8009d40:	3316      	adds	r3, #22
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7ff fa74 	bl	8009230 <ld_word>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009d4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d106      	bne.n	8009d60 <find_volume+0x3d4>
 8009d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d54:	3338      	adds	r3, #56	; 0x38
 8009d56:	3324      	adds	r3, #36	; 0x24
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7ff fa80 	bl	800925e <ld_dword>
 8009d5e:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 8009d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d62:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009d64:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d68:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8009d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d6e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d72:	789b      	ldrb	r3, [r3, #2]
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d005      	beq.n	8009d84 <find_volume+0x3f8>
 8009d78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d7a:	789b      	ldrb	r3, [r3, #2]
 8009d7c:	2b02      	cmp	r3, #2
 8009d7e:	d001      	beq.n	8009d84 <find_volume+0x3f8>
 8009d80:	230d      	movs	r3, #13
 8009d82:	e14f      	b.n	800a024 <find_volume+0x698>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d86:	789b      	ldrb	r3, [r3, #2]
 8009d88:	461a      	mov	r2, r3
 8009d8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d8c:	fb02 f303 	mul.w	r3, r2, r3
 8009d90:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d98:	b29a      	uxth	r2, r3
 8009d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d9c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009da0:	895b      	ldrh	r3, [r3, #10]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d008      	beq.n	8009db8 <find_volume+0x42c>
 8009da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009da8:	895b      	ldrh	r3, [r3, #10]
 8009daa:	461a      	mov	r2, r3
 8009dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dae:	895b      	ldrh	r3, [r3, #10]
 8009db0:	3b01      	subs	r3, #1
 8009db2:	4013      	ands	r3, r2
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d001      	beq.n	8009dbc <find_volume+0x430>
 8009db8:	230d      	movs	r3, #13
 8009dba:	e133      	b.n	800a024 <find_volume+0x698>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009dbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dbe:	3338      	adds	r3, #56	; 0x38
 8009dc0:	3311      	adds	r3, #17
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7ff fa34 	bl	8009230 <ld_word>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	461a      	mov	r2, r3
 8009dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dce:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dd2:	891b      	ldrh	r3, [r3, #8]
 8009dd4:	f003 030f 	and.w	r3, r3, #15
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d001      	beq.n	8009de2 <find_volume+0x456>
 8009dde:	230d      	movs	r3, #13
 8009de0:	e120      	b.n	800a024 <find_volume+0x698>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009de4:	3338      	adds	r3, #56	; 0x38
 8009de6:	3313      	adds	r3, #19
 8009de8:	4618      	mov	r0, r3
 8009dea:	f7ff fa21 	bl	8009230 <ld_word>
 8009dee:	4603      	mov	r3, r0
 8009df0:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009df2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d106      	bne.n	8009e06 <find_volume+0x47a>
 8009df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dfa:	3338      	adds	r3, #56	; 0x38
 8009dfc:	3320      	adds	r3, #32
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7ff fa2d 	bl	800925e <ld_dword>
 8009e04:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e08:	3338      	adds	r3, #56	; 0x38
 8009e0a:	330e      	adds	r3, #14
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f7ff fa0f 	bl	8009230 <ld_word>
 8009e12:	4603      	mov	r3, r0
 8009e14:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009e18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d101      	bne.n	8009e24 <find_volume+0x498>
 8009e20:	230d      	movs	r3, #13
 8009e22:	e0ff      	b.n	800a024 <find_volume+0x698>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009e24:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8009e28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e2a:	4413      	add	r3, r2
 8009e2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e2e:	8912      	ldrh	r2, [r2, #8]
 8009e30:	0912      	lsrs	r2, r2, #4
 8009e32:	b292      	uxth	r2, r2
 8009e34:	4413      	add	r3, r2
 8009e36:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009e38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d201      	bcs.n	8009e44 <find_volume+0x4b8>
 8009e40:	230d      	movs	r3, #13
 8009e42:	e0ef      	b.n	800a024 <find_volume+0x698>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009e44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e48:	1ad3      	subs	r3, r2, r3
 8009e4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e4c:	8952      	ldrh	r2, [r2, #10]
 8009e4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e52:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d101      	bne.n	8009e5e <find_volume+0x4d2>
 8009e5a:	230d      	movs	r3, #13
 8009e5c:	e0e2      	b.n	800a024 <find_volume+0x698>
		fmt = FS_FAT32;
 8009e5e:	2303      	movs	r3, #3
 8009e60:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e66:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d802      	bhi.n	8009e74 <find_volume+0x4e8>
 8009e6e:	2302      	movs	r3, #2
 8009e70:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e76:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d802      	bhi.n	8009e84 <find_volume+0x4f8>
 8009e7e:	2301      	movs	r3, #1
 8009e80:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e86:	1c9a      	adds	r2, r3, #2
 8009e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e8a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8009e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009e90:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009e92:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8009e96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009e98:	441a      	add	r2, r3
 8009e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e9c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8009e9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ea2:	441a      	add	r2, r3
 8009ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ea6:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8009ea8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009eac:	2b03      	cmp	r3, #3
 8009eae:	d11e      	bne.n	8009eee <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009eb2:	3338      	adds	r3, #56	; 0x38
 8009eb4:	332a      	adds	r3, #42	; 0x2a
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7ff f9ba 	bl	8009230 <ld_word>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d001      	beq.n	8009ec6 <find_volume+0x53a>
 8009ec2:	230d      	movs	r3, #13
 8009ec4:	e0ae      	b.n	800a024 <find_volume+0x698>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ec8:	891b      	ldrh	r3, [r3, #8]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d001      	beq.n	8009ed2 <find_volume+0x546>
 8009ece:	230d      	movs	r3, #13
 8009ed0:	e0a8      	b.n	800a024 <find_volume+0x698>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ed4:	3338      	adds	r3, #56	; 0x38
 8009ed6:	332c      	adds	r3, #44	; 0x2c
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7ff f9c0 	bl	800925e <ld_dword>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ee2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ee6:	69db      	ldr	r3, [r3, #28]
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009eec:	e01f      	b.n	8009f2e <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ef0:	891b      	ldrh	r3, [r3, #8]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d101      	bne.n	8009efa <find_volume+0x56e>
 8009ef6:	230d      	movs	r3, #13
 8009ef8:	e094      	b.n	800a024 <find_volume+0x698>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009efc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009efe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f00:	441a      	add	r2, r3
 8009f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f04:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009f06:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d103      	bne.n	8009f16 <find_volume+0x58a>
 8009f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f10:	69db      	ldr	r3, [r3, #28]
 8009f12:	005b      	lsls	r3, r3, #1
 8009f14:	e00a      	b.n	8009f2c <find_volume+0x5a0>
 8009f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f18:	69da      	ldr	r2, [r3, #28]
 8009f1a:	4613      	mov	r3, r2
 8009f1c:	005b      	lsls	r3, r3, #1
 8009f1e:	4413      	add	r3, r2
 8009f20:	085a      	lsrs	r2, r3, #1
 8009f22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f24:	69db      	ldr	r3, [r3, #28]
 8009f26:	f003 0301 	and.w	r3, r3, #1
 8009f2a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f30:	6a1a      	ldr	r2, [r3, #32]
 8009f32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f34:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009f38:	0a5b      	lsrs	r3, r3, #9
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d201      	bcs.n	8009f42 <find_volume+0x5b6>
 8009f3e:	230d      	movs	r3, #13
 8009f40:	e070      	b.n	800a024 <find_volume+0x698>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f44:	f04f 32ff 	mov.w	r2, #4294967295
 8009f48:	619a      	str	r2, [r3, #24]
 8009f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f4c:	699a      	ldr	r2, [r3, #24]
 8009f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f50:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8009f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f54:	2280      	movs	r2, #128	; 0x80
 8009f56:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009f58:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009f5c:	2b03      	cmp	r3, #3
 8009f5e:	d149      	bne.n	8009ff4 <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f62:	3338      	adds	r3, #56	; 0x38
 8009f64:	3330      	adds	r3, #48	; 0x30
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7ff f962 	bl	8009230 <ld_word>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d140      	bne.n	8009ff4 <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009f72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f74:	3301      	adds	r3, #1
 8009f76:	4619      	mov	r1, r3
 8009f78:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009f7a:	f7ff faf9 	bl	8009570 <move_window>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d137      	bne.n	8009ff4 <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 8009f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f86:	2200      	movs	r2, #0
 8009f88:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f8c:	3338      	adds	r3, #56	; 0x38
 8009f8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009f92:	4618      	mov	r0, r3
 8009f94:	f7ff f94c 	bl	8009230 <ld_word>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d127      	bne.n	8009ff4 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009fa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fa6:	3338      	adds	r3, #56	; 0x38
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f7ff f958 	bl	800925e <ld_dword>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	4a1f      	ldr	r2, [pc, #124]	; (800a030 <find_volume+0x6a4>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d11e      	bne.n	8009ff4 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fb8:	3338      	adds	r3, #56	; 0x38
 8009fba:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7ff f94d 	bl	800925e <ld_dword>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	4a1b      	ldr	r2, [pc, #108]	; (800a034 <find_volume+0x6a8>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d113      	bne.n	8009ff4 <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009fcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fce:	3338      	adds	r3, #56	; 0x38
 8009fd0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7ff f942 	bl	800925e <ld_dword>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fde:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fe2:	3338      	adds	r3, #56	; 0x38
 8009fe4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f7ff f938 	bl	800925e <ld_dword>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ff2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ff6:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8009ffa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009ffc:	4b0e      	ldr	r3, [pc, #56]	; (800a038 <find_volume+0x6ac>)
 8009ffe:	881b      	ldrh	r3, [r3, #0]
 800a000:	3301      	adds	r3, #1
 800a002:	b29a      	uxth	r2, r3
 800a004:	4b0c      	ldr	r3, [pc, #48]	; (800a038 <find_volume+0x6ac>)
 800a006:	801a      	strh	r2, [r3, #0]
 800a008:	4b0b      	ldr	r3, [pc, #44]	; (800a038 <find_volume+0x6ac>)
 800a00a:	881a      	ldrh	r2, [r3, #0]
 800a00c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a00e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a012:	4a0a      	ldr	r2, [pc, #40]	; (800a03c <find_volume+0x6b0>)
 800a014:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800a016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a018:	4a09      	ldr	r2, [pc, #36]	; (800a040 <find_volume+0x6b4>)
 800a01a:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a01c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a01e:	f7ff fa3f 	bl	80094a0 <clear_lock>
#endif
	return FR_OK;
 800a022:	2300      	movs	r3, #0
}
 800a024:	4618      	mov	r0, r3
 800a026:	3770      	adds	r7, #112	; 0x70
 800a028:	46bd      	mov	sp, r7
 800a02a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a02e:	bf00      	nop
 800a030:	41615252 	.word	0x41615252
 800a034:	61417272 	.word	0x61417272
 800a038:	20000e58 	.word	0x20000e58
 800a03c:	200010dc 	.word	0x200010dc
 800a040:	20000e7c 	.word	0x20000e7c

0800a044 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b088      	sub	sp, #32
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	4613      	mov	r3, r2
 800a050:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a056:	f107 0310 	add.w	r3, r7, #16
 800a05a:	4618      	mov	r0, r3
 800a05c:	f7ff fbee 	bl	800983c <get_ldnumber>
 800a060:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	2b00      	cmp	r3, #0
 800a066:	da01      	bge.n	800a06c <f_mount+0x28>
 800a068:	230b      	movs	r3, #11
 800a06a:	e02b      	b.n	800a0c4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a06c:	4a17      	ldr	r2, [pc, #92]	; (800a0cc <f_mount+0x88>)
 800a06e:	69fb      	ldr	r3, [r7, #28]
 800a070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a074:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a076:	69bb      	ldr	r3, [r7, #24]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d005      	beq.n	800a088 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a07c:	69b8      	ldr	r0, [r7, #24]
 800a07e:	f7ff fa0f 	bl	80094a0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	2200      	movs	r2, #0
 800a086:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d002      	beq.n	800a094 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2200      	movs	r2, #0
 800a092:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a094:	68fa      	ldr	r2, [r7, #12]
 800a096:	490d      	ldr	r1, [pc, #52]	; (800a0cc <f_mount+0x88>)
 800a098:	69fb      	ldr	r3, [r7, #28]
 800a09a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d002      	beq.n	800a0aa <f_mount+0x66>
 800a0a4:	79fb      	ldrb	r3, [r7, #7]
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d001      	beq.n	800a0ae <f_mount+0x6a>
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	e00a      	b.n	800a0c4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a0ae:	f107 010c 	add.w	r1, r7, #12
 800a0b2:	f107 0308 	add.w	r3, r7, #8
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7ff fc67 	bl	800998c <find_volume>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a0c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3720      	adds	r7, #32
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	20000e48 	.word	0x20000e48

0800a0d0 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b09a      	sub	sp, #104	; 0x68
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800a0dc:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800a0e0:	f107 030c 	add.w	r3, r7, #12
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7ff fc50 	bl	800998c <find_volume>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800a0f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	f040 80e6 	bne.w	800a2c8 <f_getfree+0x1f8>
		*fatfs = fs;				/* Return ptr to the fs object */
 800a0fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800a102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a104:	699a      	ldr	r2, [r3, #24]
 800a106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a108:	69db      	ldr	r3, [r3, #28]
 800a10a:	3b02      	subs	r3, #2
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d804      	bhi.n	800a11a <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800a110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a112:	699a      	ldr	r2, [r3, #24]
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	601a      	str	r2, [r3, #0]
 800a118:	e0d6      	b.n	800a2c8 <f_getfree+0x1f8>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800a11a:	2300      	movs	r3, #0
 800a11c:	663b      	str	r3, [r7, #96]	; 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800a11e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	2b01      	cmp	r3, #1
 800a124:	d128      	bne.n	800a178 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800a126:	2302      	movs	r3, #2
 800a128:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a12a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a12c:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 800a12e:	f107 0310 	add.w	r3, r7, #16
 800a132:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800a134:	4618      	mov	r0, r3
 800a136:	f7ff fa67 	bl	8009608 <get_fat>
 800a13a:	6478      	str	r0, [r7, #68]	; 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800a13c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a142:	d103      	bne.n	800a14c <f_getfree+0x7c>
 800a144:	2301      	movs	r3, #1
 800a146:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a14a:	e0b0      	b.n	800a2ae <f_getfree+0x1de>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800a14c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d103      	bne.n	800a15a <f_getfree+0x8a>
 800a152:	2302      	movs	r3, #2
 800a154:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a158:	e0a9      	b.n	800a2ae <f_getfree+0x1de>
					if (stat == 0) nfree++;
 800a15a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d102      	bne.n	800a166 <f_getfree+0x96>
 800a160:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a162:	3301      	adds	r3, #1
 800a164:	663b      	str	r3, [r7, #96]	; 0x60
				} while (++clst < fs->n_fatent);
 800a166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a168:	3301      	adds	r3, #1
 800a16a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a16c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a16e:	69db      	ldr	r3, [r3, #28]
 800a170:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a172:	429a      	cmp	r2, r3
 800a174:	d3db      	bcc.n	800a12e <f_getfree+0x5e>
 800a176:	e09a      	b.n	800a2ae <f_getfree+0x1de>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 800a178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	2b04      	cmp	r3, #4
 800a17e:	d146      	bne.n	800a20e <f_getfree+0x13e>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 800a180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a182:	69db      	ldr	r3, [r3, #28]
 800a184:	3b02      	subs	r3, #2
 800a186:	65fb      	str	r3, [r7, #92]	; 0x5c
					sect = fs->database;
 800a188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a18a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a18c:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0;
 800a18e:	2300      	movs	r3, #0
 800a190:	657b      	str	r3, [r7, #84]	; 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800a192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a194:	2b00      	cmp	r3, #0
 800a196:	d10d      	bne.n	800a1b4 <f_getfree+0xe4>
 800a198:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a19a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a19c:	1c5a      	adds	r2, r3, #1
 800a19e:	65ba      	str	r2, [r7, #88]	; 0x58
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	f7ff f9e5 	bl	8009570 <move_window>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a1ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d179      	bne.n	800a2a8 <f_getfree+0x1d8>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800a1b4:	2308      	movs	r3, #8
 800a1b6:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a1ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1bc:	4413      	add	r3, r2
 800a1be:	3338      	adds	r3, #56	; 0x38
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a1c6:	e013      	b.n	800a1f0 <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 800a1c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a1cc:	f003 0301 	and.w	r3, r3, #1
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d102      	bne.n	800a1da <f_getfree+0x10a>
 800a1d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	663b      	str	r3, [r7, #96]	; 0x60
							bm >>= 1;
 800a1da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a1de:	085b      	lsrs	r3, r3, #1
 800a1e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800a1e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1e6:	3b01      	subs	r3, #1
 800a1e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1ec:	3b01      	subs	r3, #1
 800a1ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d002      	beq.n	800a1fc <f_getfree+0x12c>
 800a1f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1e5      	bne.n	800a1c8 <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 800a1fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1fe:	3301      	adds	r3, #1
 800a200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a204:	657b      	str	r3, [r7, #84]	; 0x54
					} while (clst);
 800a206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d1c2      	bne.n	800a192 <f_getfree+0xc2>
 800a20c:	e04f      	b.n	800a2ae <f_getfree+0x1de>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800a20e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a210:	69db      	ldr	r3, [r3, #28]
 800a212:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a218:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0; p = 0;
 800a21a:	2300      	movs	r3, #0
 800a21c:	657b      	str	r3, [r7, #84]	; 0x54
 800a21e:	2300      	movs	r3, #0
 800a220:	653b      	str	r3, [r7, #80]	; 0x50
					do {
						if (i == 0) {
 800a222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a224:	2b00      	cmp	r3, #0
 800a226:	d113      	bne.n	800a250 <f_getfree+0x180>
							res = move_window(fs, sect++);
 800a228:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a22a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a22c:	1c5a      	adds	r2, r3, #1
 800a22e:	65ba      	str	r2, [r7, #88]	; 0x58
 800a230:	4619      	mov	r1, r3
 800a232:	f7ff f99d 	bl	8009570 <move_window>
 800a236:	4603      	mov	r3, r0
 800a238:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							if (res != FR_OK) break;
 800a23c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a240:	2b00      	cmp	r3, #0
 800a242:	d133      	bne.n	800a2ac <f_getfree+0x1dc>
							p = fs->win;
 800a244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a246:	3338      	adds	r3, #56	; 0x38
 800a248:	653b      	str	r3, [r7, #80]	; 0x50
							i = SS(fs);
 800a24a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a24e:	657b      	str	r3, [r7, #84]	; 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 800a250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	2b02      	cmp	r3, #2
 800a256:	d10f      	bne.n	800a278 <f_getfree+0x1a8>
							if (ld_word(p) == 0) nfree++;
 800a258:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a25a:	f7fe ffe9 	bl	8009230 <ld_word>
 800a25e:	4603      	mov	r3, r0
 800a260:	2b00      	cmp	r3, #0
 800a262:	d102      	bne.n	800a26a <f_getfree+0x19a>
 800a264:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a266:	3301      	adds	r3, #1
 800a268:	663b      	str	r3, [r7, #96]	; 0x60
							p += 2; i -= 2;
 800a26a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a26c:	3302      	adds	r3, #2
 800a26e:	653b      	str	r3, [r7, #80]	; 0x50
 800a270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a272:	3b02      	subs	r3, #2
 800a274:	657b      	str	r3, [r7, #84]	; 0x54
 800a276:	e010      	b.n	800a29a <f_getfree+0x1ca>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800a278:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a27a:	f7fe fff0 	bl	800925e <ld_dword>
 800a27e:	4603      	mov	r3, r0
 800a280:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a284:	2b00      	cmp	r3, #0
 800a286:	d102      	bne.n	800a28e <f_getfree+0x1be>
 800a288:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a28a:	3301      	adds	r3, #1
 800a28c:	663b      	str	r3, [r7, #96]	; 0x60
							p += 4; i -= 4;
 800a28e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a290:	3304      	adds	r3, #4
 800a292:	653b      	str	r3, [r7, #80]	; 0x50
 800a294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a296:	3b04      	subs	r3, #4
 800a298:	657b      	str	r3, [r7, #84]	; 0x54
						}
					} while (--clst);
 800a29a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a29c:	3b01      	subs	r3, #1
 800a29e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d1bd      	bne.n	800a222 <f_getfree+0x152>
 800a2a6:	e002      	b.n	800a2ae <f_getfree+0x1de>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800a2a8:	bf00      	nop
 800a2aa:	e000      	b.n	800a2ae <f_getfree+0x1de>
							if (res != FR_OK) break;
 800a2ac:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a2b2:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800a2b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a2b8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800a2ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2bc:	791a      	ldrb	r2, [r3, #4]
 800a2be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2c0:	f042 0201 	orr.w	r2, r2, #1
 800a2c4:	b2d2      	uxtb	r2, r2
 800a2c6:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800a2c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3768      	adds	r7, #104	; 0x68
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b087      	sub	sp, #28
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	4613      	mov	r3, r2
 800a2e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a2ea:	4b1e      	ldr	r3, [pc, #120]	; (800a364 <FATFS_LinkDriverEx+0x90>)
 800a2ec:	7e1b      	ldrb	r3, [r3, #24]
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	2b03      	cmp	r3, #3
 800a2f2:	d831      	bhi.n	800a358 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a2f4:	4b1b      	ldr	r3, [pc, #108]	; (800a364 <FATFS_LinkDriverEx+0x90>)
 800a2f6:	7e1b      	ldrb	r3, [r3, #24]
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	4b19      	ldr	r3, [pc, #100]	; (800a364 <FATFS_LinkDriverEx+0x90>)
 800a2fe:	2100      	movs	r1, #0
 800a300:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a302:	4b18      	ldr	r3, [pc, #96]	; (800a364 <FATFS_LinkDriverEx+0x90>)
 800a304:	7e1b      	ldrb	r3, [r3, #24]
 800a306:	b2db      	uxtb	r3, r3
 800a308:	4a16      	ldr	r2, [pc, #88]	; (800a364 <FATFS_LinkDriverEx+0x90>)
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	4413      	add	r3, r2
 800a30e:	68fa      	ldr	r2, [r7, #12]
 800a310:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a312:	4b14      	ldr	r3, [pc, #80]	; (800a364 <FATFS_LinkDriverEx+0x90>)
 800a314:	7e1b      	ldrb	r3, [r3, #24]
 800a316:	b2db      	uxtb	r3, r3
 800a318:	461a      	mov	r2, r3
 800a31a:	4b12      	ldr	r3, [pc, #72]	; (800a364 <FATFS_LinkDriverEx+0x90>)
 800a31c:	4413      	add	r3, r2
 800a31e:	79fa      	ldrb	r2, [r7, #7]
 800a320:	751a      	strb	r2, [r3, #20]
    DiskNum = disk.nbr++;
 800a322:	4b10      	ldr	r3, [pc, #64]	; (800a364 <FATFS_LinkDriverEx+0x90>)
 800a324:	7e1b      	ldrb	r3, [r3, #24]
 800a326:	b2db      	uxtb	r3, r3
 800a328:	1c5a      	adds	r2, r3, #1
 800a32a:	b2d1      	uxtb	r1, r2
 800a32c:	4a0d      	ldr	r2, [pc, #52]	; (800a364 <FATFS_LinkDriverEx+0x90>)
 800a32e:	7611      	strb	r1, [r2, #24]
 800a330:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a332:	7dbb      	ldrb	r3, [r7, #22]
 800a334:	3330      	adds	r3, #48	; 0x30
 800a336:	b2da      	uxtb	r2, r3
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	3301      	adds	r3, #1
 800a340:	223a      	movs	r2, #58	; 0x3a
 800a342:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	3302      	adds	r3, #2
 800a348:	222f      	movs	r2, #47	; 0x2f
 800a34a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	3303      	adds	r3, #3
 800a350:	2200      	movs	r2, #0
 800a352:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a354:	2300      	movs	r3, #0
 800a356:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a358:	7dfb      	ldrb	r3, [r7, #23]
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	371c      	adds	r7, #28
 800a35e:	46bd      	mov	sp, r7
 800a360:	bc80      	pop	{r7}
 800a362:	4770      	bx	lr
 800a364:	200012dc 	.word	0x200012dc

0800a368 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a372:	2200      	movs	r2, #0
 800a374:	6839      	ldr	r1, [r7, #0]
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f7ff ffac 	bl	800a2d4 <FATFS_LinkDriverEx>
 800a37c:	4603      	mov	r3, r0
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3708      	adds	r7, #8
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}

0800a386 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a386:	b480      	push	{r7}
 800a388:	b085      	sub	sp, #20
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	4603      	mov	r3, r0
 800a38e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a390:	2300      	movs	r3, #0
 800a392:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a394:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a398:	2b84      	cmp	r3, #132	; 0x84
 800a39a:	d005      	beq.n	800a3a8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a39c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	4413      	add	r3, r2
 800a3a4:	3303      	adds	r3, #3
 800a3a6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3714      	adds	r7, #20
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bc80      	pop	{r7}
 800a3b2:	4770      	bx	lr

0800a3b4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3ba:	f3ef 8305 	mrs	r3, IPSR
 800a3be:	607b      	str	r3, [r7, #4]
  return(result);
 800a3c0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	bf14      	ite	ne
 800a3c6:	2301      	movne	r3, #1
 800a3c8:	2300      	moveq	r3, #0
 800a3ca:	b2db      	uxtb	r3, r3
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bc80      	pop	{r7}
 800a3d4:	4770      	bx	lr

0800a3d6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a3d6:	b580      	push	{r7, lr}
 800a3d8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a3da:	f001 f907 	bl	800b5ec <vTaskStartScheduler>
  
  return osOK;
 800a3de:	2300      	movs	r3, #0
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3e6:	b089      	sub	sp, #36	; 0x24
 800a3e8:	af04      	add	r7, sp, #16
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	695b      	ldr	r3, [r3, #20]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d020      	beq.n	800a438 <osThreadCreate+0x54>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	699b      	ldr	r3, [r3, #24]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d01c      	beq.n	800a438 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	685c      	ldr	r4, [r3, #4]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681d      	ldr	r5, [r3, #0]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	691e      	ldr	r6, [r3, #16]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a410:	4618      	mov	r0, r3
 800a412:	f7ff ffb8 	bl	800a386 <makeFreeRtosPriority>
 800a416:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	695b      	ldr	r3, [r3, #20]
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a420:	9202      	str	r2, [sp, #8]
 800a422:	9301      	str	r3, [sp, #4]
 800a424:	9100      	str	r1, [sp, #0]
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	4632      	mov	r2, r6
 800a42a:	4629      	mov	r1, r5
 800a42c:	4620      	mov	r0, r4
 800a42e:	f000 ff07 	bl	800b240 <xTaskCreateStatic>
 800a432:	4603      	mov	r3, r0
 800a434:	60fb      	str	r3, [r7, #12]
 800a436:	e01c      	b.n	800a472 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	685c      	ldr	r4, [r3, #4]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a444:	b29e      	uxth	r6, r3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a44c:	4618      	mov	r0, r3
 800a44e:	f7ff ff9a 	bl	800a386 <makeFreeRtosPriority>
 800a452:	4602      	mov	r2, r0
 800a454:	f107 030c 	add.w	r3, r7, #12
 800a458:	9301      	str	r3, [sp, #4]
 800a45a:	9200      	str	r2, [sp, #0]
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	4632      	mov	r2, r6
 800a460:	4629      	mov	r1, r5
 800a462:	4620      	mov	r0, r4
 800a464:	f000 ff48 	bl	800b2f8 <xTaskCreate>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	d001      	beq.n	800a472 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a46e:	2300      	movs	r3, #0
 800a470:	e000      	b.n	800a474 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a472:	68fb      	ldr	r3, [r7, #12]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3714      	adds	r7, #20
 800a478:	46bd      	mov	sp, r7
 800a47a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a47c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d001      	beq.n	800a492 <osDelay+0x16>
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	e000      	b.n	800a494 <osDelay+0x18>
 800a492:	2301      	movs	r3, #1
 800a494:	4618      	mov	r0, r3
 800a496:	f001 f875 	bl	800b584 <vTaskDelay>
  
  return osOK;
 800a49a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3710      	adds	r7, #16
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a4a4:	b590      	push	{r4, r7, lr}
 800a4a6:	b085      	sub	sp, #20
 800a4a8:	af02      	add	r7, sp, #8
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d011      	beq.n	800a4da <osMessageCreate+0x36>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d00d      	beq.n	800a4da <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6818      	ldr	r0, [r3, #0]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6859      	ldr	r1, [r3, #4]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	689a      	ldr	r2, [r3, #8]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	2400      	movs	r4, #0
 800a4d0:	9400      	str	r4, [sp, #0]
 800a4d2:	f000 f9db 	bl	800a88c <xQueueGenericCreateStatic>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	e008      	b.n	800a4ec <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6818      	ldr	r0, [r3, #0]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	f000 fa48 	bl	800a97a <xQueueGenericCreate>
 800a4ea:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd90      	pop	{r4, r7, pc}

0800a4f4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b086      	sub	sp, #24
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a500:	2300      	movs	r3, #0
 800a502:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d101      	bne.n	800a512 <osMessagePut+0x1e>
    ticks = 1;
 800a50e:	2301      	movs	r3, #1
 800a510:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a512:	f7ff ff4f 	bl	800a3b4 <inHandlerMode>
 800a516:	4603      	mov	r3, r0
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d018      	beq.n	800a54e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a51c:	f107 0210 	add.w	r2, r7, #16
 800a520:	f107 0108 	add.w	r1, r7, #8
 800a524:	2300      	movs	r3, #0
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f000 fb82 	bl	800ac30 <xQueueGenericSendFromISR>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d001      	beq.n	800a536 <osMessagePut+0x42>
      return osErrorOS;
 800a532:	23ff      	movs	r3, #255	; 0xff
 800a534:	e018      	b.n	800a568 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d014      	beq.n	800a566 <osMessagePut+0x72>
 800a53c:	4b0c      	ldr	r3, [pc, #48]	; (800a570 <osMessagePut+0x7c>)
 800a53e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a542:	601a      	str	r2, [r3, #0]
 800a544:	f3bf 8f4f 	dsb	sy
 800a548:	f3bf 8f6f 	isb	sy
 800a54c:	e00b      	b.n	800a566 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a54e:	f107 0108 	add.w	r1, r7, #8
 800a552:	2300      	movs	r3, #0
 800a554:	697a      	ldr	r2, [r7, #20]
 800a556:	68f8      	ldr	r0, [r7, #12]
 800a558:	f000 fa6c 	bl	800aa34 <xQueueGenericSend>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d001      	beq.n	800a566 <osMessagePut+0x72>
      return osErrorOS;
 800a562:	23ff      	movs	r3, #255	; 0xff
 800a564:	e000      	b.n	800a568 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3718      	adds	r7, #24
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	e000ed04 	.word	0xe000ed04

0800a574 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a574:	b590      	push	{r4, r7, lr}
 800a576:	b08b      	sub	sp, #44	; 0x2c
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a584:	2300      	movs	r3, #0
 800a586:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d10a      	bne.n	800a5a4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a58e:	2380      	movs	r3, #128	; 0x80
 800a590:	617b      	str	r3, [r7, #20]
    return event;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	461c      	mov	r4, r3
 800a596:	f107 0314 	add.w	r3, r7, #20
 800a59a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a59e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a5a2:	e054      	b.n	800a64e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b2:	d103      	bne.n	800a5bc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a5b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a5b8:	627b      	str	r3, [r7, #36]	; 0x24
 800a5ba:	e009      	b.n	800a5d0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d006      	beq.n	800a5d0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d101      	bne.n	800a5d0 <osMessageGet+0x5c>
      ticks = 1;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a5d0:	f7ff fef0 	bl	800a3b4 <inHandlerMode>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d01c      	beq.n	800a614 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a5da:	f107 0220 	add.w	r2, r7, #32
 800a5de:	f107 0314 	add.w	r3, r7, #20
 800a5e2:	3304      	adds	r3, #4
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	68b8      	ldr	r0, [r7, #8]
 800a5e8:	f000 fc9a 	bl	800af20 <xQueueReceiveFromISR>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d102      	bne.n	800a5f8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a5f2:	2310      	movs	r3, #16
 800a5f4:	617b      	str	r3, [r7, #20]
 800a5f6:	e001      	b.n	800a5fc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a5fc:	6a3b      	ldr	r3, [r7, #32]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d01d      	beq.n	800a63e <osMessageGet+0xca>
 800a602:	4b15      	ldr	r3, [pc, #84]	; (800a658 <osMessageGet+0xe4>)
 800a604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a608:	601a      	str	r2, [r3, #0]
 800a60a:	f3bf 8f4f 	dsb	sy
 800a60e:	f3bf 8f6f 	isb	sy
 800a612:	e014      	b.n	800a63e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a614:	f107 0314 	add.w	r3, r7, #20
 800a618:	3304      	adds	r3, #4
 800a61a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a61c:	4619      	mov	r1, r3
 800a61e:	68b8      	ldr	r0, [r7, #8]
 800a620:	f000 fb9e 	bl	800ad60 <xQueueReceive>
 800a624:	4603      	mov	r3, r0
 800a626:	2b01      	cmp	r3, #1
 800a628:	d102      	bne.n	800a630 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a62a:	2310      	movs	r3, #16
 800a62c:	617b      	str	r3, [r7, #20]
 800a62e:	e006      	b.n	800a63e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	2b00      	cmp	r3, #0
 800a634:	d101      	bne.n	800a63a <osMessageGet+0xc6>
 800a636:	2300      	movs	r3, #0
 800a638:	e000      	b.n	800a63c <osMessageGet+0xc8>
 800a63a:	2340      	movs	r3, #64	; 0x40
 800a63c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	461c      	mov	r4, r3
 800a642:	f107 0314 	add.w	r3, r7, #20
 800a646:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a64a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a64e:	68f8      	ldr	r0, [r7, #12]
 800a650:	372c      	adds	r7, #44	; 0x2c
 800a652:	46bd      	mov	sp, r7
 800a654:	bd90      	pop	{r4, r7, pc}
 800a656:	bf00      	nop
 800a658:	e000ed04 	.word	0xe000ed04

0800a65c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f103 0208 	add.w	r2, r3, #8
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f04f 32ff 	mov.w	r2, #4294967295
 800a674:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f103 0208 	add.w	r2, r3, #8
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f103 0208 	add.w	r2, r3, #8
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a690:	bf00      	nop
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	bc80      	pop	{r7}
 800a698:	4770      	bx	lr

0800a69a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a69a:	b480      	push	{r7}
 800a69c:	b083      	sub	sp, #12
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a6a8:	bf00      	nop
 800a6aa:	370c      	adds	r7, #12
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bc80      	pop	{r7}
 800a6b0:	4770      	bx	lr

0800a6b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a6b2:	b480      	push	{r7}
 800a6b4:	b085      	sub	sp, #20
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
 800a6ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	68fa      	ldr	r2, [r7, #12]
 800a6c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	689a      	ldr	r2, [r3, #8]
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	683a      	ldr	r2, [r7, #0]
 800a6d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	683a      	ldr	r2, [r7, #0]
 800a6dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	1c5a      	adds	r2, r3, #1
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	601a      	str	r2, [r3, #0]
}
 800a6ee:	bf00      	nop
 800a6f0:	3714      	adds	r7, #20
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bc80      	pop	{r7}
 800a6f6:	4770      	bx	lr

0800a6f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b085      	sub	sp, #20
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a70e:	d103      	bne.n	800a718 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	691b      	ldr	r3, [r3, #16]
 800a714:	60fb      	str	r3, [r7, #12]
 800a716:	e00c      	b.n	800a732 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	3308      	adds	r3, #8
 800a71c:	60fb      	str	r3, [r7, #12]
 800a71e:	e002      	b.n	800a726 <vListInsert+0x2e>
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	60fb      	str	r3, [r7, #12]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	68ba      	ldr	r2, [r7, #8]
 800a72e:	429a      	cmp	r2, r3
 800a730:	d2f6      	bcs.n	800a720 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	685a      	ldr	r2, [r3, #4]
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	683a      	ldr	r2, [r7, #0]
 800a740:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	68fa      	ldr	r2, [r7, #12]
 800a746:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	683a      	ldr	r2, [r7, #0]
 800a74c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	1c5a      	adds	r2, r3, #1
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	601a      	str	r2, [r3, #0]
}
 800a75e:	bf00      	nop
 800a760:	3714      	adds	r7, #20
 800a762:	46bd      	mov	sp, r7
 800a764:	bc80      	pop	{r7}
 800a766:	4770      	bx	lr

0800a768 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a768:	b480      	push	{r7}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	691b      	ldr	r3, [r3, #16]
 800a774:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	6892      	ldr	r2, [r2, #8]
 800a77e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	6852      	ldr	r2, [r2, #4]
 800a788:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	429a      	cmp	r2, r3
 800a792:	d103      	bne.n	800a79c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	689a      	ldr	r2, [r3, #8]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	1e5a      	subs	r2, r3, #1
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3714      	adds	r7, #20
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bc80      	pop	{r7}
 800a7b8:	4770      	bx	lr
	...

0800a7bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b084      	sub	sp, #16
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d10a      	bne.n	800a7e6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d4:	f383 8811 	msr	BASEPRI, r3
 800a7d8:	f3bf 8f6f 	isb	sy
 800a7dc:	f3bf 8f4f 	dsb	sy
 800a7e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a7e2:	bf00      	nop
 800a7e4:	e7fe      	b.n	800a7e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a7e6:	f001 fd19 	bl	800c21c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7f2:	68f9      	ldr	r1, [r7, #12]
 800a7f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a7f6:	fb01 f303 	mul.w	r3, r1, r3
 800a7fa:	441a      	add	r2, r3
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2200      	movs	r2, #0
 800a804:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a816:	3b01      	subs	r3, #1
 800a818:	68f9      	ldr	r1, [r7, #12]
 800a81a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a81c:	fb01 f303 	mul.w	r3, r1, r3
 800a820:	441a      	add	r2, r3
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	22ff      	movs	r2, #255	; 0xff
 800a82a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	22ff      	movs	r2, #255	; 0xff
 800a832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d114      	bne.n	800a866 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	691b      	ldr	r3, [r3, #16]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d01a      	beq.n	800a87a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	3310      	adds	r3, #16
 800a848:	4618      	mov	r0, r3
 800a84a:	f001 f927 	bl	800ba9c <xTaskRemoveFromEventList>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d012      	beq.n	800a87a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a854:	4b0c      	ldr	r3, [pc, #48]	; (800a888 <xQueueGenericReset+0xcc>)
 800a856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a85a:	601a      	str	r2, [r3, #0]
 800a85c:	f3bf 8f4f 	dsb	sy
 800a860:	f3bf 8f6f 	isb	sy
 800a864:	e009      	b.n	800a87a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	3310      	adds	r3, #16
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7ff fef6 	bl	800a65c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	3324      	adds	r3, #36	; 0x24
 800a874:	4618      	mov	r0, r3
 800a876:	f7ff fef1 	bl	800a65c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a87a:	f001 fcff 	bl	800c27c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a87e:	2301      	movs	r3, #1
}
 800a880:	4618      	mov	r0, r3
 800a882:	3710      	adds	r7, #16
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}
 800a888:	e000ed04 	.word	0xe000ed04

0800a88c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b08e      	sub	sp, #56	; 0x38
 800a890:	af02      	add	r7, sp, #8
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
 800a898:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d10a      	bne.n	800a8b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a4:	f383 8811 	msr	BASEPRI, r3
 800a8a8:	f3bf 8f6f 	isb	sy
 800a8ac:	f3bf 8f4f 	dsb	sy
 800a8b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a8b2:	bf00      	nop
 800a8b4:	e7fe      	b.n	800a8b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d10a      	bne.n	800a8d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c0:	f383 8811 	msr	BASEPRI, r3
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8ce:	bf00      	nop
 800a8d0:	e7fe      	b.n	800a8d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d002      	beq.n	800a8de <xQueueGenericCreateStatic+0x52>
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d001      	beq.n	800a8e2 <xQueueGenericCreateStatic+0x56>
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e000      	b.n	800a8e4 <xQueueGenericCreateStatic+0x58>
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d10a      	bne.n	800a8fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ec:	f383 8811 	msr	BASEPRI, r3
 800a8f0:	f3bf 8f6f 	isb	sy
 800a8f4:	f3bf 8f4f 	dsb	sy
 800a8f8:	623b      	str	r3, [r7, #32]
}
 800a8fa:	bf00      	nop
 800a8fc:	e7fe      	b.n	800a8fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d102      	bne.n	800a90a <xQueueGenericCreateStatic+0x7e>
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d101      	bne.n	800a90e <xQueueGenericCreateStatic+0x82>
 800a90a:	2301      	movs	r3, #1
 800a90c:	e000      	b.n	800a910 <xQueueGenericCreateStatic+0x84>
 800a90e:	2300      	movs	r3, #0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d10a      	bne.n	800a92a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a918:	f383 8811 	msr	BASEPRI, r3
 800a91c:	f3bf 8f6f 	isb	sy
 800a920:	f3bf 8f4f 	dsb	sy
 800a924:	61fb      	str	r3, [r7, #28]
}
 800a926:	bf00      	nop
 800a928:	e7fe      	b.n	800a928 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a92a:	2348      	movs	r3, #72	; 0x48
 800a92c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	2b48      	cmp	r3, #72	; 0x48
 800a932:	d00a      	beq.n	800a94a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a938:	f383 8811 	msr	BASEPRI, r3
 800a93c:	f3bf 8f6f 	isb	sy
 800a940:	f3bf 8f4f 	dsb	sy
 800a944:	61bb      	str	r3, [r7, #24]
}
 800a946:	bf00      	nop
 800a948:	e7fe      	b.n	800a948 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a950:	2b00      	cmp	r3, #0
 800a952:	d00d      	beq.n	800a970 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a956:	2201      	movs	r2, #1
 800a958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a95c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a962:	9300      	str	r3, [sp, #0]
 800a964:	4613      	mov	r3, r2
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	68b9      	ldr	r1, [r7, #8]
 800a96a:	68f8      	ldr	r0, [r7, #12]
 800a96c:	f000 f843 	bl	800a9f6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a972:	4618      	mov	r0, r3
 800a974:	3730      	adds	r7, #48	; 0x30
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}

0800a97a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a97a:	b580      	push	{r7, lr}
 800a97c:	b08a      	sub	sp, #40	; 0x28
 800a97e:	af02      	add	r7, sp, #8
 800a980:	60f8      	str	r0, [r7, #12]
 800a982:	60b9      	str	r1, [r7, #8]
 800a984:	4613      	mov	r3, r2
 800a986:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d10a      	bne.n	800a9a4 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a992:	f383 8811 	msr	BASEPRI, r3
 800a996:	f3bf 8f6f 	isb	sy
 800a99a:	f3bf 8f4f 	dsb	sy
 800a99e:	613b      	str	r3, [r7, #16]
}
 800a9a0:	bf00      	nop
 800a9a2:	e7fe      	b.n	800a9a2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d102      	bne.n	800a9b0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	61fb      	str	r3, [r7, #28]
 800a9ae:	e004      	b.n	800a9ba <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	68ba      	ldr	r2, [r7, #8]
 800a9b4:	fb02 f303 	mul.w	r3, r2, r3
 800a9b8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	3348      	adds	r3, #72	; 0x48
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f001 fd2c 	bl	800c41c <pvPortMalloc>
 800a9c4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a9c6:	69bb      	ldr	r3, [r7, #24]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d00f      	beq.n	800a9ec <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	3348      	adds	r3, #72	; 0x48
 800a9d0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a9d2:	69bb      	ldr	r3, [r7, #24]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a9da:	79fa      	ldrb	r2, [r7, #7]
 800a9dc:	69bb      	ldr	r3, [r7, #24]
 800a9de:	9300      	str	r3, [sp, #0]
 800a9e0:	4613      	mov	r3, r2
 800a9e2:	697a      	ldr	r2, [r7, #20]
 800a9e4:	68b9      	ldr	r1, [r7, #8]
 800a9e6:	68f8      	ldr	r0, [r7, #12]
 800a9e8:	f000 f805 	bl	800a9f6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a9ec:	69bb      	ldr	r3, [r7, #24]
	}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3720      	adds	r7, #32
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}

0800a9f6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a9f6:	b580      	push	{r7, lr}
 800a9f8:	b084      	sub	sp, #16
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	60f8      	str	r0, [r7, #12]
 800a9fe:	60b9      	str	r1, [r7, #8]
 800aa00:	607a      	str	r2, [r7, #4]
 800aa02:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d103      	bne.n	800aa12 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aa0a:	69bb      	ldr	r3, [r7, #24]
 800aa0c:	69ba      	ldr	r2, [r7, #24]
 800aa0e:	601a      	str	r2, [r3, #0]
 800aa10:	e002      	b.n	800aa18 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aa12:	69bb      	ldr	r3, [r7, #24]
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	68fa      	ldr	r2, [r7, #12]
 800aa1c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	68ba      	ldr	r2, [r7, #8]
 800aa22:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aa24:	2101      	movs	r1, #1
 800aa26:	69b8      	ldr	r0, [r7, #24]
 800aa28:	f7ff fec8 	bl	800a7bc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aa2c:	bf00      	nop
 800aa2e:	3710      	adds	r7, #16
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b08e      	sub	sp, #56	; 0x38
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	607a      	str	r2, [r7, #4]
 800aa40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aa42:	2300      	movs	r3, #0
 800aa44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aa4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d10a      	bne.n	800aa66 <xQueueGenericSend+0x32>
	__asm volatile
 800aa50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa54:	f383 8811 	msr	BASEPRI, r3
 800aa58:	f3bf 8f6f 	isb	sy
 800aa5c:	f3bf 8f4f 	dsb	sy
 800aa60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa62:	bf00      	nop
 800aa64:	e7fe      	b.n	800aa64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d103      	bne.n	800aa74 <xQueueGenericSend+0x40>
 800aa6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d101      	bne.n	800aa78 <xQueueGenericSend+0x44>
 800aa74:	2301      	movs	r3, #1
 800aa76:	e000      	b.n	800aa7a <xQueueGenericSend+0x46>
 800aa78:	2300      	movs	r3, #0
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d10a      	bne.n	800aa94 <xQueueGenericSend+0x60>
	__asm volatile
 800aa7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa82:	f383 8811 	msr	BASEPRI, r3
 800aa86:	f3bf 8f6f 	isb	sy
 800aa8a:	f3bf 8f4f 	dsb	sy
 800aa8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa90:	bf00      	nop
 800aa92:	e7fe      	b.n	800aa92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	d103      	bne.n	800aaa2 <xQueueGenericSend+0x6e>
 800aa9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d101      	bne.n	800aaa6 <xQueueGenericSend+0x72>
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e000      	b.n	800aaa8 <xQueueGenericSend+0x74>
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d10a      	bne.n	800aac2 <xQueueGenericSend+0x8e>
	__asm volatile
 800aaac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab0:	f383 8811 	msr	BASEPRI, r3
 800aab4:	f3bf 8f6f 	isb	sy
 800aab8:	f3bf 8f4f 	dsb	sy
 800aabc:	623b      	str	r3, [r7, #32]
}
 800aabe:	bf00      	nop
 800aac0:	e7fe      	b.n	800aac0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aac2:	f001 f9af 	bl	800be24 <xTaskGetSchedulerState>
 800aac6:	4603      	mov	r3, r0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d102      	bne.n	800aad2 <xQueueGenericSend+0x9e>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d101      	bne.n	800aad6 <xQueueGenericSend+0xa2>
 800aad2:	2301      	movs	r3, #1
 800aad4:	e000      	b.n	800aad8 <xQueueGenericSend+0xa4>
 800aad6:	2300      	movs	r3, #0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d10a      	bne.n	800aaf2 <xQueueGenericSend+0xbe>
	__asm volatile
 800aadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae0:	f383 8811 	msr	BASEPRI, r3
 800aae4:	f3bf 8f6f 	isb	sy
 800aae8:	f3bf 8f4f 	dsb	sy
 800aaec:	61fb      	str	r3, [r7, #28]
}
 800aaee:	bf00      	nop
 800aaf0:	e7fe      	b.n	800aaf0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aaf2:	f001 fb93 	bl	800c21c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aaf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d302      	bcc.n	800ab08 <xQueueGenericSend+0xd4>
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	2b02      	cmp	r3, #2
 800ab06:	d129      	bne.n	800ab5c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab08:	683a      	ldr	r2, [r7, #0]
 800ab0a:	68b9      	ldr	r1, [r7, #8]
 800ab0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab0e:	f000 fa87 	bl	800b020 <prvCopyDataToQueue>
 800ab12:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d010      	beq.n	800ab3e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1e:	3324      	adds	r3, #36	; 0x24
 800ab20:	4618      	mov	r0, r3
 800ab22:	f000 ffbb 	bl	800ba9c <xTaskRemoveFromEventList>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d013      	beq.n	800ab54 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ab2c:	4b3f      	ldr	r3, [pc, #252]	; (800ac2c <xQueueGenericSend+0x1f8>)
 800ab2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab32:	601a      	str	r2, [r3, #0]
 800ab34:	f3bf 8f4f 	dsb	sy
 800ab38:	f3bf 8f6f 	isb	sy
 800ab3c:	e00a      	b.n	800ab54 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ab3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d007      	beq.n	800ab54 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ab44:	4b39      	ldr	r3, [pc, #228]	; (800ac2c <xQueueGenericSend+0x1f8>)
 800ab46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab4a:	601a      	str	r2, [r3, #0]
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ab54:	f001 fb92 	bl	800c27c <vPortExitCritical>
				return pdPASS;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e063      	b.n	800ac24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d103      	bne.n	800ab6a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab62:	f001 fb8b 	bl	800c27c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ab66:	2300      	movs	r3, #0
 800ab68:	e05c      	b.n	800ac24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d106      	bne.n	800ab7e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab70:	f107 0314 	add.w	r3, r7, #20
 800ab74:	4618      	mov	r0, r3
 800ab76:	f000 fff3 	bl	800bb60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab7e:	f001 fb7d 	bl	800c27c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab82:	f000 fd9d 	bl	800b6c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab86:	f001 fb49 	bl	800c21c <vPortEnterCritical>
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab90:	b25b      	sxtb	r3, r3
 800ab92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab96:	d103      	bne.n	800aba0 <xQueueGenericSend+0x16c>
 800ab98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aba6:	b25b      	sxtb	r3, r3
 800aba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abac:	d103      	bne.n	800abb6 <xQueueGenericSend+0x182>
 800abae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb0:	2200      	movs	r2, #0
 800abb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abb6:	f001 fb61 	bl	800c27c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800abba:	1d3a      	adds	r2, r7, #4
 800abbc:	f107 0314 	add.w	r3, r7, #20
 800abc0:	4611      	mov	r1, r2
 800abc2:	4618      	mov	r0, r3
 800abc4:	f000 ffe2 	bl	800bb8c <xTaskCheckForTimeOut>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d124      	bne.n	800ac18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800abce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abd0:	f000 fb1e 	bl	800b210 <prvIsQueueFull>
 800abd4:	4603      	mov	r3, r0
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d018      	beq.n	800ac0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800abda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abdc:	3310      	adds	r3, #16
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	4611      	mov	r1, r2
 800abe2:	4618      	mov	r0, r3
 800abe4:	f000 ff36 	bl	800ba54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800abe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abea:	f000 faa9 	bl	800b140 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800abee:	f000 fd75 	bl	800b6dc <xTaskResumeAll>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	f47f af7c 	bne.w	800aaf2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800abfa:	4b0c      	ldr	r3, [pc, #48]	; (800ac2c <xQueueGenericSend+0x1f8>)
 800abfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac00:	601a      	str	r2, [r3, #0]
 800ac02:	f3bf 8f4f 	dsb	sy
 800ac06:	f3bf 8f6f 	isb	sy
 800ac0a:	e772      	b.n	800aaf2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ac0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac0e:	f000 fa97 	bl	800b140 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac12:	f000 fd63 	bl	800b6dc <xTaskResumeAll>
 800ac16:	e76c      	b.n	800aaf2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ac18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac1a:	f000 fa91 	bl	800b140 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac1e:	f000 fd5d 	bl	800b6dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ac22:	2300      	movs	r3, #0
		}
	}
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3738      	adds	r7, #56	; 0x38
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	e000ed04 	.word	0xe000ed04

0800ac30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b08e      	sub	sp, #56	; 0x38
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	60f8      	str	r0, [r7, #12]
 800ac38:	60b9      	str	r1, [r7, #8]
 800ac3a:	607a      	str	r2, [r7, #4]
 800ac3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ac42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d10a      	bne.n	800ac5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ac48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4c:	f383 8811 	msr	BASEPRI, r3
 800ac50:	f3bf 8f6f 	isb	sy
 800ac54:	f3bf 8f4f 	dsb	sy
 800ac58:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ac5a:	bf00      	nop
 800ac5c:	e7fe      	b.n	800ac5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d103      	bne.n	800ac6c <xQueueGenericSendFromISR+0x3c>
 800ac64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d101      	bne.n	800ac70 <xQueueGenericSendFromISR+0x40>
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	e000      	b.n	800ac72 <xQueueGenericSendFromISR+0x42>
 800ac70:	2300      	movs	r3, #0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d10a      	bne.n	800ac8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ac76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7a:	f383 8811 	msr	BASEPRI, r3
 800ac7e:	f3bf 8f6f 	isb	sy
 800ac82:	f3bf 8f4f 	dsb	sy
 800ac86:	623b      	str	r3, [r7, #32]
}
 800ac88:	bf00      	nop
 800ac8a:	e7fe      	b.n	800ac8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	2b02      	cmp	r3, #2
 800ac90:	d103      	bne.n	800ac9a <xQueueGenericSendFromISR+0x6a>
 800ac92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d101      	bne.n	800ac9e <xQueueGenericSendFromISR+0x6e>
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	e000      	b.n	800aca0 <xQueueGenericSendFromISR+0x70>
 800ac9e:	2300      	movs	r3, #0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d10a      	bne.n	800acba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800aca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca8:	f383 8811 	msr	BASEPRI, r3
 800acac:	f3bf 8f6f 	isb	sy
 800acb0:	f3bf 8f4f 	dsb	sy
 800acb4:	61fb      	str	r3, [r7, #28]
}
 800acb6:	bf00      	nop
 800acb8:	e7fe      	b.n	800acb8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800acba:	f001 fb71 	bl	800c3a0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800acbe:	f3ef 8211 	mrs	r2, BASEPRI
 800acc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc6:	f383 8811 	msr	BASEPRI, r3
 800acca:	f3bf 8f6f 	isb	sy
 800acce:	f3bf 8f4f 	dsb	sy
 800acd2:	61ba      	str	r2, [r7, #24]
 800acd4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800acd6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800acd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800acda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d302      	bcc.n	800acec <xQueueGenericSendFromISR+0xbc>
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	2b02      	cmp	r3, #2
 800acea:	d12c      	bne.n	800ad46 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800acec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800acf6:	683a      	ldr	r2, [r7, #0]
 800acf8:	68b9      	ldr	r1, [r7, #8]
 800acfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acfc:	f000 f990 	bl	800b020 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ad00:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ad04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad08:	d112      	bne.n	800ad30 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d016      	beq.n	800ad40 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad14:	3324      	adds	r3, #36	; 0x24
 800ad16:	4618      	mov	r0, r3
 800ad18:	f000 fec0 	bl	800ba9c <xTaskRemoveFromEventList>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00e      	beq.n	800ad40 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d00b      	beq.n	800ad40 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	601a      	str	r2, [r3, #0]
 800ad2e:	e007      	b.n	800ad40 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ad30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad34:	3301      	adds	r3, #1
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	b25a      	sxtb	r2, r3
 800ad3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ad40:	2301      	movs	r3, #1
 800ad42:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ad44:	e001      	b.n	800ad4a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ad46:	2300      	movs	r3, #0
 800ad48:	637b      	str	r3, [r7, #52]	; 0x34
 800ad4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ad54:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ad56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3738      	adds	r7, #56	; 0x38
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b08c      	sub	sp, #48	; 0x30
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d10a      	bne.n	800ad90 <xQueueReceive+0x30>
	__asm volatile
 800ad7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7e:	f383 8811 	msr	BASEPRI, r3
 800ad82:	f3bf 8f6f 	isb	sy
 800ad86:	f3bf 8f4f 	dsb	sy
 800ad8a:	623b      	str	r3, [r7, #32]
}
 800ad8c:	bf00      	nop
 800ad8e:	e7fe      	b.n	800ad8e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d103      	bne.n	800ad9e <xQueueReceive+0x3e>
 800ad96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d101      	bne.n	800ada2 <xQueueReceive+0x42>
 800ad9e:	2301      	movs	r3, #1
 800ada0:	e000      	b.n	800ada4 <xQueueReceive+0x44>
 800ada2:	2300      	movs	r3, #0
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d10a      	bne.n	800adbe <xQueueReceive+0x5e>
	__asm volatile
 800ada8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adac:	f383 8811 	msr	BASEPRI, r3
 800adb0:	f3bf 8f6f 	isb	sy
 800adb4:	f3bf 8f4f 	dsb	sy
 800adb8:	61fb      	str	r3, [r7, #28]
}
 800adba:	bf00      	nop
 800adbc:	e7fe      	b.n	800adbc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800adbe:	f001 f831 	bl	800be24 <xTaskGetSchedulerState>
 800adc2:	4603      	mov	r3, r0
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d102      	bne.n	800adce <xQueueReceive+0x6e>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d101      	bne.n	800add2 <xQueueReceive+0x72>
 800adce:	2301      	movs	r3, #1
 800add0:	e000      	b.n	800add4 <xQueueReceive+0x74>
 800add2:	2300      	movs	r3, #0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d10a      	bne.n	800adee <xQueueReceive+0x8e>
	__asm volatile
 800add8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800addc:	f383 8811 	msr	BASEPRI, r3
 800ade0:	f3bf 8f6f 	isb	sy
 800ade4:	f3bf 8f4f 	dsb	sy
 800ade8:	61bb      	str	r3, [r7, #24]
}
 800adea:	bf00      	nop
 800adec:	e7fe      	b.n	800adec <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800adee:	f001 fa15 	bl	800c21c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800adf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800adf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d01f      	beq.n	800ae3e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800adfe:	68b9      	ldr	r1, [r7, #8]
 800ae00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae02:	f000 f977 	bl	800b0f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ae06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae08:	1e5a      	subs	r2, r3, #1
 800ae0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae10:	691b      	ldr	r3, [r3, #16]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d00f      	beq.n	800ae36 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae18:	3310      	adds	r3, #16
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f000 fe3e 	bl	800ba9c <xTaskRemoveFromEventList>
 800ae20:	4603      	mov	r3, r0
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d007      	beq.n	800ae36 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ae26:	4b3d      	ldr	r3, [pc, #244]	; (800af1c <xQueueReceive+0x1bc>)
 800ae28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae2c:	601a      	str	r2, [r3, #0]
 800ae2e:	f3bf 8f4f 	dsb	sy
 800ae32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ae36:	f001 fa21 	bl	800c27c <vPortExitCritical>
				return pdPASS;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	e069      	b.n	800af12 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d103      	bne.n	800ae4c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae44:	f001 fa1a 	bl	800c27c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	e062      	b.n	800af12 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d106      	bne.n	800ae60 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae52:	f107 0310 	add.w	r3, r7, #16
 800ae56:	4618      	mov	r0, r3
 800ae58:	f000 fe82 	bl	800bb60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae60:	f001 fa0c 	bl	800c27c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae64:	f000 fc2c 	bl	800b6c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae68:	f001 f9d8 	bl	800c21c <vPortEnterCritical>
 800ae6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae72:	b25b      	sxtb	r3, r3
 800ae74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae78:	d103      	bne.n	800ae82 <xQueueReceive+0x122>
 800ae7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae88:	b25b      	sxtb	r3, r3
 800ae8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae8e:	d103      	bne.n	800ae98 <xQueueReceive+0x138>
 800ae90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae92:	2200      	movs	r2, #0
 800ae94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae98:	f001 f9f0 	bl	800c27c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae9c:	1d3a      	adds	r2, r7, #4
 800ae9e:	f107 0310 	add.w	r3, r7, #16
 800aea2:	4611      	mov	r1, r2
 800aea4:	4618      	mov	r0, r3
 800aea6:	f000 fe71 	bl	800bb8c <xTaskCheckForTimeOut>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d123      	bne.n	800aef8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aeb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aeb2:	f000 f997 	bl	800b1e4 <prvIsQueueEmpty>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d017      	beq.n	800aeec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aebe:	3324      	adds	r3, #36	; 0x24
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	4611      	mov	r1, r2
 800aec4:	4618      	mov	r0, r3
 800aec6:	f000 fdc5 	bl	800ba54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aeca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aecc:	f000 f938 	bl	800b140 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aed0:	f000 fc04 	bl	800b6dc <xTaskResumeAll>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d189      	bne.n	800adee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800aeda:	4b10      	ldr	r3, [pc, #64]	; (800af1c <xQueueReceive+0x1bc>)
 800aedc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aee0:	601a      	str	r2, [r3, #0]
 800aee2:	f3bf 8f4f 	dsb	sy
 800aee6:	f3bf 8f6f 	isb	sy
 800aeea:	e780      	b.n	800adee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aeec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aeee:	f000 f927 	bl	800b140 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aef2:	f000 fbf3 	bl	800b6dc <xTaskResumeAll>
 800aef6:	e77a      	b.n	800adee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aef8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aefa:	f000 f921 	bl	800b140 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aefe:	f000 fbed 	bl	800b6dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af04:	f000 f96e 	bl	800b1e4 <prvIsQueueEmpty>
 800af08:	4603      	mov	r3, r0
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	f43f af6f 	beq.w	800adee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800af12:	4618      	mov	r0, r3
 800af14:	3730      	adds	r7, #48	; 0x30
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	e000ed04 	.word	0xe000ed04

0800af20 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b08e      	sub	sp, #56	; 0x38
 800af24:	af00      	add	r7, sp, #0
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800af30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af32:	2b00      	cmp	r3, #0
 800af34:	d10a      	bne.n	800af4c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800af36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af3a:	f383 8811 	msr	BASEPRI, r3
 800af3e:	f3bf 8f6f 	isb	sy
 800af42:	f3bf 8f4f 	dsb	sy
 800af46:	623b      	str	r3, [r7, #32]
}
 800af48:	bf00      	nop
 800af4a:	e7fe      	b.n	800af4a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d103      	bne.n	800af5a <xQueueReceiveFromISR+0x3a>
 800af52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af56:	2b00      	cmp	r3, #0
 800af58:	d101      	bne.n	800af5e <xQueueReceiveFromISR+0x3e>
 800af5a:	2301      	movs	r3, #1
 800af5c:	e000      	b.n	800af60 <xQueueReceiveFromISR+0x40>
 800af5e:	2300      	movs	r3, #0
 800af60:	2b00      	cmp	r3, #0
 800af62:	d10a      	bne.n	800af7a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800af64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af68:	f383 8811 	msr	BASEPRI, r3
 800af6c:	f3bf 8f6f 	isb	sy
 800af70:	f3bf 8f4f 	dsb	sy
 800af74:	61fb      	str	r3, [r7, #28]
}
 800af76:	bf00      	nop
 800af78:	e7fe      	b.n	800af78 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800af7a:	f001 fa11 	bl	800c3a0 <vPortValidateInterruptPriority>
	__asm volatile
 800af7e:	f3ef 8211 	mrs	r2, BASEPRI
 800af82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af86:	f383 8811 	msr	BASEPRI, r3
 800af8a:	f3bf 8f6f 	isb	sy
 800af8e:	f3bf 8f4f 	dsb	sy
 800af92:	61ba      	str	r2, [r7, #24]
 800af94:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800af96:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800af98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af9e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800afa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d02f      	beq.n	800b006 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800afa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800afb0:	68b9      	ldr	r1, [r7, #8]
 800afb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afb4:	f000 f89e 	bl	800b0f4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800afb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afba:	1e5a      	subs	r2, r3, #1
 800afbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afbe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800afc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800afc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afc8:	d112      	bne.n	800aff0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afcc:	691b      	ldr	r3, [r3, #16]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d016      	beq.n	800b000 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd4:	3310      	adds	r3, #16
 800afd6:	4618      	mov	r0, r3
 800afd8:	f000 fd60 	bl	800ba9c <xTaskRemoveFromEventList>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d00e      	beq.n	800b000 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d00b      	beq.n	800b000 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2201      	movs	r2, #1
 800afec:	601a      	str	r2, [r3, #0]
 800afee:	e007      	b.n	800b000 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800aff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aff4:	3301      	adds	r3, #1
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	b25a      	sxtb	r2, r3
 800affa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b000:	2301      	movs	r3, #1
 800b002:	637b      	str	r3, [r7, #52]	; 0x34
 800b004:	e001      	b.n	800b00a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b006:	2300      	movs	r3, #0
 800b008:	637b      	str	r3, [r7, #52]	; 0x34
 800b00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b00c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	f383 8811 	msr	BASEPRI, r3
}
 800b014:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3738      	adds	r7, #56	; 0x38
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b086      	sub	sp, #24
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b02c:	2300      	movs	r3, #0
 800b02e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b034:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d10d      	bne.n	800b05a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d14d      	bne.n	800b0e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	4618      	mov	r0, r3
 800b04c:	f000 ff08 	bl	800be60 <xTaskPriorityDisinherit>
 800b050:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2200      	movs	r2, #0
 800b056:	605a      	str	r2, [r3, #4]
 800b058:	e043      	b.n	800b0e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d119      	bne.n	800b094 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	6898      	ldr	r0, [r3, #8]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b068:	461a      	mov	r2, r3
 800b06a:	68b9      	ldr	r1, [r7, #8]
 800b06c:	f001 feea 	bl	800ce44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	689a      	ldr	r2, [r3, #8]
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b078:	441a      	add	r2, r3
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	689a      	ldr	r2, [r3, #8]
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	429a      	cmp	r2, r3
 800b088:	d32b      	bcc.n	800b0e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	609a      	str	r2, [r3, #8]
 800b092:	e026      	b.n	800b0e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	68d8      	ldr	r0, [r3, #12]
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b09c:	461a      	mov	r2, r3
 800b09e:	68b9      	ldr	r1, [r7, #8]
 800b0a0:	f001 fed0 	bl	800ce44 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	68da      	ldr	r2, [r3, #12]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ac:	425b      	negs	r3, r3
 800b0ae:	441a      	add	r2, r3
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	68da      	ldr	r2, [r3, #12]
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d207      	bcs.n	800b0d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	685a      	ldr	r2, [r3, #4]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c8:	425b      	negs	r3, r3
 800b0ca:	441a      	add	r2, r3
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2b02      	cmp	r3, #2
 800b0d4:	d105      	bne.n	800b0e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d002      	beq.n	800b0e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	3b01      	subs	r3, #1
 800b0e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	1c5a      	adds	r2, r3, #1
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b0ea:	697b      	ldr	r3, [r7, #20]
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3718      	adds	r7, #24
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b082      	sub	sp, #8
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b102:	2b00      	cmp	r3, #0
 800b104:	d018      	beq.n	800b138 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	68da      	ldr	r2, [r3, #12]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b10e:	441a      	add	r2, r3
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	68da      	ldr	r2, [r3, #12]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d303      	bcc.n	800b128 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681a      	ldr	r2, [r3, #0]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	68d9      	ldr	r1, [r3, #12]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b130:	461a      	mov	r2, r3
 800b132:	6838      	ldr	r0, [r7, #0]
 800b134:	f001 fe86 	bl	800ce44 <memcpy>
	}
}
 800b138:	bf00      	nop
 800b13a:	3708      	adds	r7, #8
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b148:	f001 f868 	bl	800c21c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b152:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b154:	e011      	b.n	800b17a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d012      	beq.n	800b184 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	3324      	adds	r3, #36	; 0x24
 800b162:	4618      	mov	r0, r3
 800b164:	f000 fc9a 	bl	800ba9c <xTaskRemoveFromEventList>
 800b168:	4603      	mov	r3, r0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d001      	beq.n	800b172 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b16e:	f000 fd6f 	bl	800bc50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b172:	7bfb      	ldrb	r3, [r7, #15]
 800b174:	3b01      	subs	r3, #1
 800b176:	b2db      	uxtb	r3, r3
 800b178:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b17a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	dce9      	bgt.n	800b156 <prvUnlockQueue+0x16>
 800b182:	e000      	b.n	800b186 <prvUnlockQueue+0x46>
					break;
 800b184:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	22ff      	movs	r2, #255	; 0xff
 800b18a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b18e:	f001 f875 	bl	800c27c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b192:	f001 f843 	bl	800c21c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b19c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b19e:	e011      	b.n	800b1c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	691b      	ldr	r3, [r3, #16]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d012      	beq.n	800b1ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	3310      	adds	r3, #16
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f000 fc75 	bl	800ba9c <xTaskRemoveFromEventList>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d001      	beq.n	800b1bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b1b8:	f000 fd4a 	bl	800bc50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b1bc:	7bbb      	ldrb	r3, [r7, #14]
 800b1be:	3b01      	subs	r3, #1
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b1c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	dce9      	bgt.n	800b1a0 <prvUnlockQueue+0x60>
 800b1cc:	e000      	b.n	800b1d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b1ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	22ff      	movs	r2, #255	; 0xff
 800b1d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b1d8:	f001 f850 	bl	800c27c <vPortExitCritical>
}
 800b1dc:	bf00      	nop
 800b1de:	3710      	adds	r7, #16
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b084      	sub	sp, #16
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1ec:	f001 f816 	bl	800c21c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d102      	bne.n	800b1fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	60fb      	str	r3, [r7, #12]
 800b1fc:	e001      	b.n	800b202 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b1fe:	2300      	movs	r3, #0
 800b200:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b202:	f001 f83b 	bl	800c27c <vPortExitCritical>

	return xReturn;
 800b206:	68fb      	ldr	r3, [r7, #12]
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3710      	adds	r7, #16
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b084      	sub	sp, #16
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b218:	f001 f800 	bl	800c21c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b224:	429a      	cmp	r2, r3
 800b226:	d102      	bne.n	800b22e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b228:	2301      	movs	r3, #1
 800b22a:	60fb      	str	r3, [r7, #12]
 800b22c:	e001      	b.n	800b232 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b22e:	2300      	movs	r3, #0
 800b230:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b232:	f001 f823 	bl	800c27c <vPortExitCritical>

	return xReturn;
 800b236:	68fb      	ldr	r3, [r7, #12]
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3710      	adds	r7, #16
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b240:	b580      	push	{r7, lr}
 800b242:	b08e      	sub	sp, #56	; 0x38
 800b244:	af04      	add	r7, sp, #16
 800b246:	60f8      	str	r0, [r7, #12]
 800b248:	60b9      	str	r1, [r7, #8]
 800b24a:	607a      	str	r2, [r7, #4]
 800b24c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b24e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b250:	2b00      	cmp	r3, #0
 800b252:	d10a      	bne.n	800b26a <xTaskCreateStatic+0x2a>
	__asm volatile
 800b254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b258:	f383 8811 	msr	BASEPRI, r3
 800b25c:	f3bf 8f6f 	isb	sy
 800b260:	f3bf 8f4f 	dsb	sy
 800b264:	623b      	str	r3, [r7, #32]
}
 800b266:	bf00      	nop
 800b268:	e7fe      	b.n	800b268 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d10a      	bne.n	800b286 <xTaskCreateStatic+0x46>
	__asm volatile
 800b270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b274:	f383 8811 	msr	BASEPRI, r3
 800b278:	f3bf 8f6f 	isb	sy
 800b27c:	f3bf 8f4f 	dsb	sy
 800b280:	61fb      	str	r3, [r7, #28]
}
 800b282:	bf00      	nop
 800b284:	e7fe      	b.n	800b284 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b286:	23b4      	movs	r3, #180	; 0xb4
 800b288:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	2bb4      	cmp	r3, #180	; 0xb4
 800b28e:	d00a      	beq.n	800b2a6 <xTaskCreateStatic+0x66>
	__asm volatile
 800b290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b294:	f383 8811 	msr	BASEPRI, r3
 800b298:	f3bf 8f6f 	isb	sy
 800b29c:	f3bf 8f4f 	dsb	sy
 800b2a0:	61bb      	str	r3, [r7, #24]
}
 800b2a2:	bf00      	nop
 800b2a4:	e7fe      	b.n	800b2a4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d01e      	beq.n	800b2ea <xTaskCreateStatic+0xaa>
 800b2ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d01b      	beq.n	800b2ea <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2ba:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2be:	2202      	movs	r2, #2
 800b2c0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	9303      	str	r3, [sp, #12]
 800b2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ca:	9302      	str	r3, [sp, #8]
 800b2cc:	f107 0314 	add.w	r3, r7, #20
 800b2d0:	9301      	str	r3, [sp, #4]
 800b2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d4:	9300      	str	r3, [sp, #0]
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	68b9      	ldr	r1, [r7, #8]
 800b2dc:	68f8      	ldr	r0, [r7, #12]
 800b2de:	f000 f851 	bl	800b384 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b2e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2e4:	f000 f8e4 	bl	800b4b0 <prvAddNewTaskToReadyList>
 800b2e8:	e001      	b.n	800b2ee <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b2ee:	697b      	ldr	r3, [r7, #20]
	}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3728      	adds	r7, #40	; 0x28
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b08c      	sub	sp, #48	; 0x30
 800b2fc:	af04      	add	r7, sp, #16
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	60b9      	str	r1, [r7, #8]
 800b302:	603b      	str	r3, [r7, #0]
 800b304:	4613      	mov	r3, r2
 800b306:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b308:	88fb      	ldrh	r3, [r7, #6]
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	4618      	mov	r0, r3
 800b30e:	f001 f885 	bl	800c41c <pvPortMalloc>
 800b312:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d00e      	beq.n	800b338 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b31a:	20b4      	movs	r0, #180	; 0xb4
 800b31c:	f001 f87e 	bl	800c41c <pvPortMalloc>
 800b320:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b322:	69fb      	ldr	r3, [r7, #28]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d003      	beq.n	800b330 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	697a      	ldr	r2, [r7, #20]
 800b32c:	631a      	str	r2, [r3, #48]	; 0x30
 800b32e:	e005      	b.n	800b33c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b330:	6978      	ldr	r0, [r7, #20]
 800b332:	f001 f937 	bl	800c5a4 <vPortFree>
 800b336:	e001      	b.n	800b33c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b338:	2300      	movs	r3, #0
 800b33a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b33c:	69fb      	ldr	r3, [r7, #28]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d017      	beq.n	800b372 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b342:	69fb      	ldr	r3, [r7, #28]
 800b344:	2200      	movs	r2, #0
 800b346:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b34a:	88fa      	ldrh	r2, [r7, #6]
 800b34c:	2300      	movs	r3, #0
 800b34e:	9303      	str	r3, [sp, #12]
 800b350:	69fb      	ldr	r3, [r7, #28]
 800b352:	9302      	str	r3, [sp, #8]
 800b354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b356:	9301      	str	r3, [sp, #4]
 800b358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b35a:	9300      	str	r3, [sp, #0]
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	68b9      	ldr	r1, [r7, #8]
 800b360:	68f8      	ldr	r0, [r7, #12]
 800b362:	f000 f80f 	bl	800b384 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b366:	69f8      	ldr	r0, [r7, #28]
 800b368:	f000 f8a2 	bl	800b4b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b36c:	2301      	movs	r3, #1
 800b36e:	61bb      	str	r3, [r7, #24]
 800b370:	e002      	b.n	800b378 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b372:	f04f 33ff 	mov.w	r3, #4294967295
 800b376:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b378:	69bb      	ldr	r3, [r7, #24]
	}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3720      	adds	r7, #32
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
	...

0800b384 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b088      	sub	sp, #32
 800b388:	af00      	add	r7, sp, #0
 800b38a:	60f8      	str	r0, [r7, #12]
 800b38c:	60b9      	str	r1, [r7, #8]
 800b38e:	607a      	str	r2, [r7, #4]
 800b390:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b39c:	3b01      	subs	r3, #1
 800b39e:	009b      	lsls	r3, r3, #2
 800b3a0:	4413      	add	r3, r2
 800b3a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b3a4:	69bb      	ldr	r3, [r7, #24]
 800b3a6:	f023 0307 	bic.w	r3, r3, #7
 800b3aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b3ac:	69bb      	ldr	r3, [r7, #24]
 800b3ae:	f003 0307 	and.w	r3, r3, #7
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d00a      	beq.n	800b3cc <prvInitialiseNewTask+0x48>
	__asm volatile
 800b3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ba:	f383 8811 	msr	BASEPRI, r3
 800b3be:	f3bf 8f6f 	isb	sy
 800b3c2:	f3bf 8f4f 	dsb	sy
 800b3c6:	617b      	str	r3, [r7, #20]
}
 800b3c8:	bf00      	nop
 800b3ca:	e7fe      	b.n	800b3ca <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	61fb      	str	r3, [r7, #28]
 800b3d0:	e012      	b.n	800b3f8 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b3d2:	68ba      	ldr	r2, [r7, #8]
 800b3d4:	69fb      	ldr	r3, [r7, #28]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	7819      	ldrb	r1, [r3, #0]
 800b3da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3dc:	69fb      	ldr	r3, [r7, #28]
 800b3de:	4413      	add	r3, r2
 800b3e0:	3334      	adds	r3, #52	; 0x34
 800b3e2:	460a      	mov	r2, r1
 800b3e4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b3e6:	68ba      	ldr	r2, [r7, #8]
 800b3e8:	69fb      	ldr	r3, [r7, #28]
 800b3ea:	4413      	add	r3, r2
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d006      	beq.n	800b400 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b3f2:	69fb      	ldr	r3, [r7, #28]
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	61fb      	str	r3, [r7, #28]
 800b3f8:	69fb      	ldr	r3, [r7, #28]
 800b3fa:	2b0f      	cmp	r3, #15
 800b3fc:	d9e9      	bls.n	800b3d2 <prvInitialiseNewTask+0x4e>
 800b3fe:	e000      	b.n	800b402 <prvInitialiseNewTask+0x7e>
		{
			break;
 800b400:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b404:	2200      	movs	r2, #0
 800b406:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b40c:	2b06      	cmp	r3, #6
 800b40e:	d901      	bls.n	800b414 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b410:	2306      	movs	r3, #6
 800b412:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b418:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b41e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b422:	2200      	movs	r2, #0
 800b424:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b428:	3304      	adds	r3, #4
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7ff f935 	bl	800a69a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b432:	3318      	adds	r3, #24
 800b434:	4618      	mov	r0, r3
 800b436:	f7ff f930 	bl	800a69a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b43c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b43e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b442:	f1c3 0207 	rsb	r2, r3, #7
 800b446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b448:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b44c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b44e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b452:	2200      	movs	r2, #0
 800b454:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b45a:	2200      	movs	r2, #0
 800b45c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b462:	334c      	adds	r3, #76	; 0x4c
 800b464:	2260      	movs	r2, #96	; 0x60
 800b466:	2100      	movs	r1, #0
 800b468:	4618      	mov	r0, r3
 800b46a:	f001 fcf9 	bl	800ce60 <memset>
 800b46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b470:	4a0c      	ldr	r2, [pc, #48]	; (800b4a4 <prvInitialiseNewTask+0x120>)
 800b472:	651a      	str	r2, [r3, #80]	; 0x50
 800b474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b476:	4a0c      	ldr	r2, [pc, #48]	; (800b4a8 <prvInitialiseNewTask+0x124>)
 800b478:	655a      	str	r2, [r3, #84]	; 0x54
 800b47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47c:	4a0b      	ldr	r2, [pc, #44]	; (800b4ac <prvInitialiseNewTask+0x128>)
 800b47e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b480:	683a      	ldr	r2, [r7, #0]
 800b482:	68f9      	ldr	r1, [r7, #12]
 800b484:	69b8      	ldr	r0, [r7, #24]
 800b486:	f000 fdd7 	bl	800c038 <pxPortInitialiseStack>
 800b48a:	4602      	mov	r2, r0
 800b48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b492:	2b00      	cmp	r3, #0
 800b494:	d002      	beq.n	800b49c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b49a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b49c:	bf00      	nop
 800b49e:	3720      	adds	r7, #32
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	0800d9f8 	.word	0x0800d9f8
 800b4a8:	0800da18 	.word	0x0800da18
 800b4ac:	0800d9d8 	.word	0x0800d9d8

0800b4b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b4b8:	f000 feb0 	bl	800c21c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b4bc:	4b2a      	ldr	r3, [pc, #168]	; (800b568 <prvAddNewTaskToReadyList+0xb8>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	4a29      	ldr	r2, [pc, #164]	; (800b568 <prvAddNewTaskToReadyList+0xb8>)
 800b4c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b4c6:	4b29      	ldr	r3, [pc, #164]	; (800b56c <prvAddNewTaskToReadyList+0xbc>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d109      	bne.n	800b4e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b4ce:	4a27      	ldr	r2, [pc, #156]	; (800b56c <prvAddNewTaskToReadyList+0xbc>)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b4d4:	4b24      	ldr	r3, [pc, #144]	; (800b568 <prvAddNewTaskToReadyList+0xb8>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d110      	bne.n	800b4fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b4dc:	f000 fbdc 	bl	800bc98 <prvInitialiseTaskLists>
 800b4e0:	e00d      	b.n	800b4fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b4e2:	4b23      	ldr	r3, [pc, #140]	; (800b570 <prvAddNewTaskToReadyList+0xc0>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d109      	bne.n	800b4fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b4ea:	4b20      	ldr	r3, [pc, #128]	; (800b56c <prvAddNewTaskToReadyList+0xbc>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d802      	bhi.n	800b4fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b4f8:	4a1c      	ldr	r2, [pc, #112]	; (800b56c <prvAddNewTaskToReadyList+0xbc>)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b4fe:	4b1d      	ldr	r3, [pc, #116]	; (800b574 <prvAddNewTaskToReadyList+0xc4>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	3301      	adds	r3, #1
 800b504:	4a1b      	ldr	r2, [pc, #108]	; (800b574 <prvAddNewTaskToReadyList+0xc4>)
 800b506:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b50c:	2201      	movs	r2, #1
 800b50e:	409a      	lsls	r2, r3
 800b510:	4b19      	ldr	r3, [pc, #100]	; (800b578 <prvAddNewTaskToReadyList+0xc8>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4313      	orrs	r3, r2
 800b516:	4a18      	ldr	r2, [pc, #96]	; (800b578 <prvAddNewTaskToReadyList+0xc8>)
 800b518:	6013      	str	r3, [r2, #0]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b51e:	4613      	mov	r3, r2
 800b520:	009b      	lsls	r3, r3, #2
 800b522:	4413      	add	r3, r2
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	4a15      	ldr	r2, [pc, #84]	; (800b57c <prvAddNewTaskToReadyList+0xcc>)
 800b528:	441a      	add	r2, r3
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	3304      	adds	r3, #4
 800b52e:	4619      	mov	r1, r3
 800b530:	4610      	mov	r0, r2
 800b532:	f7ff f8be 	bl	800a6b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b536:	f000 fea1 	bl	800c27c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b53a:	4b0d      	ldr	r3, [pc, #52]	; (800b570 <prvAddNewTaskToReadyList+0xc0>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d00e      	beq.n	800b560 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b542:	4b0a      	ldr	r3, [pc, #40]	; (800b56c <prvAddNewTaskToReadyList+0xbc>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d207      	bcs.n	800b560 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b550:	4b0b      	ldr	r3, [pc, #44]	; (800b580 <prvAddNewTaskToReadyList+0xd0>)
 800b552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b556:	601a      	str	r2, [r3, #0]
 800b558:	f3bf 8f4f 	dsb	sy
 800b55c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b560:	bf00      	nop
 800b562:	3708      	adds	r7, #8
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}
 800b568:	200013f8 	.word	0x200013f8
 800b56c:	200012f8 	.word	0x200012f8
 800b570:	20001404 	.word	0x20001404
 800b574:	20001414 	.word	0x20001414
 800b578:	20001400 	.word	0x20001400
 800b57c:	200012fc 	.word	0x200012fc
 800b580:	e000ed04 	.word	0xe000ed04

0800b584 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b58c:	2300      	movs	r3, #0
 800b58e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d017      	beq.n	800b5c6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b596:	4b13      	ldr	r3, [pc, #76]	; (800b5e4 <vTaskDelay+0x60>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d00a      	beq.n	800b5b4 <vTaskDelay+0x30>
	__asm volatile
 800b59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a2:	f383 8811 	msr	BASEPRI, r3
 800b5a6:	f3bf 8f6f 	isb	sy
 800b5aa:	f3bf 8f4f 	dsb	sy
 800b5ae:	60bb      	str	r3, [r7, #8]
}
 800b5b0:	bf00      	nop
 800b5b2:	e7fe      	b.n	800b5b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b5b4:	f000 f884 	bl	800b6c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b5b8:	2100      	movs	r1, #0
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 fcd6 	bl	800bf6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b5c0:	f000 f88c 	bl	800b6dc <xTaskResumeAll>
 800b5c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d107      	bne.n	800b5dc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b5cc:	4b06      	ldr	r3, [pc, #24]	; (800b5e8 <vTaskDelay+0x64>)
 800b5ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5d2:	601a      	str	r2, [r3, #0]
 800b5d4:	f3bf 8f4f 	dsb	sy
 800b5d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b5dc:	bf00      	nop
 800b5de:	3710      	adds	r7, #16
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	20001420 	.word	0x20001420
 800b5e8:	e000ed04 	.word	0xe000ed04

0800b5ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b08a      	sub	sp, #40	; 0x28
 800b5f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b5fa:	463a      	mov	r2, r7
 800b5fc:	1d39      	adds	r1, r7, #4
 800b5fe:	f107 0308 	add.w	r3, r7, #8
 800b602:	4618      	mov	r0, r3
 800b604:	f7f5 f862 	bl	80006cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b608:	6839      	ldr	r1, [r7, #0]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	68ba      	ldr	r2, [r7, #8]
 800b60e:	9202      	str	r2, [sp, #8]
 800b610:	9301      	str	r3, [sp, #4]
 800b612:	2300      	movs	r3, #0
 800b614:	9300      	str	r3, [sp, #0]
 800b616:	2300      	movs	r3, #0
 800b618:	460a      	mov	r2, r1
 800b61a:	4921      	ldr	r1, [pc, #132]	; (800b6a0 <vTaskStartScheduler+0xb4>)
 800b61c:	4821      	ldr	r0, [pc, #132]	; (800b6a4 <vTaskStartScheduler+0xb8>)
 800b61e:	f7ff fe0f 	bl	800b240 <xTaskCreateStatic>
 800b622:	4603      	mov	r3, r0
 800b624:	4a20      	ldr	r2, [pc, #128]	; (800b6a8 <vTaskStartScheduler+0xbc>)
 800b626:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b628:	4b1f      	ldr	r3, [pc, #124]	; (800b6a8 <vTaskStartScheduler+0xbc>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d002      	beq.n	800b636 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b630:	2301      	movs	r3, #1
 800b632:	617b      	str	r3, [r7, #20]
 800b634:	e001      	b.n	800b63a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b636:	2300      	movs	r3, #0
 800b638:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d11b      	bne.n	800b678 <vTaskStartScheduler+0x8c>
	__asm volatile
 800b640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b644:	f383 8811 	msr	BASEPRI, r3
 800b648:	f3bf 8f6f 	isb	sy
 800b64c:	f3bf 8f4f 	dsb	sy
 800b650:	613b      	str	r3, [r7, #16]
}
 800b652:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b654:	4b15      	ldr	r3, [pc, #84]	; (800b6ac <vTaskStartScheduler+0xc0>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	334c      	adds	r3, #76	; 0x4c
 800b65a:	4a15      	ldr	r2, [pc, #84]	; (800b6b0 <vTaskStartScheduler+0xc4>)
 800b65c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b65e:	4b15      	ldr	r3, [pc, #84]	; (800b6b4 <vTaskStartScheduler+0xc8>)
 800b660:	f04f 32ff 	mov.w	r2, #4294967295
 800b664:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b666:	4b14      	ldr	r3, [pc, #80]	; (800b6b8 <vTaskStartScheduler+0xcc>)
 800b668:	2201      	movs	r2, #1
 800b66a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b66c:	4b13      	ldr	r3, [pc, #76]	; (800b6bc <vTaskStartScheduler+0xd0>)
 800b66e:	2200      	movs	r2, #0
 800b670:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b672:	f000 fd61 	bl	800c138 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b676:	e00e      	b.n	800b696 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b67e:	d10a      	bne.n	800b696 <vTaskStartScheduler+0xaa>
	__asm volatile
 800b680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b684:	f383 8811 	msr	BASEPRI, r3
 800b688:	f3bf 8f6f 	isb	sy
 800b68c:	f3bf 8f4f 	dsb	sy
 800b690:	60fb      	str	r3, [r7, #12]
}
 800b692:	bf00      	nop
 800b694:	e7fe      	b.n	800b694 <vTaskStartScheduler+0xa8>
}
 800b696:	bf00      	nop
 800b698:	3718      	adds	r7, #24
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	0800d9b8 	.word	0x0800d9b8
 800b6a4:	0800bc69 	.word	0x0800bc69
 800b6a8:	2000141c 	.word	0x2000141c
 800b6ac:	200012f8 	.word	0x200012f8
 800b6b0:	20000088 	.word	0x20000088
 800b6b4:	20001418 	.word	0x20001418
 800b6b8:	20001404 	.word	0x20001404
 800b6bc:	200013fc 	.word	0x200013fc

0800b6c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b6c4:	4b04      	ldr	r3, [pc, #16]	; (800b6d8 <vTaskSuspendAll+0x18>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	4a03      	ldr	r2, [pc, #12]	; (800b6d8 <vTaskSuspendAll+0x18>)
 800b6cc:	6013      	str	r3, [r2, #0]
}
 800b6ce:	bf00      	nop
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bc80      	pop	{r7}
 800b6d4:	4770      	bx	lr
 800b6d6:	bf00      	nop
 800b6d8:	20001420 	.word	0x20001420

0800b6dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b6ea:	4b41      	ldr	r3, [pc, #260]	; (800b7f0 <xTaskResumeAll+0x114>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d10a      	bne.n	800b708 <xTaskResumeAll+0x2c>
	__asm volatile
 800b6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f6:	f383 8811 	msr	BASEPRI, r3
 800b6fa:	f3bf 8f6f 	isb	sy
 800b6fe:	f3bf 8f4f 	dsb	sy
 800b702:	603b      	str	r3, [r7, #0]
}
 800b704:	bf00      	nop
 800b706:	e7fe      	b.n	800b706 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b708:	f000 fd88 	bl	800c21c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b70c:	4b38      	ldr	r3, [pc, #224]	; (800b7f0 <xTaskResumeAll+0x114>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	3b01      	subs	r3, #1
 800b712:	4a37      	ldr	r2, [pc, #220]	; (800b7f0 <xTaskResumeAll+0x114>)
 800b714:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b716:	4b36      	ldr	r3, [pc, #216]	; (800b7f0 <xTaskResumeAll+0x114>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d161      	bne.n	800b7e2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b71e:	4b35      	ldr	r3, [pc, #212]	; (800b7f4 <xTaskResumeAll+0x118>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d05d      	beq.n	800b7e2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b726:	e02e      	b.n	800b786 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b728:	4b33      	ldr	r3, [pc, #204]	; (800b7f8 <xTaskResumeAll+0x11c>)
 800b72a:	68db      	ldr	r3, [r3, #12]
 800b72c:	68db      	ldr	r3, [r3, #12]
 800b72e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	3318      	adds	r3, #24
 800b734:	4618      	mov	r0, r3
 800b736:	f7ff f817 	bl	800a768 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	3304      	adds	r3, #4
 800b73e:	4618      	mov	r0, r3
 800b740:	f7ff f812 	bl	800a768 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b748:	2201      	movs	r2, #1
 800b74a:	409a      	lsls	r2, r3
 800b74c:	4b2b      	ldr	r3, [pc, #172]	; (800b7fc <xTaskResumeAll+0x120>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4313      	orrs	r3, r2
 800b752:	4a2a      	ldr	r2, [pc, #168]	; (800b7fc <xTaskResumeAll+0x120>)
 800b754:	6013      	str	r3, [r2, #0]
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b75a:	4613      	mov	r3, r2
 800b75c:	009b      	lsls	r3, r3, #2
 800b75e:	4413      	add	r3, r2
 800b760:	009b      	lsls	r3, r3, #2
 800b762:	4a27      	ldr	r2, [pc, #156]	; (800b800 <xTaskResumeAll+0x124>)
 800b764:	441a      	add	r2, r3
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	3304      	adds	r3, #4
 800b76a:	4619      	mov	r1, r3
 800b76c:	4610      	mov	r0, r2
 800b76e:	f7fe ffa0 	bl	800a6b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b776:	4b23      	ldr	r3, [pc, #140]	; (800b804 <xTaskResumeAll+0x128>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d302      	bcc.n	800b786 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b780:	4b21      	ldr	r3, [pc, #132]	; (800b808 <xTaskResumeAll+0x12c>)
 800b782:	2201      	movs	r2, #1
 800b784:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b786:	4b1c      	ldr	r3, [pc, #112]	; (800b7f8 <xTaskResumeAll+0x11c>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d1cc      	bne.n	800b728 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d001      	beq.n	800b798 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b794:	f000 fb22 	bl	800bddc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b798:	4b1c      	ldr	r3, [pc, #112]	; (800b80c <xTaskResumeAll+0x130>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d010      	beq.n	800b7c6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b7a4:	f000 f836 	bl	800b814 <xTaskIncrementTick>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d002      	beq.n	800b7b4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b7ae:	4b16      	ldr	r3, [pc, #88]	; (800b808 <xTaskResumeAll+0x12c>)
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	3b01      	subs	r3, #1
 800b7b8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d1f1      	bne.n	800b7a4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800b7c0:	4b12      	ldr	r3, [pc, #72]	; (800b80c <xTaskResumeAll+0x130>)
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b7c6:	4b10      	ldr	r3, [pc, #64]	; (800b808 <xTaskResumeAll+0x12c>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d009      	beq.n	800b7e2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b7d2:	4b0f      	ldr	r3, [pc, #60]	; (800b810 <xTaskResumeAll+0x134>)
 800b7d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7d8:	601a      	str	r2, [r3, #0]
 800b7da:	f3bf 8f4f 	dsb	sy
 800b7de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b7e2:	f000 fd4b 	bl	800c27c <vPortExitCritical>

	return xAlreadyYielded;
 800b7e6:	68bb      	ldr	r3, [r7, #8]
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3710      	adds	r7, #16
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	20001420 	.word	0x20001420
 800b7f4:	200013f8 	.word	0x200013f8
 800b7f8:	200013b8 	.word	0x200013b8
 800b7fc:	20001400 	.word	0x20001400
 800b800:	200012fc 	.word	0x200012fc
 800b804:	200012f8 	.word	0x200012f8
 800b808:	2000140c 	.word	0x2000140c
 800b80c:	20001408 	.word	0x20001408
 800b810:	e000ed04 	.word	0xe000ed04

0800b814 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b086      	sub	sp, #24
 800b818:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b81a:	2300      	movs	r3, #0
 800b81c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b81e:	4b51      	ldr	r3, [pc, #324]	; (800b964 <xTaskIncrementTick+0x150>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	2b00      	cmp	r3, #0
 800b824:	f040 808d 	bne.w	800b942 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b828:	4b4f      	ldr	r3, [pc, #316]	; (800b968 <xTaskIncrementTick+0x154>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	3301      	adds	r3, #1
 800b82e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b830:	4a4d      	ldr	r2, [pc, #308]	; (800b968 <xTaskIncrementTick+0x154>)
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d120      	bne.n	800b87e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b83c:	4b4b      	ldr	r3, [pc, #300]	; (800b96c <xTaskIncrementTick+0x158>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00a      	beq.n	800b85c <xTaskIncrementTick+0x48>
	__asm volatile
 800b846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b84a:	f383 8811 	msr	BASEPRI, r3
 800b84e:	f3bf 8f6f 	isb	sy
 800b852:	f3bf 8f4f 	dsb	sy
 800b856:	603b      	str	r3, [r7, #0]
}
 800b858:	bf00      	nop
 800b85a:	e7fe      	b.n	800b85a <xTaskIncrementTick+0x46>
 800b85c:	4b43      	ldr	r3, [pc, #268]	; (800b96c <xTaskIncrementTick+0x158>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	60fb      	str	r3, [r7, #12]
 800b862:	4b43      	ldr	r3, [pc, #268]	; (800b970 <xTaskIncrementTick+0x15c>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a41      	ldr	r2, [pc, #260]	; (800b96c <xTaskIncrementTick+0x158>)
 800b868:	6013      	str	r3, [r2, #0]
 800b86a:	4a41      	ldr	r2, [pc, #260]	; (800b970 <xTaskIncrementTick+0x15c>)
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	6013      	str	r3, [r2, #0]
 800b870:	4b40      	ldr	r3, [pc, #256]	; (800b974 <xTaskIncrementTick+0x160>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	3301      	adds	r3, #1
 800b876:	4a3f      	ldr	r2, [pc, #252]	; (800b974 <xTaskIncrementTick+0x160>)
 800b878:	6013      	str	r3, [r2, #0]
 800b87a:	f000 faaf 	bl	800bddc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b87e:	4b3e      	ldr	r3, [pc, #248]	; (800b978 <xTaskIncrementTick+0x164>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	693a      	ldr	r2, [r7, #16]
 800b884:	429a      	cmp	r2, r3
 800b886:	d34d      	bcc.n	800b924 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b888:	4b38      	ldr	r3, [pc, #224]	; (800b96c <xTaskIncrementTick+0x158>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d101      	bne.n	800b896 <xTaskIncrementTick+0x82>
 800b892:	2301      	movs	r3, #1
 800b894:	e000      	b.n	800b898 <xTaskIncrementTick+0x84>
 800b896:	2300      	movs	r3, #0
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d004      	beq.n	800b8a6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b89c:	4b36      	ldr	r3, [pc, #216]	; (800b978 <xTaskIncrementTick+0x164>)
 800b89e:	f04f 32ff 	mov.w	r2, #4294967295
 800b8a2:	601a      	str	r2, [r3, #0]
					break;
 800b8a4:	e03e      	b.n	800b924 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b8a6:	4b31      	ldr	r3, [pc, #196]	; (800b96c <xTaskIncrementTick+0x158>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	68db      	ldr	r3, [r3, #12]
 800b8ac:	68db      	ldr	r3, [r3, #12]
 800b8ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b8b6:	693a      	ldr	r2, [r7, #16]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d203      	bcs.n	800b8c6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b8be:	4a2e      	ldr	r2, [pc, #184]	; (800b978 <xTaskIncrementTick+0x164>)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6013      	str	r3, [r2, #0]
						break;
 800b8c4:	e02e      	b.n	800b924 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	3304      	adds	r3, #4
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7fe ff4c 	bl	800a768 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d004      	beq.n	800b8e2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	3318      	adds	r3, #24
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7fe ff43 	bl	800a768 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	409a      	lsls	r2, r3
 800b8ea:	4b24      	ldr	r3, [pc, #144]	; (800b97c <xTaskIncrementTick+0x168>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4313      	orrs	r3, r2
 800b8f0:	4a22      	ldr	r2, [pc, #136]	; (800b97c <xTaskIncrementTick+0x168>)
 800b8f2:	6013      	str	r3, [r2, #0]
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8f8:	4613      	mov	r3, r2
 800b8fa:	009b      	lsls	r3, r3, #2
 800b8fc:	4413      	add	r3, r2
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	4a1f      	ldr	r2, [pc, #124]	; (800b980 <xTaskIncrementTick+0x16c>)
 800b902:	441a      	add	r2, r3
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	3304      	adds	r3, #4
 800b908:	4619      	mov	r1, r3
 800b90a:	4610      	mov	r0, r2
 800b90c:	f7fe fed1 	bl	800a6b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b914:	4b1b      	ldr	r3, [pc, #108]	; (800b984 <xTaskIncrementTick+0x170>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d3b4      	bcc.n	800b888 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b91e:	2301      	movs	r3, #1
 800b920:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b922:	e7b1      	b.n	800b888 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b924:	4b17      	ldr	r3, [pc, #92]	; (800b984 <xTaskIncrementTick+0x170>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b92a:	4915      	ldr	r1, [pc, #84]	; (800b980 <xTaskIncrementTick+0x16c>)
 800b92c:	4613      	mov	r3, r2
 800b92e:	009b      	lsls	r3, r3, #2
 800b930:	4413      	add	r3, r2
 800b932:	009b      	lsls	r3, r3, #2
 800b934:	440b      	add	r3, r1
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	2b01      	cmp	r3, #1
 800b93a:	d907      	bls.n	800b94c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800b93c:	2301      	movs	r3, #1
 800b93e:	617b      	str	r3, [r7, #20]
 800b940:	e004      	b.n	800b94c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b942:	4b11      	ldr	r3, [pc, #68]	; (800b988 <xTaskIncrementTick+0x174>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	3301      	adds	r3, #1
 800b948:	4a0f      	ldr	r2, [pc, #60]	; (800b988 <xTaskIncrementTick+0x174>)
 800b94a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b94c:	4b0f      	ldr	r3, [pc, #60]	; (800b98c <xTaskIncrementTick+0x178>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d001      	beq.n	800b958 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800b954:	2301      	movs	r3, #1
 800b956:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b958:	697b      	ldr	r3, [r7, #20]
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3718      	adds	r7, #24
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
 800b962:	bf00      	nop
 800b964:	20001420 	.word	0x20001420
 800b968:	200013fc 	.word	0x200013fc
 800b96c:	200013b0 	.word	0x200013b0
 800b970:	200013b4 	.word	0x200013b4
 800b974:	20001410 	.word	0x20001410
 800b978:	20001418 	.word	0x20001418
 800b97c:	20001400 	.word	0x20001400
 800b980:	200012fc 	.word	0x200012fc
 800b984:	200012f8 	.word	0x200012f8
 800b988:	20001408 	.word	0x20001408
 800b98c:	2000140c 	.word	0x2000140c

0800b990 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b990:	b480      	push	{r7}
 800b992:	b087      	sub	sp, #28
 800b994:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b996:	4b29      	ldr	r3, [pc, #164]	; (800ba3c <vTaskSwitchContext+0xac>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d003      	beq.n	800b9a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b99e:	4b28      	ldr	r3, [pc, #160]	; (800ba40 <vTaskSwitchContext+0xb0>)
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b9a4:	e044      	b.n	800ba30 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800b9a6:	4b26      	ldr	r3, [pc, #152]	; (800ba40 <vTaskSwitchContext+0xb0>)
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b9ac:	4b25      	ldr	r3, [pc, #148]	; (800ba44 <vTaskSwitchContext+0xb4>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	fab3 f383 	clz	r3, r3
 800b9b8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b9ba:	7afb      	ldrb	r3, [r7, #11]
 800b9bc:	f1c3 031f 	rsb	r3, r3, #31
 800b9c0:	617b      	str	r3, [r7, #20]
 800b9c2:	4921      	ldr	r1, [pc, #132]	; (800ba48 <vTaskSwitchContext+0xb8>)
 800b9c4:	697a      	ldr	r2, [r7, #20]
 800b9c6:	4613      	mov	r3, r2
 800b9c8:	009b      	lsls	r3, r3, #2
 800b9ca:	4413      	add	r3, r2
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	440b      	add	r3, r1
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d10a      	bne.n	800b9ec <vTaskSwitchContext+0x5c>
	__asm volatile
 800b9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9da:	f383 8811 	msr	BASEPRI, r3
 800b9de:	f3bf 8f6f 	isb	sy
 800b9e2:	f3bf 8f4f 	dsb	sy
 800b9e6:	607b      	str	r3, [r7, #4]
}
 800b9e8:	bf00      	nop
 800b9ea:	e7fe      	b.n	800b9ea <vTaskSwitchContext+0x5a>
 800b9ec:	697a      	ldr	r2, [r7, #20]
 800b9ee:	4613      	mov	r3, r2
 800b9f0:	009b      	lsls	r3, r3, #2
 800b9f2:	4413      	add	r3, r2
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	4a14      	ldr	r2, [pc, #80]	; (800ba48 <vTaskSwitchContext+0xb8>)
 800b9f8:	4413      	add	r3, r2
 800b9fa:	613b      	str	r3, [r7, #16]
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	685a      	ldr	r2, [r3, #4]
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	605a      	str	r2, [r3, #4]
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	685a      	ldr	r2, [r3, #4]
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	3308      	adds	r3, #8
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d104      	bne.n	800ba1c <vTaskSwitchContext+0x8c>
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	685b      	ldr	r3, [r3, #4]
 800ba16:	685a      	ldr	r2, [r3, #4]
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	605a      	str	r2, [r3, #4]
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	4a0a      	ldr	r2, [pc, #40]	; (800ba4c <vTaskSwitchContext+0xbc>)
 800ba24:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ba26:	4b09      	ldr	r3, [pc, #36]	; (800ba4c <vTaskSwitchContext+0xbc>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	334c      	adds	r3, #76	; 0x4c
 800ba2c:	4a08      	ldr	r2, [pc, #32]	; (800ba50 <vTaskSwitchContext+0xc0>)
 800ba2e:	6013      	str	r3, [r2, #0]
}
 800ba30:	bf00      	nop
 800ba32:	371c      	adds	r7, #28
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bc80      	pop	{r7}
 800ba38:	4770      	bx	lr
 800ba3a:	bf00      	nop
 800ba3c:	20001420 	.word	0x20001420
 800ba40:	2000140c 	.word	0x2000140c
 800ba44:	20001400 	.word	0x20001400
 800ba48:	200012fc 	.word	0x200012fc
 800ba4c:	200012f8 	.word	0x200012f8
 800ba50:	20000088 	.word	0x20000088

0800ba54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d10a      	bne.n	800ba7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ba64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba68:	f383 8811 	msr	BASEPRI, r3
 800ba6c:	f3bf 8f6f 	isb	sy
 800ba70:	f3bf 8f4f 	dsb	sy
 800ba74:	60fb      	str	r3, [r7, #12]
}
 800ba76:	bf00      	nop
 800ba78:	e7fe      	b.n	800ba78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba7a:	4b07      	ldr	r3, [pc, #28]	; (800ba98 <vTaskPlaceOnEventList+0x44>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	3318      	adds	r3, #24
 800ba80:	4619      	mov	r1, r3
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f7fe fe38 	bl	800a6f8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ba88:	2101      	movs	r1, #1
 800ba8a:	6838      	ldr	r0, [r7, #0]
 800ba8c:	f000 fa6e 	bl	800bf6c <prvAddCurrentTaskToDelayedList>
}
 800ba90:	bf00      	nop
 800ba92:	3710      	adds	r7, #16
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}
 800ba98:	200012f8 	.word	0x200012f8

0800ba9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b086      	sub	sp, #24
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	68db      	ldr	r3, [r3, #12]
 800baaa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d10a      	bne.n	800bac8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab6:	f383 8811 	msr	BASEPRI, r3
 800baba:	f3bf 8f6f 	isb	sy
 800babe:	f3bf 8f4f 	dsb	sy
 800bac2:	60fb      	str	r3, [r7, #12]
}
 800bac4:	bf00      	nop
 800bac6:	e7fe      	b.n	800bac6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	3318      	adds	r3, #24
 800bacc:	4618      	mov	r0, r3
 800bace:	f7fe fe4b 	bl	800a768 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bad2:	4b1d      	ldr	r3, [pc, #116]	; (800bb48 <xTaskRemoveFromEventList+0xac>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d11c      	bne.n	800bb14 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	3304      	adds	r3, #4
 800bade:	4618      	mov	r0, r3
 800bae0:	f7fe fe42 	bl	800a768 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bae8:	2201      	movs	r2, #1
 800baea:	409a      	lsls	r2, r3
 800baec:	4b17      	ldr	r3, [pc, #92]	; (800bb4c <xTaskRemoveFromEventList+0xb0>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4313      	orrs	r3, r2
 800baf2:	4a16      	ldr	r2, [pc, #88]	; (800bb4c <xTaskRemoveFromEventList+0xb0>)
 800baf4:	6013      	str	r3, [r2, #0]
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bafa:	4613      	mov	r3, r2
 800bafc:	009b      	lsls	r3, r3, #2
 800bafe:	4413      	add	r3, r2
 800bb00:	009b      	lsls	r3, r3, #2
 800bb02:	4a13      	ldr	r2, [pc, #76]	; (800bb50 <xTaskRemoveFromEventList+0xb4>)
 800bb04:	441a      	add	r2, r3
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	3304      	adds	r3, #4
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	4610      	mov	r0, r2
 800bb0e:	f7fe fdd0 	bl	800a6b2 <vListInsertEnd>
 800bb12:	e005      	b.n	800bb20 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	3318      	adds	r3, #24
 800bb18:	4619      	mov	r1, r3
 800bb1a:	480e      	ldr	r0, [pc, #56]	; (800bb54 <xTaskRemoveFromEventList+0xb8>)
 800bb1c:	f7fe fdc9 	bl	800a6b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb24:	4b0c      	ldr	r3, [pc, #48]	; (800bb58 <xTaskRemoveFromEventList+0xbc>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d905      	bls.n	800bb3a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bb32:	4b0a      	ldr	r3, [pc, #40]	; (800bb5c <xTaskRemoveFromEventList+0xc0>)
 800bb34:	2201      	movs	r2, #1
 800bb36:	601a      	str	r2, [r3, #0]
 800bb38:	e001      	b.n	800bb3e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800bb3e:	697b      	ldr	r3, [r7, #20]
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3718      	adds	r7, #24
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	20001420 	.word	0x20001420
 800bb4c:	20001400 	.word	0x20001400
 800bb50:	200012fc 	.word	0x200012fc
 800bb54:	200013b8 	.word	0x200013b8
 800bb58:	200012f8 	.word	0x200012f8
 800bb5c:	2000140c 	.word	0x2000140c

0800bb60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bb60:	b480      	push	{r7}
 800bb62:	b083      	sub	sp, #12
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bb68:	4b06      	ldr	r3, [pc, #24]	; (800bb84 <vTaskInternalSetTimeOutState+0x24>)
 800bb6a:	681a      	ldr	r2, [r3, #0]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bb70:	4b05      	ldr	r3, [pc, #20]	; (800bb88 <vTaskInternalSetTimeOutState+0x28>)
 800bb72:	681a      	ldr	r2, [r3, #0]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	605a      	str	r2, [r3, #4]
}
 800bb78:	bf00      	nop
 800bb7a:	370c      	adds	r7, #12
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bc80      	pop	{r7}
 800bb80:	4770      	bx	lr
 800bb82:	bf00      	nop
 800bb84:	20001410 	.word	0x20001410
 800bb88:	200013fc 	.word	0x200013fc

0800bb8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b088      	sub	sp, #32
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d10a      	bne.n	800bbb2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba0:	f383 8811 	msr	BASEPRI, r3
 800bba4:	f3bf 8f6f 	isb	sy
 800bba8:	f3bf 8f4f 	dsb	sy
 800bbac:	613b      	str	r3, [r7, #16]
}
 800bbae:	bf00      	nop
 800bbb0:	e7fe      	b.n	800bbb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d10a      	bne.n	800bbce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bbb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbbc:	f383 8811 	msr	BASEPRI, r3
 800bbc0:	f3bf 8f6f 	isb	sy
 800bbc4:	f3bf 8f4f 	dsb	sy
 800bbc8:	60fb      	str	r3, [r7, #12]
}
 800bbca:	bf00      	nop
 800bbcc:	e7fe      	b.n	800bbcc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bbce:	f000 fb25 	bl	800c21c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bbd2:	4b1d      	ldr	r3, [pc, #116]	; (800bc48 <xTaskCheckForTimeOut+0xbc>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	69ba      	ldr	r2, [r7, #24]
 800bbde:	1ad3      	subs	r3, r2, r3
 800bbe0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbea:	d102      	bne.n	800bbf2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bbec:	2300      	movs	r3, #0
 800bbee:	61fb      	str	r3, [r7, #28]
 800bbf0:	e023      	b.n	800bc3a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681a      	ldr	r2, [r3, #0]
 800bbf6:	4b15      	ldr	r3, [pc, #84]	; (800bc4c <xTaskCheckForTimeOut+0xc0>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d007      	beq.n	800bc0e <xTaskCheckForTimeOut+0x82>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	69ba      	ldr	r2, [r7, #24]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d302      	bcc.n	800bc0e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bc08:	2301      	movs	r3, #1
 800bc0a:	61fb      	str	r3, [r7, #28]
 800bc0c:	e015      	b.n	800bc3a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	697a      	ldr	r2, [r7, #20]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d20b      	bcs.n	800bc30 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	681a      	ldr	r2, [r3, #0]
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	1ad2      	subs	r2, r2, r3
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f7ff ff9b 	bl	800bb60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	61fb      	str	r3, [r7, #28]
 800bc2e:	e004      	b.n	800bc3a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	2200      	movs	r2, #0
 800bc34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bc36:	2301      	movs	r3, #1
 800bc38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bc3a:	f000 fb1f 	bl	800c27c <vPortExitCritical>

	return xReturn;
 800bc3e:	69fb      	ldr	r3, [r7, #28]
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3720      	adds	r7, #32
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}
 800bc48:	200013fc 	.word	0x200013fc
 800bc4c:	20001410 	.word	0x20001410

0800bc50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bc50:	b480      	push	{r7}
 800bc52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bc54:	4b03      	ldr	r3, [pc, #12]	; (800bc64 <vTaskMissedYield+0x14>)
 800bc56:	2201      	movs	r2, #1
 800bc58:	601a      	str	r2, [r3, #0]
}
 800bc5a:	bf00      	nop
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bc80      	pop	{r7}
 800bc60:	4770      	bx	lr
 800bc62:	bf00      	nop
 800bc64:	2000140c 	.word	0x2000140c

0800bc68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b082      	sub	sp, #8
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bc70:	f000 f852 	bl	800bd18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bc74:	4b06      	ldr	r3, [pc, #24]	; (800bc90 <prvIdleTask+0x28>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	d9f9      	bls.n	800bc70 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bc7c:	4b05      	ldr	r3, [pc, #20]	; (800bc94 <prvIdleTask+0x2c>)
 800bc7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc82:	601a      	str	r2, [r3, #0]
 800bc84:	f3bf 8f4f 	dsb	sy
 800bc88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bc8c:	e7f0      	b.n	800bc70 <prvIdleTask+0x8>
 800bc8e:	bf00      	nop
 800bc90:	200012fc 	.word	0x200012fc
 800bc94:	e000ed04 	.word	0xe000ed04

0800bc98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc9e:	2300      	movs	r3, #0
 800bca0:	607b      	str	r3, [r7, #4]
 800bca2:	e00c      	b.n	800bcbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bca4:	687a      	ldr	r2, [r7, #4]
 800bca6:	4613      	mov	r3, r2
 800bca8:	009b      	lsls	r3, r3, #2
 800bcaa:	4413      	add	r3, r2
 800bcac:	009b      	lsls	r3, r3, #2
 800bcae:	4a12      	ldr	r2, [pc, #72]	; (800bcf8 <prvInitialiseTaskLists+0x60>)
 800bcb0:	4413      	add	r3, r2
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f7fe fcd2 	bl	800a65c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	3301      	adds	r3, #1
 800bcbc:	607b      	str	r3, [r7, #4]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2b06      	cmp	r3, #6
 800bcc2:	d9ef      	bls.n	800bca4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bcc4:	480d      	ldr	r0, [pc, #52]	; (800bcfc <prvInitialiseTaskLists+0x64>)
 800bcc6:	f7fe fcc9 	bl	800a65c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bcca:	480d      	ldr	r0, [pc, #52]	; (800bd00 <prvInitialiseTaskLists+0x68>)
 800bccc:	f7fe fcc6 	bl	800a65c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bcd0:	480c      	ldr	r0, [pc, #48]	; (800bd04 <prvInitialiseTaskLists+0x6c>)
 800bcd2:	f7fe fcc3 	bl	800a65c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bcd6:	480c      	ldr	r0, [pc, #48]	; (800bd08 <prvInitialiseTaskLists+0x70>)
 800bcd8:	f7fe fcc0 	bl	800a65c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bcdc:	480b      	ldr	r0, [pc, #44]	; (800bd0c <prvInitialiseTaskLists+0x74>)
 800bcde:	f7fe fcbd 	bl	800a65c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bce2:	4b0b      	ldr	r3, [pc, #44]	; (800bd10 <prvInitialiseTaskLists+0x78>)
 800bce4:	4a05      	ldr	r2, [pc, #20]	; (800bcfc <prvInitialiseTaskLists+0x64>)
 800bce6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bce8:	4b0a      	ldr	r3, [pc, #40]	; (800bd14 <prvInitialiseTaskLists+0x7c>)
 800bcea:	4a05      	ldr	r2, [pc, #20]	; (800bd00 <prvInitialiseTaskLists+0x68>)
 800bcec:	601a      	str	r2, [r3, #0]
}
 800bcee:	bf00      	nop
 800bcf0:	3708      	adds	r7, #8
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	200012fc 	.word	0x200012fc
 800bcfc:	20001388 	.word	0x20001388
 800bd00:	2000139c 	.word	0x2000139c
 800bd04:	200013b8 	.word	0x200013b8
 800bd08:	200013cc 	.word	0x200013cc
 800bd0c:	200013e4 	.word	0x200013e4
 800bd10:	200013b0 	.word	0x200013b0
 800bd14:	200013b4 	.word	0x200013b4

0800bd18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd1e:	e019      	b.n	800bd54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bd20:	f000 fa7c 	bl	800c21c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800bd24:	4b10      	ldr	r3, [pc, #64]	; (800bd68 <prvCheckTasksWaitingTermination+0x50>)
 800bd26:	68db      	ldr	r3, [r3, #12]
 800bd28:	68db      	ldr	r3, [r3, #12]
 800bd2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	3304      	adds	r3, #4
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7fe fd19 	bl	800a768 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bd36:	4b0d      	ldr	r3, [pc, #52]	; (800bd6c <prvCheckTasksWaitingTermination+0x54>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	3b01      	subs	r3, #1
 800bd3c:	4a0b      	ldr	r2, [pc, #44]	; (800bd6c <prvCheckTasksWaitingTermination+0x54>)
 800bd3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bd40:	4b0b      	ldr	r3, [pc, #44]	; (800bd70 <prvCheckTasksWaitingTermination+0x58>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	3b01      	subs	r3, #1
 800bd46:	4a0a      	ldr	r2, [pc, #40]	; (800bd70 <prvCheckTasksWaitingTermination+0x58>)
 800bd48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bd4a:	f000 fa97 	bl	800c27c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f000 f810 	bl	800bd74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd54:	4b06      	ldr	r3, [pc, #24]	; (800bd70 <prvCheckTasksWaitingTermination+0x58>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d1e1      	bne.n	800bd20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bd5c:	bf00      	nop
 800bd5e:	bf00      	nop
 800bd60:	3708      	adds	r7, #8
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	200013cc 	.word	0x200013cc
 800bd6c:	200013f8 	.word	0x200013f8
 800bd70:	200013e0 	.word	0x200013e0

0800bd74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b084      	sub	sp, #16
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	334c      	adds	r3, #76	; 0x4c
 800bd80:	4618      	mov	r0, r3
 800bd82:	f001 f95f 	bl	800d044 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d108      	bne.n	800bda2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd94:	4618      	mov	r0, r3
 800bd96:	f000 fc05 	bl	800c5a4 <vPortFree>
				vPortFree( pxTCB );
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f000 fc02 	bl	800c5a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bda0:	e018      	b.n	800bdd4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	d103      	bne.n	800bdb4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f000 fbf9 	bl	800c5a4 <vPortFree>
	}
 800bdb2:	e00f      	b.n	800bdd4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800bdba:	2b02      	cmp	r3, #2
 800bdbc:	d00a      	beq.n	800bdd4 <prvDeleteTCB+0x60>
	__asm volatile
 800bdbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc2:	f383 8811 	msr	BASEPRI, r3
 800bdc6:	f3bf 8f6f 	isb	sy
 800bdca:	f3bf 8f4f 	dsb	sy
 800bdce:	60fb      	str	r3, [r7, #12]
}
 800bdd0:	bf00      	nop
 800bdd2:	e7fe      	b.n	800bdd2 <prvDeleteTCB+0x5e>
	}
 800bdd4:	bf00      	nop
 800bdd6:	3710      	adds	r7, #16
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bde2:	4b0e      	ldr	r3, [pc, #56]	; (800be1c <prvResetNextTaskUnblockTime+0x40>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d101      	bne.n	800bdf0 <prvResetNextTaskUnblockTime+0x14>
 800bdec:	2301      	movs	r3, #1
 800bdee:	e000      	b.n	800bdf2 <prvResetNextTaskUnblockTime+0x16>
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d004      	beq.n	800be00 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bdf6:	4b0a      	ldr	r3, [pc, #40]	; (800be20 <prvResetNextTaskUnblockTime+0x44>)
 800bdf8:	f04f 32ff 	mov.w	r2, #4294967295
 800bdfc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bdfe:	e008      	b.n	800be12 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800be00:	4b06      	ldr	r3, [pc, #24]	; (800be1c <prvResetNextTaskUnblockTime+0x40>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	68db      	ldr	r3, [r3, #12]
 800be06:	68db      	ldr	r3, [r3, #12]
 800be08:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	4a04      	ldr	r2, [pc, #16]	; (800be20 <prvResetNextTaskUnblockTime+0x44>)
 800be10:	6013      	str	r3, [r2, #0]
}
 800be12:	bf00      	nop
 800be14:	370c      	adds	r7, #12
 800be16:	46bd      	mov	sp, r7
 800be18:	bc80      	pop	{r7}
 800be1a:	4770      	bx	lr
 800be1c:	200013b0 	.word	0x200013b0
 800be20:	20001418 	.word	0x20001418

0800be24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800be24:	b480      	push	{r7}
 800be26:	b083      	sub	sp, #12
 800be28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800be2a:	4b0b      	ldr	r3, [pc, #44]	; (800be58 <xTaskGetSchedulerState+0x34>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d102      	bne.n	800be38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800be32:	2301      	movs	r3, #1
 800be34:	607b      	str	r3, [r7, #4]
 800be36:	e008      	b.n	800be4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be38:	4b08      	ldr	r3, [pc, #32]	; (800be5c <xTaskGetSchedulerState+0x38>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d102      	bne.n	800be46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800be40:	2302      	movs	r3, #2
 800be42:	607b      	str	r3, [r7, #4]
 800be44:	e001      	b.n	800be4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800be46:	2300      	movs	r3, #0
 800be48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800be4a:	687b      	ldr	r3, [r7, #4]
	}
 800be4c:	4618      	mov	r0, r3
 800be4e:	370c      	adds	r7, #12
 800be50:	46bd      	mov	sp, r7
 800be52:	bc80      	pop	{r7}
 800be54:	4770      	bx	lr
 800be56:	bf00      	nop
 800be58:	20001404 	.word	0x20001404
 800be5c:	20001420 	.word	0x20001420

0800be60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800be60:	b580      	push	{r7, lr}
 800be62:	b086      	sub	sp, #24
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800be6c:	2300      	movs	r3, #0
 800be6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d06e      	beq.n	800bf54 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800be76:	4b3a      	ldr	r3, [pc, #232]	; (800bf60 <xTaskPriorityDisinherit+0x100>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	693a      	ldr	r2, [r7, #16]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d00a      	beq.n	800be96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800be80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be84:	f383 8811 	msr	BASEPRI, r3
 800be88:	f3bf 8f6f 	isb	sy
 800be8c:	f3bf 8f4f 	dsb	sy
 800be90:	60fb      	str	r3, [r7, #12]
}
 800be92:	bf00      	nop
 800be94:	e7fe      	b.n	800be94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d10a      	bne.n	800beb4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800be9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea2:	f383 8811 	msr	BASEPRI, r3
 800bea6:	f3bf 8f6f 	isb	sy
 800beaa:	f3bf 8f4f 	dsb	sy
 800beae:	60bb      	str	r3, [r7, #8]
}
 800beb0:	bf00      	nop
 800beb2:	e7fe      	b.n	800beb2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800beb8:	1e5a      	subs	r2, r3, #1
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d044      	beq.n	800bf54 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800beca:	693b      	ldr	r3, [r7, #16]
 800becc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d140      	bne.n	800bf54 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	3304      	adds	r3, #4
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7fe fc46 	bl	800a768 <uxListRemove>
 800bedc:	4603      	mov	r3, r0
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d115      	bne.n	800bf0e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bee6:	491f      	ldr	r1, [pc, #124]	; (800bf64 <xTaskPriorityDisinherit+0x104>)
 800bee8:	4613      	mov	r3, r2
 800beea:	009b      	lsls	r3, r3, #2
 800beec:	4413      	add	r3, r2
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	440b      	add	r3, r1
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d10a      	bne.n	800bf0e <xTaskPriorityDisinherit+0xae>
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800befc:	2201      	movs	r2, #1
 800befe:	fa02 f303 	lsl.w	r3, r2, r3
 800bf02:	43da      	mvns	r2, r3
 800bf04:	4b18      	ldr	r3, [pc, #96]	; (800bf68 <xTaskPriorityDisinherit+0x108>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4013      	ands	r3, r2
 800bf0a:	4a17      	ldr	r2, [pc, #92]	; (800bf68 <xTaskPriorityDisinherit+0x108>)
 800bf0c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf1a:	f1c3 0207 	rsb	r2, r3, #7
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf26:	2201      	movs	r2, #1
 800bf28:	409a      	lsls	r2, r3
 800bf2a:	4b0f      	ldr	r3, [pc, #60]	; (800bf68 <xTaskPriorityDisinherit+0x108>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	4a0d      	ldr	r2, [pc, #52]	; (800bf68 <xTaskPriorityDisinherit+0x108>)
 800bf32:	6013      	str	r3, [r2, #0]
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf38:	4613      	mov	r3, r2
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	4413      	add	r3, r2
 800bf3e:	009b      	lsls	r3, r3, #2
 800bf40:	4a08      	ldr	r2, [pc, #32]	; (800bf64 <xTaskPriorityDisinherit+0x104>)
 800bf42:	441a      	add	r2, r3
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	3304      	adds	r3, #4
 800bf48:	4619      	mov	r1, r3
 800bf4a:	4610      	mov	r0, r2
 800bf4c:	f7fe fbb1 	bl	800a6b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bf50:	2301      	movs	r3, #1
 800bf52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bf54:	697b      	ldr	r3, [r7, #20]
	}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3718      	adds	r7, #24
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	200012f8 	.word	0x200012f8
 800bf64:	200012fc 	.word	0x200012fc
 800bf68:	20001400 	.word	0x20001400

0800bf6c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b084      	sub	sp, #16
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bf76:	4b29      	ldr	r3, [pc, #164]	; (800c01c <prvAddCurrentTaskToDelayedList+0xb0>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf7c:	4b28      	ldr	r3, [pc, #160]	; (800c020 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	3304      	adds	r3, #4
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7fe fbf0 	bl	800a768 <uxListRemove>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d10b      	bne.n	800bfa6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800bf8e:	4b24      	ldr	r3, [pc, #144]	; (800c020 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf94:	2201      	movs	r2, #1
 800bf96:	fa02 f303 	lsl.w	r3, r2, r3
 800bf9a:	43da      	mvns	r2, r3
 800bf9c:	4b21      	ldr	r3, [pc, #132]	; (800c024 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4013      	ands	r3, r2
 800bfa2:	4a20      	ldr	r2, [pc, #128]	; (800c024 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bfa4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfac:	d10a      	bne.n	800bfc4 <prvAddCurrentTaskToDelayedList+0x58>
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d007      	beq.n	800bfc4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bfb4:	4b1a      	ldr	r3, [pc, #104]	; (800c020 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	3304      	adds	r3, #4
 800bfba:	4619      	mov	r1, r3
 800bfbc:	481a      	ldr	r0, [pc, #104]	; (800c028 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bfbe:	f7fe fb78 	bl	800a6b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bfc2:	e026      	b.n	800c012 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bfc4:	68fa      	ldr	r2, [r7, #12]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	4413      	add	r3, r2
 800bfca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bfcc:	4b14      	ldr	r3, [pc, #80]	; (800c020 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	68ba      	ldr	r2, [r7, #8]
 800bfd2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bfd4:	68ba      	ldr	r2, [r7, #8]
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d209      	bcs.n	800bff0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bfdc:	4b13      	ldr	r3, [pc, #76]	; (800c02c <prvAddCurrentTaskToDelayedList+0xc0>)
 800bfde:	681a      	ldr	r2, [r3, #0]
 800bfe0:	4b0f      	ldr	r3, [pc, #60]	; (800c020 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	3304      	adds	r3, #4
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	4610      	mov	r0, r2
 800bfea:	f7fe fb85 	bl	800a6f8 <vListInsert>
}
 800bfee:	e010      	b.n	800c012 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bff0:	4b0f      	ldr	r3, [pc, #60]	; (800c030 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bff2:	681a      	ldr	r2, [r3, #0]
 800bff4:	4b0a      	ldr	r3, [pc, #40]	; (800c020 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	3304      	adds	r3, #4
 800bffa:	4619      	mov	r1, r3
 800bffc:	4610      	mov	r0, r2
 800bffe:	f7fe fb7b 	bl	800a6f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c002:	4b0c      	ldr	r3, [pc, #48]	; (800c034 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	68ba      	ldr	r2, [r7, #8]
 800c008:	429a      	cmp	r2, r3
 800c00a:	d202      	bcs.n	800c012 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c00c:	4a09      	ldr	r2, [pc, #36]	; (800c034 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	6013      	str	r3, [r2, #0]
}
 800c012:	bf00      	nop
 800c014:	3710      	adds	r7, #16
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	200013fc 	.word	0x200013fc
 800c020:	200012f8 	.word	0x200012f8
 800c024:	20001400 	.word	0x20001400
 800c028:	200013e4 	.word	0x200013e4
 800c02c:	200013b4 	.word	0x200013b4
 800c030:	200013b0 	.word	0x200013b0
 800c034:	20001418 	.word	0x20001418

0800c038 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c038:	b480      	push	{r7}
 800c03a:	b085      	sub	sp, #20
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	60f8      	str	r0, [r7, #12]
 800c040:	60b9      	str	r1, [r7, #8]
 800c042:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	3b04      	subs	r3, #4
 800c048:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c050:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	3b04      	subs	r3, #4
 800c056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	f023 0201 	bic.w	r2, r3, #1
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	3b04      	subs	r3, #4
 800c066:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c068:	4a08      	ldr	r2, [pc, #32]	; (800c08c <pxPortInitialiseStack+0x54>)
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	3b14      	subs	r3, #20
 800c072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c074:	687a      	ldr	r2, [r7, #4]
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	3b20      	subs	r3, #32
 800c07e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c080:	68fb      	ldr	r3, [r7, #12]
}
 800c082:	4618      	mov	r0, r3
 800c084:	3714      	adds	r7, #20
 800c086:	46bd      	mov	sp, r7
 800c088:	bc80      	pop	{r7}
 800c08a:	4770      	bx	lr
 800c08c:	0800c091 	.word	0x0800c091

0800c090 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c090:	b480      	push	{r7}
 800c092:	b085      	sub	sp, #20
 800c094:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c096:	2300      	movs	r3, #0
 800c098:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c09a:	4b12      	ldr	r3, [pc, #72]	; (800c0e4 <prvTaskExitError+0x54>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0a2:	d00a      	beq.n	800c0ba <prvTaskExitError+0x2a>
	__asm volatile
 800c0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a8:	f383 8811 	msr	BASEPRI, r3
 800c0ac:	f3bf 8f6f 	isb	sy
 800c0b0:	f3bf 8f4f 	dsb	sy
 800c0b4:	60fb      	str	r3, [r7, #12]
}
 800c0b6:	bf00      	nop
 800c0b8:	e7fe      	b.n	800c0b8 <prvTaskExitError+0x28>
	__asm volatile
 800c0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0be:	f383 8811 	msr	BASEPRI, r3
 800c0c2:	f3bf 8f6f 	isb	sy
 800c0c6:	f3bf 8f4f 	dsb	sy
 800c0ca:	60bb      	str	r3, [r7, #8]
}
 800c0cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c0ce:	bf00      	nop
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d0fc      	beq.n	800c0d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c0d6:	bf00      	nop
 800c0d8:	bf00      	nop
 800c0da:	3714      	adds	r7, #20
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bc80      	pop	{r7}
 800c0e0:	4770      	bx	lr
 800c0e2:	bf00      	nop
 800c0e4:	2000007c 	.word	0x2000007c
	...

0800c0f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c0f0:	4b07      	ldr	r3, [pc, #28]	; (800c110 <pxCurrentTCBConst2>)
 800c0f2:	6819      	ldr	r1, [r3, #0]
 800c0f4:	6808      	ldr	r0, [r1, #0]
 800c0f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c0fa:	f380 8809 	msr	PSP, r0
 800c0fe:	f3bf 8f6f 	isb	sy
 800c102:	f04f 0000 	mov.w	r0, #0
 800c106:	f380 8811 	msr	BASEPRI, r0
 800c10a:	f04e 0e0d 	orr.w	lr, lr, #13
 800c10e:	4770      	bx	lr

0800c110 <pxCurrentTCBConst2>:
 800c110:	200012f8 	.word	0x200012f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c114:	bf00      	nop
 800c116:	bf00      	nop

0800c118 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c118:	4806      	ldr	r0, [pc, #24]	; (800c134 <prvPortStartFirstTask+0x1c>)
 800c11a:	6800      	ldr	r0, [r0, #0]
 800c11c:	6800      	ldr	r0, [r0, #0]
 800c11e:	f380 8808 	msr	MSP, r0
 800c122:	b662      	cpsie	i
 800c124:	b661      	cpsie	f
 800c126:	f3bf 8f4f 	dsb	sy
 800c12a:	f3bf 8f6f 	isb	sy
 800c12e:	df00      	svc	0
 800c130:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c132:	bf00      	nop
 800c134:	e000ed08 	.word	0xe000ed08

0800c138 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c13e:	4b32      	ldr	r3, [pc, #200]	; (800c208 <xPortStartScheduler+0xd0>)
 800c140:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	b2db      	uxtb	r3, r3
 800c148:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	22ff      	movs	r2, #255	; 0xff
 800c14e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	781b      	ldrb	r3, [r3, #0]
 800c154:	b2db      	uxtb	r3, r3
 800c156:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c158:	78fb      	ldrb	r3, [r7, #3]
 800c15a:	b2db      	uxtb	r3, r3
 800c15c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c160:	b2da      	uxtb	r2, r3
 800c162:	4b2a      	ldr	r3, [pc, #168]	; (800c20c <xPortStartScheduler+0xd4>)
 800c164:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c166:	4b2a      	ldr	r3, [pc, #168]	; (800c210 <xPortStartScheduler+0xd8>)
 800c168:	2207      	movs	r2, #7
 800c16a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c16c:	e009      	b.n	800c182 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c16e:	4b28      	ldr	r3, [pc, #160]	; (800c210 <xPortStartScheduler+0xd8>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	3b01      	subs	r3, #1
 800c174:	4a26      	ldr	r2, [pc, #152]	; (800c210 <xPortStartScheduler+0xd8>)
 800c176:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c178:	78fb      	ldrb	r3, [r7, #3]
 800c17a:	b2db      	uxtb	r3, r3
 800c17c:	005b      	lsls	r3, r3, #1
 800c17e:	b2db      	uxtb	r3, r3
 800c180:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c182:	78fb      	ldrb	r3, [r7, #3]
 800c184:	b2db      	uxtb	r3, r3
 800c186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c18a:	2b80      	cmp	r3, #128	; 0x80
 800c18c:	d0ef      	beq.n	800c16e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c18e:	4b20      	ldr	r3, [pc, #128]	; (800c210 <xPortStartScheduler+0xd8>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f1c3 0307 	rsb	r3, r3, #7
 800c196:	2b04      	cmp	r3, #4
 800c198:	d00a      	beq.n	800c1b0 <xPortStartScheduler+0x78>
	__asm volatile
 800c19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19e:	f383 8811 	msr	BASEPRI, r3
 800c1a2:	f3bf 8f6f 	isb	sy
 800c1a6:	f3bf 8f4f 	dsb	sy
 800c1aa:	60bb      	str	r3, [r7, #8]
}
 800c1ac:	bf00      	nop
 800c1ae:	e7fe      	b.n	800c1ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c1b0:	4b17      	ldr	r3, [pc, #92]	; (800c210 <xPortStartScheduler+0xd8>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	021b      	lsls	r3, r3, #8
 800c1b6:	4a16      	ldr	r2, [pc, #88]	; (800c210 <xPortStartScheduler+0xd8>)
 800c1b8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c1ba:	4b15      	ldr	r3, [pc, #84]	; (800c210 <xPortStartScheduler+0xd8>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c1c2:	4a13      	ldr	r2, [pc, #76]	; (800c210 <xPortStartScheduler+0xd8>)
 800c1c4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	b2da      	uxtb	r2, r3
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c1ce:	4b11      	ldr	r3, [pc, #68]	; (800c214 <xPortStartScheduler+0xdc>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4a10      	ldr	r2, [pc, #64]	; (800c214 <xPortStartScheduler+0xdc>)
 800c1d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c1d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c1da:	4b0e      	ldr	r3, [pc, #56]	; (800c214 <xPortStartScheduler+0xdc>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4a0d      	ldr	r2, [pc, #52]	; (800c214 <xPortStartScheduler+0xdc>)
 800c1e0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c1e4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c1e6:	f000 f8b9 	bl	800c35c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c1ea:	4b0b      	ldr	r3, [pc, #44]	; (800c218 <xPortStartScheduler+0xe0>)
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c1f0:	f7ff ff92 	bl	800c118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c1f4:	f7ff fbcc 	bl	800b990 <vTaskSwitchContext>
	prvTaskExitError();
 800c1f8:	f7ff ff4a 	bl	800c090 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c1fc:	2300      	movs	r3, #0
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3710      	adds	r7, #16
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
 800c206:	bf00      	nop
 800c208:	e000e400 	.word	0xe000e400
 800c20c:	20001424 	.word	0x20001424
 800c210:	20001428 	.word	0x20001428
 800c214:	e000ed20 	.word	0xe000ed20
 800c218:	2000007c 	.word	0x2000007c

0800c21c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c21c:	b480      	push	{r7}
 800c21e:	b083      	sub	sp, #12
 800c220:	af00      	add	r7, sp, #0
	__asm volatile
 800c222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c226:	f383 8811 	msr	BASEPRI, r3
 800c22a:	f3bf 8f6f 	isb	sy
 800c22e:	f3bf 8f4f 	dsb	sy
 800c232:	607b      	str	r3, [r7, #4]
}
 800c234:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c236:	4b0f      	ldr	r3, [pc, #60]	; (800c274 <vPortEnterCritical+0x58>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	3301      	adds	r3, #1
 800c23c:	4a0d      	ldr	r2, [pc, #52]	; (800c274 <vPortEnterCritical+0x58>)
 800c23e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c240:	4b0c      	ldr	r3, [pc, #48]	; (800c274 <vPortEnterCritical+0x58>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	2b01      	cmp	r3, #1
 800c246:	d10f      	bne.n	800c268 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c248:	4b0b      	ldr	r3, [pc, #44]	; (800c278 <vPortEnterCritical+0x5c>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d00a      	beq.n	800c268 <vPortEnterCritical+0x4c>
	__asm volatile
 800c252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c256:	f383 8811 	msr	BASEPRI, r3
 800c25a:	f3bf 8f6f 	isb	sy
 800c25e:	f3bf 8f4f 	dsb	sy
 800c262:	603b      	str	r3, [r7, #0]
}
 800c264:	bf00      	nop
 800c266:	e7fe      	b.n	800c266 <vPortEnterCritical+0x4a>
	}
}
 800c268:	bf00      	nop
 800c26a:	370c      	adds	r7, #12
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bc80      	pop	{r7}
 800c270:	4770      	bx	lr
 800c272:	bf00      	nop
 800c274:	2000007c 	.word	0x2000007c
 800c278:	e000ed04 	.word	0xe000ed04

0800c27c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c27c:	b480      	push	{r7}
 800c27e:	b083      	sub	sp, #12
 800c280:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c282:	4b11      	ldr	r3, [pc, #68]	; (800c2c8 <vPortExitCritical+0x4c>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d10a      	bne.n	800c2a0 <vPortExitCritical+0x24>
	__asm volatile
 800c28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c28e:	f383 8811 	msr	BASEPRI, r3
 800c292:	f3bf 8f6f 	isb	sy
 800c296:	f3bf 8f4f 	dsb	sy
 800c29a:	607b      	str	r3, [r7, #4]
}
 800c29c:	bf00      	nop
 800c29e:	e7fe      	b.n	800c29e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c2a0:	4b09      	ldr	r3, [pc, #36]	; (800c2c8 <vPortExitCritical+0x4c>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	3b01      	subs	r3, #1
 800c2a6:	4a08      	ldr	r2, [pc, #32]	; (800c2c8 <vPortExitCritical+0x4c>)
 800c2a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c2aa:	4b07      	ldr	r3, [pc, #28]	; (800c2c8 <vPortExitCritical+0x4c>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d105      	bne.n	800c2be <vPortExitCritical+0x42>
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	f383 8811 	msr	BASEPRI, r3
}
 800c2bc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c2be:	bf00      	nop
 800c2c0:	370c      	adds	r7, #12
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bc80      	pop	{r7}
 800c2c6:	4770      	bx	lr
 800c2c8:	2000007c 	.word	0x2000007c
 800c2cc:	00000000 	.word	0x00000000

0800c2d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c2d0:	f3ef 8009 	mrs	r0, PSP
 800c2d4:	f3bf 8f6f 	isb	sy
 800c2d8:	4b0d      	ldr	r3, [pc, #52]	; (800c310 <pxCurrentTCBConst>)
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c2e0:	6010      	str	r0, [r2, #0]
 800c2e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c2e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c2ea:	f380 8811 	msr	BASEPRI, r0
 800c2ee:	f7ff fb4f 	bl	800b990 <vTaskSwitchContext>
 800c2f2:	f04f 0000 	mov.w	r0, #0
 800c2f6:	f380 8811 	msr	BASEPRI, r0
 800c2fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c2fe:	6819      	ldr	r1, [r3, #0]
 800c300:	6808      	ldr	r0, [r1, #0]
 800c302:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c306:	f380 8809 	msr	PSP, r0
 800c30a:	f3bf 8f6f 	isb	sy
 800c30e:	4770      	bx	lr

0800c310 <pxCurrentTCBConst>:
 800c310:	200012f8 	.word	0x200012f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c314:	bf00      	nop
 800c316:	bf00      	nop

0800c318 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
	__asm volatile
 800c31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c322:	f383 8811 	msr	BASEPRI, r3
 800c326:	f3bf 8f6f 	isb	sy
 800c32a:	f3bf 8f4f 	dsb	sy
 800c32e:	607b      	str	r3, [r7, #4]
}
 800c330:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c332:	f7ff fa6f 	bl	800b814 <xTaskIncrementTick>
 800c336:	4603      	mov	r3, r0
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d003      	beq.n	800c344 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c33c:	4b06      	ldr	r3, [pc, #24]	; (800c358 <SysTick_Handler+0x40>)
 800c33e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c342:	601a      	str	r2, [r3, #0]
 800c344:	2300      	movs	r3, #0
 800c346:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	f383 8811 	msr	BASEPRI, r3
}
 800c34e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c350:	bf00      	nop
 800c352:	3708      	adds	r7, #8
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}
 800c358:	e000ed04 	.word	0xe000ed04

0800c35c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c35c:	b480      	push	{r7}
 800c35e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c360:	4b0a      	ldr	r3, [pc, #40]	; (800c38c <vPortSetupTimerInterrupt+0x30>)
 800c362:	2200      	movs	r2, #0
 800c364:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c366:	4b0a      	ldr	r3, [pc, #40]	; (800c390 <vPortSetupTimerInterrupt+0x34>)
 800c368:	2200      	movs	r2, #0
 800c36a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c36c:	4b09      	ldr	r3, [pc, #36]	; (800c394 <vPortSetupTimerInterrupt+0x38>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4a09      	ldr	r2, [pc, #36]	; (800c398 <vPortSetupTimerInterrupt+0x3c>)
 800c372:	fba2 2303 	umull	r2, r3, r2, r3
 800c376:	099b      	lsrs	r3, r3, #6
 800c378:	4a08      	ldr	r2, [pc, #32]	; (800c39c <vPortSetupTimerInterrupt+0x40>)
 800c37a:	3b01      	subs	r3, #1
 800c37c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c37e:	4b03      	ldr	r3, [pc, #12]	; (800c38c <vPortSetupTimerInterrupt+0x30>)
 800c380:	2207      	movs	r2, #7
 800c382:	601a      	str	r2, [r3, #0]
}
 800c384:	bf00      	nop
 800c386:	46bd      	mov	sp, r7
 800c388:	bc80      	pop	{r7}
 800c38a:	4770      	bx	lr
 800c38c:	e000e010 	.word	0xe000e010
 800c390:	e000e018 	.word	0xe000e018
 800c394:	20000000 	.word	0x20000000
 800c398:	10624dd3 	.word	0x10624dd3
 800c39c:	e000e014 	.word	0xe000e014

0800c3a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b085      	sub	sp, #20
 800c3a4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c3a6:	f3ef 8305 	mrs	r3, IPSR
 800c3aa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	2b0f      	cmp	r3, #15
 800c3b0:	d914      	bls.n	800c3dc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c3b2:	4a16      	ldr	r2, [pc, #88]	; (800c40c <vPortValidateInterruptPriority+0x6c>)
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	4413      	add	r3, r2
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c3bc:	4b14      	ldr	r3, [pc, #80]	; (800c410 <vPortValidateInterruptPriority+0x70>)
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	7afa      	ldrb	r2, [r7, #11]
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	d20a      	bcs.n	800c3dc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ca:	f383 8811 	msr	BASEPRI, r3
 800c3ce:	f3bf 8f6f 	isb	sy
 800c3d2:	f3bf 8f4f 	dsb	sy
 800c3d6:	607b      	str	r3, [r7, #4]
}
 800c3d8:	bf00      	nop
 800c3da:	e7fe      	b.n	800c3da <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c3dc:	4b0d      	ldr	r3, [pc, #52]	; (800c414 <vPortValidateInterruptPriority+0x74>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c3e4:	4b0c      	ldr	r3, [pc, #48]	; (800c418 <vPortValidateInterruptPriority+0x78>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d90a      	bls.n	800c402 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f0:	f383 8811 	msr	BASEPRI, r3
 800c3f4:	f3bf 8f6f 	isb	sy
 800c3f8:	f3bf 8f4f 	dsb	sy
 800c3fc:	603b      	str	r3, [r7, #0]
}
 800c3fe:	bf00      	nop
 800c400:	e7fe      	b.n	800c400 <vPortValidateInterruptPriority+0x60>
	}
 800c402:	bf00      	nop
 800c404:	3714      	adds	r7, #20
 800c406:	46bd      	mov	sp, r7
 800c408:	bc80      	pop	{r7}
 800c40a:	4770      	bx	lr
 800c40c:	e000e3f0 	.word	0xe000e3f0
 800c410:	20001424 	.word	0x20001424
 800c414:	e000ed0c 	.word	0xe000ed0c
 800c418:	20001428 	.word	0x20001428

0800c41c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b08a      	sub	sp, #40	; 0x28
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c424:	2300      	movs	r3, #0
 800c426:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c428:	f7ff f94a 	bl	800b6c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c42c:	4b58      	ldr	r3, [pc, #352]	; (800c590 <pvPortMalloc+0x174>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d101      	bne.n	800c438 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c434:	f000 f910 	bl	800c658 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c438:	4b56      	ldr	r3, [pc, #344]	; (800c594 <pvPortMalloc+0x178>)
 800c43a:	681a      	ldr	r2, [r3, #0]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	4013      	ands	r3, r2
 800c440:	2b00      	cmp	r3, #0
 800c442:	f040 808e 	bne.w	800c562 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d01d      	beq.n	800c488 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c44c:	2208      	movs	r2, #8
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	4413      	add	r3, r2
 800c452:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f003 0307 	and.w	r3, r3, #7
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d014      	beq.n	800c488 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f023 0307 	bic.w	r3, r3, #7
 800c464:	3308      	adds	r3, #8
 800c466:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f003 0307 	and.w	r3, r3, #7
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d00a      	beq.n	800c488 <pvPortMalloc+0x6c>
	__asm volatile
 800c472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c476:	f383 8811 	msr	BASEPRI, r3
 800c47a:	f3bf 8f6f 	isb	sy
 800c47e:	f3bf 8f4f 	dsb	sy
 800c482:	617b      	str	r3, [r7, #20]
}
 800c484:	bf00      	nop
 800c486:	e7fe      	b.n	800c486 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d069      	beq.n	800c562 <pvPortMalloc+0x146>
 800c48e:	4b42      	ldr	r3, [pc, #264]	; (800c598 <pvPortMalloc+0x17c>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	687a      	ldr	r2, [r7, #4]
 800c494:	429a      	cmp	r2, r3
 800c496:	d864      	bhi.n	800c562 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c498:	4b40      	ldr	r3, [pc, #256]	; (800c59c <pvPortMalloc+0x180>)
 800c49a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c49c:	4b3f      	ldr	r3, [pc, #252]	; (800c59c <pvPortMalloc+0x180>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c4a2:	e004      	b.n	800c4ae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d903      	bls.n	800c4c0 <pvPortMalloc+0xa4>
 800c4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d1f1      	bne.n	800c4a4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c4c0:	4b33      	ldr	r3, [pc, #204]	; (800c590 <pvPortMalloc+0x174>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d04b      	beq.n	800c562 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c4ca:	6a3b      	ldr	r3, [r7, #32]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	2208      	movs	r2, #8
 800c4d0:	4413      	add	r3, r2
 800c4d2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d6:	681a      	ldr	r2, [r3, #0]
 800c4d8:	6a3b      	ldr	r3, [r7, #32]
 800c4da:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4de:	685a      	ldr	r2, [r3, #4]
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	1ad2      	subs	r2, r2, r3
 800c4e4:	2308      	movs	r3, #8
 800c4e6:	005b      	lsls	r3, r3, #1
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d91f      	bls.n	800c52c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c4ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	4413      	add	r3, r2
 800c4f2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4f4:	69bb      	ldr	r3, [r7, #24]
 800c4f6:	f003 0307 	and.w	r3, r3, #7
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d00a      	beq.n	800c514 <pvPortMalloc+0xf8>
	__asm volatile
 800c4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c502:	f383 8811 	msr	BASEPRI, r3
 800c506:	f3bf 8f6f 	isb	sy
 800c50a:	f3bf 8f4f 	dsb	sy
 800c50e:	613b      	str	r3, [r7, #16]
}
 800c510:	bf00      	nop
 800c512:	e7fe      	b.n	800c512 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c516:	685a      	ldr	r2, [r3, #4]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	1ad2      	subs	r2, r2, r3
 800c51c:	69bb      	ldr	r3, [r7, #24]
 800c51e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c522:	687a      	ldr	r2, [r7, #4]
 800c524:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c526:	69b8      	ldr	r0, [r7, #24]
 800c528:	f000 f8f8 	bl	800c71c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c52c:	4b1a      	ldr	r3, [pc, #104]	; (800c598 <pvPortMalloc+0x17c>)
 800c52e:	681a      	ldr	r2, [r3, #0]
 800c530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	1ad3      	subs	r3, r2, r3
 800c536:	4a18      	ldr	r2, [pc, #96]	; (800c598 <pvPortMalloc+0x17c>)
 800c538:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c53a:	4b17      	ldr	r3, [pc, #92]	; (800c598 <pvPortMalloc+0x17c>)
 800c53c:	681a      	ldr	r2, [r3, #0]
 800c53e:	4b18      	ldr	r3, [pc, #96]	; (800c5a0 <pvPortMalloc+0x184>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	429a      	cmp	r2, r3
 800c544:	d203      	bcs.n	800c54e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c546:	4b14      	ldr	r3, [pc, #80]	; (800c598 <pvPortMalloc+0x17c>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	4a15      	ldr	r2, [pc, #84]	; (800c5a0 <pvPortMalloc+0x184>)
 800c54c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c550:	685a      	ldr	r2, [r3, #4]
 800c552:	4b10      	ldr	r3, [pc, #64]	; (800c594 <pvPortMalloc+0x178>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	431a      	orrs	r2, r3
 800c558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55e:	2200      	movs	r2, #0
 800c560:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c562:	f7ff f8bb 	bl	800b6dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c566:	69fb      	ldr	r3, [r7, #28]
 800c568:	f003 0307 	and.w	r3, r3, #7
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d00a      	beq.n	800c586 <pvPortMalloc+0x16a>
	__asm volatile
 800c570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c574:	f383 8811 	msr	BASEPRI, r3
 800c578:	f3bf 8f6f 	isb	sy
 800c57c:	f3bf 8f4f 	dsb	sy
 800c580:	60fb      	str	r3, [r7, #12]
}
 800c582:	bf00      	nop
 800c584:	e7fe      	b.n	800c584 <pvPortMalloc+0x168>
	return pvReturn;
 800c586:	69fb      	ldr	r3, [r7, #28]
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3728      	adds	r7, #40	; 0x28
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	20004314 	.word	0x20004314
 800c594:	20004320 	.word	0x20004320
 800c598:	20004318 	.word	0x20004318
 800c59c:	2000430c 	.word	0x2000430c
 800c5a0:	2000431c 	.word	0x2000431c

0800c5a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b086      	sub	sp, #24
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d048      	beq.n	800c648 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c5b6:	2308      	movs	r3, #8
 800c5b8:	425b      	negs	r3, r3
 800c5ba:	697a      	ldr	r2, [r7, #20]
 800c5bc:	4413      	add	r3, r2
 800c5be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	685a      	ldr	r2, [r3, #4]
 800c5c8:	4b21      	ldr	r3, [pc, #132]	; (800c650 <vPortFree+0xac>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	4013      	ands	r3, r2
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d10a      	bne.n	800c5e8 <vPortFree+0x44>
	__asm volatile
 800c5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d6:	f383 8811 	msr	BASEPRI, r3
 800c5da:	f3bf 8f6f 	isb	sy
 800c5de:	f3bf 8f4f 	dsb	sy
 800c5e2:	60fb      	str	r3, [r7, #12]
}
 800c5e4:	bf00      	nop
 800c5e6:	e7fe      	b.n	800c5e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d00a      	beq.n	800c606 <vPortFree+0x62>
	__asm volatile
 800c5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f4:	f383 8811 	msr	BASEPRI, r3
 800c5f8:	f3bf 8f6f 	isb	sy
 800c5fc:	f3bf 8f4f 	dsb	sy
 800c600:	60bb      	str	r3, [r7, #8]
}
 800c602:	bf00      	nop
 800c604:	e7fe      	b.n	800c604 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	685a      	ldr	r2, [r3, #4]
 800c60a:	4b11      	ldr	r3, [pc, #68]	; (800c650 <vPortFree+0xac>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	4013      	ands	r3, r2
 800c610:	2b00      	cmp	r3, #0
 800c612:	d019      	beq.n	800c648 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d115      	bne.n	800c648 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	685a      	ldr	r2, [r3, #4]
 800c620:	4b0b      	ldr	r3, [pc, #44]	; (800c650 <vPortFree+0xac>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	43db      	mvns	r3, r3
 800c626:	401a      	ands	r2, r3
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c62c:	f7ff f848 	bl	800b6c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	685a      	ldr	r2, [r3, #4]
 800c634:	4b07      	ldr	r3, [pc, #28]	; (800c654 <vPortFree+0xb0>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	4413      	add	r3, r2
 800c63a:	4a06      	ldr	r2, [pc, #24]	; (800c654 <vPortFree+0xb0>)
 800c63c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c63e:	6938      	ldr	r0, [r7, #16]
 800c640:	f000 f86c 	bl	800c71c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c644:	f7ff f84a 	bl	800b6dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c648:	bf00      	nop
 800c64a:	3718      	adds	r7, #24
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}
 800c650:	20004320 	.word	0x20004320
 800c654:	20004318 	.word	0x20004318

0800c658 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c658:	b480      	push	{r7}
 800c65a:	b085      	sub	sp, #20
 800c65c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c65e:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800c662:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c664:	4b27      	ldr	r3, [pc, #156]	; (800c704 <prvHeapInit+0xac>)
 800c666:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	f003 0307 	and.w	r3, r3, #7
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d00c      	beq.n	800c68c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	3307      	adds	r3, #7
 800c676:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	f023 0307 	bic.w	r3, r3, #7
 800c67e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c680:	68ba      	ldr	r2, [r7, #8]
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	1ad3      	subs	r3, r2, r3
 800c686:	4a1f      	ldr	r2, [pc, #124]	; (800c704 <prvHeapInit+0xac>)
 800c688:	4413      	add	r3, r2
 800c68a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c690:	4a1d      	ldr	r2, [pc, #116]	; (800c708 <prvHeapInit+0xb0>)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c696:	4b1c      	ldr	r3, [pc, #112]	; (800c708 <prvHeapInit+0xb0>)
 800c698:	2200      	movs	r2, #0
 800c69a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	68ba      	ldr	r2, [r7, #8]
 800c6a0:	4413      	add	r3, r2
 800c6a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c6a4:	2208      	movs	r2, #8
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	1a9b      	subs	r3, r3, r2
 800c6aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	f023 0307 	bic.w	r3, r3, #7
 800c6b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	4a15      	ldr	r2, [pc, #84]	; (800c70c <prvHeapInit+0xb4>)
 800c6b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c6ba:	4b14      	ldr	r3, [pc, #80]	; (800c70c <prvHeapInit+0xb4>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c6c2:	4b12      	ldr	r3, [pc, #72]	; (800c70c <prvHeapInit+0xb4>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	68fa      	ldr	r2, [r7, #12]
 800c6d2:	1ad2      	subs	r2, r2, r3
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c6d8:	4b0c      	ldr	r3, [pc, #48]	; (800c70c <prvHeapInit+0xb4>)
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	4a0a      	ldr	r2, [pc, #40]	; (800c710 <prvHeapInit+0xb8>)
 800c6e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	685b      	ldr	r3, [r3, #4]
 800c6ec:	4a09      	ldr	r2, [pc, #36]	; (800c714 <prvHeapInit+0xbc>)
 800c6ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c6f0:	4b09      	ldr	r3, [pc, #36]	; (800c718 <prvHeapInit+0xc0>)
 800c6f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c6f6:	601a      	str	r2, [r3, #0]
}
 800c6f8:	bf00      	nop
 800c6fa:	3714      	adds	r7, #20
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bc80      	pop	{r7}
 800c700:	4770      	bx	lr
 800c702:	bf00      	nop
 800c704:	2000142c 	.word	0x2000142c
 800c708:	2000430c 	.word	0x2000430c
 800c70c:	20004314 	.word	0x20004314
 800c710:	2000431c 	.word	0x2000431c
 800c714:	20004318 	.word	0x20004318
 800c718:	20004320 	.word	0x20004320

0800c71c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c71c:	b480      	push	{r7}
 800c71e:	b085      	sub	sp, #20
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c724:	4b27      	ldr	r3, [pc, #156]	; (800c7c4 <prvInsertBlockIntoFreeList+0xa8>)
 800c726:	60fb      	str	r3, [r7, #12]
 800c728:	e002      	b.n	800c730 <prvInsertBlockIntoFreeList+0x14>
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	60fb      	str	r3, [r7, #12]
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	429a      	cmp	r2, r3
 800c738:	d8f7      	bhi.n	800c72a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	68ba      	ldr	r2, [r7, #8]
 800c744:	4413      	add	r3, r2
 800c746:	687a      	ldr	r2, [r7, #4]
 800c748:	429a      	cmp	r2, r3
 800c74a:	d108      	bne.n	800c75e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	685a      	ldr	r2, [r3, #4]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	441a      	add	r2, r3
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	685b      	ldr	r3, [r3, #4]
 800c766:	68ba      	ldr	r2, [r7, #8]
 800c768:	441a      	add	r2, r3
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	429a      	cmp	r2, r3
 800c770:	d118      	bne.n	800c7a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	681a      	ldr	r2, [r3, #0]
 800c776:	4b14      	ldr	r3, [pc, #80]	; (800c7c8 <prvInsertBlockIntoFreeList+0xac>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d00d      	beq.n	800c79a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	685a      	ldr	r2, [r3, #4]
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	685b      	ldr	r3, [r3, #4]
 800c788:	441a      	add	r2, r3
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	681a      	ldr	r2, [r3, #0]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	601a      	str	r2, [r3, #0]
 800c798:	e008      	b.n	800c7ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c79a:	4b0b      	ldr	r3, [pc, #44]	; (800c7c8 <prvInsertBlockIntoFreeList+0xac>)
 800c79c:	681a      	ldr	r2, [r3, #0]
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	601a      	str	r2, [r3, #0]
 800c7a2:	e003      	b.n	800c7ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681a      	ldr	r2, [r3, #0]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c7ac:	68fa      	ldr	r2, [r7, #12]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d002      	beq.n	800c7ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	687a      	ldr	r2, [r7, #4]
 800c7b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7ba:	bf00      	nop
 800c7bc:	3714      	adds	r7, #20
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bc80      	pop	{r7}
 800c7c2:	4770      	bx	lr
 800c7c4:	2000430c 	.word	0x2000430c
 800c7c8:	20004314 	.word	0x20004314

0800c7cc <send_function>:
/*
 * -- Insert your variables declaration here --
 */
/* USER CODE BEGIN 0 */

void send_function(){
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	af00      	add	r7, sp, #0
	 if(Appli_state == APPLICATION_READY ){
 800c7d0:	4b05      	ldr	r3, [pc, #20]	; (800c7e8 <send_function+0x1c>)
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	2b02      	cmp	r3, #2
 800c7d6:	d104      	bne.n	800c7e2 <send_function+0x16>
		USBH_CDC_Transmit(&hUsbHostFS,read_info,6);
 800c7d8:	2206      	movs	r2, #6
 800c7da:	4904      	ldr	r1, [pc, #16]	; (800c7ec <send_function+0x20>)
 800c7dc:	4804      	ldr	r0, [pc, #16]	; (800c7f0 <send_function+0x24>)
 800c7de:	f7fa feef 	bl	80075c0 <USBH_CDC_Transmit>
	  }
}
 800c7e2:	bf00      	nop
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	20004718 	.word	0x20004718
 800c7ec:	20000080 	.word	0x20000080
 800c7f0:	20004338 	.word	0x20004338

0800c7f4 <USBH_CDC_TransmitCallback>:
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */

void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  USBH_CDC_Receive(phost,usb_rx_buf,1);
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	4904      	ldr	r1, [pc, #16]	; (800c810 <USBH_CDC_TransmitCallback+0x1c>)
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f7fa ff17 	bl	8007634 <USBH_CDC_Receive>
}
 800c806:	bf00      	nop
 800c808:	3708      	adds	r7, #8
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	20004324 	.word	0x20004324

0800c814 <USBH_CDC_ReceiveCallback>:

void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800c814:	b480      	push	{r7}
 800c816:	b083      	sub	sp, #12
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]

}
 800c81c:	bf00      	nop
 800c81e:	370c      	adds	r7, #12
 800c820:	46bd      	mov	sp, r7
 800c822:	bc80      	pop	{r7}
 800c824:	4770      	bx	lr
	...

0800c828 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c82c:	2201      	movs	r2, #1
 800c82e:	490e      	ldr	r1, [pc, #56]	; (800c868 <MX_USB_HOST_Init+0x40>)
 800c830:	480e      	ldr	r0, [pc, #56]	; (800c86c <MX_USB_HOST_Init+0x44>)
 800c832:	f7fb f83d 	bl	80078b0 <USBH_Init>
 800c836:	4603      	mov	r3, r0
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d001      	beq.n	800c840 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c83c:	f7f4 fa46 	bl	8000ccc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c840:	490b      	ldr	r1, [pc, #44]	; (800c870 <MX_USB_HOST_Init+0x48>)
 800c842:	480a      	ldr	r0, [pc, #40]	; (800c86c <MX_USB_HOST_Init+0x44>)
 800c844:	f7fb f8e1 	bl	8007a0a <USBH_RegisterClass>
 800c848:	4603      	mov	r3, r0
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d001      	beq.n	800c852 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c84e:	f7f4 fa3d 	bl	8000ccc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c852:	4806      	ldr	r0, [pc, #24]	; (800c86c <MX_USB_HOST_Init+0x44>)
 800c854:	f7fb f963 	bl	8007b1e <USBH_Start>
 800c858:	4603      	mov	r3, r0
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d001      	beq.n	800c862 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c85e:	f7f4 fa35 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c862:	bf00      	nop
 800c864:	bd80      	pop	{r7, pc}
 800c866:	bf00      	nop
 800c868:	0800c875 	.word	0x0800c875
 800c86c:	20004338 	.word	0x20004338
 800c870:	2000005c 	.word	0x2000005c

0800c874 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b082      	sub	sp, #8
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	460b      	mov	r3, r1
 800c87e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c880:	78fb      	ldrb	r3, [r7, #3]
 800c882:	3b01      	subs	r3, #1
 800c884:	2b04      	cmp	r3, #4
 800c886:	d82e      	bhi.n	800c8e6 <USBH_UserProcess+0x72>
 800c888:	a201      	add	r2, pc, #4	; (adr r2, 800c890 <USBH_UserProcess+0x1c>)
 800c88a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c88e:	bf00      	nop
 800c890:	0800c8e7 	.word	0x0800c8e7
 800c894:	0800c8bb 	.word	0x0800c8bb
 800c898:	0800c8e7 	.word	0x0800c8e7
 800c89c:	0800c8d1 	.word	0x0800c8d1
 800c8a0:	0800c8a5 	.word	0x0800c8a5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c8a4:	4b12      	ldr	r3, [pc, #72]	; (800c8f0 <USBH_UserProcess+0x7c>)
 800c8a6:	2203      	movs	r2, #3
 800c8a8:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_DISCONNECT, 0);
 800c8aa:	4b12      	ldr	r3, [pc, #72]	; (800c8f4 <USBH_UserProcess+0x80>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	2103      	movs	r1, #3
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f7fd fe1e 	bl	800a4f4 <osMessagePut>
  break;
 800c8b8:	e016      	b.n	800c8e8 <USBH_UserProcess+0x74>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c8ba:	4b0d      	ldr	r3, [pc, #52]	; (800c8f0 <USBH_UserProcess+0x7c>)
 800c8bc:	2202      	movs	r2, #2
 800c8be:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_READY, 0);
 800c8c0:	4b0c      	ldr	r3, [pc, #48]	; (800c8f4 <USBH_UserProcess+0x80>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	2102      	movs	r1, #2
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f7fd fe13 	bl	800a4f4 <osMessagePut>
  break;
 800c8ce:	e00b      	b.n	800c8e8 <USBH_UserProcess+0x74>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c8d0:	4b07      	ldr	r3, [pc, #28]	; (800c8f0 <USBH_UserProcess+0x7c>)
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_START, 0);
 800c8d6:	4b07      	ldr	r3, [pc, #28]	; (800c8f4 <USBH_UserProcess+0x80>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	2101      	movs	r1, #1
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7fd fe08 	bl	800a4f4 <osMessagePut>
  break;
 800c8e4:	e000      	b.n	800c8e8 <USBH_UserProcess+0x74>

  default:
  break;
 800c8e6:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c8e8:	bf00      	nop
 800c8ea:	3708      	adds	r7, #8
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}
 800c8f0:	20004718 	.word	0x20004718
 800c8f4:	200004ac 	.word	0x200004ac

0800c8f8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c908:	d113      	bne.n	800c932 <HAL_HCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c90a:	4b0c      	ldr	r3, [pc, #48]	; (800c93c <HAL_HCD_MspInit+0x44>)
 800c90c:	695b      	ldr	r3, [r3, #20]
 800c90e:	4a0b      	ldr	r2, [pc, #44]	; (800c93c <HAL_HCD_MspInit+0x44>)
 800c910:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c914:	6153      	str	r3, [r2, #20]
 800c916:	4b09      	ldr	r3, [pc, #36]	; (800c93c <HAL_HCD_MspInit+0x44>)
 800c918:	695b      	ldr	r3, [r3, #20]
 800c91a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c91e:	60fb      	str	r3, [r7, #12]
 800c920:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c922:	2200      	movs	r2, #0
 800c924:	2105      	movs	r1, #5
 800c926:	2043      	movs	r0, #67	; 0x43
 800c928:	f7f4 ff31 	bl	800178e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c92c:	2043      	movs	r0, #67	; 0x43
 800c92e:	f7f4 ff4a 	bl	80017c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c932:	bf00      	nop
 800c934:	3710      	adds	r7, #16
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}
 800c93a:	bf00      	nop
 800c93c:	40021000 	.word	0x40021000

0800c940 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b082      	sub	sp, #8
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c94e:	4618      	mov	r0, r3
 800c950:	f7fb fc66 	bl	8008220 <USBH_LL_IncTimer>
}
 800c954:	bf00      	nop
 800c956:	3708      	adds	r7, #8
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b082      	sub	sp, #8
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7fb fca9 	bl	80082c2 <USBH_LL_Connect>
}
 800c970:	bf00      	nop
 800c972:	3708      	adds	r7, #8
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}

0800c978 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c986:	4618      	mov	r0, r3
 800c988:	f7fb fcbe 	bl	8008308 <USBH_LL_Disconnect>
}
 800c98c:	bf00      	nop
 800c98e:	3708      	adds	r7, #8
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b082      	sub	sp, #8
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	460b      	mov	r3, r1
 800c99e:	70fb      	strb	r3, [r7, #3]
 800c9a0:	4613      	mov	r3, r2
 800c9a2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f7fb fcf3 	bl	8008396 <USBH_LL_NotifyURBChange>
#endif
}
 800c9b0:	bf00      	nop
 800c9b2:	3708      	adds	r7, #8
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b082      	sub	sp, #8
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f7fb fc54 	bl	8008274 <USBH_LL_PortEnabled>
}
 800c9cc:	bf00      	nop
 800c9ce:	3708      	adds	r7, #8
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}

0800c9d4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b082      	sub	sp, #8
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f7fb fc60 	bl	80082a8 <USBH_LL_PortDisabled>
}
 800c9e8:	bf00      	nop
 800c9ea:	3708      	adds	r7, #8
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b082      	sub	sp, #8
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	d127      	bne.n	800ca52 <USBH_LL_Init+0x62>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ca02:	4a16      	ldr	r2, [pc, #88]	; (800ca5c <USBH_LL_Init+0x6c>)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	4a13      	ldr	r2, [pc, #76]	; (800ca5c <USBH_LL_Init+0x6c>)
 800ca0e:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ca12:	4b12      	ldr	r3, [pc, #72]	; (800ca5c <USBH_LL_Init+0x6c>)
 800ca14:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ca18:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ca1a:	4b10      	ldr	r3, [pc, #64]	; (800ca5c <USBH_LL_Init+0x6c>)
 800ca1c:	2208      	movs	r2, #8
 800ca1e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ca20:	4b0e      	ldr	r3, [pc, #56]	; (800ca5c <USBH_LL_Init+0x6c>)
 800ca22:	2201      	movs	r2, #1
 800ca24:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ca26:	4b0d      	ldr	r3, [pc, #52]	; (800ca5c <USBH_LL_Init+0x6c>)
 800ca28:	2202      	movs	r2, #2
 800ca2a:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800ca2c:	4b0b      	ldr	r3, [pc, #44]	; (800ca5c <USBH_LL_Init+0x6c>)
 800ca2e:	2201      	movs	r2, #1
 800ca30:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ca32:	480a      	ldr	r0, [pc, #40]	; (800ca5c <USBH_LL_Init+0x6c>)
 800ca34:	f7f5 f9b4 	bl	8001da0 <HAL_HCD_Init>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d001      	beq.n	800ca42 <USBH_LL_Init+0x52>
  {
    Error_Handler( );
 800ca3e:	f7f4 f945 	bl	8000ccc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ca42:	4806      	ldr	r0, [pc, #24]	; (800ca5c <USBH_LL_Init+0x6c>)
 800ca44:	f7f5 fd8a 	bl	800255c <HAL_HCD_GetCurrentFrame>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f7fb fbd9 	bl	8008204 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ca52:	2300      	movs	r3, #0
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3708      	adds	r7, #8
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}
 800ca5c:	2000471c 	.word	0x2000471c

0800ca60 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b084      	sub	sp, #16
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7f5 fcfc 	bl	8002474 <HAL_HCD_Start>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ca80:	7bfb      	ldrb	r3, [r7, #15]
 800ca82:	4618      	mov	r0, r3
 800ca84:	f000 f95a 	bl	800cd3c <USBH_Get_USB_Status>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3710      	adds	r7, #16
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}

0800ca96 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ca96:	b580      	push	{r7, lr}
 800ca98:	b084      	sub	sp, #16
 800ca9a:	af00      	add	r7, sp, #0
 800ca9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800caa2:	2300      	movs	r3, #0
 800caa4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800caac:	4618      	mov	r0, r3
 800caae:	f7f5 fd04 	bl	80024ba <HAL_HCD_Stop>
 800cab2:	4603      	mov	r3, r0
 800cab4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cab6:	7bfb      	ldrb	r3, [r7, #15]
 800cab8:	4618      	mov	r0, r3
 800caba:	f000 f93f 	bl	800cd3c <USBH_Get_USB_Status>
 800cabe:	4603      	mov	r3, r0
 800cac0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cac2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3710      	adds	r7, #16
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800cad4:	2301      	movs	r3, #1
 800cad6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800cade:	4618      	mov	r0, r3
 800cae0:	f7f5 fd4a 	bl	8002578 <HAL_HCD_GetCurrentSpeed>
 800cae4:	4603      	mov	r3, r0
 800cae6:	2b02      	cmp	r3, #2
 800cae8:	d00c      	beq.n	800cb04 <USBH_LL_GetSpeed+0x38>
 800caea:	2b02      	cmp	r3, #2
 800caec:	d80d      	bhi.n	800cb0a <USBH_LL_GetSpeed+0x3e>
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d002      	beq.n	800caf8 <USBH_LL_GetSpeed+0x2c>
 800caf2:	2b01      	cmp	r3, #1
 800caf4:	d003      	beq.n	800cafe <USBH_LL_GetSpeed+0x32>
 800caf6:	e008      	b.n	800cb0a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800caf8:	2300      	movs	r3, #0
 800cafa:	73fb      	strb	r3, [r7, #15]
    break;
 800cafc:	e008      	b.n	800cb10 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800cafe:	2301      	movs	r3, #1
 800cb00:	73fb      	strb	r3, [r7, #15]
    break;
 800cb02:	e005      	b.n	800cb10 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800cb04:	2302      	movs	r3, #2
 800cb06:	73fb      	strb	r3, [r7, #15]
    break;
 800cb08:	e002      	b.n	800cb10 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	73fb      	strb	r3, [r7, #15]
    break;
 800cb0e:	bf00      	nop
  }
  return  speed;
 800cb10:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3710      	adds	r7, #16
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}

0800cb1a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b084      	sub	sp, #16
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb22:	2300      	movs	r3, #0
 800cb24:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cb26:	2300      	movs	r3, #0
 800cb28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800cb30:	4618      	mov	r0, r3
 800cb32:	f7f5 fcdf 	bl	80024f4 <HAL_HCD_ResetPort>
 800cb36:	4603      	mov	r3, r0
 800cb38:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cb3a:	7bfb      	ldrb	r3, [r7, #15]
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f000 f8fd 	bl	800cd3c <USBH_Get_USB_Status>
 800cb42:	4603      	mov	r3, r0
 800cb44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb46:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3710      	adds	r7, #16
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	460b      	mov	r3, r1
 800cb5a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800cb62:	78fa      	ldrb	r2, [r7, #3]
 800cb64:	4611      	mov	r1, r2
 800cb66:	4618      	mov	r0, r3
 800cb68:	f7f5 fce5 	bl	8002536 <HAL_HCD_HC_GetXferCount>
 800cb6c:	4603      	mov	r3, r0
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3708      	adds	r7, #8
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}

0800cb76 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cb76:	b590      	push	{r4, r7, lr}
 800cb78:	b089      	sub	sp, #36	; 0x24
 800cb7a:	af04      	add	r7, sp, #16
 800cb7c:	6078      	str	r0, [r7, #4]
 800cb7e:	4608      	mov	r0, r1
 800cb80:	4611      	mov	r1, r2
 800cb82:	461a      	mov	r2, r3
 800cb84:	4603      	mov	r3, r0
 800cb86:	70fb      	strb	r3, [r7, #3]
 800cb88:	460b      	mov	r3, r1
 800cb8a:	70bb      	strb	r3, [r7, #2]
 800cb8c:	4613      	mov	r3, r2
 800cb8e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb90:	2300      	movs	r3, #0
 800cb92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cb94:	2300      	movs	r3, #0
 800cb96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cb9e:	787c      	ldrb	r4, [r7, #1]
 800cba0:	78ba      	ldrb	r2, [r7, #2]
 800cba2:	78f9      	ldrb	r1, [r7, #3]
 800cba4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cba6:	9302      	str	r3, [sp, #8]
 800cba8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cbac:	9301      	str	r3, [sp, #4]
 800cbae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cbb2:	9300      	str	r3, [sp, #0]
 800cbb4:	4623      	mov	r3, r4
 800cbb6:	f7f5 f955 	bl	8001e64 <HAL_HCD_HC_Init>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800cbbe:	7bfb      	ldrb	r3, [r7, #15]
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f000 f8bb 	bl	800cd3c <USBH_Get_USB_Status>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbca:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3714      	adds	r7, #20
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd90      	pop	{r4, r7, pc}

0800cbd4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b084      	sub	sp, #16
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	460b      	mov	r3, r1
 800cbde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800cbee:	78fa      	ldrb	r2, [r7, #3]
 800cbf0:	4611      	mov	r1, r2
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7f5 f9c5 	bl	8001f82 <HAL_HCD_HC_Halt>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cbfc:	7bfb      	ldrb	r3, [r7, #15]
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f000 f89c 	bl	800cd3c <USBH_Get_USB_Status>
 800cc04:	4603      	mov	r3, r0
 800cc06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc08:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3710      	adds	r7, #16
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}

0800cc12 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800cc12:	b590      	push	{r4, r7, lr}
 800cc14:	b089      	sub	sp, #36	; 0x24
 800cc16:	af04      	add	r7, sp, #16
 800cc18:	6078      	str	r0, [r7, #4]
 800cc1a:	4608      	mov	r0, r1
 800cc1c:	4611      	mov	r1, r2
 800cc1e:	461a      	mov	r2, r3
 800cc20:	4603      	mov	r3, r0
 800cc22:	70fb      	strb	r3, [r7, #3]
 800cc24:	460b      	mov	r3, r1
 800cc26:	70bb      	strb	r3, [r7, #2]
 800cc28:	4613      	mov	r3, r2
 800cc2a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cc30:	2300      	movs	r3, #0
 800cc32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cc3a:	787c      	ldrb	r4, [r7, #1]
 800cc3c:	78ba      	ldrb	r2, [r7, #2]
 800cc3e:	78f9      	ldrb	r1, [r7, #3]
 800cc40:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cc44:	9303      	str	r3, [sp, #12]
 800cc46:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cc48:	9302      	str	r3, [sp, #8]
 800cc4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc4c:	9301      	str	r3, [sp, #4]
 800cc4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cc52:	9300      	str	r3, [sp, #0]
 800cc54:	4623      	mov	r3, r4
 800cc56:	f7f5 f9b7 	bl	8001fc8 <HAL_HCD_HC_SubmitRequest>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800cc5e:	7bfb      	ldrb	r3, [r7, #15]
 800cc60:	4618      	mov	r0, r3
 800cc62:	f000 f86b 	bl	800cd3c <USBH_Get_USB_Status>
 800cc66:	4603      	mov	r3, r0
 800cc68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc6a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3714      	adds	r7, #20
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd90      	pop	{r4, r7, pc}

0800cc74 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b082      	sub	sp, #8
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	460b      	mov	r3, r1
 800cc7e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800cc86:	78fa      	ldrb	r2, [r7, #3]
 800cc88:	4611      	mov	r1, r2
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f7f5 fc40 	bl	8002510 <HAL_HCD_HC_GetURBState>
 800cc90:	4603      	mov	r3, r0
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3708      	adds	r7, #8
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}

0800cc9a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800cc9a:	b580      	push	{r7, lr}
 800cc9c:	b082      	sub	sp, #8
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
 800cca2:	460b      	mov	r3, r1
 800cca4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 800ccac:	2b01      	cmp	r3, #1
 800ccae:	d103      	bne.n	800ccb8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ccb0:	78fb      	ldrb	r3, [r7, #3]
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f000 f86e 	bl	800cd94 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ccb8:	20c8      	movs	r0, #200	; 0xc8
 800ccba:	f7f4 fc8f 	bl	80015dc <HAL_Delay>
  return USBH_OK;
 800ccbe:	2300      	movs	r3, #0
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3708      	adds	r7, #8
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b085      	sub	sp, #20
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	70fb      	strb	r3, [r7, #3]
 800ccd4:	4613      	mov	r3, r2
 800ccd6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800ccde:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800cce0:	78fb      	ldrb	r3, [r7, #3]
 800cce2:	68fa      	ldr	r2, [r7, #12]
 800cce4:	212c      	movs	r1, #44	; 0x2c
 800cce6:	fb01 f303 	mul.w	r3, r1, r3
 800ccea:	4413      	add	r3, r2
 800ccec:	333b      	adds	r3, #59	; 0x3b
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d009      	beq.n	800cd08 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ccf4:	78fb      	ldrb	r3, [r7, #3]
 800ccf6:	68fa      	ldr	r2, [r7, #12]
 800ccf8:	212c      	movs	r1, #44	; 0x2c
 800ccfa:	fb01 f303 	mul.w	r3, r1, r3
 800ccfe:	4413      	add	r3, r2
 800cd00:	3354      	adds	r3, #84	; 0x54
 800cd02:	78ba      	ldrb	r2, [r7, #2]
 800cd04:	701a      	strb	r2, [r3, #0]
 800cd06:	e008      	b.n	800cd1a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800cd08:	78fb      	ldrb	r3, [r7, #3]
 800cd0a:	68fa      	ldr	r2, [r7, #12]
 800cd0c:	212c      	movs	r1, #44	; 0x2c
 800cd0e:	fb01 f303 	mul.w	r3, r1, r3
 800cd12:	4413      	add	r3, r2
 800cd14:	3355      	adds	r3, #85	; 0x55
 800cd16:	78ba      	ldrb	r2, [r7, #2]
 800cd18:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800cd1a:	2300      	movs	r3, #0
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3714      	adds	r7, #20
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bc80      	pop	{r7}
 800cd24:	4770      	bx	lr

0800cd26 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800cd26:	b580      	push	{r7, lr}
 800cd28:	b082      	sub	sp, #8
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f7f4 fc54 	bl	80015dc <HAL_Delay>
}
 800cd34:	bf00      	nop
 800cd36:	3708      	adds	r7, #8
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}

0800cd3c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b085      	sub	sp, #20
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	4603      	mov	r3, r0
 800cd44:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd46:	2300      	movs	r3, #0
 800cd48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cd4a:	79fb      	ldrb	r3, [r7, #7]
 800cd4c:	2b03      	cmp	r3, #3
 800cd4e:	d817      	bhi.n	800cd80 <USBH_Get_USB_Status+0x44>
 800cd50:	a201      	add	r2, pc, #4	; (adr r2, 800cd58 <USBH_Get_USB_Status+0x1c>)
 800cd52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd56:	bf00      	nop
 800cd58:	0800cd69 	.word	0x0800cd69
 800cd5c:	0800cd6f 	.word	0x0800cd6f
 800cd60:	0800cd75 	.word	0x0800cd75
 800cd64:	0800cd7b 	.word	0x0800cd7b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	73fb      	strb	r3, [r7, #15]
    break;
 800cd6c:	e00b      	b.n	800cd86 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cd6e:	2302      	movs	r3, #2
 800cd70:	73fb      	strb	r3, [r7, #15]
    break;
 800cd72:	e008      	b.n	800cd86 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800cd74:	2301      	movs	r3, #1
 800cd76:	73fb      	strb	r3, [r7, #15]
    break;
 800cd78:	e005      	b.n	800cd86 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800cd7a:	2302      	movs	r3, #2
 800cd7c:	73fb      	strb	r3, [r7, #15]
    break;
 800cd7e:	e002      	b.n	800cd86 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800cd80:	2302      	movs	r3, #2
 800cd82:	73fb      	strb	r3, [r7, #15]
    break;
 800cd84:	bf00      	nop
  }
  return usb_status;
 800cd86:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3714      	adds	r7, #20
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bc80      	pop	{r7}
 800cd90:	4770      	bx	lr
 800cd92:	bf00      	nop

0800cd94 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b084      	sub	sp, #16
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800cd9e:	79fb      	ldrb	r3, [r7, #7]
 800cda0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800cda2:	79fb      	ldrb	r3, [r7, #7]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d102      	bne.n	800cdae <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800cda8:	2301      	movs	r3, #1
 800cdaa:	73fb      	strb	r3, [r7, #15]
 800cdac:	e001      	b.n	800cdb2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,(GPIO_PinState)data);
 800cdb2:	7bfb      	ldrb	r3, [r7, #15]
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	2101      	movs	r1, #1
 800cdb8:	4803      	ldr	r0, [pc, #12]	; (800cdc8 <MX_DriverVbusFS+0x34>)
 800cdba:	f7f4 ffd9 	bl	8001d70 <HAL_GPIO_WritePin>
}
 800cdbe:	bf00      	nop
 800cdc0:	3710      	adds	r7, #16
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}
 800cdc6:	bf00      	nop
 800cdc8:	40010c00 	.word	0x40010c00

0800cdcc <__errno>:
 800cdcc:	4b01      	ldr	r3, [pc, #4]	; (800cdd4 <__errno+0x8>)
 800cdce:	6818      	ldr	r0, [r3, #0]
 800cdd0:	4770      	bx	lr
 800cdd2:	bf00      	nop
 800cdd4:	20000088 	.word	0x20000088

0800cdd8 <__libc_init_array>:
 800cdd8:	b570      	push	{r4, r5, r6, lr}
 800cdda:	2600      	movs	r6, #0
 800cddc:	4d0c      	ldr	r5, [pc, #48]	; (800ce10 <__libc_init_array+0x38>)
 800cdde:	4c0d      	ldr	r4, [pc, #52]	; (800ce14 <__libc_init_array+0x3c>)
 800cde0:	1b64      	subs	r4, r4, r5
 800cde2:	10a4      	asrs	r4, r4, #2
 800cde4:	42a6      	cmp	r6, r4
 800cde6:	d109      	bne.n	800cdfc <__libc_init_array+0x24>
 800cde8:	f000 fd16 	bl	800d818 <_init>
 800cdec:	2600      	movs	r6, #0
 800cdee:	4d0a      	ldr	r5, [pc, #40]	; (800ce18 <__libc_init_array+0x40>)
 800cdf0:	4c0a      	ldr	r4, [pc, #40]	; (800ce1c <__libc_init_array+0x44>)
 800cdf2:	1b64      	subs	r4, r4, r5
 800cdf4:	10a4      	asrs	r4, r4, #2
 800cdf6:	42a6      	cmp	r6, r4
 800cdf8:	d105      	bne.n	800ce06 <__libc_init_array+0x2e>
 800cdfa:	bd70      	pop	{r4, r5, r6, pc}
 800cdfc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce00:	4798      	blx	r3
 800ce02:	3601      	adds	r6, #1
 800ce04:	e7ee      	b.n	800cde4 <__libc_init_array+0xc>
 800ce06:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce0a:	4798      	blx	r3
 800ce0c:	3601      	adds	r6, #1
 800ce0e:	e7f2      	b.n	800cdf6 <__libc_init_array+0x1e>
 800ce10:	0800da74 	.word	0x0800da74
 800ce14:	0800da74 	.word	0x0800da74
 800ce18:	0800da74 	.word	0x0800da74
 800ce1c:	0800da78 	.word	0x0800da78

0800ce20 <__retarget_lock_acquire_recursive>:
 800ce20:	4770      	bx	lr

0800ce22 <__retarget_lock_release_recursive>:
 800ce22:	4770      	bx	lr

0800ce24 <malloc>:
 800ce24:	4b02      	ldr	r3, [pc, #8]	; (800ce30 <malloc+0xc>)
 800ce26:	4601      	mov	r1, r0
 800ce28:	6818      	ldr	r0, [r3, #0]
 800ce2a:	f000 b889 	b.w	800cf40 <_malloc_r>
 800ce2e:	bf00      	nop
 800ce30:	20000088 	.word	0x20000088

0800ce34 <free>:
 800ce34:	4b02      	ldr	r3, [pc, #8]	; (800ce40 <free+0xc>)
 800ce36:	4601      	mov	r1, r0
 800ce38:	6818      	ldr	r0, [r3, #0]
 800ce3a:	f000 b819 	b.w	800ce70 <_free_r>
 800ce3e:	bf00      	nop
 800ce40:	20000088 	.word	0x20000088

0800ce44 <memcpy>:
 800ce44:	440a      	add	r2, r1
 800ce46:	4291      	cmp	r1, r2
 800ce48:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce4c:	d100      	bne.n	800ce50 <memcpy+0xc>
 800ce4e:	4770      	bx	lr
 800ce50:	b510      	push	{r4, lr}
 800ce52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce56:	4291      	cmp	r1, r2
 800ce58:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce5c:	d1f9      	bne.n	800ce52 <memcpy+0xe>
 800ce5e:	bd10      	pop	{r4, pc}

0800ce60 <memset>:
 800ce60:	4603      	mov	r3, r0
 800ce62:	4402      	add	r2, r0
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d100      	bne.n	800ce6a <memset+0xa>
 800ce68:	4770      	bx	lr
 800ce6a:	f803 1b01 	strb.w	r1, [r3], #1
 800ce6e:	e7f9      	b.n	800ce64 <memset+0x4>

0800ce70 <_free_r>:
 800ce70:	b538      	push	{r3, r4, r5, lr}
 800ce72:	4605      	mov	r5, r0
 800ce74:	2900      	cmp	r1, #0
 800ce76:	d040      	beq.n	800cefa <_free_r+0x8a>
 800ce78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce7c:	1f0c      	subs	r4, r1, #4
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	bfb8      	it	lt
 800ce82:	18e4      	addlt	r4, r4, r3
 800ce84:	f000 f96a 	bl	800d15c <__malloc_lock>
 800ce88:	4a1c      	ldr	r2, [pc, #112]	; (800cefc <_free_r+0x8c>)
 800ce8a:	6813      	ldr	r3, [r2, #0]
 800ce8c:	b933      	cbnz	r3, 800ce9c <_free_r+0x2c>
 800ce8e:	6063      	str	r3, [r4, #4]
 800ce90:	6014      	str	r4, [r2, #0]
 800ce92:	4628      	mov	r0, r5
 800ce94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce98:	f000 b966 	b.w	800d168 <__malloc_unlock>
 800ce9c:	42a3      	cmp	r3, r4
 800ce9e:	d908      	bls.n	800ceb2 <_free_r+0x42>
 800cea0:	6820      	ldr	r0, [r4, #0]
 800cea2:	1821      	adds	r1, r4, r0
 800cea4:	428b      	cmp	r3, r1
 800cea6:	bf01      	itttt	eq
 800cea8:	6819      	ldreq	r1, [r3, #0]
 800ceaa:	685b      	ldreq	r3, [r3, #4]
 800ceac:	1809      	addeq	r1, r1, r0
 800ceae:	6021      	streq	r1, [r4, #0]
 800ceb0:	e7ed      	b.n	800ce8e <_free_r+0x1e>
 800ceb2:	461a      	mov	r2, r3
 800ceb4:	685b      	ldr	r3, [r3, #4]
 800ceb6:	b10b      	cbz	r3, 800cebc <_free_r+0x4c>
 800ceb8:	42a3      	cmp	r3, r4
 800ceba:	d9fa      	bls.n	800ceb2 <_free_r+0x42>
 800cebc:	6811      	ldr	r1, [r2, #0]
 800cebe:	1850      	adds	r0, r2, r1
 800cec0:	42a0      	cmp	r0, r4
 800cec2:	d10b      	bne.n	800cedc <_free_r+0x6c>
 800cec4:	6820      	ldr	r0, [r4, #0]
 800cec6:	4401      	add	r1, r0
 800cec8:	1850      	adds	r0, r2, r1
 800ceca:	4283      	cmp	r3, r0
 800cecc:	6011      	str	r1, [r2, #0]
 800cece:	d1e0      	bne.n	800ce92 <_free_r+0x22>
 800ced0:	6818      	ldr	r0, [r3, #0]
 800ced2:	685b      	ldr	r3, [r3, #4]
 800ced4:	4401      	add	r1, r0
 800ced6:	6011      	str	r1, [r2, #0]
 800ced8:	6053      	str	r3, [r2, #4]
 800ceda:	e7da      	b.n	800ce92 <_free_r+0x22>
 800cedc:	d902      	bls.n	800cee4 <_free_r+0x74>
 800cede:	230c      	movs	r3, #12
 800cee0:	602b      	str	r3, [r5, #0]
 800cee2:	e7d6      	b.n	800ce92 <_free_r+0x22>
 800cee4:	6820      	ldr	r0, [r4, #0]
 800cee6:	1821      	adds	r1, r4, r0
 800cee8:	428b      	cmp	r3, r1
 800ceea:	bf01      	itttt	eq
 800ceec:	6819      	ldreq	r1, [r3, #0]
 800ceee:	685b      	ldreq	r3, [r3, #4]
 800cef0:	1809      	addeq	r1, r1, r0
 800cef2:	6021      	streq	r1, [r4, #0]
 800cef4:	6063      	str	r3, [r4, #4]
 800cef6:	6054      	str	r4, [r2, #4]
 800cef8:	e7cb      	b.n	800ce92 <_free_r+0x22>
 800cefa:	bd38      	pop	{r3, r4, r5, pc}
 800cefc:	20004a24 	.word	0x20004a24

0800cf00 <sbrk_aligned>:
 800cf00:	b570      	push	{r4, r5, r6, lr}
 800cf02:	4e0e      	ldr	r6, [pc, #56]	; (800cf3c <sbrk_aligned+0x3c>)
 800cf04:	460c      	mov	r4, r1
 800cf06:	6831      	ldr	r1, [r6, #0]
 800cf08:	4605      	mov	r5, r0
 800cf0a:	b911      	cbnz	r1, 800cf12 <sbrk_aligned+0x12>
 800cf0c:	f000 f8f6 	bl	800d0fc <_sbrk_r>
 800cf10:	6030      	str	r0, [r6, #0]
 800cf12:	4621      	mov	r1, r4
 800cf14:	4628      	mov	r0, r5
 800cf16:	f000 f8f1 	bl	800d0fc <_sbrk_r>
 800cf1a:	1c43      	adds	r3, r0, #1
 800cf1c:	d00a      	beq.n	800cf34 <sbrk_aligned+0x34>
 800cf1e:	1cc4      	adds	r4, r0, #3
 800cf20:	f024 0403 	bic.w	r4, r4, #3
 800cf24:	42a0      	cmp	r0, r4
 800cf26:	d007      	beq.n	800cf38 <sbrk_aligned+0x38>
 800cf28:	1a21      	subs	r1, r4, r0
 800cf2a:	4628      	mov	r0, r5
 800cf2c:	f000 f8e6 	bl	800d0fc <_sbrk_r>
 800cf30:	3001      	adds	r0, #1
 800cf32:	d101      	bne.n	800cf38 <sbrk_aligned+0x38>
 800cf34:	f04f 34ff 	mov.w	r4, #4294967295
 800cf38:	4620      	mov	r0, r4
 800cf3a:	bd70      	pop	{r4, r5, r6, pc}
 800cf3c:	20004a28 	.word	0x20004a28

0800cf40 <_malloc_r>:
 800cf40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf44:	1ccd      	adds	r5, r1, #3
 800cf46:	f025 0503 	bic.w	r5, r5, #3
 800cf4a:	3508      	adds	r5, #8
 800cf4c:	2d0c      	cmp	r5, #12
 800cf4e:	bf38      	it	cc
 800cf50:	250c      	movcc	r5, #12
 800cf52:	2d00      	cmp	r5, #0
 800cf54:	4607      	mov	r7, r0
 800cf56:	db01      	blt.n	800cf5c <_malloc_r+0x1c>
 800cf58:	42a9      	cmp	r1, r5
 800cf5a:	d905      	bls.n	800cf68 <_malloc_r+0x28>
 800cf5c:	230c      	movs	r3, #12
 800cf5e:	2600      	movs	r6, #0
 800cf60:	603b      	str	r3, [r7, #0]
 800cf62:	4630      	mov	r0, r6
 800cf64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf68:	4e2e      	ldr	r6, [pc, #184]	; (800d024 <_malloc_r+0xe4>)
 800cf6a:	f000 f8f7 	bl	800d15c <__malloc_lock>
 800cf6e:	6833      	ldr	r3, [r6, #0]
 800cf70:	461c      	mov	r4, r3
 800cf72:	bb34      	cbnz	r4, 800cfc2 <_malloc_r+0x82>
 800cf74:	4629      	mov	r1, r5
 800cf76:	4638      	mov	r0, r7
 800cf78:	f7ff ffc2 	bl	800cf00 <sbrk_aligned>
 800cf7c:	1c43      	adds	r3, r0, #1
 800cf7e:	4604      	mov	r4, r0
 800cf80:	d14d      	bne.n	800d01e <_malloc_r+0xde>
 800cf82:	6834      	ldr	r4, [r6, #0]
 800cf84:	4626      	mov	r6, r4
 800cf86:	2e00      	cmp	r6, #0
 800cf88:	d140      	bne.n	800d00c <_malloc_r+0xcc>
 800cf8a:	6823      	ldr	r3, [r4, #0]
 800cf8c:	4631      	mov	r1, r6
 800cf8e:	4638      	mov	r0, r7
 800cf90:	eb04 0803 	add.w	r8, r4, r3
 800cf94:	f000 f8b2 	bl	800d0fc <_sbrk_r>
 800cf98:	4580      	cmp	r8, r0
 800cf9a:	d13a      	bne.n	800d012 <_malloc_r+0xd2>
 800cf9c:	6821      	ldr	r1, [r4, #0]
 800cf9e:	3503      	adds	r5, #3
 800cfa0:	1a6d      	subs	r5, r5, r1
 800cfa2:	f025 0503 	bic.w	r5, r5, #3
 800cfa6:	3508      	adds	r5, #8
 800cfa8:	2d0c      	cmp	r5, #12
 800cfaa:	bf38      	it	cc
 800cfac:	250c      	movcc	r5, #12
 800cfae:	4638      	mov	r0, r7
 800cfb0:	4629      	mov	r1, r5
 800cfb2:	f7ff ffa5 	bl	800cf00 <sbrk_aligned>
 800cfb6:	3001      	adds	r0, #1
 800cfb8:	d02b      	beq.n	800d012 <_malloc_r+0xd2>
 800cfba:	6823      	ldr	r3, [r4, #0]
 800cfbc:	442b      	add	r3, r5
 800cfbe:	6023      	str	r3, [r4, #0]
 800cfc0:	e00e      	b.n	800cfe0 <_malloc_r+0xa0>
 800cfc2:	6822      	ldr	r2, [r4, #0]
 800cfc4:	1b52      	subs	r2, r2, r5
 800cfc6:	d41e      	bmi.n	800d006 <_malloc_r+0xc6>
 800cfc8:	2a0b      	cmp	r2, #11
 800cfca:	d916      	bls.n	800cffa <_malloc_r+0xba>
 800cfcc:	1961      	adds	r1, r4, r5
 800cfce:	42a3      	cmp	r3, r4
 800cfd0:	6025      	str	r5, [r4, #0]
 800cfd2:	bf18      	it	ne
 800cfd4:	6059      	strne	r1, [r3, #4]
 800cfd6:	6863      	ldr	r3, [r4, #4]
 800cfd8:	bf08      	it	eq
 800cfda:	6031      	streq	r1, [r6, #0]
 800cfdc:	5162      	str	r2, [r4, r5]
 800cfde:	604b      	str	r3, [r1, #4]
 800cfe0:	4638      	mov	r0, r7
 800cfe2:	f104 060b 	add.w	r6, r4, #11
 800cfe6:	f000 f8bf 	bl	800d168 <__malloc_unlock>
 800cfea:	f026 0607 	bic.w	r6, r6, #7
 800cfee:	1d23      	adds	r3, r4, #4
 800cff0:	1af2      	subs	r2, r6, r3
 800cff2:	d0b6      	beq.n	800cf62 <_malloc_r+0x22>
 800cff4:	1b9b      	subs	r3, r3, r6
 800cff6:	50a3      	str	r3, [r4, r2]
 800cff8:	e7b3      	b.n	800cf62 <_malloc_r+0x22>
 800cffa:	6862      	ldr	r2, [r4, #4]
 800cffc:	42a3      	cmp	r3, r4
 800cffe:	bf0c      	ite	eq
 800d000:	6032      	streq	r2, [r6, #0]
 800d002:	605a      	strne	r2, [r3, #4]
 800d004:	e7ec      	b.n	800cfe0 <_malloc_r+0xa0>
 800d006:	4623      	mov	r3, r4
 800d008:	6864      	ldr	r4, [r4, #4]
 800d00a:	e7b2      	b.n	800cf72 <_malloc_r+0x32>
 800d00c:	4634      	mov	r4, r6
 800d00e:	6876      	ldr	r6, [r6, #4]
 800d010:	e7b9      	b.n	800cf86 <_malloc_r+0x46>
 800d012:	230c      	movs	r3, #12
 800d014:	4638      	mov	r0, r7
 800d016:	603b      	str	r3, [r7, #0]
 800d018:	f000 f8a6 	bl	800d168 <__malloc_unlock>
 800d01c:	e7a1      	b.n	800cf62 <_malloc_r+0x22>
 800d01e:	6025      	str	r5, [r4, #0]
 800d020:	e7de      	b.n	800cfe0 <_malloc_r+0xa0>
 800d022:	bf00      	nop
 800d024:	20004a24 	.word	0x20004a24

0800d028 <cleanup_glue>:
 800d028:	b538      	push	{r3, r4, r5, lr}
 800d02a:	460c      	mov	r4, r1
 800d02c:	6809      	ldr	r1, [r1, #0]
 800d02e:	4605      	mov	r5, r0
 800d030:	b109      	cbz	r1, 800d036 <cleanup_glue+0xe>
 800d032:	f7ff fff9 	bl	800d028 <cleanup_glue>
 800d036:	4621      	mov	r1, r4
 800d038:	4628      	mov	r0, r5
 800d03a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d03e:	f7ff bf17 	b.w	800ce70 <_free_r>
	...

0800d044 <_reclaim_reent>:
 800d044:	4b2c      	ldr	r3, [pc, #176]	; (800d0f8 <_reclaim_reent+0xb4>)
 800d046:	b570      	push	{r4, r5, r6, lr}
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	4604      	mov	r4, r0
 800d04c:	4283      	cmp	r3, r0
 800d04e:	d051      	beq.n	800d0f4 <_reclaim_reent+0xb0>
 800d050:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d052:	b143      	cbz	r3, 800d066 <_reclaim_reent+0x22>
 800d054:	68db      	ldr	r3, [r3, #12]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d14a      	bne.n	800d0f0 <_reclaim_reent+0xac>
 800d05a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d05c:	6819      	ldr	r1, [r3, #0]
 800d05e:	b111      	cbz	r1, 800d066 <_reclaim_reent+0x22>
 800d060:	4620      	mov	r0, r4
 800d062:	f7ff ff05 	bl	800ce70 <_free_r>
 800d066:	6961      	ldr	r1, [r4, #20]
 800d068:	b111      	cbz	r1, 800d070 <_reclaim_reent+0x2c>
 800d06a:	4620      	mov	r0, r4
 800d06c:	f7ff ff00 	bl	800ce70 <_free_r>
 800d070:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d072:	b111      	cbz	r1, 800d07a <_reclaim_reent+0x36>
 800d074:	4620      	mov	r0, r4
 800d076:	f7ff fefb 	bl	800ce70 <_free_r>
 800d07a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d07c:	b111      	cbz	r1, 800d084 <_reclaim_reent+0x40>
 800d07e:	4620      	mov	r0, r4
 800d080:	f7ff fef6 	bl	800ce70 <_free_r>
 800d084:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d086:	b111      	cbz	r1, 800d08e <_reclaim_reent+0x4a>
 800d088:	4620      	mov	r0, r4
 800d08a:	f7ff fef1 	bl	800ce70 <_free_r>
 800d08e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d090:	b111      	cbz	r1, 800d098 <_reclaim_reent+0x54>
 800d092:	4620      	mov	r0, r4
 800d094:	f7ff feec 	bl	800ce70 <_free_r>
 800d098:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d09a:	b111      	cbz	r1, 800d0a2 <_reclaim_reent+0x5e>
 800d09c:	4620      	mov	r0, r4
 800d09e:	f7ff fee7 	bl	800ce70 <_free_r>
 800d0a2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d0a4:	b111      	cbz	r1, 800d0ac <_reclaim_reent+0x68>
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	f7ff fee2 	bl	800ce70 <_free_r>
 800d0ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0ae:	b111      	cbz	r1, 800d0b6 <_reclaim_reent+0x72>
 800d0b0:	4620      	mov	r0, r4
 800d0b2:	f7ff fedd 	bl	800ce70 <_free_r>
 800d0b6:	69a3      	ldr	r3, [r4, #24]
 800d0b8:	b1e3      	cbz	r3, 800d0f4 <_reclaim_reent+0xb0>
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d0be:	4798      	blx	r3
 800d0c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d0c2:	b1b9      	cbz	r1, 800d0f4 <_reclaim_reent+0xb0>
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d0ca:	f7ff bfad 	b.w	800d028 <cleanup_glue>
 800d0ce:	5949      	ldr	r1, [r1, r5]
 800d0d0:	b941      	cbnz	r1, 800d0e4 <_reclaim_reent+0xa0>
 800d0d2:	3504      	adds	r5, #4
 800d0d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d0d6:	2d80      	cmp	r5, #128	; 0x80
 800d0d8:	68d9      	ldr	r1, [r3, #12]
 800d0da:	d1f8      	bne.n	800d0ce <_reclaim_reent+0x8a>
 800d0dc:	4620      	mov	r0, r4
 800d0de:	f7ff fec7 	bl	800ce70 <_free_r>
 800d0e2:	e7ba      	b.n	800d05a <_reclaim_reent+0x16>
 800d0e4:	680e      	ldr	r6, [r1, #0]
 800d0e6:	4620      	mov	r0, r4
 800d0e8:	f7ff fec2 	bl	800ce70 <_free_r>
 800d0ec:	4631      	mov	r1, r6
 800d0ee:	e7ef      	b.n	800d0d0 <_reclaim_reent+0x8c>
 800d0f0:	2500      	movs	r5, #0
 800d0f2:	e7ef      	b.n	800d0d4 <_reclaim_reent+0x90>
 800d0f4:	bd70      	pop	{r4, r5, r6, pc}
 800d0f6:	bf00      	nop
 800d0f8:	20000088 	.word	0x20000088

0800d0fc <_sbrk_r>:
 800d0fc:	b538      	push	{r3, r4, r5, lr}
 800d0fe:	2300      	movs	r3, #0
 800d100:	4d05      	ldr	r5, [pc, #20]	; (800d118 <_sbrk_r+0x1c>)
 800d102:	4604      	mov	r4, r0
 800d104:	4608      	mov	r0, r1
 800d106:	602b      	str	r3, [r5, #0]
 800d108:	f7f4 f9d4 	bl	80014b4 <_sbrk>
 800d10c:	1c43      	adds	r3, r0, #1
 800d10e:	d102      	bne.n	800d116 <_sbrk_r+0x1a>
 800d110:	682b      	ldr	r3, [r5, #0]
 800d112:	b103      	cbz	r3, 800d116 <_sbrk_r+0x1a>
 800d114:	6023      	str	r3, [r4, #0]
 800d116:	bd38      	pop	{r3, r4, r5, pc}
 800d118:	20004a2c 	.word	0x20004a2c

0800d11c <siprintf>:
 800d11c:	b40e      	push	{r1, r2, r3}
 800d11e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d122:	b500      	push	{lr}
 800d124:	b09c      	sub	sp, #112	; 0x70
 800d126:	ab1d      	add	r3, sp, #116	; 0x74
 800d128:	9002      	str	r0, [sp, #8]
 800d12a:	9006      	str	r0, [sp, #24]
 800d12c:	9107      	str	r1, [sp, #28]
 800d12e:	9104      	str	r1, [sp, #16]
 800d130:	4808      	ldr	r0, [pc, #32]	; (800d154 <siprintf+0x38>)
 800d132:	4909      	ldr	r1, [pc, #36]	; (800d158 <siprintf+0x3c>)
 800d134:	f853 2b04 	ldr.w	r2, [r3], #4
 800d138:	9105      	str	r1, [sp, #20]
 800d13a:	6800      	ldr	r0, [r0, #0]
 800d13c:	a902      	add	r1, sp, #8
 800d13e:	9301      	str	r3, [sp, #4]
 800d140:	f000 f874 	bl	800d22c <_svfiprintf_r>
 800d144:	2200      	movs	r2, #0
 800d146:	9b02      	ldr	r3, [sp, #8]
 800d148:	701a      	strb	r2, [r3, #0]
 800d14a:	b01c      	add	sp, #112	; 0x70
 800d14c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d150:	b003      	add	sp, #12
 800d152:	4770      	bx	lr
 800d154:	20000088 	.word	0x20000088
 800d158:	ffff0208 	.word	0xffff0208

0800d15c <__malloc_lock>:
 800d15c:	4801      	ldr	r0, [pc, #4]	; (800d164 <__malloc_lock+0x8>)
 800d15e:	f7ff be5f 	b.w	800ce20 <__retarget_lock_acquire_recursive>
 800d162:	bf00      	nop
 800d164:	20004a20 	.word	0x20004a20

0800d168 <__malloc_unlock>:
 800d168:	4801      	ldr	r0, [pc, #4]	; (800d170 <__malloc_unlock+0x8>)
 800d16a:	f7ff be5a 	b.w	800ce22 <__retarget_lock_release_recursive>
 800d16e:	bf00      	nop
 800d170:	20004a20 	.word	0x20004a20

0800d174 <__ssputs_r>:
 800d174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d178:	688e      	ldr	r6, [r1, #8]
 800d17a:	4682      	mov	sl, r0
 800d17c:	429e      	cmp	r6, r3
 800d17e:	460c      	mov	r4, r1
 800d180:	4690      	mov	r8, r2
 800d182:	461f      	mov	r7, r3
 800d184:	d838      	bhi.n	800d1f8 <__ssputs_r+0x84>
 800d186:	898a      	ldrh	r2, [r1, #12]
 800d188:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d18c:	d032      	beq.n	800d1f4 <__ssputs_r+0x80>
 800d18e:	6825      	ldr	r5, [r4, #0]
 800d190:	6909      	ldr	r1, [r1, #16]
 800d192:	3301      	adds	r3, #1
 800d194:	eba5 0901 	sub.w	r9, r5, r1
 800d198:	6965      	ldr	r5, [r4, #20]
 800d19a:	444b      	add	r3, r9
 800d19c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d1a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d1a4:	106d      	asrs	r5, r5, #1
 800d1a6:	429d      	cmp	r5, r3
 800d1a8:	bf38      	it	cc
 800d1aa:	461d      	movcc	r5, r3
 800d1ac:	0553      	lsls	r3, r2, #21
 800d1ae:	d531      	bpl.n	800d214 <__ssputs_r+0xa0>
 800d1b0:	4629      	mov	r1, r5
 800d1b2:	f7ff fec5 	bl	800cf40 <_malloc_r>
 800d1b6:	4606      	mov	r6, r0
 800d1b8:	b950      	cbnz	r0, 800d1d0 <__ssputs_r+0x5c>
 800d1ba:	230c      	movs	r3, #12
 800d1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c0:	f8ca 3000 	str.w	r3, [sl]
 800d1c4:	89a3      	ldrh	r3, [r4, #12]
 800d1c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1ca:	81a3      	strh	r3, [r4, #12]
 800d1cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1d0:	464a      	mov	r2, r9
 800d1d2:	6921      	ldr	r1, [r4, #16]
 800d1d4:	f7ff fe36 	bl	800ce44 <memcpy>
 800d1d8:	89a3      	ldrh	r3, [r4, #12]
 800d1da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d1de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1e2:	81a3      	strh	r3, [r4, #12]
 800d1e4:	6126      	str	r6, [r4, #16]
 800d1e6:	444e      	add	r6, r9
 800d1e8:	6026      	str	r6, [r4, #0]
 800d1ea:	463e      	mov	r6, r7
 800d1ec:	6165      	str	r5, [r4, #20]
 800d1ee:	eba5 0509 	sub.w	r5, r5, r9
 800d1f2:	60a5      	str	r5, [r4, #8]
 800d1f4:	42be      	cmp	r6, r7
 800d1f6:	d900      	bls.n	800d1fa <__ssputs_r+0x86>
 800d1f8:	463e      	mov	r6, r7
 800d1fa:	4632      	mov	r2, r6
 800d1fc:	4641      	mov	r1, r8
 800d1fe:	6820      	ldr	r0, [r4, #0]
 800d200:	f000 fab8 	bl	800d774 <memmove>
 800d204:	68a3      	ldr	r3, [r4, #8]
 800d206:	2000      	movs	r0, #0
 800d208:	1b9b      	subs	r3, r3, r6
 800d20a:	60a3      	str	r3, [r4, #8]
 800d20c:	6823      	ldr	r3, [r4, #0]
 800d20e:	4433      	add	r3, r6
 800d210:	6023      	str	r3, [r4, #0]
 800d212:	e7db      	b.n	800d1cc <__ssputs_r+0x58>
 800d214:	462a      	mov	r2, r5
 800d216:	f000 fac7 	bl	800d7a8 <_realloc_r>
 800d21a:	4606      	mov	r6, r0
 800d21c:	2800      	cmp	r0, #0
 800d21e:	d1e1      	bne.n	800d1e4 <__ssputs_r+0x70>
 800d220:	4650      	mov	r0, sl
 800d222:	6921      	ldr	r1, [r4, #16]
 800d224:	f7ff fe24 	bl	800ce70 <_free_r>
 800d228:	e7c7      	b.n	800d1ba <__ssputs_r+0x46>
	...

0800d22c <_svfiprintf_r>:
 800d22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d230:	4698      	mov	r8, r3
 800d232:	898b      	ldrh	r3, [r1, #12]
 800d234:	4607      	mov	r7, r0
 800d236:	061b      	lsls	r3, r3, #24
 800d238:	460d      	mov	r5, r1
 800d23a:	4614      	mov	r4, r2
 800d23c:	b09d      	sub	sp, #116	; 0x74
 800d23e:	d50e      	bpl.n	800d25e <_svfiprintf_r+0x32>
 800d240:	690b      	ldr	r3, [r1, #16]
 800d242:	b963      	cbnz	r3, 800d25e <_svfiprintf_r+0x32>
 800d244:	2140      	movs	r1, #64	; 0x40
 800d246:	f7ff fe7b 	bl	800cf40 <_malloc_r>
 800d24a:	6028      	str	r0, [r5, #0]
 800d24c:	6128      	str	r0, [r5, #16]
 800d24e:	b920      	cbnz	r0, 800d25a <_svfiprintf_r+0x2e>
 800d250:	230c      	movs	r3, #12
 800d252:	603b      	str	r3, [r7, #0]
 800d254:	f04f 30ff 	mov.w	r0, #4294967295
 800d258:	e0d1      	b.n	800d3fe <_svfiprintf_r+0x1d2>
 800d25a:	2340      	movs	r3, #64	; 0x40
 800d25c:	616b      	str	r3, [r5, #20]
 800d25e:	2300      	movs	r3, #0
 800d260:	9309      	str	r3, [sp, #36]	; 0x24
 800d262:	2320      	movs	r3, #32
 800d264:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d268:	2330      	movs	r3, #48	; 0x30
 800d26a:	f04f 0901 	mov.w	r9, #1
 800d26e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d272:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d418 <_svfiprintf_r+0x1ec>
 800d276:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d27a:	4623      	mov	r3, r4
 800d27c:	469a      	mov	sl, r3
 800d27e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d282:	b10a      	cbz	r2, 800d288 <_svfiprintf_r+0x5c>
 800d284:	2a25      	cmp	r2, #37	; 0x25
 800d286:	d1f9      	bne.n	800d27c <_svfiprintf_r+0x50>
 800d288:	ebba 0b04 	subs.w	fp, sl, r4
 800d28c:	d00b      	beq.n	800d2a6 <_svfiprintf_r+0x7a>
 800d28e:	465b      	mov	r3, fp
 800d290:	4622      	mov	r2, r4
 800d292:	4629      	mov	r1, r5
 800d294:	4638      	mov	r0, r7
 800d296:	f7ff ff6d 	bl	800d174 <__ssputs_r>
 800d29a:	3001      	adds	r0, #1
 800d29c:	f000 80aa 	beq.w	800d3f4 <_svfiprintf_r+0x1c8>
 800d2a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2a2:	445a      	add	r2, fp
 800d2a4:	9209      	str	r2, [sp, #36]	; 0x24
 800d2a6:	f89a 3000 	ldrb.w	r3, [sl]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	f000 80a2 	beq.w	800d3f4 <_svfiprintf_r+0x1c8>
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d2b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2ba:	f10a 0a01 	add.w	sl, sl, #1
 800d2be:	9304      	str	r3, [sp, #16]
 800d2c0:	9307      	str	r3, [sp, #28]
 800d2c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d2c6:	931a      	str	r3, [sp, #104]	; 0x68
 800d2c8:	4654      	mov	r4, sl
 800d2ca:	2205      	movs	r2, #5
 800d2cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2d0:	4851      	ldr	r0, [pc, #324]	; (800d418 <_svfiprintf_r+0x1ec>)
 800d2d2:	f000 fa41 	bl	800d758 <memchr>
 800d2d6:	9a04      	ldr	r2, [sp, #16]
 800d2d8:	b9d8      	cbnz	r0, 800d312 <_svfiprintf_r+0xe6>
 800d2da:	06d0      	lsls	r0, r2, #27
 800d2dc:	bf44      	itt	mi
 800d2de:	2320      	movmi	r3, #32
 800d2e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2e4:	0711      	lsls	r1, r2, #28
 800d2e6:	bf44      	itt	mi
 800d2e8:	232b      	movmi	r3, #43	; 0x2b
 800d2ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2ee:	f89a 3000 	ldrb.w	r3, [sl]
 800d2f2:	2b2a      	cmp	r3, #42	; 0x2a
 800d2f4:	d015      	beq.n	800d322 <_svfiprintf_r+0xf6>
 800d2f6:	4654      	mov	r4, sl
 800d2f8:	2000      	movs	r0, #0
 800d2fa:	f04f 0c0a 	mov.w	ip, #10
 800d2fe:	9a07      	ldr	r2, [sp, #28]
 800d300:	4621      	mov	r1, r4
 800d302:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d306:	3b30      	subs	r3, #48	; 0x30
 800d308:	2b09      	cmp	r3, #9
 800d30a:	d94e      	bls.n	800d3aa <_svfiprintf_r+0x17e>
 800d30c:	b1b0      	cbz	r0, 800d33c <_svfiprintf_r+0x110>
 800d30e:	9207      	str	r2, [sp, #28]
 800d310:	e014      	b.n	800d33c <_svfiprintf_r+0x110>
 800d312:	eba0 0308 	sub.w	r3, r0, r8
 800d316:	fa09 f303 	lsl.w	r3, r9, r3
 800d31a:	4313      	orrs	r3, r2
 800d31c:	46a2      	mov	sl, r4
 800d31e:	9304      	str	r3, [sp, #16]
 800d320:	e7d2      	b.n	800d2c8 <_svfiprintf_r+0x9c>
 800d322:	9b03      	ldr	r3, [sp, #12]
 800d324:	1d19      	adds	r1, r3, #4
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	9103      	str	r1, [sp, #12]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	bfbb      	ittet	lt
 800d32e:	425b      	neglt	r3, r3
 800d330:	f042 0202 	orrlt.w	r2, r2, #2
 800d334:	9307      	strge	r3, [sp, #28]
 800d336:	9307      	strlt	r3, [sp, #28]
 800d338:	bfb8      	it	lt
 800d33a:	9204      	strlt	r2, [sp, #16]
 800d33c:	7823      	ldrb	r3, [r4, #0]
 800d33e:	2b2e      	cmp	r3, #46	; 0x2e
 800d340:	d10c      	bne.n	800d35c <_svfiprintf_r+0x130>
 800d342:	7863      	ldrb	r3, [r4, #1]
 800d344:	2b2a      	cmp	r3, #42	; 0x2a
 800d346:	d135      	bne.n	800d3b4 <_svfiprintf_r+0x188>
 800d348:	9b03      	ldr	r3, [sp, #12]
 800d34a:	3402      	adds	r4, #2
 800d34c:	1d1a      	adds	r2, r3, #4
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	9203      	str	r2, [sp, #12]
 800d352:	2b00      	cmp	r3, #0
 800d354:	bfb8      	it	lt
 800d356:	f04f 33ff 	movlt.w	r3, #4294967295
 800d35a:	9305      	str	r3, [sp, #20]
 800d35c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d41c <_svfiprintf_r+0x1f0>
 800d360:	2203      	movs	r2, #3
 800d362:	4650      	mov	r0, sl
 800d364:	7821      	ldrb	r1, [r4, #0]
 800d366:	f000 f9f7 	bl	800d758 <memchr>
 800d36a:	b140      	cbz	r0, 800d37e <_svfiprintf_r+0x152>
 800d36c:	2340      	movs	r3, #64	; 0x40
 800d36e:	eba0 000a 	sub.w	r0, r0, sl
 800d372:	fa03 f000 	lsl.w	r0, r3, r0
 800d376:	9b04      	ldr	r3, [sp, #16]
 800d378:	3401      	adds	r4, #1
 800d37a:	4303      	orrs	r3, r0
 800d37c:	9304      	str	r3, [sp, #16]
 800d37e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d382:	2206      	movs	r2, #6
 800d384:	4826      	ldr	r0, [pc, #152]	; (800d420 <_svfiprintf_r+0x1f4>)
 800d386:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d38a:	f000 f9e5 	bl	800d758 <memchr>
 800d38e:	2800      	cmp	r0, #0
 800d390:	d038      	beq.n	800d404 <_svfiprintf_r+0x1d8>
 800d392:	4b24      	ldr	r3, [pc, #144]	; (800d424 <_svfiprintf_r+0x1f8>)
 800d394:	bb1b      	cbnz	r3, 800d3de <_svfiprintf_r+0x1b2>
 800d396:	9b03      	ldr	r3, [sp, #12]
 800d398:	3307      	adds	r3, #7
 800d39a:	f023 0307 	bic.w	r3, r3, #7
 800d39e:	3308      	adds	r3, #8
 800d3a0:	9303      	str	r3, [sp, #12]
 800d3a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3a4:	4433      	add	r3, r6
 800d3a6:	9309      	str	r3, [sp, #36]	; 0x24
 800d3a8:	e767      	b.n	800d27a <_svfiprintf_r+0x4e>
 800d3aa:	460c      	mov	r4, r1
 800d3ac:	2001      	movs	r0, #1
 800d3ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3b2:	e7a5      	b.n	800d300 <_svfiprintf_r+0xd4>
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	f04f 0c0a 	mov.w	ip, #10
 800d3ba:	4619      	mov	r1, r3
 800d3bc:	3401      	adds	r4, #1
 800d3be:	9305      	str	r3, [sp, #20]
 800d3c0:	4620      	mov	r0, r4
 800d3c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3c6:	3a30      	subs	r2, #48	; 0x30
 800d3c8:	2a09      	cmp	r2, #9
 800d3ca:	d903      	bls.n	800d3d4 <_svfiprintf_r+0x1a8>
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d0c5      	beq.n	800d35c <_svfiprintf_r+0x130>
 800d3d0:	9105      	str	r1, [sp, #20]
 800d3d2:	e7c3      	b.n	800d35c <_svfiprintf_r+0x130>
 800d3d4:	4604      	mov	r4, r0
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3dc:	e7f0      	b.n	800d3c0 <_svfiprintf_r+0x194>
 800d3de:	ab03      	add	r3, sp, #12
 800d3e0:	9300      	str	r3, [sp, #0]
 800d3e2:	462a      	mov	r2, r5
 800d3e4:	4638      	mov	r0, r7
 800d3e6:	4b10      	ldr	r3, [pc, #64]	; (800d428 <_svfiprintf_r+0x1fc>)
 800d3e8:	a904      	add	r1, sp, #16
 800d3ea:	f3af 8000 	nop.w
 800d3ee:	1c42      	adds	r2, r0, #1
 800d3f0:	4606      	mov	r6, r0
 800d3f2:	d1d6      	bne.n	800d3a2 <_svfiprintf_r+0x176>
 800d3f4:	89ab      	ldrh	r3, [r5, #12]
 800d3f6:	065b      	lsls	r3, r3, #25
 800d3f8:	f53f af2c 	bmi.w	800d254 <_svfiprintf_r+0x28>
 800d3fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3fe:	b01d      	add	sp, #116	; 0x74
 800d400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d404:	ab03      	add	r3, sp, #12
 800d406:	9300      	str	r3, [sp, #0]
 800d408:	462a      	mov	r2, r5
 800d40a:	4638      	mov	r0, r7
 800d40c:	4b06      	ldr	r3, [pc, #24]	; (800d428 <_svfiprintf_r+0x1fc>)
 800d40e:	a904      	add	r1, sp, #16
 800d410:	f000 f87c 	bl	800d50c <_printf_i>
 800d414:	e7eb      	b.n	800d3ee <_svfiprintf_r+0x1c2>
 800d416:	bf00      	nop
 800d418:	0800da38 	.word	0x0800da38
 800d41c:	0800da3e 	.word	0x0800da3e
 800d420:	0800da42 	.word	0x0800da42
 800d424:	00000000 	.word	0x00000000
 800d428:	0800d175 	.word	0x0800d175

0800d42c <_printf_common>:
 800d42c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d430:	4616      	mov	r6, r2
 800d432:	4699      	mov	r9, r3
 800d434:	688a      	ldr	r2, [r1, #8]
 800d436:	690b      	ldr	r3, [r1, #16]
 800d438:	4607      	mov	r7, r0
 800d43a:	4293      	cmp	r3, r2
 800d43c:	bfb8      	it	lt
 800d43e:	4613      	movlt	r3, r2
 800d440:	6033      	str	r3, [r6, #0]
 800d442:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d446:	460c      	mov	r4, r1
 800d448:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d44c:	b10a      	cbz	r2, 800d452 <_printf_common+0x26>
 800d44e:	3301      	adds	r3, #1
 800d450:	6033      	str	r3, [r6, #0]
 800d452:	6823      	ldr	r3, [r4, #0]
 800d454:	0699      	lsls	r1, r3, #26
 800d456:	bf42      	ittt	mi
 800d458:	6833      	ldrmi	r3, [r6, #0]
 800d45a:	3302      	addmi	r3, #2
 800d45c:	6033      	strmi	r3, [r6, #0]
 800d45e:	6825      	ldr	r5, [r4, #0]
 800d460:	f015 0506 	ands.w	r5, r5, #6
 800d464:	d106      	bne.n	800d474 <_printf_common+0x48>
 800d466:	f104 0a19 	add.w	sl, r4, #25
 800d46a:	68e3      	ldr	r3, [r4, #12]
 800d46c:	6832      	ldr	r2, [r6, #0]
 800d46e:	1a9b      	subs	r3, r3, r2
 800d470:	42ab      	cmp	r3, r5
 800d472:	dc28      	bgt.n	800d4c6 <_printf_common+0x9a>
 800d474:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d478:	1e13      	subs	r3, r2, #0
 800d47a:	6822      	ldr	r2, [r4, #0]
 800d47c:	bf18      	it	ne
 800d47e:	2301      	movne	r3, #1
 800d480:	0692      	lsls	r2, r2, #26
 800d482:	d42d      	bmi.n	800d4e0 <_printf_common+0xb4>
 800d484:	4649      	mov	r1, r9
 800d486:	4638      	mov	r0, r7
 800d488:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d48c:	47c0      	blx	r8
 800d48e:	3001      	adds	r0, #1
 800d490:	d020      	beq.n	800d4d4 <_printf_common+0xa8>
 800d492:	6823      	ldr	r3, [r4, #0]
 800d494:	68e5      	ldr	r5, [r4, #12]
 800d496:	f003 0306 	and.w	r3, r3, #6
 800d49a:	2b04      	cmp	r3, #4
 800d49c:	bf18      	it	ne
 800d49e:	2500      	movne	r5, #0
 800d4a0:	6832      	ldr	r2, [r6, #0]
 800d4a2:	f04f 0600 	mov.w	r6, #0
 800d4a6:	68a3      	ldr	r3, [r4, #8]
 800d4a8:	bf08      	it	eq
 800d4aa:	1aad      	subeq	r5, r5, r2
 800d4ac:	6922      	ldr	r2, [r4, #16]
 800d4ae:	bf08      	it	eq
 800d4b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	bfc4      	itt	gt
 800d4b8:	1a9b      	subgt	r3, r3, r2
 800d4ba:	18ed      	addgt	r5, r5, r3
 800d4bc:	341a      	adds	r4, #26
 800d4be:	42b5      	cmp	r5, r6
 800d4c0:	d11a      	bne.n	800d4f8 <_printf_common+0xcc>
 800d4c2:	2000      	movs	r0, #0
 800d4c4:	e008      	b.n	800d4d8 <_printf_common+0xac>
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	4652      	mov	r2, sl
 800d4ca:	4649      	mov	r1, r9
 800d4cc:	4638      	mov	r0, r7
 800d4ce:	47c0      	blx	r8
 800d4d0:	3001      	adds	r0, #1
 800d4d2:	d103      	bne.n	800d4dc <_printf_common+0xb0>
 800d4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4dc:	3501      	adds	r5, #1
 800d4de:	e7c4      	b.n	800d46a <_printf_common+0x3e>
 800d4e0:	2030      	movs	r0, #48	; 0x30
 800d4e2:	18e1      	adds	r1, r4, r3
 800d4e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d4e8:	1c5a      	adds	r2, r3, #1
 800d4ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d4ee:	4422      	add	r2, r4
 800d4f0:	3302      	adds	r3, #2
 800d4f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d4f6:	e7c5      	b.n	800d484 <_printf_common+0x58>
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	4622      	mov	r2, r4
 800d4fc:	4649      	mov	r1, r9
 800d4fe:	4638      	mov	r0, r7
 800d500:	47c0      	blx	r8
 800d502:	3001      	adds	r0, #1
 800d504:	d0e6      	beq.n	800d4d4 <_printf_common+0xa8>
 800d506:	3601      	adds	r6, #1
 800d508:	e7d9      	b.n	800d4be <_printf_common+0x92>
	...

0800d50c <_printf_i>:
 800d50c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d510:	7e0f      	ldrb	r7, [r1, #24]
 800d512:	4691      	mov	r9, r2
 800d514:	2f78      	cmp	r7, #120	; 0x78
 800d516:	4680      	mov	r8, r0
 800d518:	460c      	mov	r4, r1
 800d51a:	469a      	mov	sl, r3
 800d51c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d51e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d522:	d807      	bhi.n	800d534 <_printf_i+0x28>
 800d524:	2f62      	cmp	r7, #98	; 0x62
 800d526:	d80a      	bhi.n	800d53e <_printf_i+0x32>
 800d528:	2f00      	cmp	r7, #0
 800d52a:	f000 80d9 	beq.w	800d6e0 <_printf_i+0x1d4>
 800d52e:	2f58      	cmp	r7, #88	; 0x58
 800d530:	f000 80a4 	beq.w	800d67c <_printf_i+0x170>
 800d534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d538:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d53c:	e03a      	b.n	800d5b4 <_printf_i+0xa8>
 800d53e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d542:	2b15      	cmp	r3, #21
 800d544:	d8f6      	bhi.n	800d534 <_printf_i+0x28>
 800d546:	a101      	add	r1, pc, #4	; (adr r1, 800d54c <_printf_i+0x40>)
 800d548:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d54c:	0800d5a5 	.word	0x0800d5a5
 800d550:	0800d5b9 	.word	0x0800d5b9
 800d554:	0800d535 	.word	0x0800d535
 800d558:	0800d535 	.word	0x0800d535
 800d55c:	0800d535 	.word	0x0800d535
 800d560:	0800d535 	.word	0x0800d535
 800d564:	0800d5b9 	.word	0x0800d5b9
 800d568:	0800d535 	.word	0x0800d535
 800d56c:	0800d535 	.word	0x0800d535
 800d570:	0800d535 	.word	0x0800d535
 800d574:	0800d535 	.word	0x0800d535
 800d578:	0800d6c7 	.word	0x0800d6c7
 800d57c:	0800d5e9 	.word	0x0800d5e9
 800d580:	0800d6a9 	.word	0x0800d6a9
 800d584:	0800d535 	.word	0x0800d535
 800d588:	0800d535 	.word	0x0800d535
 800d58c:	0800d6e9 	.word	0x0800d6e9
 800d590:	0800d535 	.word	0x0800d535
 800d594:	0800d5e9 	.word	0x0800d5e9
 800d598:	0800d535 	.word	0x0800d535
 800d59c:	0800d535 	.word	0x0800d535
 800d5a0:	0800d6b1 	.word	0x0800d6b1
 800d5a4:	682b      	ldr	r3, [r5, #0]
 800d5a6:	1d1a      	adds	r2, r3, #4
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	602a      	str	r2, [r5, #0]
 800d5ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d5b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	e0a4      	b.n	800d702 <_printf_i+0x1f6>
 800d5b8:	6820      	ldr	r0, [r4, #0]
 800d5ba:	6829      	ldr	r1, [r5, #0]
 800d5bc:	0606      	lsls	r6, r0, #24
 800d5be:	f101 0304 	add.w	r3, r1, #4
 800d5c2:	d50a      	bpl.n	800d5da <_printf_i+0xce>
 800d5c4:	680e      	ldr	r6, [r1, #0]
 800d5c6:	602b      	str	r3, [r5, #0]
 800d5c8:	2e00      	cmp	r6, #0
 800d5ca:	da03      	bge.n	800d5d4 <_printf_i+0xc8>
 800d5cc:	232d      	movs	r3, #45	; 0x2d
 800d5ce:	4276      	negs	r6, r6
 800d5d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5d4:	230a      	movs	r3, #10
 800d5d6:	485e      	ldr	r0, [pc, #376]	; (800d750 <_printf_i+0x244>)
 800d5d8:	e019      	b.n	800d60e <_printf_i+0x102>
 800d5da:	680e      	ldr	r6, [r1, #0]
 800d5dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d5e0:	602b      	str	r3, [r5, #0]
 800d5e2:	bf18      	it	ne
 800d5e4:	b236      	sxthne	r6, r6
 800d5e6:	e7ef      	b.n	800d5c8 <_printf_i+0xbc>
 800d5e8:	682b      	ldr	r3, [r5, #0]
 800d5ea:	6820      	ldr	r0, [r4, #0]
 800d5ec:	1d19      	adds	r1, r3, #4
 800d5ee:	6029      	str	r1, [r5, #0]
 800d5f0:	0601      	lsls	r1, r0, #24
 800d5f2:	d501      	bpl.n	800d5f8 <_printf_i+0xec>
 800d5f4:	681e      	ldr	r6, [r3, #0]
 800d5f6:	e002      	b.n	800d5fe <_printf_i+0xf2>
 800d5f8:	0646      	lsls	r6, r0, #25
 800d5fa:	d5fb      	bpl.n	800d5f4 <_printf_i+0xe8>
 800d5fc:	881e      	ldrh	r6, [r3, #0]
 800d5fe:	2f6f      	cmp	r7, #111	; 0x6f
 800d600:	bf0c      	ite	eq
 800d602:	2308      	moveq	r3, #8
 800d604:	230a      	movne	r3, #10
 800d606:	4852      	ldr	r0, [pc, #328]	; (800d750 <_printf_i+0x244>)
 800d608:	2100      	movs	r1, #0
 800d60a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d60e:	6865      	ldr	r5, [r4, #4]
 800d610:	2d00      	cmp	r5, #0
 800d612:	bfa8      	it	ge
 800d614:	6821      	ldrge	r1, [r4, #0]
 800d616:	60a5      	str	r5, [r4, #8]
 800d618:	bfa4      	itt	ge
 800d61a:	f021 0104 	bicge.w	r1, r1, #4
 800d61e:	6021      	strge	r1, [r4, #0]
 800d620:	b90e      	cbnz	r6, 800d626 <_printf_i+0x11a>
 800d622:	2d00      	cmp	r5, #0
 800d624:	d04d      	beq.n	800d6c2 <_printf_i+0x1b6>
 800d626:	4615      	mov	r5, r2
 800d628:	fbb6 f1f3 	udiv	r1, r6, r3
 800d62c:	fb03 6711 	mls	r7, r3, r1, r6
 800d630:	5dc7      	ldrb	r7, [r0, r7]
 800d632:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d636:	4637      	mov	r7, r6
 800d638:	42bb      	cmp	r3, r7
 800d63a:	460e      	mov	r6, r1
 800d63c:	d9f4      	bls.n	800d628 <_printf_i+0x11c>
 800d63e:	2b08      	cmp	r3, #8
 800d640:	d10b      	bne.n	800d65a <_printf_i+0x14e>
 800d642:	6823      	ldr	r3, [r4, #0]
 800d644:	07de      	lsls	r6, r3, #31
 800d646:	d508      	bpl.n	800d65a <_printf_i+0x14e>
 800d648:	6923      	ldr	r3, [r4, #16]
 800d64a:	6861      	ldr	r1, [r4, #4]
 800d64c:	4299      	cmp	r1, r3
 800d64e:	bfde      	ittt	le
 800d650:	2330      	movle	r3, #48	; 0x30
 800d652:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d656:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d65a:	1b52      	subs	r2, r2, r5
 800d65c:	6122      	str	r2, [r4, #16]
 800d65e:	464b      	mov	r3, r9
 800d660:	4621      	mov	r1, r4
 800d662:	4640      	mov	r0, r8
 800d664:	f8cd a000 	str.w	sl, [sp]
 800d668:	aa03      	add	r2, sp, #12
 800d66a:	f7ff fedf 	bl	800d42c <_printf_common>
 800d66e:	3001      	adds	r0, #1
 800d670:	d14c      	bne.n	800d70c <_printf_i+0x200>
 800d672:	f04f 30ff 	mov.w	r0, #4294967295
 800d676:	b004      	add	sp, #16
 800d678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d67c:	4834      	ldr	r0, [pc, #208]	; (800d750 <_printf_i+0x244>)
 800d67e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d682:	6829      	ldr	r1, [r5, #0]
 800d684:	6823      	ldr	r3, [r4, #0]
 800d686:	f851 6b04 	ldr.w	r6, [r1], #4
 800d68a:	6029      	str	r1, [r5, #0]
 800d68c:	061d      	lsls	r5, r3, #24
 800d68e:	d514      	bpl.n	800d6ba <_printf_i+0x1ae>
 800d690:	07df      	lsls	r7, r3, #31
 800d692:	bf44      	itt	mi
 800d694:	f043 0320 	orrmi.w	r3, r3, #32
 800d698:	6023      	strmi	r3, [r4, #0]
 800d69a:	b91e      	cbnz	r6, 800d6a4 <_printf_i+0x198>
 800d69c:	6823      	ldr	r3, [r4, #0]
 800d69e:	f023 0320 	bic.w	r3, r3, #32
 800d6a2:	6023      	str	r3, [r4, #0]
 800d6a4:	2310      	movs	r3, #16
 800d6a6:	e7af      	b.n	800d608 <_printf_i+0xfc>
 800d6a8:	6823      	ldr	r3, [r4, #0]
 800d6aa:	f043 0320 	orr.w	r3, r3, #32
 800d6ae:	6023      	str	r3, [r4, #0]
 800d6b0:	2378      	movs	r3, #120	; 0x78
 800d6b2:	4828      	ldr	r0, [pc, #160]	; (800d754 <_printf_i+0x248>)
 800d6b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d6b8:	e7e3      	b.n	800d682 <_printf_i+0x176>
 800d6ba:	0659      	lsls	r1, r3, #25
 800d6bc:	bf48      	it	mi
 800d6be:	b2b6      	uxthmi	r6, r6
 800d6c0:	e7e6      	b.n	800d690 <_printf_i+0x184>
 800d6c2:	4615      	mov	r5, r2
 800d6c4:	e7bb      	b.n	800d63e <_printf_i+0x132>
 800d6c6:	682b      	ldr	r3, [r5, #0]
 800d6c8:	6826      	ldr	r6, [r4, #0]
 800d6ca:	1d18      	adds	r0, r3, #4
 800d6cc:	6961      	ldr	r1, [r4, #20]
 800d6ce:	6028      	str	r0, [r5, #0]
 800d6d0:	0635      	lsls	r5, r6, #24
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	d501      	bpl.n	800d6da <_printf_i+0x1ce>
 800d6d6:	6019      	str	r1, [r3, #0]
 800d6d8:	e002      	b.n	800d6e0 <_printf_i+0x1d4>
 800d6da:	0670      	lsls	r0, r6, #25
 800d6dc:	d5fb      	bpl.n	800d6d6 <_printf_i+0x1ca>
 800d6de:	8019      	strh	r1, [r3, #0]
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	4615      	mov	r5, r2
 800d6e4:	6123      	str	r3, [r4, #16]
 800d6e6:	e7ba      	b.n	800d65e <_printf_i+0x152>
 800d6e8:	682b      	ldr	r3, [r5, #0]
 800d6ea:	2100      	movs	r1, #0
 800d6ec:	1d1a      	adds	r2, r3, #4
 800d6ee:	602a      	str	r2, [r5, #0]
 800d6f0:	681d      	ldr	r5, [r3, #0]
 800d6f2:	6862      	ldr	r2, [r4, #4]
 800d6f4:	4628      	mov	r0, r5
 800d6f6:	f000 f82f 	bl	800d758 <memchr>
 800d6fa:	b108      	cbz	r0, 800d700 <_printf_i+0x1f4>
 800d6fc:	1b40      	subs	r0, r0, r5
 800d6fe:	6060      	str	r0, [r4, #4]
 800d700:	6863      	ldr	r3, [r4, #4]
 800d702:	6123      	str	r3, [r4, #16]
 800d704:	2300      	movs	r3, #0
 800d706:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d70a:	e7a8      	b.n	800d65e <_printf_i+0x152>
 800d70c:	462a      	mov	r2, r5
 800d70e:	4649      	mov	r1, r9
 800d710:	4640      	mov	r0, r8
 800d712:	6923      	ldr	r3, [r4, #16]
 800d714:	47d0      	blx	sl
 800d716:	3001      	adds	r0, #1
 800d718:	d0ab      	beq.n	800d672 <_printf_i+0x166>
 800d71a:	6823      	ldr	r3, [r4, #0]
 800d71c:	079b      	lsls	r3, r3, #30
 800d71e:	d413      	bmi.n	800d748 <_printf_i+0x23c>
 800d720:	68e0      	ldr	r0, [r4, #12]
 800d722:	9b03      	ldr	r3, [sp, #12]
 800d724:	4298      	cmp	r0, r3
 800d726:	bfb8      	it	lt
 800d728:	4618      	movlt	r0, r3
 800d72a:	e7a4      	b.n	800d676 <_printf_i+0x16a>
 800d72c:	2301      	movs	r3, #1
 800d72e:	4632      	mov	r2, r6
 800d730:	4649      	mov	r1, r9
 800d732:	4640      	mov	r0, r8
 800d734:	47d0      	blx	sl
 800d736:	3001      	adds	r0, #1
 800d738:	d09b      	beq.n	800d672 <_printf_i+0x166>
 800d73a:	3501      	adds	r5, #1
 800d73c:	68e3      	ldr	r3, [r4, #12]
 800d73e:	9903      	ldr	r1, [sp, #12]
 800d740:	1a5b      	subs	r3, r3, r1
 800d742:	42ab      	cmp	r3, r5
 800d744:	dcf2      	bgt.n	800d72c <_printf_i+0x220>
 800d746:	e7eb      	b.n	800d720 <_printf_i+0x214>
 800d748:	2500      	movs	r5, #0
 800d74a:	f104 0619 	add.w	r6, r4, #25
 800d74e:	e7f5      	b.n	800d73c <_printf_i+0x230>
 800d750:	0800da49 	.word	0x0800da49
 800d754:	0800da5a 	.word	0x0800da5a

0800d758 <memchr>:
 800d758:	4603      	mov	r3, r0
 800d75a:	b510      	push	{r4, lr}
 800d75c:	b2c9      	uxtb	r1, r1
 800d75e:	4402      	add	r2, r0
 800d760:	4293      	cmp	r3, r2
 800d762:	4618      	mov	r0, r3
 800d764:	d101      	bne.n	800d76a <memchr+0x12>
 800d766:	2000      	movs	r0, #0
 800d768:	e003      	b.n	800d772 <memchr+0x1a>
 800d76a:	7804      	ldrb	r4, [r0, #0]
 800d76c:	3301      	adds	r3, #1
 800d76e:	428c      	cmp	r4, r1
 800d770:	d1f6      	bne.n	800d760 <memchr+0x8>
 800d772:	bd10      	pop	{r4, pc}

0800d774 <memmove>:
 800d774:	4288      	cmp	r0, r1
 800d776:	b510      	push	{r4, lr}
 800d778:	eb01 0402 	add.w	r4, r1, r2
 800d77c:	d902      	bls.n	800d784 <memmove+0x10>
 800d77e:	4284      	cmp	r4, r0
 800d780:	4623      	mov	r3, r4
 800d782:	d807      	bhi.n	800d794 <memmove+0x20>
 800d784:	1e43      	subs	r3, r0, #1
 800d786:	42a1      	cmp	r1, r4
 800d788:	d008      	beq.n	800d79c <memmove+0x28>
 800d78a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d78e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d792:	e7f8      	b.n	800d786 <memmove+0x12>
 800d794:	4601      	mov	r1, r0
 800d796:	4402      	add	r2, r0
 800d798:	428a      	cmp	r2, r1
 800d79a:	d100      	bne.n	800d79e <memmove+0x2a>
 800d79c:	bd10      	pop	{r4, pc}
 800d79e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d7a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d7a6:	e7f7      	b.n	800d798 <memmove+0x24>

0800d7a8 <_realloc_r>:
 800d7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7ac:	4680      	mov	r8, r0
 800d7ae:	4614      	mov	r4, r2
 800d7b0:	460e      	mov	r6, r1
 800d7b2:	b921      	cbnz	r1, 800d7be <_realloc_r+0x16>
 800d7b4:	4611      	mov	r1, r2
 800d7b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7ba:	f7ff bbc1 	b.w	800cf40 <_malloc_r>
 800d7be:	b92a      	cbnz	r2, 800d7cc <_realloc_r+0x24>
 800d7c0:	f7ff fb56 	bl	800ce70 <_free_r>
 800d7c4:	4625      	mov	r5, r4
 800d7c6:	4628      	mov	r0, r5
 800d7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7cc:	f000 f81b 	bl	800d806 <_malloc_usable_size_r>
 800d7d0:	4284      	cmp	r4, r0
 800d7d2:	4607      	mov	r7, r0
 800d7d4:	d802      	bhi.n	800d7dc <_realloc_r+0x34>
 800d7d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d7da:	d812      	bhi.n	800d802 <_realloc_r+0x5a>
 800d7dc:	4621      	mov	r1, r4
 800d7de:	4640      	mov	r0, r8
 800d7e0:	f7ff fbae 	bl	800cf40 <_malloc_r>
 800d7e4:	4605      	mov	r5, r0
 800d7e6:	2800      	cmp	r0, #0
 800d7e8:	d0ed      	beq.n	800d7c6 <_realloc_r+0x1e>
 800d7ea:	42bc      	cmp	r4, r7
 800d7ec:	4622      	mov	r2, r4
 800d7ee:	4631      	mov	r1, r6
 800d7f0:	bf28      	it	cs
 800d7f2:	463a      	movcs	r2, r7
 800d7f4:	f7ff fb26 	bl	800ce44 <memcpy>
 800d7f8:	4631      	mov	r1, r6
 800d7fa:	4640      	mov	r0, r8
 800d7fc:	f7ff fb38 	bl	800ce70 <_free_r>
 800d800:	e7e1      	b.n	800d7c6 <_realloc_r+0x1e>
 800d802:	4635      	mov	r5, r6
 800d804:	e7df      	b.n	800d7c6 <_realloc_r+0x1e>

0800d806 <_malloc_usable_size_r>:
 800d806:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d80a:	1f18      	subs	r0, r3, #4
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	bfbc      	itt	lt
 800d810:	580b      	ldrlt	r3, [r1, r0]
 800d812:	18c0      	addlt	r0, r0, r3
 800d814:	4770      	bx	lr
	...

0800d818 <_init>:
 800d818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d81a:	bf00      	nop
 800d81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d81e:	bc08      	pop	{r3}
 800d820:	469e      	mov	lr, r3
 800d822:	4770      	bx	lr

0800d824 <_fini>:
 800d824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d826:	bf00      	nop
 800d828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d82a:	bc08      	pop	{r3}
 800d82c:	469e      	mov	lr, r3
 800d82e:	4770      	bx	lr
